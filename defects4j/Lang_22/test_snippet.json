[
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.FractionTest(java.lang.String)",
        "snippet": "    public FractionTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testConstants()",
        "snippet": "    public void testConstants() {\n        assertEquals(0, Fraction.ZERO.getNumerator());\n        assertEquals(1, Fraction.ZERO.getDenominator());\n        \n        assertEquals(1, Fraction.ONE.getNumerator());\n        assertEquals(1, Fraction.ONE.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_HALF.getNumerator());\n        assertEquals(2, Fraction.ONE_HALF.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_THIRD.getNumerator());\n        assertEquals(3, Fraction.ONE_THIRD.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_THIRDS.getNumerator());\n        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_QUARTER.getNumerator());\n        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());\n        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());\n        \n        assertEquals(1, Fraction.ONE_FIFTH.getNumerator());\n        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());\n        \n        assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());\n        \n        assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());\n        \n        assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());\n        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\n    }\n",
        "begin_line": 40,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 54)",
            "(line 42,col 9)-(line 42,col 56)",
            "(line 44,col 9)-(line 44,col 53)",
            "(line 45,col 9)-(line 45,col 55)",
            "(line 47,col 9)-(line 47,col 58)",
            "(line 48,col 9)-(line 48,col 60)",
            "(line 50,col 9)-(line 50,col 59)",
            "(line 51,col 9)-(line 51,col 61)",
            "(line 53,col 9)-(line 53,col 60)",
            "(line 54,col 9)-(line 54,col 62)",
            "(line 56,col 9)-(line 56,col 61)",
            "(line 57,col 9)-(line 57,col 63)",
            "(line 59,col 9)-(line 59,col 62)",
            "(line 60,col 9)-(line 60,col 64)",
            "(line 62,col 9)-(line 62,col 64)",
            "(line 63,col 9)-(line 63,col 66)",
            "(line 65,col 9)-(line 65,col 59)",
            "(line 66,col 9)-(line 66,col 61)",
            "(line 68,col 9)-(line 68,col 60)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 71,col 9)-(line 71,col 62)",
            "(line 72,col 9)-(line 72,col 64)",
            "(line 74,col 9)-(line 74,col 61)",
            "(line 75,col 9)-(line 75,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_int_int()",
        "snippet": "    public void testFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(23, 345);\n        assertEquals(23, f.getNumerator());\n        assertEquals(345, f.getDenominator());\n        \n        // improper\n        f = Fraction.getFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getFraction(-6, 10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(6, -10);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f = Fraction.getFraction(-6, -10);\n        assertEquals(6, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large: can't represent as unsimplified fraction, although\n        try {\n            f = Fraction.getFraction(4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 78,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 26)",
            "(line 82,col 9)-(line 82,col 39)",
            "(line 83,col 9)-(line 83,col 42)",
            "(line 84,col 9)-(line 84,col 44)",
            "(line 86,col 9)-(line 86,col 39)",
            "(line 87,col 9)-(line 87,col 42)",
            "(line 88,col 9)-(line 88,col 44)",
            "(line 91,col 9)-(line 91,col 39)",
            "(line 92,col 9)-(line 92,col 42)",
            "(line 93,col 9)-(line 93,col 44)",
            "(line 95,col 9)-(line 95,col 39)",
            "(line 96,col 9)-(line 96,col 42)",
            "(line 97,col 9)-(line 97,col 44)",
            "(line 99,col 9)-(line 99,col 42)",
            "(line 100,col 9)-(line 100,col 43)",
            "(line 101,col 9)-(line 101,col 46)",
            "(line 104,col 9)-(line 104,col 40)",
            "(line 105,col 9)-(line 105,col 43)",
            "(line 106,col 9)-(line 106,col 44)",
            "(line 109,col 9)-(line 109,col 41)",
            "(line 110,col 9)-(line 110,col 43)",
            "(line 111,col 9)-(line 111,col 45)",
            "(line 113,col 9)-(line 113,col 41)",
            "(line 114,col 9)-(line 114,col 43)",
            "(line 115,col 9)-(line 115,col 45)",
            "(line 117,col 9)-(line 117,col 42)",
            "(line 118,col 9)-(line 118,col 42)",
            "(line 119,col 9)-(line 119,col 45)",
            "(line 122,col 9)-(line 125,col 43)",
            "(line 127,col 9)-(line 130,col 43)",
            "(line 132,col 9)-(line 135,col 43)",
            "(line 138,col 9)-(line 141,col 43)",
            "(line 142,col 9)-(line 145,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_int_int_int()",
        "snippet": "    public void testFactory_int_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getFraction(0, 0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(2, 0, 2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 1, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // normal\n        f = Fraction.getFraction(1, 1, 2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negatives\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // negative whole\n        f = Fraction.getFraction(-1, 6, 10);\n        assertEquals(-16, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(-1, -6, 10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        try {\n            f = Fraction.getFraction(-1, 6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -6, -10);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero denominator\n        try {\n            f = Fraction.getFraction(0, 1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(1, 2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-1, -3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2); \n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // very large\n        f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);\n        assertEquals(-Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        try {\n            // negative denominators not allowed in this constructor.\n            f = Fraction.getFraction(0, 4, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(1, 1, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 148,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 26)",
            "(line 152,col 9)-(line 152,col 42)",
            "(line 153,col 9)-(line 153,col 42)",
            "(line 154,col 9)-(line 154,col 44)",
            "(line 156,col 9)-(line 156,col 42)",
            "(line 157,col 9)-(line 157,col 42)",
            "(line 158,col 9)-(line 158,col 44)",
            "(line 160,col 9)-(line 160,col 42)",
            "(line 161,col 9)-(line 161,col 42)",
            "(line 162,col 9)-(line 162,col 44)",
            "(line 165,col 9)-(line 165,col 42)",
            "(line 166,col 9)-(line 166,col 42)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 170,col 9)-(line 173,col 43)",
            "(line 175,col 9)-(line 178,col 43)",
            "(line 180,col 9)-(line 183,col 43)",
            "(line 186,col 9)-(line 186,col 44)",
            "(line 187,col 9)-(line 187,col 44)",
            "(line 188,col 9)-(line 188,col 45)",
            "(line 190,col 9)-(line 193,col 43)",
            "(line 195,col 9)-(line 198,col 43)",
            "(line 200,col 9)-(line 203,col 43)",
            "(line 206,col 9)-(line 209,col 43)",
            "(line 211,col 9)-(line 214,col 43)",
            "(line 216,col 9)-(line 219,col 43)",
            "(line 221,col 9)-(line 224,col 43)",
            "(line 226,col 9)-(line 229,col 43)",
            "(line 232,col 9)-(line 232,col 59)",
            "(line 233,col 9)-(line 233,col 59)",
            "(line 234,col 9)-(line 234,col 60)",
            "(line 236,col 9)-(line 240,col 43)",
            "(line 241,col 9)-(line 244,col 43)",
            "(line 245,col 9)-(line 248,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testReducedFactory_int_int()",
        "snippet": "    public void testReducedFactory_int_int() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n    }\n",
        "begin_line": 250,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 26)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 42)",
            "(line 256,col 9)-(line 256,col 44)",
            "(line 259,col 9)-(line 259,col 46)",
            "(line 260,col 9)-(line 260,col 42)",
            "(line 261,col 9)-(line 261,col 44)",
            "(line 263,col 9)-(line 263,col 46)",
            "(line 264,col 9)-(line 264,col 42)",
            "(line 265,col 9)-(line 265,col 44)",
            "(line 268,col 9)-(line 268,col 47)",
            "(line 269,col 9)-(line 269,col 43)",
            "(line 270,col 9)-(line 270,col 44)",
            "(line 273,col 9)-(line 273,col 48)",
            "(line 274,col 9)-(line 274,col 43)",
            "(line 275,col 9)-(line 275,col 44)",
            "(line 277,col 9)-(line 277,col 48)",
            "(line 278,col 9)-(line 278,col 43)",
            "(line 279,col 9)-(line 279,col 44)",
            "(line 281,col 9)-(line 281,col 49)",
            "(line 282,col 9)-(line 282,col 42)",
            "(line 283,col 9)-(line 283,col 44)",
            "(line 286,col 9)-(line 289,col 43)",
            "(line 291,col 9)-(line 294,col 43)",
            "(line 296,col 9)-(line 299,col 43)",
            "(line 302,col 9)-(line 302,col 46)",
            "(line 303,col 9)-(line 303,col 42)",
            "(line 304,col 9)-(line 304,col 44)",
            "(line 306,col 9)-(line 306,col 46)",
            "(line 307,col 9)-(line 307,col 42)",
            "(line 308,col 9)-(line 308,col 44)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 311,col 9)-(line 311,col 42)",
            "(line 312,col 9)-(line 312,col 44)",
            "(line 314,col 9)-(line 314,col 48)",
            "(line 315,col 9)-(line 315,col 42)",
            "(line 316,col 9)-(line 316,col 44)",
            "(line 318,col 9)-(line 318,col 49)",
            "(line 319,col 9)-(line 319,col 43)",
            "(line 320,col 9)-(line 320,col 44)",
            "(line 324,col 9)-(line 324,col 63)",
            "(line 325,col 9)-(line 325,col 42)",
            "(line 326,col 9)-(line 326,col 67)",
            "(line 329,col 9)-(line 332,col 43)",
            "(line 335,col 9)-(line 335,col 62)",
            "(line 336,col 9)-(line 336,col 62)",
            "(line 337,col 9)-(line 337,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_double()",
        "snippet": "    public void testFactory_double() {\n        Fraction f = null;\n        \n        try {\n            f = Fraction.getFraction(Double.NaN);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.POSITIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        // zero\n        f = Fraction.getFraction(0.0d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one\n        f = Fraction.getFraction(1.0d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // one half\n        f = Fraction.getFraction(0.5d);\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        // negative\n        f = Fraction.getFraction(-0.875d);\n        assertEquals(-7, f.getNumerator());\n        assertEquals(8, f.getDenominator());\n        \n        // over 1\n        f = Fraction.getFraction(1.25d);\n        assertEquals(5, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        // two thirds\n        f = Fraction.getFraction(0.66666d);\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        // small\n        f = Fraction.getFraction(1.0d/10001d);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        // normal\n        Fraction f2 = null;\n        for (int i = 1; i <= 100; i++) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n        // save time by skipping some tests!  (\n        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator\n            for (int j = 1; j <= i; j++) {  // numerator\n                try {\n                    f = Fraction.getFraction((double) j / (double) i);\n                } catch (ArithmeticException ex) {\n                    System.err.println(j + \" \" + i);\n                    throw ex;\n                }\n                f2 = Fraction.getReducedFraction(j, i);\n                assertEquals(f2.getNumerator(), f.getNumerator());\n                assertEquals(f2.getDenominator(), f.getDenominator());\n            }\n        }\n    }\n",
        "begin_line": 340,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 26)",
            "(line 343,col 9)-(line 346,col 43)",
            "(line 348,col 9)-(line 351,col 43)",
            "(line 353,col 9)-(line 356,col 43)",
            "(line 358,col 9)-(line 361,col 43)",
            "(line 364,col 9)-(line 364,col 39)",
            "(line 365,col 9)-(line 365,col 42)",
            "(line 366,col 9)-(line 366,col 44)",
            "(line 369,col 9)-(line 369,col 39)",
            "(line 370,col 9)-(line 370,col 42)",
            "(line 371,col 9)-(line 371,col 44)",
            "(line 374,col 9)-(line 374,col 39)",
            "(line 375,col 9)-(line 375,col 42)",
            "(line 376,col 9)-(line 376,col 44)",
            "(line 379,col 9)-(line 379,col 42)",
            "(line 380,col 9)-(line 380,col 43)",
            "(line 381,col 9)-(line 381,col 44)",
            "(line 384,col 9)-(line 384,col 40)",
            "(line 385,col 9)-(line 385,col 42)",
            "(line 386,col 9)-(line 386,col 44)",
            "(line 389,col 9)-(line 389,col 43)",
            "(line 390,col 9)-(line 390,col 42)",
            "(line 391,col 9)-(line 391,col 44)",
            "(line 394,col 9)-(line 394,col 46)",
            "(line 395,col 9)-(line 395,col 42)",
            "(line 396,col 9)-(line 396,col 44)",
            "(line 399,col 9)-(line 399,col 27)",
            "(line 400,col 9)-(line 412,col 9)",
            "(line 414,col 9)-(line 426,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String()",
        "snippet": "    public void testFactory_String() {\n        try {\n            Fraction.getFraction(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 429,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 430,col 9)-(line 433,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String_double()",
        "snippet": "    public void testFactory_String_double() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0.0\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"0.66666\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2.3R\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2147483648\"); // too big\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\".\");\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }\n",
        "begin_line": 437,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 26)",
            "(line 440,col 9)-(line 440,col 40)",
            "(line 441,col 9)-(line 441,col 42)",
            "(line 442,col 9)-(line 442,col 44)",
            "(line 444,col 9)-(line 444,col 40)",
            "(line 445,col 9)-(line 445,col 42)",
            "(line 446,col 9)-(line 446,col 44)",
            "(line 448,col 9)-(line 448,col 40)",
            "(line 449,col 9)-(line 449,col 42)",
            "(line 450,col 9)-(line 450,col 44)",
            "(line 452,col 9)-(line 452,col 44)",
            "(line 453,col 9)-(line 453,col 42)",
            "(line 454,col 9)-(line 454,col 44)",
            "(line 456,col 9)-(line 459,col 45)",
            "(line 461,col 9)-(line 464,col 45)",
            "(line 466,col 9)-(line 469,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String_proper()",
        "snippet": "    public void testFactory_String_proper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0 0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 1/5\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7 1/2\");\n        assertEquals(15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1 2/4\");\n        assertEquals(6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-7 1/2\");\n        assertEquals(-15, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"-1 2/4\");\n        assertEquals(-6, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"a 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 b/4\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2 \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n\n        try {\n            f = Fraction.getFraction(\" 3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\" \");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }\n",
        "begin_line": 472,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 473,col 26)",
            "(line 475,col 9)-(line 475,col 42)",
            "(line 476,col 9)-(line 476,col 42)",
            "(line 477,col 9)-(line 477,col 44)",
            "(line 479,col 9)-(line 479,col 42)",
            "(line 480,col 9)-(line 480,col 42)",
            "(line 481,col 9)-(line 481,col 44)",
            "(line 483,col 9)-(line 483,col 42)",
            "(line 484,col 9)-(line 484,col 43)",
            "(line 485,col 9)-(line 485,col 44)",
            "(line 487,col 9)-(line 487,col 42)",
            "(line 488,col 9)-(line 488,col 42)",
            "(line 489,col 9)-(line 489,col 44)",
            "(line 491,col 9)-(line 491,col 43)",
            "(line 492,col 9)-(line 492,col 44)",
            "(line 493,col 9)-(line 493,col 44)",
            "(line 495,col 9)-(line 495,col 43)",
            "(line 496,col 9)-(line 496,col 43)",
            "(line 497,col 9)-(line 497,col 44)",
            "(line 499,col 9)-(line 502,col 45)",
            "(line 504,col 9)-(line 507,col 45)",
            "(line 509,col 9)-(line 512,col 45)",
            "(line 514,col 9)-(line 517,col 45)",
            "(line 519,col 9)-(line 522,col 45)",
            "(line 524,col 9)-(line 527,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testFactory_String_improper()",
        "snippet": "    public void testFactory_String_improper() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(\"0/1\");\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/5\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f = Fraction.getFraction(\"1/2\");\n        assertEquals(1, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/3\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"7/3\");\n        assertEquals(7, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(\"2/4\");\n        assertEquals(2, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        try {\n            f = Fraction.getFraction(\"2/d\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2e/3\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"2/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n        \n        try {\n            f = Fraction.getFraction(\"/\");\n            fail(\"expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {}\n    }\n",
        "begin_line": 530,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 26)",
            "(line 533,col 9)-(line 533,col 40)",
            "(line 534,col 9)-(line 534,col 42)",
            "(line 535,col 9)-(line 535,col 44)",
            "(line 537,col 9)-(line 537,col 40)",
            "(line 538,col 9)-(line 538,col 42)",
            "(line 539,col 9)-(line 539,col 44)",
            "(line 541,col 9)-(line 541,col 40)",
            "(line 542,col 9)-(line 542,col 42)",
            "(line 543,col 9)-(line 543,col 44)",
            "(line 545,col 9)-(line 545,col 40)",
            "(line 546,col 9)-(line 546,col 42)",
            "(line 547,col 9)-(line 547,col 44)",
            "(line 549,col 9)-(line 549,col 40)",
            "(line 550,col 9)-(line 550,col 42)",
            "(line 551,col 9)-(line 551,col 44)",
            "(line 553,col 9)-(line 553,col 40)",
            "(line 554,col 9)-(line 554,col 42)",
            "(line 555,col 9)-(line 555,col 44)",
            "(line 557,col 9)-(line 560,col 45)",
            "(line 562,col 9)-(line 565,col 45)",
            "(line 567,col 9)-(line 570,col 45)",
            "(line 572,col 9)-(line 575,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testGets()",
        "snippet": "    public void testGets() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5, 6);\n        assertEquals(23, f.getNumerator());\n        assertEquals(3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(-3, 5, 6);\n        assertEquals(-23, f.getNumerator());\n        assertEquals(-3, f.getProperWhole());\n        assertEquals(5, f.getProperNumerator());\n        assertEquals(6, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(Integer.MIN_VALUE, f.getProperWhole());\n        assertEquals(0, f.getProperNumerator());\n        assertEquals(1, f.getDenominator());\n    }\n",
        "begin_line": 578,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 579,col 9)-(line 579,col 26)",
            "(line 581,col 9)-(line 581,col 42)",
            "(line 582,col 9)-(line 582,col 43)",
            "(line 583,col 9)-(line 583,col 44)",
            "(line 584,col 9)-(line 584,col 48)",
            "(line 585,col 9)-(line 585,col 44)",
            "(line 587,col 9)-(line 587,col 43)",
            "(line 588,col 9)-(line 588,col 44)",
            "(line 589,col 9)-(line 589,col 45)",
            "(line 590,col 9)-(line 590,col 48)",
            "(line 591,col 9)-(line 591,col 44)",
            "(line 593,col 9)-(line 593,col 58)",
            "(line 594,col 9)-(line 594,col 58)",
            "(line 595,col 9)-(line 595,col 60)",
            "(line 596,col 9)-(line 596,col 48)",
            "(line 597,col 9)-(line 597,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testConversions()",
        "snippet": "    public void testConversions() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 7, 8);\n        assertEquals(3, f.intValue());\n        assertEquals(3L, f.longValue());\n        assertEquals(3.875f, f.floatValue(), 0.00001f);\n        assertEquals(3.875d, f.doubleValue(), 0.00001d);\n    }\n",
        "begin_line": 600,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 601,col 9)-(line 601,col 26)",
            "(line 603,col 9)-(line 603,col 42)",
            "(line 604,col 9)-(line 604,col 38)",
            "(line 605,col 9)-(line 605,col 40)",
            "(line 606,col 9)-(line 606,col 55)",
            "(line 607,col 9)-(line 607,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testReduce()",
        "snippet": "    public void testReduce() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());\n        assertEquals(3, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(f, result);\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n        assertSame(result, Fraction.ZERO);\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());\n        assertEquals(1, result.getDenominator());\n    }\n",
        "begin_line": 610,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 611,col 9)-(line 611,col 26)",
            "(line 613,col 9)-(line 613,col 41)",
            "(line 614,col 9)-(line 614,col 37)",
            "(line 615,col 9)-(line 615,col 47)",
            "(line 616,col 9)-(line 616,col 49)",
            "(line 618,col 9)-(line 618,col 41)",
            "(line 619,col 9)-(line 619,col 28)",
            "(line 620,col 9)-(line 620,col 47)",
            "(line 621,col 9)-(line 621,col 49)",
            "(line 623,col 9)-(line 623,col 40)",
            "(line 624,col 9)-(line 624,col 28)",
            "(line 625,col 9)-(line 625,col 48)",
            "(line 626,col 9)-(line 626,col 49)",
            "(line 628,col 9)-(line 628,col 40)",
            "(line 629,col 9)-(line 629,col 28)",
            "(line 630,col 9)-(line 630,col 48)",
            "(line 631,col 9)-(line 631,col 49)",
            "(line 632,col 9)-(line 632,col 30)",
            "(line 634,col 9)-(line 634,col 39)",
            "(line 635,col 9)-(line 635,col 28)",
            "(line 636,col 9)-(line 636,col 47)",
            "(line 637,col 9)-(line 637,col 49)",
            "(line 638,col 9)-(line 638,col 30)",
            "(line 640,col 9)-(line 640,col 39)",
            "(line 641,col 9)-(line 641,col 28)",
            "(line 642,col 9)-(line 642,col 47)",
            "(line 643,col 9)-(line 643,col 49)",
            "(line 644,col 9)-(line 644,col 30)",
            "(line 646,col 9)-(line 646,col 41)",
            "(line 647,col 9)-(line 647,col 28)",
            "(line 648,col 9)-(line 648,col 47)",
            "(line 649,col 9)-(line 649,col 49)",
            "(line 650,col 9)-(line 650,col 42)",
            "(line 652,col 9)-(line 652,col 55)",
            "(line 653,col 9)-(line 653,col 28)",
            "(line 654,col 9)-(line 654,col 67)",
            "(line 655,col 9)-(line 655,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testInvert()",
        "snippet": "    public void testInvert() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.invert();\n        assertEquals(75, f.getNumerator());\n        assertEquals(50, f.getDenominator());\n        \n        f = Fraction.getFraction(4, 3);\n        f = f.invert();\n        assertEquals(3, f.getNumerator());\n        assertEquals(4, f.getDenominator());\n        \n        f = Fraction.getFraction(-15, 47);\n        f = f.invert();\n        assertEquals(-47, f.getNumerator());\n        assertEquals(15, f.getDenominator());\n        \n        f = Fraction.getFraction(0, 3);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // large values\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.invert();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.invert();\n        assertEquals(1, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n    }\n",
        "begin_line": 658,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 659,col 9)-(line 659,col 26)",
            "(line 661,col 9)-(line 661,col 41)",
            "(line 662,col 9)-(line 662,col 23)",
            "(line 663,col 9)-(line 663,col 43)",
            "(line 664,col 9)-(line 664,col 45)",
            "(line 666,col 9)-(line 666,col 39)",
            "(line 667,col 9)-(line 667,col 23)",
            "(line 668,col 9)-(line 668,col 42)",
            "(line 669,col 9)-(line 669,col 44)",
            "(line 671,col 9)-(line 671,col 42)",
            "(line 672,col 9)-(line 672,col 23)",
            "(line 673,col 9)-(line 673,col 44)",
            "(line 674,col 9)-(line 674,col 45)",
            "(line 676,col 9)-(line 676,col 39)",
            "(line 677,col 9)-(line 680,col 43)",
            "(line 683,col 9)-(line 683,col 55)",
            "(line 684,col 9)-(line 687,col 43)",
            "(line 689,col 9)-(line 689,col 55)",
            "(line 690,col 9)-(line 690,col 23)",
            "(line 691,col 9)-(line 691,col 42)",
            "(line 692,col 9)-(line 692,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testNegate()",
        "snippet": "    public void testNegate() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.negate();\n        assertEquals(-50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.negate();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        // large values\n        f = Fraction.getFraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n        f = f.negate();\n        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.negate();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 695,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 696,col 9)-(line 696,col 26)",
            "(line 698,col 9)-(line 698,col 41)",
            "(line 699,col 9)-(line 699,col 23)",
            "(line 700,col 9)-(line 700,col 44)",
            "(line 701,col 9)-(line 701,col 45)",
            "(line 703,col 9)-(line 703,col 42)",
            "(line 704,col 9)-(line 704,col 23)",
            "(line 705,col 9)-(line 705,col 43)",
            "(line 706,col 9)-(line 706,col 45)",
            "(line 709,col 9)-(line 709,col 73)",
            "(line 710,col 9)-(line 710,col 23)",
            "(line 711,col 9)-(line 711,col 60)",
            "(line 712,col 9)-(line 712,col 60)",
            "(line 714,col 9)-(line 714,col 55)",
            "(line 715,col 9)-(line 718,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testAbs()",
        "snippet": "    public void testAbs() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n        \n        f = Fraction.getFraction(-50, 75);\n        f = f.abs();\n        assertEquals(50, f.getNumerator());\n        assertEquals(75, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, -1);\n        f = f.abs();\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.abs();\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 721,
        "end_line": 749,
        "comment": "",
        "child_ranges": [
            "(line 722,col 9)-(line 722,col 26)",
            "(line 724,col 9)-(line 724,col 41)",
            "(line 725,col 9)-(line 725,col 20)",
            "(line 726,col 9)-(line 726,col 43)",
            "(line 727,col 9)-(line 727,col 45)",
            "(line 729,col 9)-(line 729,col 42)",
            "(line 730,col 9)-(line 730,col 20)",
            "(line 731,col 9)-(line 731,col 43)",
            "(line 732,col 9)-(line 732,col 45)",
            "(line 734,col 9)-(line 734,col 55)",
            "(line 735,col 9)-(line 735,col 20)",
            "(line 736,col 9)-(line 736,col 58)",
            "(line 737,col 9)-(line 737,col 44)",
            "(line 739,col 9)-(line 739,col 56)",
            "(line 740,col 9)-(line 740,col 20)",
            "(line 741,col 9)-(line 741,col 58)",
            "(line 742,col 9)-(line 742,col 44)",
            "(line 744,col 9)-(line 744,col 55)",
            "(line 745,col 9)-(line 748,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testPow()",
        "snippet": "    public void testPow() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(3, 5);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(3, 5);\n        assertSame(f, f.pow(1));\n        assertEquals(f, f.pow(1));\n\n        f = Fraction.getFraction(3, 5);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-1);\n        assertEquals(5, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f = Fraction.getFraction(3, 5);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // check unreduced fractions stay that way.\n        f = Fraction.getFraction(6, 10);\n        assertEquals(Fraction.ONE, f.pow(0));\n        \n        f = Fraction.getFraction(6, 10);\n        assertEquals(f, f.pow(1));\n        assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));\n\n        f = Fraction.getFraction(6, 10);\n        f = f.pow(2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(3);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-1);\n        assertEquals(10, f.getNumerator());\n        assertEquals(6, f.getDenominator());\n        \n        f = Fraction.getFraction(6, 10);\n        f = f.pow(-2);\n        assertEquals(25, f.getNumerator());\n        assertEquals(9, f.getDenominator());\n        \n        // zero to any positive power is still zero.\n        f = Fraction.getFraction(0, 1231);\n        f = f.pow(1);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1231, f.getDenominator());\n        f = f.pow(2);\n        assertTrue(0==f.compareTo(Fraction.ZERO));\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        // zero to negative powers should throw an exception\n        try {\n            f = f.pow(-1);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f = f.pow(Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // one to any power is still one.\n        f = Fraction.getFraction(1, 1);\n        f = f.pow(0);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(-1);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MAX_VALUE);\n        assertEquals(f, Fraction.ONE);\n        f = f.pow(Integer.MIN_VALUE);\n        assertEquals(f, Fraction.ONE);\n\n        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        // Numerator growing too negative during the pow operation.\n        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.pow(3);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n\n        f = Fraction.getFraction(65536, 1);\n        try {\n            f = f.pow(2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 751,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 752,col 9)-(line 752,col 26)",
            "(line 754,col 9)-(line 754,col 39)",
            "(line 755,col 9)-(line 755,col 45)",
            "(line 757,col 9)-(line 757,col 39)",
            "(line 758,col 9)-(line 758,col 32)",
            "(line 759,col 9)-(line 759,col 34)",
            "(line 761,col 9)-(line 761,col 39)",
            "(line 762,col 9)-(line 762,col 21)",
            "(line 763,col 9)-(line 763,col 42)",
            "(line 764,col 9)-(line 764,col 45)",
            "(line 766,col 9)-(line 766,col 39)",
            "(line 767,col 9)-(line 767,col 21)",
            "(line 768,col 9)-(line 768,col 43)",
            "(line 769,col 9)-(line 769,col 46)",
            "(line 771,col 9)-(line 771,col 39)",
            "(line 772,col 9)-(line 772,col 22)",
            "(line 773,col 9)-(line 773,col 42)",
            "(line 774,col 9)-(line 774,col 44)",
            "(line 776,col 9)-(line 776,col 39)",
            "(line 777,col 9)-(line 777,col 22)",
            "(line 778,col 9)-(line 778,col 43)",
            "(line 779,col 9)-(line 779,col 44)",
            "(line 782,col 9)-(line 782,col 40)",
            "(line 783,col 9)-(line 783,col 45)",
            "(line 785,col 9)-(line 785,col 40)",
            "(line 786,col 9)-(line 786,col 34)",
            "(line 787,col 9)-(line 787,col 64)",
            "(line 789,col 9)-(line 789,col 40)",
            "(line 790,col 9)-(line 790,col 21)",
            "(line 791,col 9)-(line 791,col 42)",
            "(line 792,col 9)-(line 792,col 45)",
            "(line 794,col 9)-(line 794,col 40)",
            "(line 795,col 9)-(line 795,col 21)",
            "(line 796,col 9)-(line 796,col 43)",
            "(line 797,col 9)-(line 797,col 46)",
            "(line 799,col 9)-(line 799,col 40)",
            "(line 800,col 9)-(line 800,col 22)",
            "(line 801,col 9)-(line 801,col 43)",
            "(line 802,col 9)-(line 802,col 44)",
            "(line 804,col 9)-(line 804,col 40)",
            "(line 805,col 9)-(line 805,col 22)",
            "(line 806,col 9)-(line 806,col 43)",
            "(line 807,col 9)-(line 807,col 44)",
            "(line 810,col 9)-(line 810,col 42)",
            "(line 811,col 9)-(line 811,col 21)",
            "(line 812,col 9)-(line 812,col 50)",
            "(line 813,col 9)-(line 813,col 42)",
            "(line 814,col 9)-(line 814,col 47)",
            "(line 815,col 9)-(line 815,col 21)",
            "(line 816,col 9)-(line 816,col 50)",
            "(line 817,col 9)-(line 817,col 42)",
            "(line 818,col 9)-(line 818,col 44)",
            "(line 821,col 9)-(line 824,col 43)",
            "(line 825,col 9)-(line 828,col 43)",
            "(line 831,col 9)-(line 831,col 39)",
            "(line 832,col 9)-(line 832,col 21)",
            "(line 833,col 9)-(line 833,col 38)",
            "(line 834,col 9)-(line 834,col 21)",
            "(line 835,col 9)-(line 835,col 38)",
            "(line 836,col 9)-(line 836,col 22)",
            "(line 837,col 9)-(line 837,col 38)",
            "(line 838,col 9)-(line 838,col 37)",
            "(line 839,col 9)-(line 839,col 38)",
            "(line 840,col 9)-(line 840,col 37)",
            "(line 841,col 9)-(line 841,col 38)",
            "(line 843,col 9)-(line 843,col 55)",
            "(line 844,col 9)-(line 847,col 43)",
            "(line 850,col 9)-(line 850,col 55)",
            "(line 851,col 9)-(line 854,col 43)",
            "(line 856,col 9)-(line 856,col 43)",
            "(line 857,col 9)-(line 860,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testAdd()",
        "snippet": "    public void testAdd() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.add(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.add(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.add(f2);\n        assertEquals(-1, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.add(f2);\n        assertEquals(11, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 8);\n        f2 = Fraction.getFraction(1, 6);\n        f = f1.add(f2);\n        assertEquals(13, f.getNumerator());\n        assertEquals(24, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.add(f2);\n        assertSame(f2, f);\n        f = f2.add(f1);\n        assertSame(f2, f);\n        \n        f1 = Fraction.getFraction(-1, 13*13*2*2);\n        f2 = Fraction.getFraction(-2, 13*17*2);\n        f = f1.add(f2);\n        assertEquals(13*13*17*2*2, f.getDenominator());\n        assertEquals(-17 - 2*13*2, f.getNumerator());\n        \n        try {\n            f.add(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.add(f2);\n        assertEquals(52451, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD;\n        f = f1.add(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        try {\n            f = f.add(Fraction.ONE); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(-1,5);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.add(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 863,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 864,col 9)-(line 864,col 26)",
            "(line 865,col 9)-(line 865,col 27)",
            "(line 866,col 9)-(line 866,col 27)",
            "(line 868,col 9)-(line 868,col 40)",
            "(line 869,col 9)-(line 869,col 40)",
            "(line 870,col 9)-(line 870,col 23)",
            "(line 871,col 9)-(line 871,col 42)",
            "(line 872,col 9)-(line 872,col 44)",
            "(line 874,col 9)-(line 874,col 40)",
            "(line 875,col 9)-(line 875,col 40)",
            "(line 876,col 9)-(line 876,col 23)",
            "(line 877,col 9)-(line 877,col 42)",
            "(line 878,col 9)-(line 878,col 44)",
            "(line 880,col 9)-(line 880,col 40)",
            "(line 881,col 9)-(line 881,col 40)",
            "(line 882,col 9)-(line 882,col 23)",
            "(line 883,col 9)-(line 883,col 42)",
            "(line 884,col 9)-(line 884,col 44)",
            "(line 886,col 9)-(line 886,col 40)",
            "(line 887,col 9)-(line 887,col 41)",
            "(line 888,col 9)-(line 888,col 23)",
            "(line 889,col 9)-(line 889,col 43)",
            "(line 890,col 9)-(line 890,col 44)",
            "(line 892,col 9)-(line 892,col 60)",
            "(line 893,col 9)-(line 893,col 26)",
            "(line 894,col 9)-(line 894,col 23)",
            "(line 895,col 9)-(line 895,col 58)",
            "(line 896,col 9)-(line 896,col 44)",
            "(line 898,col 9)-(line 898,col 40)",
            "(line 899,col 9)-(line 899,col 40)",
            "(line 900,col 9)-(line 900,col 23)",
            "(line 901,col 9)-(line 901,col 43)",
            "(line 902,col 9)-(line 902,col 45)",
            "(line 904,col 9)-(line 904,col 40)",
            "(line 905,col 9)-(line 905,col 40)",
            "(line 906,col 9)-(line 906,col 23)",
            "(line 907,col 9)-(line 907,col 43)",
            "(line 908,col 9)-(line 908,col 45)",
            "(line 910,col 9)-(line 910,col 40)",
            "(line 911,col 9)-(line 911,col 40)",
            "(line 912,col 9)-(line 912,col 23)",
            "(line 913,col 9)-(line 913,col 26)",
            "(line 914,col 9)-(line 914,col 23)",
            "(line 915,col 9)-(line 915,col 26)",
            "(line 917,col 9)-(line 917,col 49)",
            "(line 918,col 9)-(line 918,col 47)",
            "(line 919,col 9)-(line 919,col 23)",
            "(line 920,col 9)-(line 920,col 55)",
            "(line 921,col 9)-(line 921,col 53)",
            "(line 923,col 9)-(line 926,col 48)",
            "(line 930,col 9)-(line 930,col 45)",
            "(line 931,col 9)-(line 931,col 43)",
            "(line 932,col 9)-(line 932,col 23)",
            "(line 933,col 9)-(line 933,col 46)",
            "(line 934,col 9)-(line 934,col 53)",
            "(line 936,col 9)-(line 936,col 56)",
            "(line 937,col 9)-(line 937,col 32)",
            "(line 938,col 9)-(line 938,col 23)",
            "(line 939,col 9)-(line 939,col 60)",
            "(line 940,col 9)-(line 940,col 44)",
            "(line 942,col 9)-(line 942,col 60)",
            "(line 943,col 9)-(line 943,col 26)",
            "(line 944,col 9)-(line 944,col 23)",
            "(line 945,col 9)-(line 945,col 58)",
            "(line 946,col 9)-(line 946,col 44)",
            "(line 948,col 9)-(line 951,col 43)",
            "(line 954,col 9)-(line 954,col 56)",
            "(line 955,col 9)-(line 955,col 40)",
            "(line 956,col 9)-(line 959,col 43)",
            "(line 961,col 9)-(line 965,col 43)",
            "(line 967,col 9)-(line 971,col 43)",
            "(line 973,col 9)-(line 973,col 44)",
            "(line 974,col 9)-(line 974,col 43)",
            "(line 975,col 9)-(line 978,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testSubtract()",
        "snippet": "    public void testSubtract() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f1.subtract(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(7, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(3, 5);\n        f = f1.subtract(f2);\n        assertEquals(0, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(7, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(4, 5);\n        f = f1.subtract(f2);\n        assertEquals(-4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(-4, 5);\n        f = f1.subtract(f2);\n        assertEquals(4, f.getNumerator());\n        assertEquals(5, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(1, 2);\n        f = f1.subtract(f2);\n        assertEquals(1, f.getNumerator());\n        assertEquals(10, f.getDenominator());\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(1, 5);\n        f = f2.subtract(f1);\n        assertSame(f2, f);\n        \n        try {\n            f.subtract(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        f1 = Fraction.getFraction(1,32768*3);\n        f2 = Fraction.getFraction(1,59049);\n        f = f1.subtract(f2);\n        assertEquals(-13085, f.getNumerator());\n        assertEquals(1934917632, f.getDenominator());\n\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n        f2 = Fraction.ONE_THIRD.negate();\n        f = f1.subtract(f2);\n        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        assertEquals(3, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.ONE;\n        f = f1.subtract(f2);\n        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);\n            f = f1.subtract(f2);\n            fail(\"expecting ArithmeticException\");  //should overflow\n        } catch (ArithmeticException ex) {}\n            \n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n        f2 = Fraction.getFraction(1,5);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f= Fraction.getFraction(Integer.MIN_VALUE, 1);\n            f = f.subtract(Fraction.ONE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f= Fraction.getFraction(Integer.MAX_VALUE, 1);\n            f = f.subtract(Fraction.ONE.negate());\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        f1 = Fraction.getFraction(3,327680);\n        f2 = Fraction.getFraction(2,59049);\n        try {\n            f = f1.subtract(f2); // should overflow\n            fail(\"expecting ArithmeticException but got: \" + f.toString());\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 981,
        "end_line": 1091,
        "comment": "",
        "child_ranges": [
            "(line 982,col 9)-(line 982,col 26)",
            "(line 983,col 9)-(line 983,col 27)",
            "(line 984,col 9)-(line 984,col 27)",
            "(line 986,col 9)-(line 986,col 40)",
            "(line 987,col 9)-(line 987,col 40)",
            "(line 988,col 9)-(line 988,col 28)",
            "(line 989,col 9)-(line 989,col 42)",
            "(line 990,col 9)-(line 990,col 44)",
            "(line 992,col 9)-(line 992,col 40)",
            "(line 993,col 9)-(line 993,col 40)",
            "(line 994,col 9)-(line 994,col 28)",
            "(line 995,col 9)-(line 995,col 42)",
            "(line 996,col 9)-(line 996,col 44)",
            "(line 998,col 9)-(line 998,col 40)",
            "(line 999,col 9)-(line 999,col 40)",
            "(line 1000,col 9)-(line 1000,col 28)",
            "(line 1001,col 9)-(line 1001,col 42)",
            "(line 1002,col 9)-(line 1002,col 44)",
            "(line 1004,col 9)-(line 1004,col 40)",
            "(line 1005,col 9)-(line 1005,col 41)",
            "(line 1006,col 9)-(line 1006,col 28)",
            "(line 1007,col 9)-(line 1007,col 42)",
            "(line 1008,col 9)-(line 1008,col 44)",
            "(line 1010,col 9)-(line 1010,col 40)",
            "(line 1011,col 9)-(line 1011,col 40)",
            "(line 1012,col 9)-(line 1012,col 28)",
            "(line 1013,col 9)-(line 1013,col 43)",
            "(line 1014,col 9)-(line 1014,col 44)",
            "(line 1016,col 9)-(line 1016,col 40)",
            "(line 1017,col 9)-(line 1017,col 41)",
            "(line 1018,col 9)-(line 1018,col 28)",
            "(line 1019,col 9)-(line 1019,col 42)",
            "(line 1020,col 9)-(line 1020,col 44)",
            "(line 1022,col 9)-(line 1022,col 40)",
            "(line 1023,col 9)-(line 1023,col 40)",
            "(line 1024,col 9)-(line 1024,col 28)",
            "(line 1025,col 9)-(line 1025,col 42)",
            "(line 1026,col 9)-(line 1026,col 45)",
            "(line 1028,col 9)-(line 1028,col 40)",
            "(line 1029,col 9)-(line 1029,col 40)",
            "(line 1030,col 9)-(line 1030,col 28)",
            "(line 1031,col 9)-(line 1031,col 26)",
            "(line 1033,col 9)-(line 1036,col 48)",
            "(line 1040,col 9)-(line 1040,col 45)",
            "(line 1041,col 9)-(line 1041,col 43)",
            "(line 1042,col 9)-(line 1042,col 28)",
            "(line 1043,col 9)-(line 1043,col 47)",
            "(line 1044,col 9)-(line 1044,col 53)",
            "(line 1046,col 9)-(line 1046,col 56)",
            "(line 1047,col 9)-(line 1047,col 41)",
            "(line 1048,col 9)-(line 1048,col 28)",
            "(line 1049,col 9)-(line 1049,col 60)",
            "(line 1050,col 9)-(line 1050,col 44)",
            "(line 1052,col 9)-(line 1052,col 56)",
            "(line 1053,col 9)-(line 1053,col 26)",
            "(line 1054,col 9)-(line 1054,col 28)",
            "(line 1055,col 9)-(line 1055,col 60)",
            "(line 1056,col 9)-(line 1056,col 44)",
            "(line 1058,col 9)-(line 1063,col 43)",
            "(line 1066,col 9)-(line 1066,col 56)",
            "(line 1067,col 9)-(line 1067,col 39)",
            "(line 1068,col 9)-(line 1071,col 43)",
            "(line 1073,col 9)-(line 1077,col 43)",
            "(line 1079,col 9)-(line 1083,col 43)",
            "(line 1085,col 9)-(line 1085,col 44)",
            "(line 1086,col 9)-(line 1086,col 43)",
            "(line 1087,col 9)-(line 1090,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testMultiply()",
        "snippet": "    public void testMultiply() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(6, 10);\n        f2 = Fraction.getFraction(6, 10);\n        f = f1.multiplyBy(f2);\n        assertEquals(9, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        f = f.multiplyBy(f2);\n        assertEquals(27, f.getNumerator());\n        assertEquals(125, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(-6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        f1 = Fraction.getFraction(-3, 5);\n        f2 = Fraction.getFraction(-2, 5);\n        f = f1.multiplyBy(f2);\n        assertEquals(6, f.getNumerator());\n        assertEquals(25, f.getDenominator());\n        \n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.multiplyBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.multiplyBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.multiplyBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.multiplyBy(null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n            \n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.multiplyBy(f1);  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1093,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1094,col 9)-(line 1094,col 26)",
            "(line 1095,col 9)-(line 1095,col 27)",
            "(line 1096,col 9)-(line 1096,col 27)",
            "(line 1098,col 9)-(line 1098,col 40)",
            "(line 1099,col 9)-(line 1099,col 40)",
            "(line 1100,col 9)-(line 1100,col 30)",
            "(line 1101,col 9)-(line 1101,col 42)",
            "(line 1102,col 9)-(line 1102,col 45)",
            "(line 1104,col 9)-(line 1104,col 41)",
            "(line 1105,col 9)-(line 1105,col 41)",
            "(line 1106,col 9)-(line 1106,col 30)",
            "(line 1107,col 9)-(line 1107,col 42)",
            "(line 1108,col 9)-(line 1108,col 45)",
            "(line 1109,col 9)-(line 1109,col 29)",
            "(line 1110,col 9)-(line 1110,col 43)",
            "(line 1111,col 9)-(line 1111,col 46)",
            "(line 1113,col 9)-(line 1113,col 40)",
            "(line 1114,col 9)-(line 1114,col 41)",
            "(line 1115,col 9)-(line 1115,col 30)",
            "(line 1116,col 9)-(line 1116,col 43)",
            "(line 1117,col 9)-(line 1117,col 45)",
            "(line 1119,col 9)-(line 1119,col 41)",
            "(line 1120,col 9)-(line 1120,col 41)",
            "(line 1121,col 9)-(line 1121,col 30)",
            "(line 1122,col 9)-(line 1122,col 42)",
            "(line 1123,col 9)-(line 1123,col 45)",
            "(line 1126,col 9)-(line 1126,col 40)",
            "(line 1127,col 9)-(line 1127,col 40)",
            "(line 1128,col 9)-(line 1128,col 30)",
            "(line 1129,col 9)-(line 1129,col 37)",
            "(line 1131,col 9)-(line 1131,col 40)",
            "(line 1132,col 9)-(line 1132,col 26)",
            "(line 1133,col 9)-(line 1133,col 30)",
            "(line 1134,col 9)-(line 1134,col 42)",
            "(line 1135,col 9)-(line 1135,col 44)",
            "(line 1137,col 9)-(line 1137,col 56)",
            "(line 1138,col 9)-(line 1138,col 72)",
            "(line 1139,col 9)-(line 1139,col 30)",
            "(line 1140,col 9)-(line 1140,col 58)",
            "(line 1141,col 9)-(line 1141,col 44)",
            "(line 1143,col 9)-(line 1146,col 48)",
            "(line 1148,col 9)-(line 1152,col 43)",
            "(line 1154,col 9)-(line 1158,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testDivide()",
        "snippet": "    public void testDivide() {\n        Fraction f = null;\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        f = f1.divideBy(f2);\n        assertEquals(3, f.getNumerator());\n        assertEquals(2, f.getDenominator());\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.ZERO;\n        try {\n            f = f1.divideBy(f2);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        \n        f1 = Fraction.getFraction(0, 5);\n        f2 = Fraction.getFraction(2, 7);\n        f = f1.divideBy(f2);\n        assertSame(Fraction.ZERO, f);\n        \n        f1 = Fraction.getFraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.divideBy(f2);\n        assertEquals(2, f.getNumerator());\n        assertEquals(7, f.getDenominator());\n        \n        f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f1);  \n        assertEquals(1, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n        \n        f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = Fraction.getFraction(1, Integer.MAX_VALUE);\n        f = f1.divideBy(f2);\n        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        assertEquals(1, f.getDenominator());\n\n        try {\n            f.divideBy(null);\n            fail(\"IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {}\n        \n        try {\n            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n        try {\n            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n            f = f1.divideBy(f1.invert());  // should overflow\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {}\n    }\n",
        "begin_line": 1161,
        "end_line": 1216,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 9)-(line 1162,col 26)",
            "(line 1163,col 9)-(line 1163,col 27)",
            "(line 1164,col 9)-(line 1164,col 27)",
            "(line 1166,col 9)-(line 1166,col 40)",
            "(line 1167,col 9)-(line 1167,col 40)",
            "(line 1168,col 9)-(line 1168,col 28)",
            "(line 1169,col 9)-(line 1169,col 42)",
            "(line 1170,col 9)-(line 1170,col 44)",
            "(line 1172,col 9)-(line 1172,col 40)",
            "(line 1173,col 9)-(line 1173,col 27)",
            "(line 1174,col 9)-(line 1177,col 43)",
            "(line 1179,col 9)-(line 1179,col 40)",
            "(line 1180,col 9)-(line 1180,col 40)",
            "(line 1181,col 9)-(line 1181,col 28)",
            "(line 1182,col 9)-(line 1182,col 37)",
            "(line 1184,col 9)-(line 1184,col 40)",
            "(line 1185,col 9)-(line 1185,col 26)",
            "(line 1186,col 9)-(line 1186,col 28)",
            "(line 1187,col 9)-(line 1187,col 42)",
            "(line 1188,col 9)-(line 1188,col 44)",
            "(line 1190,col 9)-(line 1190,col 56)",
            "(line 1191,col 9)-(line 1191,col 28)",
            "(line 1192,col 9)-(line 1192,col 42)",
            "(line 1193,col 9)-(line 1193,col 44)",
            "(line 1195,col 9)-(line 1195,col 72)",
            "(line 1196,col 9)-(line 1196,col 56)",
            "(line 1197,col 9)-(line 1197,col 28)",
            "(line 1198,col 9)-(line 1198,col 58)",
            "(line 1199,col 9)-(line 1199,col 44)",
            "(line 1201,col 9)-(line 1204,col 48)",
            "(line 1206,col 9)-(line 1210,col 43)",
            "(line 1211,col 9)-(line 1215,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testEquals()",
        "snippet": "    public void testEquals() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertEquals(false, f1.equals(null));\n        assertEquals(false, f1.equals(new Object()));\n        assertEquals(false, f1.equals(new Integer(6)));\n        \n        f1 = Fraction.getFraction(3, 5);\n        f2 = Fraction.getFraction(2, 5);\n        assertEquals(false, f1.equals(f2));\n        assertEquals(true, f1.equals(f1));\n        assertEquals(true, f2.equals(f2));\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertEquals(true, f1.equals(f2));\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertEquals(false, f1.equals(f2));\n    }\n",
        "begin_line": 1218,
        "end_line": 1238,
        "comment": "",
        "child_ranges": [
            "(line 1219,col 9)-(line 1219,col 27)",
            "(line 1220,col 9)-(line 1220,col 27)",
            "(line 1222,col 9)-(line 1222,col 40)",
            "(line 1223,col 9)-(line 1223,col 45)",
            "(line 1224,col 9)-(line 1224,col 53)",
            "(line 1225,col 9)-(line 1225,col 55)",
            "(line 1227,col 9)-(line 1227,col 40)",
            "(line 1228,col 9)-(line 1228,col 40)",
            "(line 1229,col 9)-(line 1229,col 43)",
            "(line 1230,col 9)-(line 1230,col 42)",
            "(line 1231,col 9)-(line 1231,col 42)",
            "(line 1233,col 9)-(line 1233,col 40)",
            "(line 1234,col 9)-(line 1234,col 42)",
            "(line 1236,col 9)-(line 1236,col 41)",
            "(line 1237,col 9)-(line 1237,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testHashCode()",
        "snippet": "    public void testHashCode() {\n        Fraction f1 = Fraction.getFraction(3, 5);\n        Fraction f2 = Fraction.getFraction(3, 5);\n        \n        assertTrue(f1.hashCode() == f2.hashCode());\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.hashCode() != f2.hashCode());\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.hashCode() != f2.hashCode());\n    }\n",
        "begin_line": 1240,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1241,col 9)-(line 1241,col 49)",
            "(line 1242,col 9)-(line 1242,col 49)",
            "(line 1244,col 9)-(line 1244,col 51)",
            "(line 1246,col 9)-(line 1246,col 40)",
            "(line 1247,col 9)-(line 1247,col 51)",
            "(line 1249,col 9)-(line 1249,col 41)",
            "(line 1250,col 9)-(line 1250,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testCompareTo()",
        "snippet": "    public void testCompareTo() {\n        Fraction f1 = null;\n        Fraction f2 = null;\n        \n        f1 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f1) == 0);\n        \n        try {\n            f1.compareTo(null);\n            fail(\"expecting NullPointerException\");\n        } catch (NullPointerException ex) {}\n        \n        f2 = Fraction.getFraction(2, 5);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(4, 5);\n        assertTrue(f1.compareTo(f2) < 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(3, 5);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n        \n        f2 = Fraction.getFraction(6, 10);\n        assertTrue(f1.compareTo(f2) == 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n        f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertTrue(f1.compareTo(f2) > 0);\n        assertTrue(f2.compareTo(f2) == 0);\n\n    }\n",
        "begin_line": 1253,
        "end_line": 1285,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 9)-(line 1254,col 27)",
            "(line 1255,col 9)-(line 1255,col 27)",
            "(line 1257,col 9)-(line 1257,col 40)",
            "(line 1258,col 9)-(line 1258,col 42)",
            "(line 1260,col 9)-(line 1263,col 44)",
            "(line 1265,col 9)-(line 1265,col 40)",
            "(line 1266,col 9)-(line 1266,col 41)",
            "(line 1267,col 9)-(line 1267,col 42)",
            "(line 1269,col 9)-(line 1269,col 40)",
            "(line 1270,col 9)-(line 1270,col 41)",
            "(line 1271,col 9)-(line 1271,col 42)",
            "(line 1273,col 9)-(line 1273,col 40)",
            "(line 1274,col 9)-(line 1274,col 42)",
            "(line 1275,col 9)-(line 1275,col 42)",
            "(line 1277,col 9)-(line 1277,col 41)",
            "(line 1278,col 9)-(line 1278,col 42)",
            "(line 1279,col 9)-(line 1279,col 42)",
            "(line 1281,col 9)-(line 1281,col 60)",
            "(line 1282,col 9)-(line 1282,col 41)",
            "(line 1283,col 9)-(line 1283,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testToString()",
        "snippet": "    public void testToString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"7/5\", f.toString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"4/2\", f.toString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0/2\", f.toString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"2/2\", f.toString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648/1\", f.toString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-2147483648/2147483647\", f.toString());\n    }\n",
        "begin_line": 1287,
        "end_line": 1312,
        "comment": "",
        "child_ranges": [
            "(line 1288,col 9)-(line 1288,col 26)",
            "(line 1290,col 9)-(line 1290,col 39)",
            "(line 1291,col 9)-(line 1291,col 34)",
            "(line 1292,col 9)-(line 1292,col 33)",
            "(line 1293,col 9)-(line 1293,col 38)",
            "(line 1295,col 9)-(line 1295,col 39)",
            "(line 1296,col 9)-(line 1296,col 42)",
            "(line 1298,col 9)-(line 1298,col 39)",
            "(line 1299,col 9)-(line 1299,col 42)",
            "(line 1301,col 9)-(line 1301,col 39)",
            "(line 1302,col 9)-(line 1302,col 42)",
            "(line 1304,col 9)-(line 1304,col 39)",
            "(line 1305,col 9)-(line 1305,col 42)",
            "(line 1307,col 9)-(line 1307,col 58)",
            "(line 1308,col 9)-(line 1308,col 52)",
            "(line 1310,col 9)-(line 1310,col 59)",
            "(line 1311,col 9)-(line 1311,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "signature": "org.apache.commons.lang3.math.FractionTest.testToProperString()",
        "snippet": "    public void testToProperString() {\n        Fraction f = null;\n\n        f = Fraction.getFraction(3, 5);\n        String str = f.toProperString();\n        assertEquals(\"3/5\", str);\n        assertSame(str, f.toProperString());\n        \n        f = Fraction.getFraction(7, 5);\n        assertEquals(\"1 2/5\", f.toProperString());        \n        \n        f = Fraction.getFraction(14, 10);\n        assertEquals(\"1 4/10\", f.toProperString());        \n        \n        f = Fraction.getFraction(4, 2);\n        assertEquals(\"2\", f.toProperString());        \n        \n        f = Fraction.getFraction(0, 2);\n        assertEquals(\"0\", f.toProperString());        \n        \n        f = Fraction.getFraction(2, 2);\n        assertEquals(\"1\", f.toProperString());        \n        \n        f = Fraction.getFraction(-7, 5);\n        assertEquals(\"-1 2/5\", f.toProperString());        \n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n        assertEquals(\"-2147483648\", f.toProperString());        \n\n        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n        assertEquals(\"-1 1/2147483647\", f.toProperString());\n\n        assertEquals(\"-1\", Fraction.getFraction(-1).toProperString());\n    }\n",
        "begin_line": 1314,
        "end_line": 1347,
        "comment": "",
        "child_ranges": [
            "(line 1315,col 9)-(line 1315,col 26)",
            "(line 1317,col 9)-(line 1317,col 39)",
            "(line 1318,col 9)-(line 1318,col 40)",
            "(line 1319,col 9)-(line 1319,col 33)",
            "(line 1320,col 9)-(line 1320,col 44)",
            "(line 1322,col 9)-(line 1322,col 39)",
            "(line 1323,col 9)-(line 1323,col 50)",
            "(line 1325,col 9)-(line 1325,col 41)",
            "(line 1326,col 9)-(line 1326,col 51)",
            "(line 1328,col 9)-(line 1328,col 39)",
            "(line 1329,col 9)-(line 1329,col 46)",
            "(line 1331,col 9)-(line 1331,col 39)",
            "(line 1332,col 9)-(line 1332,col 46)",
            "(line 1334,col 9)-(line 1334,col 39)",
            "(line 1335,col 9)-(line 1335,col 46)",
            "(line 1337,col 9)-(line 1337,col 40)",
            "(line 1338,col 9)-(line 1338,col 51)",
            "(line 1340,col 9)-(line 1340,col 58)",
            "(line 1341,col 9)-(line 1341,col 56)",
            "(line 1343,col 9)-(line 1343,col 59)",
            "(line 1344,col 9)-(line 1344,col 60)",
            "(line 1346,col 9)-(line 1346,col 70)"
        ]
    }
]