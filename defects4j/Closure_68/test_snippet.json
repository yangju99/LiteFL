[
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    extraAnnotations =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .annotationNames.keySet());\n    extraSuppressions =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .suppressionNames);\n\n    extraSuppressions.add(\"x\");\n    extraSuppressions.add(\"y\");\n    extraSuppressions.add(\"z\");\n  }\n",
        "begin_line": 46,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 18)",
            "(line 49,col 5)-(line 52,col 43)",
            "(line 53,col 5)-(line 56,col 35)",
            "(line 58,col 5)-(line 58,col 31)",
            "(line 59,col 5)-(line 59,col 31)",
            "(line 60,col 5)-(line 60,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic1()",
        "snippet": "  public void testParseTypeViaStatic1() throws Exception {\n    Node typeNode = parseType(\"null\");\n    assertTypeEquals(NULL_TYPE, typeNode);\n  }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 38)",
            "(line 65,col 5)-(line 65,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic2()",
        "snippet": "  public void testParseTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"string\");\n    assertTypeEquals(STRING_TYPE, typeNode);\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 40)",
            "(line 70,col 5)-(line 70,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic3()",
        "snippet": "  public void testParseTypeViaStatic3() throws Exception {\n    Node typeNode = parseType(\"!Date\");\n    assertTypeEquals(DATE_TYPE, typeNode);\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 39)",
            "(line 75,col 5)-(line 75,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic4()",
        "snippet": "  public void testParseTypeViaStatic4() throws Exception {\n    Node typeNode = parseType(\"boolean|string\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, STRING_TYPE), typeNode);\n  }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 48)",
            "(line 80,col 5)-(line 80,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic()",
        "snippet": "  public void testParseInvalidTypeViaStatic() throws Exception {\n    Node typeNode = parseType(\"sometype.<anothertype\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 55)",
            "(line 85,col 5)-(line 85,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic2()",
        "snippet": "  public void testParseInvalidTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 34)",
            "(line 90,col 5)-(line 90,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType1()",
        "snippet": "  public void testParseNamedType1() throws Exception {\n    assertNull(parse(\"@type null\", \"Unexpected end of file\"));\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType2()",
        "snippet": "  public void testParseNamedType2() throws Exception {\n    JSDocInfo info = parse(\"@type null*/\");\n    assertTypeEquals(NULL_TYPE, info.getType());\n  }\n",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 43)",
            "(line 99,col 5)-(line 99,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType3()",
        "snippet": "  public void testParseNamedType3() throws Exception {\n    JSDocInfo info = parse(\"@type {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 47)",
            "(line 104,col 5)-(line 104,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType4()",
        "snippet": "  public void testParseNamedType4() throws Exception {\n    // Multi-line @type.\n    JSDocInfo info = parse(\"@type \\n {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 50)",
            "(line 110,col 5)-(line 110,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType5()",
        "snippet": "  public void testParseNamedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\nBar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 113,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 52)",
            "(line 115,col 5)-(line 117,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType6()",
        "snippet": "  public void testParseNamedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\n * Bar.\\n * Baz}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar.Baz\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 120,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 64)",
            "(line 122,col 5)-(line 124,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError1()",
        "snippet": "  public void testParseNamedTypeError1() throws Exception {\n    // To avoid parsing ambiguities, type names must end in a '.' to\n    // get the continuation behavior.\n    parse(\"@type {!goog\\n * .Bar} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 127,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 131,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError2()",
        "snippet": "  public void testParseNamedTypeError2() throws Exception {\n    parse(\"@type {!goog.\\n * Bar\\n * .Baz} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 134,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 136,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType1()",
        "snippet": "  public void testTypedefType1() throws Exception {\n    JSDocInfo info = parse(\"@typedef string */\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 49)",
            "(line 141,col 5)-(line 141,col 38)",
            "(line 142,col 5)-(line 142,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType2()",
        "snippet": "  public void testTypedefType2() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {string}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 53)",
            "(line 147,col 5)-(line 147,col 38)",
            "(line 148,col 5)-(line 148,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType3()",
        "snippet": "  public void testTypedefType3() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {(string|number)}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(\n        createUnionType(NUMBER_TYPE, STRING_TYPE),\n        info.getTypedefType());\n  }\n",
        "begin_line": 151,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 152,col 62)",
            "(line 153,col 5)-(line 153,col 38)",
            "(line 154,col 5)-(line 156,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType1()",
        "snippet": "  public void testParseStringType1() throws Exception {\n    assertTypeEquals(STRING_TYPE, parse(\"@type {string}*/\").getType());\n  }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType2()",
        "snippet": "  public void testParseStringType2() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE, parse(\"@type {!String}*/\").getType());\n  }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 164,col 5)-(line 164,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType1()",
        "snippet": "  public void testParseBooleanType1() throws Exception {\n    assertTypeEquals(BOOLEAN_TYPE, parse(\"@type {boolean}*/\").getType());\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 168,col 5)-(line 168,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType2()",
        "snippet": "  public void testParseBooleanType2() throws Exception {\n    assertTypeEquals(\n        BOOLEAN_OBJECT_TYPE, parse(\"@type {!Boolean}*/\").getType());\n  }\n",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 173,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType1()",
        "snippet": "  public void testParseNumberType1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@type {number}*/\").getType());\n  }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 5)-(line 177,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType2()",
        "snippet": "  public void testParseNumberType2() throws Exception {\n    assertTypeEquals(NUMBER_OBJECT_TYPE, parse(\"@type {!Number}*/\").getType());\n  }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 181,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType1()",
        "snippet": "  public void testParseNullType1() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {null}*/\").getType());\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType2()",
        "snippet": "  public void testParseNullType2() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {Null}*/\").getType());\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType1()",
        "snippet": "  public void testParseAllType1() throws Exception {\n    testParseType(\"*\");\n  }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType2()",
        "snippet": "  public void testParseAllType2() throws Exception {\n    testParseType(\"*?\", \"*\");\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseObjectType()",
        "snippet": "  public void testParseObjectType() throws Exception {\n    assertTypeEquals(OBJECT_TYPE, parse(\"@type {!Object}*/\").getType());\n  }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDateType()",
        "snippet": "  public void testParseDateType() throws Exception {\n    assertTypeEquals(DATE_TYPE, parse(\"@type {!Date}*/\").getType());\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionType()",
        "snippet": "  public void testParseFunctionType() throws Exception {\n    assertTypeEquals(\n        createNullableType(U2U_CONSTRUCTOR_TYPE),\n        parse(\"@type {Function}*/\").getType());\n  }\n",
        "begin_line": 208,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 211,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRegExpType()",
        "snippet": "  public void testParseRegExpType() throws Exception {\n    assertTypeEquals(REGEXP_TYPE, parse(\"@type {!RegExp}*/\").getType());\n  }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseErrorTypes()",
        "snippet": "  public void testParseErrorTypes() throws Exception {\n    assertTypeEquals(ERROR_TYPE, parse(\"@type {!Error}*/\").getType());\n    assertTypeEquals(URI_ERROR_TYPE, parse(\"@type {!URIError}*/\").getType());\n    assertTypeEquals(EVAL_ERROR_TYPE, parse(\"@type {!EvalError}*/\").getType());\n    assertTypeEquals(REFERENCE_ERROR_TYPE,\n        parse(\"@type {!ReferenceError}*/\").getType());\n    assertTypeEquals(TYPE_ERROR_TYPE, parse(\"@type {!TypeError}*/\").getType());\n    assertTypeEquals(\n        RANGE_ERROR_TYPE, parse(\"@type {!RangeError}*/\").getType());\n    assertTypeEquals(\n        SYNTAX_ERROR_TYPE, parse(\"@type {!SyntaxError}*/\").getType());\n  }\n",
        "begin_line": 218,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 70)",
            "(line 220,col 5)-(line 220,col 77)",
            "(line 221,col 5)-(line 221,col 79)",
            "(line 222,col 5)-(line 223,col 54)",
            "(line 224,col 5)-(line 224,col 79)",
            "(line 225,col 5)-(line 226,col 68)",
            "(line 227,col 5)-(line 228,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType1()",
        "snippet": "  public void testParseUndefinedType1() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {undefined}*/\").getType());\n  }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 232,col 5)-(line 232,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType2()",
        "snippet": "  public void testParseUndefinedType2() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {Undefined}*/\").getType());\n  }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType3()",
        "snippet": "  public void testParseUndefinedType3() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {void}*/\").getType());\n  }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 240,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType1()",
        "snippet": "  public void testParseParametrizedType1() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<number> */\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 55)",
            "(line 245,col 5)-(line 245,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType2()",
        "snippet": "  public void testParseParametrizedType2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<number>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 248,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 249,col 56)",
            "(line 250,col 5)-(line 250,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType3()",
        "snippet": "  public void testParseParametrizedType3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,null)>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 61)",
            "(line 255,col 5)-(line 255,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType4()",
        "snippet": "  public void testParseParametrizedType4() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<(number|null)>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 63)",
            "(line 260,col 5)-(line 260,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType5()",
        "snippet": "  public void testParseParametrizedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Array.<(number|null)>>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 263,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 264,col 71)",
            "(line 265,col 5)-(line 265,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType6()",
        "snippet": "  public void testParseParametrizedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<!Array.<(number|null)>>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 72)",
            "(line 270,col 5)-(line 270,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType7()",
        "snippet": "  public void testParseParametrizedType7() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():Date>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 274,col 5)-(line 274,col 65)",
            "(line 275,col 5)-(line 275,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType8()",
        "snippet": "  public void testParseParametrizedType8() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():!Date>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 278,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 279,col 66)",
            "(line 280,col 5)-(line 280,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType9()",
        "snippet": "  public void testParseParametrizedType9() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 283,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 61)",
            "(line 285,col 5)-(line 285,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType10()",
        "snippet": "  public void testParseParametrizedType10() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number|boolean>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 288,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 289,col 5)-(line 289,col 69)",
            "(line 290,col 5)-(line 290,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamterizedType11()",
        "snippet": "  public void testParseParamterizedType11() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<number>}*/\");\n    assertTypeEquals(OBJECT_TYPE, info.getType());\n    assertParameterTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 293,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 57)",
            "(line 295,col 5)-(line 295,col 50)",
            "(line 296,col 5)-(line 296,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamterizedType12()",
        "snippet": "  public void testParseParamterizedType12() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<string,number>}*/\");\n    assertTypeEquals(OBJECT_TYPE, info.getType());\n    assertParameterTypeEquals(NUMBER_TYPE, info.getType());\n    assertIndexTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 299,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 64)",
            "(line 301,col 5)-(line 301,col 50)",
            "(line 302,col 5)-(line 302,col 59)",
            "(line 303,col 5)-(line 303,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType1()",
        "snippet": "  public void testParseUnionType1() throws Exception {\n    JSDocInfo info = parse(\"@type {(boolean,null)}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 306,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 55)",
            "(line 308,col 5)-(line 308,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType2()",
        "snippet": "  public void testParseUnionType2() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean|null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 311,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 312,col 5)-(line 312,col 53)",
            "(line 313,col 5)-(line 313,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType3()",
        "snippet": "  public void testParseUnionType3() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean||null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 316,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 54)",
            "(line 318,col 5)-(line 318,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType4()",
        "snippet": "  public void testParseUnionType4() throws Exception {\n    JSDocInfo info = parse(\"@type {(Array.<boolean>,null)}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 321,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 63)",
            "(line 323,col 5)-(line 323,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType5()",
        "snippet": "  public void testParseUnionType5() throws Exception {\n    JSDocInfo info = parse(\"@type {(null, Array.<boolean>)}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 64)",
            "(line 328,col 5)-(line 328,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType6()",
        "snippet": "  public void testParseUnionType6() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>|null}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 332,col 61)",
            "(line 333,col 5)-(line 333,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType7()",
        "snippet": "  public void testParseUnionType7() throws Exception {\n    JSDocInfo info = parse(\"@type {null|Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 61)",
            "(line 338,col 5)-(line 338,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType8()",
        "snippet": "  public void testParseUnionType8() throws Exception {\n    JSDocInfo info = parse(\"@type {null||Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 341,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 62)",
            "(line 343,col 5)-(line 343,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType9()",
        "snippet": "  public void testParseUnionType9() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>||null}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 347,col 5)-(line 347,col 62)",
            "(line 348,col 5)-(line 348,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType10()",
        "snippet": "  public void testParseUnionType10() throws Exception {\n    parse(\"@type {string|}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 351,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 353,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType11()",
        "snippet": "  public void testParseUnionType11() throws Exception {\n    parse(\"@type {(string,)}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 358,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType12()",
        "snippet": "  public void testParseUnionType12() throws Exception {\n    parse(\"@type {()}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 363,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType13()",
        "snippet": "  public void testParseUnionType13() throws Exception {\n    testParseType(\n        \"(function(this:Date),function(this:String):number)\",\n        \"(function (this:Date): ?|function (this:String): number)\");\n  }\n",
        "begin_line": 366,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 369,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType14()",
        "snippet": "  public void testParseUnionType14() throws Exception {\n    testParseType(\n        \"(function(...[function(number):boolean]):number)|\" +\n        \"function(this:String, string):number\",\n        \"(function (...[function (number): boolean]): number|\" +\n        \"function (this:String, string): number)\");\n  }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 377,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType15()",
        "snippet": "  public void testParseUnionType15() throws Exception {\n    testParseType(\"*|number\", \"*\");\n  }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 381,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType16()",
        "snippet": "  public void testParseUnionType16() throws Exception {\n    testParseType(\"number|*\", \"*\");\n  }\n",
        "begin_line": 384,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType17()",
        "snippet": "  public void testParseUnionType17() throws Exception {\n    testParseType(\"string|number|*\", \"*\");\n  }\n",
        "begin_line": 388,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 389,col 5)-(line 389,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType18()",
        "snippet": "  public void testParseUnionType18() throws Exception {\n    testParseType(\"(string,*,number)\", \"*\");\n  }\n",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 393,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionTypeError1()",
        "snippet": "  public void testParseUnionTypeError1() throws Exception {\n    parse(\"@type {(string,|number)} */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 396,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 398,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType1()",
        "snippet": "  public void testParseUnknownType1() throws Exception {\n    testParseType(\"?\");\n  }\n",
        "begin_line": 401,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 402,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType2()",
        "snippet": "  public void testParseUnknownType2() throws Exception {\n    testParseType(\"(?|number)\", \"?\");\n  }\n",
        "begin_line": 405,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 406,col 5)-(line 406,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType3()",
        "snippet": "  public void testParseUnknownType3() throws Exception {\n    testParseType(\"(number|?)\", \"?\");\n  }\n",
        "begin_line": 409,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 410,col 5)-(line 410,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType1()",
        "snippet": "  public void testParseFunctionalType1() throws Exception {\n    testParseType(\"function (): number\");\n  }\n",
        "begin_line": 413,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 414,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType2()",
        "snippet": "  public void testParseFunctionalType2() throws Exception {\n    testParseType(\"function (number, string): boolean\");\n  }\n",
        "begin_line": 417,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 418,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType3()",
        "snippet": "  public void testParseFunctionalType3() throws Exception {\n    testParseType(\n        \"function(this:Array)\", \"function (this:Array): ?\");\n  }\n",
        "begin_line": 421,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 422,col 5)-(line 423,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType4()",
        "snippet": "  public void testParseFunctionalType4() throws Exception {\n    testParseType(\"function (...[number]): boolean\");\n  }\n",
        "begin_line": 426,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 427,col 5)-(line 427,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType5()",
        "snippet": "  public void testParseFunctionalType5() throws Exception {\n    testParseType(\"function (number, ...[string]): boolean\");\n  }\n",
        "begin_line": 430,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 431,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType6()",
        "snippet": "  public void testParseFunctionalType6() throws Exception {\n    testParseType(\n        \"function (this:Date, number): (boolean|number|string)\");\n  }\n",
        "begin_line": 434,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 436,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType7()",
        "snippet": "  public void testParseFunctionalType7() throws Exception {\n    testParseType(\"function()\", \"function (): ?\");\n  }\n",
        "begin_line": 439,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 440,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType8()",
        "snippet": "  public void testParseFunctionalType8() throws Exception {\n    testParseType(\n        \"function(this:Array,...[boolean])\",\n        \"function (this:Array, ...[boolean]): ?\");\n  }\n",
        "begin_line": 443,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 444,col 5)-(line 446,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType9()",
        "snippet": "  public void testParseFunctionalType9() throws Exception {\n    testParseType(\n        \"function(this:Array,!Date,...[boolean?])\",\n        \"function (this:Array, Date, ...[(boolean|null)]): ?\");\n  }\n",
        "begin_line": 449,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 450,col 5)-(line 452,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType10()",
        "snippet": "  public void testParseFunctionalType10() throws Exception {\n    testParseType(\n        \"function(...[Object?]):boolean?\",\n        \"function (...[(Object|null)]): (boolean|null)\");\n  }\n",
        "begin_line": 455,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 456,col 5)-(line 458,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType11()",
        "snippet": "  public void testParseFunctionalType11() throws Exception {\n    testParseType(\n        \"function(...[[number]]):[number?]\",\n        \"function (...[Array]): Array\");\n  }\n",
        "begin_line": 461,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 462,col 5)-(line 464,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType12()",
        "snippet": "  public void testParseFunctionalType12() throws Exception {\n    testParseType(\n        \"function(...)\",\n        \"function (...[?]): ?\");\n  }\n",
        "begin_line": 467,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 470,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType13()",
        "snippet": "  public void testParseFunctionalType13() throws Exception {\n    testParseType(\n        \"function(...): void\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 473,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 474,col 5)-(line 476,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType14()",
        "snippet": "  public void testParseFunctionalType14() throws Exception {\n    testParseType(\"function (*, string, number): boolean\");\n  }\n",
        "begin_line": 479,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 480,col 5)-(line 480,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType15()",
        "snippet": "  public void testParseFunctionalType15() throws Exception {\n    testParseType(\"function (?, string): boolean\");\n  }\n",
        "begin_line": 483,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 484,col 5)-(line 484,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType16()",
        "snippet": "  public void testParseFunctionalType16() throws Exception {\n    testParseType(\"function (string, ?): ?\");\n  }\n",
        "begin_line": 487,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType17()",
        "snippet": "  public void testParseFunctionalType17() throws Exception {\n    testParseType(\"(function (?): ?|number)\");\n  }\n",
        "begin_line": 491,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 492,col 5)-(line 492,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType18()",
        "snippet": "  public void testParseFunctionalType18() throws Exception {\n    testParseType(\"function (?): (?|number)\", \"function (?): ?\");\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType19()",
        "snippet": "  public void testParseFunctionalType19() throws Exception {\n    testParseType(\"function (new:Object)\", \"function (new:Object): ?\");\n  }\n",
        "begin_line": 499,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug1419535()",
        "snippet": "  public void testBug1419535() throws Exception {\n    parse(\"@type {function(Object, string, *)?} */\");\n    parse(\"@type {function(Object, string, *)|null} */\");\n  }\n",
        "begin_line": 503,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 504,col 53)",
            "(line 505,col 5)-(line 505,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIssue477()",
        "snippet": "  public void testIssue477() throws Exception {\n    parse(\"@type function */\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 508,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 510,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMalformedThisAnnotation()",
        "snippet": "  public void testMalformedThisAnnotation() throws Exception {\n    parse(\"@this */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 513,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 514,col 5)-(line 515,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError1()",
        "snippet": "  public void testParseFunctionalTypeError1() throws Exception {\n    parse(\"@type {function number):string}*/\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 518,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 519,col 5)-(line 520,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError2()",
        "snippet": "  public void testParseFunctionalTypeError2() throws Exception {\n    parse(\"@type {function( number}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 523,
        "end_line": 526,
        "comment": "",
        "child_ranges": [
            "(line 524,col 5)-(line 525,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError3()",
        "snippet": "  public void testParseFunctionalTypeError3() throws Exception {\n    parse(\"@type {function(...[number], string)}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 528,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 529,col 5)-(line 530,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError4()",
        "snippet": "  public void testParseFunctionalTypeError4() throws Exception {\n    parse(\"@type {function(string, ...[number], boolean):string}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 533,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 534,col 5)-(line 535,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError5()",
        "snippet": "  public void testParseFunctionalTypeError5() throws Exception {\n    parse(\"@type {function (thi:Array)}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 538,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 539,col 5)-(line 540,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError6()",
        "snippet": "  public void testParseFunctionalTypeError6() throws Exception {\n    resolve(parse(\"@type {function (this:number)}*/\").getType(),\n        \"this type must be an object type\");\n  }\n",
        "begin_line": 543,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 544,col 5)-(line 545,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError7()",
        "snippet": "  public void testParseFunctionalTypeError7() throws Exception {\n    parse(\"@type {function(...[number)}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 548,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 549,col 5)-(line 550,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError8()",
        "snippet": "  public void testParseFunctionalTypeError8() throws Exception {\n    parse(\"@type {function(...number])}*/\",\n        \"Bad type annotation. missing opening [\");\n  }\n",
        "begin_line": 553,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 554,col 5)-(line 555,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError9()",
        "snippet": "  public void testParseFunctionalTypeError9() throws Exception {\n    parse(\"@type {function (new:Array, this:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 558,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 560,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError10()",
        "snippet": "  public void testParseFunctionalTypeError10() throws Exception {\n    parse(\"@type {function (this:Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 563,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 564,col 5)-(line 565,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError11()",
        "snippet": "  public void testParseFunctionalTypeError11() throws Exception {\n    parse(\"@type {function (Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 570,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError12()",
        "snippet": "  public void testParseFunctionalTypeError12() throws Exception {\n    resolve(parse(\"@type {function (new:number)}*/\").getType(),\n        \"constructed type must be an object type\");\n  }\n",
        "begin_line": 573,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 574,col 5)-(line 575,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType1()",
        "snippet": "  public void testParseArrayType1() throws Exception {\n    testParseType(\"[number]\", \"Array\");\n  }\n",
        "begin_line": 578,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 579,col 5)-(line 579,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType2()",
        "snippet": "  public void testParseArrayType2() throws Exception {\n    testParseType(\"[(number,boolean,[Object?])]\", \"Array\");\n  }\n",
        "begin_line": 582,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 583,col 5)-(line 583,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType3()",
        "snippet": "  public void testParseArrayType3() throws Exception {\n    testParseType(\"[[number],[string]]?\", \"(Array|null)\");\n  }\n",
        "begin_line": 586,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError1()",
        "snippet": "  public void testParseArrayTypeError1() throws Exception {\n    parse(\"@type {[number}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 590,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 591,col 5)-(line 592,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError2()",
        "snippet": "  public void testParseArrayTypeError2() throws Exception {\n    parse(\"@type {number]}*/\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 595,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 597,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError3()",
        "snippet": "  public void testParseArrayTypeError3() throws Exception {\n    parse(\"@type {[(number,boolean,Object?])]}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 600,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 601,col 5)-(line 602,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError4()",
        "snippet": "  public void testParseArrayTypeError4() throws Exception {\n    parse(\"@type {(number,boolean,[Object?)]}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 605,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 606,col 5)-(line 607,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String)",
        "snippet": "  private void testParseType(String type) throws Exception {\n    testParseType(type, type);\n  }\n",
        "begin_line": 610,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 611,col 5)-(line 611,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String, java.lang.String)",
        "snippet": "  private void testParseType(\n      String type, String typeExpected) throws Exception {\n    JSDocInfo info = parse(\"@type {\" + type + \"}*/\");\n\n    assertNotNull(info);\n    assertTrue(info.hasType());\n    assertEquals(typeExpected, resolve(info.getType()).toString());\n  }\n",
        "begin_line": 614,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 616,col 5)-(line 616,col 53)",
            "(line 618,col 5)-(line 618,col 24)",
            "(line 619,col 5)-(line 619,col 31)",
            "(line 620,col 5)-(line 620,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers1()",
        "snippet": "  public void testParseNullableModifiers1() throws Exception {\n    JSDocInfo info = parse(\"@type {string?}*/\");\n    assertTypeEquals(createNullableType(STRING_TYPE), info.getType());\n  }\n",
        "begin_line": 623,
        "end_line": 626,
        "comment": "",
        "child_ranges": [
            "(line 624,col 5)-(line 624,col 48)",
            "(line 625,col 5)-(line 625,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers2()",
        "snippet": "  public void testParseNullableModifiers2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<string?>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 628,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 629,col 5)-(line 629,col 57)",
            "(line 630,col 5)-(line 630,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers3()",
        "snippet": "  public void testParseNullableModifiers3() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>?}*/\");\n    assertTypeEquals(createNullableType(ARRAY_TYPE), info.getType());\n  }\n",
        "begin_line": 633,
        "end_line": 636,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 634,col 57)",
            "(line 635,col 5)-(line 635,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers4()",
        "snippet": "  public void testParseNullableModifiers4() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean)?}*/\");\n    assertTypeEquals(\n        createNullableType(createUnionType(STRING_TYPE, BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 638,
        "end_line": 643,
        "comment": "",
        "child_ranges": [
            "(line 639,col 5)-(line 639,col 58)",
            "(line 640,col 5)-(line 642,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers5()",
        "snippet": "  public void testParseNullableModifiers5() throws Exception {\n    JSDocInfo info = parse(\"@type {(string?,boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 645,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 646,col 5)-(line 646,col 58)",
            "(line 647,col 5)-(line 649,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers6()",
        "snippet": "  public void testParseNullableModifiers6() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean?)}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 652,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 653,col 5)-(line 653,col 58)",
            "(line 654,col 5)-(line 656,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers7()",
        "snippet": "  public void testParseNullableModifiers7() throws Exception {\n    JSDocInfo info = parse(\"@type {string?|boolean}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 659,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 660,col 5)-(line 660,col 56)",
            "(line 661,col 5)-(line 663,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers8()",
        "snippet": "  public void testParseNullableModifiers8() throws Exception {\n    JSDocInfo info = parse(\"@type {string|boolean?}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 666,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 667,col 5)-(line 667,col 56)",
            "(line 668,col 5)-(line 670,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers9()",
        "snippet": "  public void testParseNullableModifiers9() throws Exception {\n    JSDocInfo info = parse(\"@type {foo.Hello.World?}*/\");\n    assertTypeEquals(\n        createNullableType(\n            registry.createNamedType(\n                \"foo.Hello.World\", null, -1, -1)),\n        info.getType());\n  }\n",
        "begin_line": 673,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 674,col 5)-(line 674,col 57)",
            "(line 675,col 5)-(line 679,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOptionalModifier()",
        "snippet": "  public void testParseOptionalModifier() throws Exception {\n    JSDocInfo info = parse(\"@type {function(number=)}*/\");\n    assertTypeEquals(\n        registry.createFunctionType(\n            UNKNOWN_TYPE, createUnionType(VOID_TYPE, NUMBER_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 682,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 58)",
            "(line 684,col 5)-(line 687,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline1()",
        "snippet": "  public void testParseNewline1() throws Exception {\n    JSDocInfo info = parse(\"@type {string\\n* }\\n*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 690,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 691,col 53)",
            "(line 692,col 5)-(line 692,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline2()",
        "snippet": "  public void testParseNewline2() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<\\n* number\\n* > */\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 695,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 696,col 5)-(line 696,col 63)",
            "(line 697,col 5)-(line 697,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline3()",
        "snippet": "  public void testParseNewline3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,\\n* null)>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 700,
        "end_line": 703,
        "comment": "",
        "child_ranges": [
            "(line 701,col 5)-(line 701,col 65)",
            "(line 702,col 5)-(line 702,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline4()",
        "snippet": "  public void testParseNewline4() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number|\\n* null)>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 706,col 5)-(line 706,col 65)",
            "(line 707,col 5)-(line 707,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline5()",
        "snippet": "  public void testParseNewline5() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<function(\\n* )\\n* :\\n* Date>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 710,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 711,col 75)",
            "(line 712,col 5)-(line 712,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType1()",
        "snippet": "  public void testParseReturnType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {null|string|Array.<boolean>}*/\");\n    assertTypeEquals(\n        createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 715,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 717,col 57)",
            "(line 718,col 5)-(line 720,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType2()",
        "snippet": "  public void testParseReturnType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@returns {null|(string,Array.<boolean>)}*/\");\n    assertTypeEquals(\n        createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 723,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 724,col 5)-(line 725,col 60)",
            "(line 726,col 5)-(line 728,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType3()",
        "snippet": "  public void testParseReturnType3() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {((null||Array.<boolean>,string),boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 731,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 732,col 5)-(line 733,col 70)",
            "(line 734,col 5)-(line 736,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType1()",
        "snippet": "  public void testParseThisType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@this {goog.foo.Bar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 739,
        "end_line": 745,
        "comment": "",
        "child_ranges": [
            "(line 740,col 5)-(line 741,col 40)",
            "(line 742,col 5)-(line 744,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType2()",
        "snippet": "  public void testParseThisType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@this goog.foo.Bar*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 747,
        "end_line": 753,
        "comment": "",
        "child_ranges": [
            "(line 748,col 5)-(line 749,col 38)",
            "(line 750,col 5)-(line 752,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType3()",
        "snippet": "  public void testParseThisType3() throws Exception {\n    parse(\"@type {number}\\n@this goog.foo.Bar*/\",\n        \"Bad type annotation. type annotation incompatible \" +\n        \"with other annotations\");\n  }\n",
        "begin_line": 755,
        "end_line": 759,
        "comment": "",
        "child_ranges": [
            "(line 756,col 5)-(line 758,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType4()",
        "snippet": "  public void testParseThisType4() throws Exception {\n    resolve(parse(\"@this number*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 761,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 762,col 5)-(line 763,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType5()",
        "snippet": "  public void testParseThisType5() throws Exception {\n    parse(\"@this {Date|Error}*/\");\n  }\n",
        "begin_line": 766,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 767,col 5)-(line 767,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType6()",
        "snippet": "  public void testParseThisType6() throws Exception {\n    resolve(parse(\"@this {Date|number}*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 770,
        "end_line": 773,
        "comment": "",
        "child_ranges": [
            "(line 771,col 5)-(line 772,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam1()",
        "snippet": "  public void testParseParam1() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 775,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 776,col 5)-(line 776,col 54)",
            "(line 777,col 5)-(line 777,col 46)",
            "(line 778,col 5)-(line 778,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam2()",
        "snippet": "  public void testParseParam2() throws Exception {\n    JSDocInfo info = parse(\"@param index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 781,
        "end_line": 785,
        "comment": "",
        "child_ranges": [
            "(line 782,col 5)-(line 782,col 45)",
            "(line 783,col 5)-(line 783,col 46)",
            "(line 784,col 5)-(line 784,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam3()",
        "snippet": "  public void testParseParam3() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 787,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 788,col 5)-(line 788,col 70)",
            "(line 789,col 5)-(line 789,col 46)",
            "(line 790,col 5)-(line 790,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam4()",
        "snippet": "  public void testParseParam4() throws Exception {\n    JSDocInfo info = parse(\"@param index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 793,
        "end_line": 797,
        "comment": "",
        "child_ranges": [
            "(line 794,col 5)-(line 794,col 61)",
            "(line 795,col 5)-(line 795,col 46)",
            "(line 796,col 5)-(line 796,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam5()",
        "snippet": "  public void testParseParam5() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 799,
        "end_line": 804,
        "comment": "",
        "child_ranges": [
            "(line 801,col 5)-(line 801,col 58)",
            "(line 802,col 5)-(line 802,col 46)",
            "(line 803,col 5)-(line 803,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam6()",
        "snippet": "  public void testParseParam6() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n * index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 806,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 808,col 5)-(line 808,col 60)",
            "(line 809,col 5)-(line 809,col 46)",
            "(line 810,col 5)-(line 810,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam7()",
        "snippet": "  public void testParseParam7() throws Exception {\n    // Optional @param\n    JSDocInfo info = parse(\"@param {number=} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 813,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 815,col 5)-(line 815,col 56)",
            "(line 816,col 5)-(line 818,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam8()",
        "snippet": "  public void testParseParam8() throws Exception {\n    // Var args @param\n    JSDocInfo info = parse(\"@param {...number} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 821,
        "end_line": 827,
        "comment": "",
        "child_ranges": [
            "(line 823,col 5)-(line 823,col 58)",
            "(line 824,col 5)-(line 826,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam9()",
        "snippet": "  public void testParseParam9() throws Exception {\n    parse(\"@param {...number=} index */\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 829,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 830,col 5)-(line 832,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam10()",
        "snippet": "  public void testParseParam10() throws Exception {\n    parse(\"@param {...number index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 835,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 836,col 5)-(line 837,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam11()",
        "snippet": "  public void testParseParam11() throws Exception {\n    parse(\"@param {number= index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 840,
        "end_line": 843,
        "comment": "",
        "child_ranges": [
            "(line 841,col 5)-(line 842,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam12()",
        "snippet": "  public void testParseParam12() throws Exception {\n    JSDocInfo info = parse(\"@param {...number|string} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 845,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 846,col 5)-(line 846,col 65)",
            "(line 847,col 5)-(line 850,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam13()",
        "snippet": "  public void testParseParam13() throws Exception {\n    JSDocInfo info = parse(\"@param {...(number|string)} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 853,
        "end_line": 859,
        "comment": "",
        "child_ranges": [
            "(line 854,col 5)-(line 854,col 67)",
            "(line 855,col 5)-(line 858,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam14()",
        "snippet": "  public void testParseParam14() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 861,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 862,col 5)-(line 862,col 57)",
            "(line 863,col 5)-(line 863,col 46)",
            "(line 864,col 5)-(line 866,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam15()",
        "snippet": "  public void testParseParam15() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index */\",\n        \"Bad type annotation. missing closing ]\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 869,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 870,col 5)-(line 871,col 50)",
            "(line 872,col 5)-(line 872,col 46)",
            "(line 873,col 5)-(line 873,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam16()",
        "snippet": "  public void testParseParam16() throws Exception {\n    JSDocInfo info = parse(\"@param {string} index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 876,
        "end_line": 880,
        "comment": "",
        "child_ranges": [
            "(line 877,col 5)-(line 877,col 56)",
            "(line 878,col 5)-(line 878,col 46)",
            "(line 879,col 5)-(line 879,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam17()",
        "snippet": "  public void testParseParam17() throws Exception {\n    JSDocInfo info = parse(\"@param {string=} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 882,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 883,col 5)-(line 883,col 58)",
            "(line 884,col 5)-(line 884,col 46)",
            "(line 885,col 5)-(line 887,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam18()",
        "snippet": "  public void testParseParam18() throws Exception {\n    JSDocInfo info = parse(\"@param {...string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 890,
        "end_line": 896,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 891,col 60)",
            "(line 892,col 5)-(line 892,col 46)",
            "(line 893,col 5)-(line 895,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam19()",
        "snippet": "  public void testParseParam19() throws Exception {\n    JSDocInfo info = parse(\"@param {...} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(UNKNOWN_TYPE),\n        info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 898,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 899,col 5)-(line 899,col 54)",
            "(line 900,col 5)-(line 900,col 46)",
            "(line 901,col 5)-(line 903,col 40)",
            "(line 904,col 5)-(line 904,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam20()",
        "snippet": "  public void testParseParam20() throws Exception {\n    JSDocInfo info = parse(\"@param {?=} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 907,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 908,col 5)-(line 908,col 51)",
            "(line 909,col 5)-(line 909,col 46)",
            "(line 910,col 5)-(line 911,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam21()",
        "snippet": "  public void testParseParam21() throws Exception {\n    JSDocInfo info = parse(\"@param {...?} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 914,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 915,col 5)-(line 915,col 53)",
            "(line 916,col 5)-(line 916,col 46)",
            "(line 917,col 5)-(line 918,col 54)",
            "(line 919,col 5)-(line 919,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows1()",
        "snippet": "  public void testParseThrows1() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number */\");\n    assertEquals(1, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 922,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 923,col 5)-(line 923,col 62)",
            "(line 924,col 5)-(line 924,col 50)",
            "(line 925,col 5)-(line 925,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows2()",
        "snippet": "  public void testParseThrows2() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number\\n \"\n                           + \"*@throws {String} A string */\");\n    assertEquals(2, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 928,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 929,col 5)-(line 930,col 62)",
            "(line 931,col 5)-(line 931,col 50)",
            "(line 932,col 5)-(line 932,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType1()",
        "snippet": "  public void testParseRecordType1() throws Exception {\n    parseFull(\"/** @param {{x}} n\\n*/\");\n  }\n",
        "begin_line": 935,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 936,col 5)-(line 936,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType2()",
        "snippet": "  public void testParseRecordType2() throws Exception {\n    parseFull(\"/** @param {{z, y}} n\\n*/\");\n  }\n",
        "begin_line": 939,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 940,col 5)-(line 940,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType3()",
        "snippet": "  public void testParseRecordType3() throws Exception {\n    parseFull(\"/** @param {{z, y, x, q, hello, thisisatest}} n\\n*/\");\n  }\n",
        "begin_line": 943,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 944,col 5)-(line 944,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType4()",
        "snippet": "  public void testParseRecordType4() throws Exception {\n    parseFull(\"/** @param {{a, 'a', 'hello', 2, this, do, while, for}} n\\n*/\");\n  }\n",
        "begin_line": 947,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType5()",
        "snippet": "  public void testParseRecordType5() throws Exception {\n    parseFull(\"/** @param {{x : hello}} n\\n*/\");\n  }\n",
        "begin_line": 951,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 952,col 5)-(line 952,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType6()",
        "snippet": "  public void testParseRecordType6() throws Exception {\n    parseFull(\"/** @param {{'x' : hello}} n\\n*/\");\n  }\n",
        "begin_line": 955,
        "end_line": 957,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType7()",
        "snippet": "  public void testParseRecordType7() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello}} n\\n*/\");\n  }\n",
        "begin_line": 959,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 960,col 5)-(line 960,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType8()",
        "snippet": "  public void testParseRecordType8() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : bar}} n\\n*/\");\n  }\n",
        "begin_line": 963,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 964,col 5)-(line 964,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType9()",
        "snippet": "  public void testParseRecordType9() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : {z : bar, 3 : meh}}} n\\n*/\");\n  }\n",
        "begin_line": 967,
        "end_line": 969,
        "comment": "",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType10()",
        "snippet": "  public void testParseRecordType10() throws Exception {\n    parseFull(\"/** @param {{__proto__ : moo}} n\\n*/\");\n  }\n",
        "begin_line": 971,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 972,col 5)-(line 972,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType11()",
        "snippet": "  public void testParseRecordType11() throws Exception {\n    parseFull(\"/** @param {{a : b} n\\n*/\",\n              \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 975,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 977,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType12()",
        "snippet": "  public void testParseRecordType12() throws Exception {\n    parseFull(\"/** @param {{!hello : hey}} n\\n*/\",\n              \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 980,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 981,col 5)-(line 982,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType13()",
        "snippet": "  public void testParseRecordType13() throws Exception {\n    parseFull(\"/** @param {{x}|number} n\\n*/\");\n  }\n",
        "begin_line": 985,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType14()",
        "snippet": "  public void testParseRecordType14() throws Exception {\n    parseFull(\"/** @param {{x : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 989,
        "end_line": 991,
        "comment": "",
        "child_ranges": [
            "(line 990,col 5)-(line 990,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType15()",
        "snippet": "  public void testParseRecordType15() throws Exception {\n    parseFull(\"/** @param {{'x' : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 993,
        "end_line": 995,
        "comment": "",
        "child_ranges": [
            "(line 994,col 5)-(line 994,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType16()",
        "snippet": "  public void testParseRecordType16() throws Exception {\n    parseFull(\"/** @param {{x, y}|number} n\\n*/\");\n  }\n",
        "begin_line": 997,
        "end_line": 999,
        "comment": "",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType17()",
        "snippet": "  public void testParseRecordType17() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|number} n\\n*/\");\n  }\n",
        "begin_line": 1001,
        "end_line": 1003,
        "comment": "",
        "child_ranges": [
            "(line 1002,col 5)-(line 1002,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType18()",
        "snippet": "  public void testParseRecordType18() throws Exception {\n    parseFull(\"/** @param {number|{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1005,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 1006,col 5)-(line 1006,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType19()",
        "snippet": "  public void testParseRecordType19() throws Exception {\n    parseFull(\"/** @param {?{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1009,
        "end_line": 1011,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1010,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType20()",
        "snippet": "  public void testParseRecordType20() throws Exception {\n    parseFull(\"/** @param {!{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1013,
        "end_line": 1015,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1014,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType21()",
        "snippet": "  public void testParseRecordType21() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|boolean} n\\n*/\");\n  }\n",
        "begin_line": 1017,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1018,col 5)-(line 1018,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType22()",
        "snippet": "  public void testParseRecordType22() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1021,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 1022,col 5)-(line 1022,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType23()",
        "snippet": "  public void testParseRecordType23() throws Exception {\n    parseFull(\"/** @param {{x : function(), 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1025,
        "end_line": 1027,
        "comment": "",
        "child_ranges": [
            "(line 1026,col 5)-(line 1026,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError1()",
        "snippet": "  public void testParseParamError1() throws Exception {\n    parseFull(\"/** @param\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1029,
        "end_line": 1032,
        "comment": "",
        "child_ranges": [
            "(line 1030,col 5)-(line 1031,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError2()",
        "snippet": "  public void testParseParamError2() throws Exception {\n    parseFull(\"/** @param {Number}*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1034,
        "end_line": 1037,
        "comment": "",
        "child_ranges": [
            "(line 1035,col 5)-(line 1036,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError3()",
        "snippet": "  public void testParseParamError3() throws Exception {\n    parseFull(\"/** @param {Number}\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1039,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1040,col 5)-(line 1041,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError4()",
        "snippet": "  public void testParseParamError4() throws Exception {\n    parseFull(\"/** @param {Number}\\n* * num */\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1046,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError5()",
        "snippet": "  public void testParseParamError5() throws Exception {\n    parse(\"@param {number} x \\n * @param {string} x */\",\n        \"Bad type annotation. duplicate variable name \\\"x\\\"\");\n  }\n",
        "begin_line": 1049,
        "end_line": 1052,
        "comment": "",
        "child_ranges": [
            "(line 1050,col 5)-(line 1051,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends1()",
        "snippet": "  public void testParseExtends1() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n                     parse(\"@extends String*/\").getBaseType());\n  }\n",
        "begin_line": 1054,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1055,col 5)-(line 1056,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends2()",
        "snippet": "  public void testParseExtends2() throws Exception {\n    JSDocInfo info = parse(\"@extends com.google.Foo.Bar.Hello.World*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1059,
        "end_line": 1065,
        "comment": "",
        "child_ranges": [
            "(line 1060,col 5)-(line 1060,col 72)",
            "(line 1061,col 5)-(line 1064,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsGenerics()",
        "snippet": "  public void testParseExtendsGenerics() throws Exception {\n    JSDocInfo info =\n        parse(\"@extends com.google.Foo.Bar.Hello.World.<Boolean,number>*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1067,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1068,col 5)-(line 1069,col 76)",
            "(line 1070,col 5)-(line 1073,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsGenerics()",
        "snippet": "  public void testParseImplementsGenerics() throws Exception {\n    // we ignore things inside <> for now\n    List<JSTypeExpression> interfaces =\n        parse(\"@implements {SomeInterface.<*>} */\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1076,
        "end_line": 1084,
        "comment": "",
        "child_ranges": [
            "(line 1078,col 5)-(line 1080,col 36)",
            "(line 1081,col 5)-(line 1081,col 39)",
            "(line 1082,col 5)-(line 1083,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends4()",
        "snippet": "  public void testParseExtends4() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1086,
        "end_line": 1089,
        "comment": "",
        "child_ranges": [
            "(line 1087,col 5)-(line 1088,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends5()",
        "snippet": "  public void testParseExtends5() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String*/\",\n              \"Bad type annotation. expected closing }\").getBaseType());\n  }\n",
        "begin_line": 1091,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1092,col 5)-(line 1094,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends6()",
        "snippet": "  public void testParseExtends6() throws Exception {\n    // Multi-line extends\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends \\n * {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1097,
        "end_line": 1101,
        "comment": "",
        "child_ranges": [
            "(line 1099,col 5)-(line 1100,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsInvalidName()",
        "snippet": "  public void testParseExtendsInvalidName() throws Exception {\n    // This looks bad, but for the time being it should be ok, as\n    // we will not find a type with this name in the js parsed tree.\n    // If this is fixed in the future, change this test to check for a\n    // warning/error message.\n    assertTypeEquals(\n        registry.createNamedType(\"some_++#%$%_UglyString\", null, -1, -1),\n        parse(\"@extends {some_++#%$%_UglyString} */\").getBaseType());\n  }\n",
        "begin_line": 1103,
        "end_line": 1111,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1110,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable1()",
        "snippet": "  public void testParseExtendsNullable1() throws Exception {\n    parse(\"@extends {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1113,
        "end_line": 1115,
        "comment": "",
        "child_ranges": [
            "(line 1114,col 5)-(line 1114,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable2()",
        "snippet": "  public void testParseExtendsNullable2() throws Exception {\n    parse(\"@extends Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 1117,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1118,col 5)-(line 1119,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum1()",
        "snippet": "  public void testParseEnum1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@enum*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1122,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1123,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum2()",
        "snippet": "  public void testParseEnum2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum {string}*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1126,
        "end_line": 1129,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 5)-(line 1128,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum3()",
        "snippet": "  public void testParseEnum3() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum string*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1131,
        "end_line": 1134,
        "comment": "",
        "child_ranges": [
            "(line 1132,col 5)-(line 1133,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc1()",
        "snippet": "  public void testParseDesc1() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!*/\").getDescription());\n  }\n",
        "begin_line": 1136,
        "end_line": 1139,
        "comment": "",
        "child_ranges": [
            "(line 1137,col 5)-(line 1138,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc2()",
        "snippet": "  public void testParseDesc2() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1141,
        "end_line": 1144,
        "comment": "",
        "child_ranges": [
            "(line 1142,col 5)-(line 1143,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc3()",
        "snippet": "  public void testParseDesc3() throws Exception {\n    assertEquals(\"\", parse(\"@desc*/\").getDescription());\n  }\n",
        "begin_line": 1146,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1147,col 5)-(line 1147,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc4()",
        "snippet": "  public void testParseDesc4() throws Exception {\n    assertEquals(\"\", parse(\"@desc\\n*/\").getDescription());\n  }\n",
        "begin_line": 1150,
        "end_line": 1152,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1151,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc5()",
        "snippet": "  public void testParseDesc5() throws Exception {\n    assertEquals(\"hello world!\",\n                 parse(\"@desc hello\\nworld!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1154,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 5)-(line 1156,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc6()",
        "snippet": "  public void testParseDesc6() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello\\n* world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1159,
        "end_line": 1162,
        "comment": "",
        "child_ranges": [
            "(line 1160,col 5)-(line 1161,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc7()",
        "snippet": "  public void testParseDesc7() throws Exception {\n    assertEquals(\"a b c\", parse(\"@desc a\\n\\nb\\nc*/\").getDescription());\n  }\n",
        "begin_line": 1164,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1165,col 5)-(line 1165,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc8()",
        "snippet": "  public void testParseDesc8() throws Exception {\n    assertEquals(\"a b c d\",\n        parse(\"@desc a\\n      *b\\n\\n  *c\\n\\nd*/\").getDescription());\n  }\n",
        "begin_line": 1168,
        "end_line": 1171,
        "comment": "",
        "child_ranges": [
            "(line 1169,col 5)-(line 1170,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc9()",
        "snippet": "  public void testParseDesc9() throws Exception {\n    String comment = \"@desc\\n.\\n,\\n{\\n)\\n}\\n|\\n.<\\n>\\n<\\n?\\n~\\n+\\n-\\n;\\n:\\n*/\";\n\n    assertEquals(\". , { ) } | .< > < ? ~ + - ; :\",\n        parse(comment).getDescription());\n  }\n",
        "begin_line": 1173,
        "end_line": 1178,
        "comment": "",
        "child_ranges": [
            "(line 1174,col 5)-(line 1174,col 79)",
            "(line 1176,col 5)-(line 1177,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc10()",
        "snippet": "  public void testParseDesc10() throws Exception {\n    String comment = \"@desc\\n?\\n?\\n?\\n?*/\";\n\n    assertEquals(\"? ? ? ?\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1180,
        "end_line": 1184,
        "comment": "",
        "child_ranges": [
            "(line 1181,col 5)-(line 1181,col 43)",
            "(line 1183,col 5)-(line 1183,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc11()",
        "snippet": "  public void testParseDesc11() throws Exception {\n    String comment = \"@desc :[]*/\";\n\n    assertEquals(\":[]\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1186,
        "end_line": 1190,
        "comment": "",
        "child_ranges": [
            "(line 1187,col 5)-(line 1187,col 35)",
            "(line 1189,col 5)-(line 1189,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc12()",
        "snippet": "  public void testParseDesc12() throws Exception {\n    String comment = \"@desc\\n:\\n[\\n]\\n...*/\";\n\n    assertEquals(\": [ ] ...\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1192,
        "end_line": 1196,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1193,col 45)",
            "(line 1195,col 5)-(line 1195,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning1()",
        "snippet": "  public void testParseMeaning1() throws Exception {\n    assertEquals(\"tigers\",\n        parse(\"@meaning tigers   */\").getMeaning());\n  }\n",
        "begin_line": 1198,
        "end_line": 1201,
        "comment": "",
        "child_ranges": [
            "(line 1199,col 5)-(line 1200,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning2()",
        "snippet": "  public void testParseMeaning2() throws Exception {\n    assertEquals(\"tigers and lions and bears\",\n        parse(\"@meaning tigers\\n * and lions\\n * and bears */\").getMeaning());\n  }\n",
        "begin_line": 1203,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1204,col 5)-(line 1205,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning3()",
        "snippet": "  public void testParseMeaning3() throws Exception {\n    JSDocInfo info =\n        parse(\"@meaning  tigers\\n * and lions\\n * @desc  and bears */\");\n    assertEquals(\"tigers and lions\", info.getMeaning());\n    assertEquals(\"and bears\", info.getDescription());\n  }\n",
        "begin_line": 1208,
        "end_line": 1213,
        "comment": "",
        "child_ranges": [
            "(line 1209,col 5)-(line 1210,col 72)",
            "(line 1211,col 5)-(line 1211,col 56)",
            "(line 1212,col 5)-(line 1212,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning4()",
        "snippet": "  public void testParseMeaning4() throws Exception {\n    parse(\"@meaning  tigers\\n * @meaning and lions  */\",\n        \"extra @meaning tag\");\n  }\n",
        "begin_line": 1215,
        "end_line": 1218,
        "comment": "",
        "child_ranges": [
            "(line 1216,col 5)-(line 1217,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends1()",
        "snippet": "  public void testParseLends1() throws Exception {\n    JSDocInfo info = parse(\"@lends {name} */\");\n    assertEquals(\"name\", info.getLendsName());\n  }\n",
        "begin_line": 1220,
        "end_line": 1223,
        "comment": "",
        "child_ranges": [
            "(line 1221,col 5)-(line 1221,col 47)",
            "(line 1222,col 5)-(line 1222,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends2()",
        "snippet": "  public void testParseLends2() throws Exception {\n    JSDocInfo info = parse(\"@lends   foo.bar  */\");\n    assertEquals(\"foo.bar\", info.getLendsName());\n  }\n",
        "begin_line": 1225,
        "end_line": 1228,
        "comment": "",
        "child_ranges": [
            "(line 1226,col 5)-(line 1226,col 51)",
            "(line 1227,col 5)-(line 1227,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends3()",
        "snippet": "  public void testParseLends3() throws Exception {\n    parse(\"@lends {name */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1230,
        "end_line": 1232,
        "comment": "",
        "child_ranges": [
            "(line 1231,col 5)-(line 1231,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends4()",
        "snippet": "  public void testParseLends4() throws Exception {\n    parse(\"@lends {} */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1234,
        "end_line": 1237,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 5)-(line 1236,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends5()",
        "snippet": "  public void testParseLends5() throws Exception {\n    parse(\"@lends } */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1239,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1240,col 5)-(line 1241,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends6()",
        "snippet": "  public void testParseLends6() throws Exception {\n    parse(\"@lends {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1244,
        "end_line": 1247,
        "comment": "",
        "child_ranges": [
            "(line 1245,col 5)-(line 1246,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends7()",
        "snippet": "  public void testParseLends7() throws Exception {\n    parse(\"@type {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1249,
        "end_line": 1252,
        "comment": "",
        "child_ranges": [
            "(line 1250,col 5)-(line 1251,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParsePreserve()",
        "snippet": "  public void testParsePreserve() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@preserve Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\n Bar\\n\\n Baz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1254,
        "end_line": 1260,
        "comment": "",
        "child_ranges": [
            "(line 1255,col 5)-(line 1255,col 28)",
            "(line 1256,col 5)-(line 1256,col 63)",
            "(line 1257,col 5)-(line 1257,col 51)",
            "(line 1258,col 5)-(line 1258,col 19)",
            "(line 1259,col 5)-(line 1259,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicense()",
        "snippet": "  public void testParseLicense() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\n Bar\\n\\n Baz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1262,
        "end_line": 1268,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 5)-(line 1263,col 28)",
            "(line 1264,col 5)-(line 1264,col 63)",
            "(line 1265,col 5)-(line 1265,col 50)",
            "(line 1266,col 5)-(line 1266,col 19)",
            "(line 1267,col 5)-(line 1267,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicenseWithAnnotation()",
        "snippet": "  public void testParseLicenseWithAnnotation() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    parse(comment);\n    assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1270,
        "end_line": 1277,
        "comment": "",
        "child_ranges": [
            "(line 1271,col 5)-(line 1271,col 28)",
            "(line 1272,col 5)-(line 1272,col 63)",
            "(line 1273,col 5)-(line 1273,col 66)",
            "(line 1274,col 5)-(line 1274,col 19)",
            "(line 1275,col 5)-(line 1276,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine1()",
        "snippet": "  public void testParseDefine1() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string}*/\").getType());\n  }\n",
        "begin_line": 1279,
        "end_line": 1282,
        "comment": "",
        "child_ranges": [
            "(line 1280,col 5)-(line 1281,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine2()",
        "snippet": "  public void testParseDefine2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string*/\",\n              \"Bad type annotation. expected closing }\").getType());\n  }\n",
        "begin_line": 1284,
        "end_line": 1288,
        "comment": "",
        "child_ranges": [
            "(line 1285,col 5)-(line 1287,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine3()",
        "snippet": "  public void testParseDefine3() throws Exception {\n    JSDocInfo info = parse(\"@define {boolean}*/\");\n    assertTrue(info.isConstant());\n    assertTrue(info.isDefine());\n    assertTypeEquals(BOOLEAN_TYPE, info.getType());\n  }\n",
        "begin_line": 1290,
        "end_line": 1295,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 5)-(line 1291,col 50)",
            "(line 1292,col 5)-(line 1292,col 34)",
            "(line 1293,col 5)-(line 1293,col 32)",
            "(line 1294,col 5)-(line 1294,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine4()",
        "snippet": "  public void testParseDefine4() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@define {number}*/\").getType());\n  }\n",
        "begin_line": 1297,
        "end_line": 1299,
        "comment": "",
        "child_ranges": [
            "(line 1298,col 5)-(line 1298,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine5()",
        "snippet": "  public void testParseDefine5() throws Exception {\n    assertTypeEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE),\n        parse(\"@define {number|boolean}*/\").getType());\n  }\n",
        "begin_line": 1301,
        "end_line": 1304,
        "comment": "",
        "child_ranges": [
            "(line 1302,col 5)-(line 1303,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors1()",
        "snippet": "  public void testParseDefineErrors1() throws Exception {\n    parse(\"@enum {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1306,
        "end_line": 1308,
        "comment": "",
        "child_ranges": [
            "(line 1307,col 5)-(line 1307,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors2()",
        "snippet": "  public void testParseDefineErrors2() throws Exception {\n    parse(\"@define {string}\\n @enum {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1310,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1311,col 5)-(line 1313,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors3()",
        "snippet": "  public void testParseDefineErrors3() throws Exception {\n    parse(\"@const\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1316,
        "end_line": 1318,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1317,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors4()",
        "snippet": "  public void testParseDefineErrors4() throws Exception {\n    parse(\"@type string \\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1320,
        "end_line": 1322,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 5)-(line 1321,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors5()",
        "snippet": "  public void testParseDefineErrors5() throws Exception {\n    parse(\"@return {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1324,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1325,col 5)-(line 1325,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors7()",
        "snippet": "  public void testParseDefineErrors7() throws Exception {\n    parse(\"@define {string}\\n @const */\", \"conflicting @const tag\");\n  }\n",
        "begin_line": 1328,
        "end_line": 1330,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1329,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors8()",
        "snippet": "  public void testParseDefineErrors8() throws Exception {\n    parse(\"@define {string}\\n @type string */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1332,
        "end_line": 1336,
        "comment": "",
        "child_ranges": [
            "(line 1333,col 5)-(line 1335,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck1()",
        "snippet": "  public void testParseNoCheck1() throws Exception {\n    assertTrue(parse(\"@notypecheck*/\").isNoTypeCheck());\n  }\n",
        "begin_line": 1338,
        "end_line": 1340,
        "comment": "",
        "child_ranges": [
            "(line 1339,col 5)-(line 1339,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck2()",
        "snippet": "  public void testParseNoCheck2() throws Exception {\n    parse(\"@notypecheck\\n@notypecheck*/\", \"extra @notypecheck tag\");\n  }\n",
        "begin_line": 1342,
        "end_line": 1344,
        "comment": "",
        "child_ranges": [
            "(line 1343,col 5)-(line 1343,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride1()",
        "snippet": "  public void testParseOverride1() throws Exception {\n    assertTrue(parse(\"@override*/\").isOverride());\n  }\n",
        "begin_line": 1346,
        "end_line": 1348,
        "comment": "",
        "child_ranges": [
            "(line 1347,col 5)-(line 1347,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride2()",
        "snippet": "  public void testParseOverride2() throws Exception {\n    parse(\"@override\\n@override*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1350,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1351,col 5)-(line 1352,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc1()",
        "snippet": "  public void testParseInheritDoc1() throws Exception {\n    assertTrue(parse(\"@inheritDoc*/\").isOverride());\n  }\n",
        "begin_line": 1355,
        "end_line": 1357,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 5)-(line 1356,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc2()",
        "snippet": "  public void testParseInheritDoc2() throws Exception {\n    parse(\"@override\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1359,
        "end_line": 1362,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1361,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc3()",
        "snippet": "  public void testParseInheritDoc3() throws Exception {\n    parse(\"@inheritDoc\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1364,
        "end_line": 1367,
        "comment": "",
        "child_ranges": [
            "(line 1365,col 5)-(line 1366,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias1()",
        "snippet": "  public void testParseNoAlias1() throws Exception {\n    assertTrue(parse(\"@noalias*/\").isNoAlias());\n  }\n",
        "begin_line": 1369,
        "end_line": 1371,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1370,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias2()",
        "snippet": "  public void testParseNoAlias2() throws Exception {\n    parse(\"@noalias\\n@noalias*/\", \"extra @noalias tag\");\n  }\n",
        "begin_line": 1373,
        "end_line": 1375,
        "comment": "",
        "child_ranges": [
            "(line 1374,col 5)-(line 1374,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated1()",
        "snippet": "  public void testParseDeprecated1() throws Exception {\n    assertTrue(parse(\"@deprecated*/\").isDeprecated());\n  }\n",
        "begin_line": 1377,
        "end_line": 1379,
        "comment": "",
        "child_ranges": [
            "(line 1378,col 5)-(line 1378,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated2()",
        "snippet": "  public void testParseDeprecated2() throws Exception {\n    parse(\"@deprecated\\n@deprecated*/\", \"extra @deprecated tag\");\n  }\n",
        "begin_line": 1381,
        "end_line": 1383,
        "comment": "",
        "child_ranges": [
            "(line 1382,col 5)-(line 1382,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport1()",
        "snippet": "  public void testParseExport1() throws Exception {\n    assertTrue(parse(\"@export*/\").isExport());\n  }\n",
        "begin_line": 1385,
        "end_line": 1387,
        "comment": "",
        "child_ranges": [
            "(line 1386,col 5)-(line 1386,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport2()",
        "snippet": "  public void testParseExport2() throws Exception {\n    parse(\"@export\\n@export*/\", \"extra @export tag\");\n  }\n",
        "begin_line": 1389,
        "end_line": 1391,
        "comment": "",
        "child_ranges": [
            "(line 1390,col 5)-(line 1390,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns1()",
        "snippet": "  public void testParseExterns1() throws Exception {\n    assertTrue(parseFileOverview(\"@externs*/\").isExterns());\n  }\n",
        "begin_line": 1393,
        "end_line": 1395,
        "comment": "",
        "child_ranges": [
            "(line 1394,col 5)-(line 1394,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns2()",
        "snippet": "  public void testParseExterns2() throws Exception {\n    parseFileOverview(\"@externs\\n@externs*/\", \"extra @externs tag\");\n  }\n",
        "begin_line": 1397,
        "end_line": 1399,
        "comment": "",
        "child_ranges": [
            "(line 1398,col 5)-(line 1398,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns3()",
        "snippet": "  public void testParseExterns3() throws Exception {\n    assertNull(parse(\"@externs*/\"));\n  }\n",
        "begin_line": 1401,
        "end_line": 1403,
        "comment": "",
        "child_ranges": [
            "(line 1402,col 5)-(line 1402,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch1()",
        "snippet": "  public void testParseJavaDispatch1() throws Exception {\n    assertTrue(parse(\"@javadispatch*/\").isJavaDispatch());\n  }\n",
        "begin_line": 1405,
        "end_line": 1407,
        "comment": "",
        "child_ranges": [
            "(line 1406,col 5)-(line 1406,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch2()",
        "snippet": "  public void testParseJavaDispatch2() throws Exception {\n    parse(\"@javadispatch\\n@javadispatch*/\",\n        \"extra @javadispatch tag\");\n  }\n",
        "begin_line": 1409,
        "end_line": 1412,
        "comment": "",
        "child_ranges": [
            "(line 1410,col 5)-(line 1411,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch3()",
        "snippet": "  public void testParseJavaDispatch3() throws Exception {\n    assertNull(parseFileOverview(\"@javadispatch*/\"));\n  }\n",
        "begin_line": 1414,
        "end_line": 1416,
        "comment": "",
        "child_ranges": [
            "(line 1415,col 5)-(line 1415,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile1()",
        "snippet": "  public void testParseNoCompile1() throws Exception {\n    assertTrue(parseFileOverview(\"@nocompile*/\").isNoCompile());\n  }\n",
        "begin_line": 1418,
        "end_line": 1420,
        "comment": "",
        "child_ranges": [
            "(line 1419,col 5)-(line 1419,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile2()",
        "snippet": "  public void testParseNoCompile2() throws Exception {\n    parseFileOverview(\"@nocompile\\n@nocompile*/\", \"extra @nocompile tag\");\n  }\n",
        "begin_line": 1422,
        "end_line": 1424,
        "comment": "",
        "child_ranges": [
            "(line 1423,col 5)-(line 1423,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBugAnnotation()",
        "snippet": "  public void testBugAnnotation() throws Exception {\n    parse(\"@bug */\");\n  }\n",
        "begin_line": 1426,
        "end_line": 1428,
        "comment": "",
        "child_ranges": [
            "(line 1427,col 5)-(line 1427,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDescriptionAnnotation()",
        "snippet": "  public void testDescriptionAnnotation() throws Exception {\n    parse(\"@description */\");\n  }\n",
        "begin_line": 1430,
        "end_line": 1432,
        "comment": "",
        "child_ranges": [
            "(line 1431,col 5)-(line 1431,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression1()",
        "snippet": "  public void testRegression1() throws Exception {\n    String comment =\n        \" * @param {number} index the index of blah\\n\" +\n        \" * @return {boolean} whatever\\n\" +\n        \" * @private\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PRIVATE, info.getVisibility());\n  }\n",
        "begin_line": 1434,
        "end_line": 1446,
        "comment": "",
        "child_ranges": [
            "(line 1435,col 5)-(line 1439,col 14)",
            "(line 1441,col 5)-(line 1441,col 36)",
            "(line 1442,col 5)-(line 1442,col 46)",
            "(line 1443,col 5)-(line 1443,col 66)",
            "(line 1444,col 5)-(line 1444,col 57)",
            "(line 1445,col 5)-(line 1445,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression2()",
        "snippet": "  public void testRegression2() throws Exception {\n    String comment =\n        \" * @return {boolean} whatever\\n\" +\n        \" * but important\\n\" +\n        \" *\\n\" +\n        \" * @param {number} index the index of blah\\n\" +\n        \" * some more comments here\\n\" +\n        \" * @param name the name of the guy\\n\" +\n        \" *\\n\" +\n        \" * @protected\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(2, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertEquals(null, info.getParameterType(\"name\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PROTECTED, info.getVisibility());\n  }\n",
        "begin_line": 1448,
        "end_line": 1466,
        "comment": "",
        "child_ranges": [
            "(line 1449,col 5)-(line 1458,col 14)",
            "(line 1460,col 5)-(line 1460,col 36)",
            "(line 1461,col 5)-(line 1461,col 46)",
            "(line 1462,col 5)-(line 1462,col 66)",
            "(line 1463,col 5)-(line 1463,col 54)",
            "(line 1464,col 5)-(line 1464,col 57)",
            "(line 1465,col 5)-(line 1465,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression3()",
        "snippet": "  public void testRegression3() throws Exception {\n    String comment =\n        \" * @param mediaTag this specified whether the @media tag is ....\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \"@public\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \" **********\\n\" +\n        \" * @final\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"mediaTag\"));\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n    assertTrue(info.isConstant());\n  }\n",
        "begin_line": 1468,
        "end_line": 1485,
        "comment": "",
        "child_ranges": [
            "(line 1469,col 5)-(line 1478,col 14)",
            "(line 1480,col 5)-(line 1480,col 36)",
            "(line 1481,col 5)-(line 1481,col 46)",
            "(line 1482,col 5)-(line 1482,col 58)",
            "(line 1483,col 5)-(line 1483,col 58)",
            "(line 1484,col 5)-(line 1484,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression4()",
        "snippet": "  public void testRegression4() throws Exception {\n    String comment =\n        \" * @const\\n\" +\n        \" * @hidden\\n\" +\n        \" * @preserveTry\\n\" +\n        \" * @constructor\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTrue(info.isConstructor());\n    assertTrue(info.isHidden());\n    assertTrue(info.shouldPreserveTry());\n  }\n",
        "begin_line": 1487,
        "end_line": 1501,
        "comment": "",
        "child_ranges": [
            "(line 1488,col 5)-(line 1493,col 14)",
            "(line 1495,col 5)-(line 1495,col 36)",
            "(line 1496,col 5)-(line 1496,col 34)",
            "(line 1497,col 5)-(line 1497,col 33)",
            "(line 1498,col 5)-(line 1498,col 37)",
            "(line 1499,col 5)-(line 1499,col 32)",
            "(line 1500,col 5)-(line 1500,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression5()",
        "snippet": "  public void testRegression5() throws Exception {\n    String comment = \"@const\\n@enum {string}\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTypeEquals(STRING_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1503,
        "end_line": 1511,
        "comment": "",
        "child_ranges": [
            "(line 1504,col 5)-(line 1504,col 57)",
            "(line 1506,col 5)-(line 1506,col 36)",
            "(line 1507,col 5)-(line 1507,col 34)",
            "(line 1508,col 5)-(line 1508,col 33)",
            "(line 1509,col 5)-(line 1509,col 63)",
            "(line 1510,col 5)-(line 1510,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression6()",
        "snippet": "  public void testRegression6() throws Exception {\n    String comment = \"@hidden\\n@enum\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isHidden());\n    assertTypeEquals(NUMBER_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1513,
        "end_line": 1520,
        "comment": "",
        "child_ranges": [
            "(line 1514,col 5)-(line 1514,col 49)",
            "(line 1516,col 5)-(line 1516,col 36)",
            "(line 1517,col 5)-(line 1517,col 32)",
            "(line 1518,col 5)-(line 1518,col 63)",
            "(line 1519,col 5)-(line 1519,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression7()",
        "snippet": "  public void testRegression7() throws Exception {\n    String comment =\n        \" * @desc description here\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1522,
        "end_line": 1533,
        "comment": "",
        "child_ranges": [
            "(line 1523,col 5)-(line 1527,col 14)",
            "(line 1529,col 5)-(line 1529,col 36)",
            "(line 1530,col 5)-(line 1530,col 46)",
            "(line 1531,col 5)-(line 1531,col 66)",
            "(line 1532,col 5)-(line 1532,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression8()",
        "snippet": "  public void testRegression8() throws Exception {\n    String comment =\n        \" * @name random tag here\\n\" +\n        \" * @desc description here\\n\" +\n        \" *\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1535,
        "end_line": 1548,
        "comment": "",
        "child_ranges": [
            "(line 1536,col 5)-(line 1542,col 14)",
            "(line 1544,col 5)-(line 1544,col 36)",
            "(line 1545,col 5)-(line 1545,col 46)",
            "(line 1546,col 5)-(line 1546,col 66)",
            "(line 1547,col 5)-(line 1547,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression9()",
        "snippet": "  public void testRegression9() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {string} p0 blah blah blah\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(1, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1550,
        "end_line": 1565,
        "comment": "",
        "child_ranges": [
            "(line 1551,col 5)-(line 1553,col 15)",
            "(line 1555,col 5)-(line 1555,col 36)",
            "(line 1556,col 5)-(line 1556,col 36)",
            "(line 1557,col 5)-(line 1557,col 39)",
            "(line 1558,col 5)-(line 1558,col 45)",
            "(line 1559,col 5)-(line 1559,col 34)",
            "(line 1560,col 5)-(line 1560,col 47)",
            "(line 1561,col 5)-(line 1561,col 64)",
            "(line 1562,col 5)-(line 1562,col 38)",
            "(line 1563,col 5)-(line 1563,col 32)",
            "(line 1564,col 5)-(line 1564,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression10()",
        "snippet": "  public void testRegression10() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {!String} p0 blah blah blah\\n\" +\n        \" * @param {boolean} p1 fobar\\n\" +\n        \" * @return {!Date} jksjkash dshad\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(2, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_OBJECT_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertTypeEquals(BOOLEAN_TYPE, jsdoc.getParameterType(\"p1\"));\n    assertTypeEquals(DATE_TYPE, jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1567,
        "end_line": 1585,
        "comment": "",
        "child_ranges": [
            "(line 1568,col 5)-(line 1572,col 15)",
            "(line 1574,col 5)-(line 1574,col 36)",
            "(line 1575,col 5)-(line 1575,col 36)",
            "(line 1576,col 5)-(line 1576,col 39)",
            "(line 1577,col 5)-(line 1577,col 45)",
            "(line 1578,col 5)-(line 1578,col 34)",
            "(line 1579,col 5)-(line 1579,col 47)",
            "(line 1580,col 5)-(line 1580,col 71)",
            "(line 1581,col 5)-(line 1581,col 65)",
            "(line 1582,col 5)-(line 1582,col 55)",
            "(line 1583,col 5)-(line 1583,col 32)",
            "(line 1584,col 5)-(line 1584,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression11()",
        "snippet": "  public void testRegression11() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @constructor\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1587,
        "end_line": 1601,
        "comment": "",
        "child_ranges": [
            "(line 1588,col 5)-(line 1590,col 15)",
            "(line 1592,col 5)-(line 1592,col 36)",
            "(line 1593,col 5)-(line 1593,col 36)",
            "(line 1594,col 5)-(line 1594,col 39)",
            "(line 1595,col 5)-(line 1595,col 45)",
            "(line 1596,col 5)-(line 1596,col 34)",
            "(line 1597,col 5)-(line 1597,col 47)",
            "(line 1598,col 5)-(line 1598,col 38)",
            "(line 1599,col 5)-(line 1599,col 32)",
            "(line 1600,col 5)-(line 1600,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression12()",
        "snippet": "  public void testRegression12() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends FooBar\\n\" +\n        \" */\");\n\n    assertTypeEquals(registry.createNamedType(\"FooBar\", null, 0, 0),\n        jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1603,
        "end_line": 1618,
        "comment": "",
        "child_ranges": [
            "(line 1604,col 5)-(line 1606,col 15)",
            "(line 1608,col 5)-(line 1609,col 29)",
            "(line 1610,col 5)-(line 1610,col 36)",
            "(line 1611,col 5)-(line 1611,col 39)",
            "(line 1612,col 5)-(line 1612,col 45)",
            "(line 1613,col 5)-(line 1613,col 34)",
            "(line 1614,col 5)-(line 1614,col 47)",
            "(line 1615,col 5)-(line 1615,col 38)",
            "(line 1616,col 5)-(line 1616,col 32)",
            "(line 1617,col 5)-(line 1617,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression13()",
        "snippet": "  public void testRegression13() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @type {!RegExp}\\n\" +\n        \" * @protected\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertTypeEquals(REGEXP_TYPE, jsdoc.getType());\n    assertEquals(Visibility.PROTECTED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1620,
        "end_line": 1635,
        "comment": "",
        "child_ranges": [
            "(line 1621,col 5)-(line 1624,col 15)",
            "(line 1626,col 5)-(line 1626,col 36)",
            "(line 1627,col 5)-(line 1627,col 36)",
            "(line 1628,col 5)-(line 1628,col 39)",
            "(line 1629,col 5)-(line 1629,col 45)",
            "(line 1630,col 5)-(line 1630,col 34)",
            "(line 1631,col 5)-(line 1631,col 47)",
            "(line 1632,col 5)-(line 1632,col 38)",
            "(line 1633,col 5)-(line 1633,col 51)",
            "(line 1634,col 5)-(line 1634,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression14()",
        "snippet": "  public void testRegression14() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @const\\n\" +\n        \" * @private\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertTrue(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.PRIVATE, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1637,
        "end_line": 1652,
        "comment": "",
        "child_ranges": [
            "(line 1638,col 5)-(line 1641,col 15)",
            "(line 1643,col 5)-(line 1643,col 36)",
            "(line 1644,col 5)-(line 1644,col 35)",
            "(line 1645,col 5)-(line 1645,col 39)",
            "(line 1646,col 5)-(line 1646,col 45)",
            "(line 1647,col 5)-(line 1647,col 34)",
            "(line 1648,col 5)-(line 1648,col 47)",
            "(line 1649,col 5)-(line 1649,col 38)",
            "(line 1650,col 5)-(line 1650,col 32)",
            "(line 1651,col 5)-(line 1651,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression15()",
        "snippet": "  public void testRegression15() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @desc Hello,\\n\" +\n        \" * World!\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertEquals(\"Hello, World!\", jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n    assertFalse(jsdoc.isExport());\n  }\n",
        "begin_line": 1654,
        "end_line": 1670,
        "comment": "",
        "child_ranges": [
            "(line 1655,col 5)-(line 1658,col 15)",
            "(line 1660,col 5)-(line 1660,col 36)",
            "(line 1661,col 5)-(line 1661,col 36)",
            "(line 1662,col 5)-(line 1662,col 58)",
            "(line 1663,col 5)-(line 1663,col 45)",
            "(line 1664,col 5)-(line 1664,col 34)",
            "(line 1665,col 5)-(line 1665,col 47)",
            "(line 1666,col 5)-(line 1666,col 38)",
            "(line 1667,col 5)-(line 1667,col 32)",
            "(line 1668,col 5)-(line 1668,col 62)",
            "(line 1669,col 5)-(line 1669,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression16()",
        "snippet": "  public void testRegression16() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" Email is plp@foo.bar\\n\" +\n        \" @type {string}\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1672,
        "end_line": 1685,
        "comment": "",
        "child_ranges": [
            "(line 1673,col 5)-(line 1676,col 15)",
            "(line 1678,col 5)-(line 1678,col 36)",
            "(line 1679,col 5)-(line 1679,col 36)",
            "(line 1680,col 5)-(line 1680,col 51)",
            "(line 1681,col 5)-(line 1681,col 34)",
            "(line 1682,col 5)-(line 1682,col 47)",
            "(line 1683,col 5)-(line 1683,col 38)",
            "(line 1684,col 5)-(line 1684,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression17()",
        "snippet": "  public void testRegression17() throws Exception {\n    // verifying that if no @desc is present the description is empty\n    assertNull(parse(\"@private*/\").getDescription());\n  }\n",
        "begin_line": 1687,
        "end_line": 1690,
        "comment": "",
        "child_ranges": [
            "(line 1689,col 5)-(line 1689,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression1()",
        "snippet": "  public void testFullRegression1() throws Exception {\n    parseFull(\"/** @param (string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1692,
        "end_line": 1695,
        "comment": "",
        "child_ranges": [
            "(line 1693,col 5)-(line 1694,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression2()",
        "snippet": "  public void testFullRegression2() throws Exception {\n    parseFull(\"/** @param {string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1697,
        "end_line": 1701,
        "comment": "",
        "child_ranges": [
            "(line 1698,col 5)-(line 1700,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression3()",
        "snippet": "  public void testFullRegression3() throws Exception {\n    parseFull(\"/**..\\n*/\");\n  }\n",
        "begin_line": 1703,
        "end_line": 1705,
        "comment": "",
        "child_ranges": [
            "(line 1704,col 5)-(line 1704,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907488()",
        "snippet": "  public void testBug907488() throws Exception {\n    parse(\"@type {number,null} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1707,
        "end_line": 1710,
        "comment": "",
        "child_ranges": [
            "(line 1708,col 5)-(line 1709,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907494()",
        "snippet": "  public void testBug907494() throws Exception {\n    parse(\"@return {Object,undefined} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1712,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1713,col 5)-(line 1714,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug909468()",
        "snippet": "  public void testBug909468() throws Exception {\n    parse(\"@extends {(x)}*/\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1720,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1719,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterface()",
        "snippet": "  public void testParseInterface() throws Exception {\n    assertTrue(parse(\"@interface*/\").isInterface());\n  }\n",
        "begin_line": 1722,
        "end_line": 1724,
        "comment": "",
        "child_ranges": [
            "(line 1723,col 5)-(line 1723,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast1()",
        "snippet": "  public void testParseImplicitCast1() throws Exception {\n    assertTrue(parse(\"@type {string} \\n * @implicitCast*/\").isImplicitCast());\n  }\n",
        "begin_line": 1726,
        "end_line": 1728,
        "comment": "",
        "child_ranges": [
            "(line 1727,col 5)-(line 1727,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast2()",
        "snippet": "  public void testParseImplicitCast2() throws Exception {\n    assertFalse(parse(\"@type {string}*/\").isImplicitCast());\n  }\n",
        "begin_line": 1730,
        "end_line": 1732,
        "comment": "",
        "child_ranges": [
            "(line 1731,col 5)-(line 1731,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDuplicateImplicitCast()",
        "snippet": "  public void testParseDuplicateImplicitCast() throws Exception {\n    parse(\"@type {string} \\n * @implicitCast \\n * @implicitCast*/\",\n          \"Bad type annotation. extra @implicitCast tag\");\n  }\n",
        "begin_line": 1734,
        "end_line": 1737,
        "comment": "",
        "child_ranges": [
            "(line 1735,col 5)-(line 1736,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterfaceDoubled()",
        "snippet": "  public void testParseInterfaceDoubled() throws Exception {\n    parse(\n        \"* @interface\\n\" +\n        \"* @interface\\n\" +\n        \"*/\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1739,
        "end_line": 1746,
        "comment": "",
        "child_ranges": [
            "(line 1740,col 5)-(line 1745,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplements()",
        "snippet": "  public void testParseImplements() throws Exception {\n    List<JSTypeExpression> interfaces = parse(\"@implements {SomeInterface}*/\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1748,
        "end_line": 1754,
        "comment": "",
        "child_ranges": [
            "(line 1749,col 5)-(line 1750,col 36)",
            "(line 1751,col 5)-(line 1751,col 39)",
            "(line 1752,col 5)-(line 1753,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsTwo()",
        "snippet": "  public void testParseImplementsTwo() throws Exception {\n    List<JSTypeExpression> interfaces =\n        parse(\n            \"* @implements {SomeInterface1}\\n\" +\n            \"* @implements {SomeInterface2}\\n\" +\n            \"*/\")\n        .getImplementedInterfaces();\n    assertEquals(2, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface1\", null, -1, -1),\n        interfaces.get(0));\n    assertTypeEquals(registry.createNamedType(\"SomeInterface2\", null, -1, -1),\n        interfaces.get(1));\n  }\n",
        "begin_line": 1756,
        "end_line": 1768,
        "comment": "",
        "child_ranges": [
            "(line 1757,col 5)-(line 1762,col 36)",
            "(line 1763,col 5)-(line 1763,col 39)",
            "(line 1764,col 5)-(line 1765,col 27)",
            "(line 1766,col 5)-(line 1767,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsSameTwice()",
        "snippet": "  public void testParseImplementsSameTwice() throws Exception {\n    parse(\n        \"* @implements {Smth}\\n\" +\n        \"* @implements {Smth}\\n\" +\n        \"*/\",\n        \"Bad type annotation. duplicate @implements tag\");\n  }\n",
        "begin_line": 1770,
        "end_line": 1776,
        "comment": "",
        "child_ranges": [
            "(line 1771,col 5)-(line 1775,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNoName()",
        "snippet": "  public void testParseImplementsNoName() throws Exception {\n    parse(\"* @implements {} */\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 1778,
        "end_line": 1781,
        "comment": "",
        "child_ranges": [
            "(line 1779,col 5)-(line 1780,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsMissingRC()",
        "snippet": "  public void testParseImplementsMissingRC() throws Exception {\n    parse(\"* @implements {Smth */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1783,
        "end_line": 1786,
        "comment": "",
        "child_ranges": [
            "(line 1784,col 5)-(line 1785,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable1()",
        "snippet": "  public void testParseImplementsNullable1() throws Exception {\n    parse(\"@implements {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1788,
        "end_line": 1790,
        "comment": "",
        "child_ranges": [
            "(line 1789,col 5)-(line 1789,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable2()",
        "snippet": "  public void testParseImplementsNullable2() throws Exception {\n    parse(\"@implements Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 1792,
        "end_line": 1795,
        "comment": "",
        "child_ranges": [
            "(line 1793,col 5)-(line 1794,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n     JSDocInfo jsdoc = parse(\n         \" * @interface \\n\" +\n         \" * @extends {Extended} */\");\n    assertTrue(jsdoc.isInterface());\n    assertEquals(1, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended\", null, -1, -1),\n        types.get(0));\n  }\n",
        "begin_line": 1797,
        "end_line": 1806,
        "comment": "",
        "child_ranges": [
            "(line 1798,col 6)-(line 1800,col 38)",
            "(line 1801,col 5)-(line 1801,col 36)",
            "(line 1802,col 5)-(line 1802,col 56)",
            "(line 1803,col 5)-(line 1803,col 65)",
            "(line 1804,col 5)-(line 1805,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends1()",
        "snippet": "  public void testInterfaceMultiExtends1() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @interface \\n\" +\n        \" * @extends {Extended1} \\n\" +\n        \" * @extends {Extended2} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(2, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n  }\n",
        "begin_line": 1808,
        "end_line": 1821,
        "comment": "",
        "child_ranges": [
            "(line 1809,col 5)-(line 1812,col 38)",
            "(line 1813,col 5)-(line 1813,col 36)",
            "(line 1814,col 5)-(line 1814,col 36)",
            "(line 1815,col 5)-(line 1815,col 56)",
            "(line 1816,col 5)-(line 1816,col 65)",
            "(line 1817,col 5)-(line 1818,col 21)",
            "(line 1819,col 5)-(line 1820,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends2()",
        "snippet": "  public void testInterfaceMultiExtends2() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends {Extended1} \\n\" +\n        \" * @interface \\n\" +\n        \" * @extends {Extended2} \\n\" +\n        \" * @extends {Extended3} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(3, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n    assertTypeEquals(registry.createNamedType(\"Extended3\", null, -1, -1),\n        types.get(2));\n  }\n",
        "begin_line": 1823,
        "end_line": 1839,
        "comment": "",
        "child_ranges": [
            "(line 1824,col 5)-(line 1828,col 38)",
            "(line 1829,col 5)-(line 1829,col 36)",
            "(line 1830,col 5)-(line 1830,col 36)",
            "(line 1831,col 5)-(line 1831,col 56)",
            "(line 1832,col 5)-(line 1832,col 65)",
            "(line 1833,col 5)-(line 1834,col 21)",
            "(line 1835,col 5)-(line 1836,col 22)",
            "(line 1837,col 5)-(line 1838,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadClassMultiExtends()",
        "snippet": "  public void testBadClassMultiExtends() throws Exception {\n    parse(\" * @extends {Extended1} \\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Extended2} */\",\n        \"Bad type annotation. type annotation incompatible with other \" +\n        \"annotations\");\n  }\n",
        "begin_line": 1841,
        "end_line": 1847,
        "comment": "",
        "child_ranges": [
            "(line 1842,col 5)-(line 1846,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadExtendsWithNullable()",
        "snippet": "  public void testBadExtendsWithNullable() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n * @extends {Object?} */\",\n        \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(OBJECT_TYPE, jsdoc.getBaseType());\n  }\n",
        "begin_line": 1849,
        "end_line": 1854,
        "comment": "",
        "child_ranges": [
            "(line 1850,col 5)-(line 1851,col 51)",
            "(line 1852,col 5)-(line 1852,col 38)",
            "(line 1853,col 5)-(line 1853,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadImplementsWithNullable()",
        "snippet": "  public void testBadImplementsWithNullable() throws Exception {\n  JSDocInfo jsdoc = parse(\"@implements {Disposable?}\\n * @constructor */\",\n      \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(registry.createNamedType(\"Disposable\", null, -1, -1),\n        jsdoc.getImplementedInterfaces().get(0));\n  }\n",
        "begin_line": 1856,
        "end_line": 1862,
        "comment": "",
        "child_ranges": [
            "(line 1857,col 3)-(line 1858,col 49)",
            "(line 1859,col 5)-(line 1859,col 38)",
            "(line 1860,col 5)-(line 1861,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor1()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@interface\\n@constructor*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isInterface());\n  }\n",
        "begin_line": 1864,
        "end_line": 1868,
        "comment": "",
        "child_ranges": [
            "(line 1865,col 5)-(line 1866,col 78)",
            "(line 1867,col 5)-(line 1867,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor2()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n@interface*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isConstructor());\n  }\n",
        "begin_line": 1870,
        "end_line": 1874,
        "comment": "",
        "child_ranges": [
            "(line 1871,col 5)-(line 1872,col 78)",
            "(line 1873,col 5)-(line 1873,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationParameter()",
        "snippet": "  public void testDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n  }\n",
        "begin_line": 1876,
        "end_line": 1883,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 5)-(line 1878,col 75)",
            "(line 1880,col 5)-(line 1880,col 61)",
            "(line 1881,col 5)-(line 1882,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMultilineDocumentationParameter()",
        "snippet": "  public void testMultilineDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description\"\n                + \"\\n* on multiple \\n* lines.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description on multiple lines.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n  }\n",
        "begin_line": 1885,
        "end_line": 1894,
        "comment": "",
        "child_ranges": [
            "(line 1886,col 5)-(line 1888,col 56)",
            "(line 1890,col 5)-(line 1890,col 61)",
            "(line 1891,col 5)-(line 1892,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter()",
        "snippet": "  public void testDocumentationMultipleParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.*/\"\n                , true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number87\"));\n    assertEquals(\"This is another description.\",\n                 jsdoc.getDescriptionForParameter(\"number87\"));\n  }\n",
        "begin_line": 1896,
        "end_line": 1909,
        "comment": "",
        "child_ranges": [
            "(line 1897,col 5)-(line 1900,col 24)",
            "(line 1902,col 5)-(line 1902,col 61)",
            "(line 1903,col 5)-(line 1904,col 63)",
            "(line 1906,col 5)-(line 1906,col 61)",
            "(line 1907,col 5)-(line 1908,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter2()",
        "snippet": "  public void testDocumentationMultipleParameter2() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {number} delta = 0 results in a redraw\\n\" +\n                \"  != 0 ..... */\", true);\n    assertTrue(jsdoc.hasDescriptionForParameter(\"delta\"));\n    assertEquals(\"= 0 results in a redraw != 0 .....\",\n                 jsdoc.getDescriptionForParameter(\"delta\"));\n  }\n",
        "begin_line": 1911,
        "end_line": 1918,
        "comment": "",
        "child_ranges": [
            "(line 1912,col 5)-(line 1914,col 41)",
            "(line 1915,col 5)-(line 1915,col 58)",
            "(line 1916,col 5)-(line 1917,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthors()",
        "snippet": "  public void testAuthors() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.\"\n                + \"\\n* @author a@google.com (A Person)\"\n                + \"\\n* @author b@google.com (B Person)\"\n                + \"\\n* @author c@google.com (C Person)*/\"\n                , true);\n\n    Collection<String> authors = jsdoc.getAuthors();\n\n    assertTrue(authors != null);\n    assertTrue(authors.size() == 3);\n\n    assertContains(authors, \"a@google.com (A Person)\");\n    assertContains(authors, \"b@google.com (B Person)\");\n    assertContains(authors, \"c@google.com (C Person)\");\n  }\n",
        "begin_line": 1921,
        "end_line": 1938,
        "comment": "",
        "child_ranges": [
            "(line 1922,col 5)-(line 1928,col 24)",
            "(line 1930,col 5)-(line 1930,col 52)",
            "(line 1932,col 5)-(line 1932,col 32)",
            "(line 1933,col 5)-(line 1933,col 36)",
            "(line 1935,col 5)-(line 1935,col 55)",
            "(line 1936,col 5)-(line 1936,col 55)",
            "(line 1937,col 5)-(line 1937,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress1()",
        "snippet": "  public void testSuppress1() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getSuppressions());\n  }\n",
        "begin_line": 1940,
        "end_line": 1943,
        "comment": "",
        "child_ranges": [
            "(line 1941,col 5)-(line 1941,col 47)",
            "(line 1942,col 5)-(line 1942,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress2()",
        "snippet": "  public void testSuppress2() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x|y|x|z} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\", \"z\"), info.getSuppressions());\n  }\n",
        "begin_line": 1945,
        "end_line": 1948,
        "comment": "",
        "child_ranges": [
            "(line 1946,col 5)-(line 1946,col 53)",
            "(line 1947,col 5)-(line 1947,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress1()",
        "snippet": "  public void testBadSuppress1() throws Exception {\n    parse(\"@suppress {} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1950,
        "end_line": 1952,
        "comment": "",
        "child_ranges": [
            "(line 1951,col 5)-(line 1951,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress2()",
        "snippet": "  public void testBadSuppress2() throws Exception {\n    parse(\"@suppress {x|} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1954,
        "end_line": 1956,
        "comment": "",
        "child_ranges": [
            "(line 1955,col 5)-(line 1955,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress3()",
        "snippet": "  public void testBadSuppress3() throws Exception {\n    parse(\"@suppress {|x} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1958,
        "end_line": 1960,
        "comment": "",
        "child_ranges": [
            "(line 1959,col 5)-(line 1959,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress4()",
        "snippet": "  public void testBadSuppress4() throws Exception {\n    parse(\"@suppress {x|y */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1962,
        "end_line": 1964,
        "comment": "",
        "child_ranges": [
            "(line 1963,col 5)-(line 1963,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress5()",
        "snippet": "  public void testBadSuppress5() throws Exception {\n    parse(\"@suppress {x,y} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1966,
        "end_line": 1968,
        "comment": "",
        "child_ranges": [
            "(line 1967,col 5)-(line 1967,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress6()",
        "snippet": "  public void testBadSuppress6() throws Exception {\n    parse(\"@suppress {x} \\n * @suppress {y} */\", \"duplicate @suppress tag\");\n  }\n",
        "begin_line": 1970,
        "end_line": 1972,
        "comment": "",
        "child_ranges": [
            "(line 1971,col 5)-(line 1971,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress7()",
        "snippet": "  public void testBadSuppress7() throws Exception {\n    parse(\"@suppress {impossible} */\",\n          \"unknown @suppress parameter: impossible\");\n  }\n",
        "begin_line": 1974,
        "end_line": 1977,
        "comment": "",
        "child_ranges": [
            "(line 1975,col 5)-(line 1976,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies1()",
        "snippet": "  public void testModifies1() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this} */\");\n    assertEquals(Sets.newHashSet(\"this\"), info.getModifies());\n  }\n",
        "begin_line": 1979,
        "end_line": 1982,
        "comment": "",
        "child_ranges": [
            "(line 1980,col 5)-(line 1980,col 50)",
            "(line 1981,col 5)-(line 1981,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies2()",
        "snippet": "  public void testModifies2() throws Exception {\n    JSDocInfo info = parse(\"@modifies {arguments} */\");\n    assertEquals(Sets.newHashSet(\"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 1984,
        "end_line": 1987,
        "comment": "",
        "child_ranges": [
            "(line 1985,col 5)-(line 1985,col 55)",
            "(line 1986,col 5)-(line 1986,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies3()",
        "snippet": "  public void testModifies3() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this|arguments} */\");\n    assertEquals(Sets.newHashSet(\"this\", \"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 1989,
        "end_line": 1992,
        "comment": "",
        "child_ranges": [
            "(line 1990,col 5)-(line 1990,col 60)",
            "(line 1991,col 5)-(line 1991,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies4()",
        "snippet": "  public void testModifies4() throws Exception {\n    JSDocInfo info = parse(\"@param {*} x\\n * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 1994,
        "end_line": 1997,
        "comment": "",
        "child_ranges": [
            "(line 1995,col 5)-(line 1995,col 64)",
            "(line 1996,col 5)-(line 1996,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies5()",
        "snippet": "  public void testModifies5() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 1999,
        "end_line": 2005,
        "comment": "",
        "child_ranges": [
            "(line 2000,col 5)-(line 2003,col 33)",
            "(line 2004,col 5)-(line 2004,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies6()",
        "snippet": "  public void testModifies6() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x|y} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\"), info.getModifies());\n  }\n",
        "begin_line": 2007,
        "end_line": 2013,
        "comment": "",
        "child_ranges": [
            "(line 2008,col 5)-(line 2011,col 35)",
            "(line 2012,col 5)-(line 2012,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies1()",
        "snippet": "  public void testBadModifies1() throws Exception {\n    parse(\"@modifies {} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2016,
        "end_line": 2018,
        "comment": "",
        "child_ranges": [
            "(line 2017,col 5)-(line 2017,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies2()",
        "snippet": "  public void testBadModifies2() throws Exception {\n    parse(\"@modifies {this|} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2020,
        "end_line": 2022,
        "comment": "",
        "child_ranges": [
            "(line 2021,col 5)-(line 2021,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies3()",
        "snippet": "  public void testBadModifies3() throws Exception {\n    parse(\"@modifies {|this} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2024,
        "end_line": 2026,
        "comment": "",
        "child_ranges": [
            "(line 2025,col 5)-(line 2025,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies4()",
        "snippet": "  public void testBadModifies4() throws Exception {\n    parse(\"@modifies {this|arguments */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2028,
        "end_line": 2030,
        "comment": "",
        "child_ranges": [
            "(line 2029,col 5)-(line 2029,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies5()",
        "snippet": "  public void testBadModifies5() throws Exception {\n    parse(\"@modifies {this,arguments} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2032,
        "end_line": 2034,
        "comment": "",
        "child_ranges": [
            "(line 2033,col 5)-(line 2033,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies6()",
        "snippet": "  public void testBadModifies6() throws Exception {\n    parse(\"@modifies {this} \\n * @modifies {this} */\",\n        \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2036,
        "end_line": 2039,
        "comment": "",
        "child_ranges": [
            "(line 2037,col 5)-(line 2038,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies7()",
        "snippet": "  public void testBadModifies7() throws Exception {\n    parse(\"@modifies {impossible} */\",\n          \"unknown @modifies parameter: impossible\");\n  }\n",
        "begin_line": 2041,
        "end_line": 2044,
        "comment": "",
        "child_ranges": [
            "(line 2042,col 5)-(line 2043,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies8()",
        "snippet": "  public void testBadModifies8() throws Exception {\n    parse(\"@modifies {this}\\n\"\n        + \"@nosideeffects */\", \"conflicting @nosideeffects tag\");\n  }\n",
        "begin_line": 2046,
        "end_line": 2049,
        "comment": "",
        "child_ranges": [
            "(line 2047,col 5)-(line 2048,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies9()",
        "snippet": "  public void testBadModifies9() throws Exception {\n    parse(\"@nosideeffects\\n\"\n        + \"@modifies {this} */\", \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2051,
        "end_line": 2054,
        "comment": "",
        "child_ranges": [
            "(line 2052,col 5)-(line 2053,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewSingleLine()",
        "snippet": "  public void testFileOverviewSingleLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Hi mom! */\");\n    assertEquals(\"Hi mom!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2062,
        "end_line": 2065,
        "comment": "",
        "child_ranges": [
            "(line 2063,col 5)-(line 2063,col 68)",
            "(line 2064,col 5)-(line 2064,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewMultiLine()",
        "snippet": "  public void testFileOverviewMultiLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Pie is \\n * good! */\");\n    assertEquals(\"Pie is\\n good!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2067,
        "end_line": 2070,
        "comment": "",
        "child_ranges": [
            "(line 2068,col 5)-(line 2068,col 78)",
            "(line 2069,col 5)-(line 2069,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewDuplicate()",
        "snippet": "  public void testFileOverviewDuplicate() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\n        \"@fileoverview Pie \\n * @fileoverview Cake */\",\n        \"extra @fileoverview tag\");\n  }\n",
        "begin_line": 2072,
        "end_line": 2076,
        "comment": "",
        "child_ranges": [
            "(line 2073,col 5)-(line 2075,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testReferences()",
        "snippet": "  public void testReferences() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@see A cool place!\"\n                + \"\\n* @see The world.\"\n                + \"\\n* @see SomeClass#SomeMember\"\n                + \"\\n* @see A boring test case*/\"\n                , true);\n\n    Collection<String> references = jsdoc.getReferences();\n\n    assertTrue(references != null);\n    assertTrue(references.size() == 4);\n\n    assertContains(references, \"A cool place!\");\n    assertContains(references, \"The world.\");\n    assertContains(references, \"SomeClass#SomeMember\");\n    assertContains(references, \"A boring test case\");\n  }\n",
        "begin_line": 2078,
        "end_line": 2095,
        "comment": "",
        "child_ranges": [
            "(line 2079,col 5)-(line 2084,col 24)",
            "(line 2086,col 5)-(line 2086,col 58)",
            "(line 2088,col 5)-(line 2088,col 35)",
            "(line 2089,col 5)-(line 2089,col 39)",
            "(line 2091,col 5)-(line 2091,col 48)",
            "(line 2092,col 5)-(line 2092,col 45)",
            "(line 2093,col 5)-(line 2093,col 55)",
            "(line 2094,col 5)-(line 2094,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTags()",
        "snippet": "  public void testSingleTags() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@version Some old version\"\n                + \"\\n* @deprecated In favor of the new one!\"\n                + \"\\n* @return {SomeType} The most important object :-)*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2097,
        "end_line": 2108,
        "comment": "",
        "child_ranges": [
            "(line 2098,col 5)-(line 2102,col 24)",
            "(line 2104,col 5)-(line 2104,col 37)",
            "(line 2105,col 5)-(line 2105,col 75)",
            "(line 2106,col 5)-(line 2106,col 57)",
            "(line 2107,col 5)-(line 2107,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTagsReordered()",
        "snippet": "  public void testSingleTagsReordered() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@deprecated In favor of the new one!\"\n                + \"\\n * @return {SomeType} The most important object :-)\"\n                + \"\\n * @version Some old version*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2110,
        "end_line": 2121,
        "comment": "",
        "child_ranges": [
            "(line 2111,col 5)-(line 2115,col 24)",
            "(line 2117,col 5)-(line 2117,col 37)",
            "(line 2118,col 5)-(line 2118,col 75)",
            "(line 2119,col 5)-(line 2119,col 57)",
            "(line 2120,col 5)-(line 2120,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionDuplication()",
        "snippet": "  public void testVersionDuplication() throws Exception {\n    parse(\"* @version Some old version\"\n          + \"\\n* @version Another version*/\", true,\n          \"conflicting @version tag\");\n  }\n",
        "begin_line": 2123,
        "end_line": 2127,
        "comment": "",
        "child_ranges": [
            "(line 2124,col 5)-(line 2126,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionMissing()",
        "snippet": "  public void testVersionMissing() throws Exception {\n    parse(\"* @version */\", true,\n          \"@version tag missing version information\");\n  }\n",
        "begin_line": 2129,
        "end_line": 2132,
        "comment": "",
        "child_ranges": [
            "(line 2130,col 5)-(line 2131,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthorMissing()",
        "snippet": "  public void testAuthorMissing() throws Exception {\n    parse(\"* @author */\", true,\n          \"@author tag missing author\");\n  }\n",
        "begin_line": 2134,
        "end_line": 2137,
        "comment": "",
        "child_ranges": [
            "(line 2135,col 5)-(line 2136,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSeeMissing()",
        "snippet": "  public void testSeeMissing() throws Exception {\n    parse(\"* @see */\", true,\n          \"@see tag missing description\");\n  }\n",
        "begin_line": 2139,
        "end_line": 2142,
        "comment": "",
        "child_ranges": [
            "(line 2140,col 5)-(line 2141,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSourceName()",
        "snippet": "  public void testSourceName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@deprecated */\", true);\n    assertEquals(\"testcode\", jsdoc.getSourceName());\n  }\n",
        "begin_line": 2144,
        "end_line": 2147,
        "comment": "",
        "child_ranges": [
            "(line 2145,col 5)-(line 2145,col 52)",
            "(line 2146,col 5)-(line 2146,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment()",
        "snippet": "  public void testParseBlockComment() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2149,
        "end_line": 2160,
        "comment": "",
        "child_ranges": [
            "(line 2150,col 5)-(line 2152,col 67)",
            "(line 2154,col 5)-(line 2155,col 46)",
            "(line 2157,col 5)-(line 2159,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment2()",
        "snippet": "  public void testParseBlockComment2() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is *** multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is *** multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2162,
        "end_line": 2173,
        "comment": "",
        "child_ranges": [
            "(line 2163,col 5)-(line 2165,col 67)",
            "(line 2167,col 5)-(line 2168,col 46)",
            "(line 2170,col 5)-(line 2172,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment3()",
        "snippet": "  public void testParseBlockComment3() throws Exception {\n    JSDocInfo jsdoc = parse(\"\\n \"\n                            + \"* hello world \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"hello world\", jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2175,
        "end_line": 2185,
        "comment": "",
        "child_ranges": [
            "(line 2176,col 5)-(line 2178,col 67)",
            "(line 2180,col 5)-(line 2180,col 61)",
            "(line 2182,col 5)-(line 2184,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers1()",
        "snippet": "  public void testParseWithMarkers1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 0, 0),\n        \"abc@google.com\", 7, 0, 21);\n  }\n",
        "begin_line": 2187,
        "end_line": 2193,
        "comment": "",
        "child_ranges": [
            "(line 2188,col 5)-(line 2188,col 63)",
            "(line 2190,col 5)-(line 2192,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers2()",
        "snippet": "  public void testParseWithMarkers2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {Foo} somename abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"abc@google.com\", 21, 0, 37);\n  }\n",
        "begin_line": 2195,
        "end_line": 2201,
        "comment": "",
        "child_ranges": [
            "(line 2196,col 5)-(line 2196,col 77)",
            "(line 2198,col 5)-(line 2200,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers3()",
        "snippet": "  public void testParseWithMarkers3() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return {Foo} some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0),\n        \"some long multiline description\", 13, 2, 15);\n  }\n",
        "begin_line": 2203,
        "end_line": 2211,
        "comment": "",
        "child_ranges": [
            "(line 2204,col 5)-(line 2206,col 44)",
            "(line 2208,col 5)-(line 2210,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers4()",
        "snippet": "  public void testParseWithMarkers4() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@author foobar \\n * @param {Foo} somename abc@google.com */\",\n              true);\n\n    assertAnnotationMarker(jsdoc, \"author\", 0, 0);\n    assertAnnotationMarker(jsdoc, \"param\", 1, 3);\n  }\n",
        "begin_line": 2213,
        "end_line": 2220,
        "comment": "",
        "child_ranges": [
            "(line 2214,col 5)-(line 2216,col 20)",
            "(line 2218,col 5)-(line 2218,col 50)",
            "(line 2219,col 5)-(line 2219,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers5()",
        "snippet": "  public void testParseWithMarkers5() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2222,
        "end_line": 2230,
        "comment": "",
        "child_ranges": [
            "(line 2223,col 5)-(line 2225,col 44)",
            "(line 2227,col 5)-(line 2229,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers6()",
        "snippet": "  public void testParseWithMarkers6() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@param x some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2232,
        "end_line": 2240,
        "comment": "",
        "child_ranges": [
            "(line 2233,col 5)-(line 2235,col 44)",
            "(line 2237,col 5)-(line 2239,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames1()",
        "snippet": "  public void testParseWithMarkerNames1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription */\", true);\n\n    assertNameInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"name\", 18);\n  }\n",
        "begin_line": 2242,
        "end_line": 2248,
        "comment": "",
        "child_ranges": [
            "(line 2243,col 5)-(line 2243,col 79)",
            "(line 2245,col 5)-(line 2247,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames2()",
        "snippet": "  public void testParseWithMarkerNames2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription \\n\" +\n                            \"* @param {AnotherType} anothername des */\", true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 0, 0, 0),\n            \"name\", 18),\n        \"SomeType\", 7, true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 1, 2, 1),\n            \"anothername\", 23),\n        \"AnotherType\", 9, true);\n  }\n",
        "begin_line": 2250,
        "end_line": 2265,
        "comment": "",
        "child_ranges": [
            "(line 2251,col 5)-(line 2252,col 79)",
            "(line 2254,col 5)-(line 2258,col 29)",
            "(line 2260,col 5)-(line 2264,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithoutMarkerName()",
        "snippet": "  public void testParseWithoutMarkerName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author helloworld*/\", true);\n    assertNull(assertAnnotationMarker(jsdoc, \"author\", 0, 0).name);\n  }\n",
        "begin_line": 2267,
        "end_line": 2270,
        "comment": "",
        "child_ranges": [
            "(line 2268,col 5)-(line 2268,col 58)",
            "(line 2269,col 5)-(line 2269,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType()",
        "snippet": "  public void testParseWithMarkerType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends {FooBar}*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 9, true);\n  }\n",
        "begin_line": 2272,
        "end_line": 2278,
        "comment": "",
        "child_ranges": [
            "(line 2273,col 5)-(line 2273,col 57)",
            "(line 2275,col 5)-(line 2277,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType2()",
        "snippet": "  public void testParseWithMarkerType2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends FooBar*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 9, false);\n  }\n",
        "begin_line": 2280,
        "end_line": 2286,
        "comment": "",
        "child_ranges": [
            "(line 2281,col 5)-(line 2281,col 55)",
            "(line 2283,col 5)-(line 2285,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict1()",
        "snippet": "  public void testTypeTagConflict1() throws Exception {\n    parse(\"@constructor \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2288,
        "end_line": 2292,
        "comment": "",
        "child_ranges": [
            "(line 2289,col 5)-(line 2291,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict2()",
        "snippet": "  public void testTypeTagConflict2() throws Exception {\n    parse(\"@interface \\n * @interface */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2294,
        "end_line": 2298,
        "comment": "",
        "child_ranges": [
            "(line 2295,col 5)-(line 2297,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict3()",
        "snippet": "  public void testTypeTagConflict3() throws Exception {\n    parse(\"@constructor \\n * @interface */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2300,
        "end_line": 2303,
        "comment": "",
        "child_ranges": [
            "(line 2301,col 5)-(line 2302,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict4()",
        "snippet": "  public void testTypeTagConflict4() throws Exception {\n    parse(\"@interface \\n * @constructor */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2305,
        "end_line": 2308,
        "comment": "",
        "child_ranges": [
            "(line 2306,col 5)-(line 2307,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict5()",
        "snippet": "  public void testTypeTagConflict5() throws Exception {\n    parse(\"@interface \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2310,
        "end_line": 2314,
        "comment": "",
        "child_ranges": [
            "(line 2311,col 5)-(line 2313,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict6()",
        "snippet": "  public void testTypeTagConflict6() throws Exception {\n    parse(\"@typedef {string} \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2316,
        "end_line": 2320,
        "comment": "",
        "child_ranges": [
            "(line 2317,col 5)-(line 2319,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict7()",
        "snippet": "  public void testTypeTagConflict7() throws Exception {\n    parse(\"@typedef {string} \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2322,
        "end_line": 2326,
        "comment": "",
        "child_ranges": [
            "(line 2323,col 5)-(line 2325,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict8()",
        "snippet": "  public void testTypeTagConflict8() throws Exception {\n    parse(\"@typedef {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2328,
        "end_line": 2332,
        "comment": "",
        "child_ranges": [
            "(line 2329,col 5)-(line 2331,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict9()",
        "snippet": "  public void testTypeTagConflict9() throws Exception {\n    parse(\"@enum {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2334,
        "end_line": 2338,
        "comment": "",
        "child_ranges": [
            "(line 2335,col 5)-(line 2337,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict10()",
        "snippet": "  public void testTypeTagConflict10() throws Exception {\n    parse(\"@this {Object} \\n * @enum {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2340,
        "end_line": 2344,
        "comment": "",
        "child_ranges": [
            "(line 2341,col 5)-(line 2343,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict11()",
        "snippet": "  public void testTypeTagConflict11() throws Exception {\n    parse(\"@param {Object} x \\n * @type {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2346,
        "end_line": 2350,
        "comment": "",
        "child_ranges": [
            "(line 2347,col 5)-(line 2349,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict12()",
        "snippet": "  public void testTypeTagConflict12() throws Exception {\n    parse(\"@typedef {boolean} \\n * @param {Object} x */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2352,
        "end_line": 2356,
        "comment": "",
        "child_ranges": [
            "(line 2353,col 5)-(line 2355,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict13()",
        "snippet": "  public void testTypeTagConflict13() throws Exception {\n    parse(\"@typedef {boolean} \\n * @extends {Object} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2358,
        "end_line": 2362,
        "comment": "",
        "child_ranges": [
            "(line 2359,col 5)-(line 2361,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict14()",
        "snippet": "  public void testTypeTagConflict14() throws Exception {\n    parse(\"@return x \\n * @return y */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2364,
        "end_line": 2368,
        "comment": "",
        "child_ranges": [
            "(line 2365,col 5)-(line 2367,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateTypeNameMissing()",
        "snippet": "  public void testParserWithTemplateTypeNameMissing() {\n    parse(\"@template */\",\n        \"Bad type annotation. @template tag missing type name\");\n  }\n",
        "begin_line": 2370,
        "end_line": 2373,
        "comment": "",
        "child_ranges": [
            "(line 2371,col 5)-(line 2372,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateDuplicated()",
        "snippet": "  public void testParserWithTemplateDuplicated() {\n    parse(\"@template T\\n@template V */\",\n        \"Bad type annotation. @template tag at most once\");\n  }\n",
        "begin_line": 2375,
        "end_line": 2378,
        "comment": "",
        "child_ranges": [
            "(line 2376,col 5)-(line 2377,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedNewAnnotations()",
        "snippet": "  public void testWhitelistedNewAnnotations() {\n    parse(\"@foobar */\",\n        \"illegal use of unknown JSDoc tag \\\"foobar\\\"; ignoring it\");\n    extraAnnotations.add(\"foobar\");\n    parse(\"@foobar */\");\n  }\n",
        "begin_line": 2380,
        "end_line": 2385,
        "comment": "",
        "child_ranges": [
            "(line 2381,col 5)-(line 2382,col 68)",
            "(line 2383,col 5)-(line 2383,col 35)",
            "(line 2384,col 5)-(line 2384,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedConflictingAnnotation()",
        "snippet": "  public void testWhitelistedConflictingAnnotation() {\n    extraAnnotations.add(\"param\");\n    JSDocInfo info = parse(\"@param {number} index */\");\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 2387,
        "end_line": 2391,
        "comment": "",
        "child_ranges": [
            "(line 2388,col 5)-(line 2388,col 34)",
            "(line 2389,col 5)-(line 2389,col 55)",
            "(line 2390,col 5)-(line 2390,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testNonIdentifierAnnotation()",
        "snippet": "  public void testNonIdentifierAnnotation() {\n    // Try to whitelist an annotation that is not a valid JS identifier.\n    // It should not work.\n    extraAnnotations.add(\"123\");\n    parse(\"@123 */\", \"illegal use of unknown JSDoc tag \\\"\\\"; ignoring it\");\n  }\n",
        "begin_line": 2393,
        "end_line": 2398,
        "comment": "",
        "child_ranges": [
            "(line 2396,col 5)-(line 2396,col 32)",
            "(line 2397,col 5)-(line 2397,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax1()",
        "snippet": "  public void testUnsupportedJsDocSyntax1() {\n    JSDocInfo info =\n        parse(\"@param {string} [accessLevel=\\\"author\\\"] The user level */\",\n            true);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"accessLevel\"));\n    assertEquals(\"The user level\",\n        info.getDescriptionForParameter(\"accessLevel\"));\n  }\n",
        "begin_line": 2400,
        "end_line": 2410,
        "comment": "",
        "child_ranges": [
            "(line 2401,col 5)-(line 2403,col 18)",
            "(line 2404,col 5)-(line 2404,col 46)",
            "(line 2405,col 5)-(line 2407,col 46)",
            "(line 2408,col 5)-(line 2409,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax2()",
        "snippet": "  public void testUnsupportedJsDocSyntax2() {\n    JSDocInfo info =\n        parse(\"@param userInfo The user info. \\n\" +\n              \" * @param userInfo.name The name of the user */\", true);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(\"The user info.\",\n        info.getDescriptionForParameter(\"userInfo\"));\n  }\n",
        "begin_line": 2412,
        "end_line": 2419,
        "comment": "",
        "child_ranges": [
            "(line 2413,col 5)-(line 2415,col 71)",
            "(line 2416,col 5)-(line 2416,col 46)",
            "(line 2417,col 5)-(line 2418,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedAnnotations()",
        "snippet": "  public void testWhitelistedAnnotations() {\n    parse(\n      \"* @addon \\n\" +\n      \"* @augments \\n\" +\n      \"* @base \\n\" +\n      \"* @borrows \\n\" +\n      \"* @bug \\n\" +\n      \"* @class \\n\" +\n      \"* @config \\n\" +\n      \"* @constructs \\n\" +\n      \"* @default \\n\" +\n      \"* @description \\n\" +\n      \"* @event \\n\" +\n      \"* @example \\n\" +\n      \"* @exception \\n\" +\n      \"* @exec \\n\" +\n      \"* @externs \\n\" +\n      \"* @field \\n\" +\n      \"* @function \\n\" +\n      \"* @id \\n\" +\n      \"* @ignore \\n\" +\n      \"* @inner \\n\" +\n      \"* @lends {string} \\n\" +\n      \"* @link \\n\" +\n      \"* @member \\n\" +\n      \"* @memberOf \\n\" +\n      \"* @modName \\n\" +\n      \"* @mods \\n\" +\n      \"* @name \\n\" +\n      \"* @namespace \\n\" +\n      \"* @nocompile \\n\" +\n      \"* @property \\n\" +\n      \"* @requires \\n\" +\n      \"* @since \\n\" +\n      \"* @static \\n\" +\n      \"* @supported */\");\n  }\n",
        "begin_line": 2421,
        "end_line": 2457,
        "comment": "",
        "child_ranges": [
            "(line 2422,col 5)-(line 2456,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testGetOriginalCommentString()",
        "snippet": "  public void testGetOriginalCommentString() throws Exception {\n    String comment = \"* @desc This is a comment */\";\n    JSDocInfo info = parse(comment);\n    assertNull(info.getOriginalCommentString());\n    info = parse(comment, true /* parseDocumentation */);\n    assertEquals(comment, info.getOriginalCommentString());\n  }\n",
        "begin_line": 2459,
        "end_line": 2465,
        "comment": "",
        "child_ranges": [
            "(line 2460,col 5)-(line 2460,col 52)",
            "(line 2461,col 5)-(line 2461,col 36)",
            "(line 2462,col 5)-(line 2462,col 48)",
            "(line 2463,col 5)-(line 2463,col 57)",
            "(line 2464,col 5)-(line 2464,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertDocumentationInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,\n                                                       String description,\n                                                       int startCharno,\n                                                       int endLineno,\n                                                       int endCharno) {\n    assertTrue(marker.description != null);\n    assertEquals(description, marker.description.getItem());\n\n    // Match positional information.\n    assertEquals(marker.annotation.getStartLine(),\n                 marker.description.getStartLine());\n    assertEquals(startCharno, marker.description.getPositionOnStartLine());\n    assertEquals(endLineno, marker.description.getEndLine());\n    assertEquals(endCharno, marker.description.getPositionOnEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2476,
        "end_line": 2492,
        "comment": "\n   * Asserts that a documentation field exists on the given marker.\n   *\n   * @param description The text of the documentation field expected.\n   * @param startCharno The starting character of the text.\n   * @param endLineno The ending line of the text.\n   * @param endCharno The ending character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2481,col 5)-(line 2481,col 43)",
            "(line 2482,col 5)-(line 2482,col 60)",
            "(line 2485,col 5)-(line 2486,col 52)",
            "(line 2487,col 5)-(line 2487,col 75)",
            "(line 2488,col 5)-(line 2488,col 61)",
            "(line 2489,col 5)-(line 2489,col 71)",
            "(line 2491,col 5)-(line 2491,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertTypeInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, boolean)",
        "snippet": "  private JSDocInfo.Marker assertTypeInMarker(JSDocInfo.Marker marker,\n                                            String typeName, int startCharno,\n                                            boolean hasBrackets) {\n\n    assertTrue(marker.type != null);\n    assertTrue(marker.type.getItem().getType() == Token.STRING);\n\n    // Match the name and brackets information.\n    String foundName = marker.type.getItem().getString();\n\n    assertEquals(typeName, foundName);\n    assertEquals(hasBrackets, marker.type.hasBrackets);\n\n    // Match position information.\n    assertEquals(startCharno, marker.type.getPositionOnStartLine());\n\n    int endCharno = startCharno + foundName.length();\n\n    if (hasBrackets) {\n      endCharno += 1;\n    }\n\n    assertEquals(endCharno, marker.type.getPositionOnEndLine());\n    assertEquals(marker.annotation.getStartLine(), marker.type.getStartLine());\n    assertEquals(marker.annotation.getStartLine(), marker.type.getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2503,
        "end_line": 2530,
        "comment": "\n   * Asserts that a type field exists on the given marker.\n   *\n   * @param typeName The name of the type expected in the type field.\n   * @param startCharno The starting character of the type declaration.\n   * @param hasBrackets Whether the type in the type field is expected\n   *     to have brackets.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2507,col 5)-(line 2507,col 36)",
            "(line 2508,col 5)-(line 2508,col 64)",
            "(line 2511,col 5)-(line 2511,col 57)",
            "(line 2513,col 5)-(line 2513,col 38)",
            "(line 2514,col 5)-(line 2514,col 55)",
            "(line 2517,col 5)-(line 2517,col 68)",
            "(line 2519,col 5)-(line 2519,col 53)",
            "(line 2521,col 5)-(line 2523,col 5)",
            "(line 2525,col 5)-(line 2525,col 64)",
            "(line 2526,col 5)-(line 2526,col 79)",
            "(line 2527,col 5)-(line 2527,col 77)",
            "(line 2529,col 5)-(line 2529,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertNameInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int)",
        "snippet": "  private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,\n                                            String name, int startCharno) {\n    assertTrue(marker.name != null);\n    assertEquals(name, marker.name.getItem());\n\n    assertEquals(startCharno, marker.name.getPositionOnStartLine());\n    assertEquals(startCharno + name.length(),\n                 marker.name.getPositionOnEndLine());\n\n    assertEquals(marker.annotation.getStartLine(), marker.name.getStartLine());\n    assertEquals(marker.annotation.getStartLine(), marker.name.getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2539,
        "end_line": 2552,
        "comment": "\n   * Asserts that a name field exists on the given marker.\n   *\n   * @param name The name expected in the name field.\n   * @param startCharno The starting character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2541,col 5)-(line 2541,col 36)",
            "(line 2542,col 5)-(line 2542,col 46)",
            "(line 2544,col 5)-(line 2544,col 68)",
            "(line 2545,col 5)-(line 2546,col 53)",
            "(line 2548,col 5)-(line 2548,col 79)",
            "(line 2549,col 5)-(line 2549,col 77)",
            "(line 2551,col 5)-(line 2551,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno) {\n    return assertAnnotationMarker(jsdoc, annotationName, startLineno,\n                                  startCharno, 0);\n  }\n",
        "begin_line": 2565,
        "end_line": 2571,
        "comment": "\n   * Asserts that an annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 2569,col 5)-(line 2570,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno,\n                                                  int index) {\n\n    Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();\n\n    assertTrue(markers.size() > 0);\n\n    int counter = 0;\n\n    for (JSDocInfo.Marker marker : markers) {\n      if (marker.annotation != null) {\n        if (annotationName.equals(marker.annotation.getItem())) {\n\n          if (counter == index) {\n            assertEquals(startLineno, marker.annotation.getStartLine());\n            assertEquals(startCharno,\n                         marker.annotation.getPositionOnStartLine());\n            assertEquals(startLineno, marker.annotation.getEndLine());\n            assertEquals(startCharno + annotationName.length(),\n                         marker.annotation.getPositionOnEndLine());\n\n            return marker;\n          }\n\n          counter++;\n        }\n      }\n    }\n\n    fail(\"No marker found\");\n    return null;\n  }\n",
        "begin_line": 2585,
        "end_line": 2619,
        "comment": "\n   * Asserts that the index-th annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @param index The index of the marker.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 2591,col 5)-(line 2591,col 62)",
            "(line 2593,col 5)-(line 2593,col 35)",
            "(line 2595,col 5)-(line 2595,col 20)",
            "(line 2597,col 5)-(line 2615,col 5)",
            "(line 2617,col 5)-(line 2617,col 28)",
            "(line 2618,col 5)-(line 2618,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertContains(java.util.Collection<T>, T)",
        "snippet": "  private <T> void assertContains(Collection<T> collection, T item) {\n    assertTrue(collection.contains(item));\n  }\n",
        "begin_line": 2621,
        "end_line": 2623,
        "comment": "",
        "child_ranges": [
            "(line 2622,col 5)-(line 2622,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFull(java.lang.String, java.lang.String...)",
        "snippet": "  private void parseFull(String code, String... warnings) {\n    CompilerEnvirons environment = new CompilerEnvirons();\n\n    TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n    environment.setErrorReporter(testErrorReporter);\n\n    environment.setRecordingComments(true);\n    environment.setRecordingLocalJsDocComments(true);\n\n    Parser p = new Parser(environment, testErrorReporter);\n    AstRoot script = p.parse(code, null, 0);\n\n    Config config =\n        new Config(extraAnnotations, extraSuppressions,\n            true, LanguageMode.ECMASCRIPT3, false);\n    for (Comment comment : script.getComments()) {\n      JsDocInfoParser jsdocParser =\n        new JsDocInfoParser(\n            new JsDocTokenStream(comment.getValue().substring(3),\n                comment.getLineno()),\n            comment,\n            script.getSourceName(),\n            config,\n            testErrorReporter);\n      jsdocParser.parse();\n      jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n\n    assertTrue(\"some expected warnings were not reported\",\n        testErrorReporter.hasEncounteredAllWarnings());\n  }\n",
        "begin_line": 2625,
        "end_line": 2655,
        "comment": "",
        "child_ranges": [
            "(line 2626,col 5)-(line 2626,col 58)",
            "(line 2628,col 5)-(line 2628,col 80)",
            "(line 2629,col 5)-(line 2629,col 52)",
            "(line 2631,col 5)-(line 2631,col 43)",
            "(line 2632,col 5)-(line 2632,col 53)",
            "(line 2634,col 5)-(line 2634,col 58)",
            "(line 2635,col 5)-(line 2635,col 44)",
            "(line 2637,col 5)-(line 2639,col 51)",
            "(line 2640,col 5)-(line 2651,col 5)",
            "(line 2653,col 5)-(line 2654,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverviewWithoutDoc(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parseFileOverviewWithoutDoc(String comment,\n                                                String... warnings) {\n    return parse(comment, false, true, warnings);\n  }\n",
        "begin_line": 2657,
        "end_line": 2660,
        "comment": "",
        "child_ranges": [
            "(line 2659,col 5)-(line 2659,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverview(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parseFileOverview(String comment, String... warnings) {\n    return parse(comment, true, true, warnings);\n  }\n",
        "begin_line": 2662,
        "end_line": 2664,
        "comment": "",
        "child_ranges": [
            "(line 2663,col 5)-(line 2663,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, String... warnings) {\n    return parse(comment, false, warnings);\n  }\n",
        "begin_line": 2666,
        "end_line": 2668,
        "comment": "",
        "child_ranges": [
            "(line 2667,col 5)-(line 2667,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n                          String... warnings) {\n    return parse(comment, parseDocumentation, false, warnings);\n  }\n",
        "begin_line": 2670,
        "end_line": 2673,
        "comment": "",
        "child_ranges": [
            "(line 2672,col 5)-(line 2672,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n      boolean parseFileOverview, String... warnings) {\n    TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);\n\n    Config config = new Config(extraAnnotations, extraSuppressions,\n        parseDocumentation, LanguageMode.ECMASCRIPT3, false);\n    JsDocInfoParser jsdocParser = new JsDocInfoParser(\n        stream(comment),\n        new Comment(0, 0, CommentType.JSDOC, comment),\n        \"testcode\", config, errorReporter);\n\n    if (fileLevelJsDocBuilder != null) {\n      jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    }\n\n    jsdocParser.parse();\n\n    assertTrue(\"expected warnings were not reported\",\n        errorReporter.hasEncounteredAllWarnings());\n\n    if (parseFileOverview) {\n      return jsdocParser.getFileOverviewJSDocInfo();\n    } else {\n      return jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n  }\n",
        "begin_line": 2675,
        "end_line": 2700,
        "comment": "",
        "child_ranges": [
            "(line 2677,col 5)-(line 2677,col 76)",
            "(line 2679,col 5)-(line 2680,col 61)",
            "(line 2681,col 5)-(line 2684,col 43)",
            "(line 2686,col 5)-(line 2688,col 5)",
            "(line 2690,col 5)-(line 2690,col 24)",
            "(line 2692,col 5)-(line 2693,col 51)",
            "(line 2695,col 5)-(line 2699,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseType(java.lang.String)",
        "snippet": "  private Node parseType(String typeComment) {\n    return JsDocInfoParser.parseTypeString(typeComment);\n  }\n",
        "begin_line": 2702,
        "end_line": 2704,
        "comment": "",
        "child_ranges": [
            "(line 2703,col 5)-(line 2703,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.stream(java.lang.String)",
        "snippet": "  private JsDocTokenStream stream(String source) {\n    return new JsDocTokenStream(source, 0);\n  }\n",
        "begin_line": 2706,
        "end_line": 2708,
        "comment": "",
        "child_ranges": [
            "(line 2707,col 5)-(line 2707,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertParameterTypeEquals(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  private void assertParameterTypeEquals(JSType expected, JSTypeExpression te) {\n    assertEquals(expected, ((ObjectType) resolve(te)).getParameterType());\n  }\n",
        "begin_line": 2710,
        "end_line": 2712,
        "comment": "",
        "child_ranges": [
            "(line 2711,col 5)-(line 2711,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertIndexTypeEquals(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  private void assertIndexTypeEquals(JSType expected, JSTypeExpression te) {\n    assertEquals(expected, ((ObjectType) resolve(te)).getIndexType());\n  }\n",
        "begin_line": 2714,
        "end_line": 2716,
        "comment": "",
        "child_ranges": [
            "(line 2715,col 5)-(line 2715,col 70)"
        ]
    }
]