[
    {
        "name": "RealMatrixImpl.operate#773",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.operate(double[])",
        "snippet": "    public double[] operate(double[] v) throws IllegalArgumentException {\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        if (v.length != nCols) {\n            throw new IllegalArgumentException(\"vector has wrong length\");\n        }\n        final double[] out = new double[v.length];\n        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow = data[row];\n            double sum = 0;\n            for (int i = 0; i < nCols; i++) {\n                sum += dataRow[i] * v[i];\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n",
        "begin_line": 773,
        "end_line": 789,
        "comment": "\n     * @param v vector to operate on\n     * @throws IllegalArgumentException if columnDimension != v.length\n     * @return resulting vector\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigMatrixImpl.operate#985",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.operate(java.math.BigDecimal[])",
        "snippet": "    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n        if (v.length != this.getColumnDimension()) {\n            throw new IllegalArgumentException(\"vector has wrong length\");\n        }\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        final BigDecimal[] out = new BigDecimal[v.length];\n        for (int row = 0; row < nRows; row++) {\n            BigDecimal sum = ZERO;\n            for (int i = 0; i < nCols; i++) {\n                sum = sum.add(data[row][i].multiply(v[i]));\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n",
        "begin_line": 985,
        "end_line": 1000,
        "comment": "\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigMatrixImpl.BigMatrixImpl#138",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.BigMatrixImpl(java.math.BigDecimal[][], boolean)",
        "snippet": "    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {\n        if (copyArray) {\n            copyIn(d);\n        } else {\n            if (d == null) {\n                throw new NullPointerException();\n            }   \n            final int nRows = d.length;\n            if (nRows == 0) {\n                throw new IllegalArgumentException(\"Matrix must have at least one row.\"); \n            }\n            final int nCols = d[0].length;\n            if (nCols == 0) {\n                throw new IllegalArgumentException(\"Matrix must have at least one column.\"); \n            }\n            for (int r = 1; r < nRows; r++) {\n                if (d[r].length != nCols) {\n                    throw new IllegalArgumentException(\"All input rows must have the same length.\");\n                }\n            }       \n            data = d;\n        }\n        lu = null;\n    }\n",
        "begin_line": 138,
        "end_line": 161,
        "comment": "\n     * Create a new BigMatrix using the input array as the underlying\n     * data array.\n     * <p>If an array is built specially in order to be embedded in a\n     * BigMatrix and not used directly, the <code>copyArray</code> may be\n     * set to <code>false</code. This will prevent the copying and improve\n     * performance as no new array will be built and no data will be copied.</p>\n     * @param d data for new matrix\n     * @param copyArray if true, the input array will be copied, otherwise\n     * it will be referenced\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     * @see #BigMatrixImpl(BigDecimal[][])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigMatrixImpl.getRowDimension#946",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.getRowDimension()",
        "snippet": "    public int getRowDimension() {\n        return data.length;\n    }\n",
        "begin_line": 946,
        "end_line": 948,
        "comment": "\n     * Returns the number of rows in the matrix.\n     *\n     * @return rowDimension\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "BigMatrixImpl.getColumnDimension#955",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.BigMatrixImpl",
        "signature": "org.apache.commons.math.linear.BigMatrixImpl.getColumnDimension()",
        "snippet": "    public int getColumnDimension() {\n        return data[0].length;\n    }\n",
        "begin_line": 955,
        "end_line": 957,
        "comment": "\n     * Returns the number of columns in the matrix.\n     *\n     * @return columnDimension\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixImpl.RealMatrixImpl#130",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.RealMatrixImpl(double[][], boolean)",
        "snippet": "    public RealMatrixImpl(double[][] d, boolean copyArray) {\n        if (copyArray) {\n            copyIn(d);\n        } else {\n            if (d == null) {\n                throw new NullPointerException();\n            }   \n            final int nRows = d.length;\n            if (nRows == 0) {\n                throw new IllegalArgumentException(\"Matrix must have at least one row.\"); \n            }\n            final int nCols = d[0].length;\n            if (nCols == 0) {\n                throw new IllegalArgumentException(\"Matrix must have at least one column.\"); \n            }\n            for (int r = 1; r < nRows; r++) {\n                if (d[r].length != nCols) {\n                    throw new IllegalArgumentException(\"All input rows must have the same length.\");\n                }\n            }       \n            data = d;\n        }\n        lu = null;\n    }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": "\n     * Create a new RealMatrix using the input array as the underlying\n     * data array.\n     * <p>If an array is built specially in order to be embedded in a\n     * RealMatrix and not used directly, the <code>copyArray</code> may be\n     * set to <code>false</code. This will prevent the copying and improve\n     * performance as no new array will be built and no data will be copied.</p>\n     * @param d data for new matrix\n     * @param copyArray if true, the input array will be copied, otherwise\n     * it will be referenced\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     * @see #RealMatrixImpl(double[][])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixImpl.getColumnDimension#749",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.getColumnDimension()",
        "snippet": "    public int getColumnDimension() {\n        return data[0].length;\n    }\n",
        "begin_line": 749,
        "end_line": 751,
        "comment": "\n     * @return columnDimension\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixImpl.getRowDimension#742",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "class_name": "org.apache.commons.math.linear.RealMatrixImpl",
        "signature": "org.apache.commons.math.linear.RealMatrixImpl.getRowDimension()",
        "snippet": "    public int getRowDimension() {\n        return data.length;\n    }\n",
        "begin_line": 742,
        "end_line": 744,
        "comment": "\n     * @return rowDimension\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 1
    }
]