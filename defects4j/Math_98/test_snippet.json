[
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.BigMatrixImplTest(java.lang.String)",
        "snippet": "    public BigMatrixImplTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.setUp()",
        "snippet": "    public void setUp() {\n        \n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(BigMatrixImplTest.class);\n        suite.setName(\"BigMatrixImpl Tests\");\n        return suite;\n    }\n",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 65)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(java.math.BigDecimal[])",
        "snippet": "    public static final double[] asDouble(BigDecimal[] data) {\n        double d[] = new double[data.length];\n        for (int i=0;i<d.length;i++) {\n            d[i] = data[i].doubleValue();\n        }\n        return d;\n    }\n",
        "begin_line": 110,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 45)",
            "(line 112,col 9)-(line 114,col 9)",
            "(line 115,col 9)-(line 115,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.asDouble(java.math.BigDecimal[][])",
        "snippet": "    public static final double[][] asDouble(BigDecimal[][] data) {\n        double d[][] = new double[data.length][data[0].length];\n        for (int i=0;i<d.length;i++) {\n            for (int j=0;j<d[i].length;j++)\n            d[i][j] = data[i][j].doubleValue();\n        }\n        return d;\n    }\n",
        "begin_line": 118,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 63)",
            "(line 120,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[])",
        "snippet": "    public static final BigDecimal[] asBigDecimal(double [] data) {\n        BigDecimal d[] = new BigDecimal[data.length];\n        for (int i=0;i<d.length;i++) {\n            d[i] = new BigDecimal(data[i]);\n        }\n        return d;\n    }\n",
        "begin_line": 127,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 53)",
            "(line 129,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.asBigDecimal(double[][])",
        "snippet": "    public static final BigDecimal[][] asBigDecimal(double [][] data) {\n        BigDecimal d[][] = new BigDecimal[data.length][data[0].length];\n        for (int i=0;i<d.length;i++) {\n            for (int j=0;j<data[i].length;j++) {\n                d[i][j] = new BigDecimal(data[i][j]);\n            }\n        }\n        return d;\n    }\n",
        "begin_line": 135,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 71)",
            "(line 137,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 142,col 17)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testDimensions()",
        "snippet": "    public void testDimensions() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n        assertEquals(\"testData row dimension\",3,m.getRowDimension());\n        assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n        assertTrue(\"testData is square\",m.isSquare());\n        assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n        assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n        assertTrue(\"testData2 is not square\",!m2.isSquare());\n    }  \n",
        "begin_line": 146,
        "end_line": 155,
        "comment": " test dimensions ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 54)",
            "(line 148,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 149,col 69)",
            "(line 150,col 9)-(line 150,col 75)",
            "(line 151,col 9)-(line 151,col 54)",
            "(line 152,col 9)-(line 152,col 71)",
            "(line 153,col 9)-(line 153,col 77)",
            "(line 154,col 9)-(line 154,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testCopyFunctions()",
        "snippet": "    public void testCopyFunctions() {\n        BigMatrixImpl m1 = new BigMatrixImpl(testData);\n        BigMatrixImpl m2 = new BigMatrixImpl(m1.getData());\n        assertEquals(m2,m1);\n        BigMatrixImpl m3 = new BigMatrixImpl(testData);\n        BigMatrixImpl m4 = new BigMatrixImpl(m3.getData(), false);\n        assertEquals(m4,m3);\n    }\n",
        "begin_line": 158,
        "end_line": 165,
        "comment": " test copy functions ",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 55)",
            "(line 160,col 9)-(line 160,col 59)",
            "(line 161,col 9)-(line 161,col 28)",
            "(line 162,col 9)-(line 162,col 55)",
            "(line 163,col 9)-(line 163,col 66)",
            "(line 164,col 9)-(line 164,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testConstructors()",
        "snippet": "    public void testConstructors() {\n        BigMatrix m1 = new BigMatrixImpl(testData);\n        BigMatrix m2 = new BigMatrixImpl(testDataString);\n        BigMatrix m3 = new BigMatrixImpl(asBigDecimal(testData));\n        BigMatrix m4 = new BigMatrixImpl(asBigDecimal(testData), true);\n        BigMatrix m5 = new BigMatrixImpl(asBigDecimal(testData), false);\n        assertClose(\"double, string\", m1, m2, Double.MIN_VALUE);\n        assertClose(\"double, BigDecimal\", m1, m3, Double.MIN_VALUE);\n        assertClose(\"string, BigDecimal\", m2, m3, Double.MIN_VALUE);\n        assertClose(\"double, BigDecimal/true\", m1, m4, Double.MIN_VALUE);\n        assertClose(\"double, BigDecimal/false\", m1, m5, Double.MIN_VALUE);\n        try {\n            new BigMatrixImpl(new String[][] {{\"0\", \"hello\", \"1\"}});\n            fail(\"Expecting NumberFormatException\");\n        } catch (NumberFormatException ex) {\n            // expected\n        }\n        try {\n            new BigMatrixImpl(new String[][] {});\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            new BigMatrixImpl(new String[][] {{},{}});\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            new BigMatrixImpl(new String[][] {{\"a\", \"b\"},{\"c\"}});\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        try {\n            new BigMatrixImpl(0, 1);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            new BigMatrixImpl(1, 0);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 168,
        "end_line": 216,
        "comment": " test constructors ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 51)",
            "(line 170,col 9)-(line 170,col 57)",
            "(line 171,col 9)-(line 171,col 65)",
            "(line 172,col 9)-(line 172,col 71)",
            "(line 173,col 9)-(line 173,col 72)",
            "(line 174,col 9)-(line 174,col 64)",
            "(line 175,col 9)-(line 175,col 68)",
            "(line 176,col 9)-(line 176,col 68)",
            "(line 177,col 9)-(line 177,col 73)",
            "(line 178,col 9)-(line 178,col 74)",
            "(line 179,col 9)-(line 184,col 9)",
            "(line 185,col 9)-(line 190,col 9)",
            "(line 191,col 9)-(line 196,col 9)",
            "(line 197,col 9)-(line 202,col 9)",
            "(line 204,col 9)-(line 209,col 9)",
            "(line 210,col 9)-(line 215,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testAdd()",
        "snippet": "    public void testAdd() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n        BigMatrix mPlusMInv = m.add(mInv);\n        double[][] sumEntries = asDouble(mPlusMInv.getData());\n        for (int row = 0; row < m.getRowDimension(); row++) {\n            for (int col = 0; col < m.getColumnDimension(); col++) {\n                assertEquals(\"sum entry entry\",\n                    testDataPlusInv[row][col],sumEntries[row][col],\n                        entryTolerance);\n            }\n        }    \n    }\n",
        "begin_line": 219,
        "end_line": 231,
        "comment": " test add ",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 54)",
            "(line 221,col 9)-(line 221,col 60)",
            "(line 222,col 9)-(line 222,col 42)",
            "(line 223,col 9)-(line 223,col 62)",
            "(line 224,col 9)-(line 230,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testAddFail()",
        "snippet": "    public void testAddFail() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n        try {\n            m.add(m2);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n    }\n",
        "begin_line": 234,
        "end_line": 243,
        "comment": " test add failure ",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 54)",
            "(line 236,col 9)-(line 236,col 56)",
            "(line 237,col 9)-(line 242,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testNorm()",
        "snippet": "    public void testNorm() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n        assertEquals(\"testData norm\",14d,m.getNorm().doubleValue(),entryTolerance);\n        assertEquals(\"testData2 norm\",7d,m2.getNorm().doubleValue(),entryTolerance);\n    }\n",
        "begin_line": 246,
        "end_line": 251,
        "comment": " test norm ",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 54)",
            "(line 248,col 9)-(line 248,col 56)",
            "(line 249,col 9)-(line 249,col 83)",
            "(line 250,col 9)-(line 250,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testPlusMinus()",
        "snippet": "    public void testPlusMinus() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl m2 = new BigMatrixImpl(testDataInv);\n        assertClose(\"m-n = m + -n\",m.subtract(m2),\n            m2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);\n        try {\n            m.subtract(new BigMatrixImpl(testData2));\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 254,
        "end_line": 265,
        "comment": " test m-n = m + -n ",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 54)",
            "(line 256,col 9)-(line 256,col 58)",
            "(line 257,col 9)-(line 258,col 74)",
            "(line 259,col 9)-(line 264,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply()",
        "snippet": "     public void testMultiply() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n        BigMatrixImpl identity = new BigMatrixImpl(id);\n        BigMatrixImpl m2 = new BigMatrixImpl(testData2);\n        assertClose(\"inverse multiply\",m.multiply(mInv),\n            identity,entryTolerance);\n        assertClose(\"inverse multiply\",mInv.multiply(m),\n            identity,entryTolerance);\n        assertClose(\"identity multiply\",m.multiply(identity),\n            m,entryTolerance);\n        assertClose(\"identity multiply\",identity.multiply(mInv),\n            mInv,entryTolerance);\n        assertClose(\"identity multiply\",m2.multiply(identity),\n            m2,entryTolerance); \n        try {\n            m.multiply(new BigMatrixImpl(bigSingular));\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }   \n",
        "begin_line": 268,
        "end_line": 289,
        "comment": " test multiply ",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 54)",
            "(line 270,col 9)-(line 270,col 60)",
            "(line 271,col 9)-(line 271,col 55)",
            "(line 272,col 9)-(line 272,col 56)",
            "(line 273,col 9)-(line 274,col 37)",
            "(line 275,col 9)-(line 276,col 37)",
            "(line 277,col 9)-(line 278,col 30)",
            "(line 279,col 9)-(line 280,col 33)",
            "(line 281,col 9)-(line 282,col 31)",
            "(line 283,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testMultiply2()",
        "snippet": "    public void testMultiply2() { \n       BigMatrix m3 = new BigMatrixImpl(d3);\n       BigMatrix m4 = new BigMatrixImpl(d4);\n       BigMatrix m5 = new BigMatrixImpl(d5);\n       assertClose(\"m3*m4=m5\", m3.multiply(m4), m5, entryTolerance);\n   }  \n",
        "begin_line": 297,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 298,col 8)-(line 298,col 44)",
            "(line 299,col 8)-(line 299,col 44)",
            "(line 300,col 8)-(line 300,col 44)",
            "(line 301,col 8)-(line 301,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testIsSingular()",
        "snippet": "    public void testIsSingular() {\n        BigMatrixImpl m = new BigMatrixImpl(singular);\n        assertTrue(\"singular\",m.isSingular());\n        m = new BigMatrixImpl(bigSingular);\n        assertTrue(\"big singular\",m.isSingular());\n        m = new BigMatrixImpl(id);\n        assertTrue(\"identity nonsingular\",!m.isSingular());\n        m = new BigMatrixImpl(testData);\n        assertTrue(\"testData nonsingular\",!m.isSingular());\n    }\n",
        "begin_line": 305,
        "end_line": 314,
        "comment": " test isSingular ",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 54)",
            "(line 307,col 9)-(line 307,col 46)",
            "(line 308,col 9)-(line 308,col 43)",
            "(line 309,col 9)-(line 309,col 50)",
            "(line 310,col 9)-(line 310,col 34)",
            "(line 311,col 9)-(line 311,col 59)",
            "(line 312,col 9)-(line 312,col 40)",
            "(line 313,col 9)-(line 313,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testInverse()",
        "snippet": "    public void testInverse() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrix mInv = new BigMatrixImpl(testDataInv);\n        assertClose(\"inverse\",mInv,m.inverse(),normTolerance);\n        assertClose(\"inverse^2\",m,m.inverse().inverse(),10E-12);\n        \n        // Not square\n        m = new BigMatrixImpl(testData2);\n        try {\n            m.inverse();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n        \n        // Singular\n        m = new BigMatrixImpl(singular);\n        try {\n            m.inverse();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 317,
        "end_line": 340,
        "comment": " test inverse ",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 54)",
            "(line 319,col 9)-(line 319,col 56)",
            "(line 320,col 9)-(line 320,col 62)",
            "(line 321,col 9)-(line 321,col 64)",
            "(line 324,col 9)-(line 324,col 41)",
            "(line 325,col 9)-(line 330,col 9)",
            "(line 333,col 9)-(line 333,col 40)",
            "(line 334,col 9)-(line 339,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testSolve()",
        "snippet": "    public void testSolve() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrix mInv = new BigMatrixImpl(testDataInv);\n        // being a bit slothful here -- actually testing that X = A^-1 * B\n        assertClose(\"inverse-operate\",\n                    asDouble(mInv.operate(asBigDecimal(testVector))),\n                    asDouble(m.solve(asBigDecimal(testVector))),\n                    normTolerance);\n        try {\n            asDouble(m.solve(asBigDecimal(testVector2)));\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }       \n        BigMatrix bs = new BigMatrixImpl(bigSingular);\n        try {\n            bs.solve(bs);\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            ;\n        }\n        try {\n            m.solve(bs);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            new BigMatrixImpl(testData2).solve(bs);\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        } \n        try {\n            (new BigMatrixImpl(testData2)).luDecompose();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            ;\n        }  \n    }\n",
        "begin_line": 343,
        "end_line": 382,
        "comment": " test solve ",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 54)",
            "(line 345,col 9)-(line 345,col 56)",
            "(line 347,col 9)-(line 350,col 35)",
            "(line 351,col 9)-(line 356,col 9)",
            "(line 357,col 9)-(line 357,col 54)",
            "(line 358,col 9)-(line 363,col 9)",
            "(line 364,col 9)-(line 369,col 9)",
            "(line 370,col 9)-(line 375,col 9)",
            "(line 376,col 9)-(line 381,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testDeterminant()",
        "snippet": "    public void testDeterminant() {       \n        BigMatrix m = new BigMatrixImpl(bigSingular);\n        assertEquals(\"singular determinant\",0,m.getDeterminant().doubleValue(),0);\n        m = new BigMatrixImpl(detData);\n        assertEquals(\"nonsingular test\",-3d,m.getDeterminant().doubleValue(),normTolerance);\n        \n        // Examples verified against R (version 1.8.1, Red Hat Linux 9)\n        m = new BigMatrixImpl(detData2);\n        assertEquals(\"nonsingular R test 1\",-2d,m.getDeterminant().doubleValue(),normTolerance);\n        m = new BigMatrixImpl(testData);\n        assertEquals(\"nonsingular  R test 2\",-1d,m.getDeterminant().doubleValue(),normTolerance);\n\n        try {\n            new BigMatrixImpl(testData2).getDeterminant().doubleValue();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 385,
        "end_line": 403,
        "comment": " test determinant ",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 53)",
            "(line 387,col 9)-(line 387,col 82)",
            "(line 388,col 9)-(line 388,col 39)",
            "(line 389,col 9)-(line 389,col 92)",
            "(line 392,col 9)-(line 392,col 40)",
            "(line 393,col 9)-(line 393,col 96)",
            "(line 394,col 9)-(line 394,col 40)",
            "(line 395,col 9)-(line 395,col 97)",
            "(line 397,col 9)-(line 402,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testTrace()",
        "snippet": "    public void testTrace() {\n        BigMatrix m = new BigMatrixImpl(id);\n        assertEquals(\"identity trace\",3d,m.getTrace().doubleValue(),entryTolerance);\n        m = new BigMatrixImpl(testData2);\n        try {\n            m.getTrace().doubleValue();\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 406,
        "end_line": 416,
        "comment": " test trace ",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 44)",
            "(line 408,col 9)-(line 408,col 84)",
            "(line 409,col 9)-(line 409,col 41)",
            "(line 410,col 9)-(line 415,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testScalarAdd()",
        "snippet": "    public void testScalarAdd() {\n        BigMatrix m = new BigMatrixImpl(testData);\n        assertClose(\"scalar add\",new BigMatrixImpl(testDataPlus2),\n            m.scalarAdd(new BigDecimal(2d)),entryTolerance);\n    }\n",
        "begin_line": 419,
        "end_line": 423,
        "comment": " test sclarAdd ",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 50)",
            "(line 421,col 9)-(line 422,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testOperate()",
        "snippet": "    public void testOperate() {\n        BigMatrix m = new BigMatrixImpl(id);\n        double[] x = asDouble(m.operate(asBigDecimal(testVector)));\n        assertClose(\"identity operate\",testVector,x,entryTolerance);\n        m = new BigMatrixImpl(bigSingular);\n        try {\n            asDouble(m.operate(asBigDecimal(testVector)));\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 426,
        "end_line": 437,
        "comment": " test operate ",
        "child_ranges": [
            "(line 427,col 9)-(line 427,col 44)",
            "(line 428,col 9)-(line 428,col 67)",
            "(line 429,col 9)-(line 429,col 68)",
            "(line 430,col 9)-(line 430,col 43)",
            "(line 431,col 9)-(line 436,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testMath209()",
        "snippet": "    public void testMath209() {\n        BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {\n                { new BigDecimal(1), new BigDecimal(2) },\n                { new BigDecimal(3), new BigDecimal(4) },\n                { new BigDecimal(5), new BigDecimal(6) }\n        }, false);\n        BigDecimal[] b = a.operate(new BigDecimal[] { new BigDecimal(1), new BigDecimal(1) });\n        assertEquals(a.getRowDimension(), b.length);\n        assertEquals( 3.0, b[0].doubleValue(), 1.0e-12);\n        assertEquals( 7.0, b[1].doubleValue(), 1.0e-12);\n        assertEquals(11.0, b[2].doubleValue(), 1.0e-12);\n    }\n",
        "begin_line": 440,
        "end_line": 451,
        "comment": " test issue MATH-209 ",
        "child_ranges": [
            "(line 441,col 9)-(line 445,col 18)",
            "(line 446,col 9)-(line 446,col 94)",
            "(line 447,col 9)-(line 447,col 52)",
            "(line 448,col 9)-(line 448,col 56)",
            "(line 449,col 9)-(line 449,col 56)",
            "(line 450,col 9)-(line 450,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testTranspose()",
        "snippet": "    public void testTranspose() {\n        BigMatrix m = new BigMatrixImpl(testData);\n        assertClose(\"inverse-transpose\",m.inverse().transpose(),\n            m.transpose().inverse(),normTolerance);\n        m = new BigMatrixImpl(testData2);\n        BigMatrix mt = new BigMatrixImpl(testData2T);\n        assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n    }\n",
        "begin_line": 454,
        "end_line": 461,
        "comment": " test transpose ",
        "child_ranges": [
            "(line 455,col 9)-(line 455,col 50)",
            "(line 456,col 9)-(line 457,col 51)",
            "(line 458,col 9)-(line 458,col 41)",
            "(line 459,col 9)-(line 459,col 53)",
            "(line 460,col 9)-(line 460,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiplyVector()",
        "snippet": "    public void testPremultiplyVector() {\n        BigMatrix m = new BigMatrixImpl(testData);\n        assertClose(\"premultiply\",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);\n        m = new BigMatrixImpl(bigSingular);\n        try {\n            m.preMultiply(asBigDecimal(testVector));\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n    }\n",
        "begin_line": 464,
        "end_line": 474,
        "comment": " test preMultiply by vector ",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 50)",
            "(line 466,col 9)-(line 466,col 111)",
            "(line 467,col 9)-(line 467,col 43)",
            "(line 468,col 9)-(line 473,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testPremultiply()",
        "snippet": "    public void testPremultiply() {\n        BigMatrix m3 = new BigMatrixImpl(d3);\n        BigMatrix m4 = new BigMatrixImpl(d4);\n        BigMatrix m5 = new BigMatrixImpl(d5);\n        assertClose(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n        \n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);\n        BigMatrixImpl identity = new BigMatrixImpl(id);\n        new BigMatrixImpl(testData2);\n        assertClose(\"inverse multiply\",m.preMultiply(mInv),\n                identity,entryTolerance);\n        assertClose(\"inverse multiply\",mInv.preMultiply(m),\n                identity,entryTolerance);\n        assertClose(\"identity multiply\",m.preMultiply(identity),\n                m,entryTolerance);\n        assertClose(\"identity multiply\",identity.preMultiply(mInv),\n                mInv,entryTolerance);\n        try {\n            m.preMultiply(new BigMatrixImpl(bigSingular));\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 476,
        "end_line": 500,
        "comment": "",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 45)",
            "(line 478,col 9)-(line 478,col 45)",
            "(line 479,col 9)-(line 479,col 45)",
            "(line 480,col 9)-(line 480,col 72)",
            "(line 482,col 9)-(line 482,col 54)",
            "(line 483,col 9)-(line 483,col 60)",
            "(line 484,col 9)-(line 484,col 55)",
            "(line 485,col 9)-(line 485,col 37)",
            "(line 486,col 9)-(line 487,col 41)",
            "(line 488,col 9)-(line 489,col 41)",
            "(line 490,col 9)-(line 491,col 34)",
            "(line 492,col 9)-(line 493,col 37)",
            "(line 494,col 9)-(line 499,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testGetVectors()",
        "snippet": "    public void testGetVectors() {\n        BigMatrix m = new BigMatrixImpl(testData);\n        assertClose(\"get row\",m.getRowAsDoubleArray(0),testDataRow1,entryTolerance);\n        assertClose(\"get col\",m.getColumnAsDoubleArray(2),testDataCol3,entryTolerance);\n        try {\n            m.getRowAsDoubleArray(10);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            ;\n        }\n        try {\n            m.getColumnAsDoubleArray(-1);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            ;\n        }\n    }\n",
        "begin_line": 502,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 503,col 9)-(line 503,col 50)",
            "(line 504,col 9)-(line 504,col 84)",
            "(line 505,col 9)-(line 505,col 87)",
            "(line 506,col 9)-(line 511,col 9)",
            "(line 512,col 9)-(line 517,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testLUDecomposition()",
        "snippet": "    public void testLUDecomposition() throws Exception {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrix lu = m.getLUMatrix();\n        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);\n        verifyDecomposition(m, lu);\n        m = new BigMatrixImpl(luData);\n        lu = m.getLUMatrix();\n        assertClose(\"LU decomposition\", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);\n        verifyDecomposition(m, lu);\n        m = new BigMatrixImpl(testDataMinus);\n        lu = m.getLUMatrix();\n        verifyDecomposition(m, lu);\n        m = new BigMatrixImpl(id);\n        lu = m.getLUMatrix();\n        verifyDecomposition(m, lu);\n        try {\n            m = new BigMatrixImpl(bigSingular); // singular\n            lu = m.getLUMatrix();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n        try {\n            m = new BigMatrixImpl(testData2);  // not square\n            lu = m.getLUMatrix();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 520,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 54)",
            "(line 522,col 9)-(line 522,col 39)",
            "(line 523,col 9)-(line 523,col 102)",
            "(line 524,col 9)-(line 524,col 35)",
            "(line 525,col 9)-(line 525,col 38)",
            "(line 526,col 9)-(line 526,col 29)",
            "(line 527,col 9)-(line 527,col 113)",
            "(line 528,col 9)-(line 528,col 35)",
            "(line 529,col 9)-(line 529,col 45)",
            "(line 530,col 9)-(line 530,col 29)",
            "(line 531,col 9)-(line 531,col 35)",
            "(line 532,col 9)-(line 532,col 34)",
            "(line 533,col 9)-(line 533,col 29)",
            "(line 534,col 9)-(line 534,col 35)",
            "(line 535,col 9)-(line 541,col 9)",
            "(line 542,col 9)-(line 548,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testSubMatrix()",
        "snippet": "    public void testSubMatrix() {\n        BigMatrix m = new BigMatrixImpl(subTestData);\n        BigMatrix mRows23Cols00 = new BigMatrixImpl(subRows23Cols00);\n        BigMatrix mRows00Cols33 = new BigMatrixImpl(subRows00Cols33);\n        BigMatrix mRows01Cols23 = new BigMatrixImpl(subRows01Cols23);\n        BigMatrix mRows02Cols13 = new BigMatrixImpl(subRows02Cols13);\n        BigMatrix mRows03Cols12 = new BigMatrixImpl(subRows03Cols12);\n        BigMatrix mRows03Cols123 = new BigMatrixImpl(subRows03Cols123);\n        BigMatrix mRows20Cols123 = new BigMatrixImpl(subRows20Cols123);\n        BigMatrix mRows31Cols31 = new BigMatrixImpl(subRows31Cols31);\n        assertEquals(\"Rows23Cols00\", mRows23Cols00, \n                m.getSubMatrix(2 , 3 , 0, 0));\n        assertEquals(\"Rows00Cols33\", mRows00Cols33, \n                m.getSubMatrix(0 , 0 , 3, 3));\n        assertEquals(\"Rows01Cols23\", mRows01Cols23,\n                m.getSubMatrix(0 , 1 , 2, 3));   \n        assertEquals(\"Rows02Cols13\", mRows02Cols13,\n                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n        assertEquals(\"Rows03Cols12\", mRows03Cols12,\n                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n        assertEquals(\"Rows03Cols123\", mRows03Cols123,\n                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n        assertEquals(\"Rows20Cols123\", mRows20Cols123,\n                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n        \n        try {\n            m.getSubMatrix(1,0,2,4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(-1,1,2,2);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(1,0,2,2);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(1,0,2,4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(new int[] {}, new int[] {0});\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(new int[] {0}, new int[] {4});\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 554,
        "end_line": 619,
        "comment": "\n    * test submatrix accessors\n    ",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 53)",
            "(line 556,col 9)-(line 556,col 69)",
            "(line 557,col 9)-(line 557,col 69)",
            "(line 558,col 9)-(line 558,col 69)",
            "(line 559,col 9)-(line 559,col 69)",
            "(line 560,col 9)-(line 560,col 69)",
            "(line 561,col 9)-(line 561,col 71)",
            "(line 562,col 9)-(line 562,col 71)",
            "(line 563,col 9)-(line 563,col 69)",
            "(line 564,col 9)-(line 565,col 46)",
            "(line 566,col 9)-(line 567,col 46)",
            "(line 568,col 9)-(line 569,col 46)",
            "(line 570,col 9)-(line 571,col 66)",
            "(line 572,col 9)-(line 573,col 66)",
            "(line 574,col 9)-(line 575,col 68)",
            "(line 576,col 9)-(line 577,col 68)",
            "(line 578,col 9)-(line 579,col 66)",
            "(line 580,col 9)-(line 581,col 66)",
            "(line 583,col 9)-(line 588,col 9)",
            "(line 589,col 9)-(line 594,col 9)",
            "(line 595,col 9)-(line 600,col 9)",
            "(line 601,col 9)-(line 606,col 9)",
            "(line 607,col 9)-(line 612,col 9)",
            "(line 613,col 9)-(line 618,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testGetColumnMatrix()",
        "snippet": "    public void testGetColumnMatrix() {\n        BigMatrix m = new BigMatrixImpl(subTestData);\n        BigMatrix mColumn1 = new BigMatrixImpl(subColumn1);\n        BigMatrix mColumn3 = new BigMatrixImpl(subColumn3);\n        assertEquals(\"Column1\", mColumn1, \n                m.getColumnMatrix(1));\n        assertEquals(\"Column3\", mColumn3, \n                m.getColumnMatrix(3));\n        try {\n            m.getColumnMatrix(-1);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getColumnMatrix(4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 621,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 622,col 9)-(line 622,col 53)",
            "(line 623,col 9)-(line 623,col 59)",
            "(line 624,col 9)-(line 624,col 59)",
            "(line 625,col 9)-(line 626,col 38)",
            "(line 627,col 9)-(line 628,col 38)",
            "(line 629,col 9)-(line 634,col 9)",
            "(line 635,col 9)-(line 640,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testGetRowMatrix()",
        "snippet": "    public void testGetRowMatrix() {\n        BigMatrix m = new BigMatrixImpl(subTestData);\n        BigMatrix mRow0 = new BigMatrixImpl(subRow0);\n        BigMatrix mRow3 = new BigMatrixImpl(subRow3);\n        assertEquals(\"Row0\", mRow0, \n                m.getRowMatrix(0));\n        assertEquals(\"Row3\", mRow3, \n                m.getRowMatrix(3));\n        try {\n            m.getRowMatrix(-1);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getRowMatrix(4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 643,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 644,col 9)-(line 644,col 53)",
            "(line 645,col 9)-(line 645,col 53)",
            "(line 646,col 9)-(line 646,col 53)",
            "(line 647,col 9)-(line 648,col 35)",
            "(line 649,col 9)-(line 650,col 35)",
            "(line 651,col 9)-(line 656,col 9)",
            "(line 657,col 9)-(line 662,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testEqualsAndHashCode()",
        "snippet": "    public void testEqualsAndHashCode() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        BigMatrixImpl m1 = (BigMatrixImpl) m.copy();\n        BigMatrixImpl mt = (BigMatrixImpl) m.transpose();\n        assertTrue(m.hashCode() != mt.hashCode());\n        assertEquals(m.hashCode(), m1.hashCode());\n        assertEquals(m, m);\n        assertEquals(m, m1);\n        assertFalse(m.equals(null));\n        assertFalse(m.equals(mt));\n        assertFalse(m.equals(new BigMatrixImpl(bigSingular)));\n        // Different scales make BigDecimals, so matrices unequal\n        m = new BigMatrixImpl(new String[][] {{\"2.0\"}});\n        m1 = new BigMatrixImpl(new String[][] {{\"2.00\"}});\n        assertTrue(m.hashCode() != m1.hashCode());\n        assertFalse(m.equals(m1));\n    }\n",
        "begin_line": 665,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 666,col 9)-(line 666,col 54)",
            "(line 667,col 9)-(line 667,col 52)",
            "(line 668,col 9)-(line 668,col 57)",
            "(line 669,col 9)-(line 669,col 50)",
            "(line 670,col 9)-(line 670,col 50)",
            "(line 671,col 9)-(line 671,col 27)",
            "(line 672,col 9)-(line 672,col 28)",
            "(line 673,col 9)-(line 673,col 36)",
            "(line 674,col 9)-(line 674,col 34)",
            "(line 675,col 9)-(line 675,col 62)",
            "(line 677,col 9)-(line 677,col 56)",
            "(line 678,col 9)-(line 678,col 58)",
            "(line 679,col 9)-(line 679,col 50)",
            "(line 680,col 9)-(line 680,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testToString()",
        "snippet": "    public void testToString() {\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        assertEquals(\"BigMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}\",\n                m.toString());\n        m = new BigMatrixImpl();\n        assertEquals(\"BigMatrixImpl{}\",\n                m.toString());\n    }\n",
        "begin_line": 683,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 684,col 9)-(line 684,col 54)",
            "(line 685,col 9)-(line 686,col 30)",
            "(line 687,col 9)-(line 687,col 32)",
            "(line 688,col 9)-(line 689,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.testSetSubMatrix()",
        "snippet": "    public void testSetSubMatrix() throws Exception {\n        BigDecimal[][] detData3 = \n            MatrixUtils.createBigMatrix(detData2).getData();\n        BigMatrixImpl m = new BigMatrixImpl(testData);\n        m.setSubMatrix(detData3,1,1);\n        BigMatrix expected = MatrixUtils.createBigMatrix\n            (new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});\n        assertEquals(expected, m);  \n        \n        m.setSubMatrix(detData3,0,0);\n        expected = MatrixUtils.createBigMatrix\n            (new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});\n        assertEquals(expected, m);  \n        \n        BigDecimal[][] testDataPlus3 = \n            MatrixUtils.createBigMatrix(testDataPlus2).getData();\n        m.setSubMatrix(testDataPlus3,0,0);      \n        expected = MatrixUtils.createBigMatrix\n        (new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});\n        assertEquals(expected, m);   \n        \n        // javadoc example\n        BigMatrixImpl matrix = (BigMatrixImpl) MatrixUtils.createBigMatrix\n            (new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});\n        matrix.setSubMatrix(new BigDecimal[][] {{new BigDecimal(3),\n            new BigDecimal(4)}, {new BigDecimal(5), new BigDecimal(6)}}, 1, 1);\n        expected = MatrixUtils.createBigMatrix\n            (new BigDecimal[][] {{new BigDecimal(1), new BigDecimal(2),\n             new BigDecimal(3), new BigDecimal(4)}, {new BigDecimal(5),\n             new BigDecimal(3), new BigDecimal(4), new BigDecimal(8)},\n             {new BigDecimal(9), new BigDecimal(5) , new BigDecimal(6),\n              new BigDecimal(2)}});\n        assertEquals(expected, matrix);   \n        \n        // dimension overflow\n        try {  \n            m.setSubMatrix(matrix.getData(),1,1);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException e) {\n            // expected\n        }\n        \n        // null\n        try {\n            m.setSubMatrix(null,1,1);\n            fail(\"expecting NullPointerException\");\n        } catch (NullPointerException e) {\n            // expected\n        }\n        \n        // ragged\n        try {\n            m.setSubMatrix(new BigDecimal[][] {{new BigDecimal(1)},\n                    {new BigDecimal(2), new BigDecimal(3)}}, 0, 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n        \n        // empty\n        try {\n            m.setSubMatrix(new BigDecimal[][] {{}}, 0, 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n        \n    }\n",
        "begin_line": 692,
        "end_line": 759,
        "comment": "",
        "child_ranges": [
            "(line 693,col 9)-(line 694,col 60)",
            "(line 695,col 9)-(line 695,col 54)",
            "(line 696,col 9)-(line 696,col 37)",
            "(line 697,col 9)-(line 698,col 73)",
            "(line 699,col 9)-(line 699,col 34)",
            "(line 701,col 9)-(line 701,col 37)",
            "(line 702,col 9)-(line 703,col 73)",
            "(line 704,col 9)-(line 704,col 34)",
            "(line 706,col 9)-(line 707,col 65)",
            "(line 708,col 9)-(line 708,col 42)",
            "(line 709,col 9)-(line 710,col 70)",
            "(line 711,col 9)-(line 711,col 34)",
            "(line 714,col 9)-(line 715,col 73)",
            "(line 716,col 9)-(line 717,col 79)",
            "(line 718,col 9)-(line 723,col 35)",
            "(line 724,col 9)-(line 724,col 39)",
            "(line 727,col 9)-(line 732,col 9)",
            "(line 735,col 9)-(line 740,col 9)",
            "(line 743,col 9)-(line 749,col 9)",
            "(line 752,col 9)-(line 757,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(java.lang.String, org.apache.commons.math.linear.BigMatrix, org.apache.commons.math.linear.BigMatrix, double)",
        "snippet": "    protected void assertClose(String msg, BigMatrix m, BigMatrix n,\n        double tolerance) {\n        assertTrue(msg,m.subtract(n).getNorm().doubleValue() < tolerance);\n    }\n",
        "begin_line": 764,
        "end_line": 767,
        "comment": " verifies that two matrices are close (1-norm) ",
        "child_ranges": [
            "(line 766,col 9)-(line 766,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.assertClose(java.lang.String, double[], double[], double)",
        "snippet": "    protected void assertClose(String msg, double[] m, double[] n,\n        double tolerance) {\n        if (m.length != n.length) {\n            fail(\"vectors not same length\");\n        }\n        for (int i = 0; i < m.length; i++) {\n            assertEquals(msg + \" \" +  i + \" elements differ\", \n                m[i],n[i],tolerance);\n        }\n    }\n",
        "begin_line": 770,
        "end_line": 779,
        "comment": " verifies that two vectors are close (sup norm) ",
        "child_ranges": [
            "(line 772,col 9)-(line 774,col 9)",
            "(line 775,col 9)-(line 778,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.splitLU(org.apache.commons.math.linear.BigMatrix, java.math.BigDecimal[][], java.math.BigDecimal[][])",
        "snippet": "    protected void splitLU(BigMatrix lu, BigDecimal[][] lowerData, BigDecimal[][] upperData) throws InvalidMatrixException {\n        if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||\n                lowerData.length != upperData.length\n                || lowerData.length != lu.getRowDimension()) {\n            throw new InvalidMatrixException(\"incorrect dimensions\");\n        }    \n        int n = lu.getRowDimension();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (j < i) {\n                    lowerData[i][j] = lu.getEntry(i, j);\n                    upperData[i][j] = new BigDecimal(0);\n                } else if (i == j) {\n                    lowerData[i][j] = new BigDecimal(1);\n                    upperData[i][j] = lu.getEntry(i, j);\n                } else {\n                    lowerData[i][j] = new BigDecimal(0);\n                    upperData[i][j] = lu.getEntry(i, j);\n                }   \n            }\n        }\n    }\n",
        "begin_line": 782,
        "end_line": 803,
        "comment": " extracts the l  and u matrices from compact lu representation ",
        "child_ranges": [
            "(line 783,col 9)-(line 787,col 9)",
            "(line 788,col 9)-(line 788,col 37)",
            "(line 789,col 9)-(line 802,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.permuteRows(org.apache.commons.math.linear.BigMatrix, int[])",
        "snippet": "    protected BigMatrix permuteRows(BigMatrix matrix, int[] permutation) {\n        if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {\n            throw new IllegalArgumentException(\"dimension mismatch\");\n        }\n        int n = matrix.getRowDimension();\n        int m = matrix.getColumnDimension();\n        BigDecimal out[][] = new BigDecimal[m][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                out[i][j] = matrix.getEntry(permutation[i], j);\n            }\n        }\n        return new BigMatrixImpl(out);\n    }\n",
        "begin_line": 806,
        "end_line": 819,
        "comment": " Returns the result of applying the given row permutation to the matrix ",
        "child_ranges": [
            "(line 807,col 9)-(line 809,col 9)",
            "(line 810,col 9)-(line 810,col 41)",
            "(line 811,col 9)-(line 811,col 44)",
            "(line 812,col 9)-(line 812,col 50)",
            "(line 813,col 9)-(line 817,col 9)",
            "(line 818,col 9)-(line 818,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.BigMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.BigMatrixImplTest.verifyDecomposition(org.apache.commons.math.linear.BigMatrix, org.apache.commons.math.linear.BigMatrix)",
        "snippet": "    protected void verifyDecomposition(BigMatrix matrix, BigMatrix lu) throws Exception{\n        int n = matrix.getRowDimension();\n        BigDecimal[][] lowerData = new BigDecimal[n][n];\n        BigDecimal[][] upperData = new BigDecimal[n][n];\n        splitLU(lu, lowerData, upperData);\n        BigMatrix lower =new BigMatrixImpl(lowerData);\n        BigMatrix upper = new BigMatrixImpl(upperData);\n        int[] permutation = ((BigMatrixImpl) matrix).getPermutation();\n        BigMatrix permuted = permuteRows(matrix, permutation);\n        assertClose(\"lu decomposition does not work\", permuted,\n                lower.multiply(upper), normTolerance);\n    }\n",
        "begin_line": 822,
        "end_line": 833,
        "comment": " Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation ",
        "child_ranges": [
            "(line 823,col 9)-(line 823,col 41)",
            "(line 824,col 9)-(line 824,col 56)",
            "(line 825,col 9)-(line 825,col 56)",
            "(line 826,col 9)-(line 826,col 42)",
            "(line 827,col 9)-(line 827,col 54)",
            "(line 828,col 9)-(line 828,col 55)",
            "(line 829,col 9)-(line 829,col 70)",
            "(line 830,col 9)-(line 830,col 62)",
            "(line 831,col 9)-(line 832,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.RealMatrixImplTest(java.lang.String)",
        "snippet": "    public RealMatrixImplTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.setUp()",
        "snippet": "    public void setUp() {\n        \n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(RealMatrixImplTest.class);\n        suite.setName(\"RealMatrixImpl Tests\");\n        return suite;\n    }\n",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 66)",
            "(line 101,col 9)-(line 101,col 46)",
            "(line 102,col 9)-(line 102,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testDimensions()",
        "snippet": "    public void testDimensions() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n        assertEquals(\"testData row dimension\",3,m.getRowDimension());\n        assertEquals(\"testData column dimension\",3,m.getColumnDimension());\n        assertTrue(\"testData is square\",m.isSquare());\n        assertEquals(\"testData2 row dimension\",m2.getRowDimension(),2);\n        assertEquals(\"testData2 column dimension\",m2.getColumnDimension(),3);\n        assertTrue(\"testData2 is not square\",!m2.isSquare());\n    } \n",
        "begin_line": 106,
        "end_line": 115,
        "comment": " test dimensions ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 56)",
            "(line 108,col 9)-(line 108,col 58)",
            "(line 109,col 9)-(line 109,col 69)",
            "(line 110,col 9)-(line 110,col 75)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 112,col 71)",
            "(line 113,col 9)-(line 113,col 77)",
            "(line 114,col 9)-(line 114,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testCopyFunctions()",
        "snippet": "    public void testCopyFunctions() {\n        RealMatrixImpl m1 = new RealMatrixImpl(testData);\n        RealMatrixImpl m2 = new RealMatrixImpl(m1.getData());\n        assertEquals(m2,m1);\n        RealMatrixImpl m3 = new RealMatrixImpl(testData);\n        RealMatrixImpl m4 = new RealMatrixImpl(m3.getData(), false);\n        assertEquals(m4,m3);\n    }           \n",
        "begin_line": 118,
        "end_line": 125,
        "comment": " test copy functions ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 57)",
            "(line 120,col 9)-(line 120,col 61)",
            "(line 121,col 9)-(line 121,col 28)",
            "(line 122,col 9)-(line 122,col 57)",
            "(line 123,col 9)-(line 123,col 68)",
            "(line 124,col 9)-(line 124,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testAdd()",
        "snippet": "    public void testAdd() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n        RealMatrix mPlusMInv = m.add(mInv);\n        double[][] sumEntries = mPlusMInv.getData();\n        for (int row = 0; row < m.getRowDimension(); row++) {\n            for (int col = 0; col < m.getColumnDimension(); col++) {\n                assertEquals(\"sum entry entry\",\n                    testDataPlusInv[row][col],sumEntries[row][col],\n                        entryTolerance);\n            }\n        }    \n    }\n",
        "begin_line": 128,
        "end_line": 140,
        "comment": " test add ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 56)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 131,col 43)",
            "(line 132,col 9)-(line 132,col 52)",
            "(line 133,col 9)-(line 139,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testAddFail()",
        "snippet": "    public void testAddFail() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n        try {\n            m.add(m2);\n            fail(\"IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n    }\n",
        "begin_line": 143,
        "end_line": 152,
        "comment": " test add failure ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 56)",
            "(line 145,col 9)-(line 145,col 58)",
            "(line 146,col 9)-(line 151,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testNorm()",
        "snippet": "    public void testNorm() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n        assertEquals(\"testData norm\",14d,m.getNorm(),entryTolerance);\n        assertEquals(\"testData2 norm\",7d,m2.getNorm(),entryTolerance);\n    }\n",
        "begin_line": 155,
        "end_line": 160,
        "comment": " test norm ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 56)",
            "(line 157,col 9)-(line 157,col 58)",
            "(line 158,col 9)-(line 158,col 69)",
            "(line 159,col 9)-(line 159,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testPlusMinus()",
        "snippet": "    public void testPlusMinus() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl m2 = new RealMatrixImpl(testDataInv);\n        assertClose(\"m-n = m + -n\",m.subtract(m2),\n            m2.scalarMultiply(-1d).add(m),entryTolerance);        \n        try {\n            m.subtract(new RealMatrixImpl(testData2));\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 163,
        "end_line": 174,
        "comment": " test m-n = m + -n ",
        "child_ranges": [
            "(line 164,col 9)-(line 164,col 56)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 167,col 58)",
            "(line 168,col 9)-(line 173,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply()",
        "snippet": "     public void testMultiply() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n        RealMatrixImpl identity = new RealMatrixImpl(id);\n        RealMatrixImpl m2 = new RealMatrixImpl(testData2);\n        assertClose(\"inverse multiply\",m.multiply(mInv),\n            identity,entryTolerance);\n        assertClose(\"inverse multiply\",mInv.multiply(m),\n            identity,entryTolerance);\n        assertClose(\"identity multiply\",m.multiply(identity),\n            m,entryTolerance);\n        assertClose(\"identity multiply\",identity.multiply(mInv),\n            mInv,entryTolerance);\n        assertClose(\"identity multiply\",m2.multiply(identity),\n            m2,entryTolerance); \n        try {\n            m.multiply(new RealMatrixImpl(bigSingular));\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }   \n",
        "begin_line": 177,
        "end_line": 198,
        "comment": " test multiply ",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 56)",
            "(line 179,col 9)-(line 179,col 62)",
            "(line 180,col 9)-(line 180,col 57)",
            "(line 181,col 9)-(line 181,col 58)",
            "(line 182,col 9)-(line 183,col 37)",
            "(line 184,col 9)-(line 185,col 37)",
            "(line 186,col 9)-(line 187,col 30)",
            "(line 188,col 9)-(line 189,col 33)",
            "(line 190,col 9)-(line 191,col 31)",
            "(line 192,col 9)-(line 197,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testMultiply2()",
        "snippet": "    public void testMultiply2() { \n       RealMatrix m3 = new RealMatrixImpl(d3);   \n       RealMatrix m4 = new RealMatrixImpl(d4);\n       RealMatrix m5 = new RealMatrixImpl(d5);\n       assertClose(\"m3*m4=m5\", m3.multiply(m4), m5, entryTolerance);\n   }  \n",
        "begin_line": 206,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 207,col 8)-(line 207,col 46)",
            "(line 208,col 8)-(line 208,col 46)",
            "(line 209,col 8)-(line 209,col 46)",
            "(line 210,col 8)-(line 210,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testIsSingular()",
        "snippet": "    public void testIsSingular() {\n        RealMatrixImpl m = new RealMatrixImpl(singular);\n        assertTrue(\"singular\",m.isSingular());\n        m = new RealMatrixImpl(bigSingular);\n        assertTrue(\"big singular\",m.isSingular());\n        m = new RealMatrixImpl(id);\n        assertTrue(\"identity nonsingular\",!m.isSingular());\n        m = new RealMatrixImpl(testData);\n        assertTrue(\"testData nonsingular\",!m.isSingular());\n    }\n",
        "begin_line": 214,
        "end_line": 223,
        "comment": " test isSingular ",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 56)",
            "(line 216,col 9)-(line 216,col 46)",
            "(line 217,col 9)-(line 217,col 44)",
            "(line 218,col 9)-(line 218,col 50)",
            "(line 219,col 9)-(line 219,col 35)",
            "(line 220,col 9)-(line 220,col 59)",
            "(line 221,col 9)-(line 221,col 41)",
            "(line 222,col 9)-(line 222,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testInverse()",
        "snippet": "    public void testInverse() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrix mInv = new RealMatrixImpl(testDataInv);\n        assertClose(\"inverse\",mInv,m.inverse(),normTolerance);\n        assertClose(\"inverse^2\",m,m.inverse().inverse(),10E-12);\n        \n        // Not square\n        m = new RealMatrixImpl(testData2);\n        try {\n            m.inverse();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n        \n        // Singular\n        m = new RealMatrixImpl(singular);\n        try {\n            m.inverse();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 226,
        "end_line": 249,
        "comment": " test inverse ",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 56)",
            "(line 228,col 9)-(line 228,col 58)",
            "(line 229,col 9)-(line 229,col 62)",
            "(line 230,col 9)-(line 230,col 64)",
            "(line 233,col 9)-(line 233,col 42)",
            "(line 234,col 9)-(line 239,col 9)",
            "(line 242,col 9)-(line 242,col 41)",
            "(line 243,col 9)-(line 248,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testSolve()",
        "snippet": "    public void testSolve() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrix mInv = new RealMatrixImpl(testDataInv);\n        // being a bit slothful here -- actually testing that X = A^-1 * B\n        assertClose(\"inverse-operate\",mInv.operate(testVector),\n            m.solve(testVector),normTolerance);\n        try {\n            m.solve(testVector2);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }       \n        RealMatrix bs = new RealMatrixImpl(bigSingular);\n        try {\n            bs.solve(bs);\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            ;\n        }\n        try {\n            m.solve(bs);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            new RealMatrixImpl(testData2).solve(bs);\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        } \n        try {\n            (new RealMatrixImpl(testData2)).luDecompose();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            ;\n        }  \n    }\n",
        "begin_line": 252,
        "end_line": 289,
        "comment": " test solve ",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 56)",
            "(line 254,col 9)-(line 254,col 58)",
            "(line 256,col 9)-(line 257,col 47)",
            "(line 258,col 9)-(line 263,col 9)",
            "(line 264,col 9)-(line 264,col 56)",
            "(line 265,col 9)-(line 270,col 9)",
            "(line 271,col 9)-(line 276,col 9)",
            "(line 277,col 9)-(line 282,col 9)",
            "(line 283,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testDeterminant()",
        "snippet": "    public void testDeterminant() {       \n        RealMatrix m = new RealMatrixImpl(bigSingular);\n        assertEquals(\"singular determinant\",0,m.getDeterminant(),0);\n        m = new RealMatrixImpl(detData);\n        assertEquals(\"nonsingular test\",-3d,m.getDeterminant(),normTolerance);\n        \n        // Examples verified against R (version 1.8.1, Red Hat Linux 9)\n        m = new RealMatrixImpl(detData2);\n        assertEquals(\"nonsingular R test 1\",-2d,m.getDeterminant(),normTolerance);\n        m = new RealMatrixImpl(testData);\n        assertEquals(\"nonsingular  R test 2\",-1d,m.getDeterminant(),normTolerance);\n\n        try {\n            new RealMatrixImpl(testData2).getDeterminant();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 292,
        "end_line": 310,
        "comment": " test determinant ",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 55)",
            "(line 294,col 9)-(line 294,col 68)",
            "(line 295,col 9)-(line 295,col 40)",
            "(line 296,col 9)-(line 296,col 78)",
            "(line 299,col 9)-(line 299,col 41)",
            "(line 300,col 9)-(line 300,col 82)",
            "(line 301,col 9)-(line 301,col 41)",
            "(line 302,col 9)-(line 302,col 83)",
            "(line 304,col 9)-(line 309,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testTrace()",
        "snippet": "    public void testTrace() {\n        RealMatrix m = new RealMatrixImpl(id);\n        assertEquals(\"identity trace\",3d,m.getTrace(),entryTolerance);\n        m = new RealMatrixImpl(testData2);\n        try {\n            m.getTrace();\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 313,
        "end_line": 323,
        "comment": " test trace ",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 46)",
            "(line 315,col 9)-(line 315,col 70)",
            "(line 316,col 9)-(line 316,col 42)",
            "(line 317,col 9)-(line 322,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testScalarAdd()",
        "snippet": "    public void testScalarAdd() {\n        RealMatrix m = new RealMatrixImpl(testData);\n        assertClose(\"scalar add\",new RealMatrixImpl(testDataPlus2),\n            m.scalarAdd(2d),entryTolerance);\n    }\n",
        "begin_line": 326,
        "end_line": 330,
        "comment": " test sclarAdd ",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 52)",
            "(line 328,col 9)-(line 329,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testOperate()",
        "snippet": "    public void testOperate() {\n        RealMatrix m = new RealMatrixImpl(id);\n        double[] x = m.operate(testVector);\n        assertClose(\"identity operate\",testVector,x,entryTolerance);\n        m = new RealMatrixImpl(bigSingular);\n        try {\n            m.operate(testVector);\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 333,
        "end_line": 344,
        "comment": " test operate ",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 46)",
            "(line 335,col 9)-(line 335,col 43)",
            "(line 336,col 9)-(line 336,col 68)",
            "(line 337,col 9)-(line 337,col 44)",
            "(line 338,col 9)-(line 343,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testMath209()",
        "snippet": "    public void testMath209() {\n        RealMatrix a = new RealMatrixImpl(new double[][] {\n                { 1, 2 }, { 3, 4 }, { 5, 6 }\n        }, false);\n        double[] b = a.operate(new double[] { 1, 1 });\n        assertEquals(a.getRowDimension(), b.length);\n        assertEquals( 3.0, b[0], 1.0e-12);\n        assertEquals( 7.0, b[1], 1.0e-12);\n        assertEquals(11.0, b[2], 1.0e-12);\n    }\n",
        "begin_line": 347,
        "end_line": 356,
        "comment": " test issue MATH-209 ",
        "child_ranges": [
            "(line 348,col 9)-(line 350,col 18)",
            "(line 351,col 9)-(line 351,col 54)",
            "(line 352,col 9)-(line 352,col 52)",
            "(line 353,col 9)-(line 353,col 42)",
            "(line 354,col 9)-(line 354,col 42)",
            "(line 355,col 9)-(line 355,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testTranspose()",
        "snippet": "    public void testTranspose() {\n        RealMatrix m = new RealMatrixImpl(testData); \n        assertClose(\"inverse-transpose\",m.inverse().transpose(),\n            m.transpose().inverse(),normTolerance);\n        m = new RealMatrixImpl(testData2);\n        RealMatrix mt = new RealMatrixImpl(testData2T);\n        assertClose(\"transpose\",mt,m.transpose(),normTolerance);\n    }\n",
        "begin_line": 359,
        "end_line": 366,
        "comment": " test transpose ",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 52)",
            "(line 361,col 9)-(line 362,col 51)",
            "(line 363,col 9)-(line 363,col 42)",
            "(line 364,col 9)-(line 364,col 55)",
            "(line 365,col 9)-(line 365,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiplyVector()",
        "snippet": "    public void testPremultiplyVector() {\n        RealMatrix m = new RealMatrixImpl(testData);\n        assertClose(\"premultiply\",m.preMultiply(testVector),preMultTest,normTolerance);\n        m = new RealMatrixImpl(bigSingular);\n        try {\n            m.preMultiply(testVector);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n    }\n",
        "begin_line": 369,
        "end_line": 379,
        "comment": " test preMultiply by vector ",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 52)",
            "(line 371,col 9)-(line 371,col 87)",
            "(line 372,col 9)-(line 372,col 44)",
            "(line 373,col 9)-(line 378,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testPremultiply()",
        "snippet": "    public void testPremultiply() {\n        RealMatrix m3 = new RealMatrixImpl(d3);   \n        RealMatrix m4 = new RealMatrixImpl(d4);\n        RealMatrix m5 = new RealMatrixImpl(d5);\n        assertClose(\"m3*m4=m5\", m4.preMultiply(m3), m5, entryTolerance);\n        \n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl mInv = new RealMatrixImpl(testDataInv);\n        RealMatrixImpl identity = new RealMatrixImpl(id);\n        assertClose(\"inverse multiply\",m.preMultiply(mInv),\n                identity,entryTolerance);\n        assertClose(\"inverse multiply\",mInv.preMultiply(m),\n                identity,entryTolerance);\n        assertClose(\"identity multiply\",m.preMultiply(identity),\n                m,entryTolerance);\n        assertClose(\"identity multiply\",identity.preMultiply(mInv),\n                mInv,entryTolerance);\n        try {\n            m.preMultiply(new RealMatrixImpl(bigSingular));\n            fail(\"Expecting illegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }      \n    }\n",
        "begin_line": 381,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 47)",
            "(line 383,col 9)-(line 383,col 47)",
            "(line 384,col 9)-(line 384,col 47)",
            "(line 385,col 9)-(line 385,col 72)",
            "(line 387,col 9)-(line 387,col 56)",
            "(line 388,col 9)-(line 388,col 62)",
            "(line 389,col 9)-(line 389,col 57)",
            "(line 390,col 9)-(line 391,col 41)",
            "(line 392,col 9)-(line 393,col 41)",
            "(line 394,col 9)-(line 395,col 34)",
            "(line 396,col 9)-(line 397,col 37)",
            "(line 398,col 9)-(line 403,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testGetVectors()",
        "snippet": "    public void testGetVectors() {\n        RealMatrix m = new RealMatrixImpl(testData);\n        assertClose(\"get row\",m.getRow(0),testDataRow1,entryTolerance);\n        assertClose(\"get col\",m.getColumn(2),testDataCol3,entryTolerance);\n        try {\n            m.getRow(10);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            ;\n        }\n        try {\n            m.getColumn(-1);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            ;\n        }\n    }\n",
        "begin_line": 406,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 52)",
            "(line 408,col 9)-(line 408,col 71)",
            "(line 409,col 9)-(line 409,col 74)",
            "(line 410,col 9)-(line 415,col 9)",
            "(line 416,col 9)-(line 421,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testGetEntry()",
        "snippet": "    public void testGetEntry() {\n        RealMatrix m = new RealMatrixImpl(testData);\n        assertEquals(\"get entry\",m.getEntry(0,1),2d,entryTolerance);\n        try {\n            m.getEntry(10, 4);\n            fail (\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 424,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 52)",
            "(line 426,col 9)-(line 426,col 68)",
            "(line 427,col 9)-(line 432,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testLUDecomposition()",
        "snippet": "    public void testLUDecomposition() throws Exception {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrix lu = m.getLUMatrix();\n        assertClose(\"LU decomposition\", lu, (RealMatrix) new RealMatrixImpl(testDataLU), normTolerance);\n        verifyDecomposition(m, lu);\n        // access LU decomposition on same object to verify caching.\n        lu = m.getLUMatrix();\n        assertClose(\"LU decomposition\", lu, (RealMatrix) new RealMatrixImpl(testDataLU), normTolerance);\n        verifyDecomposition(m, lu);\n\n        m = new RealMatrixImpl(luData);\n        lu = m.getLUMatrix();\n        assertClose(\"LU decomposition\", lu, (RealMatrix) new RealMatrixImpl(luDataLUDecomposition), normTolerance);\n        verifyDecomposition(m, lu);\n        m = new RealMatrixImpl(testDataMinus);\n        lu = m.getLUMatrix();\n        verifyDecomposition(m, lu);\n        m = new RealMatrixImpl(id);\n        lu = m.getLUMatrix();\n        verifyDecomposition(m, lu);\n        try {\n            m = new RealMatrixImpl(bigSingular); // singular\n            lu = m.getLUMatrix();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n        try {\n            m = new RealMatrixImpl(testData2);  // not square\n            lu = m.getLUMatrix();\n            fail(\"Expecting InvalidMatrixException\");\n        } catch (InvalidMatrixException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 435,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 436,col 9)-(line 436,col 56)",
            "(line 437,col 9)-(line 437,col 40)",
            "(line 438,col 9)-(line 438,col 104)",
            "(line 439,col 9)-(line 439,col 35)",
            "(line 441,col 9)-(line 441,col 29)",
            "(line 442,col 9)-(line 442,col 104)",
            "(line 443,col 9)-(line 443,col 35)",
            "(line 445,col 9)-(line 445,col 39)",
            "(line 446,col 9)-(line 446,col 29)",
            "(line 447,col 9)-(line 447,col 115)",
            "(line 448,col 9)-(line 448,col 35)",
            "(line 449,col 9)-(line 449,col 46)",
            "(line 450,col 9)-(line 450,col 29)",
            "(line 451,col 9)-(line 451,col 35)",
            "(line 452,col 9)-(line 452,col 35)",
            "(line 453,col 9)-(line 453,col 29)",
            "(line 454,col 9)-(line 454,col 35)",
            "(line 455,col 9)-(line 461,col 9)",
            "(line 462,col 9)-(line 468,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testExamples()",
        "snippet": "    public void testExamples() {\n        // Create a real matrix with two rows and three columns\n        double[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};\n        RealMatrix m = new RealMatrixImpl(matrixData);\n        // One more with three rows, two columns\n        double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};\n        RealMatrix n = new RealMatrixImpl(matrixData2);\n        // Now multiply m by n\n        RealMatrix p = m.multiply(n);\n        assertEquals(2, p.getRowDimension());\n        assertEquals(2, p.getColumnDimension());\n        // Invert p\n        RealMatrix pInverse = p.inverse(); \n        assertEquals(2, pInverse.getRowDimension());\n        assertEquals(2, pInverse.getColumnDimension());\n        \n        // Solve example\n        double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};\n        RealMatrix coefficients = new RealMatrixImpl(coefficientsData);\n        double[] constants = {1, -2, 1};\n        double[] solution = coefficients.solve(constants);\n        assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);\n        assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);\n        assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);   \n        \n    }\n",
        "begin_line": 472,
        "end_line": 497,
        "comment": " test examples in user guide ",
        "child_ranges": [
            "(line 474,col 9)-(line 474,col 58)",
            "(line 475,col 9)-(line 475,col 54)",
            "(line 477,col 9)-(line 477,col 63)",
            "(line 478,col 9)-(line 478,col 55)",
            "(line 480,col 9)-(line 480,col 37)",
            "(line 481,col 9)-(line 481,col 45)",
            "(line 482,col 9)-(line 482,col 48)",
            "(line 484,col 9)-(line 484,col 42)",
            "(line 485,col 9)-(line 485,col 52)",
            "(line 486,col 9)-(line 486,col 55)",
            "(line 489,col 9)-(line 489,col 76)",
            "(line 490,col 9)-(line 490,col 71)",
            "(line 491,col 9)-(line 491,col 40)",
            "(line 492,col 9)-(line 492,col 58)",
            "(line 493,col 9)-(line 493,col 94)",
            "(line 494,col 9)-(line 494,col 96)",
            "(line 495,col 9)-(line 495,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testSubMatrix()",
        "snippet": "    public void testSubMatrix() {\n        RealMatrix m = new RealMatrixImpl(subTestData);\n        RealMatrix mRows23Cols00 = new RealMatrixImpl(subRows23Cols00);\n        RealMatrix mRows00Cols33 = new RealMatrixImpl(subRows00Cols33);\n        RealMatrix mRows01Cols23 = new RealMatrixImpl(subRows01Cols23);\n        RealMatrix mRows02Cols13 = new RealMatrixImpl(subRows02Cols13);\n        RealMatrix mRows03Cols12 = new RealMatrixImpl(subRows03Cols12);\n        RealMatrix mRows03Cols123 = new RealMatrixImpl(subRows03Cols123);\n        RealMatrix mRows20Cols123 = new RealMatrixImpl(subRows20Cols123);\n        RealMatrix mRows31Cols31 = new RealMatrixImpl(subRows31Cols31);\n        assertEquals(\"Rows23Cols00\", mRows23Cols00, \n                m.getSubMatrix(2 , 3 , 0, 0));\n        assertEquals(\"Rows00Cols33\", mRows00Cols33, \n                m.getSubMatrix(0 , 0 , 3, 3));\n        assertEquals(\"Rows01Cols23\", mRows01Cols23,\n                m.getSubMatrix(0 , 1 , 2, 3));   \n        assertEquals(\"Rows02Cols13\", mRows02Cols13,\n                m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));  \n        assertEquals(\"Rows03Cols12\", mRows03Cols12,\n                m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));  \n        assertEquals(\"Rows03Cols123\", mRows03Cols123,\n                m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3})); \n        assertEquals(\"Rows20Cols123\", mRows20Cols123,\n                m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3})); \n        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n        assertEquals(\"Rows31Cols31\", mRows31Cols31,\n                m.getSubMatrix(new int[] {3,1}, new int[] {3,1})); \n        \n        try {\n            m.getSubMatrix(1,0,2,4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(-1,1,2,2);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(1,0,2,2);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(1,0,2,4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(new int[] {}, new int[] {0});\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getSubMatrix(new int[] {0}, new int[] {4});\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 500,
        "end_line": 565,
        "comment": " test submatrix accessors",
        "child_ranges": [
            "(line 501,col 9)-(line 501,col 55)",
            "(line 502,col 9)-(line 502,col 71)",
            "(line 503,col 9)-(line 503,col 71)",
            "(line 504,col 9)-(line 504,col 71)",
            "(line 505,col 9)-(line 505,col 71)",
            "(line 506,col 9)-(line 506,col 71)",
            "(line 507,col 9)-(line 507,col 73)",
            "(line 508,col 9)-(line 508,col 73)",
            "(line 509,col 9)-(line 509,col 71)",
            "(line 510,col 9)-(line 511,col 46)",
            "(line 512,col 9)-(line 513,col 46)",
            "(line 514,col 9)-(line 515,col 46)",
            "(line 516,col 9)-(line 517,col 66)",
            "(line 518,col 9)-(line 519,col 66)",
            "(line 520,col 9)-(line 521,col 68)",
            "(line 522,col 9)-(line 523,col 68)",
            "(line 524,col 9)-(line 525,col 66)",
            "(line 526,col 9)-(line 527,col 66)",
            "(line 529,col 9)-(line 534,col 9)",
            "(line 535,col 9)-(line 540,col 9)",
            "(line 541,col 9)-(line 546,col 9)",
            "(line 547,col 9)-(line 552,col 9)",
            "(line 553,col 9)-(line 558,col 9)",
            "(line 559,col 9)-(line 564,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testGetRowMatrix()",
        "snippet": "    public void testGetRowMatrix() {\n        RealMatrix m = new RealMatrixImpl(subTestData);\n        RealMatrix mRow0 = new RealMatrixImpl(subRow0);\n        RealMatrix mRow3 = new RealMatrixImpl(subRow3);\n        assertEquals(\"Row0\", mRow0, \n                m.getRowMatrix(0));\n        assertEquals(\"Row3\", mRow3, \n                m.getRowMatrix(3));\n        try {\n            m.getRowMatrix(-1);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getRowMatrix(4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 567,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 568,col 9)-(line 568,col 55)",
            "(line 569,col 9)-(line 569,col 55)",
            "(line 570,col 9)-(line 570,col 55)",
            "(line 571,col 9)-(line 572,col 35)",
            "(line 573,col 9)-(line 574,col 35)",
            "(line 575,col 9)-(line 580,col 9)",
            "(line 581,col 9)-(line 586,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testGetColumnMatrix()",
        "snippet": "    public void testGetColumnMatrix() {\n        RealMatrix m = new RealMatrixImpl(subTestData);\n        RealMatrix mColumn1 = new RealMatrixImpl(subColumn1);\n        RealMatrix mColumn3 = new RealMatrixImpl(subColumn3);\n        assertEquals(\"Column1\", mColumn1, \n                m.getColumnMatrix(1));\n        assertEquals(\"Column3\", mColumn3, \n                m.getColumnMatrix(3));\n        try {\n            m.getColumnMatrix(-1);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n        try {\n            m.getColumnMatrix(4);\n            fail(\"Expecting MatrixIndexException\");\n        } catch (MatrixIndexException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 589,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 55)",
            "(line 591,col 9)-(line 591,col 61)",
            "(line 592,col 9)-(line 592,col 61)",
            "(line 593,col 9)-(line 594,col 38)",
            "(line 595,col 9)-(line 596,col 38)",
            "(line 597,col 9)-(line 602,col 9)",
            "(line 603,col 9)-(line 608,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testEqualsAndHashCode()",
        "snippet": "    public void testEqualsAndHashCode() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        RealMatrixImpl m1 = (RealMatrixImpl) m.copy();\n        RealMatrixImpl mt = (RealMatrixImpl) m.transpose();\n        assertTrue(m.hashCode() != mt.hashCode());\n        assertEquals(m.hashCode(), m1.hashCode());\n        assertEquals(m, m);\n        assertEquals(m, m1);\n        assertFalse(m.equals(null));\n        assertFalse(m.equals(mt));\n        assertFalse(m.equals(new RealMatrixImpl(bigSingular))); \n    }\n",
        "begin_line": 611,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 612,col 9)-(line 612,col 56)",
            "(line 613,col 9)-(line 613,col 54)",
            "(line 614,col 9)-(line 614,col 59)",
            "(line 615,col 9)-(line 615,col 50)",
            "(line 616,col 9)-(line 616,col 50)",
            "(line 617,col 9)-(line 617,col 27)",
            "(line 618,col 9)-(line 618,col 28)",
            "(line 619,col 9)-(line 619,col 36)",
            "(line 620,col 9)-(line 620,col 34)",
            "(line 621,col 9)-(line 621,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testToString()",
        "snippet": "    public void testToString() {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        assertEquals(\"RealMatrixImpl{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}\",\n                m.toString());\n        m = new RealMatrixImpl();\n        assertEquals(\"RealMatrixImpl{}\",\n                m.toString());\n    }\n",
        "begin_line": 624,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 625,col 9)-(line 625,col 56)",
            "(line 626,col 9)-(line 627,col 30)",
            "(line 628,col 9)-(line 628,col 33)",
            "(line 629,col 9)-(line 630,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.testSetSubMatrix()",
        "snippet": "    public void testSetSubMatrix() throws Exception {\n        RealMatrixImpl m = new RealMatrixImpl(testData);\n        m.setSubMatrix(detData2,1,1);\n        RealMatrix expected = MatrixUtils.createRealMatrix\n            (new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});\n        assertEquals(expected, m);  \n        \n        m.setSubMatrix(detData2,0,0);\n        expected = MatrixUtils.createRealMatrix\n            (new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});\n        assertEquals(expected, m);  \n        \n        m.setSubMatrix(testDataPlus2,0,0);      \n        expected = MatrixUtils.createRealMatrix\n            (new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});\n        assertEquals(expected, m);   \n        \n        // javadoc example\n        RealMatrixImpl matrix = (RealMatrixImpl) MatrixUtils.createRealMatrix\n            (new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});\n        matrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);\n        expected = MatrixUtils.createRealMatrix\n            (new double[][] {{1, 2, 3, 4}, {5, 3, 4, 8}, {9, 5 ,6, 2}});\n        assertEquals(expected, matrix);   \n        \n        // dimension overflow\n        try {  \n            m.setSubMatrix(testData,1,1);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException e) {\n            // expected\n        }\n        // dimension underflow\n        try {  \n            m.setSubMatrix(testData,-1,1);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException e) {\n            // expected\n        }\n        try {  \n            m.setSubMatrix(testData,1,-1);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException e) {\n            // expected\n        }\n        \n        // null\n        try {\n            m.setSubMatrix(null,1,1);\n            fail(\"expecting NullPointerException\");\n        } catch (NullPointerException e) {\n            // expected\n        }\n        RealMatrixImpl m2 = new RealMatrixImpl();\n        try {\n            m2.setSubMatrix(testData,0,1);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException e) {\n            // expected\n        }\n        try {\n            m2.setSubMatrix(testData,1,0);\n            fail(\"expecting MatrixIndexException\");\n        } catch (MatrixIndexException e) {\n            // expected\n        }\n        \n        // ragged\n        try {\n            m.setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n       \n        // empty\n        try {\n            m.setSubMatrix(new double[][] {{}}, 0, 0);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n        \n    }\n",
        "begin_line": 633,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 634,col 9)-(line 634,col 56)",
            "(line 635,col 9)-(line 635,col 37)",
            "(line 636,col 9)-(line 637,col 73)",
            "(line 638,col 9)-(line 638,col 34)",
            "(line 640,col 9)-(line 640,col 37)",
            "(line 641,col 9)-(line 642,col 73)",
            "(line 643,col 9)-(line 643,col 34)",
            "(line 645,col 9)-(line 645,col 42)",
            "(line 646,col 9)-(line 647,col 74)",
            "(line 648,col 9)-(line 648,col 34)",
            "(line 651,col 9)-(line 652,col 73)",
            "(line 653,col 9)-(line 653,col 67)",
            "(line 654,col 9)-(line 655,col 72)",
            "(line 656,col 9)-(line 656,col 39)",
            "(line 659,col 9)-(line 664,col 9)",
            "(line 666,col 9)-(line 671,col 9)",
            "(line 672,col 9)-(line 677,col 9)",
            "(line 680,col 9)-(line 685,col 9)",
            "(line 686,col 9)-(line 686,col 49)",
            "(line 687,col 9)-(line 692,col 9)",
            "(line 693,col 9)-(line 698,col 9)",
            "(line 701,col 9)-(line 706,col 9)",
            "(line 709,col 9)-(line 714,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(java.lang.String, org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix, double)",
        "snippet": "    protected void assertClose(String msg, RealMatrix m, RealMatrix n,\n        double tolerance) {\n        assertTrue(msg,m.subtract(n).getNorm() < tolerance);\n    }\n",
        "begin_line": 721,
        "end_line": 724,
        "comment": " verifies that two matrices are close (1-norm) ",
        "child_ranges": [
            "(line 723,col 9)-(line 723,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.assertClose(java.lang.String, double[], double[], double)",
        "snippet": "    protected void assertClose(String msg, double[] m, double[] n,\n        double tolerance) {\n        if (m.length != n.length) {\n            fail(\"vectors not same length\");\n        }\n        for (int i = 0; i < m.length; i++) {\n            assertEquals(msg + \" \" +  i + \" elements differ\", \n                m[i],n[i],tolerance);\n        }\n    }\n",
        "begin_line": 727,
        "end_line": 736,
        "comment": " verifies that two vectors are close (sup norm) ",
        "child_ranges": [
            "(line 729,col 9)-(line 731,col 9)",
            "(line 732,col 9)-(line 735,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.splitLU(org.apache.commons.math.linear.RealMatrix, double[][], double[][])",
        "snippet": "    protected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) throws InvalidMatrixException {   \n        if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||\n                lowerData.length != upperData.length\n                || lowerData.length != lu.getRowDimension()) {\n            throw new InvalidMatrixException(\"incorrect dimensions\");\n        }    \n        int n = lu.getRowDimension();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (j < i) {\n                    lowerData[i][j] = lu.getEntry(i, j);\n                    upperData[i][j] = 0d;\n                } else if (i == j) {\n                    lowerData[i][j] = 1d;\n                    upperData[i][j] = lu.getEntry(i, j);\n                } else {\n                    lowerData[i][j] = 0d;\n                    upperData[i][j] = lu.getEntry(i, j);\n                }   \n            }\n        }\n    }\n",
        "begin_line": 739,
        "end_line": 760,
        "comment": " extracts the l  and u matrices from compact lu representation ",
        "child_ranges": [
            "(line 740,col 9)-(line 744,col 9)",
            "(line 745,col 9)-(line 745,col 37)",
            "(line 746,col 9)-(line 759,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.permuteRows(org.apache.commons.math.linear.RealMatrix, int[])",
        "snippet": "    protected RealMatrix permuteRows(RealMatrix matrix, int[] permutation) {\n        if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {\n            throw new IllegalArgumentException(\"dimension mismatch\");\n        }\n        int n = matrix.getRowDimension();\n        int m = matrix.getColumnDimension();\n        double out[][] = new double[m][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                out[i][j] = matrix.getEntry(permutation[i], j);\n            }\n        }\n        return new RealMatrixImpl(out);\n    }\n",
        "begin_line": 763,
        "end_line": 776,
        "comment": " Returns the result of applying the given row permutation to the matrix ",
        "child_ranges": [
            "(line 764,col 9)-(line 766,col 9)",
            "(line 767,col 9)-(line 767,col 41)",
            "(line 768,col 9)-(line 768,col 44)",
            "(line 769,col 9)-(line 769,col 42)",
            "(line 770,col 9)-(line 774,col 9)",
            "(line 775,col 9)-(line 775,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.RealMatrixImplTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
        "signature": "org.apache.commons.math.linear.RealMatrixImplTest.verifyDecomposition(org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix)",
        "snippet": "    protected void verifyDecomposition(RealMatrix matrix, RealMatrix lu) throws Exception{\n        int n = matrix.getRowDimension();\n        double[][] lowerData = new double[n][n];\n        double[][] upperData = new double[n][n];\n        splitLU(lu, lowerData, upperData);\n        RealMatrix lower =new RealMatrixImpl(lowerData);\n        RealMatrix upper = new RealMatrixImpl(upperData);\n        int[] permutation = ((RealMatrixImpl) matrix).getPermutation();\n        RealMatrix permuted = permuteRows(matrix, permutation);\n        assertClose(\"lu decomposition does not work\", permuted, lower.multiply(upper), normTolerance);\n    }\n",
        "begin_line": 779,
        "end_line": 789,
        "comment": " Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation ",
        "child_ranges": [
            "(line 780,col 9)-(line 780,col 41)",
            "(line 781,col 9)-(line 781,col 48)",
            "(line 782,col 9)-(line 782,col 48)",
            "(line 783,col 9)-(line 783,col 42)",
            "(line 784,col 9)-(line 784,col 56)",
            "(line 785,col 9)-(line 785,col 57)",
            "(line 786,col 9)-(line 786,col 71)",
            "(line 787,col 9)-(line 787,col 63)",
            "(line 788,col 9)-(line 788,col 102)"
        ]
    }
]