[
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.ChiSquareFactoryTest(java.lang.String)",
        "snippet": "    public ChiSquareFactoryTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 30,col 9)-(line 30,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.setUp()",
        "snippet": "    public void setUp() {\n    \tsuper.setUp();\n        testStatistic = TestUtils.getUnknownDistributionChiSquareTest();\n    }\n",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 6)-(line 34,col 19)",
            "(line 35,col 9)-(line 35,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareFactoryTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ChiSquareFactoryTest.class);\n        suite.setName(\"ChiSquareTestFactory Tests\");\n        return suite;\n    }\n",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 68)",
            "(line 40,col 9)-(line 40,col 52)",
            "(line 41,col 9)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.ChiSquareTestTest(java.lang.String)",
        "snippet": "    public ChiSquareTestTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.setUp()",
        "snippet": "    public void setUp() {\n    }\n",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(ChiSquareTestTest.class);\n        suite.setName(\"TestStatistic Tests\");\n        return suite;\n    }\n",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 65)",
            "(line 42,col 9)-(line 42,col 45)",
            "(line 43,col 9)-(line 43,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare()",
        "snippet": "    public void testChiSquare() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);\n        assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);\n        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));\n        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }\n",
        "begin_line": 46,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 38)",
            "(line 54,col 9)-(line 54,col 41)",
            "(line 55,col 9)-(line 55,col 104)",
            "(line 56,col 9)-(line 56,col 115)",
            "(line 58,col 9)-(line 58,col 52)",
            "(line 59,col 9)-(line 59,col 54)",
            "(line 60,col 9)-(line 60,col 124)",
            "(line 61,col 9)-(line 61,col 121)",
            "(line 62,col 9)-(line 62,col 102)",
            "(line 63,col 9)-(line 63,col 103)",
            "(line 65,col 9)-(line 70,col 9)",
            "(line 72,col 9)-(line 72,col 35)",
            "(line 73,col 9)-(line 73,col 36)",
            "(line 74,col 9)-(line 79,col 9)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 83,col 9)-(line 83,col 43)",
            "(line 84,col 9)-(line 89,col 9)",
            "(line 92,col 9)-(line 92,col 24)",
            "(line 93,col 9)-(line 98,col 9)",
            "(line 101,col 9)-(line 101,col 24)",
            "(line 102,col 9)-(line 102,col 25)",
            "(line 103,col 9)-(line 108,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence()",
        "snippet": "    public void testChiSquareIndependence() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        \n        long[][] counts = { {40, 22, 43}, {91, 21, 28}, {60, 10, 22}};\n        assertEquals( \"chi-square test statistic\", 22.709027688, testStatistic.chiSquare(counts), 1E-9);\n        assertEquals(\"chi-square p-value\", 0.000144751460134, testStatistic.chiSquareTest(counts), 1E-9);\n        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(counts, 0.0002));\n        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(counts, 0.0001));    \n        \n        long[][] counts2 = {{10, 15}, {30, 40}, {60, 90} };\n        assertEquals( \"chi-square test statistic\", 0.168965517241, testStatistic.chiSquare(counts2), 1E-9);\n        assertEquals(\"chi-square p-value\",0.918987499852, testStatistic.chiSquareTest(counts2), 1E-9);\n        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(counts2, 0.1)); \n        \n        // ragged input array\n        long[][] counts3 = { {40, 22, 43}, {91, 21, 28}, {60, 10}};\n        try {\n            testStatistic.chiSquare(counts3);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // insufficient data\n        long[][] counts4 = {{40, 22, 43}};\n        try {\n            testStatistic.chiSquare(counts4);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        long[][] counts5 = {{40}, {40}, {30}, {10}};\n        try {\n            testStatistic.chiSquare(counts5);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative counts\n        long[][] counts6 = {{10, -2}, {30, 40}, {60, 90} };\n        try {\n            testStatistic.chiSquare(counts6);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // bad alpha\n        try {\n            testStatistic.chiSquareTest(counts, 0);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n    }\n",
        "begin_line": 112,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 70)",
            "(line 117,col 9)-(line 117,col 104)",
            "(line 118,col 9)-(line 118,col 105)",
            "(line 119,col 9)-(line 119,col 90)",
            "(line 120,col 9)-(line 120,col 91)",
            "(line 122,col 9)-(line 122,col 59)",
            "(line 123,col 9)-(line 123,col 107)",
            "(line 124,col 9)-(line 124,col 102)",
            "(line 125,col 9)-(line 125,col 89)",
            "(line 128,col 9)-(line 128,col 67)",
            "(line 129,col 9)-(line 134,col 9)",
            "(line 137,col 9)-(line 137,col 42)",
            "(line 138,col 9)-(line 143,col 9)",
            "(line 144,col 9)-(line 144,col 52)",
            "(line 145,col 9)-(line 150,col 9)",
            "(line 153,col 9)-(line 153,col 59)",
            "(line 154,col 9)-(line 159,col 9)",
            "(line 162,col 9)-(line 167,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic()",
        "snippet": "    public void testChiSquareLargeTestStatistic() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);\n    }\n",
        "begin_line": 170,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 171,col 9)-(line 174,col 10)",
            "(line 176,col 9)-(line 178,col 10)",
            "(line 179,col 9)-(line 180,col 75)",
            "(line 181,col 9)-(line 181,col 50)",
            "(line 182,col 9)-(line 182,col 59)",
            "(line 183,col 9)-(line 184,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount()",
        "snippet": "    public void testChiSquareZeroCount() throws Exception {\n        // Target values computed using R version 1.8.1 \n        long[][] counts = { {40, 0, 4}, {91, 1, 2}, {60, 2, 0}};\n        assertEquals( \"chi-square test statistic\", 9.67444662263,\n                testStatistic.chiSquare(counts), 1E-9);\n        assertEquals(\"chi-square p-value\", 0.0462835770603,\n                testStatistic.chiSquareTest(counts), 1E-9);       \n    }\n",
        "begin_line": 188,
        "end_line": 195,
        "comment": " Contingency table containing zeros - PR # 32531 ",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 64)",
            "(line 191,col 9)-(line 192,col 55)",
            "(line 193,col 9)-(line 194,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts()",
        "snippet": "    public void testChiSquareDataSetsComparisonEqualCounts()\n    throws Exception {\n        long[] observed1 = {10, 12, 12, 10};\n        long[] observed2 = {5, 15, 14, 10};    \n        assertEquals(\"chi-square p value\", 0.541096, \n                testStatistic.chiSquareTestDataSetsComparison(\n                observed1, observed2), 1E-6);\n        assertEquals(\"chi-square test statistic\", 2.153846,\n                testStatistic.chiSquareDataSetsComparison(\n                observed1, observed2), 1E-6);\n        assertFalse(\"chi-square test result\", \n                testStatistic.chiSquareTestDataSetsComparison(\n                observed1, observed2, 0.4));\n    }\n",
        "begin_line": 198,
        "end_line": 211,
        "comment": " Target values verified using DATAPLOT version 2006.3 ",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 44)",
            "(line 201,col 9)-(line 201,col 43)",
            "(line 202,col 9)-(line 204,col 45)",
            "(line 205,col 9)-(line 207,col 45)",
            "(line 208,col 9)-(line 210,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts()",
        "snippet": "    public void testChiSquareDataSetsComparisonUnEqualCounts()\n    throws Exception {\n        long[] observed1 = {10, 12, 12, 10, 15};\n        long[] observed2 = {15, 10, 10, 15, 5};    \n        assertEquals(\"chi-square p value\", 0.124115, \n                testStatistic.chiSquareTestDataSetsComparison(\n                observed1, observed2), 1E-6);\n        assertEquals(\"chi-square test statistic\", 7.232189,\n                testStatistic.chiSquareDataSetsComparison(\n                observed1, observed2), 1E-6);\n        assertTrue(\"chi-square test result\", \n                testStatistic.chiSquareTestDataSetsComparison(\n                observed1, observed2, 0.13));\n        assertFalse(\"chi-square test result\", \n                testStatistic.chiSquareTestDataSetsComparison(\n                observed1, observed2, 0.12));\n    }\n",
        "begin_line": 214,
        "end_line": 230,
        "comment": " Target values verified using DATAPLOT version 2006.3 ",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 48)",
            "(line 217,col 9)-(line 217,col 47)",
            "(line 218,col 9)-(line 220,col 45)",
            "(line 221,col 9)-(line 223,col 45)",
            "(line 224,col 9)-(line 226,col 45)",
            "(line 227,col 9)-(line 229,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestTest",
        "child_classes": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest"
        ],
        "src_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts()",
        "snippet": "    public void testChiSquareDataSetsComparisonBadCounts()\n    throws Exception {\n        long[] observed1 = {10, -1, 12, 10, 15};\n        long[] observed2 = {15, 10, 10, 15, 5};\n        try {\n            testStatistic.chiSquareTestDataSetsComparison(\n                    observed1, observed2);\n            fail(\"Expecting IllegalArgumentException - negative count\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        long[] observed3 = {10, 0, 12, 10, 15};\n        long[] observed4 = {15, 0, 10, 15, 5};\n        try {\n            testStatistic.chiSquareTestDataSetsComparison(\n                    observed3, observed4);\n            fail(\"Expecting IllegalArgumentException - double 0's\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        long[] observed5 = {10, 10, 12, 10, 15};\n        long[] observed6 = {0, 0, 0, 0, 0};\n        try {\n            testStatistic.chiSquareTestDataSetsComparison(\n                    observed5, observed6);\n            fail(\"Expecting IllegalArgumentException - vanishing counts\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 232,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 48)",
            "(line 235,col 9)-(line 235,col 47)",
            "(line 236,col 9)-(line 242,col 9)",
            "(line 243,col 9)-(line 243,col 47)",
            "(line 244,col 9)-(line 244,col 46)",
            "(line 245,col 9)-(line 251,col 9)",
            "(line 252,col 9)-(line 252,col 48)",
            "(line 253,col 9)-(line 253,col 43)",
            "(line 254,col 9)-(line 260,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.TestUtilsTest(java.lang.String)",
        "snippet": "    public TestUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.setUp()",
        "snippet": "    public void setUp() {\n    }\n",
        "begin_line": 35,
        "end_line": 36,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(TestUtilsTest.class);\n        suite.setName(\"TestUtils Tests\");\n        return suite;\n    }\n",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 61)",
            "(line 40,col 9)-(line 40,col 41)",
            "(line 41,col 9)-(line 41,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare()",
        "snippet": "    public void testChiSquare() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\n        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }\n",
        "begin_line": 44,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 38)",
            "(line 52,col 9)-(line 52,col 41)",
            "(line 53,col 9)-(line 53,col 100)",
            "(line 54,col 9)-(line 54,col 111)",
            "(line 56,col 9)-(line 56,col 52)",
            "(line 57,col 9)-(line 57,col 54)",
            "(line 58,col 9)-(line 58,col 120)",
            "(line 59,col 9)-(line 59,col 117)",
            "(line 60,col 9)-(line 60,col 98)",
            "(line 61,col 9)-(line 61,col 99)",
            "(line 63,col 9)-(line 68,col 9)",
            "(line 70,col 9)-(line 70,col 35)",
            "(line 71,col 9)-(line 71,col 36)",
            "(line 72,col 9)-(line 77,col 9)",
            "(line 80,col 9)-(line 80,col 45)",
            "(line 81,col 9)-(line 81,col 43)",
            "(line 82,col 9)-(line 87,col 9)",
            "(line 90,col 9)-(line 90,col 24)",
            "(line 91,col 9)-(line 96,col 9)",
            "(line 99,col 9)-(line 99,col 24)",
            "(line 100,col 9)-(line 100,col 25)",
            "(line 101,col 9)-(line 106,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence()",
        "snippet": "    public void testChiSquareIndependence() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        \n        long[][] counts = { {40, 22, 43}, {91, 21, 28}, {60, 10, 22}};\n        assertEquals( \"chi-square test statistic\", 22.709027688, TestUtils.chiSquare(counts), 1E-9);\n        assertEquals(\"chi-square p-value\", 0.000144751460134, TestUtils.chiSquareTest(counts), 1E-9);\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(counts, 0.0002));\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(counts, 0.0001));    \n        \n        long[][] counts2 = {{10, 15}, {30, 40}, {60, 90} };\n        assertEquals( \"chi-square test statistic\", 0.168965517241, TestUtils.chiSquare(counts2), 1E-9);\n        assertEquals(\"chi-square p-value\",0.918987499852, TestUtils.chiSquareTest(counts2), 1E-9);\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(counts2, 0.1)); \n        \n        // ragged input array\n        long[][] counts3 = { {40, 22, 43}, {91, 21, 28}, {60, 10}};\n        try {\n            TestUtils.chiSquare(counts3);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // insufficient data\n        long[][] counts4 = {{40, 22, 43}};\n        try {\n            TestUtils.chiSquare(counts4);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        long[][] counts5 = {{40}, {40}, {30}, {10}};\n        try {\n            TestUtils.chiSquare(counts5);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative counts\n        long[][] counts6 = {{10, -2}, {30, 40}, {60, 90} };\n        try {\n            TestUtils.chiSquare(counts6);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // bad alpha\n        try {\n            TestUtils.chiSquareTest(counts, 0);\n            fail(\"Expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n    }\n",
        "begin_line": 110,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 70)",
            "(line 115,col 9)-(line 115,col 100)",
            "(line 116,col 9)-(line 116,col 101)",
            "(line 117,col 9)-(line 117,col 86)",
            "(line 118,col 9)-(line 118,col 87)",
            "(line 120,col 9)-(line 120,col 59)",
            "(line 121,col 9)-(line 121,col 103)",
            "(line 122,col 9)-(line 122,col 98)",
            "(line 123,col 9)-(line 123,col 85)",
            "(line 126,col 9)-(line 126,col 67)",
            "(line 127,col 9)-(line 132,col 9)",
            "(line 135,col 9)-(line 135,col 42)",
            "(line 136,col 9)-(line 141,col 9)",
            "(line 142,col 9)-(line 142,col 52)",
            "(line 143,col 9)-(line 148,col 9)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 152,col 9)-(line 157,col 9)",
            "(line 160,col 9)-(line 165,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic()",
        "snippet": "    public void testChiSquareLargeTestStatistic() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);\n    }\n",
        "begin_line": 168,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 172,col 10)",
            "(line 174,col 9)-(line 176,col 10)",
            "(line 177,col 9)-(line 178,col 75)",
            "(line 179,col 9)-(line 179,col 50)",
            "(line 180,col 9)-(line 180,col 59)",
            "(line 181,col 9)-(line 182,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount()",
        "snippet": "    public void testChiSquareZeroCount() throws Exception {\n        // Target values computed using R version 1.8.1 \n        long[][] counts = { {40, 0, 4}, {91, 1, 2}, {60, 2, 0}};\n        assertEquals( \"chi-square test statistic\", 9.67444662263,\n                TestUtils.chiSquare(counts), 1E-9);\n        assertEquals(\"chi-square p-value\", 0.0462835770603,\n                TestUtils.chiSquareTest(counts), 1E-9);       \n    }\n",
        "begin_line": 186,
        "end_line": 193,
        "comment": " Contingency table containing zeros - PR # 32531 ",
        "child_ranges": [
            "(line 188,col 9)-(line 188,col 64)",
            "(line 189,col 9)-(line 190,col 51)",
            "(line 191,col 9)-(line 192,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleT()",
        "snippet": "    public void testOneSampleT() throws Exception {\n        double[] observed =\n            {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0,  88.0, 98.0, 94.0, 101.0, 92.0, 95.0 };\n        double mu = 100.0;\n        SummaryStatistics sampleStats = null;\n        sampleStats = SummaryStatistics.newInstance();\n        for (int i = 0; i < observed.length; i++) {\n            sampleStats.addValue(observed[i]);\n        }\n\n        // Target comparison values computed using R version 1.8.1 (Linux version)\n        assertEquals(\"t statistic\",  -2.81976445346,\n                TestUtils.t(mu, observed), 10E-10);\n        assertEquals(\"t statistic\",  -2.81976445346,\n                TestUtils.t(mu, sampleStats), 10E-10);\n        assertEquals(\"p value\", 0.0136390585873,\n                TestUtils.tTest(mu, observed), 10E-10);\n        assertEquals(\"p value\", 0.0136390585873,\n                TestUtils.tTest(mu, sampleStats), 10E-10);\n\n        try {\n            TestUtils.t(mu, (double[]) null);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        try {\n            TestUtils.t(mu, (SummaryStatistics) null);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        try {\n            TestUtils.t(mu, emptyObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        try {\n            TestUtils.t(mu, emptyStats);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        try {\n            TestUtils.t(mu, tooShortObs);\n            fail(\"insufficient data to compute t statistic, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // exptected\n        }\n        try {\n            TestUtils.tTest(mu, tooShortObs);\n            fail(\"insufficient data to perform t test, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n\n        try {\n            TestUtils.t(mu, (SummaryStatistics) null);\n            fail(\"insufficient data to compute t statistic, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // exptected\n        }\n        try {\n            TestUtils.tTest(mu, (SummaryStatistics) null);\n            fail(\"insufficient data to perform t test, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // exptected\n        }  \n    }\n",
        "begin_line": 199,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 201,col 110)",
            "(line 202,col 9)-(line 202,col 26)",
            "(line 203,col 9)-(line 203,col 45)",
            "(line 204,col 9)-(line 204,col 54)",
            "(line 205,col 9)-(line 207,col 9)",
            "(line 210,col 9)-(line 211,col 51)",
            "(line 212,col 9)-(line 213,col 54)",
            "(line 214,col 9)-(line 215,col 55)",
            "(line 216,col 9)-(line 217,col 58)",
            "(line 219,col 9)-(line 224,col 9)",
            "(line 226,col 9)-(line 231,col 9)",
            "(line 233,col 9)-(line 238,col 9)",
            "(line 240,col 9)-(line 245,col 9)",
            "(line 247,col 9)-(line 252,col 9)",
            "(line 253,col 9)-(line 258,col 9)",
            "(line 260,col 9)-(line 265,col 9)",
            "(line 266,col 9)-(line 271,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testOneSampleTTest()",
        "snippet": "    public void testOneSampleTTest() throws Exception {\n        double[] oneSidedP =\n            {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d, 6d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d };\n        SummaryStatistics oneSidedPStats = SummaryStatistics.newInstance();    \n        for (int i = 0; i < oneSidedP.length; i++) {\n            oneSidedPStats.addValue(oneSidedP[i]);\n        }\n        // Target comparison values computed using R version 1.8.1 (Linux version)\n        assertEquals(\"one sample t stat\", 3.86485535541, \n                TestUtils.t(0d, oneSidedP), 10E-10);\n        assertEquals(\"one sample t stat\", 3.86485535541, \n                TestUtils.t(0d, oneSidedPStats),1E-10);\n        assertEquals(\"one sample p value\", 0.000521637019637,\n                TestUtils.tTest(0d, oneSidedP) / 2d, 10E-10);\n        assertEquals(\"one sample p value\", 0.000521637019637,\n                TestUtils.tTest(0d, oneSidedPStats) / 2d, 10E-5);\n        assertTrue(\"one sample t-test reject\", TestUtils.tTest(0d, oneSidedP, 0.01));\n        assertTrue(\"one sample t-test reject\", TestUtils.tTest(0d, oneSidedPStats, 0.01));\n        assertTrue(\"one sample t-test accept\", !TestUtils.tTest(0d, oneSidedP, 0.0001));\n        assertTrue(\"one sample t-test accept\", !TestUtils.tTest(0d, oneSidedPStats, 0.0001));\n        \n        try {\n            TestUtils.tTest(0d, oneSidedP, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // exptected\n        }  \n        \n        try {\n            TestUtils.tTest(0d, oneSidedPStats, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n    }\n",
        "begin_line": 274,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 276,col 95)",
            "(line 277,col 9)-(line 277,col 75)",
            "(line 278,col 9)-(line 280,col 9)",
            "(line 282,col 9)-(line 283,col 52)",
            "(line 284,col 9)-(line 285,col 55)",
            "(line 286,col 9)-(line 287,col 61)",
            "(line 288,col 9)-(line 289,col 65)",
            "(line 290,col 9)-(line 290,col 85)",
            "(line 291,col 9)-(line 291,col 90)",
            "(line 292,col 9)-(line 292,col 88)",
            "(line 293,col 9)-(line 293,col 93)",
            "(line 295,col 9)-(line 300,col 9)",
            "(line 302,col 9)-(line 307,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic()",
        "snippet": "    public void testTwoSampleTHeterscedastic() throws Exception {\n        double[] sample1 = { 7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d };\n        double[] sample2 = { -1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d };\n        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n        for (int i = 0; i < sample1.length; i++) {\n            sampleStats1.addValue(sample1[i]);\n        }\n        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();    \n        for (int i = 0; i < sample2.length; i++) {\n            sampleStats2.addValue(sample2[i]);\n        }\n        \n        // Target comparison values computed using R version 1.8.1 (Linux version)\n        assertEquals(\"two sample heteroscedastic t stat\", 1.60371728768, \n                TestUtils.t(sample1, sample2), 1E-10);\n        assertEquals(\"two sample heteroscedastic t stat\", 1.60371728768, \n                TestUtils.t(sampleStats1, sampleStats2), 1E-10);\n        assertEquals(\"two sample heteroscedastic p value\", 0.128839369622, \n                TestUtils.tTest(sample1, sample2), 1E-10);\n        assertEquals(\"two sample heteroscedastic p value\", 0.128839369622, \n                TestUtils.tTest(sampleStats1, sampleStats2), 1E-10);     \n        assertTrue(\"two sample heteroscedastic t-test reject\", \n                TestUtils.tTest(sample1, sample2, 0.2));\n        assertTrue(\"two sample heteroscedastic t-test reject\", \n                TestUtils.tTest(sampleStats1, sampleStats2, 0.2));\n        assertTrue(\"two sample heteroscedastic t-test accept\", \n                !TestUtils.tTest(sample1, sample2, 0.1));\n        assertTrue(\"two sample heteroscedastic t-test accept\", \n                !TestUtils.tTest(sampleStats1, sampleStats2, 0.1));\n        \n        try {\n            TestUtils.tTest(sample1, sample2, .95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        try {\n            TestUtils.tTest(sampleStats1, sampleStats2, .95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected \n        }  \n        \n        try {\n            TestUtils.tTest(sample1, tooShortObs, .01);\n            fail(\"insufficient data, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        try {\n            TestUtils.tTest(sampleStats1, (SummaryStatistics) null, .01);\n            fail(\"insufficient data, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        try {\n            TestUtils.tTest(sample1, tooShortObs);\n            fail(\"insufficient data, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        try {\n            TestUtils.tTest(sampleStats1, (SummaryStatistics) null);\n            fail(\"insufficient data, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        try {\n            TestUtils.t(sample1, tooShortObs);\n            fail(\"insufficient data, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        try {\n            TestUtils.t(sampleStats1, (SummaryStatistics) null);\n            fail(\"insufficient data, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 311,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 312,col 9)-(line 312,col 78)",
            "(line 313,col 9)-(line 313,col 83)",
            "(line 314,col 9)-(line 314,col 73)",
            "(line 315,col 9)-(line 317,col 9)",
            "(line 318,col 9)-(line 318,col 73)",
            "(line 319,col 9)-(line 321,col 9)",
            "(line 324,col 9)-(line 325,col 54)",
            "(line 326,col 9)-(line 327,col 64)",
            "(line 328,col 9)-(line 329,col 58)",
            "(line 330,col 9)-(line 331,col 68)",
            "(line 332,col 9)-(line 333,col 56)",
            "(line 334,col 9)-(line 335,col 66)",
            "(line 336,col 9)-(line 337,col 57)",
            "(line 338,col 9)-(line 339,col 67)",
            "(line 341,col 9)-(line 346,col 9)",
            "(line 348,col 9)-(line 353,col 9)",
            "(line 355,col 9)-(line 360,col 9)",
            "(line 362,col 9)-(line 367,col 9)",
            "(line 369,col 9)-(line 374,col 9)",
            "(line 376,col 9)-(line 381,col 9)",
            "(line 383,col 9)-(line 388,col 9)",
            "(line 390,col 9)-(line 395,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic()",
        "snippet": "    public void testTwoSampleTHomoscedastic() throws Exception {\n        double[] sample1 ={2, 4, 6, 8, 10, 97};\n        double[] sample2 = {4, 6, 8, 10, 16};\n        SummaryStatistics sampleStats1 = SummaryStatistics.newInstance();  \n        for (int i = 0; i < sample1.length; i++) {\n            sampleStats1.addValue(sample1[i]);\n        }\n        SummaryStatistics sampleStats2 = SummaryStatistics.newInstance();    \n        for (int i = 0; i < sample2.length; i++) {\n            sampleStats2.addValue(sample2[i]);\n        }\n        \n        // Target comparison values computed using R version 1.8.1 (Linux version)\n        assertEquals(\"two sample homoscedastic t stat\", 0.73096310086, \n                TestUtils.homoscedasticT(sample1, sample2), 10E-11);\n        assertEquals(\"two sample homoscedastic p value\", 0.4833963785, \n                TestUtils.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10);     \n        assertTrue(\"two sample homoscedastic t-test reject\", \n                TestUtils.homoscedasticTTest(sample1, sample2, 0.49));\n        assertTrue(\"two sample homoscedastic t-test accept\", \n                !TestUtils.homoscedasticTTest(sample1, sample2, 0.48));\n    }\n",
        "begin_line": 397,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 47)",
            "(line 399,col 9)-(line 399,col 45)",
            "(line 400,col 9)-(line 400,col 73)",
            "(line 401,col 9)-(line 403,col 9)",
            "(line 404,col 9)-(line 404,col 73)",
            "(line 405,col 9)-(line 407,col 9)",
            "(line 410,col 9)-(line 411,col 68)",
            "(line 412,col 9)-(line 413,col 81)",
            "(line 414,col 9)-(line 415,col 70)",
            "(line 416,col 9)-(line 417,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testSmallSamples()",
        "snippet": "    public void testSmallSamples() throws Exception {\n        double[] sample1 = {1d, 3d};\n        double[] sample2 = {4d, 5d};        \n        \n        // Target values computed using R, version 1.8.1 (linux version)\n        assertEquals(-2.2360679775, TestUtils.t(sample1, sample2),\n                1E-10);\n        assertEquals(0.198727388935, TestUtils.tTest(sample1, sample2),\n                1E-10);\n    }\n",
        "begin_line": 420,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 421,col 9)-(line 421,col 36)",
            "(line 422,col 9)-(line 422,col 36)",
            "(line 425,col 9)-(line 426,col 23)",
            "(line 427,col 9)-(line 428,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.stat.inference.TestUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "signature": "org.apache.commons.math.stat.inference.TestUtilsTest.testPaired()",
        "snippet": "    public void testPaired() throws Exception {\n        double[] sample1 = {1d, 3d, 5d, 7d};\n        double[] sample2 = {0d, 6d, 11d, 2d};\n        double[] sample3 = {5d, 7d, 8d, 10d};\n\n        // Target values computed using R, version 1.8.1 (linux version)\n        assertEquals(-0.3133, TestUtils.pairedT(sample1, sample2), 1E-4);\n        assertEquals(0.774544295819, TestUtils.pairedTTest(sample1, sample2), 1E-10);\n        assertEquals(0.001208, TestUtils.pairedTTest(sample1, sample3), 1E-6);\n        assertFalse(TestUtils.pairedTTest(sample1, sample3, .001));\n        assertTrue(TestUtils.pairedTTest(sample1, sample3, .002));    \n    }\n",
        "begin_line": 431,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 44)",
            "(line 433,col 9)-(line 433,col 45)",
            "(line 434,col 9)-(line 434,col 45)",
            "(line 437,col 9)-(line 437,col 73)",
            "(line 438,col 9)-(line 438,col 85)",
            "(line 439,col 9)-(line 439,col 78)",
            "(line 440,col 9)-(line 440,col 67)",
            "(line 441,col 9)-(line 441,col 66)"
        ]
    }
]