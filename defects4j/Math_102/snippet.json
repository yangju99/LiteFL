[
    {
        "name": "ChiSquareTestImpl.chiSquare#64",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[], long[])",
        "snippet": "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "begin_line": 64,
        "end_line": 81,
        "comment": "\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     ",
        "resolved_comments": {
            "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest": null,
            "org.apache.commons.math.stat.inference.ChiSquareTest": "\n     * Computes the <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n     * Chi-Square statistic</a> comparing <code>observed</code> and <code>expected</code> \n     * frequency counts. \n     * <p>\n     * This statistic can be used to perform a Chi-Square test evaluating the null hypothesis that\n     *  the observed counts follow the expected distribution.\n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>Expected counts must all be positive.  \n     * </li>\n     * <li>Observed counts must all be >= 0.   \n     * </li>\n     * <li>The observed and expected arrays must have the same length and\n     * their common length must be at least 2.  \n     * </li></ul><p>\n     * If any of the preconditions are not met, an \n     * <code>IllegalArgumentException</code> is thrown.\n     *\n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chiSquare statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     "
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquareTestImpl.chiSquareTest#95",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquareTest(double[], long[])",
        "snippet": "    public double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException {\n        distribution.setDegreesOfFreedom(expected.length - 1.0);\n        return 1.0 - distribution.cumulativeProbability(\n            chiSquare(expected, observed));\n    }\n",
        "begin_line": 95,
        "end_line": 100,
        "comment": "\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of exptected frequency counts\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     ",
        "resolved_comments": {
            "org.apache.commons.math.stat.inference.UnknownDistributionChiSquareTest": null,
            "org.apache.commons.math.stat.inference.ChiSquareTest": "\n     * Returns the <i>observed significance level</i>, or <a href=\n     * \"http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue\">\n     * p-value</a>, associated with a \n     * <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm\">\n     * Chi-square goodness of fit test</a> comparing the <code>observed</code> \n     * frequency counts to those in the <code>expected</code> array.\n     * <p>\n     * The number returned is the smallest significance level at which one can reject \n     * the null hypothesis that the observed counts conform to the frequency distribution \n     * described by the expected counts. \n     * <p>\n     * <strong>Preconditions</strong>: <ul>\n     * <li>Expected counts must all be positive.  \n     * </li>\n     * <li>Observed counts must all be >= 0.   \n     * </li>\n     * <li>The observed and expected arrays must have the same length and\n     * their common length must be at least 2.  \n     * </li></ul><p>\n     * If any of the preconditions are not met, an \n     * <code>IllegalArgumentException</code> is thrown.\n     *\n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return p-value\n     * @throws IllegalArgumentException if preconditions are not met\n     * @throws MathException if an error occurs computing the p-value\n     "
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquareTestImpl.isPositive#349",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isPositive(double[])",
        "snippet": "    private boolean isPositive(double[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 349,
        "end_line": 356,
        "comment": "\n     * Returns true iff all entries of the input array are > 0.\n     * Returns true if the array is non-null, but empty\n     * \n     * @param in array to be tested\n     * @return true if all entries of the array are positive\n     * @throws NullPointerException if input array is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquareTestImpl.isNonNegative#366",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.isNonNegative(long[])",
        "snippet": "    private boolean isNonNegative(long[] in) {\n        for (int i = 0; i < in.length; i ++) {\n            if (in[i] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 366,
        "end_line": 373,
        "comment": "\n     * Returns true iff all entries of the input array are >= 0.\n     * Returns true if the array is non-null, but empty\n     * \n     * @param in array to be tested\n     * @return true if all entries of the array are non-negative\n     * @throws NullPointerException if input array is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 6
    },
    {
        "name": "Gamma.regularizedGammaP#117",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.regularizedGammaP(double, double)",
        "snippet": "    public static double regularizedGammaP(double a, double x)\n        throws MathException\n    {\n        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n",
        "begin_line": 117,
        "end_line": 121,
        "comment": "\n     * Returns the regularized gamma function P(a, x).\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 6
    },
    {
        "name": "Gamma.regularizedGammaP#150",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.regularizedGammaP(double, double, double, int)",
        "snippet": "    public static double regularizedGammaP(double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException\n    {\n        double ret;\n\n        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n            ret = Double.NaN;\n        } else if (x == 0.0) {\n            ret = 0.0;\n        } else if (a >= 1.0 && x > a) {\n            // use regularizedGammaQ because it should converge faster in this\n            // case.\n            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);\n        } else {\n            // calculate series\n            double n = 0.0; // current element index\n            double an = 1.0 / a; // n-th element in the series\n            double sum = an; // partial sum\n            while (Math.abs(an) > epsilon && n < maxIterations) {\n                // compute next element in the series\n                n = n + 1.0;\n                an = an * (x / (a + n));\n\n                // update partial sum\n                sum = sum + an;\n            }\n            if (n >= maxIterations) {\n                throw new MaxIterationsExceededException(maxIterations);\n            } else {\n                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;\n            }\n        }\n\n        return ret;\n    }\n",
        "begin_line": 150,
        "end_line": 187,
        "comment": "\n     * Returns the regularized gamma function P(a, x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/IncompleteGammaFunction.html\">\n     * Incomplete Gamma Function</a>, equation (4).</li>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html\">\n     * Confluent Hypergeometric Function of the First Kind</a>, equation (1).\n     * </li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 6
    },
    {
        "name": "GammaDistributionImpl.cumulativeProbability#69",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability(double)",
        "snippet": "    public double cumulativeProbability(double x) throws MathException{\n        double ret;\n    \n        if (x <= 0.0) {\n            ret = 0.0;\n        } else {\n            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());\n        }\n    \n        return ret;\n    }\n",
        "begin_line": 69,
        "end_line": 79,
        "comment": "\n     * For this disbution, X, this method returns P(X &lt; x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/Chi-SquaredDistribution.html\">\n     * Chi-Squared Distribution</a>, equation (9).</li>\n     * <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>.\n     * Belmont, CA: Duxbury Press.</li>\n     * </ul>\n     * \n     * @param x the value at which the CDF is evaluated.\n     * @return CDF for this distribution. \n     * @throws MathException if the cumulative probability can not be\n     *            computed due to convergence or other numerical errors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 6
    },
    {
        "name": "GammaDistributionImpl.getAlpha#121",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha()",
        "snippet": "    public double getAlpha() {\n        return alpha;\n    }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * Access the shape parameter, alpha\n     * @return alpha.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 6
    },
    {
        "name": "GammaDistributionImpl.getBeta#141",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.getBeta()",
        "snippet": "    public double getBeta() {\n        return beta;\n    }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "\n     * Access the scale parameter, beta\n     * @return beta.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquaredDistributionImpl.cumulativeProbability#81",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.cumulativeProbability(double)",
        "snippet": "    public double cumulativeProbability(double x) throws MathException {\n        return getGamma().cumulativeProbability(x);\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * For this disbution, X, this method returns P(X &lt; x).\n     * @param x the value at which the CDF is evaluated.\n     * @return CDF for this distribution. \n     * @throws MathException if the cumulative probability can not be\n     *            computed due to convergence or other numerical errors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 6
    },
    {
        "name": "TestUtils.chiSquare#276",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/TestUtils.java",
        "class_name": "org.apache.commons.math.stat.inference.TestUtils",
        "signature": "org.apache.commons.math.stat.inference.TestUtils.chiSquare(double[], long[])",
        "snippet": "    public static double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        return chiSquareTest.chiSquare(expected, observed);\n    }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "Gamma.logGamma#87",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.logGamma(double)",
        "snippet": "    public static double logGamma(double x) {\n        double ret;\n\n        if (Double.isNaN(x) || (x <= 0.0)) {\n            ret = Double.NaN;\n        } else {\n            double g = 607.0 / 128.0;\n            \n            double sum = 0.0;\n            for (int i = lanczos.length - 1; i > 0; --i) {\n                sum = sum + (lanczos[i] / (x + i));\n            }\n            sum = sum + lanczos[0];\n\n            double tmp = x + g + .5;\n            ret = ((x + .5) * Math.log(tmp)) - tmp +\n                HALF_LOG_2_PI + Math.log(sum / x);\n        }\n\n        return ret;\n    }\n",
        "begin_line": 87,
        "end_line": 107,
        "comment": "\n     * Returns the natural logarithm of the gamma function &#915;(x).\n     *\n     * The implementation of this method is based on:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/GammaFunction.html\">\n     * Gamma Function</a>, equation (28).</li>\n     * <li><a href=\"http://mathworld.wolfram.com/LanczosApproximation.html\">\n     * Lanczos Approximation</a>, equations (1) through (5).</li>\n     * <li><a href=\"http://my.fit.edu/~gabdo/gamma.txt\">Paul Godfrey, A note on\n     * the computation of the convergent Lanczos complex Gamma approximation\n     * </a></li>\n     * </ul>\n     * \n     * @param x the value.\n     * @return log(&#915;(x))\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4629
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquareTestImpl.ChiSquareTestImpl#38",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl()",
        "snippet": "    public ChiSquareTestImpl() {\n        this(new ChiSquaredDistributionImpl(1.0));\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\n     * Construct a ChiSquareTestImpl \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquareTestImpl.ChiSquareTestImpl#48",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.ChiSquareTestImpl(org.apache.commons.math.distribution.ChiSquaredDistribution)",
        "snippet": "    public ChiSquareTestImpl(ChiSquaredDistribution x) {\n        super();\n        setDistribution(x);\n    }\n",
        "begin_line": 48,
        "end_line": 51,
        "comment": "\n     * Create a test instance using the given distribution for computing\n     * inference statistics.\n     * @param x distribution used to compute inference statistics.\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquareTestImpl.setDistribution#401",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.ChiSquareTestImpl",
        "signature": "org.apache.commons.math.stat.inference.ChiSquareTestImpl.setDistribution(org.apache.commons.math.distribution.ChiSquaredDistribution)",
        "snippet": "    public void setDistribution(ChiSquaredDistribution value) {\n        distribution = value;\n    }\n",
        "begin_line": 401,
        "end_line": 403,
        "comment": "\n     * Modify the distribution used to compute inference statistics.\n     * \n     * @param value\n     *            the new distribution\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "GammaDistributionImpl.GammaDistributionImpl#46",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl(double, double)",
        "snippet": "    public GammaDistributionImpl(double alpha, double beta) {\n        super();\n        setAlpha(alpha);\n        setBeta(beta);\n    }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "\n     * Create a new gamma distribution with the given alpha and beta values.\n     * @param alpha the shape parameter.\n     * @param beta the scale parameter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "GammaDistributionImpl.setAlpha#110",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha(double)",
        "snippet": "    public void setAlpha(double alpha) {\n        if (alpha <= 0.0) {\n            throw new IllegalArgumentException(\"alpha must be positive\");\n        }\n        this.alpha = alpha;\n    }\n",
        "begin_line": 110,
        "end_line": 115,
        "comment": "\n     * Modify the shape parameter, alpha.\n     * @param alpha the new shape parameter.\n     * @throws IllegalArgumentException if <code>alpha</code> is not positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "GammaDistributionImpl.setBeta#130",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.GammaDistributionImpl",
        "signature": "org.apache.commons.math.distribution.GammaDistributionImpl.setBeta(double)",
        "snippet": "    public void setBeta(double beta) {\n        if (beta <= 0.0) {\n            throw new IllegalArgumentException(\"beta must be positive\");\n        }\n        this.beta = beta;\n    }\n",
        "begin_line": 130,
        "end_line": 135,
        "comment": "\n     * Modify the scale parameter, beta.\n     * @param beta the new scale parameter.\n     * @throws IllegalArgumentException if <code>beta</code> is not positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquaredDistributionImpl.ChiSquaredDistributionImpl#42",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double)",
        "snippet": "    public ChiSquaredDistributionImpl(double df) {\n        this(df, new GammaDistributionImpl(df / 2.0, 2.0));\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Create a Chi-Squared distribution with the given degrees of freedom.\n     * @param df degrees of freedom.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquaredDistributionImpl.ChiSquaredDistributionImpl#52",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.ChiSquaredDistributionImpl(double, org.apache.commons.math.distribution.GammaDistribution)",
        "snippet": "    public ChiSquaredDistributionImpl(double df, GammaDistribution g) {\n        super();\n        setGamma(g);\n        setDegreesOfFreedom(df);\n    }\n",
        "begin_line": 52,
        "end_line": 56,
        "comment": "\n     * Create a Chi-Squared distribution with the given degrees of freedom.\n     * @param df degrees of freedom.\n     * @param g the underlying gamma distribution used to compute probabilities.\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquaredDistributionImpl.setDegreesOfFreedom#62",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setDegreesOfFreedom(double)",
        "snippet": "    public void setDegreesOfFreedom(double degreesOfFreedom) {\n        getGamma().setAlpha(degreesOfFreedom / 2.0);\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n     * Modify the degrees of freedom.\n     * @param degreesOfFreedom the new degrees of freedom.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquaredDistributionImpl.setGamma#179",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.setGamma(org.apache.commons.math.distribution.GammaDistribution)",
        "snippet": "    public void setGamma(GammaDistribution g) {\n        this.gamma = g;\n        \n    }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": "\n     * Modify the underlying gamma distribution.  The caller is responsible for\n     * insuring the gamma distribution has the proper parameter settings.\n     * @param g the new distribution.\n     * @since 1.2 made public\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "ChiSquaredDistributionImpl.getGamma#188",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl",
        "signature": "org.apache.commons.math.distribution.ChiSquaredDistributionImpl.getGamma()",
        "snippet": "    private GammaDistribution getGamma() {\n        return gamma;\n    }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "\n     * Access the Gamma distribution.\n     * @return the internal Gamma distribution.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "AbstractDistribution.AbstractDistribution#37",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/AbstractDistribution.java",
        "class_name": "org.apache.commons.math.distribution.AbstractDistribution",
        "signature": "org.apache.commons.math.distribution.AbstractDistribution.AbstractDistribution()",
        "snippet": "    protected AbstractDistribution() {\n        super();\n    }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "AbstractContinuousDistribution.AbstractContinuousDistribution#44",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution()",
        "snippet": "    protected AbstractContinuousDistribution() {\n        super();\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 6
    },
    {
        "name": "TestUtils.chiSquareTest#301",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/TestUtils.java",
        "class_name": "org.apache.commons.math.stat.inference.TestUtils",
        "signature": "org.apache.commons.math.stat.inference.TestUtils.chiSquareTest(double[], long[])",
        "snippet": "    public static double chiSquareTest(double[] expected, long[] observed)\n        throws IllegalArgumentException, MathException {\n        return chiSquareTest.chiSquareTest(expected, observed);\n    }\n",
        "begin_line": 301,
        "end_line": 304,
        "comment": "\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquareTest(double[], long[])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gamma.regularizedGammaQ#225",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.regularizedGammaQ(double, double, double, int)",
        "snippet": "    public static double regularizedGammaQ(final double a, \n                                           double x, \n                                           double epsilon, \n                                           int maxIterations) \n        throws MathException\n    {\n        double ret;\n\n        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {\n            ret = Double.NaN;\n        } else if (x == 0.0) {\n            ret = 1.0;\n        } else if (x < a || a < 1.0) {\n            // use regularizedGammaP because it should converge faster in this\n            // case.\n            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);\n        } else {\n            // create continued fraction\n            ContinuedFraction cf = new ContinuedFraction() {\n\n                private static final long serialVersionUID = 5378525034886164398L;\n\n                protected double getA(int n, double x) {\n                    return ((2.0 * n) + 1.0) - a + x;\n                }\n\n                protected double getB(int n, double x) {\n                    return n * (a - n);\n                }\n            };\n            \n            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);\n            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;\n        }\n\n        return ret;\n    }\n",
        "begin_line": 225,
        "end_line": 261,
        "comment": "\n     * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).\n     * \n     * The implementation of this method is based on:\n     * <ul>\n     * <li>\n     * <a href=\"http://mathworld.wolfram.com/RegularizedGammaFunction.html\">\n     * Regularized Gamma Function</a>, equation (1).</li>\n     * <li>\n     * <a href=\"    http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/\">\n     * Regularized incomplete gamma function: Continued fraction representations  (formula 06.08.10.0003)</a></li>\n     * </ul>\n     * \n     * @param a the a parameter.\n     * @param x the value.\n     * @param epsilon When the absolute value of the nth item in the\n     *                series is less than epsilon the approximation ceases\n     *                to calculate further elements in the series.\n     * @param maxIterations Maximum number of \"iterations\" to complete. \n     * @return the regularized gamma function P(a, x)\n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "Gamma.getA#247",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.Anonymous-43589fb1-c7a1-41a0-9f51-4494e894d262.getA(int, double)",
        "snippet": "                protected double getA(int n, double x) {\n                    return ((2.0 * n) + 1.0) - a + x;\n                }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "Gamma.getB#251",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/special/Gamma.java",
        "class_name": "org.apache.commons.math.special.Gamma",
        "signature": "org.apache.commons.math.special.Gamma.Anonymous-bbb92f3b-5099-493c-9157-78de189c2023.getB(int, double)",
        "snippet": "                protected double getB(int n, double x) {\n                    return n * (a - n);\n                }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "TTestImpl.TTestImpl#42",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/TTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.TTestImpl",
        "signature": "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl()",
        "snippet": "    public TTestImpl() {\n        this(new TDistributionImpl(1.0));\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3405
        },
        "num_failing_tests": 4
    },
    {
        "name": "TTestImpl.TTestImpl#52",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/TTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.TTestImpl",
        "signature": "org.apache.commons.math.stat.inference.TTestImpl.TTestImpl(org.apache.commons.math.distribution.TDistribution)",
        "snippet": "    public TTestImpl(TDistribution t) {\n        super();\n        setDistribution(t);\n    }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "\n     * Create a test instance using the given distribution for computing\n     * inference statistics.\n     * @param t distribution used to compute inference statistics.\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3405
        },
        "num_failing_tests": 4
    },
    {
        "name": "TTestImpl.setDistribution#1066",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/TTestImpl.java",
        "class_name": "org.apache.commons.math.stat.inference.TTestImpl",
        "signature": "org.apache.commons.math.stat.inference.TTestImpl.setDistribution(org.apache.commons.math.distribution.TDistribution)",
        "snippet": "    public void setDistribution(TDistribution value) {\n        distribution = value;\n    }\n",
        "begin_line": 1066,
        "end_line": 1068,
        "comment": "\n     * Modify the distribution used to compute inference statistics.\n     * @param value the new distribution\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3405
        },
        "num_failing_tests": 4
    },
    {
        "name": "TDistributionImpl.TDistributionImpl#44",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl(double)",
        "snippet": "    public TDistributionImpl(double degreesOfFreedom) {\n        super();\n        setDegreesOfFreedom(degreesOfFreedom);\n    }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n     * Create a t distribution using the given degrees of freedom.\n     * @param degreesOfFreedom the degrees of freedom.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3405
        },
        "num_failing_tests": 4
    },
    {
        "name": "TDistributionImpl.setDegreesOfFreedom#53",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/distribution/TDistributionImpl.java",
        "class_name": "org.apache.commons.math.distribution.TDistributionImpl",
        "signature": "org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom(double)",
        "snippet": "    public void setDegreesOfFreedom(double degreesOfFreedom) {\n        if (degreesOfFreedom <= 0.0) {\n            throw new IllegalArgumentException(\"degrees of freedom must be positive.\");\n        }\n        this.degreesOfFreedom = degreesOfFreedom;\n    }\n",
        "begin_line": 53,
        "end_line": 58,
        "comment": "\n     * Modify the degrees of freedom.\n     * @param degreesOfFreedom the new degrees of freedom.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3405
        },
        "num_failing_tests": 4
    },
    {
        "name": "TestUtils.getUnknownDistributionChiSquareTest#101",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/inference/TestUtils.java",
        "class_name": "org.apache.commons.math.stat.inference.TestUtils",
        "signature": "org.apache.commons.math.stat.inference.TestUtils.getUnknownDistributionChiSquareTest()",
        "snippet": "    public static UnknownDistributionChiSquareTest getUnknownDistributionChiSquareTest() {\n        return unknownDistributionChiSquareTest;\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Return a (singleton) UnknownDistributionChiSquareTest instance.  Does not create a new instance.\n     * \n     * @return a UnknownDistributionChiSquareTest instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "ContinuedFraction.ContinuedFraction#50",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/util/ContinuedFraction.java",
        "class_name": "org.apache.commons.math.util.ContinuedFraction",
        "signature": "org.apache.commons.math.util.ContinuedFraction.ContinuedFraction()",
        "snippet": "    protected ContinuedFraction() {\n        super();\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2554
        },
        "num_failing_tests": 3
    },
    {
        "name": "ContinuedFraction.evaluate#130",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/util/ContinuedFraction.java",
        "class_name": "org.apache.commons.math.util.ContinuedFraction",
        "signature": "org.apache.commons.math.util.ContinuedFraction.evaluate(double, double, int)",
        "snippet": "    public double evaluate(double x, double epsilon, int maxIterations)\n        throws MathException\n    {\n        double p0 = 1.0;\n        double p1 = getA(0, x);\n        double q0 = 0.0;\n        double q1 = 1.0;\n        double c = p1 / q1;\n        int n = 0;\n        double relativeError = Double.MAX_VALUE;\n        while (n < maxIterations && relativeError > epsilon) {\n            ++n;\n            double a = getA(n, x);\n            double b = getB(n, x);\n            double p2 = a * p1 + b * p0;\n            double q2 = a * q1 + b * q0;\n            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n                // need to scale\n                if (a != 0.0) {\n                    p2 = p1 + (b / a * p0);\n                    q2 = q1 + (b / a * q0);\n                } else if (b != 0) {\n                    p2 = (a / b * p1) + p0;\n                    q2 = (a / b * q1) + q0;\n                } else {\n                    // can not scale an convergent is unbounded.\n                    throw new ConvergenceException(\n                        \"Continued fraction convergents diverged to +/- infinity for value {0}\",\n                        new Object[] { new Double(x) });\n                }\n            }\n            double r = p2 / q2;\n            relativeError = Math.abs(r / c - 1.0);\n                \n            // prepare for next iteration\n            c = p2 / q2;\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxIterationsExceededException(maxIterations,\n                \"Continued fraction convergents failed to converge for value {0}\",\n                new Object[] { new Double(x) });\n        }\n\n        return c;\n    }\n",
        "begin_line": 130,
        "end_line": 179,
        "comment": "\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     * \n     * <p>\n     * The implementation of this method is based on equations 14-17 of:\n     * <ul>\n     * <li>\n     *   Eric W. Weisstein. \"Continued Fraction.\" From MathWorld--A Wolfram Web\n     *   Resource. <a target=\"_blank\"\n     *   href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n     *   http://mathworld.wolfram.com/ContinuedFraction.html</a>\n     * </li>\n     * </ul>\n     * The recurrence relationship defined in those equations can result in\n     * very large intermediate results which can result in numerical overflow.\n     * As a means to combat these overflow conditions, the intermediate results\n     * are scaled whenever they threaten to become numerically unstable.\n     *   \n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x. \n     * @throws MathException if the algorithm fails to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2554
        },
        "num_failing_tests": 3
    },
    {
        "name": "SumOfSquares.SumOfSquares#52",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java",
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfSquares.SumOfSquares()",
        "snippet": "    public SumOfSquares() {\n        n = 0;\n        value = Double.NaN;\n    }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "\n     * Create a SumOfSquares instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "SumOfLogs.SumOfLogs#60",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java",
        "class_name": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs",
        "signature": "org.apache.commons.math.stat.descriptive.summary.SumOfLogs.SumOfLogs()",
        "snippet": "    public SumOfLogs() {\n       value = 0d;\n       n = 0;\n    }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\n     * Create a SumOfLogs instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "Sum.Sum#52",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/summary/Sum.java",
        "class_name": "org.apache.commons.math.stat.descriptive.summary.Sum",
        "signature": "org.apache.commons.math.stat.descriptive.summary.Sum.Sum()",
        "snippet": "    public Sum() {\n        n = 0;\n        value = Double.NaN;\n    }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "\n     * Create a Sum instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "Min.Min#54",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/rank/Min.java",
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Min",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Min.Min()",
        "snippet": "    public Min() {\n        n = 0;\n        value = Double.NaN;\n    }\n",
        "begin_line": 54,
        "end_line": 57,
        "comment": "\n     * Create a Min instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "Max.Max#52",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/rank/Max.java",
        "class_name": "org.apache.commons.math.stat.descriptive.rank.Max",
        "signature": "org.apache.commons.math.stat.descriptive.rank.Max.Max()",
        "snippet": "    public Max() {\n        n = 0;\n        value = Double.NaN;\n    }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "\n     * Create a Max instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "Variance.Variance#90",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Variance",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Variance.Variance()",
        "snippet": "    public Variance() {\n        moment = new SecondMoment();\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n     * Constructs a Variance with default (true) <code>isBiasCorrected</code>\n     * property.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "SecondMoment.SecondMoment#56",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.SecondMoment",
        "signature": "org.apache.commons.math.stat.descriptive.moment.SecondMoment.SecondMoment()",
        "snippet": "    public SecondMoment() {\n        super();\n        m2 = Double.NaN;\n    }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n     * Create a SecondMoment instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "Mean.Mean#76",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.Mean",
        "signature": "org.apache.commons.math.stat.descriptive.moment.Mean.Mean()",
        "snippet": "    public Mean() {\n        incMoment = true;\n        moment = new FirstMoment();\n    }\n",
        "begin_line": 76,
        "end_line": 79,
        "comment": " Constructs a Mean. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "GeometricMean.GeometricMean#57",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.GeometricMean",
        "signature": "org.apache.commons.math.stat.descriptive.moment.GeometricMean.GeometricMean()",
        "snippet": "    public GeometricMean() {\n        sumOfLogs = new SumOfLogs();\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Create a GeometricMean instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "FirstMoment.FirstMoment#76",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java",
        "class_name": "org.apache.commons.math.stat.descriptive.moment.FirstMoment",
        "signature": "org.apache.commons.math.stat.descriptive.moment.FirstMoment.FirstMoment()",
        "snippet": "    public FirstMoment() {\n        n = 0;\n        m1 = Double.NaN;\n        dev = Double.NaN;\n        nDev = Double.NaN;\n    }\n",
        "begin_line": 76,
        "end_line": 81,
        "comment": "\n     * Create a FirstMoment instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "SummaryStatisticsImpl.SummaryStatisticsImpl#35",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl.java",
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl.SummaryStatisticsImpl()",
        "snippet": "    public SummaryStatisticsImpl() {\n        super();\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * Construct a SummaryStatistics\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "SummaryStatistics.newInstance#82",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance()",
        "snippet": "    public static SummaryStatistics newInstance() {\n        SummaryStatistics instance = null;\n        try {\n            DiscoverClass dc = new DiscoverClass();\n            instance = (SummaryStatistics) dc.newInstance(\n                SummaryStatistics.class,\n                \"org.apache.commons.math.stat.descriptive.SummaryStatisticsImpl\");\n        } catch(Throwable t) {\n            return new SummaryStatisticsImpl();\n        }\n        return instance;\n    }\n",
        "begin_line": 82,
        "end_line": 93,
        "comment": "\n     * Create an instance of a <code>SummaryStatistics</code>\n     * \n     * @return a new SummaryStatistics instance.\n     * @deprecated to be removed in commons-math 2.0 \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    },
    {
        "name": "SummaryStatistics.SummaryStatistics#98",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java",
        "class_name": "org.apache.commons.math.stat.descriptive.SummaryStatistics",
        "signature": "org.apache.commons.math.stat.descriptive.SummaryStatistics.SummaryStatistics()",
        "snippet": "    public SummaryStatistics() {\n    }\n",
        "begin_line": 98,
        "end_line": 99,
        "comment": "\n     * Construct a SummaryStatistics instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 2
    }
]