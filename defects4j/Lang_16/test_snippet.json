[
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        assertNotNull(new NumberUtils());\n        Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers()));\n    }\n",
        "begin_line": 39,
        "end_line": 47,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 41)",
            "(line 42,col 9)-(line 42,col 76)",
            "(line 43,col 9)-(line 43,col 37)",
            "(line 44,col 9)-(line 44,col 62)",
            "(line 45,col 9)-(line 45,col 72)",
            "(line 46,col 9)-(line 46,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToIntString()",
        "snippet": "    @Test\n    public void testToIntString() {\n        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n    }\n",
        "begin_line": 54,
        "end_line": 60,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String)}.\n     ",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 82)",
            "(line 57,col 9)-(line 57,col 76)",
            "(line 58,col 9)-(line 58,col 70)",
            "(line 59,col 9)-(line 59,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToIntStringI()",
        "snippet": "    @Test\n    public void testToIntStringI() {\n        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n    }\n",
        "begin_line": 65,
        "end_line": 69,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String, int)}.\n     ",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 89)",
            "(line 68,col 9)-(line 68,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToLongString()",
        "snippet": "    @Test\n    public void testToLongString() {\n        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n    }\n",
        "begin_line": 74,
        "end_line": 84,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String)}.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 85)",
            "(line 77,col 9)-(line 77,col 79)",
            "(line 78,col 9)-(line 78,col 78)",
            "(line 79,col 9)-(line 79,col 78)",
            "(line 80,col 9)-(line 80,col 109)",
            "(line 81,col 9)-(line 81,col 109)",
            "(line 82,col 9)-(line 82,col 73)",
            "(line 83,col 9)-(line 83,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToLongStringL()",
        "snippet": "    @Test\n    public void testToLongStringL() {\n        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String, long)}.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 94)",
            "(line 92,col 9)-(line 92,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString()",
        "snippet": "    @Test\n    public void testToFloatString() {\n        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n    }\n",
        "begin_line": 98,
        "end_line": 107,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String)}.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 91)",
            "(line 101,col 9)-(line 101,col 89)",
            "(line 102,col 9)-(line 102,col 83)",
            "(line 103,col 9)-(line 103,col 115)",
            "(line 104,col 9)-(line 104,col 114)",
            "(line 105,col 9)-(line 105,col 77)",
            "(line 106,col 9)-(line 106,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF()",
        "snippet": "    @Test\n    public void testToFloatStringF() {\n        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n    }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String, float)}.\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 99)",
            "(line 115,col 9)-(line 115,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString()",
        "snippet": "    @Test\n    public void testStringToDoubleString() {\n        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n    }\n",
        "begin_line": 121,
        "end_line": 130,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String)}.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 93)",
            "(line 124,col 9)-(line 124,col 91)",
            "(line 125,col 9)-(line 125,col 85)",
            "(line 126,col 9)-(line 126,col 119)",
            "(line 127,col 9)-(line 127,col 119)",
            "(line 128,col 9)-(line 128,col 79)",
            "(line 129,col 9)-(line 129,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD()",
        "snippet": "    @Test\n    public void testStringToDoubleStringD() {\n        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n    }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String, double)}.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 101)",
            "(line 138,col 9)-(line 138,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToByteString()",
        "snippet": "    @Test\n    public void testToByteString() {\n        assertTrue(\"toByte(String) 1 failed\", NumberUtils.toByte(\"123\") == 123);\n        assertTrue(\"toByte(String) 2 failed\", NumberUtils.toByte(\"abc\") == 0);\n        assertTrue(\"toByte(empty) failed\", NumberUtils.toByte(\"\") == 0);\n        assertTrue(\"toByte(null) failed\", NumberUtils.toByte(null) == 0);\n    }\n",
        "begin_line": 144,
        "end_line": 150,
        "comment": "\n     * Test for {@link NumberUtils#toByte(String)}.\n     ",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 80)",
            "(line 147,col 9)-(line 147,col 78)",
            "(line 148,col 9)-(line 148,col 72)",
            "(line 149,col 9)-(line 149,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToByteStringI()",
        "snippet": "    @Test\n    public void testToByteStringI() {\n        assertTrue(\"toByte(String,byte) 1 failed\", NumberUtils.toByte(\"123\", (byte) 5) == 123);\n        assertTrue(\"toByte(String,byte) 2 failed\", NumberUtils.toByte(\"12.3\", (byte) 5) == 5);\n    }\n",
        "begin_line": 155,
        "end_line": 159,
        "comment": "\n     * Test for {@link NumberUtils#toByte(String, byte)}.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 95)",
            "(line 158,col 9)-(line 158,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToShortString()",
        "snippet": "    @Test\n    public void testToShortString() {\n        assertTrue(\"toShort(String) 1 failed\", NumberUtils.toShort(\"12345\") == 12345);\n        assertTrue(\"toShort(String) 2 failed\", NumberUtils.toShort(\"abc\") == 0);\n        assertTrue(\"toShort(empty) failed\", NumberUtils.toShort(\"\") == 0);\n        assertTrue(\"toShort(null) failed\", NumberUtils.toShort(null) == 0);\n    }\n",
        "begin_line": 164,
        "end_line": 170,
        "comment": "\n     * Test for {@link NumberUtils#toShort(String)}.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 86)",
            "(line 167,col 9)-(line 167,col 80)",
            "(line 168,col 9)-(line 168,col 74)",
            "(line 169,col 9)-(line 169,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToShortStringI()",
        "snippet": "    @Test\n    public void testToShortStringI() {\n        assertTrue(\"toShort(String,short) 1 failed\", NumberUtils.toShort(\"12345\", (short) 5) == 12345);\n        assertTrue(\"toShort(String,short) 2 failed\", NumberUtils.toShort(\"1234.5\", (short) 5) == 5);\n    }\n",
        "begin_line": 175,
        "end_line": 179,
        "comment": "\n     * Test for {@link NumberUtils#toShort(String, short)}.\n     ",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 103)",
            "(line 178,col 9)-(line 178,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber()",
        "snippet": "    @Test\n    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());\n        assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));\n\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n\n        // LANG-693\n        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));\n    }\n",
        "begin_line": 181,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 115)",
            "(line 185,col 9)-(line 185,col 115)",
            "(line 186,col 9)-(line 186,col 117)",
            "(line 187,col 9)-(line 187,col 117)",
            "(line 188,col 9)-(line 188,col 116)",
            "(line 189,col 9)-(line 189,col 116)",
            "(line 190,col 9)-(line 191,col 41)",
            "(line 192,col 9)-(line 192,col 111)",
            "(line 193,col 9)-(line 193,col 111)",
            "(line 194,col 9)-(line 194,col 117)",
            "(line 195,col 9)-(line 195,col 117)",
            "(line 196,col 9)-(line 196,col 110)",
            "(line 197,col 9)-(line 197,col 110)",
            "(line 198,col 9)-(line 198,col 113)",
            "(line 199,col 9)-(line 199,col 113)",
            "(line 200,col 9)-(line 200,col 119)",
            "(line 201,col 9)-(line 201,col 116)",
            "(line 202,col 9)-(line 202,col 121)",
            "(line 203,col 9)-(line 203,col 121)",
            "(line 204,col 9)-(line 204,col 88)",
            "(line 205,col 9)-(line 206,col 56)",
            "(line 209,col 9)-(line 212,col 9)",
            "(line 213,col 9)-(line 214,col 63)",
            "(line 215,col 9)-(line 216,col 57)",
            "(line 217,col 9)-(line 218,col 54)",
            "(line 221,col 9)-(line 221,col 114)",
            "(line 224,col 9)-(line 224,col 80)",
            "(line 227,col 9)-(line 228,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloat()",
        "snippet": "    @Test\n    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", Float.valueOf(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n        this.testCreateFloatFailure(\"\");\n        this.testCreateFloatFailure(\" \");\n        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 231,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 111)",
            "(line 234,col 9)-(line 234,col 86)",
            "(line 235,col 9)-(line 235,col 40)",
            "(line 236,col 9)-(line 236,col 41)",
            "(line 237,col 9)-(line 237,col 50)",
            "(line 239,col 9)-(line 239,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloatFailure(java.lang.String)",
        "snippet": "    protected void testCreateFloatFailure(String str) {\n        try {\n            Float value = NumberUtils.createFloat(str);\n            fail(\"createFloat(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 242,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 248,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble()",
        "snippet": "    @Test\n    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", Double.valueOf(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n        this.testCreateDoubleFailure(\"\");\n        this.testCreateDoubleFailure(\" \");\n        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 251,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 253,col 114)",
            "(line 254,col 9)-(line 254,col 88)",
            "(line 255,col 9)-(line 255,col 41)",
            "(line 256,col 9)-(line 256,col 42)",
            "(line 257,col 9)-(line 257,col 51)",
            "(line 259,col 9)-(line 259,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateDoubleFailure(java.lang.String)",
        "snippet": "    protected void testCreateDoubleFailure(String str) {\n        try {\n            Double value = NumberUtils.createDouble(str);\n            fail(\"createDouble(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 262,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 268,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateInteger()",
        "snippet": "    @Test\n    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", Integer.valueOf(\"12345\"), NumberUtils.createInteger(\"12345\"));\n        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n        this.testCreateIntegerFailure(\"\");\n        this.testCreateIntegerFailure(\" \");\n        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 271,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 115)",
            "(line 274,col 9)-(line 274,col 90)",
            "(line 275,col 9)-(line 275,col 42)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 52)",
            "(line 279,col 9)-(line 279,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateIntegerFailure(String str) {\n        try {\n            Integer value = NumberUtils.createInteger(str);\n            fail(\"createInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 282,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 288,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong()",
        "snippet": "    @Test\n    public void testCreateLong() {\n        assertEquals(\"createLong(String) failed\", Long.valueOf(\"12345\"), NumberUtils.createLong(\"12345\"));\n        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n        this.testCreateLongFailure(\"\");\n        this.testCreateLongFailure(\" \");\n        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 291,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 106)",
            "(line 294,col 9)-(line 294,col 84)",
            "(line 295,col 9)-(line 295,col 39)",
            "(line 296,col 9)-(line 296,col 40)",
            "(line 297,col 9)-(line 297,col 49)",
            "(line 299,col 9)-(line 299,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongFailure(java.lang.String)",
        "snippet": "    protected void testCreateLongFailure(String str) {\n        try {\n            Long value = NumberUtils.createLong(str);\n            fail(\"createLong(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 302,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 308,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger()",
        "snippet": "    @Test\n    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n        this.testCreateBigIntegerFailure(\"\");\n        this.testCreateBigIntegerFailure(\" \");\n        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 311,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 120)",
            "(line 314,col 9)-(line 314,col 96)",
            "(line 315,col 9)-(line 315,col 45)",
            "(line 316,col 9)-(line 316,col 46)",
            "(line 317,col 9)-(line 317,col 55)",
            "(line 319,col 9)-(line 319,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigIntegerFailure(String str) {\n        try {\n            BigInteger value = NumberUtils.createBigInteger(str);\n            fail(\"createBigInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 322,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 328,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimal()",
        "snippet": "    @Test\n    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n        this.testCreateBigDecimalFailure(\"\");\n        this.testCreateBigDecimalFailure(\" \");\n        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 331,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 122)",
            "(line 334,col 9)-(line 334,col 96)",
            "(line 335,col 9)-(line 335,col 45)",
            "(line 336,col 9)-(line 336,col 46)",
            "(line 337,col 9)-(line 337,col 55)",
            "(line 339,col 9)-(line 339,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimalFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigDecimalFailure(String str) {\n        try {\n            BigDecimal value = NumberUtils.createBigDecimal(str);\n            fail(\"createBigDecimal(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 342,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 348,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinLong_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinLong_nullArray() {\n        NumberUtils.min((long[]) null);\n    }\n",
        "begin_line": 353,
        "end_line": 356,
        "comment": " ----------------------------------------------------------------------",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinLong_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinLong_emptyArray() {\n        NumberUtils.min(new long[0]);\n    }\n",
        "begin_line": 358,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinLong()",
        "snippet": "    @Test\n    public void testMinLong() {\n        assertEquals(\n            \"min(long[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new long[] { 5 }));\n\n        assertEquals(\n            \"min(long[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new long[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 363,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 368,col 47)",
            "(line 370,col 9)-(line 373,col 50)",
            "(line 375,col 9)-(line 375,col 77)",
            "(line 376,col 9)-(line 376,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinInt_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinInt_nullArray() {\n        NumberUtils.min((int[]) null);\n    }\n",
        "begin_line": 379,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 381,col 9)-(line 381,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinInt_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinInt_emptyArray() {\n        NumberUtils.min(new int[0]);\n    }\n",
        "begin_line": 384,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinInt()",
        "snippet": "    @Test\n    public void testMinInt() {\n        assertEquals(\n            \"min(int[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new int[] { 5 }));\n\n        assertEquals(\n            \"min(int[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new int[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 389,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 391,col 9)-(line 394,col 46)",
            "(line 396,col 9)-(line 399,col 49)",
            "(line 401,col 9)-(line 401,col 76)",
            "(line 402,col 9)-(line 402,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinShort_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinShort_nullArray() {\n        NumberUtils.min((short[]) null);\n    }\n",
        "begin_line": 405,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinShort_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinShort_emptyArray() {\n        NumberUtils.min(new short[0]);\n    }\n",
        "begin_line": 410,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinShort()",
        "snippet": "    @Test\n    public void testMinShort() {\n        assertEquals(\n            \"min(short[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new short[] { 5 }));\n\n        assertEquals(\n            \"min(short[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new short[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 415,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 417,col 9)-(line 420,col 48)",
            "(line 422,col 9)-(line 425,col 51)",
            "(line 427,col 9)-(line 427,col 78)",
            "(line 428,col 9)-(line 428,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinByte_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinByte_nullArray() {\n        NumberUtils.min((byte[]) null);\n    }\n",
        "begin_line": 431,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 433,col 9)-(line 433,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinByte_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinByte_emptyArray() {\n        NumberUtils.min(new byte[0]);\n    }\n",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinByte()",
        "snippet": "    @Test\n    public void testMinByte() {\n        assertEquals(\n            \"min(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new byte[] { 5 }));\n\n        assertEquals(\n            \"min(byte[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new byte[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 441,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 443,col 9)-(line 446,col 47)",
            "(line 448,col 9)-(line 451,col 50)",
            "(line 453,col 9)-(line 453,col 77)",
            "(line 454,col 9)-(line 454,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinDouble_nullArray() {\n        NumberUtils.min((double[]) null);\n    }\n",
        "begin_line": 457,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 459,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinDouble_emptyArray() {\n        NumberUtils.min(new double[0]);\n    }\n",
        "begin_line": 462,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble()",
        "snippet": "    @Test\n    public void testMinDouble() {\n        assertEquals(\n            \"min(double[]) failed for array length 1\",\n            5.12,\n            NumberUtils.min(new double[] { 5.12 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 2\",\n            6.23,\n            NumberUtils.min(new double[] { 6.23, 9.34 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 5\",\n            -10.45,\n            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n            0);\n        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n    }\n",
        "begin_line": 467,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 469,col 9)-(line 473,col 15)",
            "(line 475,col 9)-(line 479,col 15)",
            "(line 481,col 9)-(line 485,col 15)",
            "(line 486,col 9)-(line 486,col 87)",
            "(line 487,col 9)-(line 487,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinFloat_nullArray() {\n        NumberUtils.min((float[]) null);\n    }\n",
        "begin_line": 490,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 492,col 9)-(line 492,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinFloat_emptyArray() {\n        NumberUtils.min(new float[0]);\n    }\n",
        "begin_line": 495,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 497,col 9)-(line 497,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat()",
        "snippet": "    @Test\n    public void testMinFloat() {\n        assertEquals(\n            \"min(float[]) failed for array length 1\",\n            5.9f,\n            NumberUtils.min(new float[] { 5.9f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 2\",\n            6.8f,\n            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 5\",\n            -10.6f,\n            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n            0);\n        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n    }\n",
        "begin_line": 500,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 502,col 9)-(line 506,col 15)",
            "(line 508,col 9)-(line 512,col 15)",
            "(line 514,col 9)-(line 518,col 15)",
            "(line 519,col 9)-(line 519,col 87)",
            "(line 520,col 9)-(line 520,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxLong_nullArray() {\n        NumberUtils.max((long[]) null);\n    }\n",
        "begin_line": 523,
        "end_line": 526,
        "comment": "",
        "child_ranges": [
            "(line 525,col 9)-(line 525,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxLong_emptyArray() {\n        NumberUtils.max(new long[0]);\n    }\n",
        "begin_line": 528,
        "end_line": 531,
        "comment": "",
        "child_ranges": [
            "(line 530,col 9)-(line 530,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong()",
        "snippet": "    @Test\n    public void testMaxLong() {\n        assertEquals(\n            \"max(long[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new long[] { 5 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new long[] { 6, 9 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 533,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 535,col 9)-(line 538,col 47)",
            "(line 540,col 9)-(line 543,col 50)",
            "(line 545,col 9)-(line 548,col 63)",
            "(line 549,col 9)-(line 549,col 76)",
            "(line 550,col 9)-(line 550,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxInt_nullArray() {\n        NumberUtils.max((int[]) null);\n    }\n",
        "begin_line": 553,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxInt_emptyArray() {\n        NumberUtils.max(new int[0]);\n    }\n",
        "begin_line": 558,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt()",
        "snippet": "    @Test\n    public void testMaxInt() {\n        assertEquals(\n            \"max(int[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new int[] { 5 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new int[] { 6, 9 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 563,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 568,col 46)",
            "(line 570,col 9)-(line 573,col 49)",
            "(line 575,col 9)-(line 578,col 62)",
            "(line 579,col 9)-(line 579,col 75)",
            "(line 580,col 9)-(line 580,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxShort_nullArray() {\n        NumberUtils.max((short[]) null);\n    }\n",
        "begin_line": 583,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxShort_emptyArray() {\n        NumberUtils.max(new short[0]);\n    }\n",
        "begin_line": 588,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort()",
        "snippet": "    @Test\n    public void testMaxShort() {\n        assertEquals(\n            \"max(short[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new short[] { 5 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new short[] { 6, 9 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 593,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 595,col 9)-(line 598,col 48)",
            "(line 600,col 9)-(line 603,col 51)",
            "(line 605,col 9)-(line 608,col 64)",
            "(line 609,col 9)-(line 609,col 77)",
            "(line 610,col 9)-(line 610,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxByte_nullArray() {\n        NumberUtils.max((byte[]) null);\n    }\n",
        "begin_line": 613,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 615,col 9)-(line 615,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxByte_emptyArray() {\n        NumberUtils.max(new byte[0]);\n    }\n",
        "begin_line": 618,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 620,col 9)-(line 620,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte()",
        "snippet": "    @Test\n    public void testMaxByte() {\n        assertEquals(\n            \"max(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new byte[] { 5 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new byte[] { 6, 9 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 623,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 625,col 9)-(line 628,col 47)",
            "(line 630,col 9)-(line 633,col 50)",
            "(line 635,col 9)-(line 638,col 63)",
            "(line 639,col 9)-(line 639,col 76)",
            "(line 640,col 9)-(line 640,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxDouble_nullArray() {\n        NumberUtils.max((double[]) null);\n    }\n",
        "begin_line": 643,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 645,col 9)-(line 645,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxDouble_emptyArray() {\n        NumberUtils.max(new double[0]);\n    }\n",
        "begin_line": 648,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble()",
        "snippet": "    @Test\n    public void testMaxDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.max(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(double[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new double[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n    }\n",
        "begin_line": 653,
        "end_line": 685,
        "comment": "",
        "child_ranges": [
            "(line 655,col 9)-(line 655,col 32)",
            "(line 656,col 9)-(line 659,col 48)",
            "(line 661,col 9)-(line 664,col 48)",
            "(line 666,col 9)-(line 670,col 15)",
            "(line 672,col 9)-(line 676,col 15)",
            "(line 678,col 9)-(line 682,col 15)",
            "(line 683,col 9)-(line 683,col 86)",
            "(line 684,col 9)-(line 684,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxFloat_nullArray() {\n        NumberUtils.max((float[]) null);\n    }\n",
        "begin_line": 687,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 689,col 9)-(line 689,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxFloat_emptyArray() {\n        NumberUtils.max(new float[0]);\n    }\n",
        "begin_line": 692,
        "end_line": 695,
        "comment": "",
        "child_ranges": [
            "(line 694,col 9)-(line 694,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat()",
        "snippet": "    @Test\n    public void testMaxFloat() {\n        assertEquals(\n            \"max(float[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new float[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n    }\n",
        "begin_line": 697,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 699,col 9)-(line 703,col 15)",
            "(line 705,col 9)-(line 709,col 15)",
            "(line 711,col 9)-(line 715,col 15)",
            "(line 716,col 9)-(line 716,col 86)",
            "(line 717,col 9)-(line 717,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumLong()",
        "snippet": "    @Test\n    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n    }\n",
        "begin_line": 720,
        "end_line": 727,
        "comment": "",
        "child_ranges": [
            "(line 722,col 9)-(line 722,col 116)",
            "(line 723,col 9)-(line 723,col 115)",
            "(line 724,col 9)-(line 724,col 116)",
            "(line 725,col 9)-(line 725,col 111)",
            "(line 726,col 9)-(line 726,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumInt()",
        "snippet": "    @Test\n    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n    }\n",
        "begin_line": 729,
        "end_line": 736,
        "comment": "",
        "child_ranges": [
            "(line 731,col 9)-(line 731,col 107)",
            "(line 732,col 9)-(line 732,col 107)",
            "(line 733,col 9)-(line 733,col 107)",
            "(line 734,col 9)-(line 734,col 103)",
            "(line 735,col 9)-(line 735,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort()",
        "snippet": "    @Test\n    public void testMinimumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n",
        "begin_line": 738,
        "end_line": 747,
        "comment": "",
        "child_ranges": [
            "(line 740,col 9)-(line 740,col 25)",
            "(line 741,col 9)-(line 741,col 29)",
            "(line 742,col 9)-(line 742,col 30)",
            "(line 743,col 9)-(line 743,col 98)",
            "(line 744,col 9)-(line 744,col 98)",
            "(line 745,col 9)-(line 745,col 98)",
            "(line 746,col 9)-(line 746,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumByte()",
        "snippet": "    @Test\n    public void testMinimumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n",
        "begin_line": 749,
        "end_line": 758,
        "comment": "",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 23)",
            "(line 752,col 9)-(line 752,col 27)",
            "(line 753,col 9)-(line 753,col 28)",
            "(line 754,col 9)-(line 754,col 95)",
            "(line 755,col 9)-(line 755,col 95)",
            "(line 756,col 9)-(line 756,col 95)",
            "(line 757,col 9)-(line 757,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumDouble()",
        "snippet": "    @Test\n    public void testMinimumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n    }\n",
        "begin_line": 760,
        "end_line": 770,
        "comment": "",
        "child_ranges": [
            "(line 762,col 9)-(line 762,col 26)",
            "(line 763,col 9)-(line 763,col 30)",
            "(line 764,col 9)-(line 764,col 31)",
            "(line 765,col 9)-(line 765,col 67)",
            "(line 766,col 9)-(line 766,col 67)",
            "(line 767,col 9)-(line 767,col 67)",
            "(line 768,col 9)-(line 768,col 66)",
            "(line 769,col 9)-(line 769,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumFloat()",
        "snippet": "    @Test\n    public void testMinimumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n    }\n",
        "begin_line": 772,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 774,col 9)-(line 774,col 26)",
            "(line 775,col 9)-(line 775,col 30)",
            "(line 776,col 9)-(line 776,col 31)",
            "(line 777,col 9)-(line 777,col 68)",
            "(line 778,col 9)-(line 778,col 68)",
            "(line 779,col 9)-(line 779,col 68)",
            "(line 780,col 9)-(line 780,col 67)",
            "(line 781,col 9)-(line 781,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumLong()",
        "snippet": "    @Test\n    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n    }\n",
        "begin_line": 784,
        "end_line": 791,
        "comment": "",
        "child_ranges": [
            "(line 786,col 9)-(line 786,col 116)",
            "(line 787,col 9)-(line 787,col 116)",
            "(line 788,col 9)-(line 788,col 116)",
            "(line 789,col 9)-(line 789,col 111)",
            "(line 790,col 9)-(line 790,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumInt()",
        "snippet": "    @Test\n    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n    }\n",
        "begin_line": 793,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 795,col 9)-(line 795,col 107)",
            "(line 796,col 9)-(line 796,col 107)",
            "(line 797,col 9)-(line 797,col 107)",
            "(line 798,col 9)-(line 798,col 103)",
            "(line 799,col 9)-(line 799,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumShort()",
        "snippet": "    @Test\n    public void testMaximumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n",
        "begin_line": 802,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 804,col 9)-(line 804,col 25)",
            "(line 805,col 9)-(line 805,col 29)",
            "(line 806,col 9)-(line 806,col 30)",
            "(line 807,col 9)-(line 807,col 99)",
            "(line 808,col 9)-(line 808,col 99)",
            "(line 809,col 9)-(line 809,col 99)",
            "(line 810,col 9)-(line 810,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumByte()",
        "snippet": "    @Test\n    public void testMaximumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n",
        "begin_line": 813,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 815,col 9)-(line 815,col 23)",
            "(line 816,col 9)-(line 816,col 27)",
            "(line 817,col 9)-(line 817,col 28)",
            "(line 818,col 9)-(line 818,col 96)",
            "(line 819,col 9)-(line 819,col 96)",
            "(line 820,col 9)-(line 820,col 96)",
            "(line 821,col 9)-(line 821,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumDouble()",
        "snippet": "    @Test\n    public void testMaximumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n    }\n",
        "begin_line": 824,
        "end_line": 834,
        "comment": "",
        "child_ranges": [
            "(line 826,col 9)-(line 826,col 26)",
            "(line 827,col 9)-(line 827,col 30)",
            "(line 828,col 9)-(line 828,col 31)",
            "(line 829,col 9)-(line 829,col 68)",
            "(line 830,col 9)-(line 830,col 68)",
            "(line 831,col 9)-(line 831,col 68)",
            "(line 832,col 9)-(line 832,col 66)",
            "(line 833,col 9)-(line 833,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumFloat()",
        "snippet": "    @Test\n    public void testMaximumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n    }\n",
        "begin_line": 836,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 838,col 9)-(line 838,col 26)",
            "(line 839,col 9)-(line 839,col 30)",
            "(line 840,col 9)-(line 840,col 31)",
            "(line 841,col 9)-(line 841,col 69)",
            "(line 842,col 9)-(line 842,col 69)",
            "(line 843,col 9)-(line 843,col 69)",
            "(line 844,col 9)-(line 844,col 67)",
            "(line 845,col 9)-(line 845,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCompareDouble()",
        "snippet": "    @Test\n    public void testCompareDouble() {\n        assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(1.2d, 1.2d) == 0);\n        assertTrue(Double.compare(1.2d, 0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -1.2d) == +1);\n        assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(0.0d, 0.0d) == 0);\n        assertTrue(Double.compare(0.0d, -0.0d) == +1);\n        assertTrue(Double.compare(0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(-0.0d, 0.0d) == -1);\n        assertTrue(Double.compare(-0.0d, -0.0d) == 0);\n        assertTrue(Double.compare(-0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-1.2d, 1.2d) == -1);\n        assertTrue(Double.compare(-1.2d, 0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -1.2d) == 0);\n        assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 849,
        "end_line": 940,
        "comment": " Testing JDK against old Lang functionality",
        "child_ranges": [
            "(line 851,col 9)-(line 851,col 64)",
            "(line 852,col 9)-(line 852,col 79)",
            "(line 853,col 9)-(line 853,col 71)",
            "(line 854,col 9)-(line 854,col 59)",
            "(line 855,col 9)-(line 855,col 59)",
            "(line 856,col 9)-(line 856,col 60)",
            "(line 857,col 9)-(line 857,col 60)",
            "(line 858,col 9)-(line 858,col 72)",
            "(line 859,col 9)-(line 859,col 79)",
            "(line 861,col 9)-(line 861,col 79)",
            "(line 862,col 9)-(line 862,col 92)",
            "(line 863,col 9)-(line 863,col 85)",
            "(line 864,col 9)-(line 864,col 73)",
            "(line 865,col 9)-(line 865,col 73)",
            "(line 866,col 9)-(line 866,col 74)",
            "(line 867,col 9)-(line 867,col 74)",
            "(line 868,col 9)-(line 868,col 86)",
            "(line 869,col 9)-(line 869,col 93)",
            "(line 871,col 9)-(line 871,col 71)",
            "(line 872,col 9)-(line 872,col 85)",
            "(line 873,col 9)-(line 873,col 76)",
            "(line 874,col 9)-(line 874,col 65)",
            "(line 875,col 9)-(line 875,col 65)",
            "(line 876,col 9)-(line 876,col 66)",
            "(line 877,col 9)-(line 877,col 66)",
            "(line 878,col 9)-(line 878,col 78)",
            "(line 879,col 9)-(line 879,col 85)",
            "(line 881,col 9)-(line 881,col 59)",
            "(line 882,col 9)-(line 882,col 73)",
            "(line 883,col 9)-(line 883,col 65)",
            "(line 884,col 9)-(line 884,col 52)",
            "(line 885,col 9)-(line 885,col 53)",
            "(line 886,col 9)-(line 886,col 54)",
            "(line 887,col 9)-(line 887,col 54)",
            "(line 888,col 9)-(line 888,col 66)",
            "(line 889,col 9)-(line 889,col 73)",
            "(line 891,col 9)-(line 891,col 59)",
            "(line 892,col 9)-(line 892,col 73)",
            "(line 893,col 9)-(line 893,col 65)",
            "(line 894,col 9)-(line 894,col 53)",
            "(line 895,col 9)-(line 895,col 52)",
            "(line 896,col 9)-(line 896,col 54)",
            "(line 897,col 9)-(line 897,col 54)",
            "(line 898,col 9)-(line 898,col 66)",
            "(line 899,col 9)-(line 899,col 73)",
            "(line 901,col 9)-(line 901,col 60)",
            "(line 902,col 9)-(line 902,col 74)",
            "(line 903,col 9)-(line 903,col 66)",
            "(line 904,col 9)-(line 904,col 54)",
            "(line 905,col 9)-(line 905,col 54)",
            "(line 906,col 9)-(line 906,col 54)",
            "(line 907,col 9)-(line 907,col 55)",
            "(line 908,col 9)-(line 908,col 67)",
            "(line 909,col 9)-(line 909,col 74)",
            "(line 911,col 9)-(line 911,col 60)",
            "(line 912,col 9)-(line 912,col 74)",
            "(line 913,col 9)-(line 913,col 66)",
            "(line 914,col 9)-(line 914,col 54)",
            "(line 915,col 9)-(line 915,col 54)",
            "(line 916,col 9)-(line 916,col 55)",
            "(line 917,col 9)-(line 917,col 54)",
            "(line 918,col 9)-(line 918,col 67)",
            "(line 919,col 9)-(line 919,col 74)",
            "(line 921,col 9)-(line 921,col 72)",
            "(line 922,col 9)-(line 922,col 86)",
            "(line 923,col 9)-(line 923,col 78)",
            "(line 924,col 9)-(line 924,col 66)",
            "(line 925,col 9)-(line 925,col 66)",
            "(line 926,col 9)-(line 926,col 67)",
            "(line 927,col 9)-(line 927,col 67)",
            "(line 928,col 9)-(line 928,col 78)",
            "(line 929,col 9)-(line 929,col 86)",
            "(line 931,col 9)-(line 931,col 79)",
            "(line 932,col 9)-(line 932,col 93)",
            "(line 933,col 9)-(line 933,col 85)",
            "(line 934,col 9)-(line 934,col 73)",
            "(line 935,col 9)-(line 935,col 73)",
            "(line 936,col 9)-(line 936,col 74)",
            "(line 937,col 9)-(line 937,col 74)",
            "(line 938,col 9)-(line 938,col 86)",
            "(line 939,col 9)-(line 939,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCompareFloat()",
        "snippet": "    @Test\n    public void testCompareFloat() {\n        assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(1.2f, 1.2f) == 0);\n        assertTrue(Float.compare(1.2f, 0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -1.2f) == +1);\n        assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(0.0f, 0.0f) == 0);\n        assertTrue(Float.compare(0.0f, -0.0f) == +1);\n        assertTrue(Float.compare(0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(-0.0f, 0.0f) == -1);\n        assertTrue(Float.compare(-0.0f, -0.0f) == 0);\n        assertTrue(Float.compare(-0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-1.2f, 1.2f) == -1);\n        assertTrue(Float.compare(-1.2f, 0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -1.2f) == 0);\n        assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 942,
        "end_line": 1033,
        "comment": "",
        "child_ranges": [
            "(line 944,col 9)-(line 944,col 61)",
            "(line 945,col 9)-(line 945,col 76)",
            "(line 946,col 9)-(line 946,col 68)",
            "(line 947,col 9)-(line 947,col 57)",
            "(line 948,col 9)-(line 948,col 57)",
            "(line 949,col 9)-(line 949,col 58)",
            "(line 950,col 9)-(line 950,col 58)",
            "(line 951,col 9)-(line 951,col 69)",
            "(line 952,col 9)-(line 952,col 76)",
            "(line 954,col 9)-(line 954,col 76)",
            "(line 955,col 9)-(line 955,col 89)",
            "(line 956,col 9)-(line 956,col 82)",
            "(line 957,col 9)-(line 957,col 71)",
            "(line 958,col 9)-(line 958,col 71)",
            "(line 959,col 9)-(line 959,col 72)",
            "(line 960,col 9)-(line 960,col 72)",
            "(line 961,col 9)-(line 961,col 83)",
            "(line 962,col 9)-(line 962,col 90)",
            "(line 964,col 9)-(line 964,col 68)",
            "(line 965,col 9)-(line 965,col 82)",
            "(line 966,col 9)-(line 966,col 73)",
            "(line 967,col 9)-(line 967,col 63)",
            "(line 968,col 9)-(line 968,col 63)",
            "(line 969,col 9)-(line 969,col 64)",
            "(line 970,col 9)-(line 970,col 64)",
            "(line 971,col 9)-(line 971,col 75)",
            "(line 972,col 9)-(line 972,col 82)",
            "(line 974,col 9)-(line 974,col 57)",
            "(line 975,col 9)-(line 975,col 71)",
            "(line 976,col 9)-(line 976,col 63)",
            "(line 977,col 9)-(line 977,col 51)",
            "(line 978,col 9)-(line 978,col 52)",
            "(line 979,col 9)-(line 979,col 53)",
            "(line 980,col 9)-(line 980,col 53)",
            "(line 981,col 9)-(line 981,col 64)",
            "(line 982,col 9)-(line 982,col 71)",
            "(line 984,col 9)-(line 984,col 57)",
            "(line 985,col 9)-(line 985,col 71)",
            "(line 986,col 9)-(line 986,col 63)",
            "(line 987,col 9)-(line 987,col 52)",
            "(line 988,col 9)-(line 988,col 51)",
            "(line 989,col 9)-(line 989,col 53)",
            "(line 990,col 9)-(line 990,col 53)",
            "(line 991,col 9)-(line 991,col 64)",
            "(line 992,col 9)-(line 992,col 71)",
            "(line 994,col 9)-(line 994,col 58)",
            "(line 995,col 9)-(line 995,col 72)",
            "(line 996,col 9)-(line 996,col 64)",
            "(line 997,col 9)-(line 997,col 53)",
            "(line 998,col 9)-(line 998,col 53)",
            "(line 999,col 9)-(line 999,col 53)",
            "(line 1000,col 9)-(line 1000,col 54)",
            "(line 1001,col 9)-(line 1001,col 65)",
            "(line 1002,col 9)-(line 1002,col 72)",
            "(line 1004,col 9)-(line 1004,col 58)",
            "(line 1005,col 9)-(line 1005,col 72)",
            "(line 1006,col 9)-(line 1006,col 64)",
            "(line 1007,col 9)-(line 1007,col 53)",
            "(line 1008,col 9)-(line 1008,col 53)",
            "(line 1009,col 9)-(line 1009,col 54)",
            "(line 1010,col 9)-(line 1010,col 53)",
            "(line 1011,col 9)-(line 1011,col 65)",
            "(line 1012,col 9)-(line 1012,col 72)",
            "(line 1014,col 9)-(line 1014,col 69)",
            "(line 1015,col 9)-(line 1015,col 83)",
            "(line 1016,col 9)-(line 1016,col 75)",
            "(line 1017,col 9)-(line 1017,col 64)",
            "(line 1018,col 9)-(line 1018,col 64)",
            "(line 1019,col 9)-(line 1019,col 65)",
            "(line 1020,col 9)-(line 1020,col 65)",
            "(line 1021,col 9)-(line 1021,col 75)",
            "(line 1022,col 9)-(line 1022,col 83)",
            "(line 1024,col 9)-(line 1024,col 76)",
            "(line 1025,col 9)-(line 1025,col 90)",
            "(line 1026,col 9)-(line 1026,col 82)",
            "(line 1027,col 9)-(line 1027,col 71)",
            "(line 1028,col 9)-(line 1028,col 71)",
            "(line 1029,col 9)-(line 1029,col 72)",
            "(line 1030,col 9)-(line 1030,col 72)",
            "(line 1031,col 9)-(line 1031,col 83)",
            "(line 1032,col 9)-(line 1032,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testIsDigits()",
        "snippet": "    @Test\n    public void testIsDigits() {\n        assertFalse(\"isDigits(null) failed\", NumberUtils.isDigits(null));\n        assertFalse(\"isDigits('') failed\", NumberUtils.isDigits(\"\"));\n        assertTrue(\"isDigits(String) failed\", NumberUtils.isDigits(\"12345\"));\n        assertFalse(\"isDigits(String) neg 1 failed\", NumberUtils.isDigits(\"1234.5\"));\n        assertFalse(\"isDigits(String) neg 3 failed\", NumberUtils.isDigits(\"1ab\"));\n        assertFalse(\"isDigits(String) neg 4 failed\", NumberUtils.isDigits(\"abc\"));\n    }\n",
        "begin_line": 1035,
        "end_line": 1043,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 9)-(line 1037,col 73)",
            "(line 1038,col 9)-(line 1038,col 69)",
            "(line 1039,col 9)-(line 1039,col 77)",
            "(line 1040,col 9)-(line 1040,col 85)",
            "(line 1041,col 9)-(line 1041,col 82)",
            "(line 1042,col 9)-(line 1042,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber()",
        "snippet": "    @Test\n    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val));\n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val));\n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val));\n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val));\n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val));\n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val));\n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val));\n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n\n        // LANG-521\n        val = \"2.\";\n        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n\n        // LANG-664\n        val = \"1.1L\";\n        assertFalse(\"isNumber(String) LANG-664 failed\", NumberUtils.isNumber(val));\n    }\n",
        "begin_line": 1049,
        "end_line": 1191,
        "comment": "\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     ",
        "child_ranges": [
            "(line 1051,col 9)-(line 1051,col 29)",
            "(line 1052,col 9)-(line 1052,col 75)",
            "(line 1053,col 9)-(line 1053,col 93)",
            "(line 1054,col 9)-(line 1054,col 23)",
            "(line 1055,col 9)-(line 1055,col 75)",
            "(line 1056,col 9)-(line 1056,col 93)",
            "(line 1057,col 9)-(line 1057,col 23)",
            "(line 1058,col 9)-(line 1058,col 75)",
            "(line 1059,col 9)-(line 1059,col 93)",
            "(line 1060,col 9)-(line 1060,col 23)",
            "(line 1061,col 9)-(line 1061,col 75)",
            "(line 1062,col 9)-(line 1062,col 93)",
            "(line 1063,col 9)-(line 1063,col 24)",
            "(line 1064,col 9)-(line 1064,col 75)",
            "(line 1065,col 9)-(line 1065,col 93)",
            "(line 1066,col 9)-(line 1066,col 24)",
            "(line 1067,col 9)-(line 1067,col 75)",
            "(line 1068,col 9)-(line 1068,col 93)",
            "(line 1069,col 9)-(line 1069,col 24)",
            "(line 1070,col 9)-(line 1070,col 75)",
            "(line 1071,col 9)-(line 1071,col 93)",
            "(line 1072,col 9)-(line 1072,col 22)",
            "(line 1073,col 9)-(line 1073,col 75)",
            "(line 1074,col 9)-(line 1074,col 93)",
            "(line 1075,col 9)-(line 1075,col 24)",
            "(line 1076,col 9)-(line 1076,col 75)",
            "(line 1077,col 9)-(line 1077,col 93)",
            "(line 1078,col 9)-(line 1078,col 24)",
            "(line 1079,col 9)-(line 1079,col 76)",
            "(line 1080,col 9)-(line 1080,col 94)",
            "(line 1081,col 9)-(line 1081,col 24)",
            "(line 1082,col 9)-(line 1082,col 76)",
            "(line 1083,col 9)-(line 1083,col 94)",
            "(line 1084,col 9)-(line 1084,col 18)",
            "(line 1085,col 9)-(line 1085,col 76)",
            "(line 1086,col 9)-(line 1086,col 94)",
            "(line 1087,col 9)-(line 1087,col 19)",
            "(line 1088,col 9)-(line 1088,col 76)",
            "(line 1089,col 9)-(line 1089,col 94)",
            "(line 1090,col 9)-(line 1090,col 22)",
            "(line 1091,col 9)-(line 1091,col 76)",
            "(line 1092,col 9)-(line 1092,col 94)",
            "(line 1093,col 9)-(line 1093,col 23)",
            "(line 1094,col 9)-(line 1094,col 76)",
            "(line 1095,col 9)-(line 1095,col 94)",
            "(line 1096,col 9)-(line 1096,col 25)",
            "(line 1097,col 9)-(line 1097,col 76)",
            "(line 1098,col 9)-(line 1098,col 94)",
            "(line 1099,col 9)-(line 1099,col 20)",
            "(line 1100,col 9)-(line 1100,col 76)",
            "(line 1101,col 9)-(line 1101,col 94)",
            "(line 1102,col 9)-(line 1102,col 26)",
            "(line 1103,col 9)-(line 1103,col 76)",
            "(line 1104,col 9)-(line 1104,col 94)",
            "(line 1105,col 9)-(line 1105,col 25)",
            "(line 1106,col 9)-(line 1106,col 76)",
            "(line 1107,col 9)-(line 1107,col 94)",
            "(line 1108,col 9)-(line 1108,col 23)",
            "(line 1109,col 9)-(line 1109,col 76)",
            "(line 1110,col 9)-(line 1110,col 94)",
            "(line 1111,col 9)-(line 1111,col 19)",
            "(line 1112,col 9)-(line 1112,col 80)",
            "(line 1113,col 9)-(line 1113,col 98)",
            "(line 1114,col 9)-(line 1114,col 17)",
            "(line 1115,col 9)-(line 1115,col 80)",
            "(line 1116,col 9)-(line 1116,col 98)",
            "(line 1117,col 9)-(line 1117,col 22)",
            "(line 1118,col 9)-(line 1118,col 80)",
            "(line 1119,col 9)-(line 1119,col 98)",
            "(line 1120,col 9)-(line 1120,col 22)",
            "(line 1121,col 9)-(line 1121,col 80)",
            "(line 1122,col 9)-(line 1122,col 98)",
            "(line 1123,col 9)-(line 1123,col 22)",
            "(line 1124,col 9)-(line 1124,col 80)",
            "(line 1125,col 9)-(line 1125,col 98)",
            "(line 1126,col 9)-(line 1126,col 27)",
            "(line 1127,col 9)-(line 1127,col 80)",
            "(line 1128,col 9)-(line 1128,col 98)",
            "(line 1129,col 9)-(line 1129,col 26)",
            "(line 1130,col 9)-(line 1130,col 80)",
            "(line 1131,col 9)-(line 1131,col 98)",
            "(line 1132,col 9)-(line 1132,col 21)",
            "(line 1133,col 9)-(line 1133,col 80)",
            "(line 1134,col 9)-(line 1134,col 98)",
            "(line 1135,col 9)-(line 1135,col 24)",
            "(line 1136,col 9)-(line 1136,col 80)",
            "(line 1137,col 9)-(line 1137,col 98)",
            "(line 1138,col 9)-(line 1138,col 18)",
            "(line 1139,col 9)-(line 1139,col 81)",
            "(line 1140,col 9)-(line 1140,col 99)",
            "(line 1141,col 9)-(line 1141,col 25)",
            "(line 1142,col 9)-(line 1142,col 81)",
            "(line 1143,col 9)-(line 1143,col 99)",
            "(line 1144,col 9)-(line 1144,col 25)",
            "(line 1145,col 9)-(line 1145,col 81)",
            "(line 1146,col 9)-(line 1146,col 99)",
            "(line 1147,col 9)-(line 1147,col 24)",
            "(line 1148,col 9)-(line 1148,col 81)",
            "(line 1149,col 9)-(line 1149,col 99)",
            "(line 1150,col 9)-(line 1150,col 24)",
            "(line 1151,col 9)-(line 1151,col 81)",
            "(line 1152,col 9)-(line 1152,col 99)",
            "(line 1153,col 9)-(line 1153,col 20)",
            "(line 1154,col 9)-(line 1154,col 81)",
            "(line 1155,col 9)-(line 1155,col 99)",
            "(line 1156,col 9)-(line 1156,col 19)",
            "(line 1157,col 9)-(line 1157,col 81)",
            "(line 1158,col 9)-(line 1158,col 99)",
            "(line 1159,col 9)-(line 1159,col 18)",
            "(line 1160,col 9)-(line 1160,col 81)",
            "(line 1161,col 9)-(line 1161,col 99)",
            "(line 1162,col 9)-(line 1162,col 20)",
            "(line 1163,col 9)-(line 1163,col 81)",
            "(line 1164,col 9)-(line 1164,col 99)",
            "(line 1165,col 9)-(line 1165,col 20)",
            "(line 1166,col 9)-(line 1166,col 81)",
            "(line 1167,col 9)-(line 1167,col 99)",
            "(line 1168,col 9)-(line 1168,col 22)",
            "(line 1169,col 9)-(line 1169,col 81)",
            "(line 1170,col 9)-(line 1170,col 99)",
            "(line 1171,col 9)-(line 1171,col 22)",
            "(line 1172,col 9)-(line 1172,col 81)",
            "(line 1173,col 9)-(line 1173,col 99)",
            "(line 1174,col 9)-(line 1174,col 22)",
            "(line 1175,col 9)-(line 1175,col 81)",
            "(line 1176,col 9)-(line 1176,col 99)",
            "(line 1177,col 9)-(line 1177,col 22)",
            "(line 1178,col 9)-(line 1178,col 81)",
            "(line 1179,col 9)-(line 1179,col 99)",
            "(line 1180,col 9)-(line 1180,col 22)",
            "(line 1181,col 9)-(line 1181,col 81)",
            "(line 1182,col 9)-(line 1182,col 99)",
            "(line 1185,col 9)-(line 1185,col 19)",
            "(line 1186,col 9)-(line 1186,col 82)",
            "(line 1189,col 9)-(line 1189,col 21)",
            "(line 1190,col 9)-(line 1190,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String)",
        "snippet": "    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }\n",
        "begin_line": 1193,
        "end_line": 1203,
        "comment": "",
        "child_ranges": [
            "(line 1194,col 9)-(line 1202,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testConstants()",
        "snippet": "    @SuppressWarnings(\"cast\") // suppress instanceof warning check\n    @Test\n    public void testConstants() {\n        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n\n        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n    }\n",
        "begin_line": 1205,
        "end_line": 1245,
        "comment": "",
        "child_ranges": [
            "(line 1208,col 9)-(line 1208,col 58)",
            "(line 1209,col 9)-(line 1209,col 57)",
            "(line 1210,col 9)-(line 1210,col 63)",
            "(line 1211,col 9)-(line 1211,col 64)",
            "(line 1212,col 9)-(line 1212,col 63)",
            "(line 1213,col 9)-(line 1213,col 69)",
            "(line 1214,col 9)-(line 1214,col 60)",
            "(line 1215,col 9)-(line 1215,col 59)",
            "(line 1216,col 9)-(line 1216,col 65)",
            "(line 1217,col 9)-(line 1217,col 58)",
            "(line 1218,col 9)-(line 1218,col 57)",
            "(line 1219,col 9)-(line 1219,col 63)",
            "(line 1220,col 9)-(line 1220,col 62)",
            "(line 1221,col 9)-(line 1221,col 61)",
            "(line 1222,col 9)-(line 1222,col 67)",
            "(line 1223,col 9)-(line 1223,col 60)",
            "(line 1224,col 9)-(line 1224,col 59)",
            "(line 1225,col 9)-(line 1225,col 65)",
            "(line 1227,col 9)-(line 1227,col 59)",
            "(line 1228,col 9)-(line 1228,col 58)",
            "(line 1229,col 9)-(line 1229,col 65)",
            "(line 1230,col 9)-(line 1230,col 61)",
            "(line 1231,col 9)-(line 1231,col 60)",
            "(line 1232,col 9)-(line 1232,col 67)",
            "(line 1233,col 9)-(line 1233,col 61)",
            "(line 1234,col 9)-(line 1234,col 60)",
            "(line 1235,col 9)-(line 1235,col 67)",
            "(line 1236,col 9)-(line 1236,col 59)",
            "(line 1237,col 9)-(line 1237,col 58)",
            "(line 1238,col 9)-(line 1238,col 65)",
            "(line 1239,col 9)-(line 1239,col 66)",
            "(line 1240,col 9)-(line 1240,col 65)",
            "(line 1241,col 9)-(line 1241,col 72)",
            "(line 1242,col 9)-(line 1242,col 64)",
            "(line 1243,col 9)-(line 1243,col 63)",
            "(line 1244,col 9)-(line 1244,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testLang300()",
        "snippet": "    @Test\n    public void testLang300() {\n        NumberUtils.createNumber(\"-1l\");\n        NumberUtils.createNumber(\"01l\");\n        NumberUtils.createNumber(\"1l\");\n    }\n",
        "begin_line": 1247,
        "end_line": 1252,
        "comment": "",
        "child_ranges": [
            "(line 1249,col 9)-(line 1249,col 40)",
            "(line 1250,col 9)-(line 1250,col 40)",
            "(line 1251,col 9)-(line 1251,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testLang381()",
        "snippet": "    @Test\n    public void testLang381() {\n        assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\n        assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));\n\n        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(a)));\n        assertTrue(Double.isNaN(NumberUtils.min(a)));\n\n        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(b)));\n        assertTrue(Double.isNaN(NumberUtils.min(b)));\n\n        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(aF)));\n\n        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(bF)));\n    }\n",
        "begin_line": 1254,
        "end_line": 1274,
        "comment": "",
        "child_ranges": [
            "(line 1256,col 9)-(line 1256,col 72)",
            "(line 1257,col 9)-(line 1257,col 72)",
            "(line 1258,col 9)-(line 1258,col 72)",
            "(line 1259,col 9)-(line 1259,col 72)",
            "(line 1261,col 9)-(line 1261,col 83)",
            "(line 1262,col 9)-(line 1262,col 53)",
            "(line 1263,col 9)-(line 1263,col 53)",
            "(line 1265,col 9)-(line 1265,col 95)",
            "(line 1266,col 9)-(line 1266,col 53)",
            "(line 1267,col 9)-(line 1267,col 53)",
            "(line 1269,col 9)-(line 1269,col 84)",
            "(line 1270,col 9)-(line 1270,col 53)",
            "(line 1272,col 9)-(line 1272,col 95)",
            "(line 1273,col 9)-(line 1273,col 53)"
        ]
    }
]