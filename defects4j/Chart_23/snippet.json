[
    {
        "name": "MinMaxCategoryRenderer.setDrawLines#168",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setDrawLines(boolean)",
        "snippet": "    public void setDrawLines(boolean draw) {\n        if (this.plotLines != draw) {\n            this.plotLines = draw;\n            this.notifyListeners(new RendererChangeEvent(this));\n        }\n        \n    }\n",
        "begin_line": 168,
        "end_line": 174,
        "comment": "\r\n     * Sets the flag that controls whether or not lines are drawn to connect\r\n     * the items within a series and sends a {@link RendererChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param draw  the new value of the flag.\r\n     * \r\n     * @see #isDrawLines()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.notifyListeners#2338",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.notifyListeners(org.jfree.chart.event.RendererChangeEvent)",
        "snippet": "    public void notifyListeners(RendererChangeEvent event) {\n        Object[] ls = this.listenerList.getListenerList();\n        for (int i = ls.length - 2; i >= 0; i -= 2) {\n            if (ls[i] == RendererChangeListener.class) {\n                ((RendererChangeListener) ls[i + 1]).rendererChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 2338,
        "end_line": 2345,
        "comment": "\r\n     * Notifies all registered listeners that the renderer has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "RendererChangeEvent.RendererChangeEvent#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/RendererChangeEvent.java",
        "class_name": "org.jfree.chart.event.RendererChangeEvent",
        "signature": "org.jfree.chart.event.RendererChangeEvent.RendererChangeEvent(java.lang.Object)",
        "snippet": "    public RendererChangeEvent(Object renderer) {\n        super(renderer);\n        this.renderer = renderer;\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Creates a new event.\r\n     *\r\n     * @param renderer  the renderer that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, \r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart, \n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 93,
        "end_line": 98,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextAnchor.equals#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof TextAnchor)) {\n            return false;\n        }\n\n        TextAnchor order = (TextAnchor) obj;\n        if (!this.name.equals(order.name)) {\n            return false;\n        }\n\n        return true;\n    }\n",
        "begin_line": 147,
        "end_line": 162,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelPosition.equals#175",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {  \n        if (obj == this) {\n            return true;\n        }    \n        if (!(obj instanceof ItemLabelPosition)) {\n            return false;\n        }\n        ItemLabelPosition that = (ItemLabelPosition) obj;\n        if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {\n            return false;\n        }\n        if (!this.textAnchor.equals(that.textAnchor)) {\n            return false;\n        }\n        if (!this.rotationAnchor.equals(that.rotationAnchor)) {\n            return false;\n        }\n        if (this.angle != that.angle) {\n            return false;\n        }     \n        return true;\n    }\n",
        "begin_line": 175,
        "end_line": 196,
        "comment": "\r\n     * Tests this object for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelAnchor.equals#190",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object o) {\n\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof ItemLabelAnchor)) {\n            return false;\n        }\n\n        ItemLabelAnchor order = (ItemLabelAnchor) o;\n        if (!this.name.equals(order.toString())) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 190,
        "end_line": 206,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param o  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrokeList.equals#103",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n        \n        if (obj == this) {\n            return true;\n        }\n        \n        if (obj instanceof StrokeList) {\n            return super.equals(obj);\n        }\n\n        return false;\n\n    }\n",
        "begin_line": 103,
        "end_line": 119,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "ShapeList.equals#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n        \n        if (obj == this) {\n            return true;\n        }\n        \n        if (obj instanceof ShapeList) {\n            return super.equals(obj);\n        }\n\n        return false;\n\n    }\n",
        "begin_line": 102,
        "end_line": 118,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintUtilities.equal#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintUtilities.java",
        "class_name": "org.jfree.chart.util.PaintUtilities",
        "signature": "org.jfree.chart.util.PaintUtilities.equal(java.awt.Paint, java.awt.Paint)",
        "snippet": "    public static boolean equal(Paint p1, Paint p2) {\n\n        // handle cases where either or both arguments are null\n        if (p1 == null) {\n            return (p2 == null);   \n        }\n        if (p2 == null) {\n            return false;   \n        }\n        \n        boolean result = false;\n        // handle GradientPaint as a special case...\n        if (p1 instanceof GradientPaint && p2 instanceof GradientPaint) {\n            GradientPaint gp1 = (GradientPaint) p1;\n            GradientPaint gp2 = (GradientPaint) p2;\n            result = gp1.getColor1().equals(gp2.getColor1()) \n                && gp1.getColor2().equals(gp2.getColor2())\n                && gp1.getPoint1().equals(gp2.getPoint1())    \n                && gp1.getPoint2().equals(gp2.getPoint2())\n                && gp1.isCyclic() == gp2.isCyclic()\n                && gp1.getTransparency() == gp1.getTransparency(); \n        }\n        else {\n            result = p1.equals(p2);\n        }\n        return result;\n\n    }\n",
        "begin_line": 75,
        "end_line": 102,
        "comment": "\n     * Returns <code>true</code> if the two <code>Paint</code> objects are equal \n     * OR both <code>null</code>.  This method handles\n     * <code>GradientPaint</code> as a special case.\n     *\n     * @param p1  paint 1 (<code>null</code> permitted).\n     * @param p2  paint 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintList.equals#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;\n        }\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof PaintList) {\n            PaintList that = (PaintList) obj;\n            int listSize = size();\n            for (int i = 0; i < listSize; i++) {\n               if (!PaintUtilities.equal(getPaint(i), that.getPaint(i))) {\n                   return false;\n               }\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 93,
        "end_line": 110,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectUtilities.equal#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.equal(java.lang.Object, java.lang.Object)",
        "snippet": "    public static boolean equal(final Object o1, final Object o2) {\n        if (o1 == o2) {\n            return true;\n        }\n        if (o1 != null) {\n            return o1.equals(o2);\n        }\n        else {\n            return false;\n        }\n    }\n",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n     * Returns <code>true</code> if the two objects are equal OR both \n     * <code>null</code>.\n     *\n     * @param o1 object 1 (<code>null</code> permitted).\n     * @param o2 object 2 (<code>null</code> permitted).\n     * @return <code>true</code> or <code>false</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanList.equals#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof BooleanList) {\n            return super.equals(obj);\n        }\n        return false;\n    }\n",
        "begin_line": 94,
        "end_line": 99,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.equals#176",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n\n        if (obj == this) {\n            return true;\n        }\n\n        if (!(obj instanceof AbstractObjectList)) {\n            return false;\n        }\n\n        AbstractObjectList other = (AbstractObjectList) obj;\n        int listSize = size();\n        for (int i = 0; i < listSize; i++) {\n           if (!ObjectUtilities.equal(get(i), other.get(i))) {\n               return false;\n           }\n        }\n        return true;\n    }\n",
        "begin_line": 176,
        "end_line": 198,
        "comment": "\n     * Tests this list for equality with another object.\n     *\n     * @param obj  the object to test.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryItemRenderer.equals#1289",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractCategoryItemRenderer)) {\n            return false;\n        }\n        AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;\n\n        if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\n                that.itemLabelGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseItemLabelGenerator,\n                that.baseItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGeneratorList,\n                that.toolTipGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseToolTipGenerator,\n                that.baseToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGeneratorList, \n                that.urlGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseURLGenerator,\n                that.baseURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemLabelGenerator,\n                that.legendItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,\n                that.legendItemToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemURLGenerator,\n                that.legendItemURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundAnnotations,\n                that.backgroundAnnotations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.foregroundAnnotations,\n                that.foregroundAnnotations)) {\n            return false;\n        }\n        return super.equals(obj);\n    }\n",
        "begin_line": 1289,
        "end_line": 1344,
        "comment": "\r\n     * Tests this renderer for equality with another object.\r\n     *\r\n     * @param obj  the object.\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.equals#2354",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;   \n        }\n        if (this.baseSeriesVisible != that.baseSeriesVisible) {\n            return false;   \n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;   \n        }\n        if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.basePaint, that.basePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseFillPaint, that.baseFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseOutlinePaint, \n                that.baseOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseStroke, that.baseStroke)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.outlineStrokeList, \n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.baseOutlineStroke, that.baseOutlineStroke)\n        ) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseShape, that.baseShape)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.itemLabelsVisibleList, \n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (this.baseItemLabelsVisible != that.baseItemLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.itemLabelFontList, \n                that.itemLabelFontList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseItemLabelFont, \n                that.baseItemLabelFont)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.itemLabelPaintList, \n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseItemLabelPaint, \n                that.baseItemLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.positiveItemLabelPositionList, \n                that.positiveItemLabelPositionList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.basePositiveItemLabelPosition, \n                that.basePositiveItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.negativeItemLabelPositionList, \n                that.negativeItemLabelPositionList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseNegativeItemLabelPosition, \n                that.baseNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.createEntitiesList, \n                that.createEntitiesList)) {\n            return false;   \n        }\n        if (this.baseCreateEntities != that.baseCreateEntities) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 2354,
        "end_line": 2466,
        "comment": "\r\n     * Tests this renderer for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.equals#140",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof StandardCategorySeriesLabelGenerator)) {\n            return false;\n        }\n        StandardCategorySeriesLabelGenerator that \n                = (StandardCategorySeriesLabelGenerator) obj;\n        if (!this.formatPattern.equals(that.formatPattern)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 140,
        "end_line": 153,
        "comment": "\r\n     * Tests this object for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the other object (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrokeList.StrokeList#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.StrokeList()",
        "snippet": "    public StrokeList() {\n        super();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ShapeList.ShapeList#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.ShapeList()",
        "snippet": "    public ShapeList() {\n        super();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintList.PaintList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.PaintList()",
        "snippet": "    public PaintList() {\n        super();\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectList.ObjectList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanList.BooleanList#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.BooleanList()",
        "snippet": "    public BooleanList() {\n    }\n",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     * \n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.size#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.size()",
        "snippet": "    public int size() {\n        return this.size;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextAnchor.TextAnchor#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "MinMaxCategoryRenderer.getIcon#486",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, boolean, boolean)",
        "snippet": "    private Icon getIcon(Shape shape, final boolean fill, \n            final boolean outline) {\n        final int width = shape.getBounds().width;\n        final int height = shape.getBounds().height;\n        final GeneralPath path = new GeneralPath(shape);\n        return new Icon() {\n            public void paintIcon(Component c, Graphics g, int x, int y) {\n                Graphics2D g2 = (Graphics2D) g;\n                path.transform(AffineTransform.getTranslateInstance(x, y));\n                if (fill) {\n                    g2.fill(path);\n                }\n                if (outline) {\n                    g2.draw(path);\n                }\n                path.transform(AffineTransform.getTranslateInstance(-x, -y));\n            }\n\n            public int getIconWidth() {\n                return width;\n            }\n\n            public int getIconHeight() {\n                return height;\n            }\n        };\n    }\n",
        "begin_line": 486,
        "end_line": 512,
        "comment": "\r\n     * Returns an icon from a shape.\r\n     *\r\n     * @param shape  the shape.\r\n     * @param fill  the fill flag.\r\n     * @param outline  the outline flag.\r\n     *\r\n     * @return The icon.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "MinMaxCategoryRenderer.getIcon#445",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, java.awt.Paint, java.awt.Paint)",
        "snippet": "    private Icon getIcon(Shape shape, final Paint fillPaint, \n                        final Paint outlinePaint) {\n\n      final int width = shape.getBounds().width;\n      final int height = shape.getBounds().height;\n      final GeneralPath path = new GeneralPath(shape);\n      return new Icon() {\n          public void paintIcon(Component c, Graphics g, int x, int y) {\n              Graphics2D g2 = (Graphics2D) g;\n              path.transform(AffineTransform.getTranslateInstance(x, y));\n              if (fillPaint != null) {\n                  g2.setPaint(fillPaint);\n                  g2.fill(path);\n              }\n              if (outlinePaint != null) {\n                  g2.setPaint(outlinePaint);\n                  g2.draw(path);\n              }\n              path.transform(AffineTransform.getTranslateInstance(-x, -y));\n        }\n\n        public int getIconWidth() {\n            return width;\n        }\n\n        public int getIconHeight() {\n            return height;\n        }\n\n      };\n    }\n",
        "begin_line": 445,
        "end_line": 475,
        "comment": "\r\n     * Returns an icon.\r\n     *\r\n     * @param shape  the shape.\r\n     * @param fillPaint  the fill paint.\r\n     * @param outlinePaint  the outline paint.\r\n     *\r\n     * @return The icon.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "MinMaxCategoryRenderer.MinMaxCategoryRenderer#143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.MinMaxCategoryRenderer()",
        "snippet": "    public MinMaxCategoryRenderer() {\n        super();\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryItemRenderer.AbstractCategoryItemRenderer#230",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.AbstractCategoryItemRenderer()",
        "snippet": "    protected AbstractCategoryItemRenderer() {\n        this.itemLabelGeneratorList = new ObjectList();\n        this.toolTipGeneratorList = new ObjectList();\n        this.urlGeneratorList = new ObjectList();\n        this.legendItemLabelGenerator\n                = new StandardCategorySeriesLabelGenerator();\n        this.backgroundAnnotations = new ArrayList();\n        this.foregroundAnnotations = new ArrayList();\n    }\n",
        "begin_line": 230,
        "end_line": 238,
        "comment": "\r\n     * Creates a new renderer with no tool tip generator and no URL generator.\r\n     * The defaults (no tool tip or URL generators) have been chosen to\r\n     * minimise the processing required to generate a default chart.  If you\r\n     * require tool tips or URLs, then you can easily add the required\r\n     * generators.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.AbstractRenderer#313",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.AbstractRenderer()",
        "snippet": "    public AbstractRenderer() {\n\n        this.seriesVisibleList = new BooleanList();\n        this.baseSeriesVisible = true;\n\n        this.seriesVisibleInLegendList = new BooleanList();\n        this.baseSeriesVisibleInLegend = true;\n\n        this.paintList = new PaintList();\n        this.basePaint = DEFAULT_PAINT;\n        this.autoPopulateSeriesPaint = true;\n\n        this.fillPaintList = new PaintList();\n        this.baseFillPaint = Color.white;\n        this.autoPopulateSeriesFillPaint = false;\n\n        this.outlinePaintList = new PaintList();\n        this.baseOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.autoPopulateSeriesOutlinePaint = false;\n\n        this.strokeList = new StrokeList();\n        this.baseStroke = DEFAULT_STROKE;\n        this.autoPopulateSeriesStroke = false;\n\n        this.outlineStrokeList = new StrokeList();\n        this.baseOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.autoPopulateSeriesOutlineStroke = false;\n\n        this.shapeList = new ShapeList();\n        this.baseShape = DEFAULT_SHAPE;\n        this.autoPopulateSeriesShape = true;\n\n        this.itemLabelsVisibleList = new BooleanList();\n        this.baseItemLabelsVisible = false;\n\n        this.itemLabelFontList = new ObjectList();\n        this.baseItemLabelFont = new Font(\"SansSerif\", Font.PLAIN, 10);\n\n        this.itemLabelPaintList = new PaintList();\n        this.baseItemLabelPaint = Color.black;\n\n        this.positiveItemLabelPositionList = new ObjectList();\n        this.basePositiveItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER);\n        \n        this.negativeItemLabelPositionList = new ObjectList();\n        this.baseNegativeItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER);\n\n        this.createEntitiesList = new BooleanList();\n        this.baseCreateEntities = true;\n        \n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 313,
        "end_line": 367,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator()",
        "snippet": "    public StandardCategorySeriesLabelGenerator() {\n        this(DEFAULT_LABEL_FORMAT);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Creates a default series label generator (uses \r\n     * {@link #DEFAULT_LABEL_FORMAT}).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator(java.lang.String)",
        "snippet": "    public StandardCategorySeriesLabelGenerator(String format) {\n        if (format == null) {\n            throw new IllegalArgumentException(\"Null 'format' argument.\");\n        }\n        this.formatPattern = format;\n    }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\r\n     * Creates a new series label generator.\r\n     * \r\n     * @param format  the format pattern (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor, \n                             TextAnchor textAnchor) {\n        this(itemLabelAnchor, textAnchor, TextAnchor.CENTER, 0.0);    \n    }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\r\n     * Creates a new position record (with zero rotation).\r\n     * \r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not \r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor, \n                             TextAnchor textAnchor,\n                             TextAnchor rotationAnchor,\n                             double angle) {\n              \n        if (itemLabelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'itemLabelAnchor' argument.\");\n        }\n        if (textAnchor == null) {\n            throw new IllegalArgumentException(\"Null 'textAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n        \n        this.itemLabelAnchor = itemLabelAnchor;\n        this.textAnchor = textAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n    \n    }\n",
        "begin_line": 108,
        "end_line": 130,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point \r\n     * relative to the data item (dot, bar or other visual item) on a chart.  \r\n     * The item label is aligned by aligning the text anchor with the \r\n     * item label anchor.\r\n     * \r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not \r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelAnchor.ItemLabelAnchor#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.ItemLabelAnchor(java.lang.String)",
        "snippet": "    private ItemLabelAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    }
]