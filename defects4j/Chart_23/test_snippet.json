[
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MinMaxCategoryRendererTests.class);\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.MinMaxCategoryRendererTests(java.lang.String)",
        "snippet": "    public MinMaxCategoryRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setDrawLines(true);\n        assertFalse(r1.equals(r2));\n        r2.setDrawLines(true);\n        assertTrue(r1.equals(r2));\n        \n        r1.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertFalse(r1.equals(r2));\n        r2.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, \n                Color.yellow));\n        assertTrue(r1.equals(r2));\n        \n        r1.setGroupStroke(new BasicStroke(1.2f));\n        assertFalse(r1.equals(r2));\n        r2.setGroupStroke(new BasicStroke(1.2f));\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 93,
        "end_line": 114,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 65)",
            "(line 95,col 9)-(line 95,col 65)",
            "(line 96,col 9)-(line 96,col 29)",
            "(line 98,col 9)-(line 98,col 30)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 103,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 105,col 35)",
            "(line 106,col 9)-(line 107,col 31)",
            "(line 108,col 9)-(line 108,col 34)",
            "(line 110,col 9)-(line 110,col 49)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 49)",
            "(line 113,col 9)-(line 113,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 119,
        "end_line": 126,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 65)",
            "(line 121,col 9)-(line 121,col 65)",
            "(line 122,col 9)-(line 122,col 34)",
            "(line 123,col 9)-(line 123,col 31)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = null;\n        try {\n            r2 = (MinMaxCategoryRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 131,
        "end_line": 143,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 65)",
            "(line 133,col 9)-(line 133,col 41)",
            "(line 134,col 9)-(line 139,col 9)",
            "(line 140,col 9)-(line 140,col 29)",
            "(line 141,col 9)-(line 141,col 51)",
            "(line 142,col 9)-(line 142,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (MinMaxCategoryRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 148,
        "end_line": 169,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 65)",
            "(line 151,col 9)-(line 151,col 41)",
            "(line 153,col 9)-(line 166,col 9)",
            "(line 167,col 9)-(line 167,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new MinMaxCategoryRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 175,
        "end_line": 193,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 32)",
            "(line 177,col 9)-(line 191,col 9)",
            "(line 192,col 9)-(line 192,col 28)"
        ]
    }
]