[
    {
        "name": "Node.propToString#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "    private static final String propToString(int propType) {\n        switch (propType) {\n            case LOCAL_BLOCK_PROP:   return \"local_block\";\n            case OBJECT_IDS_PROP:    return \"object_ids_prop\";\n            case CATCH_SCOPE_PROP:   return \"catch_scope_prop\";\n            case LABEL_ID_PROP:      return \"label_id_prop\";\n            case TARGET_PROP:        return \"target\";\n            case BREAK_PROP:         return \"break\";\n            case CONTINUE_PROP:      return \"continue\";\n            case ENUM_PROP:          return \"enum\";\n            case FUNCTION_PROP:      return \"function\";\n            case TEMP_PROP:          return \"temp\";\n            case LOCAL_PROP:         return \"local\";\n            case CODEOFFSET_PROP:    return \"codeoffset\";\n            case FIXUPS_PROP:        return \"fixups\";\n            case VARS_PROP:          return \"vars\";\n            case USES_PROP:          return \"uses\";\n            case REGEXP_PROP:        return \"regexp\";\n            case CASES_PROP:         return \"cases\";\n            case DEFAULT_PROP:       return \"default\";\n            case CASEARRAY_PROP:     return \"casearray\";\n            case SOURCENAME_PROP:    return \"sourcename\";\n            case TYPE_PROP:          return \"type\";\n            case SPECIAL_PROP_PROP:  return \"special_prop\";\n            case LABEL_PROP:         return \"label\";\n            case FINALLY_PROP:       return \"finally\";\n            case LOCALCOUNT_PROP:    return \"localcount\";\n\n            case TARGETBLOCK_PROP:   return \"targetblock\";\n            case VARIABLE_PROP:      return \"variable\";\n            case LASTUSE_PROP:       return \"lastuse\";\n            case ISNUMBER_PROP:      return \"isnumber\";\n            case DIRECTCALL_PROP:    return \"directcall\";\n\n            case SPECIALCALL_PROP:   return \"specialcall\";\n            case DEBUGSOURCE_PROP:   return \"debugsource\";\n\n            case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n            case SKIP_INDEXES_PROP:  return \"skip_indexes\";\n            case INCRDECR_PROP:      return \"incrdecr\";\n            case MEMBER_TYPE_PROP:   return \"member_type\";\n            case NAME_PROP:          return \"name\";\n            case PARENTHESIZED_PROP: return \"parenthesized\";\n            case QUOTED_PROP:        return \"quoted\";\n\n            case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n            case SOURCEFILE_PROP: return \"sourcefile\";\n            case EMPTY_BLOCK: return \"empty_block\";\n            case ORIGINALNAME_PROP: return \"originalname\";\n            case NO_SIDE_EFFECTS_CALL: return \"no_side_effects_call\";\n\n            case IS_CONSTANT_NAME:   return \"is_constant_name\";\n            case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n            case IS_VAR_ARGS_PARAM:  return \"is_var_args_param\";\n            case IS_NAMESPACE:         return \"is_namespace\";\n            case IS_DISPATCHER:        return \"is_dispatcher\";\n            default: Kit.codeBug();\n\n\n        }\n        return null;\n    }\n",
        "begin_line": 172,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.checkTreeEquals#1320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "    public String checkTreeEquals(Node node2) {\n        Pair<Node, Node> diff = checkTreeEqualsImpl(node2);\n        if (diff != null) {\n          return \"Node tree inequality:\" +\n              \"\\nTree1:\\n\" + toStringTree() +\n              \"\\n\\nTree2:\\n\" + node2.toStringTree();\n        }\n        return null;\n    }\n",
        "begin_line": 1320,
        "end_line": 1328,
        "comment": "\n     * Checks if the subtree under this node is the same as another subtree.\n     * Returns null if it's equal, or a message describing the differences.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeProp#731",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "    public void removeProp(int propType)\n    {\n        PropListItem x = propListHead;\n        if (x != null) {\n            PropListItem prev = null;\n            while (x.type != propType) {\n                prev = x;\n                x = x.next;\n                if (x == null) { return; }\n            }\n            if (prev == null) {\n                propListHead = x.next;\n            } else {\n                prev.next = x.next;\n            }\n        }\n    }\n",
        "begin_line": 731,
        "end_line": 747,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.toString#881",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "    private void toString(\n        StringBuilder sb,\n        boolean printSource,\n        boolean printAnnotations,\n        boolean printType)\n    {\n        if (Token.printTrees) {\n            sb.append(Token.name(type));\n            if (this instanceof StringNode) {\n                sb.append(' ');\n                sb.append(getString());\n            } else if (type == Token.FUNCTION) {\n                sb.append(' ');\n                sb.append(first.getString());\n            } else if (this instanceof ScriptOrFnNode) {\n                ScriptOrFnNode sof = (ScriptOrFnNode)this;\n                if (this instanceof FunctionNode) {\n                    FunctionNode fn = (FunctionNode)this;\n                    sb.append(' ');\n                    sb.append(fn.getFunctionName());\n                }\n                if (printSource) {\n                  sb.append(\" [source name: \");\n                  sb.append(sof.getSourceName());\n                  sb.append(\"] [encoded source length: \");\n                  sb.append(sof.getEncodedSourceEnd()\n                            - sof.getEncodedSourceStart());\n                  sb.append(\"] [base line: \");\n                  sb.append(sof.getBaseLineno());\n                  sb.append(\"] [end line: \");\n                  sb.append(sof.getEndLineno());\n                  sb.append(']');\n                }\n            } else if (type == Token.NUMBER) {\n                sb.append(' ');\n                sb.append(getDouble());\n            }\n            if (printSource) {\n              int lineno = getLineno();\n              if (lineno != -1) {\n                  sb.append(' ');\n                  sb.append(lineno);\n              }\n            }\n\n            if (printAnnotations) {\n              int[] keys = getSortedPropTypes();\n              for (int i = 0; i < keys.length; i++) {\n                  int type = keys[i];\n                  PropListItem x = lookupProperty(type);\n                  sb.append(\" [\");\n                  sb.append(propToString(type));\n                  sb.append(\": \");\n                  String value;\n                  switch (type) {\n                    case TARGETBLOCK_PROP : // can't add this as it recurses\n                      value = \"target block property\";\n                      break;\n                    case LOCAL_BLOCK_PROP :     // can't add this as it is dull\n                      value = \"last local block\";\n                      break;\n                    case ISNUMBER_PROP:\n                      switch (x.intValue) {\n                        case BOTH:\n                          value = \"both\";\n                          break;\n                        case RIGHT:\n                          value = \"right\";\n                          break;\n                        case LEFT:\n                          value = \"left\";\n                          break;\n                        default:\n                          throw Kit.codeBug();\n                      }\n                      break;\n                    case SPECIALCALL_PROP:\n                      switch (x.intValue) {\n                        case SPECIALCALL_EVAL:\n                          value = \"eval\";\n                          break;\n                        case SPECIALCALL_WITH:\n                          value = \"with\";\n                          break;\n                        default:\n                          // NON_SPECIALCALL should not be stored\n                          throw Kit.codeBug();\n                      }\n                      break;\n                    default :\n                      Object obj = x.objectValue;\n                      if (obj != null) {\n                          value = obj.toString();\n                      } else {\n                          value = String.valueOf(x.intValue);\n                      }\n                      break;\n                  }\n                  sb.append(value);\n                  sb.append(']');\n              }\n            }\n\n            if (printType) {\n              if (jsType != null) {\n                  String jsTypeString = jsType.toString();\n                  if (jsTypeString != null) {\n                      sb.append(\" : \");\n                      sb.append(jsTypeString);\n                  }\n              }\n            }\n        }\n    }\n",
        "begin_line": 881,
        "end_line": 994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.build#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.build(java.lang.String)",
        "snippet": "  public JSDocInfo build(String sourceName) {\n    if (populated) {\n      JSDocInfo built = currentInfo;\n      built.setSourceName(sourceName);\n      populateDefaults(built);\n      populated = false;\n      currentInfo = new JSDocInfo(this.parseDocumentation);\n      return built;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 107,
        "end_line": 118,
        "comment": "\n   * Builds a {@link JSDocInfo} object based on the populated information and\n   * returns it. Once this method is called, the builder can be reused to build\n   * another {@link JSDocInfo} object.\n   *\n   * @param sourceName The source file containing the JSDoc.\n   * @return a {@link JSDocInfo} object populated with the values given to this\n   *     builder. If no value was populated, this method simply returns\n   *     {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfoBuilder.recordBlockDescription#188",
        "is_bug": true,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordBlockDescription(java.lang.String)",
        "snippet": "  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n    populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n",
        "begin_line": 188,
        "end_line": 193,
        "comment": "\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.documentBlock#595",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.documentBlock(java.lang.String)",
        "snippet": "  boolean documentBlock(String description) {\n    if (!lazyInitDocumentation()) {\n      return true;\n    }\n\n    if (documentation.blockDescription != null) {\n      return false;\n    }\n\n    documentation.blockDescription = description;\n    return true;\n  }\n",
        "begin_line": 595,
        "end_line": 606,
        "comment": "\n   * Documents the block-level comment/description.\n   *\n   * @param description the description\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parse#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parse()",
        "snippet": "  boolean parse() {\n    int lineno;\n    int charno;\n\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n\n    state = State.SEARCHING_ANNOTATION;\n    JsDocToken token = next();\n\n    ExtractionInfo blockInfo = extractBlockComment(token);\n    token = blockInfo.token;\n\n    // If we have a block level comment, record it.\n    if (blockInfo.string.length() > 0) {\n      jsdocBuilder.recordBlockDescription(blockInfo.string);\n    }\n\n    // Parse the actual JsDoc.\n    retry: for (;;) {\n      switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            String annotationName = stream.getString();\n            Annotation annotation = annotationNames.get(annotationName);\n            if (annotation == null) {\n              parser.addWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              // Mark the beginning of the annotation.\n              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n              switch (annotation) {\n                case AUTHOR:\n                  ExtractionInfo authorInfo = extractSingleLineBlock();\n                  String author = authorInfo.string;\n\n                  if (author.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.authormissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    jsdocBuilder.addAuthor(author);\n                  }\n\n                  token = authorInfo.token;\n                  continue retry;\n\n                case CONSTANT:\n                  if (!jsdocBuilder.recordConstancy()) {\n                    parser.addWarning(\"msg.jsdoc.const\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTRUCTOR:\n                  if (!jsdocBuilder.recordConstructor()) {\n                    if (jsdocBuilder.isInterfaceRecorded()) {\n                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DEPRECATED:\n                  if (!jsdocBuilder.recordDeprecated()) {\n                    parser.addWarning(\"msg.jsdoc.deprecated\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  // Find the reason/description, if any.\n                  ExtractionInfo reasonInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String reason = reasonInfo.string;\n\n                  if (reason.length() > 0) {\n                    jsdocBuilder.recordDeprecationReason(reason);\n                  }\n\n                  token = reasonInfo.token;\n                  continue retry;\n\n                case INTERFACE:\n                  if (!jsdocBuilder.recordInterface()) {\n                    if (jsdocBuilder.isConstructorRecorded()) {\n                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DESC:\n                  if (jsdocBuilder.isDescriptionRecorded()) {\n                    parser.addWarning(\"msg.jsdoc.desc.extra\",\n                        stream.getLineno(), stream.getCharno());\n                    token = eatTokensUntilEOL();\n                    continue retry;\n                  } else {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    jsdocBuilder.recordDescription(description);\n                    token = descriptionInfo.token;\n                    continue retry;\n                  }\n\n                case FILE_OVERVIEW:\n                  ExtractionInfo fileOverviewInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.TRIM);\n\n                  String fileOverview = fileOverviewInfo.string;\n\n                  if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n                      fileOverviewJSDocInfo != null) {\n                    parser.addWarning(\"msg.jsdoc.fileoverview.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = fileOverviewInfo.token;\n                  continue retry;\n\n                case LICENSE:\n                case PRESERVE:\n                  ExtractionInfo preserveInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.PRESERVE);\n\n                  String preserve = preserveInfo.string;\n\n                  if (preserve.length() > 0) {\n                    if (fileLevelJsDocBuilder != null) {\n                      fileLevelJsDocBuilder.append(preserve);\n                    }\n                  }\n\n                  token = preserveInfo.token;\n                  continue retry;\n\n                case ENUM:\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  type = null;\n                  if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n                  }\n\n                  if (type == null) {\n                    type = createJSTypeExpression(newStringNode(\"number\"));\n                  }\n                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n                    parser.addWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case EXPORT:\n                  if (!jsdocBuilder.recordExport()) {\n                    parser.addWarning(\"msg.jsdoc.export\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTENDS:\n                case IMPLEMENTS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  boolean matchingRc = false;\n\n                  if (token == JsDocToken.LC) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (token == JsDocToken.STRING) {\n                    Node typeNode = parseAndRecordTypeNameNode(\n                        token, lineno, charno, matchingRc);\n\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && !matchingRc) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                    type = createJSTypeExpression(typeNode);\n\n                    if (annotation == Annotation.EXTENDS) {\n                      if (!jsdocBuilder.recordBaseType(type)) {\n                        parser.addWarning(\n                            \"msg.jsdoc.incompat.type\", lineno, charno);\n                      }\n                    } else {\n                      Preconditions.checkState(\n                          annotation == Annotation.IMPLEMENTS);\n                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n                        parser.addWarning(\"msg.jsdoc.implements.duplicate\",\n                            lineno, charno);\n                      }\n                    }\n                    token = next();\n                    if (matchingRc) {\n                      if (token != JsDocToken.RC) {\n                        parser.addWarning(\"msg.jsdoc.missing.rc\",\n                            stream.getLineno(), stream.getCharno());\n                      }\n                    } else if (token != JsDocToken.EOL &&\n                        token != JsDocToken.EOF && token != JsDocToken.EOC) {\n                      parser.addWarning(\"msg.end.annotation.expected\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addWarning(\"msg.no.type.name\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case HIDDEN:\n                  if (!jsdocBuilder.recordHiddenness()) {\n                    parser.addWarning(\"msg.jsdoc.hidden\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_ALIAS:\n                  if (!jsdocBuilder.recordNoAlias()) {\n                    parser.addWarning(\"msg.jsdoc.noalias\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_TYPE_CHECK:\n                  if (!jsdocBuilder.recordNoTypeCheck()) {\n                    parser.addWarning(\"msg.jsdoc.nocheck\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NOT_IMPLEMENTED:\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case INHERIT_DOC:\n                case OVERRIDE:\n                  if (!jsdocBuilder.recordOverride()) {\n                    parser.addWarning(\"msg.jsdoc.override\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case THROWS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                  }\n\n                  // *Update* the token to that after the type annotation.\n                  token = current();\n\n                  // Save the throw type.\n                  jsdocBuilder.recordThrowType(type);\n\n                  // Find the throw's description (if applicable).\n                  ExtractionInfo descriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String description = descriptionInfo.string;\n\n                  if (description.length() > 0) {\n                    jsdocBuilder.recordThrowDescription(type, description);\n                  }\n\n                  token = descriptionInfo.token;\n                  continue retry;\n\n                case PARAM:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordParamTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                    skipEOLs();\n                    token = next();\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n                  }\n\n                  String name = null;\n\n                  if (JsDocToken.STRING != token) {\n                    parser.addWarning(\"msg.missing.variable.name\",\n                        lineno, charno);\n                  } else {\n                    name = stream.getString();\n                    if (!jsdocBuilder.recordParameter(name, type)) {\n                      if (jsdocBuilder.hasParameter(name)) {\n                        parser.addWarning(\"msg.dup.variable.name\", name,\n                            lineno, charno);\n                      } else {\n                        parser.addWarning(\"msg.jsdoc.incompat.type\", name,\n                            lineno, charno);\n                      }\n                    }\n                  }\n\n                  if (name == null) {\n                    token = eatTokensUntilEOL(token);\n                    continue retry;\n                  }\n\n                  jsdocBuilder.markName(name, lineno, charno);\n\n                  // Find the parameter's description (if applicable).\n                  ExtractionInfo paramDescriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String paramDescription = paramDescriptionInfo.string;\n\n                  if (paramDescription.length() > 0) {\n                    jsdocBuilder.recordParameterDescription(name,\n                                                            paramDescription);\n                  }\n\n                  token = paramDescriptionInfo.token;\n                  continue retry;\n\n                case PRESERVE_TRY:\n                  if (!jsdocBuilder.recordPreserveTry()) {\n                    parser.addWarning(\"msg.jsdoc.preservertry\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PRIVATE:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                    parser.addWarning(\"msg.jsdoc.visibility.private\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PROTECTED:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                    parser.addWarning(\"msg.jsdoc.visibility.protected\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PUBLIC:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                    parser.addWarning(\"msg.jsdoc.visibility.public\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SHADOW:\n                  if (!jsdocBuilder.recordNoShadow()) {\n                    parser.addWarning(\"msg.jsdoc.noshadow\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SIDE_EFFECTS:\n                  if (!jsdocBuilder.recordNoSideEffects()) {\n                    parser.addWarning(\"msg.jsdoc.nosideeffects\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case IMPLICIT_CAST:\n                  if (!jsdocBuilder.recordImplicitCast()) {\n                    parser.addWarning(\"msg.jsdoc.implicitcast\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case SEE:\n                  ExtractionInfo referenceInfo = extractSingleLineBlock();\n                  String reference = referenceInfo.string;\n\n                  if (reference.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.seemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    jsdocBuilder.addReference(reference);\n                  }\n\n                  token = referenceInfo.token;\n                  continue retry;\n\n                case SUPPRESS:\n                  token = parseSuppressTag(next());\n                  continue retry;\n\n                case TEMPLATE:\n                  ExtractionInfo templateInfo = extractSingleLineBlock();\n                  String templateTypeName = templateInfo.string;\n\n                  if (templateTypeName.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.templatemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else if (!jsdocBuilder.recordTemplateTypeName(\n                      templateTypeName)) {\n                    parser.addWarning(\"msg.jsdoc.template.at.most.once\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  token = templateInfo.token;\n                  continue retry;\n\n                case VERSION:\n                  ExtractionInfo versionInfo = extractSingleLineBlock();\n                  String version = versionInfo.string;\n\n                  if (version.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.versionmissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    if (!jsdocBuilder.recordVersion(version)) {\n                       parser.addWarning(\"msg.jsdoc.extraversion\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n\n                  token = versionInfo.token;\n                  continue retry;\n\n                case DEFINE:\n                case RETURN:\n                case THIS:\n                case TYPE:\n                case TYPEDEF:\n                  skipEOLs();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  token = next();\n\n                  Node typeNode = parseAndRecordTypeNode(token, lineno, charno);\n\n                  if (annotation == Annotation.THIS) {\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && token != JsDocToken.LC) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                  }\n                  type = createJSTypeExpression(typeNode);\n\n                  if (type == null) {\n                    // error reported during recursive descent\n                    // recovering parsing\n                  } else {\n                    switch (annotation) {\n                      case DEFINE:\n                        if (!isValidDefineType(typeNode)) {\n                          parser.addWarning(\"msg.jsdoc.define.badtype\",\n                              lineno, charno);\n                        } else if (!jsdocBuilder.recordDefineType(type)) {\n                          parser.addWarning(\"msg.jsdoc.define\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case RETURN:\n                        if (!jsdocBuilder.recordReturnType(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                          break;\n                        }\n\n                        // *Update* the token to that after the type annotation.\n                        token = current();\n\n                        // Find the return's description (if applicable).\n                        ExtractionInfo returnDescriptionInfo =\n                            extractMultilineTextualBlock(token);\n\n                        String returnDescription = returnDescriptionInfo.string;\n\n                        if (returnDescription.length() > 0) {\n                          jsdocBuilder.recordReturnDescription(\n                              returnDescription);\n                        }\n\n                        token = returnDescriptionInfo.token;\n                        continue retry;\n\n                      case THIS:\n                        if (!jsdocBuilder.recordThisType(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPE:\n                        if (!jsdocBuilder.recordType(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPEDEF:\n                        if (!jsdocBuilder.recordTypedef(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n                    }\n\n                    token = eatTokensUntilEOL();\n                  }\n                  continue retry;\n              }\n            }\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          continue retry;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n            continue retry;\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n            continue retry;\n          }\n      }\n\n      // next token\n      token = next();\n    }\n  }\n",
        "begin_line": 237,
        "end_line": 843,
        "comment": "\n   * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n   * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n   * {@link JsDocToken#EOC} is returned.\n   *\n   * @return {@code true} if JSDoc information was correctly parsed,\n   *     {@code false} otherwise\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.toString#1015",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.toString(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private String toString(JsDocToken token) {\n    switch (token) {\n      case ANNOTATION:\n        return \"@\" + stream.getString();\n\n      case BANG:\n        return \"!\";\n\n      case COMMA:\n        return \",\";\n\n      case COLON:\n        return \":\";\n\n      case GT:\n        return \">\";\n\n      case LB:\n        return \"[\";\n\n      case LC:\n        return \"{\";\n\n      case LP:\n        return \"(\";\n\n      case LT:\n        return \".<\";\n\n      case QMARK:\n        return \"?\";\n\n      case PIPE:\n        return \"|\";\n\n      case RB:\n        return \"]\";\n\n      case RC:\n        return \"}\";\n\n      case RP:\n        return \")\";\n\n      case STAR:\n        return \"*\";\n\n      case ELLIPSIS:\n        return \"...\";\n\n      case EQUALS:\n        return \"=\";\n\n      case STRING:\n        return stream.getString();\n\n      default:\n        throw new IllegalStateException(token.toString());\n    }\n  }\n",
        "begin_line": 1015,
        "end_line": 1074,
        "comment": "\n   * Converts a JSDoc token to its string representation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.extractBlockComment#1267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractBlockComment(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private ExtractionInfo extractBlockComment(JsDocToken token) {\n    StringBuilder builder = new StringBuilder();\n\n    boolean ignoreStar = true;\n\n    do {\n      switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          return new ExtractionInfo(builder.toString().trim(), token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          ignoreStar = true;\n          builder.append('\\n');\n          token = next();\n          continue;\n\n        default:\n          if (!ignoreStar && builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          ignoreStar = false;\n\n          builder.append(toString(token));\n\n          String line = stream.getRemainingJSDocLine();\n          line = trimEnd(line);\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n",
        "begin_line": 1267,
        "end_line": 1312,
        "comment": "\n   * Extracts the top-level block comment from the JsDoc comment, if any.\n   * This method differs from the extractMultilineTextualBlock in that it\n   * terminates under different conditions (it doesn't have the same\n   * prechecks), it does not first read in the remaining of the current\n   * line and its conditions for ignoring the \"*\" (STAR) are different.\n   *\n   * @param token The starting token.\n   *\n   * @return The extraction information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.trimEnd#1324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(java.lang.String)",
        "snippet": "  private static String trimEnd(String s) {\n    int trimCount = 0;\n    while (trimCount < s.length()) {\n      char ch = s.charAt(s.length() - trimCount - 1);\n      if (Character.isWhitespace(ch)) {\n        trimCount++;\n      } else {\n        break;\n      }\n    }\n\n    if (trimCount == 0) {\n      return s;\n    }\n    return s.substring(0, s.length() - trimCount);\n  }\n",
        "begin_line": 1324,
        "end_line": 1339,
        "comment": "\n   * Trim characters from only the end of a string.\n   * This method will remove all whitespace characters\n   * (defined by Character.isWhitespace(char), in addition to the characters\n   * provided, from the end of the provided string.\n   *\n   * @param s String to be trimmed\n   * @return String with whitespace and characters in extraChars removed\n   *                   from the end.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.toString#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.toString()",
        "snippet": "  @Override\n  public String toString() {\n    // TODO(user): remove custom toString.\n    return type.key + \". \" + description + \" at \" +\n      (sourceName != null && sourceName.length() > 0 ?\n       sourceName : \"(unknown source)\") + \" line \" +\n      (lineNumber != -1 ? String.valueOf(lineNumber) : \"(unknown line)\");\n  }\n",
        "begin_line": 212,
        "end_line": 219,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptOrFnNode.getSourceName#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getSourceName()",
        "snippet": "    public final String getSourceName() { return sourceName; }\n",
        "begin_line": 54,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptOrFnNode.getEncodedSourceStart#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getEncodedSourceStart()",
        "snippet": "    public final int getEncodedSourceStart() { return encodedSourceStart; }\n",
        "begin_line": 60,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptOrFnNode.getEncodedSourceEnd#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getEncodedSourceEnd()",
        "snippet": "    public final int getEncodedSourceEnd() { return encodedSourceEnd; }\n",
        "begin_line": 62,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptOrFnNode.getBaseLineno#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getBaseLineno()",
        "snippet": "    public final int getBaseLineno() { return baseLineno; }\n",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScriptOrFnNode.getEndLineno#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getEndLineno()",
        "snippet": "    public final int getEndLineno() { return endLineno; }\n",
        "begin_line": 77,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getSortedPropTypes#795",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "    private int[] getSortedPropTypes() {\n        int count = 0;\n        for (PropListItem x = propListHead; x != null; x = x.next) {\n            count++;\n        }\n\n        int[] keys = new int[count];\n        for (PropListItem x = propListHead; x != null; x = x.next) {\n            count--;\n            keys[count] = x.type;\n        }\n\n        Arrays.sort(keys);\n        return keys;\n    }\n",
        "begin_line": 795,
        "end_line": 809,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toString#863",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "    @Override public String toString()\n    {\n       return toString(true, true, true);\n    }\n",
        "begin_line": 863,
        "end_line": 866,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toString#868",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "    public String toString(\n        boolean printSource,\n        boolean printAnnotations,\n        boolean printType)\n    {\n        if (Token.printTrees) {\n            StringBuilder sb = new StringBuilder();\n            toString(sb, printSource, printAnnotations, printType);\n            return sb.toString();\n        }\n        return String.valueOf(type);\n    }\n",
        "begin_line": 868,
        "end_line": 879,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toStringTree#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "    public String toStringTree() {\n        return toStringTreeImpl();\n    }\n",
        "begin_line": 997,
        "end_line": 999,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toStringTreeImpl#1001",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "    private String toStringTreeImpl() {\n        try {\n            StringBuffer s = new StringBuffer();\n            appendStringTree(s);\n            return s.toString();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Should not happen\\n\" + e);\n        }\n    }\n",
        "begin_line": 1001,
        "end_line": 1009,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.appendStringTree#1011",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "    public void appendStringTree(Appendable appendable) throws IOException {\n        toStringTreeHelper(this, 0, appendable);\n    }\n",
        "begin_line": 1011,
        "end_line": 1013,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toStringTreeHelper#1015",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "    private static void toStringTreeHelper(Node n, int level, Appendable sb)\n            throws IOException\n    {\n        if (Token.printTrees) {\n            for (int i = 0; i != level; ++i) {\n                sb.append(\"    \");\n            }\n            sb.append(n.toString());\n            sb.append('\\n');\n            for (Node cursor = n.getFirstChild(); cursor != null;\n                 cursor = cursor.getNext())\n            {\n                toStringTreeHelper(cursor, level + 1, sb);\n            }\n        }\n    }\n",
        "begin_line": 1015,
        "end_line": 1030,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.isSet#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Ref.isSet()",
        "snippet": "    boolean isSet() {\n      return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL;\n    }\n",
        "begin_line": 1039,
        "end_line": 1041,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3873
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.markTwins#1043",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Ref.markTwins(com.google.javascript.jscomp.GlobalNamespace.Ref, com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    static void markTwins(Ref a, Ref b) {\n      Preconditions.checkArgument(\n          (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) &&\n          (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL ||\n           b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL));\n      a.twin = b;\n      b.twin = a;\n    }\n",
        "begin_line": 1043,
        "end_line": 1050,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3638
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.handleSetFromGlobal#446",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleSetFromGlobal(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, boolean, com.google.javascript.jscomp.GlobalNamespace.Name.Type)",
        "snippet": "    void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name,\n                             boolean isPropAssign, Name.Type type) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      nameObj.type = type;\n\n      Ref set = new Ref(t, n, Ref.Type.SET_FROM_GLOBAL);\n      nameObj.addRef(set);\n\n      if (isNestedAssign(parent)) {\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      } else if (isConstructorOrEnumDeclaration(n, parent)) {\n        // Names with a @constructor or @enum annotation are always collapsed\n        nameObj.setIsClassOrEnum();\n      }\n    }\n",
        "begin_line": 446,
        "end_line": 465,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect an\n     * assignment to a global name in global scope.\n     *\n     * @param t The traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @param isPropAssign Whether this set corresponds to a property\n     *     assignment of the form <code>a.b.c = ...;</code>\n     * @param type The type of the value that the name is being assigned\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3638
        },
        "num_failing_tests": 3
    },
    {
        "name": "CheckSideEffects.visit#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.getType() == Token.EMPTY ||\n        n.getType() == Token.COMMA) {\n      return;\n    }\n\n    if (parent == null)\n      return;\n\n    int pt = parent.getType();\n    if (pt == Token.COMMA) {\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT &&\n              ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (pt != Token.EXPR_RESULT && pt != Token.BLOCK) {\n      if (pt == Token.FOR && parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext())) {\n        // Fall through and look for warnings for the 1st and 3rd child\n        // of a for.\n      } else {\n        return;  // it might be ok to not have a side-effect\n      }\n    }\n    if (NodeUtil.isSimpleOperatorType(n.getType()) ||\n        !NodeUtil.mayHaveSideEffects(n)) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        // This no-op statement was there so that JSDoc information could\n        // be attached to the name. This check should not complain about it.\n        return;\n      } else if (NodeUtil.isExpressionNode(n)) {\n        // we already reported the problem when we visited the child.\n        return;\n      }\n\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.getType() == Token.STRING) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      }\n\n      t.getCompiler().report(\n          JSError.make(t, n, level, USELESS_CODE_ERROR, msg));\n    }\n  }\n",
        "begin_line": 49,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "CollapseProperties.checkForHosedThisReferences#630",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.checkForHosedThisReferences(com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo, com.google.javascript.jscomp.GlobalNamespace.Name)",
        "snippet": "  private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,\n      final Name name) {\n    // A function is getting collapsed. Make sure that if it refers to\n    // \"this\", it must be a constructor or documented with @this.\n    if (docInfo == null ||\n        (!docInfo.isConstructor() && !docInfo.hasThisType())) {\n      NodeTraversal.traverse(compiler, function.getLastChild(),\n          new NodeTraversal.AbstractShallowCallback() {\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.getType() == Token.THIS) {\n                compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));\n              }\n            }\n          });\n    }\n  }\n",
        "begin_line": 630,
        "end_line": 647,
        "comment": "\n   * Warns about any references to \"this\" in the given FUNCTION. The function\n   * is getting collapsed, so the references will change.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2694
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.visit#638",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.Anonymous-61364918-ec03-4597-92e3-388d77f80eb9.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.getType() == Token.THIS) {\n                compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));\n              }\n            }\n",
        "begin_line": 638,
        "end_line": 644,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2694
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode#569",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(com.google.javascript.jscomp.GlobalNamespace.Name, java.lang.String)",
        "snippet": "  private void updateObjLitOrFunctionDeclarationAtAssignNode(\n      Name n, String alias) {\n    // NOTE: It's important that we don't add additional nodes\n    // (e.g. a var node before the exprstmt) because the exprstmt might be\n    // the child of an if statement that's not inside a block).\n\n    Ref ref = n.declaration;\n    Node rvalue = ref.node.getNext();\n    Node varNode = new Node(Token.VAR);\n    Node varParent = ref.node.getAncestor(3);\n    Node gramps = ref.node.getAncestor(2);\n    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;\n\n    if (isObjLit && n.canEliminate()) {\n      // Eliminate the object literal altogether.\n      varParent.replaceChild(gramps, varNode);\n      ref.node = null;\n\n    } else {\n      if (rvalue.getType() == Token.FUNCTION) {\n        checkForHosedThisReferences(rvalue, n.docInfo, n);\n      }\n\n      ref.node.getParent().removeChild(rvalue);\n\n      Node nameNode = NodeUtil.newName(\n          alias, ref.node.getAncestor(2), n.fullName());\n\n      if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {\n        nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n      }\n\n      varNode.addChildToBack(nameNode);\n      nameNode.addChildToFront(rvalue);\n      varParent.replaceChild(gramps, varNode);\n\n      // Update the node ancestry stored in the reference.\n      ref.node = nameNode;\n    }\n\n    if (isObjLit) {\n      boolean discardKeys = n.aliasingGets == 0;\n      declareVarsForObjLitValues(\n          alias, rvalue,\n          varNode, varParent.getChildBefore(varNode), varParent,\n          discardKeys);\n    }\n\n    addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n\n    if (!varNode.hasChildren()) {\n      varParent.removeChild(varNode);\n    }\n\n    compiler.reportCodeChange();\n  }\n",
        "begin_line": 569,
        "end_line": 624,
        "comment": "\n   * Updates the first initialization (a.k.a \"declaration\") of a global name\n   * that occurs at an ASSIGN node. See comment for\n   * {@link #updateObjLitOrFunctionDeclaration}.\n   *\n   * @param n An object representing a global name (e.g. \"a\", \"a.b.c\")\n   * @param alias The flattened name for {@code n} (e.g. \"a\", \"a$b$c\")\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2287
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.addRef#795",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addRef(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    void addRef(Ref ref) {\n      switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          } else {\n            addRefInternal(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          addRefInternal(ref);\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          addRefInternal(ref);\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          addRefInternal(ref);\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          addRefInternal(ref);\n          callGets++;\n          totalGets++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }\n    }\n",
        "begin_line": 795,
        "end_line": 828,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.21
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.updateObjLitOrFunctionDeclaration#547",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(com.google.javascript.jscomp.GlobalNamespace.Name, java.lang.String)",
        "snippet": "  private void updateObjLitOrFunctionDeclaration(Name n, String alias) {\n    switch (n.declaration.node.getParent().getType()) {\n      case Token.ASSIGN:\n        updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n        break;\n      case Token.VAR:\n        updateObjLitOrFunctionDeclarationAtVarNode(n);\n        break;\n      case Token.FUNCTION:\n        updateFunctionDeclarationAtFunctionNode(n);\n        break;\n    }\n  }\n",
        "begin_line": 547,
        "end_line": 559,
        "comment": "\n   * Updates the first initialization (a.k.a \"declaration\") of a global name.\n   * This involves flattening the global name (if it's not just a global\n   * variable name already), collapsing object literal keys into global\n   * variables, declaring stub global variables for properties added later\n   * in a local scope, and eliminating the global name entirely (if possible).\n   *\n   * @param n An object representing a global name (e.g. \"a\", \"a.b.c\")\n   * @param alias The flattened name for {@code n} (e.g. \"a\", \"a$b$c\")\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1953
        },
        "num_failing_tests": 3
    },
    {
        "name": "CheckSideEffects.CheckSideEffects#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.CheckSideEffects(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  CheckSideEffects(CheckLevel level) {\n    this.level = level;\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.handleGet#536",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleGet(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    void handleGet(NodeTraversal t, Node n, Node parent, String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Ref.Type type = Ref.Type.DIRECT_GET;\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.IF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            }\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }\n      }\n\n      handleGet(t, n, parent, name, type);\n    }\n",
        "begin_line": 536,
        "end_line": 583,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect a read\n     * of a global name.\n     *\n     * @param t The traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.checkForStateChangeHelper#352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null)\n          return true;\n\n        break;\n\n      case Token.FUNCTION:\n        // Anonymous functions don't have side-effects, but named ones\n        // change the namespace. Therefore, we check if the function has\n        // a name. Either way, we don't need to check the children, since\n        // they aren't executed at declaration time.\n        //\n        return !isFunctionAnonymous(n);\n\n      case Token.NEW:\n        {\n          if (checkForNewObjects) {\n            return true;\n          }\n\n          // calls to constructors that have no side effects have the\n          // no side effect property set.\n          if (n.isNoSideEffectsCall()) {\n            break;\n          }\n\n          // certain constructors are certified side effect free\n          Node constructor = n.getFirstChild();\n          if (Token.NAME == constructor.getType()) {\n            String className = constructor.getString();\n            if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {\n              // loop below will see if the constructor parameters have\n              // side-effects\n              break;\n            }\n          } else {\n            // the constructor could also be an expression like\n            // new (useArray ? Object : Array)();\n          }\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (n.isNoSideEffectsCall()) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType()))\n          break;\n\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 352,
        "end_line": 456,
        "comment": "\n   * Returns true if some node in n's subtree changes application state.\n   * If {@code checkForNewObjects} is true, we assume that newly created\n   * mutable objects (like object literals) change state. Otherwise, we assume\n   * that they have no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.getValueType#410",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.getValueType(com.google.javascript.rhino.Node)",
        "snippet": "    Name.Type getValueType(Node n) {\n      switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) return t;\n          Node third = second.getNext();\n          return getValueType(third);\n      }\n      return Name.Type.OTHER;\n    }\n",
        "begin_line": 410,
        "end_line": 432,
        "comment": "\n     * Gets the type of a value or simple expression.\n     *\n     * @param n An rvalue in an assignment or variable declaration (not null)\n     * @return A {@link Name.Type}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1698
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.isSimpleOperatorType#281",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(int)",
        "snippet": "  static boolean isSimpleOperatorType(int type) {\n    switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 281,
        "end_line": 317,
        "comment": "\n   * A \"simple\" operator is one whose children are expressions,\n   * has no direct side-effects (unlike '+='), and has no\n   * conditional aspects (unlike '||').\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.visit#234",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (nodeFilter != null && !nodeFilter.apply(n)) {\n        return;\n      }\n\n      // If we are traversing the externs, then we save a pointer to the scope\n      // generated by them, so that we can do lookups in it later.\n      if (externsRoot != null && n == externsRoot) {\n        externsScope = t.getScope();\n      }\n\n      String name;\n      boolean isSet = false;\n      Name.Type type = Name.Type.OTHER;\n      boolean isPropAssign = false;\n\n      switch (n.getType()) {\n        case Token.STRING:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.getType() == Token.OBJECTLIT) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) return;\n          isSet = true;\n          type = getValueType(n.getNext());\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionAnonymous(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.GETPROP:\n                return;\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) return;\n          break;\n        default:\n          return;\n      }\n\n      // We are only interested in global names.\n      Scope scope = t.getScope();\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(t, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(t, n, parent, name);\n        }\n      } else {\n        handleGet(t, n, parent, name);\n      }\n    }\n",
        "begin_line": 234,
        "end_line": 326,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback": null
        },
        "susp": {
            "ochiai_susp": 0.1617
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getAncestor#1231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getAncestor(int)",
        "snippet": "    public Node getAncestor(int level) {\n      Preconditions.checkArgument(level >= 0);\n      Node node = this;\n      while(node != null && level-- > 0) {\n        node = node.getParent();\n      }\n      return node;\n    }\n",
        "begin_line": 1231,
        "end_line": 1238,
        "comment": "\n     * Gets the ancestor node relative to this.\n     * @param level 0 = this, 1 = the parent, etc.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1539
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.transformTokenType#810",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n        return Token.EXPR_VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 810,
        "end_line": 1122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 4
    },
    {
        "name": "CollapseProperties.inlineAliases#162",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.inlineAliases(com.google.javascript.jscomp.GlobalNamespace)",
        "snippet": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.refs);\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c). Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }\n",
        "begin_line": 162,
        "end_line": 193,
        "comment": "\n   * For each qualified name N in the global scope, we check if:\n   * (a) No ancestor of N is ever aliased or assigned an unknown value type.\n   *     (If N = \"a.b.c\", \"a\" and \"a.b\" are never aliased).\n   * (b) N has exactly one write, and it lives in the global scope.\n   * (c) N is aliased in a local scope.\n   *\n   * If (a) is true, then GlobalNamespace must know all the writes to N.\n   * If (a) and (b) are true, then N cannot change during the execution of\n   *    a local scope.\n   * If (a) and (b) and (c) are true, then the alias can be inlined if the\n   *    alias obeys the usual rules for how we decide whether a variable is\n   *    inlineable.\n   * @see InlineVariables\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.15
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.updateObjLitOrFunctionDeclarationAtVarNode#656",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtVarNode(com.google.javascript.jscomp.GlobalNamespace.Name)",
        "snippet": "  private void updateObjLitOrFunctionDeclarationAtVarNode(Name n) {\n    Ref ref = n.declaration;\n    String name = ref.node.getString();\n    Node rvalue = ref.node.getFirstChild();\n    Node varNode = ref.node.getParent();\n    Node gramps = varNode.getParent();\n\n    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;\n    int numChanges = 0;\n\n    if (isObjLit) {\n      boolean discardKeys = n.aliasingGets == 0;\n      numChanges += declareVarsForObjLitValues(\n          name, rvalue, varNode, gramps.getChildBefore(varNode),\n          gramps, discardKeys);\n    }\n\n    numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);\n\n    if (isObjLit && n.canEliminate()) {\n      varNode.removeChild(ref.node);\n      if (!varNode.hasChildren()) {\n        gramps.removeChild(varNode);\n      }\n      numChanges++;\n\n      // Clear out the object reference, since we've eliminated it from the\n      // parse tree.\n      ref.node = null;\n    }\n\n    if (numChanges > 0) {\n      compiler.reportCodeChange();\n    }\n  }\n",
        "begin_line": 656,
        "end_line": 690,
        "comment": "\n   * Updates the first initialization (a.k.a \"declaration\") of a global name\n   * that occurs at a VAR node. See comment for\n   * {@link #updateObjLitOrFunctionDeclaration}.\n   *\n   * @param n An object representing a global name (e.g. \"a\")\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1478
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.canEliminate#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.canEliminate()",
        "snippet": "    boolean canEliminate() {\n      if (!canCollapseUnannotatedChildNames() || totalGets > 0) {\n        return false;\n      }\n\n      if (props != null) {\n        for (Name n : props) {\n          if (!n.canCollapse()) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n",
        "begin_line": 878,
        "end_line": 891,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1471
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.flattenReferencesTo#320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.flattenReferencesTo(com.google.javascript.jscomp.GlobalNamespace.Name, java.lang.String)",
        "snippet": "  private void flattenReferencesTo(Name n, String alias) {\n    if (n.refs != null) {\n      String originalName = n.fullName();\n      for (Ref r : n.refs) {\n        Node rParent = r.node.getParent();\n\n        // There are two cases when we shouldn't flatten a reference:\n        // 1) Object literal keys, because duplicate keys show up as refs.\n        // 2) References inside a complex assign. (a = x.y = 0). These are\n        //    called TWIN references, because they show up twice in the\n        //    reference list. Only collapse the set, not the alias.\n        if (!NodeUtil.isObjectLitKey(r.node, rParent) &&\n            (r.getTwin() == null || r.isSet())) {\n          flattenNameRef(alias, r.node, rParent, originalName);\n        }\n      }\n    }\n\n    // Flatten all occurrences of a name as a prefix of its subnames. For\n    // example, if {@code n} corresponds to the name \"a.b\", then \"a.b\" will be\n    // replaced with \"a$b\" in all occurrences of \"a.b.c\", \"a.b.c.d\", etc.\n    if (n.props != null) {\n      for (Name p : n.props) {\n        flattenPrefixes(alias, p, 1);\n      }\n    }\n  }\n",
        "begin_line": 320,
        "end_line": 346,
        "comment": "\n   * Flattens all references to a collapsible property of a global name except\n   * its initial definition.\n   *\n   * @param n A global property name (e.g. \"a.b\" or \"a.b.c.d\")\n   * @param alias The flattened name (e.g. \"a$b\" or \"a$b$c$d\")\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1405
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.flattenNameRef#414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.flattenNameRef(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private void flattenNameRef(String alias, Node n, Node parent,\n      String originalName) {\n    // BEFORE:\n    //   getprop\n    //     getprop\n    //       name a\n    //       string b\n    //     string c\n    // AFTER:\n    //   name a$b$c\n    Node ref = NodeUtil.newName(alias, n, originalName);\n    if (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {\n      ref.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n    parent.replaceChild(n, ref);\n    compiler.reportCodeChange();\n  }\n",
        "begin_line": 414,
        "end_line": 430,
        "comment": "\n   * Replaces a GETPROP a.b.c with a NAME a$b$c.\n   *\n   * @param alias A flattened prefix name (e.g. \"a$b\")\n   * @param n The GETPROP node corresponding to the original name (e.g. \"a.b\")\n   * @param parent {@code n}'s parent\n   * @param originalName String version of the property name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1375
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.declareVarsForObjLitValues#721",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.declareVarsForObjLitValues(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private int declareVarsForObjLitValues(\n      String alias, Node objlit, Node varNode, Node nameToAddAfter,\n      Node varParent, boolean discardKeys) {\n    int numVars = 0;\n    int arbitraryNameCounter = 0;\n\n    for (Node key = objlit.getFirstChild(), nextKey; key != null;\n         key = nextKey) {\n      Node value = key.getNext();\n      nextKey = value.getNext();\n\n      // We generate arbitrary names for keys that aren't valid JavaScript\n      // identifiers, since those keys are never referenced. (If they were,\n      // this object literal's child names wouldn't be collapsible.) The only\n      // reason that we don't eliminate them entirely is the off chance that\n      // their values are expressions that have side effects.\n      boolean isJsIdentifier = key.getType() != Token.NUMBER &&\n                               TokenStream.isJSIdentifier(key.getString());\n      String propAlias = alias + '$' +\n          (isJsIdentifier ? key.getString()\n              : String.valueOf(++arbitraryNameCounter));\n      String qName = propAlias.replace('$', '.');\n\n      Node refNode = null;\n      if (discardKeys) {\n        objlit.removeChild(key);\n        objlit.removeChild(value);\n      } else {\n        // Substitute a reference for the value.\n        refNode = Node.newString(Token.NAME, propAlias);\n        if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n          refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n        objlit.replaceChildAfter(key, refNode);\n      }\n\n      // Declare the collapsed name as a variable with the original value.\n      Node nameNode = Node.newString(Token.NAME, propAlias);\n      nameNode.addChildToFront(value);\n      if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n        nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n      }\n      Node newVar = new Node(Token.VAR, nameNode);\n      if (nameToAddAfter != null) {\n        varParent.addChildAfter(newVar, nameToAddAfter);\n      } else {\n        varParent.addChildBefore(newVar, varNode);\n      }\n      compiler.reportCodeChange();\n      nameToAddAfter = newVar;\n\n      if (isJsIdentifier) {\n        // Update the global name's node ancestry if it hasn't already been\n        // done. (Duplicate keys in an object literal can bring us here twice\n        // for the same global name.)\n        Name p = nameMap.get(qName);\n        if (p != null) {\n          if (!discardKeys) {\n            Ref newAlias =\n                p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);\n            newAlias.node = refNode;\n            p.addRef(newAlias);\n          }\n\n          p.declaration.node = nameNode;\n\n          if (value.getType() == Token.FUNCTION) {\n            checkForHosedThisReferences(value, value.getJSDocInfo(), p);\n          }\n        }\n      }\n\n      numVars++;\n    }\n    return numVars;\n  }\n",
        "begin_line": 721,
        "end_line": 796,
        "comment": "\n   * Declares global variables to serve as aliases for the values in an object\n   * literal, optionally removing all of the object literal's keys and values.\n   *\n   * @param alias The object literal's flattened name (e.g. \"a$b$c\")\n   * @param objlit The OBJLIT node\n   * @param varNode The VAR node to which new global variables should be added\n   *     as children\n   * @param nameToAddAfter The child of {@code varNode} after which new\n   *     variables should be added (may be null)\n   * @param varParent {@code varNode}'s parent\n   * @param discardKeys Whether to eliminate the object literal's keys after\n   *     declaring variables for its values\n   * @return The number of variables added\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1364
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.newName#1489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.newName(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  static Node newName(String name, Node basisNode) {\n    Node nameNode = Node.newString(Token.NAME, name);\n    nameNode.copyInformationFrom(basisNode);\n    return nameNode;\n  }\n",
        "begin_line": 1489,
        "end_line": 1493,
        "comment": "\n   * Creates a new node representing an *existing* name, copying over the source\n   * location information from the basis node.\n   *\n   * @param name The name for the new NAME node.\n   * @param basisNode The node that represents the name as currently found in\n   *     the AST.\n   *\n   * @return The node created.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.newName#1508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.newName(java.lang.String, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  static Node newName(String name, Node basisNode, String originalName) {\n    Node nameNode = newName(name, basisNode);\n    nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);\n    return nameNode;\n  }\n",
        "begin_line": 1508,
        "end_line": 1512,
        "comment": "\n   * Creates a new node representing an *existing* name, copying over the source\n   * location information from the basis node and assigning the given original\n   * name to the node.\n   *\n   * @param name The name for the new NAME node.\n   * @param basisNode The node that represents the name as currently found in\n   *     the AST.\n   * @param originalName The original name of the item being represented by the\n   *     NAME node. Used for debugging information.\n   *\n   * @return The node created.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.needsToBeStubbed#915",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.needsToBeStubbed()",
        "snippet": "    boolean needsToBeStubbed() {\n      return globalSets == 0 && localSets > 0;\n    }\n",
        "begin_line": 915,
        "end_line": 917,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.addStubsForUndeclaredProperties#811",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(com.google.javascript.jscomp.GlobalNamespace.Name, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private int addStubsForUndeclaredProperties(\n      Name n, String alias, Node parent, Node addAfter) {\n    Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));\n    int numStubs = 0;\n    if (n.props != null) {\n      for (Name p : n.props) {\n        if (p.needsToBeStubbed()) {\n          String propAlias = alias + '$' + p.name;\n          Node nameNode = Node.newString(Token.NAME, propAlias);\n          Node newVar = new Node(Token.VAR, nameNode);\n          if (addAfter == null) {\n            parent.addChildToFront(newVar);\n          } else {\n            parent.addChildAfter(newVar, addAfter);\n            addAfter = newVar;\n          }\n          numStubs++;\n          compiler.reportCodeChange();\n\n          // Determine if this is a constant var by checking the first\n          // reference to it. Don't check the declaration, as it might be null.\n          if (p.refs.get(0).node.getLastChild().getBooleanProp(\n                Node.IS_CONSTANT_NAME)) {\n            nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n          }\n        }\n      }\n    }\n    return numStubs;\n  }\n",
        "begin_line": 811,
        "end_line": 840,
        "comment": "\n   * Adds global variable \"stubs\" for any properties of a global name that are\n   * only set in a local scope or read but never set.\n   *\n   * @param n An object representing a global name (e.g. \"a\", \"a.b.c\")\n   * @param alias The flattened name of the object whose properties we are\n   *     adding stubs for (e.g. \"a$b$c\")\n   * @param parent The node to which new global variables should be added\n   *     as children\n   * @param addAfter The child of after which new\n   *     variables should be added (may be null)\n   * @return The number of variables added\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.getTwin#1035",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Ref.getTwin()",
        "snippet": "    Ref getTwin() {\n      return twin;\n    }\n",
        "begin_line": 1035,
        "end_line": 1037,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1277
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.add#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(childCount == 2);\n      int p = NodeUtil.precedence(type);\n      addLeftExpr(first, p, context);\n      cc.addOp(opstr, true);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                first.getNext().getChildCount() <= 1);\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 3);\n        if (first.getNext().getType() != Token.EMPTY) {\n          throw new Error(\"Catch conditions not suppored because I think\" +\n                          \" that it may be a netscape only feature.\");\n        }\n\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), p);\n        cc.addOp(\":\", true);\n        addExpr(last, p);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString());\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        boolean stripBlock = n.isSyntheticBlock() ||\n            ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));\n        if (!stripBlock) {\n          cc.beginBlock();\n        }\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (type == Token.SCRIPT) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (!stripBlock) {\n          cc.endBlock(context == Context.STATEMENT);\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyExpression(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(childCount == 2);\n        Preconditions.checkState(last.getType() == Token.STRING);\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(childCount == 2);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP, 0);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyExpression(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyExpression(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        // TODO(johnlenz): Enable this exception once the external users of\n        //     CodePrinter have been corrected.\n        // throw new Error(\"EXPR_VOID should not be used in this codebase.\");\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parens. Otherwise, when parsed, NEW will bind to the\n        // first viable parens\n        if (NodeUtil.containsCall(first)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(childCount == 0);\n        add(jsString(n.getString()));\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        Preconditions.checkState(childCount % 2 == 0);\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext().getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          // Object literal property names don't have to be quoted if they are\n          // not JavaScript keywords\n          if (c.getType() == Token.STRING &&\n              !TokenStream.isKeyword(c.getString()) &&\n              TokenStream.isJSIdentifier(c.getString()) &&\n              // do not encode literally any non-literal characters that were\n              // unicode escaped.\n              NodeUtil.isLatin(c.getString())) {\n            add(c.getString());\n          } else {\n            addExpr(c, 1);\n          }\n          add(\":\");\n          addExpr(c.getNext(), 1);\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        add(first);\n        add(\":\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 53,
        "end_line": 581,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 2
    },
    {
        "name": "CollapseProperties.flattenReferencesToCollapsibleDescendantNames#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.flattenReferencesToCollapsibleDescendantNames(com.google.javascript.jscomp.GlobalNamespace.Name, java.lang.String)",
        "snippet": "  private void flattenReferencesToCollapsibleDescendantNames(\n      Name n, String alias) {\n    if (n.props == null) return;\n\n    for (Name p : n.props) {\n      String propAlias = alias + '$' + p.name;\n\n      if (p.canCollapse()) {\n        flattenReferencesTo(p, propAlias);\n      }\n\n      flattenReferencesToCollapsibleDescendantNames(p, propAlias);\n    }\n  }\n",
        "begin_line": 298,
        "end_line": 311,
        "comment": "\n   * Flattens all references to collapsible properties of a global name except\n   * their initial definitions. Recurses on subnames.\n   *\n   * @param n An object representing a global name\n   * @param alias The flattened name for {@code n}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1259
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.collapseDeclarationOfNameAndDescendants#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(com.google.javascript.jscomp.GlobalNamespace.Name, java.lang.String)",
        "snippet": "  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(p, alias + '$' + p.name);\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(alias + '$' + p.name, p.declaration);\n        }\n      }\n    }\n  }\n",
        "begin_line": 440,
        "end_line": 461,
        "comment": "\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1201
        },
        "num_failing_tests": 3
    },
    {
        "name": "TypeSafeDispatcher.process#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n      case Token.FINALLY:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return processEmptyExpression((EmptyExpression) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 119,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1187
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processIfStatement#535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement)",
        "snippet": "    @Override\n    Node processIfStatement(IfStatement statementNode) {\n      Node node = new Node(Token.IF);\n      node.addChildToBack(transform(statementNode.getCondition()));\n      node.addChildToBack(transform(statementNode.getThenPart()));\n      if (statementNode.getElsePart() != null) {\n        node.addChildToBack(transform(statementNode.getElsePart()));\n      }\n      return node;\n    }\n",
        "begin_line": 535,
        "end_line": 544,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1187
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isControlStructureCodeBlock#898",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructureCodeBlock(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructureCodeBlock(Node parent, Node n) {\n    switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }\n  }\n",
        "begin_line": 898,
        "end_line": 922,
        "comment": "\n   * Determines whether the given node is code node for FOR, DO,\n   * WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1187
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.canCollapseUnannotatedChildNames#899",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.canCollapseUnannotatedChildNames()",
        "snippet": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n\n      if (isClassOrEnum) {\n        return true;\n      }\n      return (type == Type.FUNCTION || aliasingGets == 0) &&\n          (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n",
        "begin_line": 899,
        "end_line": 913,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1182
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.addNonEmptyExpression#590",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addNonEmptyExpression(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context, boolean)",
        "snippet": "  private void addNonEmptyExpression(\n      Node n, Context context, boolean allowNonBlockChild) {\n    Node nodeToProcess = n;\n\n    if (!allowNonBlockChild && n.getType() != Token.BLOCK) {\n      // TODO(johnlenz) : Enable this when the JsMinifier is corrected.\n      // throw new Error(\"Missing BLOCK child.\");\n    }\n\n    // Strip unneeded blocks, that is blocks with <2 children.\n    if (n.getType() == Token.BLOCK) {\n      int count = getNonEmptyChildCount(n);\n      if (count == 0) {\n        cc.endStatement(true);\n        return;\n      }\n\n      if (count == 1) {\n        // Hack around a couple of browser bugs:\n        //   Safari needs a block around function declarations.\n        //   IE6/7 needs a block around DOs.\n        Node firstAndOnlyChild = getFirstNonEmptyChild(n);\n        if (firstAndOnlyChild.getType() == Token.FUNCTION ||\n            firstAndOnlyChild.getType() == Token.DO) {\n          cc.beginBlock();\n          add(firstAndOnlyChild, Context.STATEMENT);\n          cc.maybeLineBreak();\n          cc.endBlock(context == Context.STATEMENT);\n          return;\n        } else {\n          // Continue with the only child.\n          nodeToProcess = firstAndOnlyChild;\n        }\n      }\n    }\n\n    if (nodeToProcess.getType() == Token.EMPTY) {\n      cc.endStatement(true);\n    } else {\n      add(nodeToProcess, context);\n\n      // VAR doesn't include ';' since it gets used in expressions - so any\n      // VAR in a statement context needs a call to endStatement() here.\n      if (nodeToProcess.getType() == Token.VAR) {\n        cc.endStatement();\n      }\n    }\n  }\n",
        "begin_line": 590,
        "end_line": 637,
        "comment": "\n   * Adds a block or expression, substituting a VOID with an empty statement.\n   * This is used for \"for (...);\" and \"if (...);\" type statements.\n   *\n   * @param n The node to print.\n   * @param context The context to determine how the node should be printed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1162
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.getNonEmptyChildCount#838",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(com.google.javascript.rhino.Node)",
        "snippet": "  private static int getNonEmptyChildCount(Node n) {\n    int i = 0;\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() != Token.EMPTY) {\n        i++;\n      }\n    }\n    return i;\n  }\n",
        "begin_line": 838,
        "end_line": 846,
        "comment": " Gets the number of children of this node that are non empty. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1162
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.fullName#954",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.fullName()",
        "snippet": "    String fullName() {\n      return parent == null ? name : parent.fullName() + '.' + name;\n    }\n",
        "begin_line": 954,
        "end_line": 956,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1161
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.putProp#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "    public void putProp(int propType, Object prop)\n    {\n        if (prop == null) {\n            removeProp(propType);\n        } else {\n            PropListItem item = ensureProperty(propType);\n            item.objectValue = prop;\n        }\n    }\n",
        "begin_line": 774,
        "end_line": 782,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1151
        },
        "num_failing_tests": 4
    },
    {
        "name": "CollapseProperties.process#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 145,
        "comment": "\n   * {@inheritDoc}\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CompilerPass": "\n   * Process the JS with root node root.\n   * Can modify the contents of each Node tree\n   * @param externs Top of external JS tree\n   * @param root Top of JS tree\n   "
        },
        "susp": {
            "ochiai_susp": 0.1131
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.canCollapse#893",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.canCollapse()",
        "snippet": "    boolean canCollapse() {\n      return !inExterns && (isClassOrEnum ||\n          (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n          (globalSets > 0 || localSets > 0));\n    }\n",
        "begin_line": 893,
        "end_line": 897,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1127
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.isNamespace#935",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.isNamespace()",
        "snippet": "    boolean isNamespace() {\n      return hasClassOrEnumDescendant && type == Type.OBJECTLIT;\n    }\n",
        "begin_line": 935,
        "end_line": 937,
        "comment": "\n     * Determines whether this name is a prefix of at least one class or enum\n     * name. Because classes and enums are always collapsed, the namespace will\n     * have different properties in compiled code than in uncompiled code.\n     *\n     * For example, if foo.bar.DomHelper is a class, then foo and foo.bar are\n     * considered namespaces.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1127
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.checkNamespaces#246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.checkNamespaces()",
        "snippet": "  private void checkNamespaces() {\n    for (Name name : nameMap.values()) {\n      if (name.isNamespace() && name.refs != null &&\n          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1)) {\n        boolean initialized = name.declaration != null;\n        for (Ref ref : name.refs) {\n          if (ref.type == Ref.Type.SET_FROM_GLOBAL ||\n              ref.type == Ref.Type.SET_FROM_LOCAL) {\n            if (initialized) {\n              warnAboutNamespaceRedefinition(name, ref);\n            }\n\n            initialized = true;\n          } else if (ref.type == Ref.Type.ALIASING_GET) {\n            warnAboutNamespaceAliasing(name, ref);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 246,
        "end_line": 265,
        "comment": "\n   * Runs through all namespaces (prefixes of classes and enums), and checks if\n   * any of them have been used in an unsafe way.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1127
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.addChildToFront#560",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToFront(com.google.javascript.rhino.Node)",
        "snippet": "    public void addChildToFront(Node child) {\n        Preconditions.checkArgument(child.parent == null);\n        Preconditions.checkArgument(child.next == null);\n        child.parent = this;\n        child.next = first;\n        first = child;\n        if (last == null) {\n            last = child;\n        }\n    }\n",
        "begin_line": 560,
        "end_line": 569,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1121
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.CollapseProperties#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.CollapseProperties(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean)",
        "snippet": "  CollapseProperties(AbstractCompiler compiler,\n      boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {\n    this.compiler = compiler;\n    this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;\n    this.inlineAliases = inlineAliases;\n  }\n",
        "begin_line": 110,
        "end_line": 115,
        "comment": "\n   * Creates an instance.\n   *\n   * @param compiler The JSCompiler, for reporting code changes\n   * @param collapsePropertiesOnExternTypes if true, will rename user-defined\n   *     static properties on externed typed. E.g. String.foo.\n   * @param inlineAliases Whether we're allowed to inline local aliases of\n   *     namespaces, etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1121
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.handleGet#650",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleGet(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Ref.Type)",
        "snippet": "    void handleGet(NodeTraversal t, Node n, Node parent,\n        String name, Ref.Type type) {\n      Name node = getOrCreateName(name);\n\n      // No need to look up additional ancestors, since they won't be used.\n      node.addRef(new Ref(t, n, type));\n    }\n",
        "begin_line": 650,
        "end_line": 656,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect a read\n     * of a global name.\n     *\n     * @param t The current node traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @param type The reference type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.getDocInfoForDeclaration#961",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.getDocInfoForDeclaration(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    private static JSDocInfo getDocInfoForDeclaration(Ref ref) {\n      if (ref.node != null) {\n        Node refParent = ref.node.getParent();\n        switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }\n      }\n\n      return null;\n    }\n",
        "begin_line": 961,
        "end_line": 975,
        "comment": "\n     * Tries to get the doc info for a given declaration ref.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1112
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processScope#665",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope)",
        "snippet": "    @Override\n    Node processScope(Scope scopeNode) {\n      return processGeneric(scopeNode);\n    }\n",
        "begin_line": 665,
        "end_line": 668,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getNameForest#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.getNameForest()",
        "snippet": "  List<Name> getNameForest() {\n    if (!generated) {\n      process();\n    }\n    return globalNames;\n  }\n",
        "begin_line": 89,
        "end_line": 94,
        "comment": "\n   * Gets a list of the roots of the forest of the global names, where the\n   * roots are the top-level names.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.105
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.addProperty#786",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addProperty(java.lang.String, boolean)",
        "snippet": "    Name addProperty(String name, boolean inExterns) {\n      if (props == null) {\n        props = new ArrayList<Name>();\n      }\n      Name node = new Name(name, this, inExterns);\n      props.add(node);\n      return node;\n    }\n",
        "begin_line": 786,
        "end_line": 793,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1045
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.getOrCreateName#729",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.getOrCreateName(java.lang.String)",
        "snippet": "    Name getOrCreateName(String name) {\n      Name node = nameMap.get(name);\n      if (node == null) {\n        int i = name.lastIndexOf('.');\n        if (i >= 0) {\n          String parentName = name.substring(0, i);\n          Name parent = getOrCreateName(parentName);\n          node = parent.addProperty(name.substring(i + 1), inExterns);\n        } else {\n          node = new Name(name, null, inExterns);\n          globalNames.add(node);\n        }\n        nameMap.put(name, node);\n      }\n      return node;\n    }\n",
        "begin_line": 729,
        "end_line": 744,
        "comment": "\n     * Gets a {@link Name} instance for a global name. Creates it if necessary,\n     * as well as instances for any of its prefixes that are not yet defined.\n     *\n     * @param name A global name (e.g. \"a\", \"a.b.c.d\")\n     * @return The {@link Name} instance for {@code name}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.replaceChild#665",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void replaceChild(Node child, Node newChild) {\n        Preconditions.checkArgument(newChild.next == null,\n            \"The new child node has siblings.\");\n        Preconditions.checkArgument(newChild.parent == null,\n            \"The new child node already has a parent.\");\n\n        // Copy over important information.\n        newChild.copyInformationFrom(child);\n\n        newChild.next = child.next;\n        newChild.parent = this;\n        if (child == first) {\n            first = newChild;\n        } else {\n            Node prev = getChildBefore(child);\n            prev.next = newChild;\n        }\n        if (child == last)\n            last = newChild;\n        child.next = null;\n        child.parent = null;\n    }\n",
        "begin_line": 665,
        "end_line": 686,
        "comment": "\n     * Detaches child from Node and replaces it with newChild.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1038
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.addRefInternal#871",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addRefInternal(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    void addRefInternal(Ref ref) {\n      if (refs == null) {\n        refs = new LinkedList<Ref>();\n      }\n      refs.add(ref);\n    }\n",
        "begin_line": 871,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1033
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.getCompiler#369",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCompiler()",
        "snippet": "  public Compiler getCompiler() {\n    // TODO(nicksantos): Remove this type cast. This is just temporary\n    // while refactoring.\n    return (Compiler) compiler;\n  }\n",
        "begin_line": 369,
        "end_line": 373,
        "comment": "\n   * Gets the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "GlobalNamespace.getNameIndex#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.getNameIndex()",
        "snippet": "  Map<String, Name> getNameIndex() {\n    if (!generated) {\n      process();\n    }\n    return nameMap;\n  }\n",
        "begin_line": 100,
        "end_line": 105,
        "comment": "\n   * Gets an index of all the global names, indexed by full qualified name\n   * (as in \"a\", \"a.b.c\", etc.).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0998
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.isConstructorOrEnumDeclaration#477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.isConstructorOrEnumDeclaration(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isConstructorOrEnumDeclaration(Node n, Node parent) {\n      JSDocInfo info;\n      int valueNodeType;\n      switch (parent.getType()) {\n        case Token.ASSIGN:\n          info = parent.getJSDocInfo();\n          valueNodeType = n.getNext().getType();\n          break;\n        case Token.VAR:\n          info = n.getJSDocInfo();\n          if (info == null) {\n            info = parent.getJSDocInfo();\n          }\n          Node valueNode = n.getFirstChild();\n          valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;\n          break;\n        default:\n          return false;\n      }\n      // Heed the annotations only if they're sensibly used.\n      return info != null &&\n             (info.isConstructor() && valueNodeType == Token.FUNCTION ||\n              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);\n    }\n",
        "begin_line": 477,
        "end_line": 500,
        "comment": "\n     * Determines whether a set operation is a constructor or enumeration\n     * declaration. The set operation may either be an assignment to a name,\n     * a variable declaration, or an object literal key mapping.\n     *\n     * @param n The node that represents the name being set\n     * @param parent Parent node of {@code n} (an ASSIGN, VAR, or OBJLIT node)\n     * @return Whether the set operation is either a constructor or enum\n     *     declaration\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0993
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.Ref#1012",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Ref.Ref(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.GlobalNamespace.Ref.Type)",
        "snippet": "    Ref(NodeTraversal t, Node name, Type type) {\n      this.node = name;\n      this.sourceName = t.getSourceName();\n      this.type = type;\n      this.scope = t.getScope();\n      this.module = t.getModule();\n    }\n",
        "begin_line": 1012,
        "end_line": 1018,
        "comment": "\n     * Creates a reference at the current node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.Name#779",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.Name(java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name, boolean)",
        "snippet": "    Name(String name, Name parent, boolean inExterns) {\n      this.name = name;\n      this.parent = parent;\n      this.type = Type.OTHER;\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 779,
        "end_line": 784,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.maybeHandlePrototypePrefix#669",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.maybeHandlePrototypePrefix(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent,\n        String name) {\n      // We use a string-based approach instead of inspecting the parse tree\n      // to avoid complexities with object literals, possibly nested, beneath\n      // assignments.\n\n      int numLevelsToRemove;\n      String prefix;\n      if (name.endsWith(\".prototype\")) {\n        numLevelsToRemove = 1;\n        prefix = name.substring(0, name.length() - 10);\n      } else {\n        int i = name.indexOf(\".prototype.\");\n        if (i == -1) {\n          return false;\n        }\n        prefix = name.substring(0, i);\n        numLevelsToRemove = 2;\n        i = name.indexOf('.', i + 11);\n        while (i >= 0) {\n          numLevelsToRemove++;\n          i = name.indexOf('.', i + 1);\n        }\n      }\n\n      if (parent != null && NodeUtil.isObjectLitKey(n, parent)) {\n        // Object literal keys have no prefix that's referenced directly per\n        // key, so we're done.\n        return true;\n      }\n\n      for (int i = 0; i < numLevelsToRemove; i++) {\n        parent = n;\n        n = n.getFirstChild();\n      }\n\n      handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET);\n      return true;\n    }\n",
        "begin_line": 669,
        "end_line": 707,
        "comment": "\n     * Updates our respresentation of the global namespace to reflect a read\n     * of a global name's longest prefix before the \"prototype\" property if the\n     * name includes the \"prototype\" property. Does nothing otherwise.\n     *\n     * @param t The current node traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @return Whether the name was handled\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.isNestedAssign#717",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.isNestedAssign(com.google.javascript.rhino.Node)",
        "snippet": "    boolean isNestedAssign(Node parent) {\n      return parent.getType() == Token.ASSIGN &&\n             !NodeUtil.isExpressionNode(parent.getParent());\n    }\n",
        "begin_line": 717,
        "end_line": 720,
        "comment": "\n     * Determines whether an assignment is nested (i.e. whether its return\n     * value is used).\n     *\n     * @param parent The parent of the current traversal node (not null)\n     * @return Whether it appears that the return value of the assignment is\n     *     used\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.isGlobalScope#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalScope(Scope s) {\n    return s.getParent() == null;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n   * Gets whether a scope is the global scope.\n   *\n   * @param s A scope\n   * @return Whether the scope is the global scope\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.GlobalNamespace#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node)",
        "snippet": "  GlobalNamespace(AbstractCompiler compiler, Node root) {\n    this(compiler, null, root);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n   * Creates an instance that may emit warnings when building the namespace.\n   *\n   * @param compiler The AbstractCompiler, for reporting code changes\n   * @param root The root of the rest of the code to build a namespace for.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0954
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.isGlobalNameReference#170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalNameReference(java.lang.String, com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalNameReference(String name, Scope s) {\n    String topVarName = getTopVarName(name);\n    return isGlobalVarReference(topVarName, s);\n  }\n",
        "begin_line": 170,
        "end_line": 173,
        "comment": "\n   * Determines whether a name reference in a particular scope is a global name\n   * reference.\n   *\n   * @param name A variable or property name (e.g. \"a\" or \"a.b.c.d\")\n   * @param s The scope in which the name is referenced\n   * @return Whether the name reference is a global name reference\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0951
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.getTopVarName#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.getTopVarName(java.lang.String)",
        "snippet": "  private String getTopVarName(String name) {\n    int firstDotIndex = name.indexOf('.');\n    return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);\n  }\n",
        "begin_line": 181,
        "end_line": 184,
        "comment": "\n   * Gets the top variable name from a possibly namespaced name.\n   *\n   * @param name A variable or qualified property name (e.g. \"a\" or \"a.b.c.d\")\n   * @return The top variable name (e.g. \"a\")\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0951
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.isGlobalVarReference#194",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalVarReference(java.lang.String, com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalVarReference(String name, Scope s) {\n    Scope.Var v = s.getVar(name);\n    if (v == null && externsScope != null) {\n      v = externsScope.getVar(name);\n    }\n    return v != null && !v.isLocal();\n  }\n",
        "begin_line": 194,
        "end_line": 200,
        "comment": "\n   * Determines whether a variable name reference in a particular scope is a\n   * global variable reference.\n   *\n   * @param name A variable name (e.g. \"a\")\n   * @param s The scope in which the name is referenced\n   * @return Whether the name reference is a global variable reference\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0951
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.BuildGlobalNamespace#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.BuildGlobalNamespace()",
        "snippet": "    BuildGlobalNamespace() {\n      this(null);\n    }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.BuildGlobalNamespace#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.BuildGlobalNamespace(com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "    BuildGlobalNamespace(Predicate<Node> nodeFilter) {\n      this.nodeFilter = nodeFilter;\n    }\n",
        "begin_line": 229,
        "end_line": 231,
        "comment": "\n     * Builds a global namepsace, but only visits nodes that match the\n     * given filter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.GlobalNamespace#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root) {\n    this.compiler = compiler;\n    this.externsRoot = externsRoot;\n    this.root = root;\n  }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "\n   * Creates an instance that may emit warnings when building the namespace.\n   *\n   * @param compiler The AbstractCompiler, for reporting code changes\n   * @param externsRoot The root of the externs to build a namespace for. If\n   *     this is null, externs and properties defined on extern types will not\n   *     be included in the global namespace.  If non-null, it allows\n   *     user-defined function on extern types to be included in the global\n   *     namespace.  E.g. String.foo.\n   * @param root The root of the rest of the code to build a namespace for.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 3
    },
    {
        "name": "GlobalNamespace.process#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.process()",
        "snippet": "  private void process() {\n    if (externsRoot != null) {\n      inExterns = true;\n      NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());\n    }\n    inExterns = false;\n\n    NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());\n    generated = true;\n  }\n",
        "begin_line": 151,
        "end_line": 160,
        "comment": "\n   * Builds the namespace lazily.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 3
    },
    {
        "name": "CollapseProperties.flattenPrefixes#357",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.flattenPrefixes(java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name, int)",
        "snippet": "  private void flattenPrefixes(String alias, Name n, int depth) {\n    // Only flatten the prefix of a name declaration if the name being\n    // initialized is fully qualified (i.e. not an object literal key).\n    String originalName = n.fullName();\n    if (n.declaration != null && n.declaration.node != null &&\n        n.declaration.node.getType() == Token.GETPROP) {\n      flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName);\n    }\n\n    if (n.refs != null) {\n      for (Ref r : n.refs) {\n\n        // References inside a complex assign (a = x.y = 0)\n        // have twins. We should only flatten one of the twins.\n        if (r.getTwin() == null || r.isSet()) {\n          flattenNameRefAtDepth(alias, r.node, depth, originalName);\n        }\n      }\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        flattenPrefixes(alias, p, depth + 1);\n      }\n    }\n  }\n",
        "begin_line": 357,
        "end_line": 382,
        "comment": "\n   * Flattens all occurrences of a name as a prefix of subnames beginning\n   * with a particular subname.\n   *\n   * @param n A global property name (e.g. \"a.b.c.d\")\n   * @param alias A flattened prefix name (e.g. \"a$b\")\n   * @param depth The difference in depth between the property name and\n   *    the prefix name (e.g. 2)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeChild#651",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "    public void removeChild(Node child) {\n        Node prev = getChildBefore(child);\n        if (prev == null)\n            first = first.next;\n        else\n            prev.next = child.next;\n        if (child == last) last = prev;\n        child.next = null;\n        child.parent = null;\n    }\n",
        "begin_line": 651,
        "end_line": 660,
        "comment": "\n     * Detach a child from its parent and siblings.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0925
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTypeNormalizer.normalizeBlocks#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.normalizeBlocks(com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeBlocks(Node n) {\n    if (NodeUtil.isControlStructure(n)\n        && n.getType() != Token.LABEL\n        && n.getType() != Token.SWITCH) {\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (NodeUtil.isControlStructureCodeBlock(n,c) &&\n            c.getType() != Token.BLOCK) {\n          Node newBlock = new Node(Token.BLOCK);\n          n.replaceChild(c, newBlock);\n          if (c.getType() != Token.EMPTY) {\n            newBlock.addChildrenToFront(c);\n          } else {\n            newBlock.setWasEmptyNode(true);\n          }\n          c = newBlock;\n          reportChange();\n        }\n      }\n    }\n  }\n",
        "begin_line": 117,
        "end_line": 136,
        "comment": "\n   * Add blocks to IF, WHILE, DO, etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0921
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isControlStructure#875",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 875,
        "end_line": 892,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0905
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getChildBefore#531",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "    public Node getChildBefore(Node child) {\n        if (child == first)\n            return null;\n        Node n = first;\n        while (n.next != child) {\n            n = n.next;\n            if (n == null)\n                throw new RuntimeException(\"node is not a child\");\n        }\n        return n;\n    }\n",
        "begin_line": 531,
        "end_line": 541,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0873
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.copyInformationFrom#1786",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFrom(com.google.javascript.rhino.Node)",
        "snippet": "    public void copyInformationFrom(Node other) {\n        if (getProp(ORIGINALNAME_PROP) == null) {\n            putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n        }\n\n        if (getProp(SOURCEFILE_PROP) == null) {\n            putProp(SOURCEFILE_PROP, other.getProp(SOURCEFILE_PROP));\n            sourcePosition = other.sourcePosition;\n        }\n    }\n",
        "begin_line": 1786,
        "end_line": 1795,
        "comment": "\n     * Copies source file and name information from the other\n     * node given to the current node. Used for maintaining\n     * debug information across node append and remove operations.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0865
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.parseAllJsDocInfo#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.parseAllJsDocInfo(com.google.javascript.rhino.Node, com.google.javascript.jscomp.mozilla.rhino.ast.Comment[], int)",
        "snippet": "  private int parseAllJsDocInfo(Node node, Comment[] comments, int ci) {\n    if (ci >= comments.length) {\n      // There are no comments left.\n      return ci;\n    }\n\n    // Parse the JsDoc string on the current node, if any.\n    if (node.getProp(TMP_JSDOC_PROP) != null) {\n      String jsDoc = (String) node.getProp(TMP_JSDOC_PROP);\n\n      // Find the match of the JsDoc string in the array of comments.\n      while (comments[ci].getCommentType() != JSDOC ||\n          !comments[ci].getValue().equals(jsDoc)) {\n        ci++;\n        Preconditions.checkState(ci < comments.length);\n      }\n\n      JSDocInfo info = parseJSDocInfo(jsDoc, comments[ci].getLineno(),\n          comments[ci].getAbsolutePosition());\n      node.setJSDocInfo(info);\n      if (info != null && info.hasEnumParameterType()) {\n        if (node.getType() == Token.NAME) {\n          registry.identifyEnumName(node.getString());\n        } else if (node.getType() == Token.VAR &&\n            node.getChildCount() == 1) {\n          registry.identifyEnumName(node.getFirstChild().getString());\n        } else if (node.getType() == Token.ASSIGN) {\n          registry.identifyEnumName(node.getFirstChild().getQualifiedName());\n        }\n      }\n\n      ci++;\n      node.removeProp(TMP_JSDOC_PROP);\n    }\n\n    // Recurse on the children.\n    for (Node child : node.children()) {\n      ci = parseAllJsDocInfo(child, comments, ci);\n    }\n\n    return ci;\n  }\n",
        "begin_line": 190,
        "end_line": 231,
        "comment": "\n   * Parses all temporary JsDoc strings in this node and all its children\n   * recursively as well. Assumes the remaining JsDoc strings are contained in\n   * pre-order with skips allowed, in the given comments, after the given index.\n   *\n   * @param node The current node to start parsing at.\n   * @param comments An array of all comments in the source.\n   * @param ci Current index into the array of comments.\n   *\n   * @return Current index into the array of comments after parsing this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0836
        },
        "num_failing_tests": 4
    },
    {
        "name": "CombinedCompilerPass.CallbackWrapper#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.CallbackWrapper(com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "    private CallbackWrapper(Callback callback) {\n      this.callback = callback;\n      if (callback instanceof ScopedCallback) {\n        scopedCallback = (ScopedCallback) callback;\n      } else {\n        scopedCallback = null;\n      }\n    }\n",
        "begin_line": 92,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0822
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.children#1148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.children()",
        "snippet": "    public Iterable<Node> children() {\n      if (first == null) {\n        return Collections.emptySet();\n      } else {\n        return new SiblingNodeIterable(first);\n      }\n    }\n",
        "begin_line": 1148,
        "end_line": 1154,
        "comment": "\n     * <p>Return an iterable object that iterates over this nodes's children.\n     * The iterator does not support the optional operation\n     * {@link Iterator#remove()}.</p>\n     *\n     * <p>To iterate over a node's siblings, one can write</p>\n     * <pre>Node n = ...;\n     * for (Node child : n.children()) { ...</pre>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0821
        },
        "num_failing_tests": 4
    },
    {
        "name": "Scope.isLocal#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isLocal()",
        "snippet": "    public boolean isLocal() {\n      return scope.isLocal();\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\n     * Returns whether this is a local variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.getSourceName#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName()",
        "snippet": "  public String getSourceName() {\n    return sourceName;\n  }\n",
        "begin_line": 396,
        "end_line": 398,
        "comment": "\n   * Gets the current input source name.\n   *\n   * @return A string that may be empty, but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setJSDocInfo#1850",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    public void setJSDocInfo(JSDocInfo info)\n    {\n        putProp(JSDOC_INFO_PROP, info);\n    }\n",
        "begin_line": 1850,
        "end_line": 1853,
        "comment": "\n     * Sets the {@link JSDocInfo} attached to this node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfoBuilder.JSDocInfoBuilder#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.JSDocInfoBuilder(boolean)",
        "snippet": "  public JSDocInfoBuilder(boolean parseDocumentation) {\n    this.currentInfo = new JSDocInfo(parseDocumentation);\n    this.parseDocumentation = parseDocumentation;\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfoBuilder.isPopulated#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulated()",
        "snippet": "  public boolean isPopulated() {\n    return populated;\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfoBuilder.isPopulatedWithFileOverview#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulatedWithFileOverview()",
        "snippet": "  public boolean isPopulatedWithFileOverview() {\n    return isPopulated() && currentInfo.hasFileOverview();\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object that has a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfo.JSDocInfo#231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo(boolean)",
        "snippet": "  JSDocInfo(boolean includeDocumentation) {\n    this.includeDocumentation = includeDocumentation;\n  }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\n   * Creates a {@link JSDocInfo} object. This object should be created using\n   * a {@link JSDocInfoBuilder}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfo.lazyInitDocumentation#435",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitDocumentation()",
        "snippet": "  private boolean lazyInitDocumentation() {\n    if (!includeDocumentation) {\n      return false;\n    }\n\n    if (documentation == null) {\n      documentation = new LazilyInitializedDocumentation();\n    }\n\n    return true;\n  }\n",
        "begin_line": 435,
        "end_line": 445,
        "comment": "\n   * Lazily initializes the documentation information object, but only\n   * if the JSDocInfo was told to keep such information around.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.JsDocTokenStream#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String, int, int)",
        "snippet": "  JsDocTokenStream(String sourceString, int lineno, int initCharno) {\n    Preconditions.checkNotNull(sourceString);\n    this.lineno = lineno;\n    this.sourceString = sourceString;\n    this.sourceEnd = sourceString.length();\n    this.sourceCursor = this.cursor = 0;\n    this.initLineno = lineno;\n    this.initCharno = initCharno;\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.getJsDocToken#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getJsDocToken()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  final JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop = 0;\n    for (;;) {\n      // eat white spaces\n      for (;;) {\n        charno = -1;\n        c = getChar();\n        if (c == EOF_CHAR) {\n          return JsDocToken.EOF;\n        } else if (c == '\\n') {\n          return JsDocToken.EOL;\n        } else if (!isJSSpace(c)) {\n          break;\n        }\n      }\n\n      switch (c) {\n        // annotation, e.g. @type or @constructor\n        case '@':\n          do {\n            c = getChar();\n            if (isAlpha(c)) {\n              addToString(c);\n            } else {\n              ungetChar(c);\n              this.string = getStringFromBuffer();\n              stringBufferTop = 0;\n              return JsDocToken.ANNOTATION;\n            }\n          } while (true);\n\n        case '*':\n          if (matchChar('/')) {\n            return JsDocToken.EOC;\n          } else {\n            return JsDocToken.STAR;\n          }\n\n        case ',':\n          return JsDocToken.COMMA;\n\n        case '>':\n          return JsDocToken.GT;\n\n        case '(':\n          return JsDocToken.LP;\n\n        case ')':\n          return JsDocToken.RP;\n\n        case '{':\n          return JsDocToken.LC;\n\n        case '}':\n          return JsDocToken.RC;\n\n        case '[':\n          return JsDocToken.LB;\n\n        case ']':\n          return JsDocToken.RB;\n\n        case '?':\n          return JsDocToken.QMARK;\n\n        case '!':\n          return JsDocToken.BANG;\n\n        case ':':\n          return JsDocToken.COLON;\n\n        case '=':\n          return JsDocToken.EQUALS;\n\n        case '|':\n          matchChar('|');\n          return JsDocToken.PIPE;\n\n        case '.':\n          c = getChar();\n          if (c == '<') {\n            return JsDocToken.LT;\n          } else {\n            if (c == '.') {\n              c = getChar();\n              if (c == '.') {\n                return JsDocToken.ELLIPSIS;\n              } else {\n                addToString('.');\n              }\n            }\n            // we may backtrack across line boundary\n            ungetBuffer[ungetCursor++] = c;\n            c = '.';\n          }\n          // fall through\n\n        default: {\n          // recognize a jsdoc string but discard last . if it is followed by\n          // a non-jsdoc comment char, e.g. Array.<\n          int c1 = c;\n          addToString(c);\n          int c2 = getChar();\n          if (!isJSDocString(c2)) {\n            ungetChar(c2);\n            this.string = getStringFromBuffer();\n            stringBufferTop = 0;\n            return JsDocToken.STRING;\n          } else {\n            do {\n              c1 = c2;\n              c2 = getChar();\n              if (c1 == '.' && c2 == '<') {\n                ungetChar(c2);\n                ungetChar(c1);\n                this.string = getStringFromBuffer();\n                stringBufferTop = 0;\n                return JsDocToken.STRING;\n              } else {\n                if (isJSDocString(c2)) {\n                  addToString(c1);\n                } else {\n                  ungetChar(c2);\n                  addToString(c1);\n                  this.string = getStringFromBuffer();\n                  stringBufferTop = 0;\n                  return JsDocToken.STRING;\n                }\n              }\n            } while (true);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 60,
        "end_line": 196,
        "comment": "\n   * Tokenizes JSDoc comments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.getString#234",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getString()",
        "snippet": "  final String getString() { return string; }\n",
        "begin_line": 234,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.getStringFromBuffer#238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getStringFromBuffer()",
        "snippet": "  private String getStringFromBuffer() {\n    tokenEnd = cursor;\n    return new String(stringBuffer, 0, stringBufferTop);\n  }\n",
        "begin_line": 238,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.addToString#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.addToString(int)",
        "snippet": "  private void addToString(int c) {\n    int N = stringBufferTop;\n    if (N == stringBuffer.length) {\n        char[] tmp = new char[stringBuffer.length * 2];\n        System.arraycopy(stringBuffer, 0, tmp, 0, N);\n        stringBuffer = tmp;\n    }\n    stringBuffer[N] = (char)c;\n    stringBufferTop = N + 1;\n  }\n",
        "begin_line": 243,
        "end_line": 252,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.ungetChar#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetChar(int)",
        "snippet": "  private void ungetChar(int c) {\n    // can not unread past across line boundary\n    assert(!(ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\\n'));\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 254,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.matchChar#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.matchChar(int)",
        "snippet": "  private boolean matchChar(int test) {\n    int c = getCharIgnoreLineEnd();\n    if (c == test) {\n      tokenEnd = cursor;\n      return true;\n    } else {\n      ungetCharIgnoreLineEnd(c);\n      return false;\n    }\n  }\n",
        "begin_line": 261,
        "end_line": 270,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.isJSSpace#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSSpace(int)",
        "snippet": "  static boolean isJSSpace(int c) {\n    if (c <= 127) {\n      return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;\n    } else {\n      return c == 0xA0\n          || Character.getType((char)c) == Character.SPACE_SEPARATOR;\n    }\n  }\n",
        "begin_line": 311,
        "end_line": 318,
        "comment": " As defined in ECMA.  jsscan.c uses C isspace() (which allows\n   * \\v, I think.)  note that code in getChar() implicitly accepts\n   * '\\r' == \\u000D as well.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.getChar#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getChar()",
        "snippet": "  protected int getChar() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (lineEndChar >= 0) {\n        if (lineEndChar == '\\r' && c == '\\n') {\n          lineEndChar = '\\n';\n          continue;\n        }\n        lineEndChar = -1;\n        lineStart = sourceCursor - 1;\n        lineno++;\n      }\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 338,
        "end_line": 392,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.getCharIgnoreLineEnd#394",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharIgnoreLineEnd()",
        "snippet": "  private int getCharIgnoreLineEnd() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 394,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocTokenStream.getOffset#448",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getOffset()",
        "snippet": "  final int getOffset() {\n    return sourceCursor - lineStart - ungetCursor - 1;\n  }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "\n   * Returns the offset into the current line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.ExtractionInfo#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo.ExtractionInfo(java.lang.String, com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "    public ExtractionInfo(String string, JsDocToken token) {\n      this.string = string;\n      this.token = token;\n    }\n",
        "begin_line": 1094,
        "end_line": 1097,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.setFileLevelJsDocBuilder#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder)",
        "snippet": "  void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {\n    this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;\n  }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "\n   * Sets the JsDocBuilder for the file-level (root) node of this parse. The\n   * parser uses the builder to append any preserve annotations it encounters\n   * in jsdoc comments.\n   *\n   * @param fileLevelJsDocBuilder\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.setFileOverviewJSDocInfo#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo) {\n    this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "\n   * Sets the file overview JSDocInfo, in order to warn about multiple uses of\n   * the @fileoverview tag in a file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.JsDocInfoParser#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  JsDocInfoParser(JsDocTokenStream stream,\n                  String sourceName,\n                  Config config,\n                  ErrorReporter errorReporter) {\n    this.stream = stream;\n    this.sourceName = sourceName;\n    this.typeRegistry = config.registry;\n    this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n    this.annotationNames = buildAnnotationNames(config);\n\n    this.errorReporter = errorReporter;\n  }\n",
        "begin_line": 185,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.buildAnnotationNames#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.buildAnnotationNames(com.google.javascript.jscomp.parsing.Config)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(Config config) {\n    ImmutableMapBuilder<String, Annotation> annotationBuilder =\n        ImmutableMapBuilder.fromMap(recognizedAnnotations);\n    for (String unrecognizedAnnotation : config.annotationWhitelist) {\n      if (!recognizedAnnotations.containsKey(unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.getMap();\n  }\n",
        "begin_line": 199,
        "end_line": 209,
        "comment": " Create the annotation names from the user-specified config. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.next#2022",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.next()",
        "snippet": "  private JsDocToken next() {\n    if (unreadToken == NO_UNREAD_TOKEN) {\n      return stream.getJsDocToken();\n    } else {\n      return current();\n    }\n  }\n",
        "begin_line": 2022,
        "end_line": 2028,
        "comment": "\n   * Gets the next token of the token stream or the buffered token if a matching\n   * was previously made.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.hasParsedFileOverviewDocInfo#2056",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.hasParsedFileOverviewDocInfo()",
        "snippet": "  private boolean hasParsedFileOverviewDocInfo() {\n    return jsdocBuilder.isPopulatedWithFileOverview();\n  }\n",
        "begin_line": 2056,
        "end_line": 2058,
        "comment": "\n   * Determines whether the parser has been populated with docinfo with a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsDocInfoParser.retrieveAndResetParsedJSDocInfo#2064",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.retrieveAndResetParsedJSDocInfo()",
        "snippet": "  JSDocInfo retrieveAndResetParsedJSDocInfo() {\n    return jsdocBuilder.build(sourceName);\n  }\n",
        "begin_line": 2064,
        "end_line": 2066,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.transform#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    Node irNode = justTransform(node);\n    // If we have a named function, set the position to that of the name.\n    if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1) {\n      irNode.setLineno(irNode.getFirstChild().getLineno());\n      irNode.setCharno(irNode.getFirstChild().getCharno());\n    } else {\n      if (irNode.getLineno() == -1) {\n        // If we didn't already set the line, then set it now.  This avoids\n        // cases like ParenthesizedExpression where we just return a previous\n        // node, but don't want the new node to get its parent's line number.\n        int lineno = node.getLineno();\n        irNode.setLineno(lineno);\n        int charno = position2charno(node.getAbsolutePosition());\n        irNode.setCharno(charno);\n      }\n    }\n    if (node.getJsDoc() != null) {\n      irNode.putProp(TMP_JSDOC_PROP, node.getJsDoc());\n    }\n    return irNode;\n  }\n",
        "begin_line": 155,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.parseJSDocInfo#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.parseJSDocInfo(java.lang.String, int, int)",
        "snippet": "  private JSDocInfo parseJSDocInfo(String comment, int lineno, int position) {\n    return parseJSDocInfo(comment, lineno, position, null, null);\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.parseJSDocInfo#256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.parseJSDocInfo(java.lang.String, int, int, com.google.javascript.rhino.Node.FileLevelJsDocBuilder, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private JSDocInfo parseJSDocInfo(String comment, int lineno, int position,\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder,\n      JSDocInfo fileOverviewInfo) {\n    // The JsDocInfoParser expects the comment without the initial '/**'.\n    int numOpeningChars = 3;\n    JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          sourceName,\n          config,\n          errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    if (fileLevelJsDocBuilder != null) {\n      return jsdocParser.getFileOverviewJSDocInfo();\n    } else {\n      return jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n  }\n",
        "begin_line": 256,
        "end_line": 277,
        "comment": "\n   * Parse a JsDoc string into a JSDocInfo.\n   *\n   * Used both for handling individual JSDoc comments (when it returns the new\n   * JSDocInfo for the node) and for handling file-level JSDoc comments\n   * (@fileoverview and @license).  In this second case, it returns a\n   * JSDocInfo if it found another @fileoverview, or null if not.  Also in\n   * the second case, all @license text found gets shoved into the\n   * fileLevelJsDocBuilder object.\n   *\n   * @param comment The JsDoc comment to parse.\n   * @param lineno The line number of the node this comment is attached to.\n   * @param fileLevelJsDocBuilder The builder for file-level JSDocInfo. If not\n   *     null, this method parses to a fileOverview JSDocInfo as opposed to a\n   *     node-level one.\n   * @param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n   *     parser may warn if another @fileoverview is found. May be null.\n   * @return A JSDocInfo. May be null if the method parses to the wrong level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0799
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.transformTree#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n    // @license text gets appended onto the fileLevelJsDocBuilder as found,\n    // and stored straight into the JSDocInfo for the root node.\n    Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n        irNode.getJsDocBuilderForNode();\n    // fileOverviewInfo stores the last bit of fileoverview data we saw.\n    // We only permit one, so throwing away extras is fair.\n    // The fileOverviewInfo gets passed into parseJSDocInfo so that\n    // it can detect when multiple @fileoverviews exist in the same file.\n    JSDocInfo fileOverviewInfo = null;\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == JSDOC &&\n            (comment.getValue().contains(\"@fileoverview\") ||\n             comment.getValue().contains(\"@preserve\") ||\n             comment.getValue().contains(\"@license\"))) {\n          JSDocInfo info = irFactory.parseJSDocInfo(comment.getValue(),\n              comment.getLineno(), comment.getAbsolutePosition(),\n              fileLevelJsDocBuilder, fileOverviewInfo);\n          if (info != null && fileOverviewInfo == null) {\n            fileOverviewInfo = info;\n          }\n        }\n      }\n\n      // Only after we've seen all @fileoverview entries, attach the\n      // last one to the root node, and copy the found license strings\n      // to that node.\n      if (fileOverviewInfo != null) {\n        if ((irNode.getJSDocInfo() != null) &&\n            (irNode.getJSDocInfo().getLicense() != null)) {\n          fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n        }\n        irNode.setJSDocInfo(fileOverviewInfo);\n      }\n\n      Comment[] comments = new Comment[node.getComments().size()];\n      comments = node.getComments().toArray(comments);\n      irFactory.parseAllJsDocInfo(irNode, comments, 0);\n    }\n    return irNode;\n  }\n",
        "begin_line": 106,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0797
        },
        "num_failing_tests": 4
    },
    {
        "name": "CombinedCompilerPass.visitOrMaybeActivate#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.visitOrMaybeActivate(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void visitOrMaybeActivate(NodeTraversal t, Node n, Node parent) {\n      if (isActive()) {\n        callback.visit(t, n, parent);\n      } else if (waiting == n) {\n        waiting = null;\n      }\n    }\n",
        "begin_line": 105,
        "end_line": 111,
        "comment": "\n     * Visits the node unless the wrapped callback is inactive. Activates the\n     * callback if appropriate. \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.shouldTraverseIfActive#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.shouldTraverseIfActive(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void shouldTraverseIfActive(NodeTraversal t, Node n, Node parent) {\n      if (isActive() && !callback.shouldTraverse(t, n, parent)) {\n        waiting = n;\n      }\n    }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.enterScopeIfActive#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.enterScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void enterScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.enterScope(t);\n      }\n    }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.exitScopeIfActive#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.exitScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void exitScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.exitScope(t);\n      }\n    }\n",
        "begin_line": 125,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.isActive#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.isActive()",
        "snippet": "    boolean isActive() {\n      return waiting == null;\n    }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.CombinedCompilerPass#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CombinedCompilerPass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback...)",
        "snippet": "  CombinedCompilerPass(\n      AbstractCompiler compiler, Callback... callbacks) {\n    this.compiler = compiler;\n    this.callbacks = new CallbackWrapper[callbacks.length];\n    for (int i = 0; i < callbacks.length; i++) {\n      this.callbacks[i] = new CallbackWrapper(callbacks[i]);\n    }\n  }\n",
        "begin_line": 56,
        "end_line": 63,
        "comment": "\n   * Creates a combined compiler pass.\n   * @param compiler the compiler\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.process#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public final void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 136,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.shouldTraverse#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.shouldTraverseIfActive(t, n, parent);\n    }\n    // Note that this method could return false if all callbacks are inactive.\n    // This apparent optimization would make this method more expensive\n    // in the typical case where not all nodes are inactive. It is\n    // very unlikely that many all callbacks would be inactive at the same\n    // time (indeed, there are several checking passes that never return false).\n    return true;\n  }\n",
        "begin_line": 141,
        "end_line": 152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.visit#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.visitOrMaybeActivate(t, n, parent);\n    }\n  }\n",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.enterScope#161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.enterScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 161,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.exitScope#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.exitScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventionAnnotator.visit#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n      case Token.STRING:\n        if (convention.isConstant(n.getString())) {\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n        break;\n\n      case Token.FUNCTION:\n        JSDocInfo fnInfo = n.getJSDocInfo();\n        if (fnInfo == null) {\n          // Look for the info on other nodes.\n          if (parent.getType() == Token.ASSIGN) {\n            // on ASSIGNs\n            fnInfo = parent.getJSDocInfo();\n          } else if (parent.getType() == Token.NAME) {\n            // on var NAME = function() { ... };\n            fnInfo = parent.getParent().getJSDocInfo();\n          }\n        }\n\n        // Compute which function parameters are optional and\n        // which are var_args.\n        Node args = n.getFirstChild().getNext();\n        for (Node arg = args.getFirstChild();\n             arg != null;\n             arg = arg.getNext()) {\n          String argName = arg.getString();\n          JSTypeExpression typeExpr = fnInfo == null ?\n              null : fnInfo.getParameterType(argName);\n\n          if (convention.isOptionalParameter(arg) ||\n              typeExpr != null && typeExpr.isOptionalArg()) {\n            arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);\n          }\n          if (convention.isVarArgsParameter(arg) ||\n              typeExpr != null && typeExpr.isVarArgs()) {\n            arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);\n          }\n        }\n        break;\n    }\n  }\n",
        "begin_line": 52,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0758
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isExpressionNode#720",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExpressionNode(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExpressionNode(Node n) {\n    return n.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 720,
        "end_line": 722,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0743
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processObjectLiteral#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processObjectLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral)",
        "snippet": "    @Override\n    Node processObjectLiteral(ObjectLiteral literalNode) {\n      if (literalNode.isDestructuring()) {\n        reportDestructuringAssign(literalNode);\n      }\n\n      Node node = new Node(Token.OBJECTLIT);\n      for (ObjectProperty el : literalNode.getElements()) {\n        node.addChildToBack(transformAsString(el.getLeft()));\n        node.addChildToBack(transform(el.getRight()));\n      }\n      return node;\n    }\n",
        "begin_line": 606,
        "end_line": 618,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0743
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTypeNormalizer.normalizeJsDocAnnotations#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.normalizeJsDocAnnotations(com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeJsDocAnnotations(Node n) {\n    if (n.getType() == Token.OBJECTLIT) {\n      for (Node key = n.getFirstChild();\n           key != null; key = key.getNext().getNext()) {\n        Node value = key.getNext();\n        if (key.getJSDocInfo() != null &&\n            key.getNext().getType() == Token.FUNCTION) {\n          value.setJSDocInfo(key.getJSDocInfo());\n        }\n      }\n    }\n\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n      normalizeJsDocAnnotations(child);\n    }\n  }\n",
        "begin_line": 68,
        "end_line": 84,
        "comment": "\n   * Normalize where JSDoc annotations appear on the AST.\n   *\n   * In the AST that Rhino gives us, it needs to make a distinction\n   * between jsdoc on the object literal node and jsdoc on the object literal\n   * value. For example,\n   * <pre>\n   * var x = {\n   *   / JSDOC /\n   *   a: 'b',\n   *   c: / JSDOC / 'd'\n   * };\n   * </pre>\n   *\n   * But in few narrow cases (in particular, function literals), it's\n   * a lot easier for us if the doc is attached to the value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0743
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processFunctionNode#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode)",
        "snippet": "   @Override\n  Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = new com.google.javascript.rhino.FunctionNode(\n          name.getIdentifier());\n      node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(user) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = new Node(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(user): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n      node.addChildToBack(transform(functionNode.getBody()));\n     return node;\n    }\n",
        "begin_line": 484,
        "end_line": 533,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.074
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isStatement#960",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    Node parent = n.getParent();\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node, for instance,\n    // is either part of an expression (as a anonymous function) or as\n    // a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 960,
        "end_line": 975,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0729
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverseFunction#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous(n);\n\n    if (!anonymous) {\n      // Named functions are parent of the containing scope.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (anonymous) {\n      // Anonymous function names are parent of the contained scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 483,
        "end_line": 516,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0716
        },
        "num_failing_tests": 4
    },
    {
        "name": "GoogleCodingConvention.isConstant#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstant(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstant(String name) {\n    if (name.length() <= 1) {\n      return false;\n    }\n\n    // In compiled code, '$' is often a namespace delimiter. To allow inlining\n    // of namespaced constants, we strip off any namespaces here.\n    int pos = name.lastIndexOf('$');\n    if (pos >= 0) {\n      name = name.substring(pos + 1);\n      if (name.length() == 0) {\n        return false;\n      }\n    }\n\n    if (!Character.isUpperCase(name.charAt(0))) {\n      return false;\n    }\n\n    // hack way of checking that there aren't any lower-case letters\n    return name.toUpperCase().equals(name);\n  }\n",
        "begin_line": 59,
        "end_line": 81,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>This enforces the Google const name convention, that the first character\n   * after the last $ must be an upper-case letter and all subsequent letters\n   * must be upper case. The name must be at least 2 characters long.\n   *\n   * <p>Examples:\n   * <pre>\n   *      aaa          Not constant - lower-case letters in the name\n   *      A            Not constant - too short\n   *      goog$A       Constant - letters after the $ are upper-case.\n   *      AA17         Constant - digits can appear after the first letter\n   *      goog$7A      Not constant - first character after the $ must be\n   *                   upper case.\n   *      $A           Constant - doesn't have to be anything in front of the $\n   * </pre>\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.ClosureCodingConvention": ""
        },
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSError.make#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(NodeTraversal t, Node n,\n      CheckLevel level, DiagnosticType type, String... arguments) {\n    return new JSError(t.getSourceName(), n.getLineno(), n.getCharno(), type,\n        level, arguments);\n  }\n",
        "begin_line": 137,
        "end_line": 141,
        "comment": "\n   * Creates a JSError during NodeTraversal.\n   *\n   * @param t Determines source file name containing current script\n   * @param n Determines the line and char position within the source file name\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 1
    },
    {
        "name": "CollapseProperties.flattenNameRefAtDepth#393",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.flattenNameRefAtDepth(java.lang.String, com.google.javascript.rhino.Node, int, java.lang.String)",
        "snippet": "  private void flattenNameRefAtDepth(String alias, Node n, int depth,\n      String originalName) {\n    // This method has to work for both GETPROP chains and, in rare cases,\n    // OBJLIT keys, possibly nested. That's why we check for children before\n    // proceeding. In the OBJLIT case, we don't need to do anything.\n    for (int i = 1; i < depth && n.hasChildren(); i++) {\n      n = n.getFirstChild();\n    }\n    if (n.hasChildren()) {\n      flattenNameRef(alias, n.getFirstChild(), n, originalName);\n    }\n  }\n",
        "begin_line": 393,
        "end_line": 404,
        "comment": "\n   * Flattens a particular prefix of a single name reference.\n   *\n   * @param alias A flattened prefix name (e.g. \"a$b\")\n   * @param n The node corresponding to a subproperty name (e.g. \"a.b.c.d\")\n   * @param depth The difference in depth between the property name and\n   *    the prefix name (e.g. 2)\n   * @param originalName String version of the property name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0707
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.isOptionalParameter#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isOptionalParameter(Node parameter) {\n    return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, parameter names beginning with {@code opt_} are\n   * treated as optional arguments.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.ClosureCodingConvention": "\n   * {@inheritDoc}\n   *\n   * <p>Understands several different inheritance patterns that occur in\n   * Google code (various uses of {@code inherits} and {@code mixin}).\n   ",
            "com.google.javascript.jscomp.DefaultCodingConvention": ""
        },
        "susp": {
            "ochiai_susp": 0.0704
        },
        "num_failing_tests": 3
    },
    {
        "name": "GoogleCodingConvention.isVarArgsParameter#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return VAR_ARGS_NAME.equals(parameter.getString());\n  }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0704
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processGeneric#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n) {\n      Node node = new Node(transformTokenType(n.getType()));\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 294,
        "end_line": 301,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0695
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isObjectLitKey#1239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isObjectLitKey(Node node, Node parent) {\n    if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT) {\n      int index = 0;\n      for (Node current = parent.getFirstChild();\n           current != null;\n           current = current.getNext()) {\n        if (current == node) {\n          return index % 2 == 0;\n        }\n        index++;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 1239,
        "end_line": 1252,
        "comment": "\n   * Determines whether a node represents an object literal key\n   * (e.g. key1 in {key1: value1, key2: value2}).\n   *\n   * @param node A node\n   * @param parent The node's parent\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.069
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfoBuilder.recordConstructor#568",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConstructor()",
        "snippet": "  public boolean recordConstructor() {\n    if (!hasAnySingletonTypeTags() &&\n        !currentInfo.isConstructor() && !currentInfo.isInterface()) {\n      currentInfo.setConstructor(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 568,
        "end_line": 577,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isConstructor()} flag set to {@code true}.\n   *\n   * @return {@code true} if the constructor was recorded and {@code false}\n   *     if it was already defined or it was incompatible with the existing\n   *     flags\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0685
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.setConstructor#242",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setConstructor(boolean)",
        "snippet": "  void setConstructor(boolean value) {\n    setFlag(value, MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0685
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.SiblingNodeIterable#1179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.SiblingNodeIterable(com.google.javascript.rhino.Node)",
        "snippet": "        SiblingNodeIterable(Node start) {\n          this.start = start;\n          this.current = start;\n          this.used = false;\n        }\n",
        "begin_line": 1179,
        "end_line": 1183,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0683
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.iterator#1185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.iterator()",
        "snippet": "        public Iterator<Node> iterator() {\n          if (!used) {\n            used = true;\n            return this;\n          } else {\n            // We have already used the current object as an iterator;\n            // we must create a new SiblingNodeIterable based on this\n            // iterable's start node.\n            //\n            // Since the primary use case for Node.children is in for\n            // loops, this branch is extremely unlikely.\n            return (new SiblingNodeIterable(start)).iterator();\n          }\n        }\n",
        "begin_line": 1185,
        "end_line": 1198,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0683
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.hasNext#1200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.hasNext()",
        "snippet": "        public boolean hasNext() {\n            return current != null;\n        }\n",
        "begin_line": 1200,
        "end_line": 1202,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0683
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.next#1204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.next()",
        "snippet": "        public Node next() {\n            if (current == null) {\n              throw new NoSuchElementException();\n            }\n            try {\n                return current;\n            } finally {\n                current = current.getNext();\n            }\n        }\n",
        "begin_line": 1204,
        "end_line": 1213,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0683
        },
        "num_failing_tests": 4
    },
    {
        "name": "CollapseProperties.updateSimpleDeclaration#473",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "signature": "com.google.javascript.jscomp.CollapseProperties.updateSimpleDeclaration(java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "  private void updateSimpleDeclaration(String alias, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(alias, gramps.getFirstChild(),\n        alias.replace(\"$\", \".\"));\n    if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {\n      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree());\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }\n",
        "begin_line": 473,
        "end_line": 535,
        "comment": "\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.068
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.shouldTraverse#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      // We do want to traverse the name of a named function, but we don't\n      // want to traverse the arguments or body.\n      return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild();\n    }\n",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0678
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.addChildrenToFront#584",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildrenToFront(com.google.javascript.rhino.Node)",
        "snippet": "    public void addChildrenToFront(Node children) {\n        for (Node child = children; child != null; child = child.next) {\n          Preconditions.checkArgument(child.parent == null);\n          child.parent = this;\n        }\n        Node lastSib = children.getLastSibling();\n        lastSib.next = first;\n        first = children;\n        if (last == null) {\n            last = lastSib;\n        }\n    }\n",
        "begin_line": 584,
        "end_line": 595,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0668
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processPropertyGet#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processPropertyGet(com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet)",
        "snippet": "    @Override\n    Node processPropertyGet(PropertyGet getNode) {\n      return new Node(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));\n    }\n",
        "begin_line": 632,
        "end_line": 638,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0664
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.transformAsString#312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.transformAsString(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "    private Node transformAsString(AstNode n) {\n      Node ret = transform(n);\n      if (ret.getType() == Token.STRING) {\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      } else if (ret.getType() == Token.NAME) {\n        ret.setType(Token.STRING);\n      }\n      return ret;\n    }\n",
        "begin_line": 312,
        "end_line": 320,
        "comment": "\n     * Transforms the given node and then sets its type to Token.STRING if it\n     * was Token.NAME. If its type was already Token.STRING, then quotes it.\n     * Used for properties, as the old AST uses String tokens, while the new one\n     * uses Name tokens for unquoted strings. For example, in\n     * var o = {'a' : 1, b: 2};\n     * the string 'a' is quoted, while the name b is turned into a string, but\n     * unquoted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.reportCodeChange#1771",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reportCodeChange()",
        "snippet": "  @Override\n  public void reportCodeChange() {\n    for (CodeChangeHandler handler : codeChangeHandlers) {\n      handler.reportChange();\n    }\n  }\n",
        "begin_line": 1771,
        "end_line": 1776,
        "comment": "\n   * All passes should call reportCodeChange() when they alter\n   * the JS tree structure. This is verified by CompilerTestCase.\n   * This allows us to optimize to a fixed point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0657
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeChangeHandler.reportChange#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reportChange()",
        "snippet": "    public void reportChange() {\n      hasChanged = true;\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0657
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionNode.FunctionNode#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "signature": "com.google.javascript.rhino.FunctionNode.FunctionNode(java.lang.String)",
        "snippet": "    public FunctionNode(String name) {\n        super(Token.FUNCTION);\n        functionName = name;\n    }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0653
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isFunctionAnonymous#1148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionAnonymous(Node n) {\n    return !isStatement(n);\n  }\n",
        "begin_line": 1148,
        "end_line": 1150,
        "comment": "\n   * Is a FUNCTION node an anonymous function? An anonymous function is one that\n   * has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of anonymous functions:\n   * <pre>\n   * function () {}\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> anonymous:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A FUNCTION node\n   * @return Whether n is an anonymous function\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0653
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTypeNormalizer.normalizeNodeTypes#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.normalizeNodeTypes(com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeNodeTypes(Node n) {\n    if (n.getType() == Token.EXPR_VOID) {\n      n.setType(Token.EXPR_RESULT);\n      reportChange();\n    }\n\n    // Remove unused properties to minimize differences between ASTs\n    // produced by the two parsers.\n    if (n.getType() == Token.FUNCTION) {\n      n.removeProp(Node.FUNCTION_PROP);\n      reportChange();\n    }\n\n    normalizeBlocks(n);\n\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n      // This pass is run during the CompilerTestCase validation, so this\n      // parent pointer check serves as a more general check.\n      Preconditions.checkState(child.getParent() == n);\n\n      normalizeNodeTypes(child);\n    }\n  }\n",
        "begin_line": 89,
        "end_line": 112,
        "comment": "\n   * Covert EXPR_VOID to EXPR_RESULT to simplify the rest of the code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0653
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverseBranch#441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 3);\n        Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);\n        // the first child is the catch var and the third child\n        // is the code block\n        traverseBranch(n.getFirstChild(), n);\n        traverseBranch(n.getFirstChild().getNext().getNext(), n);\n        break;\n\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 441,
        "end_line": 478,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0653
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processBlock#369",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.065
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTypeNormalizer.reportChange#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.reportChange()",
        "snippet": "  private void reportChange() {\n    if (changeHandler != null) {\n      changeHandler.reportChange();\n    }\n  }\n",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0646
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setType#511",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setType(int)",
        "snippet": "    public void setType(int type) {\n        this.type = type;\n    }\n",
        "begin_line": 511,
        "end_line": 513,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0643
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfo.isInterface#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isInterface()",
        "snippet": "  public boolean isInterface() {\n    return getFlag(MASK_INTERFACE);\n  }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "\n   * Returns whether the {@code @interface} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0642
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.mergeLineCharNo#1102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "    protected static int mergeLineCharNo(int lineno, int charno) {\n      if (lineno < 0 || charno < 0) {\n        return -1;\n      } else if ((charno & ~COLUMN_MASK) != 0) {\n        return lineno << COLUMN_BITS | COLUMN_MASK;\n      } else {\n        return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n      }\n    }\n",
        "begin_line": 1102,
        "end_line": 1110,
        "comment": "\n     * Merges the line number and character number in one integer. The Character\n     * number takes the first 12 bits and the line number takes the rest. If\n     * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n     * adjusted to <code>2<sup>12</sup>-1</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonTypeTags#764",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonTypeTags()",
        "snippet": "  private boolean hasAnySingletonTypeTags() {\n    return currentInfo.hasType() ||\n        currentInfo.hasTypedefType() ||\n        currentInfo.hasEnumParameterType();\n  }\n",
        "begin_line": 764,
        "end_line": 768,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getQualifiedName#1625",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getQualifiedName()",
        "snippet": "    public String getQualifiedName() {\n        if (type == Token.NAME) {\n            return getString();\n        } else if (type == Token.GETPROP) {\n            String left = getFirstChild().getQualifiedName();\n            if (left == null) {\n              return null;\n            }\n            return left + \".\" + getLastChild().getString();\n        } else if (type == Token.THIS) {\n             return \"this\";\n        } else {\n            return null;\n\n        }\n\n    }\n",
        "begin_line": 1625,
        "end_line": 1641,
        "comment": "\n     * This function takes a set of GETPROP nodes and produces a string that is\n     * each property separated by dots.  If the node ultimately under the left\n     * sub-tree is not a simple name, this is not a valid qualified name.\n     *\n     * @return a null if this is not a qualified name, or a dot-separated string\n     * of the name and properties.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.hasTypedefType#822",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasTypedefType()",
        "snippet": "  public boolean hasTypedefType() {\n    return hasType(TYPEFIELD_TYPEDEF);\n  }\n",
        "begin_line": 822,
        "end_line": 824,
        "comment": "\n   * Returns whether a typedef parameter type, specified using the\n   * {@code @typedef} annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.isConstructor#315",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConstructor()",
        "snippet": "  public boolean isConstructor() {\n    return getFlag(MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 315,
        "end_line": 317,
        "comment": "\n   * Returns whether the {@code @constructor} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.hasType#806",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType()",
        "snippet": "  public boolean hasType() {\n    return hasType(TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 806,
        "end_line": 808,
        "comment": "\n   * Returns whether a type, specified using the {@code @type} annotation, is\n   * present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getLastSibling#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastSibling()",
        "snippet": "    public Node getLastSibling() {\n        Node n = this;\n        while (n.next != null) {\n            n = n.next;\n        }\n        return n;\n    }\n",
        "begin_line": 552,
        "end_line": 558,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0635
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setFlag#295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setFlag(boolean, int)",
        "snippet": "  private void setFlag(boolean value, int mask) {\n    if (value) {\n      bitset |= mask;\n    } else {\n      bitset &= ~mask;\n    }\n  }\n",
        "begin_line": 295,
        "end_line": 301,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0621
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.getFirstNonEmptyChild#849",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(com.google.javascript.rhino.Node)",
        "snippet": "  private static Node getFirstNonEmptyChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() != Token.EMPTY) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 849,
        "end_line": 856,
        "comment": " Gets the first non-empty child of the given node. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.062
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#1971",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL()",
        "snippet": "  private JsDocToken eatTokensUntilEOL() {\n    return eatTokensUntilEOL(next());\n  }\n",
        "begin_line": 1971,
        "end_line": 1973,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0618
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#1979",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private JsDocToken eatTokensUntilEOL(JsDocToken token) {\n    do {\n      if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF) {\n        state = State.SEARCHING_ANNOTATION;\n        return token;\n      }\n      token = next();\n    } while (true);\n  }\n",
        "begin_line": 1979,
        "end_line": 1988,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.getModule#410",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getModule()",
        "snippet": "  public JSModule getModule() {\n    CompilerInput input = getInput();\n    return input == null ? null : input.getModule();\n  }\n",
        "begin_line": 410,
        "end_line": 413,
        "comment": "\n   * Gets the current input module.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0611
        },
        "num_failing_tests": 3
    },
    {
        "name": "CompilerInput.getModule#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getModule()",
        "snippet": "  public JSModule getModule() {\n    return module;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": " Returns the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0611
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processExpressionStatement#443",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = new Node(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 443,
        "end_line": 448,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.defineProperty#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      boolean inExterns) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, inExterns);\n  }\n",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0606
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroups.registerGroup#34",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#30",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 67,
        "end_line": 75,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    this.guards = new PriorityQueue<WarningsGuard>(\n        5,\n        new Comparator<WarningsGuard>() {\n      @Override\n      public int compare(WarningsGuard a, WarningsGuard b) {\n        return a.getPriority() - b.getPriority();\n      }\n    });\n    addGuards(guards);\n  }\n",
        "begin_line": 39,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.addGuard#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      addGuards(((ComposeWarningsGuard) guard).guards);\n    } else {\n      this.guards.add(guard);\n    }\n  }\n",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "ComposeWarningsGuard.addGuards#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.setWarningLevel#714",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 714,
        "end_line": 716,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.addWarningsGuard#729",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    if (warningsGuard == null) {\n      warningsGuard = new ComposeWarningsGuard(guard);\n    } else {\n      warningsGuard.addGuard(guard);\n    }\n  }\n",
        "begin_line": 729,
        "end_line": 735,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSDocInfoBuilder.populateDefaults#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private static void populateDefaults(JSDocInfo info) {\n    if (info.getVisibility() == null) {\n      info.setVisibility(Visibility.INHERITED);\n    }\n  }\n",
        "begin_line": 121,
        "end_line": 125,
        "comment": " Generate defaults when certain parameters are not specified. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0602
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfoBuilder.markAnnotation#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markAnnotation(java.lang.String, int, int)",
        "snippet": "  public void markAnnotation(String annotation, int lineno, int charno) {\n    JSDocInfo.Marker marker = currentInfo.addMarker();\n\n    if (marker != null) {\n      marker.annotation = new JSDocInfo.StringPosition();\n      marker.annotation.setItem(annotation);\n      marker.annotation.setPositionInformation(lineno, charno, lineno,\n                                               charno + annotation.length());\n    }\n\n    currentMarker = marker;\n  }\n",
        "begin_line": 131,
        "end_line": 142,
        "comment": "\n   * Adds a marker to the current JSDocInfo and populates the marker with the\n   * annotation information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.getFlag#416",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getFlag(int)",
        "snippet": "  private boolean getFlag(int mask) {\n    return (bitset & mask) != 0x00;\n  }\n",
        "begin_line": 416,
        "end_line": 418,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.setVisibility#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)",
        "snippet": "  public void setVisibility(Visibility visibility) {\n    this.visibility = visibility;\n  }\n",
        "begin_line": 421,
        "end_line": 423,
        "comment": " Visible for testing.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.addMarker#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.addMarker()",
        "snippet": "  Marker addMarker() {\n    if (!lazyInitDocumentation()) {\n      return null;\n    }\n\n    if (documentation.markers == null) {\n      documentation.markers = Lists.newArrayList();\n    }\n\n    Marker marker = new Marker();\n    documentation.markers.add(marker);\n    return marker;\n  }\n",
        "begin_line": 451,
        "end_line": 463,
        "comment": "\n   * Adds a marker to the documentation (if it exists) and\n   * returns the marker. Returns null otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.getVisibility#705",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getVisibility()",
        "snippet": "  public Visibility getVisibility() {\n    return visibility;\n  }\n",
        "begin_line": 705,
        "end_line": 707,
        "comment": "\n   * Gets the visibility specified by {@code @private}, {@code @protected} or\n   * {@code @public} annotation. If no visibility is specified, visibility\n   * is inherited from the base class.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.hasEnumParameterType#814",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasEnumParameterType()",
        "snippet": "  public boolean hasEnumParameterType() {\n    return hasType(TYPEFIELD_ENUM);\n  }\n",
        "begin_line": 814,
        "end_line": 816,
        "comment": "\n   * Returns whether an enum parameter type, specified using the {@code @enum}\n   * annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.hasType#834",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType(int)",
        "snippet": "  private boolean hasType(int mask) {\n    return (bitset & MASK_TYPEFIELD) == mask;\n  }\n",
        "begin_line": 834,
        "end_line": 836,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.hasFileOverview#1089",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasFileOverview()",
        "snippet": "  public boolean hasFileOverview() {\n    return getFlag(MASK_FILEOVERVIEW);\n  }\n",
        "begin_line": 1089,
        "end_line": 1091,
        "comment": "\n   * Returns whether this has a fileoverview flag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfo.setSourceName#1111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setSourceName(java.lang.String)",
        "snippet": "  void setSourceName(String sourceName) {\n    this.sourceName = sourceName;\n  }\n",
        "begin_line": 1111,
        "end_line": 1113,
        "comment": " Sets the name of the source file that contains this JSDoc. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocTokenStream.getLineno#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getLineno()",
        "snippet": "  final int getLineno() { return lineno; }\n",
        "begin_line": 228,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocTokenStream.getCharno#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharno()",
        "snippet": "  final int getCharno() {\n    return lineno == initLineno? initCharno + charno : charno;\n  }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocTokenStream.isAlpha#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isAlpha(int)",
        "snippet": "  private static boolean isAlpha(int c) {\n    // Use 'Z' < 'a'\n    if (c <= 'Z') {\n      return 'A' <= c;\n    } else {\n      return 'a' <= c && c <= 'z';\n    }\n  }\n",
        "begin_line": 272,
        "end_line": 279,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "NullType.visit#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.visit(com.google.javascript.rhino.jstype.Visitor<T>)",
        "snippet": "  @Override\n  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseNullType();\n  }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0599
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createNullableType#760",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 760,
        "end_line": 762,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0599
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.caseNullType#863",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.Anonymous-657ec656-fb70-4916-acdc-bb05aa431a79.caseNullType()",
        "snippet": "        public List<ObjectType> caseNullType() {\n          return ImmutableList.of();\n        }\n",
        "begin_line": 863,
        "end_line": 865,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0599
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.Property#413",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.Property.Property(com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "    private Property(JSType type, boolean inferred, boolean inExterns) {\n      this.type = type;\n      this.inferred = inferred;\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 413,
        "end_line": 417,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0594
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0594
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.defineProperty#217",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      boolean inExterns) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    properties.put(name, new Property(type, inferred, inExterns));\n    return true;\n  }\n",
        "begin_line": 217,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0594
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#333",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0594
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#689",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 689,
        "end_line": 691,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0594
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.cloneTree#1765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "    public Node cloneTree() {\n        Node result = cloneNode();\n        for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n            Node n2clone = n2.cloneTree();\n            n2clone.parent = result;\n            if (result.last != null) {\n                result.last.next = n2clone;\n            }\n            if (result.first == null) {\n                result.first = n2clone;\n            }\n            result.last = n2clone;\n        }\n        return result;\n    }\n",
        "begin_line": 1765,
        "end_line": 1779,
        "comment": "\n     * @return A detached clone of the Node and all its children.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.059
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.cloneNode#1747",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "    public Node cloneNode() {\n        Node result;\n        try {\n            result = (Node) super.clone();\n            result.next = null;\n            result.first = null;\n            result.last = null;\n            result.parent = null;\n        }\n        catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e.getMessage());\n        }\n        return result;\n    }\n",
        "begin_line": 1747,
        "end_line": 1760,
        "comment": "\n     * @return A detached clone of the Node, specifically excluding its\n     * children.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.059
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.setCodingConvention#1783",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention convention) {\n    Preconditions.checkState(convention != null);\n    codingConvention = convention;\n  }\n",
        "begin_line": 1783,
        "end_line": 1786,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0589
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.mayHaveSideEffects#342",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean mayHaveSideEffects(Node n) {\n    return checkForStateChangeHelper(n, false);\n  }\n",
        "begin_line": 342,
        "end_line": 344,
        "comment": "\n   * Returns true if the node which may have side effects when executed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0589
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeChangeHandler.reset#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reset()",
        "snippet": "    void reset() {\n      hasChanged = false;\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0589
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.extractCharno#1128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "    protected static int extractCharno(int lineCharNo) {\n      if (lineCharNo == -1) {\n        return -1;\n      } else {\n        return lineCharNo & COLUMN_MASK;\n      }\n    }\n",
        "begin_line": 1128,
        "end_line": 1134,
        "comment": "\n     * Extracts the character number and character number from a merged line\n     * char number (see {@link #mergeLineCharNo(int, int)}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0584
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.init#251",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n    externs_ = makeCompilerInput(externs, true);\n    modules_ = null;\n    moduleGraph_ = null;\n    inputs_ = makeCompilerInput(inputs, false);\n    options_ = options;\n\n    initInputsByNameMap();\n  }\n",
        "begin_line": 251,
        "end_line": 260,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.initInputsByNameMap#379",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByNameMap()",
        "snippet": "  void initInputsByNameMap() {\n    inputsByName_ = new HashMap<String, CompilerInput>();\n    for (CompilerInput input : externs_) {\n      String name = input.getName();\n      if (!inputsByName_.containsKey(name)) {\n        inputsByName_.put(name, input);\n      } else {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n      }\n    }\n    for (CompilerInput input : inputs_) {\n      String name = input.getName();\n      if (!inputsByName_.containsKey(name)) {\n        inputsByName_.put(name, input);\n      } else {\n        report(JSError.make(DUPLICATE_INPUT, name));\n      }\n    }\n  }\n",
        "begin_line": 379,
        "end_line": 397,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.parseInputs#972",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options_.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main js sources.\n    jsRoot = new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n\n    if (options_.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot,\n          options_.tracer == TracerMode.ALL);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      externsRoot = new Node(Token.BLOCK);\n      externsRoot.setIsSyntheticBlock(true);\n      for (CompilerInput input : externs_) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      for (CompilerInput input : inputs_) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n\n        // Inputs can have a null AST during initial parse.\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          sanityCheck.create(this).process(null, n);\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options_.sourceMapOutputPath != null ||\n            options_.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(input.getName());\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);\n      externAndJsRoot.setIsSyntheticBlock(true);\n\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }\n",
        "begin_line": 972,
        "end_line": 1046,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.disabled#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.makeCompilerInput#295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(com.google.javascript.jscomp.JSSourceFile[], boolean)",
        "snippet": "  private CompilerInput[] makeCompilerInput(\n      JSSourceFile[] files, boolean isExtern) {\n    CompilerInput [] inputs = new CompilerInput[files.length];\n    for (int i = 0; i < files.length; ++i) {\n      inputs[i] = new CompilerInput(files[i], isExtern);\n    }\n    return inputs;\n  }\n",
        "begin_line": 295,
        "end_line": 302,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getErrors#821",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.hasHaltingErrors#1850",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 1850,
        "end_line": 1853,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.hasErrors#1864",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 1864,
        "end_line": 1866,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.getErrors#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.toArray#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (Pair<JSError, CheckLevel> p : messages) {\n      if (p.second == level) {\n        errors.add(p.first);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 99,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0582
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getChildCount#1298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "    public int getChildCount() {\n        int c = 0;\n        for (Node n = first; n != null; n = n.next)\n            c++;\n\n        return c;\n    }\n",
        "begin_line": 1298,
        "end_line": 1304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0581
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getJSDocInfo#1842",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "    public JSDocInfo getJSDocInfo()\n    {\n        return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n    }\n",
        "begin_line": 1842,
        "end_line": 1845,
        "comment": "\n     * Get the {@link JSDocInfo} attached to this node.\n     * @return the information or {@code null} if no JSDoc is attached to this\n     * node\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0581
        },
        "num_failing_tests": 4
    },
    {
        "name": "ParserRunner.initAnnotationNames#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initAnnotationNames()",
        "snippet": "  private static synchronized void initAnnotationNames() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    Set<String> trimmedNames = Sets.newHashSet();\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    String[] names = config.getString(\"jsdoc.annotations\").split(\",\");\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    annotationNames = ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 54,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.058
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getErrorCount#1839",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 1839,
        "end_line": 1841,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.058
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getProp#749",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "    public Object getProp(int propType)\n    {\n        PropListItem item = lookupProperty(propType);\n        if (item == null) { return null; }\n        return item.objectValue;\n    }\n",
        "begin_line": 749,
        "end_line": 754,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0579
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.Node#359",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public Node(int nodeType, Node left, Node right) {\n        Preconditions.checkArgument(left.parent == null,\n            \"first new child has existing parent\");\n        Preconditions.checkArgument(left.next == null,\n            \"first new child has existing sibling\");\n        Preconditions.checkArgument(right.parent == null,\n            \"second new child has existing parent\");\n        Preconditions.checkArgument(right.next == null,\n            \"second new child has existing sibling\");\n        type = nodeType;\n        parent = null;\n        first = left;\n        last = right;\n        left.next = right;\n        left.parent = this;\n        right.next = null;\n        right.parent = this;\n        sourcePosition = -1;\n    }\n",
        "begin_line": 359,
        "end_line": 377,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0578
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processName#590",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return Node.newString(Token.NAME, nameNode.getIdentifier());\n    }\n",
        "begin_line": 590,
        "end_line": 593,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "VoidType.VoidType#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "VoidType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"undefined\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueType.ValueType#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueType.isSubtype#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    return JSType.isSubtype(this, that);\n  }\n",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnknownType.UnknownType#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.addAlternate#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate instanceof UnionType) {\n        UnionType union = (UnionType) alternate;\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (!alternate.isUnknownType()) {\n          Iterator<JSType> it = alternates.iterator();\n          while (it.hasNext()) {\n            JSType current = it.next();\n            if (!current.isUnknownType()) {\n              if (alternate.isSubtype(current)) {\n                // Alternate is unnecessary.\n                return this;\n              } else if (current.isSubtype(alternate)) {\n                // Alternate makes current obsolete\n                it.remove();\n              }\n            }\n          }\n        }\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 85,
        "end_line": 129,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionTypeBuilder.build#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      if (isAllType) {\n        result = registry.getNativeType(ALL_TYPE);\n      } else if (isNativeUnknownType) {\n        if (areAllUnknownsChecked) {\n          result = registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n        } else {\n          result = registry.getNativeType(UNKNOWN_TYPE);\n        }\n      } else {\n        Set<JSType> alternateSet = Sets.newUnmodifiableHashSet(alternates);\n        int size = alternateSet.size();\n        if (size > MAX_UNION_SIZE) {\n          result = registry.getNativeType(UNKNOWN_TYPE);\n        } else {\n          if (size > 1) {\n            result = new UnionType(registry, alternateSet);\n          } else if (size == 1) {\n            result = alternates.iterator().next();\n          } else {\n            result = registry.getNativeType(NO_TYPE);\n          }\n        }\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 136,
        "end_line": 163,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "UnionType.UnionType#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Set<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Set<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "StringType.StringType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "StringType.toString#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"string\";\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "StringType.visit#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.visit(com.google.javascript.rhino.jstype.Visitor<T>)",
        "snippet": "  @Override\n  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseStringType();\n  }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false);\n  }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newHashMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType) {\n      this.implicitPrototype = implicitPrototype;\n    } else if (implicitPrototype == null) {\n      this.implicitPrototype =\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    } else {\n      this.implicitPrototype = implicitPrototype;\n    }\n  }\n",
        "begin_line": 96,
        "end_line": 110,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.getConstructor#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 324,
        "end_line": 327,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#329",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototype;\n  }\n",
        "begin_line": 329,
        "end_line": 332,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototype = implicitPrototype;\n  }\n",
        "begin_line": 340,
        "end_line": 343,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.getName#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getName()",
        "snippet": "  @Override\n  public String getName() {\n    if (className != null) {\n      return className;\n    } else {\n      return \"{...}\";\n    }\n  }\n",
        "begin_line": 345,
        "end_line": 352,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.hasName#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasName()",
        "snippet": "  @Override\n  public boolean hasName() {\n    return className != null;\n  }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.isSubtype#359",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n      return true;\n    }\n    // record types\n    if (that instanceof RecordType) {\n      return RecordType.isSubtype(this, (RecordType) that);\n    }\n    // prototype based objects\n    if (that instanceof ObjectType) {\n      if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        // If unsure, say 'yes', to avoid spurious warnings.\n        // TODO(user): resolve the prototype chain completely in all cases,\n        // to avoid guessing.\n        return true;\n      }\n      return this.isImplicitPrototype((ObjectType) that);\n    }\n    return false;\n  }\n",
        "begin_line": 359,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#420",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 420,
        "end_line": 423,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#426",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 426,
        "end_line": 429,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.ObjectType#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.defineDeclaredProperty#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, boolean inExterns) {\n    // All property definitions go through this method\n    // or defineInferredProperty.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return defineProperty(propertyName, type, false, inExterns);\n  }\n",
        "begin_line": 211,
        "end_line": 218,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param inExterns {@code true} if this property was defined in an externs\n   *        file. TightenTypes assumes that any function passed to an externs\n   *        property could be called, so setting this incorrectly could result\n   *        in live code being removed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.isUnknownType#397",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 397,
        "end_line": 411,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjectType.hasCachedValues#423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 423,
        "end_line": 425,
        "comment": "\n   * Returns true if any cached valeus have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberType.NumberType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"number\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NumberType.visit#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.visit(com.google.javascript.rhino.jstype.Visitor<T>)",
        "snippet": "  @Override\n  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseNumberType();\n  }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NullType.NullType#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NullType.toString#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"null\";\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoType.NoType#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoType.isNoType#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoObjectType.NoObjectType#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null, null, null, null, null, true, true);\n  }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoObjectType.getReturnType#214",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.getReturnType()",
        "snippet": "  @Override\n  public JSType getReturnType() {\n    return this;\n  }\n",
        "begin_line": 214,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NoObjectType.isNoObjectType#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.isNoObjectType()",
        "snippet": "  @Override\n  public boolean isNoObjectType() {\n    return true;\n  }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    ObjectType TOP_LEVEL_PROTOTYPE =\n        new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE,\n            null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\n        \"prototype\", TOP_LEVEL_PROTOTYPE, true);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE,\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n      };\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true,\n            true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n              UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n          STRING_TYPE, null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null, createParameters(false, ALL_TYPE),\n            NUMBER_TYPE, null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createOptionalParameters(ALL_TYPE, ALL_TYPE),\n          null, null, null, true, true) {\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n      };\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null, createParameters(false, ALL_TYPE),\n        STRING_TYPE, null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n          createParametersWithVarArgs(\n              UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    ObjectType GLOBAL_THIS = createObjectType(\"global this\", null,\n        UNKNOWN_TYPE /* to be resolved later */);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n  }\n",
        "begin_line": 166,
        "end_line": 467,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getReturnType#361",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.Anonymous-23b51317-6c41-4232-b010-3dc4abfb7447.getReturnType()",
        "snippet": "        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getReturnType#238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.Anonymous-97b9ceae-b989-4bee-86d4-949393b21ae6.getReturnType()",
        "snippet": "        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n",
        "begin_line": 238,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter)",
        "snippet": "  public JSTypeRegistry(ErrorReporter reporter) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n  }\n",
        "begin_line": 148,
        "end_line": 153,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 158,
        "end_line": 164,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 469,
        "end_line": 493,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.register#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.register#499",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 499,
        "end_line": 507,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.registerNativeType#509",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 509,
        "end_line": 511,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#525",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, ObjectType owner) {\n    Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typesIndexedByProperty.put(propertyName, typeSet = Sets.newHashSet());\n    }\n    greatestSubtypeByProperty.remove(propertyName);\n    typeSet.add(owner);\n  }\n",
        "begin_line": 525,
        "end_line": 532,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getNativeType#681",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 681,
        "end_line": 683,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#685",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 685,
        "end_line": 687,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createOptionalType#748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 748,
        "end_line": 754,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createUnionType#776",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 776,
        "end_line": 782,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createUnionType#788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative...)",
        "snippet": "  public JSType createUnionType(JSTypeNative... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSTypeNative typeId : variants) {\n      builder.addAlternate(getNativeType(typeId));\n    }\n    return builder.build();\n  }\n",
        "begin_line": 788,
        "end_line": 794,
        "comment": "\n   * Creates a union type whose variants are the builtin types specified\n   * by the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#848",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return new FunctionType(\n        this, null, null, createParametersWithVarArgs(parameterTypes), returnType);\n  }\n",
        "begin_line": 848,
        "end_line": 852,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#949",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 949,
        "end_line": 951,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#957",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 957,
        "end_line": 961,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createParameters#973",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 973,
        "end_line": 984,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createFunctionType#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 993,
        "end_line": 1000,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSTypeRegistry.createObjectType#1053",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createObjectType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public ObjectType createObjectType(String name, Node n,\n      ObjectType implicitPrototype) {\n    return new PrototypeObjectType(this, name, implicitPrototype);\n  }\n",
        "begin_line": 1053,
        "end_line": 1056,
        "comment": "\n   * Create an object type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.caseBooleanType#855",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.Anonymous-e2cd9d32-98bb-4062-ae9b-179ed3d2cf3c.caseBooleanType()",
        "snippet": "        public List<ObjectType> caseBooleanType() {\n          return ImmutableList.of();\n        }\n",
        "begin_line": 855,
        "end_line": 857,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.caseNumberType#867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.Anonymous-6b22e95d-b820-4419-87cf-3a6ac37c5d06.caseNumberType()",
        "snippet": "        public List<ObjectType> caseNumberType() {\n          return ImmutableList.of();\n        }\n",
        "begin_line": 867,
        "end_line": 869,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.caseStringType#880",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.Anonymous-74e8b385-d337-4eed-9f09-2400d80e376b.caseStringType()",
        "snippet": "        public List<ObjectType> caseStringType() {\n          return ImmutableList.of();\n        }\n",
        "begin_line": 880,
        "end_line": 882,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.JSType#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isNoType#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isNoObjectType#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isEmptyType#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType();\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isAllType#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isUnknownType#216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isNominalType#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.equals#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.equals(java.lang.Object)",
        "snippet": "  @Override public boolean equals(Object jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.equals(this);\n    }\n    return this == jsType;\n  }\n",
        "begin_line": 305,
        "end_line": 310,
        "comment": "\n   * This method relies on the fact that for the base {@link JSType}, only one\n   * instance of each sub-type will ever be created in a given registry, so\n   * there is no need to verify members. If the object pointers are not\n   * identical, then the type member must be different.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.hashCode#312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 312,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.isSubtype#796",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtype(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.equals(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType instanceof UnionType) {\n      UnionType union = (UnionType)thatType;\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // named types\n    if (thatType instanceof NamedType) {\n      return thisType.isSubtype(((NamedType)thatType).referencedType);\n    }\n    return false;\n  }\n",
        "begin_line": 796,
        "end_line": 823,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSType.keepAssignableInterfaces#829",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.keepAssignableInterfaces()",
        "snippet": "  List<ObjectType> keepAssignableInterfaces() {\n    return visit(keepAssignableInterfacesVisitor);\n  }\n",
        "begin_line": 829,
        "end_line": 831,
        "comment": "\n   * Computes the list of interfaces that can be assigned to this type.\n   * @return A list of interface types (may contain duplicates).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.getName#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return getConstructor().getName();\n  }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.hasName#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasName()",
        "snippet": "  @Override\n  public boolean hasName() {\n    return getConstructor().hasName();\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.getConstructor#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.toString#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return constructor.getName();\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.isNominalType#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  boolean isNominalType() {\n    return hasName();\n  }\n",
        "begin_line": 144,
        "end_line": 147,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.isSubtype#149",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (super.isSubtype(that)) {\n      return true;\n    }\n    List<ObjectType> thisInterfaces =\n        getConstructor().getImplementedInterfaces();\n    if (thisInterfaces != null) {\n      List<ObjectType> thatInterfaces = that.keepAssignableInterfaces();\n      for (ObjectType thatInterface : thatInterfaces) {\n        for (ObjectType thisInterface : thisInterfaces) {\n          if (thisInterface.isSubtype(thatInterface)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 149,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.equals#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object that) {\n    if (this == that) {\n      return true;\n    } else if (this.isNominalType() && that instanceof JSType &&\n        ((JSType) that).isNominalType()) {\n      return getName().equals(((ObjectType) that).getName());\n    }\n    return false;\n  }\n",
        "begin_line": 169,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "InstanceObjectType.hashCode#184",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasName()) {\n      return getName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 184,
        "end_line": 191,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.FunctionType#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @VisibleForTesting\n  public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType) {\n    this(registry, name, source, parameters, returnType, null, null, false,\n         false);\n  }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": "\n   * Creates a function type.\n   * @param registry the owner registry for this type\n   * @param name the function's name or {@code null} to indicate that the\n   *        function is anonymous.\n   * @param source the node defining this function. Its type\n   *        ({@link Node#getType()}) must be {@link Token#FUNCTION}.\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.FunctionType#184",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    // The call type should be set up last because we are calling getReturnType,\n    // which may be overloaded and depend on other properties being set.\n    this.call = new ArrowType(registry, parameters,\n        (returnType == null ? getReturnType() : returnType));\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 184,
        "end_line": 207,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.isConstructor#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 228,
        "end_line": 231,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.isInterface#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 233,
        "end_line": 236,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getPrototype#307",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public FunctionPrototypeType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototype == null) {\n      setPrototype(new FunctionPrototypeType(registry, this, null));\n    }\n    return prototype;\n  }\n",
        "begin_line": 307,
        "end_line": 313,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    if (prototype == null) {\n      setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));\n    } else {\n      prototype.setImplicitPrototype(baseType);\n    }\n  }\n",
        "begin_line": 320,
        "end_line": 328,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.setPrototype#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType)",
        "snippet": "  public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    this.prototype = prototype;\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 335,
        "end_line": 353,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getImplementedInterfaces#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getImplementedInterfaces()",
        "snippet": "  public List<ObjectType> getImplementedInterfaces() {\n    if (implementedInterfaces == null) {\n      return ImmutableList.of();\n    } else {\n      return implementedInterfaces;\n    }\n  }\n",
        "begin_line": 386,
        "end_line": 392,
        "comment": " Returns interfaces implemented directly by a class or its superclass. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.defineProperty#460",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type,\n      boolean inferred, boolean inExterns) {\n    if (\"prototype\".equals(name)) {\n      if (type instanceof ObjectType) {\n        ObjectType objType = (ObjectType) type;\n        return setPrototype(\n            new FunctionPrototypeType(\n                registry, this, objType, isNativeObjectType()));\n      } else {\n        return false;\n      }\n    }\n    return super.defineProperty(name, type, inferred, inExterns);\n  }\n",
        "begin_line": 460,
        "end_line": 474,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getSuperClassConstructor#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 541,
        "end_line": 548,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.hashCode#626",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return isInterface() ? getName().hashCode() : call.hashCode();\n  }\n",
        "begin_line": 626,
        "end_line": 629,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.getInstanceType#748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 748,
        "end_line": 751,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.setInstanceType#754",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 754,
        "end_line": 756,
        "comment": " Sets the instance type. This should only be used for special native types. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.hasInstanceType#761",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 761,
        "end_line": 763,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.addSubType#788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 788,
        "end_line": 793,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionType.hasCachedValues#804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototype != null || super.hasCachedValues();\n  }\n",
        "begin_line": 804,
        "end_line": 807,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionPrototypeType.FunctionPrototypeType#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.FunctionPrototypeType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n      ObjectType implicitPrototype, boolean isNative) {\n    super(registry, null /* has no class name */, implicitPrototype,\n        isNative);\n    this.ownerFunction = ownerFunction;\n  }\n",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionPrototypeType.FunctionPrototypeType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.FunctionPrototypeType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n      ObjectType implicitPrototype) {\n    this(registry, ownerFunction, implicitPrototype, false);\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.newParameter#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 121,
        "end_line": 126,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.build#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 132,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 138,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(registry, name, null,\n          registry.createOptionalParameters(\n              registry.getNativeType(ALL_TYPE),\n              registry.getNativeType(ALL_TYPE),\n              registry.getNativeType(ALL_TYPE)),\n          null, null, null, true, true);\n  }\n",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ErrorFunctionType.getReturnType#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.getReturnType()",
        "snippet": "  @Override\n  public JSType getReturnType() {\n    return getInstanceType();\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanType.BooleanType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanType.toString#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"boolean\";\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "BooleanType.visit#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.visit(com.google.javascript.rhino.jstype.Visitor<T>)",
        "snippet": "  @Override\n  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseBooleanType();\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ArrowType.ArrowType#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    super(registry);\n    this.parameters = parameters;\n    this.returnType = returnType;\n  }\n",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ArrowType.hashCode#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    int hashCode = 0;\n    if (returnType != null) {\n      hashCode += returnType.hashCode();\n    }\n    if (parameters != null) {\n      Node param = parameters.getFirstChild();\n      while (param != null) {\n        JSType paramType = param.getJSType();\n        if (paramType != null) {\n          hashCode += paramType.hashCode();\n        }\n        param = param.getNext();\n      }\n    }\n    return hashCode;\n  }\n",
        "begin_line": 190,
        "end_line": 207,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "AllType.AllType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "AllType.isAllType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ScriptRuntime.getMessage0#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId)\n    {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 421,
        "end_line": 424,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ScriptRuntime.getMessage#457",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments)\n    {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Context cx = Context.getCurrentContext();\n        Locale locale = cx != null ? cx.getLocale() : Locale.getDefault();\n\n        // ResourceBundle does cacheing.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 457,
        "end_line": 484,
        "comment": " OPT there's a noticable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ScriptOrFnNode.ScriptOrFnNode#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.ScriptOrFnNode(int)",
        "snippet": "    public ScriptOrFnNode(int nodeType) {\n        super(nodeType);\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjToIntMap.ObjToIntMap#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "signature": "com.google.javascript.rhino.ObjToIntMap.ObjToIntMap(int)",
        "snippet": "    public ObjToIntMap(int keyCountHint) {\n        if (keyCountHint < 0) Kit.codeBug();\n        // Table grow when number of stored keys >= 3/4 of max capacity\n        int minimalCapacity = keyCountHint * 4 / 3;\n        int i;\n        for (i = 2; (1 << i) < minimalCapacity; ++i) { }\n        power = i;\n        if (check && power < 2) Kit.codeBug();\n    }\n",
        "begin_line": 128,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ObjArray.ObjArray#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "class_name": "com.google.javascript.rhino.ObjArray",
        "signature": "com.google.javascript.rhino.ObjArray.ObjArray()",
        "snippet": "    public ObjArray() { }\n",
        "begin_line": 54,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.addChildToBack#571",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "    public void addChildToBack(Node child) {\n        Preconditions.checkArgument(child.parent == null);\n        Preconditions.checkArgument(child.next == null);\n        child.parent = this;\n        child.next = null;\n        if (last == null) {\n            first = last = child;\n            return;\n        }\n        last.next = child;\n        last = child;\n    }\n",
        "begin_line": 571,
        "end_line": 582,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.lookupProperty#710",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "    private PropListItem lookupProperty(int propType)\n    {\n        PropListItem x = propListHead;\n        while (x != null && propType != x.type) {\n            x = x.next;\n        }\n        return x;\n    }\n",
        "begin_line": 710,
        "end_line": 717,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.ensureProperty#719",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ensureProperty(int)",
        "snippet": "    private PropListItem ensureProperty(int propType)\n    {\n        PropListItem item = lookupProperty(propType);\n        if (item == null) {\n            item = new PropListItem();\n            item.type = propType;\n            item.next = propListHead;\n            propListHead = item;\n        }\n        return item;\n    }\n",
        "begin_line": 719,
        "end_line": 729,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.putBooleanProp#784",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "    public void putBooleanProp(int propType, boolean prop) {\n        putIntProp(propType, prop ? 1 : 0);\n    }\n",
        "begin_line": 784,
        "end_line": 786,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.putIntProp#788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "    public void putIntProp(int propType, int prop)\n    {\n        PropListItem item = ensureProperty(propType);\n        item.intValue = prop;\n    }\n",
        "begin_line": 788,
        "end_line": 792,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getLineno#811",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "    public int getLineno() {\n        return extractLineno(sourcePosition);\n    }\n",
        "begin_line": 811,
        "end_line": 813,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getCharno#815",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "    public int getCharno() {\n        return extractCharno(sourcePosition);\n    }\n",
        "begin_line": 815,
        "end_line": 817,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setLineno#1084",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "    public void setLineno(int lineno) {\n        int charno = getCharno();\n        if (charno == -1) {\n          charno = 0;\n        }\n        sourcePosition = mergeLineCharNo(lineno, charno);\n    }\n",
        "begin_line": 1084,
        "end_line": 1090,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setCharno#1092",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "    public void setCharno(int charno) {\n        sourcePosition = mergeLineCharNo(getLineno(), charno);\n    }\n",
        "begin_line": 1092,
        "end_line": 1094,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.extractLineno#1116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "    protected static int extractLineno(int lineCharNo) {\n      if (lineCharNo == -1) {\n        return -1;\n      } else {\n        return lineCharNo >>> COLUMN_BITS;\n      }\n    }\n",
        "begin_line": 1116,
        "end_line": 1122,
        "comment": "\n     * Extracts the line number and character number from a merged line char\n     * number (see {@link #mergeLineCharNo(int, int)}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getParent#1223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "    public Node getParent() {\n        return parent;\n    }\n",
        "begin_line": 1223,
        "end_line": 1225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getJSType#1800",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSType()",
        "snippet": "    public JSType getJSType() {\n        return jsType;\n    }\n",
        "begin_line": 1800,
        "end_line": 1802,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setJSType#1804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    public void setJSType(JSType jsType) {\n        this.jsType = jsType;\n    }\n",
        "begin_line": 1804,
        "end_line": 1806,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getJsDocBuilderForNode#1808",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "    public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n      return new FileLevelJsDocBuilder();\n    }\n",
        "begin_line": 1808,
        "end_line": 1810,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setVarArgs#1860",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "    public void setVarArgs(boolean varArgs)\n    {\n        putBooleanProp(VAR_ARGS_NAME, varArgs);\n    }\n",
        "begin_line": 1860,
        "end_line": 1863,
        "comment": "\n     * Sets whether this node is a variable length argument node. This\n     * method is meaningful only on {@link Token#NAME} nodes\n     * used to define a {@link Token#FUNCTION}'s argument list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setOptionalArg#1880",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "    public void setOptionalArg(boolean optionalArg)\n    {\n        putBooleanProp(OPT_ARG_NAME, optionalArg);\n    }\n",
        "begin_line": 1880,
        "end_line": 1883,
        "comment": "\n     * Sets whether this node is an optional argument node. This\n     * method is meaningful only on {@link Token#NAME} nodes\n     * used to define a {@link Token#FUNCTION}'s argument list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.setIsSyntheticBlock#1899",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "    public void setIsSyntheticBlock(boolean val) {\n        putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n    }\n",
        "begin_line": 1899,
        "end_line": 1901,
        "comment": "\n     * Sets whether this is a synthetic block that should not be considered\n     * a real source block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Context.getCurrentContext#401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "class_name": "com.google.javascript.rhino.Context",
        "signature": "com.google.javascript.rhino.Context.getCurrentContext()",
        "snippet": "    public static Context getCurrentContext() {\n        return threadContexts.get();\n    }\n",
        "begin_line": 401,
        "end_line": 403,
        "comment": "\n     * Get the current Context.\n     *\n     * The current Context is per-thread; this method looks up\n     * the Context associated with the current thread. <p>\n     *\n     * @return the Context associated with the current thread, or\n     *         null if no context is associated with the current\n     *         thread.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ParserRunner.parse#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(java.lang.String, java.lang.String, boolean, com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static Node parse(String sourceName,\n                           String sourceString,\n                           boolean isIdeMode,\n                           JSTypeRegistry typeRegistry,\n                           ErrorReporter errorReporter,\n                           Logger logger) throws IOException {\n    initAnnotationNames();\n\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (isIdeMode) {\n      compilerEnv.setReservedKeywordAsIdentifier(true);\n      compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n      logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      Config config = new Config(\n          typeRegistry, annotationNames, isIdeMode);\n      root = IRFactory.transformTree(\n          astRoot, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return root;\n  }\n",
        "begin_line": 80,
        "end_line": 119,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceName The filename.\n   * @param sourceString Source code from the file.\n   * @param isIdeMode Whether in IDE mode, which affects the environment.\n   * @param typeRegistry The type registry.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processAstRoot#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = new ScriptOrFnNode(Token.SCRIPT);\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 360,
        "end_line": 367,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.IRFactory#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceName = sourceName;\n    this.registry = config.registry;\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n  }\n",
        "begin_line": 94,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.position2charno#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 279,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.justTransform#289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 289,
        "end_line": 291,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Config.Config#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Set<java.lang.String>, boolean)",
        "snippet": "  Config(JSTypeRegistry registry, Set<String> annotationWhitelist,\n      boolean parseJsDocDocumentation) {\n    this.registry = registry;\n    this.annotationWhitelist = annotationWhitelist;\n    this.parseJsDocDocumentation = parseJsDocDocumentation;\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "TypeValidator.TypeValidator#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "signature": "com.google.javascript.jscomp.TypeValidator.TypeValidator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  TypeValidator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.typeRegistry = compiler.getTypeRegistry();\n    this.allValueTypes = typeRegistry.createUnionType(\n        STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);\n  }\n",
        "begin_line": 108,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 48,
        "end_line": 51,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.getCode#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": " \n   * Gets all the code in this source file. \n   * @throws IOException \n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private String replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\");\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.of(\n        \n        // Extra @fileoverview\n        replacePlaceHolders(\n            ScriptRuntime.getMessage0(\"msg.jsdoc.fileoverview.extra\")),\n        EXTRA_FILEOVERVIEW,\n        \n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n    \n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION);\n  }\n",
        "begin_line": 64,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.jscomp.mozilla.rhino.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "PassFactory.PassFactory#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTypeNormalizer.NodeTypeNormalizer#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.NodeTypeNormalizer()",
        "snippet": "  NodeTypeNormalizer() {\n    this(null);\n  }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTypeNormalizer.NodeTypeNormalizer#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.NodeTypeNormalizer(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  NodeTypeNormalizer(CodeChangeHandler changeHandler) {\n    this.changeHandler = changeHandler;\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTypeNormalizer.process#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    normalizeNodeTypes(root);\n    normalizeJsDocAnnotations(root);\n  }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.shouldTraverse#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.NodeTraversal#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.NodeTraversal#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 207,
        "end_line": 216,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverse#248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 248,
        "end_line": 258,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.traverse#423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 423,
        "end_line": 427,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.pushScope#533",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 533,
        "end_line": 540,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.popScope#553",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 553,
        "end_line": 563,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.getSourceName#624",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = (String) n.getProp(Node.SOURCENAME_PROP);\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 624,
        "end_line": 627,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.JsAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.getAstRoot#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      createAst(compiler);\n    }\n    return root;\n  }\n",
        "begin_line": 48,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.createAst#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.createAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void createAst(AbstractCompiler compiler) {\n    try {\n      parse(compiler, sourceFile.getName(), sourceFile.getCode());\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(Compiler.READ_ERROR, sourceFile.getName()));\n    }\n  }\n",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JsAst.parse#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler, java.lang.String, java.lang.String)",
        "snippet": "  private void parse(AbstractCompiler compiler, String sourceName,\n      String sourceStr) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceName);\n      root = ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(),\n          compiler.getTypeRegistry(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n    } catch (IOException e) {\n      compiler.report(JSError.make(Compiler.READ_ERROR, sourceName));\n    }\n\n    if (root == null) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = new Node(Token.BLOCK);\n    } else {\n      compiler.normalizeNodeTypes(root);\n      compiler.annotateCodingConvention(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n  }\n",
        "begin_line": 85,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSSourceFile.getCode#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.getCode()",
        "snippet": "  @Override\n  public String getCode() throws IOException {\n    return referenced.getCode();\n  }\n",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.error#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.warning#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.make#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 85,
        "end_line": 89,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "DiagnosticType.DiagnosticType#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 94,
        "end_line": 100,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.isOn#830",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 830,
        "end_line": 832,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.CompilerOptions#520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkSymbols = false;\n    checkShadowVars = CheckLevel.OFF;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkFunctions = CheckLevel.OFF;\n    checkMethods = CheckLevel.OFF;\n    checkDuplicateMessages = false;\n    allowLegacyJsMessages = false;\n    strictMessageReplacement = false;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkUndefinedProperties = CheckLevel.OFF;\n    checkUnusedPropertiesEarly = false;\n    checkTypes = false;\n    tightenTypes = false;\n    inferTypesInGlobalScope = false;\n    checkTypedPropertyCalls = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.WARNING;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkEs5Strict = false;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n\n    // Optimizations\n    foldConstants = false;\n    removeConstantExpressions = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedVars = false;\n    removeUnusedVarsInGlobalScope = true;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    instrumentForCoverage = false;\n    instrumentForCoverageOnly = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    rewriteNewDateGoogNow = true;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    warningsGuard = null;\n    debugFunctionSideEffectsPath = null;\n    jsOutputFile = \"\";\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n  }\n",
        "begin_line": 520,
        "end_line": 639,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#786",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 786,
        "end_line": 788,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.CompilerInput#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile, boolean)",
        "snippet": "  public CompilerInput(JSSourceFile file, boolean isExtern) {\n    this.ast = new JsAst(file);\n    this.name = file.getName();\n    this.isExtern = isExtern;\n  }\n",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.getName#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  public String getName() {\n    return name;\n  }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CompilerInput.getAstRoot#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    return ast.getAstRoot(compiler);\n  }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.Compiler#188",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    addChangeHandler(recentChange);\n    this.typeValidator = new TypeValidator(this);\n    setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger_));\n  }\n",
        "begin_line": 188,
        "end_line": 192,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.createDefaultOptions#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createDefaultOptions()",
        "snippet": "  CompilerOptions createDefaultOptions() {\n    return new CompilerOptions();\n  }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.setErrorManager#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 233,
        "end_line": 237,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.createMessageFormatter#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options_.shouldColorizeErrorOutput();\n    return options_.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.newTracer#785",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options_.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 785,
        "end_line": 792,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.stopTracer#794",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.common.base.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options_.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 794,
        "end_line": 799,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getTypeRegistry#923",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 923,
        "end_line": 929,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1076",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1076,
        "end_line": 1079,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.normalizeNodeTypes#1635",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.normalizeNodeTypes(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void normalizeNodeTypes(Node root) {\n    Tracer tracer = newTracer(\"normalizeNodeTypes\");\n\n    // TODO(johnlenz): Move the Node type normalizer into the general\n    // Normalization pass once we force everybody to turn it on. It's\n    // confusing to have a mandatory normalization pass and an optional\n    // one.\n    CompilerPass pass = new NodeTypeNormalizer();\n    pass.process(null, root);\n\n    stopTracer(tracer, \"normalizeNodeTypes\");\n  }\n",
        "begin_line": 1635,
        "end_line": 1647,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.annotateCodingConvention#1649",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.annotateCodingConvention(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void annotateCodingConvention(Node root) {\n    Tracer tracer = newTracer(\"annotateCodingConvention\");\n    CompilerPass pass = new CodingConventionAnnotator(this);\n    pass.process(null, root);\n    stopTracer(tracer, \"annotateCodingConvention\");\n  }\n",
        "begin_line": 1649,
        "end_line": 1655,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.addChangeHandler#1756",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1756,
        "end_line": 1759,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.getCodingConvention#1778",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
        "snippet": "  @Override\n  public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }\n",
        "begin_line": 1778,
        "end_line": 1781,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Compiler.isIdeMode#1788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options_.ideMode;\n  }\n",
        "begin_line": 1788,
        "end_line": 1791,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodingConventionAnnotator.CodingConventionAnnotator#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.CodingConventionAnnotator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public CodingConventionAnnotator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.convention = compiler.getCodingConvention();\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodingConventionAnnotator.process#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (externs != null) {\n      NodeTraversal.traverse(compiler, externs, this);\n    }\n    if (root != null) {\n      NodeTraversal.traverse(compiler, root, this);\n    }\n  }\n",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.hasCodeChanged()",
        "snippet": "    boolean hasCodeChanged() {\n      return hasChanged;\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "BasicErrorManager.getErrorCount#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractMessageFormatter.setColorize#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.StringNode#270",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "        StringNode(int type, String str) {\n            super(type);\n            if (null == str) {\n                throw new IllegalArgumentException(\"StringNode: str is null\");\n            }\n            this.str = str;\n        }\n",
        "begin_line": 270,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getString#289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "        @Override public String getString() {\n            return this.str;\n        }\n",
        "begin_line": 289,
        "end_line": 291,
        "comment": " returns the string content.\n          * @return non null.\n          ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.Node#339",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "    public Node(int nodeType) {\n        type = nodeType;\n        parent = null;\n        sourcePosition = -1;\n    }\n",
        "begin_line": 339,
        "end_line": 343,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.newString#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "    public static Node newString(int type, String str) {\n        return new StringNode(type, str);\n    }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getType#507",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "    public int getType() {\n        return type;\n    }\n",
        "begin_line": 507,
        "end_line": 509,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getFirstChild#519",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "    public Node getFirstChild() {\n        return first;\n    }\n",
        "begin_line": 519,
        "end_line": 521,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getLastChild#523",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "    public Node getLastChild() {\n        return last;\n    }\n",
        "begin_line": 523,
        "end_line": 525,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "Node.getNext#527",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "    public Node getNext() {\n        return next;\n    }\n",
        "begin_line": 527,
        "end_line": 529,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0576
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.Preloaded#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String code) {\n      super(fileName);\n      super.setCode(code);\n    }\n",
        "begin_line": 244,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.SourceFile#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  SourceFile(String fileName) {\n    this.fileName = fileName;\n    // Starting point: offset 0 is at line 1.\n    this.lastOffset = 0;\n    this.lastLine = 1;\n  }\n",
        "begin_line": 70,
        "end_line": 75,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.setCode#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.getName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 4
    },
    {
        "name": "SourceFile.fromCode#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return new Preloaded(fileName, code);\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSSourceFile.fromCode#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static JSSourceFile fromCode(String fileName, String code) {\n    return new JSSourceFile(SourceFile.fromCode(fileName, code));\n  }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 4
    },
    {
        "name": "JSSourceFile.JSSourceFile#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.JSSourceFile(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  private JSSourceFile(SourceFile referenced) {\n    super(referenced.getName());\n    this.referenced = referenced;\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 4
    },
    {
        "name": "SyntacticScopeCreator.scanVars#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void scanVars(Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x = 1, y, z;\n        for (Node child = n.getFirstChild();\n             child != null;) {\n          Node next = child.getNext();\n          Preconditions.checkState(child.getType() == Token.NAME);\n\n          String name = child.getString();\n          declareVar(name, child, n, parent, null, n);\n          child = next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionAnonymous(n)) {\n          return;\n        }\n\n        String fnName = n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(fnName, n.getFirstChild(), n, parent, null, n);\n        return;   // should not examine function's children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 3);\n        Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var = n.getFirstChild();\n        final Node block = var.getNext().getNext();\n\n        declareVar(var.getString(), var, n, parent, null, n);\n        scanVars(block, n);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child = n.getFirstChild();\n           child != null;) {\n        Node next = child.getNext();\n        scanVars(child, n);\n        child = next;\n      }\n    }\n  }\n",
        "begin_line": 110,
        "end_line": 166,
        "comment": "\n   * Scans and gather variables declarations under a Node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0574
        },
        "num_failing_tests": 3
    },
    {
        "name": "SyntacticScopeCreator.declareVar#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  private void declareVar(String name, Node n, Node parent,\n                          Node gramps, JSType declaredType,\n                          Node nodeWithLineNumber) {\n    if (scope.isDeclared(name, false)) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, parent, gramps, nodeWithLineNumber);\n    } else {\n      scope.declare(name, n, declaredType, compiler.getInput(sourceName));\n    }\n  }\n",
        "begin_line": 228,
        "end_line": 237,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name The variable name\n   * @param n The node corresponding to the variable name (usually a NAME node)\n   * @param parent The parent node of {@code n}\n   * @param gramps The parent node of {@code parent}\n   * @param declaredType The variable's type, according to JSDoc\n   * @param nodeWithLineNumber The node to use to access the line number of\n   *     the variable declaration, if needed\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0541
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processFunctionCall#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionCall(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall)",
        "snippet": "    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node = new Node(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n      node.setLineno(callNode.getLineno());\n      node.setCharno(position2charno(leftParamPos));\n      return node;\n    }\n",
        "begin_line": 470,
        "end_line": 482,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.054
        },
        "num_failing_tests": 3
    },
    {
        "name": "SyntacticScopeCreator.createScope#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  public Scope createScope(Node n, Scope parent) {\n    sourceName = null;\n    if (parent == null) {\n      scope = new Scope(n, compiler);\n    } else {\n      scope = new Scope(parent, n);\n    }\n\n    scanRoot(n, parent);\n\n    sourceName = null;\n    Scope returnedScope = scope;\n    scope = null;\n    return returnedScope;\n  }\n",
        "begin_line": 59,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0539
        },
        "num_failing_tests": 3
    },
    {
        "name": "SyntacticScopeCreator.scanRoot#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n      sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n\n      final Node fnNameNode = n.getFirstChild();\n      final Node args = fnNameNode.getNext();\n      final Node body = args.getNext();\n\n      // Bleed the function name into the scope, if it hasn't\n      // been declared in the outer scope.\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty() && NodeUtil.isFunctionAnonymous(n)) {\n        declareVar(fnName, fnNameNode, n, null, null, n);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.getType() == Token.LP);\n      for (Node a = args.getFirstChild(); a != null;\n           a = a.getNext()) {\n        Preconditions.checkState(a.getType() == Token.NAME);\n        declareVar(a.getString(), a, args, n, null, n);\n      }\n\n      // Body\n      scanVars(body, n);\n    } else {\n      // It's the global block\n      Preconditions.checkState(scope.getParent() == null);\n      scanVars(n, null);\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0539
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.isStatementBlock#953",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 953,
        "end_line": 955,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0537
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.declare#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n   * Declares a variable whose type is inferred.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0537
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.hasChildren#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "    public boolean hasChildren() {\n        return first != null;\n    }\n",
        "begin_line": 515,
        "end_line": 517,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0534
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processAssignment#355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(com.google.javascript.jscomp.mozilla.rhino.ast.Assignment)",
        "snippet": "    @Override\n    Node processAssignment(Assignment assignmentNode) {\n      return processInfixExpression(assignmentNode);\n    }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.getParent#321",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 3
    },
    {
        "name": "BasicErrorManager.report#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.report(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "  public void report(CheckLevel level, JSError error) {\n    if (messages.add(Pair.of(error, level))) {\n      if (level == CheckLevel.ERROR) {\n        errorCount++;\n      } else if (level == CheckLevel.WARNING) {\n        warningCount++;\n      }\n    }\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0524
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processInfixExpression#546",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  new Node(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      // Set the line number here so we can fine-tune it in ways transform\n      // doesn't do.\n      n.setLineno(exprNode.getLineno());\n      // Position in new ASTNode is to start of expression, but old-fashioned\n      // line numbers from Node reference the operator token.  Add the offset\n      // to the operator to get the correct character number.\n      n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));\n      return n;\n    }\n",
        "begin_line": 546,
        "end_line": 561,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0514
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeConsumer.add#209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 209,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0512
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isLocal#464",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return !isGlobal();\n  }\n",
        "begin_line": 464,
        "end_line": 466,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.isGlobal#457",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
        "snippet": "  public boolean isGlobal() {\n    return parent == null;\n  }\n",
        "begin_line": 457,
        "end_line": 459,
        "comment": "\n   * Returns whether this is the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0501
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.Node#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "    public Node(int nodeType, Node child) {\n        Preconditions.checkArgument(child.parent == null,\n            \"new child has existing parent\");\n        Preconditions.checkArgument(child.next == null,\n            \"new child has existing sibling\");\n\n        type = nodeType;\n        parent = null;\n        first = last = child;\n        child.next = null;\n        child.parent = this;\n        sourcePosition = -1;\n    }\n",
        "begin_line": 345,
        "end_line": 357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0497
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processVariableInitializer#765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        node.addChildToBack(transform(initializerNode.getInitializer()));\n        node.setLineno(node.getLineno());\n      }\n      return node;\n    }\n",
        "begin_line": 765,
        "end_line": 773,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.hasOneChild#1285",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "    public boolean hasOneChild() {\n      return first != null && first == last;\n    }\n",
        "begin_line": 1285,
        "end_line": 1287,
        "comment": "\n     * Check for one child more efficiently than by iterating over all the\n     * children as is done with Node.getChildCount().\n     * @return Whether the node has exactly one child.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0493
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.getInput#403",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
        "snippet": "  public CompilerInput getInput() {\n    return compiler.getInput(sourceName);\n  }\n",
        "begin_line": 403,
        "end_line": 405,
        "comment": "\n   * Gets the current input source.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0492
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.getScope#566",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }\n",
        "begin_line": 566,
        "end_line": 580,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0474
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.getInfoForNameNode#1869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getInfoForNameNode(Node nameNode) {\n    JSDocInfo info = null;\n    Node parent = null;\n    if (nameNode != null) {\n      info = nameNode.getJSDocInfo();\n      parent = nameNode.getParent();\n    }\n\n    if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION)) {\n      info = parent.getJSDocInfo();\n    }\n    return info;\n  }\n",
        "begin_line": 1869,
        "end_line": 1883,
        "comment": "\n   * @param nameNode A name node\n   * @return The JSDocInfo for the name node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.getVar#415",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 415,
        "end_line": 424,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processVariableDeclaration#756",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      Node node = new Node(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 756,
        "end_line": 763,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.isDeclared#429",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 429,
        "end_line": 438,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.Var#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean)",
        "snippet": "    private Var(boolean inferred) {\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.declare#367",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    Var var = new Var(inferred);\n    var.name = name;\n    var.nameNode = nameNode;\n    var.type = type;\n    var.referenced = false;\n    var.scope = this;\n    var.index = vars.size();\n    var.input = input;\n\n    // native variables do not have a name node.\n    // TODO(user): make Var abstract and have NativeVar, NormalVar.\n    JSDocInfo info = NodeUtil.getInfoForNameNode(nameNode);\n\n    var.isDefine = info != null && info.isDefine();\n    var.info = info;\n\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 367,
        "end_line": 392,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 3
    },
    {
        "name": "Scope.Scope#289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Scope(Node rootNode, AbstractCompiler compiler) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);\n    this.isBottom = false;\n  }\n",
        "begin_line": 289,
        "end_line": 294,
        "comment": "\n   * Creates a global Scope.\n   * @param rootNode  Typically the global BLOCK node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0466
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.checkTreeEqualsImpl#1343",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "    Pair<Node, Node> checkTreeEqualsImpl(Node node2) {\n        boolean eq = false;\n\n        if (type == node2.getType() &&\n            getChildCount() == node2.getChildCount() &&\n            getClass() == node2.getClass()) {\n\n            eq = this.isEquivalentTo(node2);\n        }\n\n        if (!eq) {\n            return Pair.of(this, node2);\n        }\n\n        Pair<Node, Node> res = null;\n        Node n, n2;\n        for (n = first, n2 = node2.first;\n             res == null && n != null;\n             n = n.next, n2 = n2.next) {\n            res = n.checkTreeEqualsImpl(n2);\n            if (res != null) {\n              return res;\n            }\n        }\n        return res;\n    }\n",
        "begin_line": 1343,
        "end_line": 1368,
        "comment": "\n     * Compare this node to node2 recursively and return the first pair\n     * of nodes that differs doing a preorder depth-first traversal.\n     * Package private for testing. Returns null if the nodes are equivalent.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getInput#892",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(java.lang.String)",
        "snippet": "  @Override\n  public CompilerInput getInput(String name) {\n    return inputsByName_.get(name);\n  }\n",
        "begin_line": 892,
        "end_line": 895,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0448
        },
        "num_failing_tests": 3
    },
    {
        "name": "ComposeWarningsGuard.level#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    for (WarningsGuard guard : guards) {\n      CheckLevel newLevel = guard.level(error);\n      if (newLevel != null) {\n        return newLevel;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 69,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0447
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getBooleanProp#756",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "    public boolean getBooleanProp(int propType) {\n        return getIntProp(propType, 0) != 0;\n    }\n",
        "begin_line": 756,
        "end_line": 758,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.044
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getIntProp#760",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int, int)",
        "snippet": "    public int getIntProp(int propType, int defaultValue)\n    {\n        PropListItem item = lookupProperty(propType);\n        if (item == null) { return defaultValue; }\n        return item.intValue;\n    }\n",
        "begin_line": 760,
        "end_line": 765,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.044
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.getWarnings#828",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 828,
        "end_line": 830,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 3
    },
    {
        "name": "BasicErrorManager.getWarningCount#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 3
    },
    {
        "name": "BasicErrorManager.getWarnings#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.opToStr#1262",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 1262,
        "end_line": 1307,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.precedence#605",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 605,
        "end_line": 680,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0434
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isAssignmentOp#701",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 701,
        "end_line": 718,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0428
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getRemainingJSDocLine#202",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getRemainingJSDocLine()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  String getRemainingJSDocLine() {\n    int c;\n    for (;;) {\n      c = getChar();\n      switch (c) {\n        case '*':\n          if (peekChar() != '/') {\n            addToString(c);\n            break;\n          }\n          // fall through\n        case EOF_CHAR:\n        case '\\n':\n          ungetChar(c);\n          this.string = getStringFromBuffer();\n          stringBufferTop = 0;\n          return this.string;\n\n        default:\n          addToString(c);\n          break;\n      }\n    }\n  }\n",
        "begin_line": 202,
        "end_line": 226,
        "comment": "\n   * Gets the remaining JSDoc line without the {@link JsDocToken#EOL},\n   * {@link JsDocToken#EOF} or {@link JsDocToken#EOC}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0424
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.peekChar#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.peekChar()",
        "snippet": "  private int peekChar() {\n    int c = getChar();\n    ungetChar(c);\n    return c;\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0424
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.level#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    return group.matches(error) ? level : null;\n  }\n",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0399
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.JSError)",
        "snippet": "  public boolean matches(JSError error) {\n    return matches(error.getType());\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n   * Returns whether the given error's type matches a type\n   * in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0399
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0399
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.report#1803",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.report(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  void report(JSError error) {\n    CheckLevel level = error.level;\n    WarningsGuard guard = options_.getWarningsGuard();\n    if (guard != null) {\n      CheckLevel newLevel = guard.level(error);\n      if (newLevel != null) {\n        level = newLevel;\n      }\n    }\n\n    if (level.isOn()) {\n      errorManager.report(level, error);\n    }\n  }\n",
        "begin_line": 1803,
        "end_line": 1817,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0399
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.getType#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getType()",
        "snippet": "  public DiagnosticType getType() {\n    return type;\n  }\n",
        "begin_line": 190,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0398
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.compare#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.compare(com.google.common.base.Pair<com.google.javascript.jscomp.JSError, com.google.javascript.jscomp.CheckLevel>, com.google.common.base.Pair<com.google.javascript.jscomp.JSError, com.google.javascript.jscomp.CheckLevel>)",
        "snippet": "    public int compare(Pair<JSError, CheckLevel> p1,\n        Pair<JSError, CheckLevel> p2) {\n      // null is the smallest value\n      if (p2 == null) {\n        if (p1 == null) {\n          return 0;\n        } else {\n          return P1_GT_P2;\n        }\n      }\n\n      // check level\n      if (p1.second != p2.second) {\n        return p2.second.compareTo(p1.second);\n      }\n\n      // sourceName comparison\n      String source1 = p1.first.sourceName;\n      String source2 = p2.first.sourceName;\n      if (source1 != null && source2 != null) {\n        int sourceCompare = source1.compareTo(source2);\n        if (sourceCompare != 0) {\n          return sourceCompare;\n        }\n      } else if (source1 == null && source2 != null) {\n        return P1_LT_P2;\n      } else if (source1 != null && source2 == null) {\n        return P1_GT_P2;\n      }\n      // lineno comparison\n      int lineno1 = p1.first.lineNumber;\n      int lineno2 = p2.first.lineNumber;\n      if (lineno1 != lineno2) {\n        return lineno1 - lineno2;\n      } else if (lineno1 < 0 && 0 <= lineno2) {\n        return P1_LT_P2;\n      } else if (0 <= lineno1 && lineno2 < 0) {\n        return P1_GT_P2;\n      }\n      // charno comparison\n      int charno1 = p1.first.getCharno();\n      int charno2 = p2.first.getCharno();\n      if (charno1 != charno2) {\n        return charno1 - charno2;\n      } else if (charno1 < 0 && 0 <= charno2) {\n        return P1_LT_P2;\n      } else if (0 <= charno1 && charno2 < 0) {\n        return P1_GT_P2;\n      }\n      // description\n      return p1.first.description.compareTo(p2.first.description);\n    }\n",
        "begin_line": 123,
        "end_line": 174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endFunction#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFunction(boolean)",
        "snippet": "  void endFunction(boolean statementContext) {\n    sawFunction = true;\n    if (statementContext) {\n      endLine();\n    }\n  }\n",
        "begin_line": 195,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0394
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSError.getCharno#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getCharno()",
        "snippet": "  public int getCharno() {\n    return charno;\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Get the character number.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0393
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendBlockStart#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockStart()",
        "snippet": "  void appendBlockStart() {\n    append(\"{\");\n  }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.appendBlockEnd#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockEnd()",
        "snippet": "  void appendBlockEnd() {\n    append(\"}\");\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.beginBlock#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.beginBlock()",
        "snippet": "  void beginBlock() {\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n    }\n    appendBlockStart();\n\n    endLine();\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 128,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endBlock#143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endBlock(boolean)",
        "snippet": "  void endBlock(boolean statementContext) {\n    appendBlockEnd();\n    if (statementContext) {\n      endLine();\n    }\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 143,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSError.JSError#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, int, int, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.CheckLevel, java.lang.String...)",
        "snippet": "  private JSError(String sourceName, int lineno, int charno,\n      DiagnosticType type, CheckLevel level, String... arguments) {\n    this.type = type;\n    this.description = type.format.format(arguments);\n    this.lineNumber = lineno;\n    this.charno = charno;\n    this.sourceName = sourceName;\n    this.level = level == null ? type.level : level;\n  }\n",
        "begin_line": 166,
        "end_line": 174,
        "comment": "\n   * Creates a JSError at a CheckLevel for a source file location.  Package\n   * private to avoid any entanglement with code outside of the compiler.\n   *\n   * This is a preferred internal constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0381
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getWarningsGuard#718",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 718,
        "end_line": 720,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0381
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeLineBreak#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeLineBreak()",
        "snippet": "    @Override\n    void maybeLineBreak() {\n      if (lineBreak) {\n        if (sawFunction) {\n          startNewLine();\n          sawFunction = false;\n        }\n      }\n\n      // Since we are at a legal line break, can we upgrade the\n      // preferred break position?  We prefer to break after a\n      // semicolon rather than before it.\n      int len = code.length();\n      if (preferredBreakPosition == len - 1) {\n        char ch = code.charAt(len - 1);\n        if (ch == ';') {\n          preferredBreakPosition = len;\n        }\n      }\n      maybeCutLine();\n    }\n",
        "begin_line": 427,
        "end_line": 447,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0367
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.maybeEndStatement#180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 180,
        "end_line": 189,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addList#668",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node)",
        "snippet": "  void addList(Node firstInList) {\n    addList(firstInList, true, Context.OTHER);\n  }\n",
        "begin_line": 668,
        "end_line": 670,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0346
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addList#676",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext) {\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      boolean isFirst = n == firstInList;\n      if (isFirst) {\n        addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n      } else {\n        cc.listSeparator();\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0);\n      }\n    }\n  }\n",
        "begin_line": 676,
        "end_line": 687,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.appendOp#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendOp(java.lang.String, boolean)",
        "snippet": "  void appendOp(String op, boolean binOp) {\n    append(op);\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0339
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.addOp#231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addOp(java.lang.String, boolean)",
        "snippet": "  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formating around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }\n",
        "begin_line": 231,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0338
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.getContextForNoInOperator#882",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context getContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);\n  }\n",
        "begin_line": 882,
        "end_line": 885,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, we can't permit in operators in the\n   * expression.  Pass on the IN_FOR_INIT_CLAUSE flag through subexpressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endLine#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endLine()",
        "snippet": "  void endLine() {\n  }\n",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0326
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckLevel.isOn#30",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeCutLine#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          reportLineCut(lineIndex, position - lineStartPosition);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 453,
        "end_line": 469,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0316
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.isJSDocString#281",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSDocString(int)",
        "snippet": "  private boolean isJSDocString(int c) {\n    switch (c) {\n      case '@':\n      case '*':\n      case ',':\n      case '>':\n      case ':':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '?':\n      case '!':\n      case '|':\n      case '=':\n      case EOF_CHAR:\n      case '\\n':\n        return false;\n\n      default:\n        return !isJSSpace(c);\n    }\n  }\n",
        "begin_line": 281,
        "end_line": 305,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0316
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addLeftExpr#648",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addLeftExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addLeftExpr(Node n, int minPrecedence, Context context) {\n    addExpr(n, minPrecedence, context);\n  }\n",
        "begin_line": 648,
        "end_line": 650,
        "comment": "\n   * Adds a node at the left-hand side of an expression. Unlike\n   * {@link #addExpr(Node,int)}, this preserves information about the context.\n   *\n   * The left side of an expression is special because in the JavaScript\n   * grammar, certain tokens may be parsed differently when they are at\n   * the beginning of a statement. For example, \"{}\" is parsed as a block,\n   * but \"{'x': 'y'}\" is parsed as an object literal.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addExpr#656",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN))){\n      add(\"(\");\n      add(n, clearContextForNoInOperator(context));\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 656,
        "end_line": 666,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endStatement#162",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endStatement#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 166,
        "end_line": 174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#471",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 471,
        "end_line": 474,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.getLastChar#385",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 385,
        "end_line": 388,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.append#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 408,
        "end_line": 412,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isLatin#1528",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    char LARGEST_BASIC_LATIN = 0x7f;\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 1528,
        "end_line": 1538,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.add#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addIdentifier#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.identifierEscape#817",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // See comments for the same code in strEscape(). Please keep in sync.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 817,
        "end_line": 835,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.addIdentifier#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processKeywordLiteral#563",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral)",
        "snippet": "    @Override\n    Node processKeywordLiteral(KeywordLiteral literalNode) {\n      return new Node(transformTokenType(literalNode.getType()));\n    }\n",
        "begin_line": 563,
        "end_line": 566,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.isWordChar#276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 276,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 2
    },
    {
        "name": "SymbolTable.VerifyingCallback#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.VerifyingCallback.VerifyingCallback(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private VerifyingCallback(Node expectedRoot, Node actualRoot) {\n      this.actualRoot = actualRoot;\n      this.expectedRoot = expectedRoot;\n    }\n",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "SymbolTable.verify#186",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.VerifyingCallback.verify()",
        "snippet": "    private void verify() {\n      if (cache == null) {\n        // The symbol table was never used, so no need to check anything.\n        return;\n      }\n\n      if (!cache.scopes.isEmpty()) {\n        verifyScopes();\n      }\n    }\n",
        "begin_line": 186,
        "end_line": 195,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "SymbolTable.SymbolTable#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.SymbolTable(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SymbolTable(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    compiler.addChangeHandler(this);\n\n    scopeCreator = new SyntacticScopeCreator(compiler);\n  }\n",
        "begin_line": 73,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "SymbolTable.acquire#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.acquire()",
        "snippet": "  synchronized void acquire() {\n    Preconditions.checkState(!locked, \"SymbolTable already acquired\");\n    locked = true;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "SymbolTable.release#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.release()",
        "snippet": "  synchronized void release() {\n    Preconditions.checkState(locked, \"SymbolTable already released\");\n    locked = false;\n  }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "SymbolTable.verify#143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.verify(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  void verify(Node expectedRoot, Node actualRoot) {\n    VerifyingCallback callback = new VerifyingCallback(\n        expectedRoot, actualRoot);\n    callback.verify();\n  }\n",
        "begin_line": 143,
        "end_line": 147,
        "comment": "\n   * Check that this symbol table has been kept up to date. Compiler warnings\n   * will be emitted if anything is wrong.\n   * @param expectedRoot The root of the expected AST.\n   * @param actualRoot The root of the actual AST used with this symbol table.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.acquireSymbolTable#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acquireSymbolTable()",
        "snippet": "  @Override\n  SymbolTable acquireSymbolTable() {\n    if (symbolTable == null) {\n      symbolTable = new SymbolTable(this);\n    }\n    symbolTable.acquire();\n    return symbolTable;\n  }\n",
        "begin_line": 219,
        "end_line": 226,
        "comment": "\n   * Acquires the symbol table.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isQualifiedName#1647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isQualifiedName()",
        "snippet": "    public boolean isQualifiedName() {\n        switch (getType()) {\n            case Token.NAME:\n            case Token.THIS:\n                return true;\n            case Token.GETPROP:\n                return getFirstChild().isQualifiedName();\n            default:\n                return false;\n        }\n    }\n",
        "begin_line": 1647,
        "end_line": 1657,
        "comment": "\n     * Returns whether a node corresponds to a simple or a qualified name, such\n     * as <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEqualsSilent#1334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsSilent(com.google.javascript.rhino.Node)",
        "snippet": "    public boolean checkTreeEqualsSilent(Node node2) {\n        return checkTreeEqualsImpl(node2) == null;\n    }\n",
        "begin_line": 1334,
        "end_line": 1336,
        "comment": "\n     * If this is a compilation pass and not a test, do not construct error\n     * strings. Instead return true if the trees are equal.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isEquivalentTo#1494",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "    public boolean isEquivalentTo(Node node) {\n        if (type == Token.ARRAYLIT) {\n            try {\n                int[] indices1 = (int[])getProp(Node.SKIP_INDEXES_PROP);\n                int[] indices2 = (int[])node.getProp(Node.SKIP_INDEXES_PROP);\n                if (indices1 == null) {\n                    if (indices2 != null)\n                        return false;\n                } else if (indices2 == null) {\n                    return false;\n                } else if (indices1.length != indices2.length) {\n                    return false;\n                } else {\n                    for (int i = 0; i < indices1.length; i++) {\n                        if (indices1[i] != indices2[i])\n                            return false;\n                    }\n                }\n            } catch (Exception e) {\n                return false;\n            }\n        } else if (type == Token.INC ||\n                   type == Token.DEC) {\n            int post1 = this.getIntProp(INCRDECR_PROP, 0);\n            int post2 = node.getIntProp(INCRDECR_PROP, 0);\n            if (post1 != post2)\n                return false;\n        } else if (type == Token.STRING) {\n            int quoted1 = this.getIntProp(QUOTED_PROP, 0);\n            int quoted2 = node.getIntProp(QUOTED_PROP, 0);\n            if (quoted1 != quoted2)\n                return false;\n        }\n        return true;\n    }\n",
        "begin_line": 1494,
        "end_line": 1528,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.toSource#1240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options_.prettyPrint);\n    builder.setLineBreak(options_.lineBreak);\n    builder.setSourceMap(sourceMap_);\n    return builder.build();\n  }\n",
        "begin_line": 1240,
        "end_line": 1247,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.setSourceMap#537",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 537,
        "end_line": 540,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.CompactCodePrinter#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, int, boolean)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak, int lineLengthThreshold,\n        boolean createSrcMap) {\n      super(createSrcMap);\n      this.lineBreak = lineBreak;\n      this.lineLengthThreshold = lineLengthThreshold;\n    }\n",
        "begin_line": 374,
        "end_line": 379,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0303
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.getCode#381",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 381,
        "end_line": 383,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0303
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.setLineBreak#506",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineBreak(boolean)",
        "snippet": "    Builder setLineBreak(boolean lineBreak) {\n      this.lineBreak = lineBreak;\n      return this;\n    }\n",
        "begin_line": 506,
        "end_line": 509,
        "comment": "\n     * Sets whether line breaking should be done automatically.\n     * @param lineBreak If true, line breaking is done automatically.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0303
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.setPrettyPrint#497",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPrettyPrint(boolean)",
        "snippet": "    Builder setPrettyPrint(boolean prettyPrint) {\n      this.prettyPrint = prettyPrint;\n      return this;\n    }\n",
        "begin_line": 497,
        "end_line": 500,
        "comment": "\n     * Sets whether pretty printing should be used.\n     * @param prettyPrint If true, pretty printing will be used.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.MappedCodePrinter#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(boolean)",
        "snippet": "    MappedCodePrinter(boolean createSrcMap) {\n      this.createSrcMap = createSrcMap;\n      this.mappings = createSrcMap ? new Stack<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.startSourceMapping#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      if (createSrcMap\n          && node.getProp(Node.SOURCEFILE_PROP) != null\n          && node.getLineno() > 0) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n\n        // If the index is -1, we are not performing any mapping.\n        if (index >= 0) {\n          Mapping mapping = new Mapping();\n          mapping.node = node;\n          mapping.start = new Position(line, index);\n          mappings.push(mapping);\n          allMappings.add(mapping);\n        }\n      }\n    }\n",
        "begin_line": 81,
        "end_line": 98,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.endSourceMapping#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap\n          && node.getProp(Node.SOURCEFILE_PROP) != null\n          && node.getLineno() > 0) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n\n        // If the index is -1, we are not performing any mapping.\n        if (index >= 0) {\n          Preconditions.checkState(\n              !mappings.empty(), \"Mismatch in start and end of mapping\");\n\n          Mapping mapping = mappings.pop();\n          mapping.end = new Position(line, index);\n        }\n      }\n    }\n",
        "begin_line": 104,
        "end_line": 121,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.Builder#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 489,
        "end_line": 491,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.build#545",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n          sourceMap);\n    }\n",
        "begin_line": 545,
        "end_line": 559,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.toSource#571",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, boolean, int, com.google.javascript.jscomp.SourceMap)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  int lineLengthThreshold,\n                                 SourceMap sourceMap) {\n    boolean createSourceMap = (sourceMap != null);\n    CodeConsumer cp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, lineLengthThreshold, createSourceMap)\n        : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(cp)\n        : new CodeGenerator(cp);\n    cg.add(root);\n\n    String code = ((HasGetCode) cp).getCode();\n\n    if (createSourceMap) {\n      cp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 571,
        "end_line": 593,
        "comment": "\n   * Converts a tree to js code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.CodeGenerator#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer)",
        "snippet": "  CodeGenerator(CodeConsumer consumer) {\n    cc = consumer;\n  }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.add#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.continueProcessing#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isSyntheticBlock#1907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isSyntheticBlock()",
        "snippet": "    public boolean isSyntheticBlock() {\n        return getBooleanProp(SYNTHETIC_BLOCK_PROP);\n    }\n",
        "begin_line": 1907,
        "end_line": 1909,
        "comment": "\n     * Returns whether this is a synthetic block that should not be considered\n     * a real source block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.addNumber#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addNumber(double)",
        "snippet": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    if (x < 0 && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x) {\n      add(Long.toString((long) x));\n    } else {\n      add(String.valueOf(x));\n    }\n  }\n",
        "begin_line": 261,
        "end_line": 274,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0227
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getDouble#250",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.getDouble()",
        "snippet": "        @Override public double getDouble() {\n          return this.number;\n        }\n",
        "begin_line": 250,
        "end_line": 252,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processNumberLiteral#600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNumberLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral)",
        "snippet": "    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      Node newNode = Node.newNumber(literalNode.getNumber());\n      return newNode;\n    }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0215
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.NumberNode#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.NumberNode(double)",
        "snippet": "        NumberNode(double number) {\n            super(Token.NUMBER);\n            this.number = number;\n        }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0214
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newNumber#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newNumber(double)",
        "snippet": "    public static Node newNumber(double number) {\n        return new NumberNode(number);\n    }\n",
        "begin_line": 483,
        "end_line": 485,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0214
        },
        "num_failing_tests": 1
    }
]