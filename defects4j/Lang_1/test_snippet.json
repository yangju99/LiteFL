[
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        assertNotNull(new NumberUtils());\n        final Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n        assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers()));\n        assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers()));\n    }\n",
        "begin_line": 40,
        "end_line": 48,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 41)",
            "(line 43,col 9)-(line 43,col 82)",
            "(line 44,col 9)-(line 44,col 37)",
            "(line 45,col 9)-(line 45,col 62)",
            "(line 46,col 9)-(line 46,col 72)",
            "(line 47,col 9)-(line 47,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToIntString()",
        "snippet": "    @Test\n    public void testToIntString() {\n        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n    }\n",
        "begin_line": 55,
        "end_line": 61,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String)}.\n     ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 82)",
            "(line 58,col 9)-(line 58,col 76)",
            "(line 59,col 9)-(line 59,col 70)",
            "(line 60,col 9)-(line 60,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToIntStringI()",
        "snippet": "    @Test\n    public void testToIntStringI() {\n        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n    }\n",
        "begin_line": 66,
        "end_line": 70,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String, int)}.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 89)",
            "(line 69,col 9)-(line 69,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToLongString()",
        "snippet": "    @Test\n    public void testToLongString() {\n        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n    }\n",
        "begin_line": 75,
        "end_line": 85,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String)}.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 85)",
            "(line 78,col 9)-(line 78,col 79)",
            "(line 79,col 9)-(line 79,col 78)",
            "(line 80,col 9)-(line 80,col 78)",
            "(line 81,col 9)-(line 81,col 109)",
            "(line 82,col 9)-(line 82,col 109)",
            "(line 83,col 9)-(line 83,col 73)",
            "(line 84,col 9)-(line 84,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToLongStringL()",
        "snippet": "    @Test\n    public void testToLongStringL() {\n        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n    }\n",
        "begin_line": 90,
        "end_line": 94,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String, long)}.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 94)",
            "(line 93,col 9)-(line 93,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString()",
        "snippet": "    @Test\n    public void testToFloatString() {\n        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n    }\n",
        "begin_line": 99,
        "end_line": 108,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String)}.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 91)",
            "(line 102,col 9)-(line 102,col 89)",
            "(line 103,col 9)-(line 103,col 83)",
            "(line 104,col 9)-(line 104,col 115)",
            "(line 105,col 9)-(line 105,col 114)",
            "(line 106,col 9)-(line 106,col 77)",
            "(line 107,col 9)-(line 107,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF()",
        "snippet": "    @Test\n    public void testToFloatStringF() {\n        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n    }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String, float)}.\n     ",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 99)",
            "(line 116,col 9)-(line 116,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testStringCreateNumberEnsureNoPrecisionLoss()",
        "snippet": "    @Test\n    public void testStringCreateNumberEnsureNoPrecisionLoss(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);\n        assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);\n        assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);\n    }\n",
        "begin_line": 122,
        "end_line": 131,
        "comment": "\n     * Test for {(@link NumberUtils#createNumber(String)}\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 38)",
            "(line 125,col 9)-(line 125,col 49)",
            "(line 126,col 9)-(line 126,col 64)",
            "(line 128,col 9)-(line 128,col 77)",
            "(line 129,col 9)-(line 129,col 79)",
            "(line 130,col 9)-(line 130,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString()",
        "snippet": "    @Test\n    public void testStringToDoubleString() {\n        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n    }\n",
        "begin_line": 135,
        "end_line": 144,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String)}.\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 93)",
            "(line 138,col 9)-(line 138,col 91)",
            "(line 139,col 9)-(line 139,col 85)",
            "(line 140,col 9)-(line 140,col 119)",
            "(line 141,col 9)-(line 141,col 119)",
            "(line 142,col 9)-(line 142,col 79)",
            "(line 143,col 9)-(line 143,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD()",
        "snippet": "    @Test\n    public void testStringToDoubleStringD() {\n        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n    }\n",
        "begin_line": 149,
        "end_line": 153,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String, double)}.\n     ",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 101)",
            "(line 152,col 9)-(line 152,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToByteString()",
        "snippet": "    @Test\n    public void testToByteString() {\n        assertTrue(\"toByte(String) 1 failed\", NumberUtils.toByte(\"123\") == 123);\n        assertTrue(\"toByte(String) 2 failed\", NumberUtils.toByte(\"abc\") == 0);\n        assertTrue(\"toByte(empty) failed\", NumberUtils.toByte(\"\") == 0);\n        assertTrue(\"toByte(null) failed\", NumberUtils.toByte(null) == 0);\n    }\n",
        "begin_line": 158,
        "end_line": 164,
        "comment": "\n     * Test for {@link NumberUtils#toByte(String)}.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 80)",
            "(line 161,col 9)-(line 161,col 78)",
            "(line 162,col 9)-(line 162,col 72)",
            "(line 163,col 9)-(line 163,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToByteStringI()",
        "snippet": "    @Test\n    public void testToByteStringI() {\n        assertTrue(\"toByte(String,byte) 1 failed\", NumberUtils.toByte(\"123\", (byte) 5) == 123);\n        assertTrue(\"toByte(String,byte) 2 failed\", NumberUtils.toByte(\"12.3\", (byte) 5) == 5);\n    }\n",
        "begin_line": 169,
        "end_line": 173,
        "comment": "\n     * Test for {@link NumberUtils#toByte(String, byte)}.\n     ",
        "child_ranges": [
            "(line 171,col 9)-(line 171,col 95)",
            "(line 172,col 9)-(line 172,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToShortString()",
        "snippet": "    @Test\n    public void testToShortString() {\n        assertTrue(\"toShort(String) 1 failed\", NumberUtils.toShort(\"12345\") == 12345);\n        assertTrue(\"toShort(String) 2 failed\", NumberUtils.toShort(\"abc\") == 0);\n        assertTrue(\"toShort(empty) failed\", NumberUtils.toShort(\"\") == 0);\n        assertTrue(\"toShort(null) failed\", NumberUtils.toShort(null) == 0);\n    }\n",
        "begin_line": 178,
        "end_line": 184,
        "comment": "\n     * Test for {@link NumberUtils#toShort(String)}.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 86)",
            "(line 181,col 9)-(line 181,col 80)",
            "(line 182,col 9)-(line 182,col 74)",
            "(line 183,col 9)-(line 183,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testToShortStringI()",
        "snippet": "    @Test\n    public void testToShortStringI() {\n        assertTrue(\"toShort(String,short) 1 failed\", NumberUtils.toShort(\"12345\", (short) 5) == 12345);\n        assertTrue(\"toShort(String,short) 2 failed\", NumberUtils.toShort(\"1234.5\", (short) 5) == 5);\n    }\n",
        "begin_line": 189,
        "end_line": 193,
        "comment": "\n     * Test for {@link NumberUtils#toShort(String, short)}.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 103)",
            "(line 192,col 9)-(line 192,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber()",
        "snippet": "    @Test\n    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());\n        assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n\n        assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n\n        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));\n\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n\n        // LANG-693\n        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));\n\n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        assertNotNull(bigNum);\n        assertEquals(BigDecimal.class, bigNum.getClass());\n    }\n",
        "begin_line": 195,
        "end_line": 247,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 115)",
            "(line 199,col 9)-(line 199,col 115)",
            "(line 200,col 9)-(line 200,col 117)",
            "(line 201,col 9)-(line 201,col 117)",
            "(line 202,col 9)-(line 202,col 116)",
            "(line 203,col 9)-(line 203,col 116)",
            "(line 204,col 9)-(line 205,col 41)",
            "(line 206,col 9)-(line 206,col 111)",
            "(line 207,col 9)-(line 207,col 111)",
            "(line 208,col 9)-(line 208,col 117)",
            "(line 209,col 9)-(line 209,col 117)",
            "(line 210,col 9)-(line 210,col 110)",
            "(line 211,col 9)-(line 211,col 110)",
            "(line 212,col 9)-(line 212,col 113)",
            "(line 213,col 9)-(line 213,col 113)",
            "(line 214,col 9)-(line 214,col 119)",
            "(line 215,col 9)-(line 215,col 116)",
            "(line 216,col 9)-(line 216,col 121)",
            "(line 217,col 9)-(line 217,col 121)",
            "(line 218,col 9)-(line 218,col 88)",
            "(line 219,col 9)-(line 220,col 56)",
            "(line 222,col 9)-(line 223,col 48)",
            "(line 225,col 9)-(line 226,col 63)",
            "(line 227,col 9)-(line 228,col 57)",
            "(line 229,col 9)-(line 230,col 54)",
            "(line 233,col 9)-(line 233,col 114)",
            "(line 236,col 9)-(line 236,col 80)",
            "(line 239,col 9)-(line 240,col 58)",
            "(line 244,col 9)-(line 244,col 69)",
            "(line 245,col 9)-(line 245,col 30)",
            "(line 246,col 9)-(line 246,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.TestLang747()",
        "snippet": "    @Test\n    public void TestLang747() {\n        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));\n        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));\n        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));\n\n        // Leading zero tests\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));\n\n        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));\n        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));\n        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));\n        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));\n        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));\n\n        // Leading zero tests\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));\n    }\n",
        "begin_line": 249,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 251,col 9)-(line 251,col 87)",
            "(line 252,col 9)-(line 252,col 88)",
            "(line 253,col 9)-(line 253,col 89)",
            "(line 254,col 9)-(line 254,col 90)",
            "(line 255,col 9)-(line 255,col 91)",
            "(line 256,col 9)-(line 256,col 91)",
            "(line 257,col 9)-(line 257,col 91)",
            "(line 260,col 9)-(line 260,col 91)",
            "(line 261,col 9)-(line 261,col 93)",
            "(line 262,col 9)-(line 262,col 92)",
            "(line 263,col 9)-(line 263,col 93)",
            "(line 265,col 9)-(line 265,col 97)",
            "(line 266,col 9)-(line 266,col 98)",
            "(line 267,col 9)-(line 267,col 99)",
            "(line 268,col 9)-(line 268,col 100)",
            "(line 269,col 9)-(line 269,col 101)",
            "(line 270,col 9)-(line 270,col 102)",
            "(line 271,col 9)-(line 271,col 103)",
            "(line 272,col 9)-(line 272,col 104)",
            "(line 274,col 9)-(line 274,col 109)",
            "(line 275,col 9)-(line 275,col 109)",
            "(line 278,col 9)-(line 278,col 105)",
            "(line 279,col 9)-(line 279,col 104)",
            "(line 280,col 9)-(line 280,col 105)",
            "(line 282,col 9)-(line 282,col 113)",
            "(line 283,col 9)-(line 283,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_1()",
        "snippet": "    @Test(expected=NumberFormatException.class)\n    // Check that the code fails to create a valid number when preceeded by -- rather than -\n    public void testCreateNumberFailure_1() {\n        NumberUtils.createNumber(\"--1.1E-700F\");\n    }\n",
        "begin_line": 286,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_2()",
        "snippet": "    @Test(expected=NumberFormatException.class)\n    // Check that the code fails to create a valid number when both e and E are present (with decimal)\n    public void testCreateNumberFailure_2() {\n        NumberUtils.createNumber(\"-1.1E+0-7e00\");\n    }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_3()",
        "snippet": "    @Test(expected=NumberFormatException.class)\n    // Check that the code fails to create a valid number when both e and E are present (no decimal)\n    public void testCreateNumberFailure_3() {\n        NumberUtils.createNumber(\"-11E+0-7e00\");\n    }\n",
        "begin_line": 298,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberFailure_4()",
        "snippet": "    @Test(expected=NumberFormatException.class)\n    // Check that the code fails to create a valid number when both e and E are present (no decimal)\n    public void testCreateNumberFailure_4() {\n        NumberUtils.createNumber(\"1eE+00001\");\n    }\n",
        "begin_line": 304,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberMagnitude()",
        "snippet": "    @Test\n    public void testCreateNumberMagnitude() {\n        // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type\n        assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber(\"3.4028235e+38\"));\n        assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber(\"3.4028236e+38\"));\n\n        // Test Double.MAX_VALUE\n        assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber(\"1.7976931348623157e+308\"));\n        // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)\n        assertEquals(new BigDecimal(\"1.7976931348623159e+308\"), NumberUtils.createNumber(\"1.7976931348623159e+308\"));\n\n        assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber(\"0x12345678\"));\n        assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber(\"0x123456789\"));\n\n        assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber(\"0x7fffffffffffffff\"));\n        // Does not appear to be a way to create a literal BigInteger of this magnitude\n        assertEquals(new BigInteger(\"7fffffffffffffff0\",16), NumberUtils.createNumber(\"0x7fffffffffffffff0\"));\n\n        assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber(\"#7fffffffffffffff\"));\n        assertEquals(new BigInteger(\"7fffffffffffffff0\",16), NumberUtils.createNumber(\"#7fffffffffffffff0\"));\n\n        assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber(\"017777777777\")); // 31 bits\n        assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber(\"037777777777\")); // 32 bits\n\n        assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber(\"0777777777777777777777\")); // 63 bits\n        assertEquals(new BigInteger(\"1777777777777777777777\",8), NumberUtils.createNumber(\"01777777777777777777777\"));// 64 bits\n    }\n",
        "begin_line": 312,
        "end_line": 338,
        "comment": " Will probably need to be adjusted if code is changed to check precision (LANG-693)",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 97)",
            "(line 316,col 9)-(line 316,col 97)",
            "(line 319,col 9)-(line 319,col 117)",
            "(line 321,col 9)-(line 321,col 117)",
            "(line 323,col 9)-(line 323,col 90)",
            "(line 324,col 9)-(line 324,col 91)",
            "(line 326,col 9)-(line 326,col 109)",
            "(line 328,col 9)-(line 328,col 110)",
            "(line 330,col 9)-(line 330,col 108)",
            "(line 331,col 9)-(line 331,col 109)",
            "(line 333,col 9)-(line 333,col 94)",
            "(line 334,col 9)-(line 334,col 94)",
            "(line 336,col 9)-(line 336,col 117)",
            "(line 337,col 9)-(line 337,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloat()",
        "snippet": "    @Test\n    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", Float.valueOf(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n        this.testCreateFloatFailure(\"\");\n        this.testCreateFloatFailure(\" \");\n        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 340,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 111)",
            "(line 343,col 9)-(line 343,col 86)",
            "(line 344,col 9)-(line 344,col 40)",
            "(line 345,col 9)-(line 345,col 41)",
            "(line 346,col 9)-(line 346,col 50)",
            "(line 348,col 9)-(line 348,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloatFailure(java.lang.String)",
        "snippet": "    protected void testCreateFloatFailure(final String str) {\n        try {\n            final Float value = NumberUtils.createFloat(str);\n            fail(\"createFloat(\\\"\" + str + \"\\\") should have failed: \" + value);\n        } catch (final NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 351,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 352,col 9)-(line 357,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble()",
        "snippet": "    @Test\n    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", Double.valueOf(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n        this.testCreateDoubleFailure(\"\");\n        this.testCreateDoubleFailure(\" \");\n        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 360,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 114)",
            "(line 363,col 9)-(line 363,col 88)",
            "(line 364,col 9)-(line 364,col 41)",
            "(line 365,col 9)-(line 365,col 42)",
            "(line 366,col 9)-(line 366,col 51)",
            "(line 368,col 9)-(line 368,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateDoubleFailure(java.lang.String)",
        "snippet": "    protected void testCreateDoubleFailure(final String str) {\n        try {\n            final Double value = NumberUtils.createDouble(str);\n            fail(\"createDouble(\\\"\" + str + \"\\\") should have failed: \" + value);\n        } catch (final NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 371,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 377,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateInteger()",
        "snippet": "    @Test\n    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", Integer.valueOf(\"12345\"), NumberUtils.createInteger(\"12345\"));\n        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n        this.testCreateIntegerFailure(\"\");\n        this.testCreateIntegerFailure(\" \");\n        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 380,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 115)",
            "(line 383,col 9)-(line 383,col 90)",
            "(line 384,col 9)-(line 384,col 42)",
            "(line 385,col 9)-(line 385,col 43)",
            "(line 386,col 9)-(line 386,col 52)",
            "(line 388,col 9)-(line 388,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateIntegerFailure(final String str) {\n        try {\n            final Integer value = NumberUtils.createInteger(str);\n            fail(\"createInteger(\\\"\" + str + \"\\\") should have failed: \" + value);\n        } catch (final NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 391,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 392,col 9)-(line 397,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong()",
        "snippet": "    @Test\n    public void testCreateLong() {\n        assertEquals(\"createLong(String) failed\", Long.valueOf(\"12345\"), NumberUtils.createLong(\"12345\"));\n        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n        this.testCreateLongFailure(\"\");\n        this.testCreateLongFailure(\" \");\n        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 400,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 402,col 9)-(line 402,col 106)",
            "(line 403,col 9)-(line 403,col 84)",
            "(line 404,col 9)-(line 404,col 39)",
            "(line 405,col 9)-(line 405,col 40)",
            "(line 406,col 9)-(line 406,col 49)",
            "(line 408,col 9)-(line 408,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongFailure(java.lang.String)",
        "snippet": "    protected void testCreateLongFailure(final String str) {\n        try {\n            final Long value = NumberUtils.createLong(str);\n            fail(\"createLong(\\\"\" + str + \"\\\") should have failed: \" + value);\n        } catch (final NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 411,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 412,col 9)-(line 417,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger()",
        "snippet": "    @Test\n    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n        this.testCreateBigIntegerFailure(\"\");\n        this.testCreateBigIntegerFailure(\" \");\n        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0xff\"));\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"#ff\"));\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0xff\"));\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0377\"));\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0377\"));\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0377\"));\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"-0\"), NumberUtils.createBigInteger(\"-0\"));\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"0\"), NumberUtils.createBigInteger(\"0\"));\n        testCreateBigIntegerFailure(\"#\");\n        testCreateBigIntegerFailure(\"-#\");\n        testCreateBigIntegerFailure(\"0x\");\n        testCreateBigIntegerFailure(\"-0x\");\n    }\n",
        "begin_line": 420,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 422,col 9)-(line 422,col 120)",
            "(line 423,col 9)-(line 423,col 96)",
            "(line 424,col 9)-(line 424,col 45)",
            "(line 425,col 9)-(line 425,col 46)",
            "(line 426,col 9)-(line 426,col 55)",
            "(line 428,col 9)-(line 428,col 93)",
            "(line 429,col 9)-(line 429,col 117)",
            "(line 430,col 9)-(line 430,col 116)",
            "(line 431,col 9)-(line 431,col 119)",
            "(line 432,col 9)-(line 432,col 117)",
            "(line 433,col 9)-(line 433,col 119)",
            "(line 434,col 9)-(line 434,col 119)",
            "(line 435,col 9)-(line 435,col 114)",
            "(line 436,col 9)-(line 436,col 112)",
            "(line 437,col 9)-(line 437,col 41)",
            "(line 438,col 9)-(line 438,col 42)",
            "(line 439,col 9)-(line 439,col 42)",
            "(line 440,col 9)-(line 440,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigIntegerFailure(final String str) {\n        try {\n            final BigInteger value = NumberUtils.createBigInteger(str);\n            fail(\"createBigInteger(\\\"\" + str + \"\\\") should have failed: \" + value);\n        } catch (final NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 443,
        "end_line": 450,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 449,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimal()",
        "snippet": "    @Test\n    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n        this.testCreateBigDecimalFailure(\"\");\n        this.testCreateBigDecimalFailure(\" \");\n        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n        this.testCreateBigDecimalFailure(\"-\"); // sign alone not valid\n        this.testCreateBigDecimalFailure(\"--\"); // comment in NumberUtils suggests some implementations may incorrectly allow this\n        this.testCreateBigDecimalFailure(\"--0\");\n        this.testCreateBigDecimalFailure(\"+\"); // sign alone not valid\n        this.testCreateBigDecimalFailure(\"++\"); // in case this was also allowed by some JVMs\n        this.testCreateBigDecimalFailure(\"++0\");\n    }\n",
        "begin_line": 452,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 454,col 9)-(line 454,col 122)",
            "(line 455,col 9)-(line 455,col 96)",
            "(line 456,col 9)-(line 456,col 45)",
            "(line 457,col 9)-(line 457,col 46)",
            "(line 458,col 9)-(line 458,col 55)",
            "(line 460,col 9)-(line 460,col 93)",
            "(line 461,col 9)-(line 461,col 46)",
            "(line 462,col 9)-(line 462,col 47)",
            "(line 463,col 9)-(line 463,col 48)",
            "(line 464,col 9)-(line 464,col 46)",
            "(line 465,col 9)-(line 465,col 47)",
            "(line 466,col 9)-(line 466,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimalFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigDecimalFailure(final String str) {\n        try {\n            final BigDecimal value = NumberUtils.createBigDecimal(str);\n            fail(\"createBigDecimal(\\\"\" + str + \"\\\") should have failed: \" + value);\n        } catch (final NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 469,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 475,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinLong_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinLong_nullArray() {\n        NumberUtils.min((long[]) null);\n    }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": " ----------------------------------------------------------------------",
        "child_ranges": [
            "(line 482,col 9)-(line 482,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinLong_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinLong_emptyArray() {\n        NumberUtils.min(new long[0]);\n    }\n",
        "begin_line": 485,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinLong()",
        "snippet": "    @Test\n    public void testMinLong() {\n        assertEquals(\n            \"min(long[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new long[] { 5 }));\n\n        assertEquals(\n            \"min(long[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new long[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 490,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 492,col 9)-(line 495,col 47)",
            "(line 497,col 9)-(line 500,col 50)",
            "(line 502,col 9)-(line 502,col 77)",
            "(line 503,col 9)-(line 503,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinInt_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinInt_nullArray() {\n        NumberUtils.min((int[]) null);\n    }\n",
        "begin_line": 506,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinInt_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinInt_emptyArray() {\n        NumberUtils.min(new int[0]);\n    }\n",
        "begin_line": 511,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 513,col 9)-(line 513,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinInt()",
        "snippet": "    @Test\n    public void testMinInt() {\n        assertEquals(\n            \"min(int[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new int[] { 5 }));\n\n        assertEquals(\n            \"min(int[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new int[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 516,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 518,col 9)-(line 521,col 46)",
            "(line 523,col 9)-(line 526,col 49)",
            "(line 528,col 9)-(line 528,col 76)",
            "(line 529,col 9)-(line 529,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinShort_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinShort_nullArray() {\n        NumberUtils.min((short[]) null);\n    }\n",
        "begin_line": 532,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 534,col 9)-(line 534,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinShort_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinShort_emptyArray() {\n        NumberUtils.min(new short[0]);\n    }\n",
        "begin_line": 537,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 539,col 9)-(line 539,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinShort()",
        "snippet": "    @Test\n    public void testMinShort() {\n        assertEquals(\n            \"min(short[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new short[] { 5 }));\n\n        assertEquals(\n            \"min(short[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new short[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 542,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 544,col 9)-(line 547,col 48)",
            "(line 549,col 9)-(line 552,col 51)",
            "(line 554,col 9)-(line 554,col 78)",
            "(line 555,col 9)-(line 555,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinByte_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinByte_nullArray() {\n        NumberUtils.min((byte[]) null);\n    }\n",
        "begin_line": 558,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinByte_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinByte_emptyArray() {\n        NumberUtils.min(new byte[0]);\n    }\n",
        "begin_line": 563,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinByte()",
        "snippet": "    @Test\n    public void testMinByte() {\n        assertEquals(\n            \"min(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new byte[] { 5 }));\n\n        assertEquals(\n            \"min(byte[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new byte[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 568,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 570,col 9)-(line 573,col 47)",
            "(line 575,col 9)-(line 578,col 50)",
            "(line 580,col 9)-(line 580,col 77)",
            "(line 581,col 9)-(line 581,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinDouble_nullArray() {\n        NumberUtils.min((double[]) null);\n    }\n",
        "begin_line": 584,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinDouble_emptyArray() {\n        NumberUtils.min(new double[0]);\n    }\n",
        "begin_line": 589,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 591,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble()",
        "snippet": "    @Test\n    public void testMinDouble() {\n        assertEquals(\n            \"min(double[]) failed for array length 1\",\n            5.12,\n            NumberUtils.min(new double[] { 5.12 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 2\",\n            6.23,\n            NumberUtils.min(new double[] { 6.23, 9.34 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 5\",\n            -10.45,\n            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n            0);\n        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n    }\n",
        "begin_line": 594,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 596,col 9)-(line 600,col 15)",
            "(line 602,col 9)-(line 606,col 15)",
            "(line 608,col 9)-(line 612,col 15)",
            "(line 613,col 9)-(line 613,col 87)",
            "(line 614,col 9)-(line 614,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinFloat_nullArray() {\n        NumberUtils.min((float[]) null);\n    }\n",
        "begin_line": 617,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 619,col 9)-(line 619,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMinFloat_emptyArray() {\n        NumberUtils.min(new float[0]);\n    }\n",
        "begin_line": 622,
        "end_line": 625,
        "comment": "",
        "child_ranges": [
            "(line 624,col 9)-(line 624,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat()",
        "snippet": "    @Test\n    public void testMinFloat() {\n        assertEquals(\n            \"min(float[]) failed for array length 1\",\n            5.9f,\n            NumberUtils.min(new float[] { 5.9f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 2\",\n            6.8f,\n            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 5\",\n            -10.6f,\n            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n            0);\n        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n    }\n",
        "begin_line": 627,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 629,col 9)-(line 633,col 15)",
            "(line 635,col 9)-(line 639,col 15)",
            "(line 641,col 9)-(line 645,col 15)",
            "(line 646,col 9)-(line 646,col 87)",
            "(line 647,col 9)-(line 647,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxLong_nullArray() {\n        NumberUtils.max((long[]) null);\n    }\n",
        "begin_line": 650,
        "end_line": 653,
        "comment": "",
        "child_ranges": [
            "(line 652,col 9)-(line 652,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxLong_emptyArray() {\n        NumberUtils.max(new long[0]);\n    }\n",
        "begin_line": 655,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 657,col 9)-(line 657,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong()",
        "snippet": "    @Test\n    public void testMaxLong() {\n        assertEquals(\n            \"max(long[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new long[] { 5 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new long[] { 6, 9 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 660,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 662,col 9)-(line 665,col 47)",
            "(line 667,col 9)-(line 670,col 50)",
            "(line 672,col 9)-(line 675,col 63)",
            "(line 676,col 9)-(line 676,col 76)",
            "(line 677,col 9)-(line 677,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxInt_nullArray() {\n        NumberUtils.max((int[]) null);\n    }\n",
        "begin_line": 680,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 682,col 9)-(line 682,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxInt_emptyArray() {\n        NumberUtils.max(new int[0]);\n    }\n",
        "begin_line": 685,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 687,col 9)-(line 687,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt()",
        "snippet": "    @Test\n    public void testMaxInt() {\n        assertEquals(\n            \"max(int[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new int[] { 5 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new int[] { 6, 9 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 690,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 692,col 9)-(line 695,col 46)",
            "(line 697,col 9)-(line 700,col 49)",
            "(line 702,col 9)-(line 705,col 62)",
            "(line 706,col 9)-(line 706,col 75)",
            "(line 707,col 9)-(line 707,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxShort_nullArray() {\n        NumberUtils.max((short[]) null);\n    }\n",
        "begin_line": 710,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxShort_emptyArray() {\n        NumberUtils.max(new short[0]);\n    }\n",
        "begin_line": 715,
        "end_line": 718,
        "comment": "",
        "child_ranges": [
            "(line 717,col 9)-(line 717,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort()",
        "snippet": "    @Test\n    public void testMaxShort() {\n        assertEquals(\n            \"max(short[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new short[] { 5 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new short[] { 6, 9 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 720,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 722,col 9)-(line 725,col 48)",
            "(line 727,col 9)-(line 730,col 51)",
            "(line 732,col 9)-(line 735,col 64)",
            "(line 736,col 9)-(line 736,col 77)",
            "(line 737,col 9)-(line 737,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxByte_nullArray() {\n        NumberUtils.max((byte[]) null);\n    }\n",
        "begin_line": 740,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 742,col 9)-(line 742,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxByte_emptyArray() {\n        NumberUtils.max(new byte[0]);\n    }\n",
        "begin_line": 745,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 747,col 9)-(line 747,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte()",
        "snippet": "    @Test\n    public void testMaxByte() {\n        assertEquals(\n            \"max(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new byte[] { 5 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new byte[] { 6, 9 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 750,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 752,col 9)-(line 755,col 47)",
            "(line 757,col 9)-(line 760,col 50)",
            "(line 762,col 9)-(line 765,col 63)",
            "(line 766,col 9)-(line 766,col 76)",
            "(line 767,col 9)-(line 767,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxDouble_nullArray() {\n        NumberUtils.max((double[]) null);\n    }\n",
        "begin_line": 770,
        "end_line": 773,
        "comment": "",
        "child_ranges": [
            "(line 772,col 9)-(line 772,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxDouble_emptyArray() {\n        NumberUtils.max(new double[0]);\n    }\n",
        "begin_line": 775,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 777,col 9)-(line 777,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble()",
        "snippet": "    @Test\n    public void testMaxDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.max(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (final IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (final IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(double[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new double[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n    }\n",
        "begin_line": 780,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 782,col 9)-(line 782,col 32)",
            "(line 783,col 9)-(line 786,col 54)",
            "(line 788,col 9)-(line 791,col 54)",
            "(line 793,col 9)-(line 797,col 15)",
            "(line 799,col 9)-(line 803,col 15)",
            "(line 805,col 9)-(line 809,col 15)",
            "(line 810,col 9)-(line 810,col 86)",
            "(line 811,col 9)-(line 811,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat_nullArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxFloat_nullArray() {\n        NumberUtils.max((float[]) null);\n    }\n",
        "begin_line": 814,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 816,col 9)-(line 816,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat_emptyArray()",
        "snippet": "    @Test(expected = IllegalArgumentException.class)\n    public void testMaxFloat_emptyArray() {\n        NumberUtils.max(new float[0]);\n    }\n",
        "begin_line": 819,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 821,col 9)-(line 821,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat()",
        "snippet": "    @Test\n    public void testMaxFloat() {\n        assertEquals(\n            \"max(float[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new float[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n    }\n",
        "begin_line": 824,
        "end_line": 845,
        "comment": "",
        "child_ranges": [
            "(line 826,col 9)-(line 830,col 15)",
            "(line 832,col 9)-(line 836,col 15)",
            "(line 838,col 9)-(line 842,col 15)",
            "(line 843,col 9)-(line 843,col 86)",
            "(line 844,col 9)-(line 844,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumLong()",
        "snippet": "    @Test\n    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n    }\n",
        "begin_line": 847,
        "end_line": 854,
        "comment": "",
        "child_ranges": [
            "(line 849,col 9)-(line 849,col 116)",
            "(line 850,col 9)-(line 850,col 115)",
            "(line 851,col 9)-(line 851,col 116)",
            "(line 852,col 9)-(line 852,col 111)",
            "(line 853,col 9)-(line 853,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumInt()",
        "snippet": "    @Test\n    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n    }\n",
        "begin_line": 856,
        "end_line": 863,
        "comment": "",
        "child_ranges": [
            "(line 858,col 9)-(line 858,col 107)",
            "(line 859,col 9)-(line 859,col 107)",
            "(line 860,col 9)-(line 860,col 107)",
            "(line 861,col 9)-(line 861,col 103)",
            "(line 862,col 9)-(line 862,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort()",
        "snippet": "    @Test\n    public void testMinimumShort() {\n        final short low = 1234;\n        final short mid = 1234 + 1;\n        final short high = 1234 + 2;\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n",
        "begin_line": 865,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 867,col 9)-(line 867,col 31)",
            "(line 868,col 9)-(line 868,col 35)",
            "(line 869,col 9)-(line 869,col 36)",
            "(line 870,col 9)-(line 870,col 98)",
            "(line 871,col 9)-(line 871,col 98)",
            "(line 872,col 9)-(line 872,col 98)",
            "(line 873,col 9)-(line 873,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumByte()",
        "snippet": "    @Test\n    public void testMinimumByte() {\n        final byte low = 123;\n        final byte mid = 123 + 1;\n        final byte high = 123 + 2;\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n",
        "begin_line": 876,
        "end_line": 885,
        "comment": "",
        "child_ranges": [
            "(line 878,col 9)-(line 878,col 29)",
            "(line 879,col 9)-(line 879,col 33)",
            "(line 880,col 9)-(line 880,col 34)",
            "(line 881,col 9)-(line 881,col 95)",
            "(line 882,col 9)-(line 882,col 95)",
            "(line 883,col 9)-(line 883,col 95)",
            "(line 884,col 9)-(line 884,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumDouble()",
        "snippet": "    @Test\n    public void testMinimumDouble() {\n        final double low = 12.3;\n        final double mid = 12.3 + 1;\n        final double high = 12.3 + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n    }\n",
        "begin_line": 887,
        "end_line": 897,
        "comment": "",
        "child_ranges": [
            "(line 889,col 9)-(line 889,col 32)",
            "(line 890,col 9)-(line 890,col 36)",
            "(line 891,col 9)-(line 891,col 37)",
            "(line 892,col 9)-(line 892,col 67)",
            "(line 893,col 9)-(line 893,col 67)",
            "(line 894,col 9)-(line 894,col 67)",
            "(line 895,col 9)-(line 895,col 66)",
            "(line 896,col 9)-(line 896,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMinimumFloat()",
        "snippet": "    @Test\n    public void testMinimumFloat() {\n        final float low = 12.3f;\n        final float mid = 12.3f + 1;\n        final float high = 12.3f + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n    }\n",
        "begin_line": 899,
        "end_line": 909,
        "comment": "",
        "child_ranges": [
            "(line 901,col 9)-(line 901,col 32)",
            "(line 902,col 9)-(line 902,col 36)",
            "(line 903,col 9)-(line 903,col 37)",
            "(line 904,col 9)-(line 904,col 68)",
            "(line 905,col 9)-(line 905,col 68)",
            "(line 906,col 9)-(line 906,col 68)",
            "(line 907,col 9)-(line 907,col 67)",
            "(line 908,col 9)-(line 908,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumLong()",
        "snippet": "    @Test\n    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n    }\n",
        "begin_line": 911,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 913,col 9)-(line 913,col 116)",
            "(line 914,col 9)-(line 914,col 116)",
            "(line 915,col 9)-(line 915,col 116)",
            "(line 916,col 9)-(line 916,col 111)",
            "(line 917,col 9)-(line 917,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumInt()",
        "snippet": "    @Test\n    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n    }\n",
        "begin_line": 920,
        "end_line": 927,
        "comment": "",
        "child_ranges": [
            "(line 922,col 9)-(line 922,col 107)",
            "(line 923,col 9)-(line 923,col 107)",
            "(line 924,col 9)-(line 924,col 107)",
            "(line 925,col 9)-(line 925,col 103)",
            "(line 926,col 9)-(line 926,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumShort()",
        "snippet": "    @Test\n    public void testMaximumShort() {\n        final short low = 1234;\n        final short mid = 1234 + 1;\n        final short high = 1234 + 2;\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n",
        "begin_line": 929,
        "end_line": 938,
        "comment": "",
        "child_ranges": [
            "(line 931,col 9)-(line 931,col 31)",
            "(line 932,col 9)-(line 932,col 35)",
            "(line 933,col 9)-(line 933,col 36)",
            "(line 934,col 9)-(line 934,col 99)",
            "(line 935,col 9)-(line 935,col 99)",
            "(line 936,col 9)-(line 936,col 99)",
            "(line 937,col 9)-(line 937,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumByte()",
        "snippet": "    @Test\n    public void testMaximumByte() {\n        final byte low = 123;\n        final byte mid = 123 + 1;\n        final byte high = 123 + 2;\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n",
        "begin_line": 940,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 942,col 9)-(line 942,col 29)",
            "(line 943,col 9)-(line 943,col 33)",
            "(line 944,col 9)-(line 944,col 34)",
            "(line 945,col 9)-(line 945,col 96)",
            "(line 946,col 9)-(line 946,col 96)",
            "(line 947,col 9)-(line 947,col 96)",
            "(line 948,col 9)-(line 948,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumDouble()",
        "snippet": "    @Test\n    public void testMaximumDouble() {\n        final double low = 12.3;\n        final double mid = 12.3 + 1;\n        final double high = 12.3 + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n    }\n",
        "begin_line": 951,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 953,col 9)-(line 953,col 32)",
            "(line 954,col 9)-(line 954,col 36)",
            "(line 955,col 9)-(line 955,col 37)",
            "(line 956,col 9)-(line 956,col 68)",
            "(line 957,col 9)-(line 957,col 68)",
            "(line 958,col 9)-(line 958,col 68)",
            "(line 959,col 9)-(line 959,col 66)",
            "(line 960,col 9)-(line 960,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testMaximumFloat()",
        "snippet": "    @Test\n    public void testMaximumFloat() {\n        final float low = 12.3f;\n        final float mid = 12.3f + 1;\n        final float high = 12.3f + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n    }\n",
        "begin_line": 963,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 965,col 9)-(line 965,col 32)",
            "(line 966,col 9)-(line 966,col 36)",
            "(line 967,col 9)-(line 967,col 37)",
            "(line 968,col 9)-(line 968,col 69)",
            "(line 969,col 9)-(line 969,col 69)",
            "(line 970,col 9)-(line 970,col 69)",
            "(line 971,col 9)-(line 971,col 67)",
            "(line 972,col 9)-(line 972,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCompareDouble()",
        "snippet": "    @Test\n    public void testCompareDouble() {\n        assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(Double.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(1.2d, 1.2d) == 0);\n        assertTrue(Double.compare(1.2d, 0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -0.0d) == +1);\n        assertTrue(Double.compare(1.2d, -1.2d) == +1);\n        assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(0.0d, 0.0d) == 0);\n        assertTrue(Double.compare(0.0d, -0.0d) == +1);\n        assertTrue(Double.compare(0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-0.0d, 1.2d) == -1);\n        assertTrue(Double.compare(-0.0d, 0.0d) == -1);\n        assertTrue(Double.compare(-0.0d, -0.0d) == 0);\n        assertTrue(Double.compare(-0.0d, -1.2d) == +1);\n        assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-1.2d, 1.2d) == -1);\n        assertTrue(Double.compare(-1.2d, 0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -0.0d) == -1);\n        assertTrue(Double.compare(-1.2d, -1.2d) == 0);\n        assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 976,
        "end_line": 1067,
        "comment": " Testing JDK against old Lang functionality",
        "child_ranges": [
            "(line 978,col 9)-(line 978,col 64)",
            "(line 979,col 9)-(line 979,col 79)",
            "(line 980,col 9)-(line 980,col 71)",
            "(line 981,col 9)-(line 981,col 59)",
            "(line 982,col 9)-(line 982,col 59)",
            "(line 983,col 9)-(line 983,col 60)",
            "(line 984,col 9)-(line 984,col 60)",
            "(line 985,col 9)-(line 985,col 72)",
            "(line 986,col 9)-(line 986,col 79)",
            "(line 988,col 9)-(line 988,col 79)",
            "(line 989,col 9)-(line 989,col 92)",
            "(line 990,col 9)-(line 990,col 85)",
            "(line 991,col 9)-(line 991,col 73)",
            "(line 992,col 9)-(line 992,col 73)",
            "(line 993,col 9)-(line 993,col 74)",
            "(line 994,col 9)-(line 994,col 74)",
            "(line 995,col 9)-(line 995,col 86)",
            "(line 996,col 9)-(line 996,col 93)",
            "(line 998,col 9)-(line 998,col 71)",
            "(line 999,col 9)-(line 999,col 85)",
            "(line 1000,col 9)-(line 1000,col 76)",
            "(line 1001,col 9)-(line 1001,col 65)",
            "(line 1002,col 9)-(line 1002,col 65)",
            "(line 1003,col 9)-(line 1003,col 66)",
            "(line 1004,col 9)-(line 1004,col 66)",
            "(line 1005,col 9)-(line 1005,col 78)",
            "(line 1006,col 9)-(line 1006,col 85)",
            "(line 1008,col 9)-(line 1008,col 59)",
            "(line 1009,col 9)-(line 1009,col 73)",
            "(line 1010,col 9)-(line 1010,col 65)",
            "(line 1011,col 9)-(line 1011,col 52)",
            "(line 1012,col 9)-(line 1012,col 53)",
            "(line 1013,col 9)-(line 1013,col 54)",
            "(line 1014,col 9)-(line 1014,col 54)",
            "(line 1015,col 9)-(line 1015,col 66)",
            "(line 1016,col 9)-(line 1016,col 73)",
            "(line 1018,col 9)-(line 1018,col 59)",
            "(line 1019,col 9)-(line 1019,col 73)",
            "(line 1020,col 9)-(line 1020,col 65)",
            "(line 1021,col 9)-(line 1021,col 53)",
            "(line 1022,col 9)-(line 1022,col 52)",
            "(line 1023,col 9)-(line 1023,col 54)",
            "(line 1024,col 9)-(line 1024,col 54)",
            "(line 1025,col 9)-(line 1025,col 66)",
            "(line 1026,col 9)-(line 1026,col 73)",
            "(line 1028,col 9)-(line 1028,col 60)",
            "(line 1029,col 9)-(line 1029,col 74)",
            "(line 1030,col 9)-(line 1030,col 66)",
            "(line 1031,col 9)-(line 1031,col 54)",
            "(line 1032,col 9)-(line 1032,col 54)",
            "(line 1033,col 9)-(line 1033,col 54)",
            "(line 1034,col 9)-(line 1034,col 55)",
            "(line 1035,col 9)-(line 1035,col 67)",
            "(line 1036,col 9)-(line 1036,col 74)",
            "(line 1038,col 9)-(line 1038,col 60)",
            "(line 1039,col 9)-(line 1039,col 74)",
            "(line 1040,col 9)-(line 1040,col 66)",
            "(line 1041,col 9)-(line 1041,col 54)",
            "(line 1042,col 9)-(line 1042,col 54)",
            "(line 1043,col 9)-(line 1043,col 55)",
            "(line 1044,col 9)-(line 1044,col 54)",
            "(line 1045,col 9)-(line 1045,col 67)",
            "(line 1046,col 9)-(line 1046,col 74)",
            "(line 1048,col 9)-(line 1048,col 72)",
            "(line 1049,col 9)-(line 1049,col 86)",
            "(line 1050,col 9)-(line 1050,col 78)",
            "(line 1051,col 9)-(line 1051,col 66)",
            "(line 1052,col 9)-(line 1052,col 66)",
            "(line 1053,col 9)-(line 1053,col 67)",
            "(line 1054,col 9)-(line 1054,col 67)",
            "(line 1055,col 9)-(line 1055,col 78)",
            "(line 1056,col 9)-(line 1056,col 86)",
            "(line 1058,col 9)-(line 1058,col 79)",
            "(line 1059,col 9)-(line 1059,col 93)",
            "(line 1060,col 9)-(line 1060,col 85)",
            "(line 1061,col 9)-(line 1061,col 73)",
            "(line 1062,col 9)-(line 1062,col 73)",
            "(line 1063,col 9)-(line 1063,col 74)",
            "(line 1064,col 9)-(line 1064,col 74)",
            "(line 1065,col 9)-(line 1065,col 86)",
            "(line 1066,col 9)-(line 1066,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testCompareFloat()",
        "snippet": "    @Test\n    public void testCompareFloat() {\n        assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(Float.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(1.2f, 1.2f) == 0);\n        assertTrue(Float.compare(1.2f, 0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -0.0f) == +1);\n        assertTrue(Float.compare(1.2f, -1.2f) == +1);\n        assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(0.0f, 0.0f) == 0);\n        assertTrue(Float.compare(0.0f, -0.0f) == +1);\n        assertTrue(Float.compare(0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-0.0f, 1.2f) == -1);\n        assertTrue(Float.compare(-0.0f, 0.0f) == -1);\n        assertTrue(Float.compare(-0.0f, -0.0f) == 0);\n        assertTrue(Float.compare(-0.0f, -1.2f) == +1);\n        assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-1.2f, 1.2f) == -1);\n        assertTrue(Float.compare(-1.2f, 0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -0.0f) == -1);\n        assertTrue(Float.compare(-1.2f, -1.2f) == 0);\n        assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 1069,
        "end_line": 1160,
        "comment": "",
        "child_ranges": [
            "(line 1071,col 9)-(line 1071,col 61)",
            "(line 1072,col 9)-(line 1072,col 76)",
            "(line 1073,col 9)-(line 1073,col 68)",
            "(line 1074,col 9)-(line 1074,col 57)",
            "(line 1075,col 9)-(line 1075,col 57)",
            "(line 1076,col 9)-(line 1076,col 58)",
            "(line 1077,col 9)-(line 1077,col 58)",
            "(line 1078,col 9)-(line 1078,col 69)",
            "(line 1079,col 9)-(line 1079,col 76)",
            "(line 1081,col 9)-(line 1081,col 76)",
            "(line 1082,col 9)-(line 1082,col 89)",
            "(line 1083,col 9)-(line 1083,col 82)",
            "(line 1084,col 9)-(line 1084,col 71)",
            "(line 1085,col 9)-(line 1085,col 71)",
            "(line 1086,col 9)-(line 1086,col 72)",
            "(line 1087,col 9)-(line 1087,col 72)",
            "(line 1088,col 9)-(line 1088,col 83)",
            "(line 1089,col 9)-(line 1089,col 90)",
            "(line 1091,col 9)-(line 1091,col 68)",
            "(line 1092,col 9)-(line 1092,col 82)",
            "(line 1093,col 9)-(line 1093,col 73)",
            "(line 1094,col 9)-(line 1094,col 63)",
            "(line 1095,col 9)-(line 1095,col 63)",
            "(line 1096,col 9)-(line 1096,col 64)",
            "(line 1097,col 9)-(line 1097,col 64)",
            "(line 1098,col 9)-(line 1098,col 75)",
            "(line 1099,col 9)-(line 1099,col 82)",
            "(line 1101,col 9)-(line 1101,col 57)",
            "(line 1102,col 9)-(line 1102,col 71)",
            "(line 1103,col 9)-(line 1103,col 63)",
            "(line 1104,col 9)-(line 1104,col 51)",
            "(line 1105,col 9)-(line 1105,col 52)",
            "(line 1106,col 9)-(line 1106,col 53)",
            "(line 1107,col 9)-(line 1107,col 53)",
            "(line 1108,col 9)-(line 1108,col 64)",
            "(line 1109,col 9)-(line 1109,col 71)",
            "(line 1111,col 9)-(line 1111,col 57)",
            "(line 1112,col 9)-(line 1112,col 71)",
            "(line 1113,col 9)-(line 1113,col 63)",
            "(line 1114,col 9)-(line 1114,col 52)",
            "(line 1115,col 9)-(line 1115,col 51)",
            "(line 1116,col 9)-(line 1116,col 53)",
            "(line 1117,col 9)-(line 1117,col 53)",
            "(line 1118,col 9)-(line 1118,col 64)",
            "(line 1119,col 9)-(line 1119,col 71)",
            "(line 1121,col 9)-(line 1121,col 58)",
            "(line 1122,col 9)-(line 1122,col 72)",
            "(line 1123,col 9)-(line 1123,col 64)",
            "(line 1124,col 9)-(line 1124,col 53)",
            "(line 1125,col 9)-(line 1125,col 53)",
            "(line 1126,col 9)-(line 1126,col 53)",
            "(line 1127,col 9)-(line 1127,col 54)",
            "(line 1128,col 9)-(line 1128,col 65)",
            "(line 1129,col 9)-(line 1129,col 72)",
            "(line 1131,col 9)-(line 1131,col 58)",
            "(line 1132,col 9)-(line 1132,col 72)",
            "(line 1133,col 9)-(line 1133,col 64)",
            "(line 1134,col 9)-(line 1134,col 53)",
            "(line 1135,col 9)-(line 1135,col 53)",
            "(line 1136,col 9)-(line 1136,col 54)",
            "(line 1137,col 9)-(line 1137,col 53)",
            "(line 1138,col 9)-(line 1138,col 65)",
            "(line 1139,col 9)-(line 1139,col 72)",
            "(line 1141,col 9)-(line 1141,col 69)",
            "(line 1142,col 9)-(line 1142,col 83)",
            "(line 1143,col 9)-(line 1143,col 75)",
            "(line 1144,col 9)-(line 1144,col 64)",
            "(line 1145,col 9)-(line 1145,col 64)",
            "(line 1146,col 9)-(line 1146,col 65)",
            "(line 1147,col 9)-(line 1147,col 65)",
            "(line 1148,col 9)-(line 1148,col 75)",
            "(line 1149,col 9)-(line 1149,col 83)",
            "(line 1151,col 9)-(line 1151,col 76)",
            "(line 1152,col 9)-(line 1152,col 90)",
            "(line 1153,col 9)-(line 1153,col 82)",
            "(line 1154,col 9)-(line 1154,col 71)",
            "(line 1155,col 9)-(line 1155,col 71)",
            "(line 1156,col 9)-(line 1156,col 72)",
            "(line 1157,col 9)-(line 1157,col 72)",
            "(line 1158,col 9)-(line 1158,col 83)",
            "(line 1159,col 9)-(line 1159,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testIsDigits()",
        "snippet": "    @Test\n    public void testIsDigits() {\n        assertFalse(\"isDigits(null) failed\", NumberUtils.isDigits(null));\n        assertFalse(\"isDigits('') failed\", NumberUtils.isDigits(\"\"));\n        assertTrue(\"isDigits(String) failed\", NumberUtils.isDigits(\"12345\"));\n        assertFalse(\"isDigits(String) neg 1 failed\", NumberUtils.isDigits(\"1234.5\"));\n        assertFalse(\"isDigits(String) neg 3 failed\", NumberUtils.isDigits(\"1ab\"));\n        assertFalse(\"isDigits(String) neg 4 failed\", NumberUtils.isDigits(\"abc\"));\n    }\n",
        "begin_line": 1162,
        "end_line": 1170,
        "comment": "",
        "child_ranges": [
            "(line 1164,col 9)-(line 1164,col 73)",
            "(line 1165,col 9)-(line 1165,col 69)",
            "(line 1166,col 9)-(line 1166,col 77)",
            "(line 1167,col 9)-(line 1167,col 85)",
            "(line 1168,col 9)-(line 1168,col 82)",
            "(line 1169,col 9)-(line 1169,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber()",
        "snippet": "    @Test\n    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val));\n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val));\n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val));\n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val));\n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val));\n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val));\n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val));\n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n\n        // LANG-521\n        val = \"2.\";\n        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n\n        // LANG-664\n        val = \"1.1L\";\n        assertFalse(\"isNumber(String) LANG-664 failed\", NumberUtils.isNumber(val));\n    }\n",
        "begin_line": 1176,
        "end_line": 1318,
        "comment": "\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     ",
        "child_ranges": [
            "(line 1178,col 9)-(line 1178,col 29)",
            "(line 1179,col 9)-(line 1179,col 75)",
            "(line 1180,col 9)-(line 1180,col 93)",
            "(line 1181,col 9)-(line 1181,col 23)",
            "(line 1182,col 9)-(line 1182,col 75)",
            "(line 1183,col 9)-(line 1183,col 93)",
            "(line 1184,col 9)-(line 1184,col 23)",
            "(line 1185,col 9)-(line 1185,col 75)",
            "(line 1186,col 9)-(line 1186,col 93)",
            "(line 1187,col 9)-(line 1187,col 23)",
            "(line 1188,col 9)-(line 1188,col 75)",
            "(line 1189,col 9)-(line 1189,col 93)",
            "(line 1190,col 9)-(line 1190,col 24)",
            "(line 1191,col 9)-(line 1191,col 75)",
            "(line 1192,col 9)-(line 1192,col 93)",
            "(line 1193,col 9)-(line 1193,col 24)",
            "(line 1194,col 9)-(line 1194,col 75)",
            "(line 1195,col 9)-(line 1195,col 93)",
            "(line 1196,col 9)-(line 1196,col 24)",
            "(line 1197,col 9)-(line 1197,col 75)",
            "(line 1198,col 9)-(line 1198,col 93)",
            "(line 1199,col 9)-(line 1199,col 22)",
            "(line 1200,col 9)-(line 1200,col 75)",
            "(line 1201,col 9)-(line 1201,col 93)",
            "(line 1202,col 9)-(line 1202,col 24)",
            "(line 1203,col 9)-(line 1203,col 75)",
            "(line 1204,col 9)-(line 1204,col 93)",
            "(line 1205,col 9)-(line 1205,col 24)",
            "(line 1206,col 9)-(line 1206,col 76)",
            "(line 1207,col 9)-(line 1207,col 94)",
            "(line 1208,col 9)-(line 1208,col 24)",
            "(line 1209,col 9)-(line 1209,col 76)",
            "(line 1210,col 9)-(line 1210,col 94)",
            "(line 1211,col 9)-(line 1211,col 18)",
            "(line 1212,col 9)-(line 1212,col 76)",
            "(line 1213,col 9)-(line 1213,col 94)",
            "(line 1214,col 9)-(line 1214,col 19)",
            "(line 1215,col 9)-(line 1215,col 76)",
            "(line 1216,col 9)-(line 1216,col 94)",
            "(line 1217,col 9)-(line 1217,col 22)",
            "(line 1218,col 9)-(line 1218,col 76)",
            "(line 1219,col 9)-(line 1219,col 94)",
            "(line 1220,col 9)-(line 1220,col 23)",
            "(line 1221,col 9)-(line 1221,col 76)",
            "(line 1222,col 9)-(line 1222,col 94)",
            "(line 1223,col 9)-(line 1223,col 25)",
            "(line 1224,col 9)-(line 1224,col 76)",
            "(line 1225,col 9)-(line 1225,col 94)",
            "(line 1226,col 9)-(line 1226,col 20)",
            "(line 1227,col 9)-(line 1227,col 76)",
            "(line 1228,col 9)-(line 1228,col 94)",
            "(line 1229,col 9)-(line 1229,col 26)",
            "(line 1230,col 9)-(line 1230,col 76)",
            "(line 1231,col 9)-(line 1231,col 94)",
            "(line 1232,col 9)-(line 1232,col 25)",
            "(line 1233,col 9)-(line 1233,col 76)",
            "(line 1234,col 9)-(line 1234,col 94)",
            "(line 1235,col 9)-(line 1235,col 23)",
            "(line 1236,col 9)-(line 1236,col 76)",
            "(line 1237,col 9)-(line 1237,col 94)",
            "(line 1238,col 9)-(line 1238,col 19)",
            "(line 1239,col 9)-(line 1239,col 80)",
            "(line 1240,col 9)-(line 1240,col 98)",
            "(line 1241,col 9)-(line 1241,col 17)",
            "(line 1242,col 9)-(line 1242,col 80)",
            "(line 1243,col 9)-(line 1243,col 98)",
            "(line 1244,col 9)-(line 1244,col 22)",
            "(line 1245,col 9)-(line 1245,col 80)",
            "(line 1246,col 9)-(line 1246,col 98)",
            "(line 1247,col 9)-(line 1247,col 22)",
            "(line 1248,col 9)-(line 1248,col 80)",
            "(line 1249,col 9)-(line 1249,col 98)",
            "(line 1250,col 9)-(line 1250,col 22)",
            "(line 1251,col 9)-(line 1251,col 80)",
            "(line 1252,col 9)-(line 1252,col 98)",
            "(line 1253,col 9)-(line 1253,col 27)",
            "(line 1254,col 9)-(line 1254,col 80)",
            "(line 1255,col 9)-(line 1255,col 98)",
            "(line 1256,col 9)-(line 1256,col 26)",
            "(line 1257,col 9)-(line 1257,col 80)",
            "(line 1258,col 9)-(line 1258,col 98)",
            "(line 1259,col 9)-(line 1259,col 21)",
            "(line 1260,col 9)-(line 1260,col 80)",
            "(line 1261,col 9)-(line 1261,col 98)",
            "(line 1262,col 9)-(line 1262,col 24)",
            "(line 1263,col 9)-(line 1263,col 80)",
            "(line 1264,col 9)-(line 1264,col 98)",
            "(line 1265,col 9)-(line 1265,col 18)",
            "(line 1266,col 9)-(line 1266,col 81)",
            "(line 1267,col 9)-(line 1267,col 99)",
            "(line 1268,col 9)-(line 1268,col 25)",
            "(line 1269,col 9)-(line 1269,col 81)",
            "(line 1270,col 9)-(line 1270,col 99)",
            "(line 1271,col 9)-(line 1271,col 25)",
            "(line 1272,col 9)-(line 1272,col 81)",
            "(line 1273,col 9)-(line 1273,col 99)",
            "(line 1274,col 9)-(line 1274,col 24)",
            "(line 1275,col 9)-(line 1275,col 81)",
            "(line 1276,col 9)-(line 1276,col 99)",
            "(line 1277,col 9)-(line 1277,col 24)",
            "(line 1278,col 9)-(line 1278,col 81)",
            "(line 1279,col 9)-(line 1279,col 99)",
            "(line 1280,col 9)-(line 1280,col 20)",
            "(line 1281,col 9)-(line 1281,col 81)",
            "(line 1282,col 9)-(line 1282,col 99)",
            "(line 1283,col 9)-(line 1283,col 19)",
            "(line 1284,col 9)-(line 1284,col 81)",
            "(line 1285,col 9)-(line 1285,col 99)",
            "(line 1286,col 9)-(line 1286,col 18)",
            "(line 1287,col 9)-(line 1287,col 81)",
            "(line 1288,col 9)-(line 1288,col 99)",
            "(line 1289,col 9)-(line 1289,col 20)",
            "(line 1290,col 9)-(line 1290,col 81)",
            "(line 1291,col 9)-(line 1291,col 99)",
            "(line 1292,col 9)-(line 1292,col 20)",
            "(line 1293,col 9)-(line 1293,col 81)",
            "(line 1294,col 9)-(line 1294,col 99)",
            "(line 1295,col 9)-(line 1295,col 22)",
            "(line 1296,col 9)-(line 1296,col 81)",
            "(line 1297,col 9)-(line 1297,col 99)",
            "(line 1298,col 9)-(line 1298,col 22)",
            "(line 1299,col 9)-(line 1299,col 81)",
            "(line 1300,col 9)-(line 1300,col 99)",
            "(line 1301,col 9)-(line 1301,col 22)",
            "(line 1302,col 9)-(line 1302,col 81)",
            "(line 1303,col 9)-(line 1303,col 99)",
            "(line 1304,col 9)-(line 1304,col 22)",
            "(line 1305,col 9)-(line 1305,col 81)",
            "(line 1306,col 9)-(line 1306,col 99)",
            "(line 1307,col 9)-(line 1307,col 22)",
            "(line 1308,col 9)-(line 1308,col 81)",
            "(line 1309,col 9)-(line 1309,col 99)",
            "(line 1312,col 9)-(line 1312,col 19)",
            "(line 1313,col 9)-(line 1313,col 82)",
            "(line 1316,col 9)-(line 1316,col 21)",
            "(line 1317,col 9)-(line 1317,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String)",
        "snippet": "    private boolean checkCreateNumber(final String val) {\n        try {\n            final Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (final NumberFormatException e) {\n            return false;\n       }\n    }\n",
        "begin_line": 1320,
        "end_line": 1330,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 9)-(line 1329,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testConstants()",
        "snippet": "    @SuppressWarnings(\"cast\") // suppress instanceof warning check\n    @Test\n    public void testConstants() {\n        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n\n        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n    }\n",
        "begin_line": 1332,
        "end_line": 1372,
        "comment": "",
        "child_ranges": [
            "(line 1335,col 9)-(line 1335,col 58)",
            "(line 1336,col 9)-(line 1336,col 57)",
            "(line 1337,col 9)-(line 1337,col 63)",
            "(line 1338,col 9)-(line 1338,col 64)",
            "(line 1339,col 9)-(line 1339,col 63)",
            "(line 1340,col 9)-(line 1340,col 69)",
            "(line 1341,col 9)-(line 1341,col 60)",
            "(line 1342,col 9)-(line 1342,col 59)",
            "(line 1343,col 9)-(line 1343,col 65)",
            "(line 1344,col 9)-(line 1344,col 58)",
            "(line 1345,col 9)-(line 1345,col 57)",
            "(line 1346,col 9)-(line 1346,col 63)",
            "(line 1347,col 9)-(line 1347,col 62)",
            "(line 1348,col 9)-(line 1348,col 61)",
            "(line 1349,col 9)-(line 1349,col 67)",
            "(line 1350,col 9)-(line 1350,col 60)",
            "(line 1351,col 9)-(line 1351,col 59)",
            "(line 1352,col 9)-(line 1352,col 65)",
            "(line 1354,col 9)-(line 1354,col 59)",
            "(line 1355,col 9)-(line 1355,col 58)",
            "(line 1356,col 9)-(line 1356,col 65)",
            "(line 1357,col 9)-(line 1357,col 61)",
            "(line 1358,col 9)-(line 1358,col 60)",
            "(line 1359,col 9)-(line 1359,col 67)",
            "(line 1360,col 9)-(line 1360,col 61)",
            "(line 1361,col 9)-(line 1361,col 60)",
            "(line 1362,col 9)-(line 1362,col 67)",
            "(line 1363,col 9)-(line 1363,col 59)",
            "(line 1364,col 9)-(line 1364,col 58)",
            "(line 1365,col 9)-(line 1365,col 65)",
            "(line 1366,col 9)-(line 1366,col 66)",
            "(line 1367,col 9)-(line 1367,col 65)",
            "(line 1368,col 9)-(line 1368,col 72)",
            "(line 1369,col 9)-(line 1369,col 64)",
            "(line 1370,col 9)-(line 1370,col 63)",
            "(line 1371,col 9)-(line 1371,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testLang300()",
        "snippet": "    @Test\n    public void testLang300() {\n        NumberUtils.createNumber(\"-1l\");\n        NumberUtils.createNumber(\"01l\");\n        NumberUtils.createNumber(\"1l\");\n    }\n",
        "begin_line": 1374,
        "end_line": 1379,
        "comment": "",
        "child_ranges": [
            "(line 1376,col 9)-(line 1376,col 40)",
            "(line 1377,col 9)-(line 1377,col 40)",
            "(line 1378,col 9)-(line 1378,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang3.math.NumberUtilsTest.testLang381()",
        "snippet": "    @Test\n    public void testLang381() {\n        assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\n        assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));\n        assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));\n\n        final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(a)));\n        assertTrue(Double.isNaN(NumberUtils.min(a)));\n\n        final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n        assertTrue(Double.isNaN(NumberUtils.max(b)));\n        assertTrue(Double.isNaN(NumberUtils.min(b)));\n\n        final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(aF)));\n\n        final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n        assertTrue(Float.isNaN(NumberUtils.max(bF)));\n    }\n",
        "begin_line": 1381,
        "end_line": 1401,
        "comment": "",
        "child_ranges": [
            "(line 1383,col 9)-(line 1383,col 72)",
            "(line 1384,col 9)-(line 1384,col 72)",
            "(line 1385,col 9)-(line 1385,col 72)",
            "(line 1386,col 9)-(line 1386,col 72)",
            "(line 1388,col 9)-(line 1388,col 89)",
            "(line 1389,col 9)-(line 1389,col 53)",
            "(line 1390,col 9)-(line 1390,col 53)",
            "(line 1392,col 9)-(line 1392,col 101)",
            "(line 1393,col 9)-(line 1393,col 53)",
            "(line 1394,col 9)-(line 1394,col 53)",
            "(line 1396,col 9)-(line 1396,col 90)",
            "(line 1397,col 9)-(line 1397,col 53)",
            "(line 1399,col 9)-(line 1399,col 101)",
            "(line 1400,col 9)-(line 1400,col 53)"
        ]
    }
]