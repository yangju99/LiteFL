[
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds1()",
        "snippet": "    @Test(expected = NumberIsTooLargeException.class)\n    public void testInitOutofbounds1() {\n        double[] startPoint = point(DIM,3);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 50,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 43)",
            "(line 53,col 9)-(line 53,col 32)",
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 56,col 51)",
            "(line 57,col 9)-(line 59,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds2()",
        "snippet": "    @Test(expected = NumberIsTooSmallException.class)\n    public void testInitOutofbounds2() {\n        double[] startPoint = point(DIM, -2);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 61,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 45)",
            "(line 64,col 9)-(line 64,col 32)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 66,col 9)-(line 67,col 51)",
            "(line 68,col 9)-(line 70,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundariesDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testBoundariesDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM+1,-1,2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 73,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 45)",
            "(line 76,col 9)-(line 76,col 32)",
            "(line 77,col 9)-(line 77,col 55)",
            "(line 78,col 9)-(line 79,col 51)",
            "(line 80,col 9)-(line 82,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testUnsupportedBoundaries1()",
        "snippet": "    @Test(expected = MathUnsupportedOperationException.class)\n    public void testUnsupportedBoundaries1() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = null;\n        double[][] boundaries = boundaries(DIM,-1, Double.POSITIVE_INFINITY);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 85,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 45)",
            "(line 88,col 9)-(line 88,col 32)",
            "(line 89,col 9)-(line 89,col 77)",
            "(line 90,col 9)-(line 91,col 51)",
            "(line 92,col 9)-(line 94,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testUnsupportedBoundaries2()",
        "snippet": "    @Test(expected = MathUnsupportedOperationException.class)\n    public void testUnsupportedBoundaries2() {\n        double[] startPoint = point(DIM, 0.5);\n        double[] insigma = null;\n        final double[] lB = new double[] { -1, -1, -1, -1, -1, Double.NEGATIVE_INFINITY, -1, -1, -1, -1, -1, -1, -1 };\n        final double[] uB = new double[] { 2, 2, 2, Double.POSITIVE_INFINITY, 2, 2, 2, 2, 2, 2, 2, 2, 2 };\n        double[][] boundaries = new double[2][];\n        boundaries[0] = lB;\n        boundaries[1] = uB;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 97,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 46)",
            "(line 100,col 9)-(line 100,col 32)",
            "(line 101,col 9)-(line 101,col 118)",
            "(line 102,col 9)-(line 102,col 106)",
            "(line 103,col 9)-(line 103,col 48)",
            "(line 104,col 9)-(line 104,col 27)",
            "(line 105,col 9)-(line 105,col 27)",
            "(line 106,col 9)-(line 107,col 51)",
            "(line 108,col 9)-(line 110,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaNegative()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testInputSigmaNegative() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM,-0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 113,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 45)",
            "(line 116,col 9)-(line 116,col 43)",
            "(line 117,col 9)-(line 117,col 37)",
            "(line 118,col 9)-(line 119,col 51)",
            "(line 120,col 9)-(line 122,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaOutOfRange()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testInputSigmaOutOfRange() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM, 1.1);\n        double[][] boundaries = boundaries(DIM,-0.5,0.5);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 125,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 127,col 9)-(line 127,col 45)",
            "(line 128,col 9)-(line 128,col 43)",
            "(line 129,col 9)-(line 129,col 57)",
            "(line 130,col 9)-(line 131,col 51)",
            "(line 132,col 9)-(line 134,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testInputSigmaDimensionMismatch() {\n        double[] startPoint = point(DIM,0.5);\n        double[] insigma = point(DIM+1,-0.5);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 137,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 45)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 37)",
            "(line 142,col 9)-(line 143,col 51)",
            "(line 144,col 9)-(line 146,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRosen()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 149,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 45)",
            "(line 153,col 9)-(line 153,col 42)",
            "(line 154,col 9)-(line 154,col 37)",
            "(line 155,col 9)-(line 156,col 51)",
            "(line 157,col 9)-(line 159,col 47)",
            "(line 160,col 9)-(line 162,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMaximize()",
        "snippet": "    @Test\n    @Retry(3)\n    public void testMaximize() {}\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testEllipse()",
        "snippet": "    @Test\n    public void testEllipse() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 188,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 45)",
            "(line 191,col 9)-(line 191,col 42)",
            "(line 192,col 9)-(line 192,col 37)",
            "(line 193,col 9)-(line 194,col 51)",
            "(line 195,col 9)-(line 197,col 47)",
            "(line 198,col 9)-(line 200,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testElliRotated()",
        "snippet": "    @Test\n    public void testElliRotated() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 203,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 45)",
            "(line 206,col 9)-(line 206,col 42)",
            "(line 207,col 9)-(line 207,col 37)",
            "(line 208,col 9)-(line 209,col 51)",
            "(line 210,col 9)-(line 212,col 47)",
            "(line 213,col 9)-(line 215,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigar()",
        "snippet": "    @Test\n    public void testCigar() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 218,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 45)",
            "(line 221,col 9)-(line 221,col 42)",
            "(line 222,col 9)-(line 222,col 37)",
            "(line 223,col 9)-(line 224,col 51)",
            "(line 225,col 9)-(line 227,col 47)",
            "(line 228,col 9)-(line 230,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTwoAxes()",
        "snippet": "    @Test\n    public void testTwoAxes() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-8, 1e-3, 200000, expected);\n    }\n",
        "begin_line": 233,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 45)",
            "(line 236,col 9)-(line 236,col 42)",
            "(line 237,col 9)-(line 237,col 37)",
            "(line 238,col 9)-(line 239,col 51)",
            "(line 240,col 9)-(line 242,col 47)",
            "(line 243,col 9)-(line 245,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigTab()",
        "snippet": "    @Test\n    public void testCigTab() {}\n",
        "begin_line": 248,
        "end_line": 249,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSphere()",
        "snippet": "    @Test\n    public void testSphere() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 266,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 45)",
            "(line 269,col 9)-(line 269,col 42)",
            "(line 270,col 9)-(line 270,col 37)",
            "(line 271,col 9)-(line 272,col 51)",
            "(line 273,col 9)-(line 275,col 47)",
            "(line 276,col 9)-(line 278,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTablet()",
        "snippet": "    @Test\n    public void testTablet() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 281,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 45)",
            "(line 284,col 9)-(line 284,col 42)",
            "(line 285,col 9)-(line 285,col 37)",
            "(line 286,col 9)-(line 287,col 51)",
            "(line 288,col 9)-(line 290,col 47)",
            "(line 291,col 9)-(line 293,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiffPow()",
        "snippet": "    @Test\n    public void testDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-8, 1e-1, 100000, expected);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-8, 2e-1, 100000, expected);\n    }\n",
        "begin_line": 296,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 45)",
            "(line 299,col 9)-(line 299,col 42)",
            "(line 300,col 9)-(line 300,col 37)",
            "(line 301,col 9)-(line 302,col 51)",
            "(line 303,col 9)-(line 305,col 46)",
            "(line 306,col 9)-(line 308,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSsDiffPow()",
        "snippet": "    @Test\n    public void testSsDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n    }\n",
        "begin_line": 311,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 45)",
            "(line 314,col 9)-(line 314,col 42)",
            "(line 315,col 9)-(line 315,col 37)",
            "(line 316,col 9)-(line 317,col 51)",
            "(line 318,col 9)-(line 320,col 46)",
            "(line 321,col 9)-(line 323,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testAckley()",
        "snippet": "    @Test\n    public void testAckley() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,1.0);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n    }\n",
        "begin_line": 326,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 45)",
            "(line 329,col 9)-(line 329,col 42)",
            "(line 330,col 9)-(line 330,col 37)",
            "(line 331,col 9)-(line 332,col 51)",
            "(line 333,col 9)-(line 335,col 46)",
            "(line 336,col 9)-(line 338,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRastrigin()",
        "snippet": "    @Test\n    public void testRastrigin() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n    }\n",
        "begin_line": 341,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 45)",
            "(line 344,col 9)-(line 344,col 42)",
            "(line 345,col 9)-(line 345,col 37)",
            "(line 346,col 9)-(line 347,col 51)",
            "(line 348,col 9)-(line 350,col 47)",
            "(line 351,col 9)-(line 353,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testConstrainedRosen()",
        "snippet": "    @Test\n    public void testConstrainedRosen() {\n        double[] startPoint = point(DIM, 0.7);\n        double[] insigma = point(DIM, 0.1);\n        double[][] boundaries = boundaries(DIM, -1, 2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }\n",
        "begin_line": 356,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 358,col 9)-(line 358,col 46)",
            "(line 359,col 9)-(line 359,col 43)",
            "(line 360,col 9)-(line 360,col 55)",
            "(line 361,col 9)-(line 362,col 51)",
            "(line 363,col 9)-(line 365,col 47)",
            "(line 366,col 9)-(line 368,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiagonalRosen()",
        "snippet": "    @Test\n    public void testDiagonalRosen() {}\n",
        "begin_line": 371,
        "end_line": 372,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMath864()",
        "snippet": "    @Test\n    public void testMath864() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n        final double[] lower = { -1e6 };\n        final double[] upper = { 1.5 };\n        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start, lower, upper).getPoint();\n        Assert.assertTrue(\"Out of bounds (\" + result[0] + \" > \" + upper[0] + \")\",\n                          result[0] <= upper[0]);\n    }\n",
        "begin_line": 386,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 388,col 9)-(line 388,col 62)",
            "(line 389,col 9)-(line 395,col 14)",
            "(line 397,col 9)-(line 397,col 37)",
            "(line 398,col 9)-(line 398,col 40)",
            "(line 399,col 9)-(line 399,col 39)",
            "(line 400,col 9)-(line 401,col 83)",
            "(line 402,col 9)-(line 403,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Anonymous-9b734c31-fa4b-4cf6-bbf7-bb762297fb30.value(double[])",
        "snippet": "                public double value(double[] parameters) {\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 390,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 391,col 21)-(line 391,col 44)",
            "(line 392,col 21)-(line 392,col 64)",
            "(line 393,col 21)-(line 393,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundaryRangeTooLarge()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testBoundaryRangeTooLarge() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    if (Double.isNaN(parameters[0])) {\n                        throw new MathIllegalStateException();\n                    }\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 0 };\n\n        // The difference between upper and lower bounds is used to normalize\n        // the variables: In case of overflow, NaN is produced.\n        final double max = Double.MAX_VALUE / 2;\n        final double tooLarge = FastMath.nextUp(max);\n        final double[] lower = { -tooLarge };\n        final double[] upper = { tooLarge };\n        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start, lower, upper).getPoint();\n    }\n",
        "begin_line": 409,
        "end_line": 433,
        "comment": "\n     * Cf. MATH-865\n     ",
        "child_ranges": [
            "(line 411,col 9)-(line 411,col 62)",
            "(line 412,col 9)-(line 421,col 14)",
            "(line 423,col 9)-(line 423,col 37)",
            "(line 427,col 9)-(line 427,col 48)",
            "(line 428,col 9)-(line 428,col 53)",
            "(line 429,col 9)-(line 429,col 45)",
            "(line 430,col 9)-(line 430,col 44)",
            "(line 431,col 9)-(line 432,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Anonymous-4a116813-9f1e-4d65-b2dc-691d0505aefb.value(double[])",
        "snippet": "                public double value(double[] parameters) {\n                    if (Double.isNaN(parameters[0])) {\n                        throw new MathIllegalStateException();\n                    }\n                    final double target = 1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 413,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 414,col 21)-(line 416,col 21)",
            "(line 417,col 21)-(line 417,col 44)",
            "(line 418,col 21)-(line 418,col 64)",
            "(line 419,col 21)-(line 419,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary()",
        "snippet": "    @Test\n    public void testFitAccuracyDependsOnBoundary() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        Assert.assertEquals(resNoBound, resNearLo, 1e-3);\n        Assert.assertEquals(resNoBound, resNearHi, 1e-3);\n    }\n",
        "begin_line": 438,
        "end_line": 478,
        "comment": "\n     * Cf. MATH-867\n     ",
        "child_ranges": [
            "(line 440,col 9)-(line 440,col 62)",
            "(line 441,col 9)-(line 447,col 14)",
            "(line 449,col 9)-(line 449,col 37)",
            "(line 452,col 9)-(line 453,col 58)",
            "(line 454,col 9)-(line 454,col 55)",
            "(line 457,col 9)-(line 457,col 39)",
            "(line 458,col 9)-(line 458,col 40)",
            "(line 459,col 9)-(line 460,col 57)",
            "(line 461,col 9)-(line 461,col 54)",
            "(line 464,col 9)-(line 464,col 25)",
            "(line 465,col 9)-(line 465,col 22)",
            "(line 466,col 9)-(line 467,col 57)",
            "(line 468,col 9)-(line 468,col 54)",
            "(line 476,col 9)-(line 476,col 57)",
            "(line 477,col 9)-(line 477,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Anonymous-d86c2d5a-d581-4c46-a38c-9f09cf69509a.value(double[])",
        "snippet": "                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n",
        "begin_line": 442,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 443,col 21)-(line 443,col 47)",
            "(line 444,col 21)-(line 444,col 64)",
            "(line 445,col 21)-(line 445,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.doTest(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[], double[][], org.apache.commons.math3.optimization.GoalType, int, boolean, int, double, double, double, int, org.apache.commons.math3.optimization.PointValuePair)",
        "snippet": "    private void doTest(MultivariateFunction func,\n            double[] startPoint,\n            double[] inSigma,\n            double[][] boundaries,\n            GoalType goal,\n            int lambda,\n            boolean isActive,\n            int diagonalOnly, \n            double stopValue,\n            double fTol,\n            double pointTol,\n            int maxEvaluations,\n            PointValuePair expected) {\n        int dim = startPoint.length;\n        // test diagonalOnly = 0 - slow but normally fewer feval#\n        CMAESOptimizer optim = new CMAESOptimizer(lambda, inSigma, 30000,\n                                                  stopValue, isActive, diagonalOnly,\n                                                  0, new MersenneTwister(), false);\n        final double[] lB = boundaries == null ? null : boundaries[0];\n        final double[] uB = boundaries == null ? null : boundaries[1];\n        PointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);\n        // System.out.println(\"sol=\" + Arrays.toString(result.getPoint()));\n        Assert.assertEquals(expected.getValue(), result.getValue(), fTol);\n        for (int i = 0; i < dim; i++) {\n            Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);\n        }\n    }\n",
        "begin_line": 495,
        "end_line": 521,
        "comment": "\n     * @param func Function to optimize.\n     * @param startPoint Starting point.\n     * @param inSigma Individual input sigma.\n     * @param boundaries Upper / lower point limit.\n     * @param goal Minimization or maximization.\n     * @param lambda Population size used for offspring.\n     * @param isActive Covariance update mechanism.\n     * @param diagonalOnly Simplified covariance update.\n     * @param stopValue Termination criteria for optimization.\n     * @param fTol Tolerance relative error on the objective function.\n     * @param pointTol Tolerance for checking that the optimum is correct.\n     * @param maxEvaluations Maximum number of evaluations.\n     * @param expected Expected point / value.\n     ",
        "child_ranges": [
            "(line 508,col 9)-(line 508,col 36)",
            "(line 510,col 9)-(line 512,col 83)",
            "(line 513,col 9)-(line 513,col 70)",
            "(line 514,col 9)-(line 514,col 70)",
            "(line 515,col 9)-(line 515,col 95)",
            "(line 517,col 9)-(line 517,col 74)",
            "(line 518,col 9)-(line 520,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.point(int, double)",
        "snippet": "    private static double[] point(int n, double value) {\n        double[] ds = new double[n];\n        Arrays.fill(ds, value);\n        return ds;\n    }\n",
        "begin_line": 523,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 524,col 9)-(line 524,col 36)",
            "(line 525,col 9)-(line 525,col 31)",
            "(line 526,col 9)-(line 526,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.boundaries(int, double, double)",
        "snippet": "    private static double[][] boundaries(int dim,\n            double lower, double upper) {\n        double[][] boundaries = new double[2][dim];\n        for (int i = 0; i < dim; i++)\n            boundaries[0][i] = lower;\n        for (int i = 0; i < dim; i++)\n            boundaries[1][i] = upper;\n        return boundaries;\n    }\n",
        "begin_line": 529,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 531,col 9)-(line 531,col 51)",
            "(line 532,col 9)-(line 533,col 37)",
            "(line 534,col 9)-(line 535,col 37)",
            "(line 536,col 9)-(line 536,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Sphere.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 541,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 542,col 13)-(line 542,col 25)",
            "(line 543,col 13)-(line 544,col 33)",
            "(line 545,col 13)-(line 545,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.Cigar()",
        "snippet": "        Cigar() {\n            this(1e3);\n        }\n",
        "begin_line": 552,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 553,col 13)-(line 553,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.Cigar(double)",
        "snippet": "        Cigar(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 557,col 13)-(line 557,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Cigar.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += factor * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 560,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 561,col 13)-(line 561,col 35)",
            "(line 562,col 13)-(line 563,col 42)",
            "(line 564,col 13)-(line 564,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.Tablet()",
        "snippet": "        Tablet() {\n            this(1e3);\n        }\n",
        "begin_line": 571,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 572,col 13)-(line 572,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.Tablet(double)",
        "snippet": "        Tablet(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "",
        "child_ranges": [
            "(line 576,col 13)-(line 576,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Tablet.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = factor * x[0] * x[0];\n            for (int i = 1; i < x.length; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 579,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 580,col 13)-(line 580,col 44)",
            "(line 581,col 13)-(line 582,col 33)",
            "(line 583,col 13)-(line 583,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.CigTab()",
        "snippet": "        CigTab() {\n            this(1e4);\n        }\n",
        "begin_line": 590,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 591,col 13)-(line 591,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.CigTab(double)",
        "snippet": "        CigTab(double axisratio) {\n            factor = axisratio;\n        }\n",
        "begin_line": 594,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 595,col 13)-(line 595,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.CigTab.value(double[])",
        "snippet": "        public double value(double[] x) {\n            int end = x.length - 1;\n            double f = x[0] * x[0] / factor + factor * x[end] * x[end];\n            for (int i = 1; i < end; ++i)\n                f += x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 598,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 599,col 13)-(line 599,col 35)",
            "(line 600,col 13)-(line 600,col 71)",
            "(line 601,col 13)-(line 602,col 33)",
            "(line 603,col 13)-(line 603,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.TwoAxes()",
        "snippet": "        TwoAxes() {\n            this(1e6);\n        }\n",
        "begin_line": 611,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 612,col 13)-(line 612,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.TwoAxes(double)",
        "snippet": "        TwoAxes(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 615,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 616,col 13)-(line 616,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.TwoAxes.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 619,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 620,col 13)-(line 620,col 25)",
            "(line 621,col 13)-(line 622,col 67)",
            "(line 623,col 13)-(line 623,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.ElliRotated()",
        "snippet": "        ElliRotated() {\n            this(1e3);\n        }\n",
        "begin_line": 631,
        "end_line": 633,
        "comment": "",
        "child_ranges": [
            "(line 632,col 13)-(line 632,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.ElliRotated(double)",
        "snippet": "        ElliRotated(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 635,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 636,col 13)-(line 636,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.ElliRotated.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            x = B.Rotate(x);\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 639,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 640,col 13)-(line 640,col 25)",
            "(line 641,col 13)-(line 641,col 28)",
            "(line 642,col 13)-(line 643,col 73)",
            "(line 644,col 13)-(line 644,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.Elli()",
        "snippet": "        Elli() {\n            this(1e3);\n        }\n",
        "begin_line": 652,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 653,col 13)-(line 653,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.Elli(double)",
        "snippet": "        Elli(double axisratio) {\n            factor = axisratio * axisratio;\n        }\n",
        "begin_line": 656,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 657,col 13)-(line 657,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Elli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];\n            return f;\n        }\n",
        "begin_line": 660,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 661,col 13)-(line 661,col 25)",
            "(line 662,col 13)-(line 663,col 73)",
            "(line 664,col 13)-(line 664,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.MinusElli.value(double[])",
        "snippet": "        public double value(double[] x) {\n            return 1.0-(new Elli().value(x));\n        }\n",
        "begin_line": 670,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 671,col 13)-(line 671,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.DiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length; ++i)\n                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i\n                        / (x.length - 1.));\n            return f;\n        }\n",
        "begin_line": 677,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 678,col 13)-(line 678,col 25)",
            "(line 679,col 13)-(line 681,col 43)",
            "(line 682,col 13)-(line 682,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.SsDiffPow.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = Math.pow(new DiffPow().value(x), 0.25);\n            return f;\n        }\n",
        "begin_line": 688,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 689,col 13)-(line 689,col 62)",
            "(line 690,col 13)-(line 690,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rosen.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            for (int i = 0; i < x.length - 1; ++i)\n                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])\n                + (x[i] - 1.) * (x[i] - 1.);\n            return f;\n        }\n",
        "begin_line": 696,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 697,col 13)-(line 697,col 25)",
            "(line 698,col 13)-(line 700,col 44)",
            "(line 701,col 13)-(line 701,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.Ackley(double)",
        "snippet": "        Ackley(double axra) {\n            axisratio = axra;\n        }\n",
        "begin_line": 708,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 709,col 13)-(line 709,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.Ackley()",
        "snippet": "        public Ackley() {\n            this(1);\n        }\n",
        "begin_line": 712,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 713,col 13)-(line 713,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Ackley.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double res2 = 0;\n            double fac = 0;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                f += fac * fac * x[i] * x[i];\n                res2 += Math.cos(2. * Math.PI * fac * x[i]);\n            }\n            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))\n                    + Math.exp(1.) - Math.exp(res2 / x.length));\n            return f;\n        }\n",
        "begin_line": 716,
        "end_line": 728,
        "comment": "",
        "child_ranges": [
            "(line 717,col 13)-(line 717,col 25)",
            "(line 718,col 13)-(line 718,col 28)",
            "(line 719,col 13)-(line 719,col 27)",
            "(line 720,col 13)-(line 724,col 13)",
            "(line 725,col 13)-(line 726,col 64)",
            "(line 727,col 13)-(line 727,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.Rastrigin()",
        "snippet": "        Rastrigin() {\n            this(1, 10);\n        }\n",
        "begin_line": 736,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 737,col 13)-(line 737,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.Rastrigin(double, double)",
        "snippet": "        Rastrigin(double axisratio, double amplitude) {\n            this.axisratio = axisratio;\n            this.amplitude = amplitude;\n        }\n",
        "begin_line": 740,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 741,col 13)-(line 741,col 39)",
            "(line 742,col 13)-(line 742,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Rastrigin.value(double[])",
        "snippet": "        public double value(double[] x) {\n            double f = 0;\n            double fac;\n            for (int i = 0; i < x.length; ++i) {\n                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));\n                if (i == 0 && x[i] < 0)\n                    fac *= 1.;\n                f += fac * fac * x[i] * x[i] + amplitude\n                * (1. - Math.cos(2. * Math.PI * fac * x[i]));\n            }\n            return f;\n        }\n",
        "begin_line": 745,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 746,col 13)-(line 746,col 25)",
            "(line 747,col 13)-(line 747,col 23)",
            "(line 748,col 13)-(line 754,col 13)",
            "(line 755,col 13)-(line 755,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Basis.Rotate(double[])",
        "snippet": "        double[] Rotate(double[] x) {\n            GenBasis(x.length);\n            double[] y = new double[x.length];\n            for (int i = 0; i < x.length; ++i) {\n                y[i] = 0;\n                for (int j = 0; j < x.length; ++j)\n                    y[i] += basis[i][j] * x[j];\n            }\n            return y;\n        }\n",
        "begin_line": 763,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 764,col 13)-(line 764,col 31)",
            "(line 765,col 13)-(line 765,col 46)",
            "(line 766,col 13)-(line 770,col 13)",
            "(line 771,col 13)-(line 771,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "signature": "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.Basis.GenBasis(int)",
        "snippet": "        void GenBasis(int DIM) {\n            if (basis != null ? basis.length == DIM : false)\n                return;\n\n            double sp;\n            int i, j, k;\n\n            /* generate orthogonal basis */\n            basis = new double[DIM][DIM];\n            for (i = 0; i < DIM; ++i) {\n                /* sample components gaussian */\n                for (j = 0; j < DIM; ++j)\n                    basis[i][j] = rand.nextGaussian();\n                /* substract projection of previous vectors */\n                for (j = i - 1; j >= 0; --j) {\n                    for (sp = 0., k = 0; k < DIM; ++k)\n                        sp += basis[i][k] * basis[j][k]; /* scalar product */\n                    for (k = 0; k < DIM; ++k)\n                        basis[i][k] -= sp * basis[j][k]; /* substract */\n                }\n                /* normalize */\n                for (sp = 0., k = 0; k < DIM; ++k)\n                    sp += basis[i][k] * basis[i][k]; /* squared norm */\n                for (k = 0; k < DIM; ++k)\n                    basis[i][k] /= Math.sqrt(sp);\n            }\n        }\n",
        "begin_line": 774,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 775,col 13)-(line 776,col 23)",
            "(line 778,col 13)-(line 778,col 22)",
            "(line 779,col 13)-(line 779,col 24)",
            "(line 782,col 13)-(line 782,col 41)",
            "(line 783,col 13)-(line 799,col 13)"
        ]
    }
]