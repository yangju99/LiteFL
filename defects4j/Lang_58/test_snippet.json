[
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.NumberUtilsTest(java.lang.String)",
        "snippet": "    public NumberUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(NumberUtilsTest.class);\n        suite.setName(\"NumberUtils Tests\");\n        return suite;\n    }\n",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 63)",
            "(line 54,col 9)-(line 54,col 43)",
            "(line 55,col 9)-(line 55,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new NumberUtils());\n        Constructor[] cons = NumberUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));\n    }\n",
        "begin_line": 59,
        "end_line": 66,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 41)",
            "(line 61,col 9)-(line 61,col 73)",
            "(line 62,col 9)-(line 62,col 37)",
            "(line 63,col 9)-(line 63,col 70)",
            "(line 64,col 9)-(line 64,col 80)",
            "(line 65,col 9)-(line 65,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testStringToIntString()",
        "snippet": "    public void testStringToIntString() {\n        assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n        assertTrue(\"stringToInt(String) 2 failed\", NumberUtils.stringToInt(\"abc\") == 0);\n        assertTrue(\"stringToInt(empty) failed\", NumberUtils.stringToInt(\"\") == 0);\n        assertTrue(\"stringToInt(null) failed\", NumberUtils.stringToInt(null) == 0);\n    }\n",
        "begin_line": 73,
        "end_line": 78,
        "comment": "\n     * Test for {@link NumberUtils#stringToInt(String)}.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 94)",
            "(line 75,col 9)-(line 75,col 88)",
            "(line 76,col 9)-(line 76,col 82)",
            "(line 77,col 9)-(line 77,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToIntString()",
        "snippet": "    public void testToIntString() {\n        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n    }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String)}.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 82)",
            "(line 85,col 9)-(line 85,col 76)",
            "(line 86,col 9)-(line 86,col 70)",
            "(line 87,col 9)-(line 87,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testStringToIntStringI()",
        "snippet": "    public void testStringToIntStringI() {\n        assertTrue(\"stringToInt(String,int) 1 failed\", NumberUtils.stringToInt(\"12345\", 5) == 12345);\n        assertTrue(\"stringToInt(String,int) 2 failed\", NumberUtils.stringToInt(\"1234.5\", 5) == 5);\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "\n     * Test for {@link NumberUtils#stringToInt(String, int)}.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 101)",
            "(line 95,col 9)-(line 95,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToIntStringI()",
        "snippet": "    public void testToIntStringI() {\n        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n    }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "\n     * Test for {@link NumberUtils#toInt(String, int)}.\n     ",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 89)",
            "(line 103,col 9)-(line 103,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToLongString()",
        "snippet": "    public void testToLongString() {\n        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n    }\n",
        "begin_line": 109,
        "end_line": 118,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String)}.\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 85)",
            "(line 111,col 9)-(line 111,col 79)",
            "(line 112,col 9)-(line 112,col 78)",
            "(line 113,col 9)-(line 113,col 78)",
            "(line 114,col 9)-(line 114,col 109)",
            "(line 115,col 9)-(line 115,col 109)",
            "(line 116,col 9)-(line 116,col 73)",
            "(line 117,col 9)-(line 117,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToLongStringL()",
        "snippet": "    public void testToLongStringL() {\n        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n    }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "\n     * Test for {@link NumberUtils#toLong(String, long)}.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 94)",
            "(line 125,col 9)-(line 125,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToFloatString()",
        "snippet": "    public void testToFloatString() {\n        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n    }\n",
        "begin_line": 131,
        "end_line": 139,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String)}.\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 91)",
            "(line 133,col 9)-(line 133,col 89)",
            "(line 134,col 9)-(line 134,col 83)",
            "(line 135,col 9)-(line 135,col 115)",
            "(line 136,col 9)-(line 136,col 114)",
            "(line 137,col 9)-(line 137,col 77)",
            "(line 138,col 9)-(line 138,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testToFloatStringF()",
        "snippet": "    public void testToFloatStringF() {\n        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n    }\n",
        "begin_line": 144,
        "end_line": 147,
        "comment": "\n     * Test for {@link NumberUtils#toFloat(String, float)}.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 99)",
            "(line 146,col 9)-(line 146,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testStringToDoubleString()",
        "snippet": "    public void testStringToDoubleString() {\n        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n    }\n",
        "begin_line": 152,
        "end_line": 160,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String)}.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 93)",
            "(line 154,col 9)-(line 154,col 91)",
            "(line 155,col 9)-(line 155,col 85)",
            "(line 156,col 9)-(line 156,col 119)",
            "(line 157,col 9)-(line 157,col 119)",
            "(line 158,col 9)-(line 158,col 79)",
            "(line 159,col 9)-(line 159,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testStringToDoubleStringD()",
        "snippet": "    public void testStringToDoubleStringD() {\n        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n    }\n",
        "begin_line": 165,
        "end_line": 168,
        "comment": "\n     * Test for {@link NumberUtils#toDouble(String, double)}.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 101)",
            "(line 167,col 9)-(line 167,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateNumber()",
        "snippet": "    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n    }\n",
        "begin_line": 170,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 111)",
            "(line 173,col 9)-(line 173,col 111)",
            "(line 174,col 9)-(line 174,col 113)",
            "(line 175,col 9)-(line 175,col 113)",
            "(line 176,col 9)-(line 176,col 112)",
            "(line 177,col 9)-(line 177,col 112)",
            "(line 178,col 9)-(line 179,col 41)",
            "(line 180,col 9)-(line 180,col 107)",
            "(line 181,col 9)-(line 181,col 107)",
            "(line 182,col 9)-(line 182,col 113)",
            "(line 183,col 9)-(line 183,col 113)",
            "(line 184,col 9)-(line 184,col 109)",
            "(line 185,col 9)-(line 185,col 112)",
            "(line 186,col 9)-(line 186,col 115)",
            "(line 187,col 9)-(line 187,col 112)",
            "(line 188,col 9)-(line 188,col 117)",
            "(line 189,col 9)-(line 189,col 117)",
            "(line 190,col 9)-(line 190,col 88)",
            "(line 191,col 9)-(line 192,col 56)",
            "(line 195,col 9)-(line 198,col 9)",
            "(line 199,col 9)-(line 200,col 63)",
            "(line 201,col 9)-(line 202,col 57)",
            "(line 203,col 9)-(line 204,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateFloat()",
        "snippet": "    public void testCreateFloat() {\n        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n        this.testCreateFloatFailure(\"\");\n        this.testCreateFloatFailure(\" \");\n        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 207,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 107)",
            "(line 209,col 9)-(line 209,col 86)",
            "(line 210,col 9)-(line 210,col 40)",
            "(line 211,col 9)-(line 211,col 41)",
            "(line 212,col 9)-(line 212,col 50)",
            "(line 214,col 9)-(line 214,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateFloatFailure(java.lang.String)",
        "snippet": "    protected void testCreateFloatFailure(String str) {\n        try {\n            Float value = NumberUtils.createFloat(str);\n            fail(\"createFloat(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 217,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 223,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateDouble()",
        "snippet": "    public void testCreateDouble() {\n        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n        this.testCreateDoubleFailure(\"\");\n        this.testCreateDoubleFailure(\" \");\n        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 226,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 110)",
            "(line 228,col 9)-(line 228,col 88)",
            "(line 229,col 9)-(line 229,col 41)",
            "(line 230,col 9)-(line 230,col 42)",
            "(line 231,col 9)-(line 231,col 51)",
            "(line 233,col 9)-(line 233,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateDoubleFailure(java.lang.String)",
        "snippet": "    protected void testCreateDoubleFailure(String str) {\n        try {\n            Double value = NumberUtils.createDouble(str);\n            fail(\"createDouble(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 236,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 237,col 9)-(line 242,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateInteger()",
        "snippet": "    public void testCreateInteger() {\n        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n        this.testCreateIntegerFailure(\"\");\n        this.testCreateIntegerFailure(\" \");\n        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 245,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 111)",
            "(line 247,col 9)-(line 247,col 90)",
            "(line 248,col 9)-(line 248,col 42)",
            "(line 249,col 9)-(line 249,col 43)",
            "(line 250,col 9)-(line 250,col 52)",
            "(line 252,col 9)-(line 252,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateIntegerFailure(String str) {\n        try {\n            Integer value = NumberUtils.createInteger(str);\n            fail(\"createInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 255,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 256,col 9)-(line 261,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateLong()",
        "snippet": "    public void testCreateLong() {\n        assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n        this.testCreateLongFailure(\"\");\n        this.testCreateLongFailure(\" \");\n        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 264,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 265,col 9)-(line 265,col 102)",
            "(line 266,col 9)-(line 266,col 84)",
            "(line 267,col 9)-(line 267,col 39)",
            "(line 268,col 9)-(line 268,col 40)",
            "(line 269,col 9)-(line 269,col 49)",
            "(line 271,col 9)-(line 271,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateLongFailure(java.lang.String)",
        "snippet": "    protected void testCreateLongFailure(String str) {\n        try {\n            Long value = NumberUtils.createLong(str);\n            fail(\"createLong(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 274,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 280,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigInteger()",
        "snippet": "    public void testCreateBigInteger() {\n        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n        this.testCreateBigIntegerFailure(\"\");\n        this.testCreateBigIntegerFailure(\" \");\n        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 283,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 120)",
            "(line 285,col 9)-(line 285,col 96)",
            "(line 286,col 9)-(line 286,col 45)",
            "(line 287,col 9)-(line 287,col 46)",
            "(line 288,col 9)-(line 288,col 55)",
            "(line 290,col 9)-(line 290,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigIntegerFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigIntegerFailure(String str) {\n        try {\n            BigInteger value = NumberUtils.createBigInteger(str);\n            fail(\"createBigInteger(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 293,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 299,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigDecimal()",
        "snippet": "    public void testCreateBigDecimal() {\n        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n        this.testCreateBigDecimalFailure(\"\");\n        this.testCreateBigDecimalFailure(\" \");\n        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n        // Funky whitespaces\n        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n    }\n",
        "begin_line": 302,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 122)",
            "(line 304,col 9)-(line 304,col 96)",
            "(line 305,col 9)-(line 305,col 45)",
            "(line 306,col 9)-(line 306,col 46)",
            "(line 307,col 9)-(line 307,col 55)",
            "(line 309,col 9)-(line 309,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCreateBigDecimalFailure(java.lang.String)",
        "snippet": "    protected void testCreateBigDecimalFailure(String str) {\n        try {\n            BigDecimal value = NumberUtils.createBigDecimal(str);\n            fail(\"createBigDecimal(blank) failed: \" + value);\n        } catch (NumberFormatException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 312,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 313,col 9)-(line 318,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testEqualsByte()",
        "snippet": "    public void testEqualsByte() {\n        byte[] array1 = null;\n        byte[] array2 = null;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n        assertEquals( true, NumberUtils.equals(array2, array1) );\n\n        array1 = new byte[] { 50, 20 }; // array2 still null\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n        assertEquals( false, NumberUtils.equals(array2, array1) );\n\n        // test same reference equivalence\n        array2 = array1;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test object equivalence\n        array2 = new byte[] { 50, 20 };\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test symmetry is not equivalent\n        array2 = new byte[] { 20, 50 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test the whole length of rhs is tested against\n        array2 = new byte[] { 50, 20, 10 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test whole length of lhs is tested against\n        array2 = new byte[] { 50 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n    }\n",
        "begin_line": 323,
        "end_line": 352,
        "comment": " ----------------------------------------------------------------------",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 29)",
            "(line 325,col 9)-(line 325,col 29)",
            "(line 326,col 9)-(line 326,col 65)",
            "(line 327,col 9)-(line 327,col 65)",
            "(line 329,col 9)-(line 329,col 39)",
            "(line 330,col 9)-(line 330,col 66)",
            "(line 331,col 9)-(line 331,col 66)",
            "(line 334,col 9)-(line 334,col 24)",
            "(line 335,col 9)-(line 335,col 65)",
            "(line 338,col 9)-(line 338,col 39)",
            "(line 339,col 9)-(line 339,col 65)",
            "(line 342,col 9)-(line 342,col 39)",
            "(line 343,col 9)-(line 343,col 66)",
            "(line 346,col 9)-(line 346,col 43)",
            "(line 347,col 9)-(line 347,col 66)",
            "(line 350,col 9)-(line 350,col 35)",
            "(line 351,col 9)-(line 351,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testEqualsShort()",
        "snippet": "    public void testEqualsShort() {\n        short[] array1 = null;\n        short[] array2 = null;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n        assertEquals( true, NumberUtils.equals(array2, array1) );\n\n        array1 = new short[] { 50, 20 }; // array2 still null\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n        assertEquals( false, NumberUtils.equals(array2, array1) );\n\n        // test same reference equivalence\n        array2 = array1;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test object equivalence\n        array2 = new short[] { 50, 20 };\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test symmetry is not equivalent\n        array2 = new short[] { 20, 50 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test the whole length of rhs is tested against\n        array2 = new short[] { 50, 20, 10 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test whole length of lhs is tested against\n        array2 = new short[] { 50 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n    }\n",
        "begin_line": 354,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 30)",
            "(line 356,col 9)-(line 356,col 30)",
            "(line 357,col 9)-(line 357,col 65)",
            "(line 358,col 9)-(line 358,col 65)",
            "(line 360,col 9)-(line 360,col 40)",
            "(line 361,col 9)-(line 361,col 66)",
            "(line 362,col 9)-(line 362,col 66)",
            "(line 365,col 9)-(line 365,col 24)",
            "(line 366,col 9)-(line 366,col 65)",
            "(line 369,col 9)-(line 369,col 40)",
            "(line 370,col 9)-(line 370,col 65)",
            "(line 373,col 9)-(line 373,col 40)",
            "(line 374,col 9)-(line 374,col 66)",
            "(line 377,col 9)-(line 377,col 44)",
            "(line 378,col 9)-(line 378,col 66)",
            "(line 381,col 9)-(line 381,col 36)",
            "(line 382,col 9)-(line 382,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testEqualsInt()",
        "snippet": "    public void testEqualsInt() {\n        int[] array1 = null;\n        int[] array2 = null;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n        assertEquals( true, NumberUtils.equals(array2, array1) );\n\n        array1 = new int[] { 50, 20 }; // array2 still null\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n        assertEquals( false, NumberUtils.equals(array2, array1) );\n\n        // test same reference equivalence\n        array2 = array1;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test object equivalence\n        array2 = new int[] { 50, 20 };\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test symmetry is not equivalent\n        array2 = new int[] { 20, 50 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test the whole length of rhs is tested against\n        array2 = new int[] { 50, 20, 10 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test whole length of lhs is tested against\n        array2 = new int[] { 50 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n    }\n",
        "begin_line": 385,
        "end_line": 414,
        "comment": "",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 28)",
            "(line 387,col 9)-(line 387,col 28)",
            "(line 388,col 9)-(line 388,col 65)",
            "(line 389,col 9)-(line 389,col 65)",
            "(line 391,col 9)-(line 391,col 38)",
            "(line 392,col 9)-(line 392,col 66)",
            "(line 393,col 9)-(line 393,col 66)",
            "(line 396,col 9)-(line 396,col 24)",
            "(line 397,col 9)-(line 397,col 65)",
            "(line 400,col 9)-(line 400,col 38)",
            "(line 401,col 9)-(line 401,col 65)",
            "(line 404,col 9)-(line 404,col 38)",
            "(line 405,col 9)-(line 405,col 66)",
            "(line 408,col 9)-(line 408,col 42)",
            "(line 409,col 9)-(line 409,col 66)",
            "(line 412,col 9)-(line 412,col 34)",
            "(line 413,col 9)-(line 413,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testEqualsLong()",
        "snippet": "    public void testEqualsLong() {\n        long[] array1 = null;\n        long[] array2 = null;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n        assertEquals( true, NumberUtils.equals(array2, array1) );\n\n        array1 = new long[] { 50L, 20L }; // array2 still null\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n        assertEquals( false, NumberUtils.equals(array2, array1) );\n\n        // test same reference equivalence\n        array2 = array1;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test object equivalence\n        array2 = new long[] { 50L, 20L };\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test symmetry is not equivalent\n        array2 = new long[] { 20L, 50L };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test the whole length of rhs is tested against\n        array2 = new long[] { 50L, 20L, 10L };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test whole length of lhs is tested against\n        array2 = new long[] { 50L };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n    }\n",
        "begin_line": 416,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 29)",
            "(line 418,col 9)-(line 418,col 29)",
            "(line 419,col 9)-(line 419,col 65)",
            "(line 420,col 9)-(line 420,col 65)",
            "(line 422,col 9)-(line 422,col 41)",
            "(line 423,col 9)-(line 423,col 66)",
            "(line 424,col 9)-(line 424,col 66)",
            "(line 427,col 9)-(line 427,col 24)",
            "(line 428,col 9)-(line 428,col 65)",
            "(line 431,col 9)-(line 431,col 41)",
            "(line 432,col 9)-(line 432,col 65)",
            "(line 435,col 9)-(line 435,col 41)",
            "(line 436,col 9)-(line 436,col 66)",
            "(line 439,col 9)-(line 439,col 46)",
            "(line 440,col 9)-(line 440,col 66)",
            "(line 443,col 9)-(line 443,col 36)",
            "(line 444,col 9)-(line 444,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testEqualsFloat()",
        "snippet": "    public void testEqualsFloat() {\n        float[] array1 = null;\n        float[] array2 = null;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n        assertEquals( true, NumberUtils.equals(array2, array1) );\n\n        array1 = new float[] { 50.6f, 20.6f }; // array2 still null\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n        assertEquals( false, NumberUtils.equals(array2, array1) );\n\n        // test same reference equivalence\n        array2 = array1;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test object equivalence\n        array2 = new float[] { 50.6f, 20.6f };\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test symmetry is not equivalent\n        array2 = new float[] { 20.6f, 50.6f };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test the whole length of rhs is tested against\n        array2 = new float[] { 50.6f, 20.6f, 10.6f };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test whole length of lhs is tested against\n        array2 = new float[] { 50.6f };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n    }\n",
        "begin_line": 447,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 448,col 9)-(line 448,col 30)",
            "(line 449,col 9)-(line 449,col 30)",
            "(line 450,col 9)-(line 450,col 65)",
            "(line 451,col 9)-(line 451,col 65)",
            "(line 453,col 9)-(line 453,col 46)",
            "(line 454,col 9)-(line 454,col 66)",
            "(line 455,col 9)-(line 455,col 66)",
            "(line 458,col 9)-(line 458,col 24)",
            "(line 459,col 9)-(line 459,col 65)",
            "(line 462,col 9)-(line 462,col 46)",
            "(line 463,col 9)-(line 463,col 65)",
            "(line 466,col 9)-(line 466,col 46)",
            "(line 467,col 9)-(line 467,col 66)",
            "(line 470,col 9)-(line 470,col 53)",
            "(line 471,col 9)-(line 471,col 66)",
            "(line 474,col 9)-(line 474,col 39)",
            "(line 475,col 9)-(line 475,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testEqualsDouble()",
        "snippet": "    public void testEqualsDouble() {\n        double[] array1 = null;\n        double[] array2 = null;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n        assertEquals( true, NumberUtils.equals(array2, array1) );\n\n        array1 = new double[] { 50.6, 20.6 }; // array2 still null\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n        assertEquals( false, NumberUtils.equals(array2, array1) );\n\n        // test same reference equivalence\n        array2 = array1;\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test object equivalence\n        array2 = new double[] { 50.6, 20.6 };\n        assertEquals( true, NumberUtils.equals(array1, array2) );\n\n        // test symmetry is not equivalent\n        array2 = new double[] { 20.6, 50.6 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test the whole length of rhs is tested against\n        array2 = new double[] { 50.6, 20.6, 10.6 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n\n        // test whole length of lhs is tested against\n        array2 = new double[] { 50.6 };\n        assertEquals( false, NumberUtils.equals(array1, array2) );\n    }\n",
        "begin_line": 478,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 479,col 9)-(line 479,col 31)",
            "(line 480,col 9)-(line 480,col 31)",
            "(line 481,col 9)-(line 481,col 65)",
            "(line 482,col 9)-(line 482,col 65)",
            "(line 484,col 9)-(line 484,col 45)",
            "(line 485,col 9)-(line 485,col 66)",
            "(line 486,col 9)-(line 486,col 66)",
            "(line 489,col 9)-(line 489,col 24)",
            "(line 490,col 9)-(line 490,col 65)",
            "(line 493,col 9)-(line 493,col 45)",
            "(line 494,col 9)-(line 494,col 65)",
            "(line 497,col 9)-(line 497,col 45)",
            "(line 498,col 9)-(line 498,col 66)",
            "(line 501,col 9)-(line 501,col 51)",
            "(line 502,col 9)-(line 502,col 66)",
            "(line 505,col 9)-(line 505,col 39)",
            "(line 506,col 9)-(line 506,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinLong()",
        "snippet": "    public void testMinLong() {\n        final long[] l = null;\n        try {\n            NumberUtils.min(l);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new long[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(long[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new long[] { 5 }));\n\n        assertEquals(\n            \"min(long[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new long[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 511,
        "end_line": 535,
        "comment": " ----------------------------------------------------------------------",
        "child_ranges": [
            "(line 512,col 9)-(line 512,col 30)",
            "(line 513,col 9)-(line 516,col 48)",
            "(line 518,col 9)-(line 521,col 48)",
            "(line 523,col 9)-(line 526,col 47)",
            "(line 528,col 9)-(line 531,col 50)",
            "(line 533,col 9)-(line 533,col 77)",
            "(line 534,col 9)-(line 534,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinInt()",
        "snippet": "    public void testMinInt() {\n        final int[] i = null;\n        try {\n            NumberUtils.min(i);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new int[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(int[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new int[] { 5 }));\n\n        assertEquals(\n            \"min(int[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new int[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 537,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 538,col 9)-(line 538,col 29)",
            "(line 539,col 9)-(line 542,col 48)",
            "(line 544,col 9)-(line 547,col 48)",
            "(line 549,col 9)-(line 552,col 46)",
            "(line 554,col 9)-(line 557,col 49)",
            "(line 559,col 9)-(line 559,col 76)",
            "(line 560,col 9)-(line 560,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinShort()",
        "snippet": "    public void testMinShort() {\n        final short[] s = null;\n        try {\n            NumberUtils.min(s);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new short[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(short[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new short[] { 5 }));\n\n        assertEquals(\n            \"min(short[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new short[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 563,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 564,col 9)-(line 564,col 31)",
            "(line 565,col 9)-(line 568,col 48)",
            "(line 570,col 9)-(line 573,col 48)",
            "(line 575,col 9)-(line 578,col 48)",
            "(line 580,col 9)-(line 583,col 51)",
            "(line 585,col 9)-(line 585,col 78)",
            "(line 586,col 9)-(line 586,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinByte()",
        "snippet": "    public void testMinByte() {\n        final byte[] b = null;\n        try {\n            NumberUtils.min(b);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new byte[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.min(new byte[] { 5 }));\n\n        assertEquals(\n            \"min(byte[]) failed for array length 2\",\n            6,\n            NumberUtils.min(new byte[] { 6, 9 }));\n\n        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n    }\n",
        "begin_line": 589,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 30)",
            "(line 591,col 9)-(line 594,col 48)",
            "(line 596,col 9)-(line 599,col 48)",
            "(line 601,col 9)-(line 604,col 47)",
            "(line 606,col 9)-(line 609,col 50)",
            "(line 611,col 9)-(line 611,col 77)",
            "(line 612,col 9)-(line 612,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinDouble()",
        "snippet": "    public void testMinDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.min(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(double[]) failed for array length 1\",\n            5.12,\n            NumberUtils.min(new double[] { 5.12 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 2\",\n            6.23,\n            NumberUtils.min(new double[] { 6.23, 9.34 }),\n            0);\n\n        assertEquals(\n            \"min(double[]) failed for array length 5\",\n            -10.45,\n            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n            0);\n        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n    }\n",
        "begin_line": 615,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 616,col 9)-(line 616,col 32)",
            "(line 617,col 9)-(line 620,col 48)",
            "(line 622,col 9)-(line 625,col 48)",
            "(line 627,col 9)-(line 631,col 15)",
            "(line 633,col 9)-(line 637,col 15)",
            "(line 639,col 9)-(line 643,col 15)",
            "(line 644,col 9)-(line 644,col 87)",
            "(line 645,col 9)-(line 645,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinFloat()",
        "snippet": "    public void testMinFloat() {\n        final float[] f = null;\n        try {\n            NumberUtils.min(f);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.min(new float[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"min(float[]) failed for array length 1\",\n            5.9f,\n            NumberUtils.min(new float[] { 5.9f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 2\",\n            6.8f,\n            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n            0);\n\n        assertEquals(\n            \"min(float[]) failed for array length 5\",\n            -10.6f,\n            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n            0);\n        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n    }\n",
        "begin_line": 648,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 649,col 9)-(line 649,col 31)",
            "(line 650,col 9)-(line 653,col 48)",
            "(line 655,col 9)-(line 658,col 48)",
            "(line 660,col 9)-(line 664,col 15)",
            "(line 666,col 9)-(line 670,col 15)",
            "(line 672,col 9)-(line 676,col 15)",
            "(line 677,col 9)-(line 677,col 87)",
            "(line 678,col 9)-(line 678,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxLong()",
        "snippet": "    public void testMaxLong() {\n        final long[] l = null;\n        try {\n            NumberUtils.max(l);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new long[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(long[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new long[] { 5 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new long[] { 6, 9 }));\n\n        assertEquals(\n            \"max(long[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 681,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 682,col 9)-(line 682,col 30)",
            "(line 683,col 9)-(line 686,col 48)",
            "(line 688,col 9)-(line 691,col 48)",
            "(line 693,col 9)-(line 696,col 47)",
            "(line 698,col 9)-(line 701,col 50)",
            "(line 703,col 9)-(line 706,col 63)",
            "(line 707,col 9)-(line 707,col 76)",
            "(line 708,col 9)-(line 708,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxInt()",
        "snippet": "    public void testMaxInt() {\n        final int[] i = null;\n        try {\n            NumberUtils.max(i);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new int[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(int[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new int[] { 5 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new int[] { 6, 9 }));\n\n        assertEquals(\n            \"max(int[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 711,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 29)",
            "(line 713,col 9)-(line 716,col 48)",
            "(line 718,col 9)-(line 721,col 48)",
            "(line 723,col 9)-(line 726,col 46)",
            "(line 728,col 9)-(line 731,col 49)",
            "(line 733,col 9)-(line 736,col 62)",
            "(line 737,col 9)-(line 737,col 75)",
            "(line 738,col 9)-(line 738,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxShort()",
        "snippet": "    public void testMaxShort() {\n        final short[] s = null;\n        try {\n            NumberUtils.max(s);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new short[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(short[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new short[] { 5 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new short[] { 6, 9 }));\n\n        assertEquals(\n            \"max(short[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 741,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 742,col 9)-(line 742,col 31)",
            "(line 743,col 9)-(line 746,col 48)",
            "(line 748,col 9)-(line 751,col 48)",
            "(line 753,col 9)-(line 756,col 48)",
            "(line 758,col 9)-(line 761,col 51)",
            "(line 763,col 9)-(line 766,col 64)",
            "(line 767,col 9)-(line 767,col 77)",
            "(line 768,col 9)-(line 768,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxByte()",
        "snippet": "    public void testMaxByte() {\n        final byte[] b = null;\n        try {\n            NumberUtils.max(b);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new byte[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(byte[]) failed for array length 1\",\n            5,\n            NumberUtils.max(new byte[] { 5 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 2\",\n            9,\n            NumberUtils.max(new byte[] { 6, 9 }));\n\n        assertEquals(\n            \"max(byte[]) failed for array length 5\",\n            10,\n            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n    }\n",
        "begin_line": 771,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 772,col 9)-(line 772,col 30)",
            "(line 773,col 9)-(line 776,col 48)",
            "(line 778,col 9)-(line 781,col 48)",
            "(line 783,col 9)-(line 786,col 47)",
            "(line 788,col 9)-(line 791,col 50)",
            "(line 793,col 9)-(line 796,col 63)",
            "(line 797,col 9)-(line 797,col 76)",
            "(line 798,col 9)-(line 798,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxDouble()",
        "snippet": "    public void testMaxDouble() {\n        final double[] d = null;\n        try {\n            NumberUtils.max(d);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new double[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(double[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new double[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(double[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n    }\n",
        "begin_line": 801,
        "end_line": 832,
        "comment": "",
        "child_ranges": [
            "(line 802,col 9)-(line 802,col 32)",
            "(line 803,col 9)-(line 806,col 48)",
            "(line 808,col 9)-(line 811,col 48)",
            "(line 813,col 9)-(line 817,col 15)",
            "(line 819,col 9)-(line 823,col 15)",
            "(line 825,col 9)-(line 829,col 15)",
            "(line 830,col 9)-(line 830,col 86)",
            "(line 831,col 9)-(line 831,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaxFloat()",
        "snippet": "    public void testMaxFloat() {\n        final float[] f = null;\n        try {\n            NumberUtils.max(f);\n            fail(\"No exception was thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        try {\n            NumberUtils.max(new float[0]);\n            fail(\"No exception was thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(\n            \"max(float[]) failed for array length 1\",\n            5.1f,\n            NumberUtils.max(new float[] { 5.1f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for array length 2\",\n            9.2f,\n            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n            0);\n\n        assertEquals(\n            \"max(float[]) failed for float length 5\",\n            10.4f,\n            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n            0);\n        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n    }\n",
        "begin_line": 834,
        "end_line": 865,
        "comment": "",
        "child_ranges": [
            "(line 835,col 9)-(line 835,col 31)",
            "(line 836,col 9)-(line 839,col 48)",
            "(line 841,col 9)-(line 844,col 48)",
            "(line 846,col 9)-(line 850,col 15)",
            "(line 852,col 9)-(line 856,col 15)",
            "(line 858,col 9)-(line 862,col 15)",
            "(line 863,col 9)-(line 863,col 86)",
            "(line 864,col 9)-(line 864,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumLong()",
        "snippet": "    public void testMinimumLong() {\n        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n    }\n",
        "begin_line": 867,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 868,col 9)-(line 868,col 116)",
            "(line 869,col 9)-(line 869,col 115)",
            "(line 870,col 9)-(line 870,col 116)",
            "(line 871,col 9)-(line 871,col 111)",
            "(line 872,col 9)-(line 872,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumInt()",
        "snippet": "    public void testMinimumInt() {\n        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n    }\n",
        "begin_line": 875,
        "end_line": 881,
        "comment": "",
        "child_ranges": [
            "(line 876,col 9)-(line 876,col 107)",
            "(line 877,col 9)-(line 877,col 107)",
            "(line 878,col 9)-(line 878,col 107)",
            "(line 879,col 9)-(line 879,col 103)",
            "(line 880,col 9)-(line 880,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumShort()",
        "snippet": "    public void testMinimumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n",
        "begin_line": 883,
        "end_line": 891,
        "comment": "",
        "child_ranges": [
            "(line 884,col 9)-(line 884,col 25)",
            "(line 885,col 9)-(line 885,col 29)",
            "(line 886,col 9)-(line 886,col 30)",
            "(line 887,col 9)-(line 887,col 98)",
            "(line 888,col 9)-(line 888,col 98)",
            "(line 889,col 9)-(line 889,col 98)",
            "(line 890,col 9)-(line 890,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumByte()",
        "snippet": "    public void testMinimumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n    }\n",
        "begin_line": 893,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 894,col 9)-(line 894,col 23)",
            "(line 895,col 9)-(line 895,col 27)",
            "(line 896,col 9)-(line 896,col 28)",
            "(line 897,col 9)-(line 897,col 95)",
            "(line 898,col 9)-(line 898,col 95)",
            "(line 899,col 9)-(line 899,col 95)",
            "(line 900,col 9)-(line 900,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumDouble()",
        "snippet": "    public void testMinimumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n    }\n",
        "begin_line": 903,
        "end_line": 912,
        "comment": "",
        "child_ranges": [
            "(line 904,col 9)-(line 904,col 26)",
            "(line 905,col 9)-(line 905,col 30)",
            "(line 906,col 9)-(line 906,col 31)",
            "(line 907,col 9)-(line 907,col 67)",
            "(line 908,col 9)-(line 908,col 67)",
            "(line 909,col 9)-(line 909,col 67)",
            "(line 910,col 9)-(line 910,col 66)",
            "(line 911,col 9)-(line 911,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMinimumFloat()",
        "snippet": "    public void testMinimumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n    }\n",
        "begin_line": 914,
        "end_line": 923,
        "comment": "",
        "child_ranges": [
            "(line 915,col 9)-(line 915,col 26)",
            "(line 916,col 9)-(line 916,col 30)",
            "(line 917,col 9)-(line 917,col 31)",
            "(line 918,col 9)-(line 918,col 68)",
            "(line 919,col 9)-(line 919,col 68)",
            "(line 920,col 9)-(line 920,col 68)",
            "(line 921,col 9)-(line 921,col 67)",
            "(line 922,col 9)-(line 922,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumLong()",
        "snippet": "    public void testMaximumLong() {\n        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n    }\n",
        "begin_line": 925,
        "end_line": 931,
        "comment": "",
        "child_ranges": [
            "(line 926,col 9)-(line 926,col 116)",
            "(line 927,col 9)-(line 927,col 116)",
            "(line 928,col 9)-(line 928,col 116)",
            "(line 929,col 9)-(line 929,col 111)",
            "(line 930,col 9)-(line 930,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumInt()",
        "snippet": "    public void testMaximumInt() {\n        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n    }\n",
        "begin_line": 933,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 934,col 9)-(line 934,col 107)",
            "(line 935,col 9)-(line 935,col 107)",
            "(line 936,col 9)-(line 936,col 107)",
            "(line 937,col 9)-(line 937,col 103)",
            "(line 938,col 9)-(line 938,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumShort()",
        "snippet": "    public void testMaximumShort() {\n        short low = 1234;\n        short mid = 1234 + 1;\n        short high = 1234 + 2;\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n",
        "begin_line": 941,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 942,col 9)-(line 942,col 25)",
            "(line 943,col 9)-(line 943,col 29)",
            "(line 944,col 9)-(line 944,col 30)",
            "(line 945,col 9)-(line 945,col 99)",
            "(line 946,col 9)-(line 946,col 99)",
            "(line 947,col 9)-(line 947,col 99)",
            "(line 948,col 9)-(line 948,col 100)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumByte()",
        "snippet": "    public void testMaximumByte() {\n        byte low = 123;\n        byte mid = 123 + 1;\n        byte high = 123 + 2;\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n    }\n",
        "begin_line": 951,
        "end_line": 959,
        "comment": "",
        "child_ranges": [
            "(line 952,col 9)-(line 952,col 23)",
            "(line 953,col 9)-(line 953,col 27)",
            "(line 954,col 9)-(line 954,col 28)",
            "(line 955,col 9)-(line 955,col 96)",
            "(line 956,col 9)-(line 956,col 96)",
            "(line 957,col 9)-(line 957,col 96)",
            "(line 958,col 9)-(line 958,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumDouble()",
        "snippet": "    public void testMaximumDouble() {\n        double low = 12.3;\n        double mid = 12.3 + 1;\n        double high = 12.3 + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n    }\n",
        "begin_line": 961,
        "end_line": 970,
        "comment": "",
        "child_ranges": [
            "(line 962,col 9)-(line 962,col 26)",
            "(line 963,col 9)-(line 963,col 30)",
            "(line 964,col 9)-(line 964,col 31)",
            "(line 965,col 9)-(line 965,col 68)",
            "(line 966,col 9)-(line 966,col 68)",
            "(line 967,col 9)-(line 967,col 68)",
            "(line 968,col 9)-(line 968,col 66)",
            "(line 969,col 9)-(line 969,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testMaximumFloat()",
        "snippet": "    public void testMaximumFloat() {\n        float low = 12.3f;\n        float mid = 12.3f + 1;\n        float high = 12.3f + 2;\n        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n    }\n",
        "begin_line": 972,
        "end_line": 981,
        "comment": "",
        "child_ranges": [
            "(line 973,col 9)-(line 973,col 26)",
            "(line 974,col 9)-(line 974,col 30)",
            "(line 975,col 9)-(line 975,col 31)",
            "(line 976,col 9)-(line 976,col 69)",
            "(line 977,col 9)-(line 977,col 69)",
            "(line 978,col 9)-(line 978,col 69)",
            "(line 979,col 9)-(line 979,col 67)",
            "(line 980,col 9)-(line 980,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCompareDouble()",
        "snippet": "    public void testCompareDouble() {\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);\n        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);\n        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);\n        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);\n        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 983,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 984,col 9)-(line 984,col 69)",
            "(line 985,col 9)-(line 985,col 84)",
            "(line 986,col 9)-(line 986,col 76)",
            "(line 987,col 9)-(line 987,col 64)",
            "(line 988,col 9)-(line 988,col 64)",
            "(line 989,col 9)-(line 989,col 65)",
            "(line 990,col 9)-(line 990,col 65)",
            "(line 991,col 9)-(line 991,col 77)",
            "(line 992,col 9)-(line 992,col 84)",
            "(line 994,col 9)-(line 994,col 84)",
            "(line 995,col 9)-(line 995,col 97)",
            "(line 996,col 9)-(line 996,col 90)",
            "(line 997,col 9)-(line 997,col 78)",
            "(line 998,col 9)-(line 998,col 78)",
            "(line 999,col 9)-(line 999,col 79)",
            "(line 1000,col 9)-(line 1000,col 79)",
            "(line 1001,col 9)-(line 1001,col 91)",
            "(line 1002,col 9)-(line 1002,col 98)",
            "(line 1004,col 9)-(line 1004,col 76)",
            "(line 1005,col 9)-(line 1005,col 90)",
            "(line 1006,col 9)-(line 1006,col 81)",
            "(line 1007,col 9)-(line 1007,col 70)",
            "(line 1008,col 9)-(line 1008,col 70)",
            "(line 1009,col 9)-(line 1009,col 71)",
            "(line 1010,col 9)-(line 1010,col 71)",
            "(line 1011,col 9)-(line 1011,col 83)",
            "(line 1012,col 9)-(line 1012,col 90)",
            "(line 1014,col 9)-(line 1014,col 64)",
            "(line 1015,col 9)-(line 1015,col 78)",
            "(line 1016,col 9)-(line 1016,col 70)",
            "(line 1017,col 9)-(line 1017,col 57)",
            "(line 1018,col 9)-(line 1018,col 58)",
            "(line 1019,col 9)-(line 1019,col 59)",
            "(line 1020,col 9)-(line 1020,col 59)",
            "(line 1021,col 9)-(line 1021,col 71)",
            "(line 1022,col 9)-(line 1022,col 78)",
            "(line 1024,col 9)-(line 1024,col 64)",
            "(line 1025,col 9)-(line 1025,col 78)",
            "(line 1026,col 9)-(line 1026,col 70)",
            "(line 1027,col 9)-(line 1027,col 58)",
            "(line 1028,col 9)-(line 1028,col 57)",
            "(line 1029,col 9)-(line 1029,col 59)",
            "(line 1030,col 9)-(line 1030,col 59)",
            "(line 1031,col 9)-(line 1031,col 71)",
            "(line 1032,col 9)-(line 1032,col 78)",
            "(line 1034,col 9)-(line 1034,col 65)",
            "(line 1035,col 9)-(line 1035,col 79)",
            "(line 1036,col 9)-(line 1036,col 71)",
            "(line 1037,col 9)-(line 1037,col 59)",
            "(line 1038,col 9)-(line 1038,col 59)",
            "(line 1039,col 9)-(line 1039,col 59)",
            "(line 1040,col 9)-(line 1040,col 60)",
            "(line 1041,col 9)-(line 1041,col 72)",
            "(line 1042,col 9)-(line 1042,col 79)",
            "(line 1044,col 9)-(line 1044,col 65)",
            "(line 1045,col 9)-(line 1045,col 79)",
            "(line 1046,col 9)-(line 1046,col 71)",
            "(line 1047,col 9)-(line 1047,col 59)",
            "(line 1048,col 9)-(line 1048,col 59)",
            "(line 1049,col 9)-(line 1049,col 60)",
            "(line 1050,col 9)-(line 1050,col 59)",
            "(line 1051,col 9)-(line 1051,col 72)",
            "(line 1052,col 9)-(line 1052,col 79)",
            "(line 1054,col 9)-(line 1054,col 77)",
            "(line 1055,col 9)-(line 1055,col 91)",
            "(line 1056,col 9)-(line 1056,col 83)",
            "(line 1057,col 9)-(line 1057,col 71)",
            "(line 1058,col 9)-(line 1058,col 71)",
            "(line 1059,col 9)-(line 1059,col 72)",
            "(line 1060,col 9)-(line 1060,col 72)",
            "(line 1061,col 9)-(line 1061,col 83)",
            "(line 1062,col 9)-(line 1062,col 91)",
            "(line 1064,col 9)-(line 1064,col 84)",
            "(line 1065,col 9)-(line 1065,col 98)",
            "(line 1066,col 9)-(line 1066,col 90)",
            "(line 1067,col 9)-(line 1067,col 78)",
            "(line 1068,col 9)-(line 1068,col 78)",
            "(line 1069,col 9)-(line 1069,col 79)",
            "(line 1070,col 9)-(line 1070,col 79)",
            "(line 1071,col 9)-(line 1071,col 91)",
            "(line 1072,col 9)-(line 1072,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testCompareFloat()",
        "snippet": "    public void testCompareFloat() {\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);\n        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);\n        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);\n        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);\n        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);\n        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n        \n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n    }\n",
        "begin_line": 1075,
        "end_line": 1165,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 9)-(line 1076,col 67)",
            "(line 1077,col 9)-(line 1077,col 82)",
            "(line 1078,col 9)-(line 1078,col 74)",
            "(line 1079,col 9)-(line 1079,col 63)",
            "(line 1080,col 9)-(line 1080,col 63)",
            "(line 1081,col 9)-(line 1081,col 64)",
            "(line 1082,col 9)-(line 1082,col 64)",
            "(line 1083,col 9)-(line 1083,col 75)",
            "(line 1084,col 9)-(line 1084,col 82)",
            "(line 1086,col 9)-(line 1086,col 82)",
            "(line 1087,col 9)-(line 1087,col 95)",
            "(line 1088,col 9)-(line 1088,col 88)",
            "(line 1089,col 9)-(line 1089,col 77)",
            "(line 1090,col 9)-(line 1090,col 77)",
            "(line 1091,col 9)-(line 1091,col 78)",
            "(line 1092,col 9)-(line 1092,col 78)",
            "(line 1093,col 9)-(line 1093,col 89)",
            "(line 1094,col 9)-(line 1094,col 96)",
            "(line 1096,col 9)-(line 1096,col 74)",
            "(line 1097,col 9)-(line 1097,col 88)",
            "(line 1098,col 9)-(line 1098,col 79)",
            "(line 1099,col 9)-(line 1099,col 69)",
            "(line 1100,col 9)-(line 1100,col 69)",
            "(line 1101,col 9)-(line 1101,col 70)",
            "(line 1102,col 9)-(line 1102,col 70)",
            "(line 1103,col 9)-(line 1103,col 81)",
            "(line 1104,col 9)-(line 1104,col 88)",
            "(line 1106,col 9)-(line 1106,col 63)",
            "(line 1107,col 9)-(line 1107,col 77)",
            "(line 1108,col 9)-(line 1108,col 69)",
            "(line 1109,col 9)-(line 1109,col 57)",
            "(line 1110,col 9)-(line 1110,col 58)",
            "(line 1111,col 9)-(line 1111,col 59)",
            "(line 1112,col 9)-(line 1112,col 59)",
            "(line 1113,col 9)-(line 1113,col 70)",
            "(line 1114,col 9)-(line 1114,col 77)",
            "(line 1116,col 9)-(line 1116,col 63)",
            "(line 1117,col 9)-(line 1117,col 77)",
            "(line 1118,col 9)-(line 1118,col 69)",
            "(line 1119,col 9)-(line 1119,col 58)",
            "(line 1120,col 9)-(line 1120,col 57)",
            "(line 1121,col 9)-(line 1121,col 59)",
            "(line 1122,col 9)-(line 1122,col 59)",
            "(line 1123,col 9)-(line 1123,col 70)",
            "(line 1124,col 9)-(line 1124,col 77)",
            "(line 1126,col 9)-(line 1126,col 64)",
            "(line 1127,col 9)-(line 1127,col 78)",
            "(line 1128,col 9)-(line 1128,col 70)",
            "(line 1129,col 9)-(line 1129,col 59)",
            "(line 1130,col 9)-(line 1130,col 59)",
            "(line 1131,col 9)-(line 1131,col 59)",
            "(line 1132,col 9)-(line 1132,col 60)",
            "(line 1133,col 9)-(line 1133,col 71)",
            "(line 1134,col 9)-(line 1134,col 78)",
            "(line 1136,col 9)-(line 1136,col 64)",
            "(line 1137,col 9)-(line 1137,col 78)",
            "(line 1138,col 9)-(line 1138,col 70)",
            "(line 1139,col 9)-(line 1139,col 59)",
            "(line 1140,col 9)-(line 1140,col 59)",
            "(line 1141,col 9)-(line 1141,col 60)",
            "(line 1142,col 9)-(line 1142,col 59)",
            "(line 1143,col 9)-(line 1143,col 71)",
            "(line 1144,col 9)-(line 1144,col 78)",
            "(line 1146,col 9)-(line 1146,col 75)",
            "(line 1147,col 9)-(line 1147,col 89)",
            "(line 1148,col 9)-(line 1148,col 81)",
            "(line 1149,col 9)-(line 1149,col 70)",
            "(line 1150,col 9)-(line 1150,col 70)",
            "(line 1151,col 9)-(line 1151,col 71)",
            "(line 1152,col 9)-(line 1152,col 71)",
            "(line 1153,col 9)-(line 1153,col 81)",
            "(line 1154,col 9)-(line 1154,col 89)",
            "(line 1156,col 9)-(line 1156,col 82)",
            "(line 1157,col 9)-(line 1157,col 96)",
            "(line 1158,col 9)-(line 1158,col 88)",
            "(line 1159,col 9)-(line 1159,col 77)",
            "(line 1160,col 9)-(line 1160,col 77)",
            "(line 1161,col 9)-(line 1161,col 78)",
            "(line 1162,col 9)-(line 1162,col 78)",
            "(line 1163,col 9)-(line 1163,col 89)",
            "(line 1164,col 9)-(line 1164,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testIsDigits()",
        "snippet": "    public void testIsDigits() {\n        assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n        assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n        assertEquals(\"isDigits(String) failed\", true, NumberUtils.isDigits(\"12345\"));\n        assertEquals(\"isDigits(String) neg 1 failed\", false, NumberUtils.isDigits(\"1234.5\"));\n        assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n        assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n    }\n",
        "begin_line": 1167,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1168,col 9)-(line 1168,col 81)",
            "(line 1169,col 9)-(line 1169,col 77)",
            "(line 1170,col 9)-(line 1170,col 85)",
            "(line 1171,col 9)-(line 1171,col 93)",
            "(line 1172,col 9)-(line 1172,col 90)",
            "(line 1173,col 9)-(line 1173,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testIsNumber()",
        "snippet": "    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n\n    }\n",
        "begin_line": 1180,
        "end_line": 1314,
        "comment": "\n     * Tests isNumber(String) and tests that createNumber(String) returns\n     * a valid number iff isNumber(String) returns false.\n     ",
        "child_ranges": [
            "(line 1181,col 9)-(line 1181,col 29)",
            "(line 1182,col 9)-(line 1182,col 75)",
            "(line 1183,col 9)-(line 1183,col 93)",
            "(line 1184,col 9)-(line 1184,col 23)",
            "(line 1185,col 9)-(line 1185,col 75)",
            "(line 1186,col 9)-(line 1186,col 93)",
            "(line 1187,col 9)-(line 1187,col 23)",
            "(line 1188,col 9)-(line 1188,col 75)",
            "(line 1189,col 9)-(line 1189,col 93)",
            "(line 1190,col 9)-(line 1190,col 23)",
            "(line 1191,col 9)-(line 1191,col 75)",
            "(line 1192,col 9)-(line 1192,col 93)",
            "(line 1193,col 9)-(line 1193,col 24)",
            "(line 1194,col 9)-(line 1194,col 75)",
            "(line 1195,col 9)-(line 1195,col 93)",
            "(line 1196,col 9)-(line 1196,col 24)",
            "(line 1197,col 9)-(line 1197,col 75)",
            "(line 1198,col 9)-(line 1198,col 93)",
            "(line 1199,col 9)-(line 1199,col 24)",
            "(line 1200,col 9)-(line 1200,col 75)",
            "(line 1201,col 9)-(line 1201,col 93)",
            "(line 1202,col 9)-(line 1202,col 22)",
            "(line 1203,col 9)-(line 1203,col 75)",
            "(line 1204,col 9)-(line 1204,col 93)",
            "(line 1205,col 9)-(line 1205,col 24)",
            "(line 1206,col 9)-(line 1206,col 75)",
            "(line 1207,col 9)-(line 1207,col 93)",
            "(line 1208,col 9)-(line 1208,col 24)",
            "(line 1209,col 9)-(line 1209,col 76)",
            "(line 1210,col 9)-(line 1210,col 94)",
            "(line 1211,col 9)-(line 1211,col 24)",
            "(line 1212,col 9)-(line 1212,col 76)",
            "(line 1213,col 9)-(line 1213,col 94)",
            "(line 1214,col 9)-(line 1214,col 18)",
            "(line 1215,col 9)-(line 1215,col 76)",
            "(line 1216,col 9)-(line 1216,col 94)",
            "(line 1217,col 9)-(line 1217,col 19)",
            "(line 1218,col 9)-(line 1218,col 76)",
            "(line 1219,col 9)-(line 1219,col 94)",
            "(line 1220,col 9)-(line 1220,col 22)",
            "(line 1221,col 9)-(line 1221,col 76)",
            "(line 1222,col 9)-(line 1222,col 94)",
            "(line 1223,col 9)-(line 1223,col 23)",
            "(line 1224,col 9)-(line 1224,col 76)",
            "(line 1225,col 9)-(line 1225,col 94)",
            "(line 1226,col 9)-(line 1226,col 25)",
            "(line 1227,col 9)-(line 1227,col 76)",
            "(line 1228,col 9)-(line 1228,col 94)",
            "(line 1229,col 9)-(line 1229,col 20)",
            "(line 1230,col 9)-(line 1230,col 76)",
            "(line 1231,col 9)-(line 1231,col 94)",
            "(line 1232,col 9)-(line 1232,col 26)",
            "(line 1233,col 9)-(line 1233,col 76)",
            "(line 1234,col 9)-(line 1234,col 94)",
            "(line 1235,col 9)-(line 1235,col 25)",
            "(line 1236,col 9)-(line 1236,col 76)",
            "(line 1237,col 9)-(line 1237,col 94)",
            "(line 1238,col 9)-(line 1238,col 23)",
            "(line 1239,col 9)-(line 1239,col 76)",
            "(line 1240,col 9)-(line 1240,col 94)",
            "(line 1241,col 9)-(line 1241,col 19)",
            "(line 1242,col 9)-(line 1242,col 80)",
            "(line 1243,col 9)-(line 1243,col 98)",
            "(line 1244,col 9)-(line 1244,col 17)",
            "(line 1245,col 9)-(line 1245,col 80)",
            "(line 1246,col 9)-(line 1246,col 98)",
            "(line 1247,col 9)-(line 1247,col 22)",
            "(line 1248,col 9)-(line 1248,col 80)",
            "(line 1249,col 9)-(line 1249,col 98)",
            "(line 1250,col 9)-(line 1250,col 22)",
            "(line 1251,col 9)-(line 1251,col 80)",
            "(line 1252,col 9)-(line 1252,col 98)",
            "(line 1253,col 9)-(line 1253,col 22)",
            "(line 1254,col 9)-(line 1254,col 80)",
            "(line 1255,col 9)-(line 1255,col 98)",
            "(line 1256,col 9)-(line 1256,col 27)",
            "(line 1257,col 9)-(line 1257,col 80)",
            "(line 1258,col 9)-(line 1258,col 98)",
            "(line 1259,col 9)-(line 1259,col 26)",
            "(line 1260,col 9)-(line 1260,col 80)",
            "(line 1261,col 9)-(line 1261,col 98)",
            "(line 1262,col 9)-(line 1262,col 21)",
            "(line 1263,col 9)-(line 1263,col 80)",
            "(line 1264,col 9)-(line 1264,col 98)",
            "(line 1265,col 9)-(line 1265,col 24)",
            "(line 1266,col 9)-(line 1266,col 80)",
            "(line 1267,col 9)-(line 1267,col 98)",
            "(line 1268,col 9)-(line 1268,col 18)",
            "(line 1269,col 9)-(line 1269,col 81)",
            "(line 1270,col 9)-(line 1270,col 99)",
            "(line 1271,col 9)-(line 1271,col 25)",
            "(line 1272,col 9)-(line 1272,col 81)",
            "(line 1273,col 9)-(line 1273,col 99)",
            "(line 1274,col 9)-(line 1274,col 25)",
            "(line 1275,col 9)-(line 1275,col 81)",
            "(line 1276,col 9)-(line 1276,col 99)",
            "(line 1277,col 9)-(line 1277,col 24)",
            "(line 1278,col 9)-(line 1278,col 81)",
            "(line 1279,col 9)-(line 1279,col 99)",
            "(line 1280,col 9)-(line 1280,col 24)",
            "(line 1281,col 9)-(line 1281,col 81)",
            "(line 1282,col 9)-(line 1282,col 99)",
            "(line 1283,col 9)-(line 1283,col 20)",
            "(line 1284,col 9)-(line 1284,col 81)",
            "(line 1285,col 9)-(line 1285,col 99)",
            "(line 1286,col 9)-(line 1286,col 19)",
            "(line 1287,col 9)-(line 1287,col 81)",
            "(line 1288,col 9)-(line 1288,col 99)",
            "(line 1289,col 9)-(line 1289,col 18)",
            "(line 1290,col 9)-(line 1290,col 81)",
            "(line 1291,col 9)-(line 1291,col 99)",
            "(line 1292,col 9)-(line 1292,col 20)",
            "(line 1293,col 9)-(line 1293,col 81)",
            "(line 1294,col 9)-(line 1294,col 99)",
            "(line 1295,col 9)-(line 1295,col 20)",
            "(line 1296,col 9)-(line 1296,col 81)",
            "(line 1297,col 9)-(line 1297,col 99)",
            "(line 1298,col 9)-(line 1298,col 22)",
            "(line 1299,col 9)-(line 1299,col 81)",
            "(line 1300,col 9)-(line 1300,col 99)",
            "(line 1301,col 9)-(line 1301,col 22)",
            "(line 1302,col 9)-(line 1302,col 81)",
            "(line 1303,col 9)-(line 1303,col 99)",
            "(line 1304,col 9)-(line 1304,col 22)",
            "(line 1305,col 9)-(line 1305,col 81)",
            "(line 1306,col 9)-(line 1306,col 99)",
            "(line 1307,col 9)-(line 1307,col 22)",
            "(line 1308,col 9)-(line 1308,col 81)",
            "(line 1309,col 9)-(line 1309,col 99)",
            "(line 1310,col 9)-(line 1310,col 22)",
            "(line 1311,col 9)-(line 1311,col 81)",
            "(line 1312,col 9)-(line 1312,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.checkCreateNumber(java.lang.String)",
        "snippet": "    private boolean checkCreateNumber(String val) {\n        try {\n            Object obj = NumberUtils.createNumber(val);\n            if (obj == null) {\n                return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n       }\n    }\n",
        "begin_line": 1316,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 9)-(line 1325,col 8)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testConstants()",
        "snippet": "    public void testConstants() {\n        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n        \n        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n    }\n",
        "begin_line": 1328,
        "end_line": 1366,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 9)-(line 1329,col 58)",
            "(line 1330,col 9)-(line 1330,col 57)",
            "(line 1331,col 9)-(line 1331,col 63)",
            "(line 1332,col 9)-(line 1332,col 64)",
            "(line 1333,col 9)-(line 1333,col 63)",
            "(line 1334,col 9)-(line 1334,col 69)",
            "(line 1335,col 9)-(line 1335,col 60)",
            "(line 1336,col 9)-(line 1336,col 59)",
            "(line 1337,col 9)-(line 1337,col 65)",
            "(line 1338,col 9)-(line 1338,col 58)",
            "(line 1339,col 9)-(line 1339,col 57)",
            "(line 1340,col 9)-(line 1340,col 63)",
            "(line 1341,col 9)-(line 1341,col 62)",
            "(line 1342,col 9)-(line 1342,col 61)",
            "(line 1343,col 9)-(line 1343,col 67)",
            "(line 1344,col 9)-(line 1344,col 60)",
            "(line 1345,col 9)-(line 1345,col 59)",
            "(line 1346,col 9)-(line 1346,col 65)",
            "(line 1348,col 9)-(line 1348,col 59)",
            "(line 1349,col 9)-(line 1349,col 58)",
            "(line 1350,col 9)-(line 1350,col 65)",
            "(line 1351,col 9)-(line 1351,col 61)",
            "(line 1352,col 9)-(line 1352,col 60)",
            "(line 1353,col 9)-(line 1353,col 67)",
            "(line 1354,col 9)-(line 1354,col 61)",
            "(line 1355,col 9)-(line 1355,col 60)",
            "(line 1356,col 9)-(line 1356,col 67)",
            "(line 1357,col 9)-(line 1357,col 59)",
            "(line 1358,col 9)-(line 1358,col 58)",
            "(line 1359,col 9)-(line 1359,col 65)",
            "(line 1360,col 9)-(line 1360,col 66)",
            "(line 1361,col 9)-(line 1361,col 65)",
            "(line 1362,col 9)-(line 1362,col 72)",
            "(line 1363,col 9)-(line 1363,col 64)",
            "(line 1364,col 9)-(line 1364,col 63)",
            "(line 1365,col 9)-(line 1365,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.math.NumberUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/math/NumberUtilsTest.java",
        "signature": "org.apache.commons.lang.math.NumberUtilsTest.testLang300()",
        "snippet": "    public void testLang300() {\n        NumberUtils.createNumber(\"-1l\");\n        NumberUtils.createNumber(\"01l\");\n        NumberUtils.createNumber(\"1l\");\n    }\n",
        "begin_line": 1368,
        "end_line": 1372,
        "comment": "",
        "child_ranges": [
            "(line 1369,col 9)-(line 1369,col 40)",
            "(line 1370,col 9)-(line 1370,col 40)",
            "(line 1371,col 9)-(line 1371,col 39)"
        ]
    }
]