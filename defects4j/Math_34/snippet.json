[
    {
        "name": "ListPopulation.addChromosomes#107",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/ListPopulation.java",
        "class_name": "org.apache.commons.math3.genetics.ListPopulation",
        "signature": "org.apache.commons.math3.genetics.ListPopulation.addChromosomes(java.util.Collection<org.apache.commons.math3.genetics.Chromosome>)",
        "snippet": "    public void addChromosomes(final Collection<Chromosome> chromosomeColl) {\n        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {\n            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n                                                chromosomes.size(), populationLimit, false);\n        }\n        this.chromosomes.addAll(chromosomeColl);\n    }\n",
        "begin_line": 107,
        "end_line": 113,
        "comment": "\n     * Add a {@link Collection} of chromosomes to this {@link Population}.\n     * @param chromosomeColl a {@link Collection} of chromosomes\n     * @throws NumberIsTooLargeException if the population would exceed the population limit when\n     * adding this chromosome\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ListPopulation.iterator#208",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/ListPopulation.java",
        "class_name": "org.apache.commons.math3.genetics.ListPopulation",
        "signature": "org.apache.commons.math3.genetics.ListPopulation.iterator()",
        "snippet": "    public Iterator<Chromosome> iterator() {\n        return chromosomes.iterator();\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n     * Returns an iterator over the unmodifiable list of chromosomes.\n     * <p>Any call to {@link Iterator#remove()} will result in a {@link UnsupportedOperationException}.</p>\n     *\n     * @return chromosome iterator\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "BinaryChromosome.BinaryChromosome#38",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java",
        "class_name": "org.apache.commons.math3.genetics.BinaryChromosome",
        "signature": "org.apache.commons.math3.genetics.BinaryChromosome.BinaryChromosome(java.util.List<java.lang.Integer>)",
        "snippet": "    public BinaryChromosome(List<Integer> representation) {\n        super(representation);\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\n     * Constructor.\n     * @param representation list of {0,1} values representing the chromosome\n     * @throws InvalidRepresentationException iff the <code>representation</code> can not represent\n     *         a valid chromosome\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "BinaryChromosome.checkValidity#55",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java",
        "class_name": "org.apache.commons.math3.genetics.BinaryChromosome",
        "signature": "org.apache.commons.math3.genetics.BinaryChromosome.checkValidity(java.util.List<java.lang.Integer>)",
        "snippet": "    @Override\n    protected void checkValidity(List<Integer> chromosomeRepresentation)\n        throws InvalidRepresentationException {\n        for (int i : chromosomeRepresentation) {\n            if (i < 0 || i >1) {\n                throw new InvalidRepresentationException(LocalizedFormats.INVALID_BINARY_DIGIT,\n                                                         i);\n            }\n        }\n    }\n",
        "begin_line": 55,
        "end_line": 64,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.genetics.AbstractListChromosome": null,
            "org.apache.commons.math3.genetics.Chromosome": null,
            "org.apache.commons.math3.genetics.Fitness": null,
            "java.lang.Comparable": null
        },
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "BinaryChromosome.randomBinaryRepresentation#71",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java",
        "class_name": "org.apache.commons.math3.genetics.BinaryChromosome",
        "signature": "org.apache.commons.math3.genetics.BinaryChromosome.randomBinaryRepresentation(int)",
        "snippet": "    public static List<Integer> randomBinaryRepresentation(int length) {\n        // random binary list\n        List<Integer> rList= new ArrayList<Integer> (length);\n        for (int j=0; j<length; j++) {\n            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));\n        }\n        return rList;\n    }\n",
        "begin_line": 71,
        "end_line": 78,
        "comment": "\n     * Returns a representation of a random binary array of length <code>length</code>.\n     * @param length length of the array\n     * @return a random binary array of length <code>length</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractListChromosome.AbstractListChromosome#42",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java",
        "class_name": "org.apache.commons.math3.genetics.AbstractListChromosome",
        "signature": "org.apache.commons.math3.genetics.AbstractListChromosome.AbstractListChromosome(java.util.List<T>)",
        "snippet": "    public AbstractListChromosome(final List<T> representation) {\n        checkValidity(representation);\n        this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));\n    }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n     * Constructor.\n     * @param representation inner representation of the chromosome\n     * @throws InvalidRepresentationException iff the <code>representation</code> can not represent\n     *         a valid chromosome\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "GeneticAlgorithm.getRandomGenerator#103",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/GeneticAlgorithm.java",
        "class_name": "org.apache.commons.math3.genetics.GeneticAlgorithm",
        "signature": "org.apache.commons.math3.genetics.GeneticAlgorithm.getRandomGenerator()",
        "snippet": "    public static synchronized RandomGenerator getRandomGenerator() {\n        return randomGenerator;\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n     * Returns the (static) random generator.\n     *\n     * @return the static random generator shared by GA implementation classes\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ListPopulation.ListPopulation#51",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/ListPopulation.java",
        "class_name": "org.apache.commons.math3.genetics.ListPopulation",
        "signature": "org.apache.commons.math3.genetics.ListPopulation.ListPopulation(int)",
        "snippet": "    public ListPopulation(final int populationLimit) {\n        this(Collections.<Chromosome> emptyList(), populationLimit);\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Creates a new ListPopulation instance and initializes its inner chromosome list.\n     *\n     * @param populationLimit maximal size of the population\n     * @throws NotPositiveException if the population limit is not a positive number (&lt; 1)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "ListPopulation.ListPopulation#64",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/genetics/ListPopulation.java",
        "class_name": "org.apache.commons.math3.genetics.ListPopulation",
        "signature": "org.apache.commons.math3.genetics.ListPopulation.ListPopulation(java.util.List<org.apache.commons.math3.genetics.Chromosome>, int)",
        "snippet": "    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {\n        if (chromosomes == null) {\n            throw new NullArgumentException();\n        }\n        if (populationLimit <= 0) {\n            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);\n        }\n        if (chromosomes.size() > populationLimit) {\n            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,\n                                                chromosomes.size(), populationLimit, false);\n        }\n        this.populationLimit = populationLimit;\n        this.chromosomes = new ArrayList<Chromosome>(populationLimit);\n        this.chromosomes.addAll(chromosomes);\n    }\n",
        "begin_line": 64,
        "end_line": 78,
        "comment": "\n     * Creates a new ListPopulation instance.\n     * <p>Note: the chromosomes of the specified list are added to the population.</p>\n     * @param chromosomes list of chromosomes to be added to the population\n     * @param populationLimit maximal size of the population\n     * @throws NullArgumentException if the list of chromosomes is {@code null}\n     * @throws NotPositiveException if the population limit is not a positive number (&lt; 1)\n     * @throws NumberIsTooLargeException if the list of chromosomes exceeds the population limit\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    }
]