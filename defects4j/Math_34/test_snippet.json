[
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testGetFittestChromosome()",
        "snippet": "    @Test\n    public void testGetFittestChromosome() {\n        Chromosome c1 = new Chromosome() {\n            public double fitness() {\n                return 0;\n            }\n        };\n        Chromosome c2 = new Chromosome() {\n            public double fitness() {\n                return 10;\n            }\n        };\n        Chromosome c3 = new Chromosome() {\n            public double fitness() {\n                return 15;\n            }\n        };\n\n        ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n        chromosomes.add(c1);\n        chromosomes.add(c2);\n        chromosomes.add(c3);\n\n        ListPopulation population = new ListPopulation(chromosomes, 10) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n\n        Assert.assertEquals(c3, population.getFittestChromosome());\n    }\n",
        "begin_line": 31,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 37,col 10)",
            "(line 38,col 9)-(line 42,col 10)",
            "(line 43,col 9)-(line 47,col 10)",
            "(line 49,col 9)-(line 49,col 73)",
            "(line 50,col 9)-(line 50,col 28)",
            "(line 51,col 9)-(line 51,col 28)",
            "(line 52,col 9)-(line 52,col 28)",
            "(line 54,col 9)-(line 59,col 10)",
            "(line 61,col 9)-(line 61,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-9cdaa1d4-ef0c-4275-866e-ab926cda3c7e.fitness()",
        "snippet": "            public double fitness() {\n                return 0;\n            }\n",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 17)-(line 35,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-5687755b-1706-42d8-95fe-da7207c56c4a.fitness()",
        "snippet": "            public double fitness() {\n                return 10;\n            }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 17)-(line 40,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-de919757-b33b-4a29-b7df-1f7f18f5fb3e.fitness()",
        "snippet": "            public double fitness() {\n                return 15;\n            }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 17)-(line 45,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-83808364-7668-4d19-9a9e-27fe8af3d399.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 17)-(line 57,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testChromosomes()",
        "snippet": "    @Test\n    public void testChromosomes() {\n        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));        \n\n        final ListPopulation population = new ListPopulation(10) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n        \n        population.addChromosomes(chromosomes);\n\n        Assert.assertEquals(chromosomes, population.getChromosomes());\n        Assert.assertEquals(chromosomes.toString(), population.toString());\n        \n        population.setPopulationLimit(50);\n        Assert.assertEquals(50, population.getPopulationLimit());\n    }\n",
        "begin_line": 64,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 79)",
            "(line 67,col 9)-(line 67,col 99)",
            "(line 68,col 9)-(line 68,col 99)",
            "(line 69,col 9)-(line 69,col 99)",
            "(line 71,col 9)-(line 76,col 10)",
            "(line 78,col 9)-(line 78,col 47)",
            "(line 80,col 9)-(line 80,col 70)",
            "(line 81,col 9)-(line 81,col 75)",
            "(line 83,col 9)-(line 83,col 42)",
            "(line 84,col 9)-(line 84,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-5d94d345-411f-42f0-b0d1-df18dcfdd4eb.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 17)-(line 74,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testSetPopulationLimit()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testSetPopulationLimit() {\n        final ListPopulation population = new ListPopulation(10) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n        \n        population.setPopulationLimit(-50);\n    }\n",
        "begin_line": 87,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 94,col 10)",
            "(line 96,col 9)-(line 96,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-59502324-ffdc-4bf0-983d-a6c4a7d47b70.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 17)-(line 92,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testConstructorPopulationLimitNotPositive()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testConstructorPopulationLimitNotPositive() {\n        new ListPopulation(-10) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n    }\n",
        "begin_line": 99,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 106,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-2b4a9d82-4194-48a3-bd8a-f8fdc77b6609.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 104,col 17)-(line 104,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testChromosomeListConstructorPopulationLimitNotPositive()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testChromosomeListConstructorPopulationLimitNotPositive() {\n        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        new ListPopulation(chromosomes, -10) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n    }\n",
        "begin_line": 109,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 79)",
            "(line 112,col 9)-(line 112,col 99)",
            "(line 113,col 9)-(line 118,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-dc68f706-68e9-4927-be8b-ea61b5cf3921.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 116,col 17)-(line 116,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testConstructorListOfChromosomesBiggerThanPopulationSize()",
        "snippet": "    @Test(expected = NumberIsTooLargeException.class)\n    public void testConstructorListOfChromosomesBiggerThanPopulationSize() {\n        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));        \n        new ListPopulation(chromosomes, 1) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n    }\n",
        "begin_line": 121,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 79)",
            "(line 124,col 9)-(line 124,col 99)",
            "(line 125,col 9)-(line 125,col 99)",
            "(line 126,col 9)-(line 126,col 99)",
            "(line 127,col 9)-(line 132,col 10)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-c0af115f-1b0f-43b9-9811-121ec3e0664b.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 130,col 17)-(line 130,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testAddTooManyChromosomes()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testAddTooManyChromosomes() {\n        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n\n        final ListPopulation population = new ListPopulation(2) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n        \n        population.addChromosomes(chromosomes);\n    }\n",
        "begin_line": 135,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 79)",
            "(line 138,col 9)-(line 138,col 99)",
            "(line 139,col 9)-(line 139,col 99)",
            "(line 140,col 9)-(line 140,col 99)",
            "(line 142,col 9)-(line 147,col 10)",
            "(line 149,col 9)-(line 149,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-ddac51cc-b7be-4827-8fc9-bbc4ef828565.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 17)-(line 145,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testAddTooManyChromosomesSingleCall()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testAddTooManyChromosomesSingleCall() {\n\n        final ListPopulation population = new ListPopulation(2) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n\n        for (int i = 0; i <= population.getPopulationLimit(); i++) {\n            population.addChromosome(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        }\n    }\n",
        "begin_line": 152,
        "end_line": 165,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 160,col 10)",
            "(line 162,col 9)-(line 164,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-9f8cfe5d-702f-4428-afa7-eb6f52541f41.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 17)-(line 158,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testIterator()",
        "snippet": "    @Test(expected = UnsupportedOperationException.class)\n    public void testIterator() {\n        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>();\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n\n        final ListPopulation population = new ListPopulation(10) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n\n        population.addChromosomes(chromosomes);\n\n        final Iterator<Chromosome> iter = population.iterator();\n        while (iter.hasNext()) {\n            iter.next();\n            iter.remove();\n        }\n    }\n",
        "begin_line": 167,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 78)",
            "(line 170,col 9)-(line 170,col 99)",
            "(line 171,col 9)-(line 171,col 99)",
            "(line 172,col 9)-(line 172,col 99)",
            "(line 174,col 9)-(line 179,col 10)",
            "(line 181,col 9)-(line 181,col 47)",
            "(line 183,col 9)-(line 183,col 64)",
            "(line 184,col 9)-(line 187,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-06f88e73-1535-41d2-b791-19ce35306f97.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 177,col 17)-(line 177,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.testSetPopulationLimitTooSmall()",
        "snippet": "    @Test(expected=NumberIsTooSmallException.class)\n    public void testSetPopulationLimitTooSmall() {\n        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));\n\n        final ListPopulation population = new ListPopulation(chromosomes, 3) {\n            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n        };\n\n        population.setPopulationLimit(2);\n    }\n",
        "begin_line": 190,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 79)",
            "(line 193,col 9)-(line 193,col 99)",
            "(line 194,col 9)-(line 194,col 99)",
            "(line 195,col 9)-(line 195,col 99)",
            "(line 197,col 9)-(line 202,col 10)",
            "(line 204,col 9)-(line 204,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ListPopulationTest.Anonymous-23862080-bc34-4fe8-8f6f-d2a840b475d6.nextGeneration()",
        "snippet": "            public Population nextGeneration() {\n                // not important\n                return null;\n            }\n",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 200,col 17)-(line 200,col 28)"
        ]
    }
]