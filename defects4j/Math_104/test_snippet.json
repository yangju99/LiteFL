[
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.GammaTest(java.lang.String)",
        "snippet": "    public GammaTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "\n     * Constructor for BetaTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGamma(double, double, double)",
        "snippet": "    private void testRegularizedGamma(double expected, double a, double x) {\n        try {\n            double actualP = Gamma.regularizedGammaP(a, x);\n            double actualQ = Gamma.regularizedGammaQ(a, x);\n            TestUtils.assertEquals(expected, actualP, 10e-15);\n            TestUtils.assertEquals(actualP, 1.0 - actualQ, 10e-15);\n        } catch(MathException ex){\n            fail(ex.getMessage());\n        }\n    }\n",
        "begin_line": 36,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 44,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testLogGamma(double, double)",
        "snippet": "    private void testLogGamma(double expected, double x) {\n        double actual = Gamma.logGamma(x);\n        TestUtils.assertEquals(expected, actual, 10e-15);\n    }\n",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 42)",
            "(line 49,col 9)-(line 49,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGammaNanPositive()",
        "snippet": "    public void testRegularizedGammaNanPositive() {\n        testRegularizedGamma(Double.NaN, Double.NaN, 1.0);\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNan()",
        "snippet": "    public void testRegularizedGammaPositiveNan() {\n        testRegularizedGamma(Double.NaN, 1.0, Double.NaN);\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGammaNegativePositive()",
        "snippet": "    public void testRegularizedGammaNegativePositive() {\n        testRegularizedGamma(Double.NaN, -1.5, 1.0);\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveNegative()",
        "snippet": "    public void testRegularizedGammaPositiveNegative() {\n        testRegularizedGamma(Double.NaN, 1.0, -1.0);\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGammaZeroPositive()",
        "snippet": "    public void testRegularizedGammaZeroPositive() {\n        testRegularizedGamma(Double.NaN, 0.0, 1.0);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 69,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositiveZero()",
        "snippet": "    public void testRegularizedGammaPositiveZero() {\n        testRegularizedGamma(0.0, 1.0, 0.0);\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive()",
        "snippet": "    public void testRegularizedGammaPositivePositive() {\n        testRegularizedGamma(0.632120558828558, 1.0, 1.0);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testLogGammaNan()",
        "snippet": "    public void testLogGammaNan() {\n        testLogGamma(Double.NaN, Double.NaN);\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testLogGammaNegative()",
        "snippet": "    public void testLogGammaNegative() {\n        testLogGamma(Double.NaN, -1.0);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testLogGammaZero()",
        "snippet": "    public void testLogGammaZero() {\n        testLogGamma(Double.NaN, 0.0);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.special.GammaTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/special/GammaTest.java",
        "signature": "org.apache.commons.math.special.GammaTest.testLogGammaPositive()",
        "snippet": "    public void testLogGammaPositive() {\n        testLogGamma(0.6931471805599457, 3.0);\n    }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 46)"
        ]
    }
]