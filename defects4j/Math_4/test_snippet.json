[
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testEndPoints()",
        "snippet": "    @Test\n    public void testEndPoints() throws MathIllegalArgumentException {\n        Vector3D p1 = new Vector3D(-1, -7, 2);\n        Vector3D p2 = new Vector3D(7, -1, 0);\n        Segment segment = new Segment(p1, p2, new Line(p1, p2));\n        SubLine sub = new SubLine(segment);\n        List<Segment> segments = sub.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertEquals(0.0, new Vector3D(-1, -7, 2).distance(segments.get(0).getStart()), 1.0e-10);\n        Assert.assertEquals(0.0, new Vector3D( 7, -1, 0).distance(segments.get(0).getEnd()), 1.0e-10);\n    }\n",
        "begin_line": 30,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 46)",
            "(line 33,col 9)-(line 33,col 45)",
            "(line 34,col 9)-(line 34,col 64)",
            "(line 35,col 9)-(line 35,col 43)",
            "(line 36,col 9)-(line 36,col 51)",
            "(line 37,col 9)-(line 37,col 48)",
            "(line 38,col 9)-(line 38,col 104)",
            "(line 39,col 9)-(line 39,col 102)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testNoEndPoints()",
        "snippet": "    @Test\n    public void testNoEndPoints() throws MathIllegalArgumentException {\n        SubLine wholeLine = new Line(new Vector3D(-1, 7, 2), new Vector3D(7, 1, 0)).wholeLine();\n        List<Segment> segments = wholeLine.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&\n                          segments.get(0).getStart().getX() < 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&\n                          segments.get(0).getStart().getY() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ()) &&\n                          segments.get(0).getStart().getZ() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&\n                          segments.get(0).getEnd().getX() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&\n                          segments.get(0).getEnd().getY() < 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ()) &&\n                          segments.get(0).getEnd().getZ() < 0);\n    }\n",
        "begin_line": 42,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 44,col 9)-(line 44,col 96)",
            "(line 45,col 9)-(line 45,col 57)",
            "(line 46,col 9)-(line 46,col 48)",
            "(line 47,col 9)-(line 48,col 65)",
            "(line 49,col 9)-(line 50,col 65)",
            "(line 51,col 9)-(line 52,col 65)",
            "(line 53,col 9)-(line 54,col 63)",
            "(line 55,col 9)-(line 56,col 63)",
            "(line 57,col 9)-(line 58,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testNoSegments()",
        "snippet": "    @Test\n    public void testNoSegments() throws MathIllegalArgumentException {\n        SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, 0)),\n                                    (IntervalsSet) new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet()));\n        List<Segment> segments = empty.getSegments();\n        Assert.assertEquals(0, segments.size());\n    }\n",
        "begin_line": 61,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 64,col 119)",
            "(line 65,col 9)-(line 65,col 53)",
            "(line 66,col 9)-(line 66,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testSeveralSegments()",
        "snippet": "    @Test\n    public void testSeveralSegments() throws MathIllegalArgumentException {\n        SubLine twoSubs = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, 0)),\n                                      (IntervalsSet) new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2),\n                                                                                            new IntervalsSet(3, 4)));\n        List<Segment> segments = twoSubs.getSegments();\n        Assert.assertEquals(2, segments.size());\n    }\n",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 73,col 117)",
            "(line 74,col 9)-(line 74,col 55)",
            "(line 75,col 9)-(line 75,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testHalfInfiniteNeg()",
        "snippet": "    @Test\n    public void testHalfInfiniteNeg() throws MathIllegalArgumentException {\n        SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, -2)),\n                                    new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0));\n        List<Segment> segments = empty.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&\n                          segments.get(0).getStart().getX() < 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&\n                          segments.get(0).getStart().getY() < 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ()) &&\n                          segments.get(0).getStart().getZ() > 0);\n        Assert.assertEquals(0.0, new Vector3D(3, -4, 0).distance(segments.get(0).getEnd()), 1.0e-10);\n    }\n",
        "begin_line": 78,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 81,col 85)",
            "(line 82,col 9)-(line 82,col 53)",
            "(line 83,col 9)-(line 83,col 48)",
            "(line 84,col 9)-(line 85,col 65)",
            "(line 86,col 9)-(line 87,col 65)",
            "(line 88,col 9)-(line 89,col 65)",
            "(line 90,col 9)-(line 90,col 101)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testHalfInfinitePos()",
        "snippet": "    @Test\n    public void testHalfInfinitePos() throws MathIllegalArgumentException {\n        SubLine empty = new SubLine(new Line(new Vector3D(-1, -7, 2), new Vector3D(7, -1, -2)),\n                                    new IntervalsSet(0.0, Double.POSITIVE_INFINITY));\n        List<Segment> segments = empty.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertEquals(0.0, new Vector3D(3, -4, 0).distance(segments.get(0).getStart()), 1.0e-10);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&\n                          segments.get(0).getEnd().getX() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&\n                          segments.get(0).getEnd().getY() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ()) &&\n                          segments.get(0).getEnd().getZ() < 0);\n    }\n",
        "begin_line": 93,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 96,col 85)",
            "(line 97,col 9)-(line 97,col 53)",
            "(line 98,col 9)-(line 98,col 48)",
            "(line 99,col 9)-(line 99,col 103)",
            "(line 100,col 9)-(line 101,col 63)",
            "(line 102,col 9)-(line 103,col 63)",
            "(line 104,col 9)-(line 105,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionInsideInside()",
        "snippet": "    @Test\n    public void testIntersectionInsideInside() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 2, 2));\n        Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);\n        Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, false)), 1.0e-12);\n    }\n",
        "begin_line": 108,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 81)",
            "(line 111,col 9)-(line 111,col 81)",
            "(line 112,col 9)-(line 112,col 106)",
            "(line 113,col 9)-(line 113,col 106)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionInsideBoundary()",
        "snippet": "    @Test\n    public void testIntersectionInsideBoundary() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 1, 1));\n        Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 116,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 81)",
            "(line 119,col 9)-(line 119,col 81)",
            "(line 120,col 9)-(line 120,col 106)",
            "(line 121,col 9)-(line 121,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionInsideOutside()",
        "snippet": "    @Test\n    public void testIntersectionInsideOutside() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(3, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 81)",
            "(line 127,col 9)-(line 127,col 85)",
            "(line 128,col 9)-(line 128,col 57)",
            "(line 129,col 9)-(line 129,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionBoundaryBoundary()",
        "snippet": "    @Test\n    public void testIntersectionBoundaryBoundary() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(2, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 1, 1));\n        Assert.assertEquals(0.0, new Vector3D(2, 1, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 132,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 81)",
            "(line 135,col 9)-(line 135,col 81)",
            "(line 136,col 9)-(line 136,col 106)",
            "(line 137,col 9)-(line 137,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionBoundaryOutside()",
        "snippet": "    @Test\n    public void testIntersectionBoundaryOutside() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(2, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 81)",
            "(line 143,col 9)-(line 143,col 85)",
            "(line 144,col 9)-(line 144,col 57)",
            "(line 145,col 9)-(line 145,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionOutsideOutside()",
        "snippet": "    @Test\n    public void testIntersectionOutsideOutside() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 0, 0), new Vector3D(2, 0.5, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 148,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 83)",
            "(line 151,col 9)-(line 151,col 85)",
            "(line 152,col 9)-(line 152,col 57)",
            "(line 153,col 9)-(line 153,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting()",
        "snippet": "    @Test\n    public void testIntersectionNotIntersecting() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 156,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 83)",
            "(line 159,col 9)-(line 159,col 83)",
            "(line 160,col 9)-(line 160,col 57)",
            "(line 161,col 9)-(line 161,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testEndPoints()",
        "snippet": "    @Test\n    public void testEndPoints() {\n        Vector2D p1 = new Vector2D(-1, -7);\n        Vector2D p2 = new Vector2D(7, -1);\n        Segment segment = new Segment(p1, p2, new Line(p1, p2));\n        SubLine sub = new SubLine(segment);\n        List<Segment> segments = sub.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertEquals(0.0, new Vector2D(-1, -7).distance(segments.get(0).getStart()), 1.0e-10);\n        Assert.assertEquals(0.0, new Vector2D( 7, -1).distance(segments.get(0).getEnd()), 1.0e-10);\n    }\n",
        "begin_line": 29,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 31,col 9)-(line 31,col 43)",
            "(line 32,col 9)-(line 32,col 42)",
            "(line 33,col 9)-(line 33,col 64)",
            "(line 34,col 9)-(line 34,col 43)",
            "(line 35,col 9)-(line 35,col 51)",
            "(line 36,col 9)-(line 36,col 48)",
            "(line 37,col 9)-(line 37,col 101)",
            "(line 38,col 9)-(line 38,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testNoEndPoints()",
        "snippet": "    @Test\n    public void testNoEndPoints() {\n        SubLine wholeLine = new Line(new Vector2D(-1, 7), new Vector2D(7, 1)).wholeHyperplane();\n        List<Segment> segments = wholeLine.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&\n                          segments.get(0).getStart().getX() < 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&\n                          segments.get(0).getStart().getY() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&\n                          segments.get(0).getEnd().getX() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&\n                          segments.get(0).getEnd().getY() < 0);\n    }\n",
        "begin_line": 41,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 96)",
            "(line 44,col 9)-(line 44,col 57)",
            "(line 45,col 9)-(line 45,col 48)",
            "(line 46,col 9)-(line 47,col 65)",
            "(line 48,col 9)-(line 49,col 65)",
            "(line 50,col 9)-(line 51,col 63)",
            "(line 52,col 9)-(line 53,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testNoSegments()",
        "snippet": "    @Test\n    public void testNoSegments() {\n        SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n                                    new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet()));\n        List<Segment> segments = empty.getSegments();\n        Assert.assertEquals(0, segments.size());\n    }\n",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 59,col 104)",
            "(line 60,col 9)-(line 60,col 53)",
            "(line 61,col 9)-(line 61,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testSeveralSegments()",
        "snippet": "    @Test\n    public void testSeveralSegments() {\n        SubLine twoSubs = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n                                    new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2),\n                                                                           new IntervalsSet(3, 4)));\n        List<Segment> segments = twoSubs.getSegments();\n        Assert.assertEquals(2, segments.size());\n    }\n",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 68,col 100)",
            "(line 69,col 9)-(line 69,col 55)",
            "(line 70,col 9)-(line 70,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testHalfInfiniteNeg()",
        "snippet": "    @Test\n    public void testHalfInfiniteNeg() {\n        SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n                                    new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0));\n        List<Segment> segments = empty.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) &&\n                          segments.get(0).getStart().getX() < 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) &&\n                          segments.get(0).getStart().getY() < 0);\n        Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getEnd()), 1.0e-10);\n    }\n",
        "begin_line": 73,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 76,col 85)",
            "(line 77,col 9)-(line 77,col 53)",
            "(line 78,col 9)-(line 78,col 48)",
            "(line 79,col 9)-(line 80,col 65)",
            "(line 81,col 9)-(line 82,col 65)",
            "(line 83,col 9)-(line 83,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testHalfInfinitePos()",
        "snippet": "    @Test\n    public void testHalfInfinitePos() {\n        SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),\n                                    new IntervalsSet(0.0, Double.POSITIVE_INFINITY));\n        List<Segment> segments = empty.getSegments();\n        Assert.assertEquals(1, segments.size());\n        Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getStart()), 1.0e-10);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) &&\n                          segments.get(0).getEnd().getX() > 0);\n        Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) &&\n                          segments.get(0).getEnd().getY() > 0);\n    }\n",
        "begin_line": 86,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 88,col 9)-(line 89,col 85)",
            "(line 90,col 9)-(line 90,col 53)",
            "(line 91,col 9)-(line 91,col 48)",
            "(line 92,col 9)-(line 92,col 100)",
            "(line 93,col 9)-(line 94,col 63)",
            "(line 95,col 9)-(line 96,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionInsideInside()",
        "snippet": "    @Test\n    public void testIntersectionInsideInside() {\n        SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1));\n        SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 2));\n        Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);\n        Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, false)), 1.0e-12);\n    }\n",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 75)",
            "(line 102,col 9)-(line 102,col 75)",
            "(line 103,col 9)-(line 103,col 103)",
            "(line 104,col 9)-(line 104,col 103)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionInsideBoundary()",
        "snippet": "    @Test\n    public void testIntersectionInsideBoundary() {\n        SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1));\n        SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1));\n        Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 75)",
            "(line 110,col 9)-(line 110,col 75)",
            "(line 111,col 9)-(line 111,col 103)",
            "(line 112,col 9)-(line 112,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionInsideOutside()",
        "snippet": "    @Test\n    public void testIntersectionInsideOutside() {\n        SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1));\n        SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 75)",
            "(line 118,col 9)-(line 118,col 77)",
            "(line 119,col 9)-(line 119,col 57)",
            "(line 120,col 9)-(line 120,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionBoundaryBoundary()",
        "snippet": "    @Test\n    public void testIntersectionBoundaryBoundary() {\n        SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1));\n        SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1));\n        Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)),  1.0e-12);\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 75)",
            "(line 126,col 9)-(line 126,col 75)",
            "(line 127,col 9)-(line 127,col 103)",
            "(line 128,col 9)-(line 128,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionBoundaryOutside()",
        "snippet": "    @Test\n    public void testIntersectionBoundaryOutside() {\n        SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1));\n        SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 131,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 75)",
            "(line 134,col 9)-(line 134,col 77)",
            "(line 135,col 9)-(line 135,col 57)",
            "(line 136,col 9)-(line 136,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionOutsideOutside()",
        "snippet": "    @Test\n    public void testIntersectionOutsideOutside() {\n        SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(1.5, 1));\n        SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 139,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 77)",
            "(line 142,col 9)-(line 142,col 77)",
            "(line 143,col 9)-(line 143,col 57)",
            "(line 144,col 9)-(line 144,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
        "signature": "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionParallel()",
        "snippet": "    @Test\n    public void testIntersectionParallel() {\n        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\n        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }\n",
        "begin_line": 147,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 81)",
            "(line 150,col 9)-(line 150,col 83)",
            "(line 151,col 9)-(line 151,col 57)",
            "(line 152,col 9)-(line 152,col 58)"
        ]
    }
]