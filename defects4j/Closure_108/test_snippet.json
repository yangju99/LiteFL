[
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.ScopedAliasesTest()",
        "snippet": "  public ScopedAliasesTest() {\n    super(EXTERNS);\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScoped(java.lang.String, java.lang.String)",
        "snippet": "  private void testScoped(String code, String expected) {\n    test(GOOG_SCOPE_START_BLOCK + code + GOOG_SCOPE_END_BLOCK, expected);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedNoChanges(java.lang.String, java.lang.String)",
        "snippet": "  private void testScopedNoChanges(String aliases, String code) {\n    testScoped(aliases + code, code);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testOneLevel()",
        "snippet": "  public void testOneLevel() {\n    testScoped(\"var g = goog;g.dom.createElement(g.dom.TagName.DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 63,col 5)-(line 64,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTwoLevel()",
        "snippet": "  public void testTwoLevel() {\n    testScoped(\"var d = goog.dom;d.createElement(d.TagName.DIV);\",\n               \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 69,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTransitive()",
        "snippet": "  public void testTransitive() {\n    testScoped(\"var d = goog.dom;var DIV = d.TagName.DIV;d.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 73,col 5)-(line 74,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTransitiveInSameVar()",
        "snippet": "  public void testTransitiveInSameVar() {\n    testScoped(\"var d = goog.dom, DIV = d.TagName.DIV;d.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 79,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testMultipleTransitive()",
        "snippet": "  public void testMultipleTransitive() {\n    testScoped(\n        \"var g=goog;var d=g.dom;var t=d.TagName;var DIV=t.DIV;\" +\n            \"d.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 82,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 86,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testFourLevel()",
        "snippet": "  public void testFourLevel() {\n    testScoped(\"var DIV = goog.dom.TagName.DIV;goog.dom.createElement(DIV);\",\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\");\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 91,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testWorksInClosures()",
        "snippet": "  public void testWorksInClosures() {\n    testScoped(\n        \"var DIV = goog.dom.TagName.DIV;\" +\n            \"goog.x = function() {goog.dom.createElement(DIV);};\",\n        \"goog.x = function() {goog.dom.createElement(goog.dom.TagName.DIV);};\");\n  }\n",
        "begin_line": 94,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 98,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testOverridden()",
        "snippet": "  public void testOverridden() {\n    // Test that the alias doesn't get unaliased when it's overridden by a\n    // parameter.\n    testScopedNoChanges(\n        \"var g = goog;\", \"goog.x = function(g) {g.z()};\");\n    // Same for a local.\n    testScopedNoChanges(\n        \"var g = goog;\", \"goog.x = function() {var g = {}; g.z()};\");\n  }\n",
        "begin_line": 101,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 105,col 58)",
            "(line 107,col 5)-(line 108,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTwoScopes()",
        "snippet": "  public void testTwoScopes() {\n    test(\n        \"goog.scope(function() {var g = goog;g.method()});\" +\n        \"goog.scope(function() {g.method();});\",\n        \"goog.method();g.method();\");\n  }\n",
        "begin_line": 111,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 115,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTwoSymbolsInTwoScopes()",
        "snippet": "  public void testTwoSymbolsInTwoScopes() {\n    test(\n        \"var goog = {};\" +\n        \"goog.scope(function() { var g = goog; g.Foo = function() {}; });\" +\n        \"goog.scope(function() { \" +\n        \"  var Foo = goog.Foo; goog.bar = function() { return new Foo(); };\" +\n        \"});\",\n        \"var goog = {};\" +\n        \"goog.Foo = function() {};\" +\n        \"goog.bar = function() { return new goog.Foo(); };\");\n  }\n",
        "begin_line": 118,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 127,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasOfSymbolInGoogScope()",
        "snippet": "  public void testAliasOfSymbolInGoogScope() {\n    test(\n        \"var goog = {};\" +\n        \"goog.scope(function() {\" +\n        \"  var g = goog;\" +\n        \"  g.Foo = function() {};\" +\n        \"  var Foo = g.Foo;\" +\n        \"  Foo.prototype.bar = function() {};\" +\n        \"});\",\n        \"var goog = {}; goog.Foo = function() {};\" +\n        \"goog.Foo.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 130,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 140,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFunctionReturnThis()",
        "snippet": "  public void testScopedFunctionReturnThis() {\n    test(\"goog.scope(function() { \" +\n         \"  var g = goog; g.f = function() { return this; };\" +\n         \"});\",\n         \"goog.f = function() { return this; };\");\n  }\n",
        "begin_line": 143,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 147,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFunctionAssignsToVar()",
        "snippet": "  public void testScopedFunctionAssignsToVar() {\n    test(\"goog.scope(function() { \" +\n         \"  var g = goog; g.f = function(x) { x = 3; return x; };\" +\n         \"});\",\n         \"goog.f = function(x) { x = 3; return x; };\");\n  }\n",
        "begin_line": 150,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 154,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFunctionThrows()",
        "snippet": "  public void testScopedFunctionThrows() {\n    test(\"goog.scope(function() { \" +\n         \"  var g = goog; g.f = function() { throw 'error'; };\" +\n         \"});\",\n         \"goog.f = function() { throw 'error'; };\");\n  }\n",
        "begin_line": 157,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 161,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testPropertiesNotChanged()",
        "snippet": "  public void testPropertiesNotChanged() {\n    testScopedNoChanges(\"var x = goog.dom;\", \"y.x();\");\n  }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testShadowedVar()",
        "snippet": "  public void testShadowedVar() {\n    test(\"var Popup = {};\" +\n         \"var OtherPopup = {};\" +\n         \"goog.scope(function() {\" +\n         \"  var Popup = OtherPopup;\" +\n         \"  Popup.newMethod = function() { return new Popup(); };\" +\n         \"});\",\n         \"var Popup = {};\" +\n         \"var OtherPopup = {};\" +\n         \"OtherPopup.newMethod = function() { return new OtherPopup(); };\");\n  }\n",
        "begin_line": 168,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 177,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testShadowedScopedVar()",
        "snippet": "  public void testShadowedScopedVar() {\n    test(\"var goog = {};\" +\n         \"goog.bar = {};\" +\n         \"goog.scope(function() {\" +\n         \"  var bar = goog.bar;\" +\n         // This is bogus, because when the aliases are expanded, goog will\n         // shadow goog.bar.\n         \"  bar.newMethod = function(goog) { return goog + bar; };\" +\n         \"});\",\n         \"var goog={};\" +\n         \"goog.bar={};\" +\n         \"goog.bar.newMethod=function(goog$$1){return goog$$1 + goog.bar}\");\n  }\n",
        "begin_line": 180,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 191,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testShadowedScopedVarTwoScopes()",
        "snippet": "  public void testShadowedScopedVarTwoScopes() {\n    test(\"var goog = {};\" +\n         \"goog.bar = {};\" +\n         \"goog.scope(function() {\" +\n         \"  var bar = goog.bar;\" +\n         \"  bar.newMethod = function(goog, a) { return bar + a; };\" +\n         \"});\" +\n         \"goog.scope(function() {\" +\n         \"  var bar = goog.bar;\" +\n         \"  bar.newMethod2 = function(goog, b) { return bar + b; };\" +\n         \"});\",\n         \"var goog={};\" +\n         \"goog.bar={};\" +\n         \"goog.bar.newMethod=function(goog$$1, a){return goog.bar + a};\" +\n         \"goog.bar.newMethod2=function(goog$$1, b){return goog.bar + b};\");\n  }\n",
        "begin_line": 194,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 208,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testUsingObjectLiteralToEscapeScoping()",
        "snippet": "  public void testUsingObjectLiteralToEscapeScoping() {\n    // There are many ways to shoot yourself in the foot with goog.scope\n    // and make the compiler generate bad code. We generally don't care.\n    //\n    // We only try to protect against accidental mis-use, not deliberate\n    // mis-use.\n    test(\n        \"var goog = {};\" +\n        \"goog.bar = {};\" +\n        \"goog.scope(function() {\" +\n        \"  var bar = goog.bar;\" +\n        \"  var baz = goog.bar.baz;\" +\n        \"  goog.foo = function() {\" +\n        \"    goog.bar = {baz: 3};\" +\n        \"    return baz;\" +\n        \"  };\" +\n        \"});\",\n        \"var goog = {};\" +\n        \"goog.bar = {};\" +\n        \"goog.foo = function(){\" +\n        \"  goog.bar = {baz:3};\" +\n        \"  return goog.bar.baz;\" +\n        \"};\");\n  }\n",
        "begin_line": 211,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 233,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String aliases, String code) {\n    testScopedNoChanges(aliases, code);\n    verifyTypes();\n  }\n",
        "begin_line": 236,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 39)",
            "(line 238,col 5)-(line 238,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.verifyTypes()",
        "snippet": "  private void verifyTypes() {\n    Compiler lastCompiler = getLastCompiler();\n    new TypeVerifyingPass(lastCompiler).process(lastCompiler.externsRoot,\n        lastCompiler.jsRoot);\n  }\n",
        "begin_line": 241,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 242,col 5)-(line 242,col 46)",
            "(line 243,col 5)-(line 244,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocType()",
        "snippet": "  public void testJsDocType() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {x} */ types.actual;\"\n        + \"/** @type {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 247,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 252,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocParameter()",
        "snippet": "  public void testJsDocParameter() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @param {x} a */ types.actual;\"\n        + \"/** @param {goog.Timer} a */ types.expected;\");\n  }\n",
        "begin_line": 255,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 260,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocExtends()",
        "snippet": "  public void testJsDocExtends() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @extends {x} */ types.actual;\"\n        + \"/** @extends {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 263,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 268,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocImplements()",
        "snippet": "  public void testJsDocImplements() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @implements {x} */ types.actual;\"\n        + \"/** @implements {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 271,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 276,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocEnum()",
        "snippet": "  public void testJsDocEnum() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @enum {x} */ types.actual;\"\n        + \"/** @enum {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 279,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 284,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocReturn()",
        "snippet": "  public void testJsDocReturn() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @return {x} */ types.actual;\"\n        + \"/** @return {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 287,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 292,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocThis()",
        "snippet": "  public void testJsDocThis() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @this {x} */ types.actual;\"\n        + \"/** @this {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 295,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 296,col 5)-(line 300,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocThrows()",
        "snippet": "  public void testJsDocThrows() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @throws {x} */ types.actual;\"\n        + \"/** @throws {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 303,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 308,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocSubType()",
        "snippet": "  public void testJsDocSubType() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {x.Enum} */ types.actual;\"\n        + \"/** @type {goog.Timer.Enum} */ types.expected;\");\n  }\n",
        "begin_line": 311,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 312,col 5)-(line 316,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testJsDocTypedef()",
        "snippet": "  public void testJsDocTypedef() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @typedef {x} */ types.actual;\"\n        + \"/** @typedef {goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 319,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 320,col 5)-(line 324,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testArrayJsDoc()",
        "snippet": "  public void testArrayJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {Array.<x>} */ types.actual;\"\n        + \"/** @type {Array.<goog.Timer>} */ types.expected;\");\n  }\n",
        "begin_line": 327,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 328,col 5)-(line 332,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testObjectJsDoc()",
        "snippet": "  public void testObjectJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {{someKey: x}} */ types.actual;\"\n        + \"/** @type {{someKey: goog.Timer}} */ types.expected;\");\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {{x: number}} */ types.actual;\"\n        + \"/** @type {{x: number}} */ types.expected;\");\n  }\n",
        "begin_line": 335,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 336,col 5)-(line 340,col 66)",
            "(line 341,col 5)-(line 345,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testObjectJsDoc2()",
        "snippet": "  public void testObjectJsDoc2() {\n    testTypes(\n        \"var x = goog$Timer;\",\n        \"\"\n        + \"/** @type {{someKey: x}} */ types.actual;\"\n        + \"/** @type {{someKey: goog$Timer}} */ types.expected;\");\n  }\n",
        "begin_line": 348,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 349,col 5)-(line 353,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testUnionJsDoc()",
        "snippet": "  public void testUnionJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {x|Object} */ types.actual;\"\n        + \"/** @type {goog.Timer|Object} */ types.expected;\");\n  }\n",
        "begin_line": 356,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 361,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testFunctionJsDoc()",
        "snippet": "  public void testFunctionJsDoc() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {function(x) : void} */ types.actual;\"\n        + \"/** @type {function(goog.Timer) : void} */ types.expected;\");\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"\"\n        + \"/** @type {function() : x} */ types.actual;\"\n        + \"/** @type {function() : goog.Timer} */ types.expected;\");\n  }\n",
        "begin_line": 364,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 365,col 5)-(line 369,col 72)",
            "(line 370,col 5)-(line 374,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testForwardJsDoc()",
        "snippet": "  public void testForwardJsDoc() {\n    testScoped(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" */\\n\" +\n        \"foo.Foo = function() {};\" +\n        \"/** @param {Foo.Bar} x */ foo.Foo.actual = function(x) {3};\" +\n        \"var Foo = foo.Foo;\" +\n        \"/** @constructor */ Foo.Bar = function() {};\" +\n        \"/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};\",\n\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" */\\n\" +\n        \"foo.Foo = function() {};\" +\n        \"/** @param {foo.Foo.Bar} x */ foo.Foo.actual = function(x) {3};\" +\n        \"/** @constructor */ foo.Foo.Bar = function() {};\" +\n        \"/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};\");\n    verifyTypes();\n  }\n",
        "begin_line": 377,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 394,col 76)",
            "(line 395,col 5)-(line 395,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testTestTypes()",
        "snippet": "  public void testTestTypes() {\n    try {\n      testTypes(\n          \"var x = goog.Timer;\",\n          \"\"\n          + \"/** @type {function() : x} */ types.actual;\"\n          + \"/** @type {function() : wrong.wrong} */ types.expected;\");\n      fail(\"Test types should fail here.\");\n    } catch (AssertionError e) {\n    }\n  }\n",
        "begin_line": 398,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 407,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testNullType()",
        "snippet": "  public void testNullType() {\n    testTypes(\n        \"var x = goog.Timer;\",\n        \"/** @param draggable */ types.actual;\"\n        + \"/** @param draggable */ types.expected;\");\n  }\n",
        "begin_line": 410,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 414,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testIssue772()",
        "snippet": "  public void testIssue772() {\n    testTypes(\n        \"var b = a.b;\" +\n        \"var c = b.c;\",\n        \"/** @param {c.MyType} x */ types.actual;\" +\n        \"/** @param {a.b.c.MyType} x */ types.expected;\");\n  }\n",
        "begin_line": 417,
        "end_line": 423,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 422,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testFailure(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testFailure(String code, DiagnosticType expectedError) {\n    test(code, null, expectedError);\n  }\n",
        "begin_line": 429,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 430,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedFailure(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testScopedFailure(String code, DiagnosticType expectedError) {\n    test(\"goog.scope(function() {\" + code + \"});\", null, expectedError);\n  }\n",
        "begin_line": 433,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedThis()",
        "snippet": "  public void testScopedThis() {\n    testScopedFailure(\"this.y = 10;\", ScopedAliases.GOOG_SCOPE_REFERENCES_THIS);\n    testScopedFailure(\"var x = this;\",\n        ScopedAliases.GOOG_SCOPE_REFERENCES_THIS);\n    testScopedFailure(\"fn(this);\", ScopedAliases.GOOG_SCOPE_REFERENCES_THIS);\n  }\n",
        "begin_line": 437,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 438,col 5)-(line 438,col 80)",
            "(line 439,col 5)-(line 440,col 50)",
            "(line 441,col 5)-(line 441,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasRedefinition()",
        "snippet": "  public void testAliasRedefinition() {\n    testScopedFailure(\"var x = goog.dom; x = goog.events;\",\n        ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED);\n  }\n",
        "begin_line": 444,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 445,col 5)-(line 446,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasNonRedefinition()",
        "snippet": "  public void testAliasNonRedefinition() {\n    test(\"var y = {}; goog.scope(function() { goog.dom = y; });\",\n         \"var y = {}; goog.dom = y;\");\n  }\n",
        "begin_line": 449,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 450,col 5)-(line 451,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testCtorAlias()",
        "snippet": "  public void testCtorAlias() {\n    test(\"var x = {y: {}};\" +\n         \"goog.scope(function() {\" +\n         \"  var y = x.y;\" +\n         \"  y.ClassA = function() { this.b = new ClassB(); };\" +\n         \"  y.ClassB = function() {};\" +\n         \"  var ClassB = y.ClassB;\" +\n         \"});\",\n         \"var x = {y: {}};\" +\n         \"x.y.ClassA = function() { this.b = new x.y.ClassB(); };\" +\n         \"x.y.ClassB = function() { };\");\n  }\n",
        "begin_line": 454,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 455,col 5)-(line 464,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasCycle()",
        "snippet": "  public void testAliasCycle() {\n    test(\"var x = {y: {}};\" +\n         \"goog.scope(function() {\" +\n         \"  var y = z.x;\" +\n         \"  var z = y.x;\" +\n         \"  y.ClassA = function() {};\" +\n         \"  z.ClassB = function() {};\" +\n         \"});\", null,\n         ScopedAliases.GOOG_SCOPE_ALIAS_CYCLE);\n  }\n",
        "begin_line": 467,
        "end_line": 476,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 475,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedReturn()",
        "snippet": "  public void testScopedReturn() {\n    testScopedFailure(\"return;\", ScopedAliases.GOOG_SCOPE_USES_RETURN);\n    testScopedFailure(\"var x = goog.dom; return;\",\n        ScopedAliases.GOOG_SCOPE_USES_RETURN);\n  }\n",
        "begin_line": 478,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 479,col 5)-(line 479,col 71)",
            "(line 480,col 5)-(line 481,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testScopedThrow()",
        "snippet": "  public void testScopedThrow() {\n    testScopedFailure(\"throw 'error';\", ScopedAliases.GOOG_SCOPE_USES_THROW);\n  }\n",
        "begin_line": 484,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 485,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testUsedImproperly()",
        "snippet": "  public void testUsedImproperly() {\n    testFailure(\"var x = goog.scope(function() {});\",\n        ScopedAliases.GOOG_SCOPE_USED_IMPROPERLY);\n  }\n",
        "begin_line": 488,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 489,col 5)-(line 490,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testBadParameters()",
        "snippet": "  public void testBadParameters() {\n    testFailure(\"goog.scope()\", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(10)\", ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(function() {}, 10)\",\n        ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(function z() {})\",\n        ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n    testFailure(\"goog.scope(function(a, b, c) {})\",\n        ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n  }\n",
        "begin_line": 493,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 77)",
            "(line 495,col 5)-(line 495,col 79)",
            "(line 496,col 5)-(line 497,col 53)",
            "(line 498,col 5)-(line 499,col 53)",
            "(line 500,col 5)-(line 501,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testNonAliasLocal()",
        "snippet": "  public void testNonAliasLocal() {\n    testScopedFailure(\"try { } catch (e) {}\",\n        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n  }\n",
        "begin_line": 504,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 505,col 5)-(line 506,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testOkAliasLocal()",
        "snippet": "  public void testOkAliasLocal() {\n    testScoped(\"var x = 10;\",\n               SCOPE_NAMESPACE + \"$jscomp.scope.x = 10\");\n    testScoped(\"var x = goog['dom'];\",\n               SCOPE_NAMESPACE + \"$jscomp.scope.x = goog['dom']\");\n    testScoped(\"var x = 10, y = 9;\",\n               SCOPE_NAMESPACE + \"$jscomp.scope.x = 10; $jscomp.scope.y = 9;\");\n    testScoped(\"var x = 10, y = 9; goog.getX = function () { return x + y; }\",\n               SCOPE_NAMESPACE + \"$jscomp.scope.x = 10; $jscomp.scope.y = 9;\" +\n               \"goog.getX = function () { \" +\n               \"    return $jscomp.scope.x + $jscomp.scope.y; }\");\n  }\n",
        "begin_line": 509,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 510,col 5)-(line 511,col 57)",
            "(line 512,col 5)-(line 513,col 66)",
            "(line 514,col 5)-(line 515,col 79)",
            "(line 516,col 5)-(line 519,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testFunctionDeclaration()",
        "snippet": "  public void testFunctionDeclaration() {\n    testScoped(\"if (x) { function f() {} } g(f)\",\n               SCOPE_NAMESPACE +\n               \"if (x) { $jscomp.scope.f = function () {}; } \" +\n               \"g($jscomp.scope.f); \");\n  }\n",
        "begin_line": 522,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 523,col 5)-(line 526,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testHoistedFunctionDeclaration()",
        "snippet": "  public void testHoistedFunctionDeclaration() {\n    testScoped(\" g(f); function f() {} \",\n               SCOPE_NAMESPACE +\n               \" $jscomp.scope.f = function () {}; \" +\n               \"g($jscomp.scope.f); \");\n  }\n",
        "begin_line": 529,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 530,col 5)-(line 533,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testAliasReassign()",
        "snippet": "  public void testAliasReassign() {\n    testScopedFailure(\"var x = 3; x = 5;\",\n        ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED);\n  }\n",
        "begin_line": 536,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 537,col 5)-(line 538,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testMultipleLocals()",
        "snippet": "  public void testMultipleLocals() {\n    test(\"goog.scope(function () { var x = 3; });\" +\n         \"goog.scope(function () { var x = 4; });\",\n         SCOPE_NAMESPACE + \"$jscomp.scope.x = 3; $jscomp.scope.x$1 = 4\");\n  }\n",
        "begin_line": 541,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 544,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103a()",
        "snippet": "  public void testIssue1103a() {\n    test(\"goog.scope(function () {\" +\n         \"  var a;\" +\n         \"  foo.bar = function () { a = 1; };\" +\n         \"});\",\n         SCOPE_NAMESPACE + \"foo.bar = function () { $jscomp.scope.a = 1; }\");\n  }\n",
        "begin_line": 547,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 548,col 5)-(line 552,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103b()",
        "snippet": "  public void testIssue1103b() {\n    test(\"goog.scope(function () {\" +\n         \"  var a = foo, b, c = 1;\" +\n         \"});\",\n         SCOPE_NAMESPACE + \"$jscomp.scope.c=1\");\n  }\n",
        "begin_line": 555,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 556,col 5)-(line 559,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103c()",
        "snippet": "  public void testIssue1103c() {\n    test(\"goog.scope(function () {\" +\n         \"  /** @type {number} */ var a;\" +\n         \"});\",\n         SCOPE_NAMESPACE + \"/** @type {number} */ $jscomp.scope.a;\");\n  }\n",
        "begin_line": 562,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 563,col 5)-(line 566,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testIssue1144()",
        "snippet": "  public void testIssue1144() {\n    test(\"var ns = {};\" +\n         \"ns.sub = {};\" +\n         \"/** @constructor */ ns.sub.C = function () {};\" +\n         \"goog.scope(function () {\" +\n         \"  var sub = ns.sub;\" +\n         \"  /** @type {sub.C} */\" +\n         \"  var x = null;\" +\n         \"});\",\n         SCOPE_NAMESPACE +\n         \"var ns = {};\" +\n         \"ns.sub = {};\" +\n         \"/** @constructor */ ns.sub.C = function () {};\" +\n         \"$jscomp.scope.x = null;\");\n  }\n",
        "begin_line": 569,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 570,col 5)-(line 582,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testNoGoogScope()",
        "snippet": "  public void testNoGoogScope() {\n    String fullJsCode =\n        \"var g = goog;\\n g.dom.createElement(g.dom.TagName.DIV);\";\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, fullJsCode);\n\n    assertTrue(spy.observedPositions.isEmpty());\n  }\n",
        "begin_line": 587,
        "end_line": 595,
        "comment": " TODO(tylerg) : update these to EasyMock style tests once available",
        "child_ranges": [
            "(line 588,col 5)-(line 589,col 66)",
            "(line 590,col 5)-(line 590,col 66)",
            "(line 591,col 5)-(line 591,col 32)",
            "(line 592,col 5)-(line 592,col 33)",
            "(line 594,col 5)-(line 594,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testRecordOneAlias()",
        "snippet": "  public void testRecordOneAlias() {\n    String fullJsCode = GOOG_SCOPE_START_BLOCK\n        + \"var g = goog;\\n g.dom.createElement(g.dom.TagName.DIV);\\n\"\n        + GOOG_SCOPE_END_BLOCK;\n    String expectedJsCode = \"goog.dom.createElement(goog.dom.TagName.DIV);\\n\";\n\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, expectedJsCode);\n\n    assertTrue(spy.observedPositions.containsKey(\"testcode\"));\n    List<SourcePosition<AliasTransformation>> positions =\n        spy.observedPositions.get(\"testcode\");\n    assertEquals(1, positions.size());\n    verifyAliasTransformationPosition(1, 0, 2, 1, positions.get(0));\n\n    assertEquals(1, spy.constructedAliases.size());\n    AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n    assertEquals(\"goog\", aliasSpy.observedDefinitions.get(\"g\"));\n  }\n",
        "begin_line": 597,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 598,col 5)-(line 600,col 31)",
            "(line 601,col 5)-(line 601,col 78)",
            "(line 603,col 5)-(line 603,col 66)",
            "(line 604,col 5)-(line 604,col 32)",
            "(line 605,col 5)-(line 605,col 37)",
            "(line 607,col 5)-(line 607,col 62)",
            "(line 608,col 5)-(line 609,col 46)",
            "(line 610,col 5)-(line 610,col 38)",
            "(line 611,col 5)-(line 611,col 68)",
            "(line 613,col 5)-(line 613,col 51)",
            "(line 614,col 5)-(line 614,col 65)",
            "(line 615,col 5)-(line 615,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testRecordOneAlias2()",
        "snippet": "  public void testRecordOneAlias2() {\n    String fullJsCode = GOOG_SCOPE_START_BLOCK\n        + \"var g$1 = goog;\\n g$1.dom.createElement(g$1.dom.TagName.DIV);\\n\"\n        + GOOG_SCOPE_END_BLOCK;\n    String expectedJsCode = \"goog.dom.createElement(goog.dom.TagName.DIV);\\n\";\n\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, expectedJsCode);\n\n    assertTrue(spy.observedPositions.containsKey(\"testcode\"));\n    List<SourcePosition<AliasTransformation>> positions =\n        spy.observedPositions.get(\"testcode\");\n    assertEquals(1, positions.size());\n    verifyAliasTransformationPosition(1, 0, 2, 1, positions.get(0));\n\n    assertEquals(1, spy.constructedAliases.size());\n    AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n    assertEquals(\"goog\", aliasSpy.observedDefinitions.get(\"g$1\"));\n  }\n",
        "begin_line": 618,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 619,col 5)-(line 621,col 31)",
            "(line 622,col 5)-(line 622,col 78)",
            "(line 624,col 5)-(line 624,col 66)",
            "(line 625,col 5)-(line 625,col 32)",
            "(line 626,col 5)-(line 626,col 37)",
            "(line 628,col 5)-(line 628,col 62)",
            "(line 629,col 5)-(line 630,col 46)",
            "(line 631,col 5)-(line 631,col 38)",
            "(line 632,col 5)-(line 632,col 68)",
            "(line 634,col 5)-(line 634,col 51)",
            "(line 635,col 5)-(line 635,col 65)",
            "(line 636,col 5)-(line 636,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testRecordMultipleAliases()",
        "snippet": "  public void testRecordMultipleAliases() {\n    String fullJsCode = GOOG_SCOPE_START_BLOCK\n        + \"var g = goog;\\n var b= g.bar;\\n var f = goog.something.foo;\"\n        + \"g.dom.createElement(g.dom.TagName.DIV);\\n b.foo();\"\n        + GOOG_SCOPE_END_BLOCK;\n    String expectedJsCode =\n        \"goog.dom.createElement(goog.dom.TagName.DIV);\\n goog.bar.foo();\";\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, expectedJsCode);\n\n    assertTrue(spy.observedPositions.containsKey(\"testcode\"));\n    List<SourcePosition<AliasTransformation>> positions =\n        spy.observedPositions.get(\"testcode\");\n    assertEquals(1, positions.size());\n    verifyAliasTransformationPosition(1, 0, 3, 1, positions.get(0));\n\n    assertEquals(1, spy.constructedAliases.size());\n    AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n    assertEquals(\"goog\", aliasSpy.observedDefinitions.get(\"g\"));\n    assertEquals(\"g.bar\", aliasSpy.observedDefinitions.get(\"b\"));\n    assertEquals(\"goog.something.foo\", aliasSpy.observedDefinitions.get(\"f\"));\n  }\n",
        "begin_line": 639,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 643,col 31)",
            "(line 644,col 5)-(line 645,col 74)",
            "(line 646,col 5)-(line 646,col 66)",
            "(line 647,col 5)-(line 647,col 32)",
            "(line 648,col 5)-(line 648,col 37)",
            "(line 650,col 5)-(line 650,col 62)",
            "(line 651,col 5)-(line 652,col 46)",
            "(line 653,col 5)-(line 653,col 38)",
            "(line 654,col 5)-(line 654,col 68)",
            "(line 656,col 5)-(line 656,col 51)",
            "(line 657,col 5)-(line 657,col 65)",
            "(line 658,col 5)-(line 658,col 64)",
            "(line 659,col 5)-(line 659,col 65)",
            "(line 660,col 5)-(line 660,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.testRecordAliasFromMultipleGoogScope()",
        "snippet": "  public void testRecordAliasFromMultipleGoogScope() {\n    String firstGoogScopeBlock = GOOG_SCOPE_START_BLOCK\n        + \"\\n var g = goog;\\n g.dom.createElement(g.dom.TagName.DIV);\\n\"\n        + GOOG_SCOPE_END_BLOCK;\n    String fullJsCode = firstGoogScopeBlock + \"\\n\\nvar l = abc.def;\\n\\n\"\n        + GOOG_SCOPE_START_BLOCK\n        + \"\\n var z = namespace.Zoo;\\n z.getAnimals(l);\\n\"\n        + GOOG_SCOPE_END_BLOCK;\n\n    String expectedJsCode = \"goog.dom.createElement(goog.dom.TagName.DIV);\\n\"\n        + \"\\n\\nvar l = abc.def;\\n\\n\" + \"\\n namespace.Zoo.getAnimals(l);\\n\";\n\n    TransformationHandlerSpy spy = new TransformationHandlerSpy();\n    transformationHandler = spy;\n    test(fullJsCode, expectedJsCode);\n\n\n    assertTrue(spy.observedPositions.containsKey(\"testcode\"));\n    List<SourcePosition<AliasTransformation>> positions =\n        spy.observedPositions.get(\"testcode\");\n    assertEquals(2, positions.size());\n\n    verifyAliasTransformationPosition(1, 0, 6, 0, positions.get(0));\n\n    verifyAliasTransformationPosition(8, 0, 11, 4, positions.get(1));\n\n    assertEquals(2, spy.constructedAliases.size());\n    AliasSpy aliasSpy = (AliasSpy) spy.constructedAliases.get(0);\n    assertEquals(\"goog\", aliasSpy.observedDefinitions.get(\"g\"));\n\n    aliasSpy = (AliasSpy) spy.constructedAliases.get(1);\n    assertEquals(\"namespace.Zoo\", aliasSpy.observedDefinitions.get(\"z\"));\n  }\n",
        "begin_line": 663,
        "end_line": 695,
        "comment": "",
        "child_ranges": [
            "(line 664,col 5)-(line 666,col 31)",
            "(line 667,col 5)-(line 670,col 31)",
            "(line 672,col 5)-(line 673,col 75)",
            "(line 675,col 5)-(line 675,col 66)",
            "(line 676,col 5)-(line 676,col 32)",
            "(line 677,col 5)-(line 677,col 37)",
            "(line 680,col 5)-(line 680,col 62)",
            "(line 681,col 5)-(line 682,col 46)",
            "(line 683,col 5)-(line 683,col 38)",
            "(line 685,col 5)-(line 685,col 68)",
            "(line 687,col 5)-(line 687,col 69)",
            "(line 689,col 5)-(line 689,col 51)",
            "(line 690,col 5)-(line 690,col 65)",
            "(line 691,col 5)-(line 691,col 64)",
            "(line 693,col 5)-(line 693,col 56)",
            "(line 694,col 5)-(line 694,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.verifyAliasTransformationPosition(int, int, int, int, com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation>)",
        "snippet": "  private void verifyAliasTransformationPosition(int startLine, int startChar,\n      int endLine, int endChar, SourcePosition<AliasTransformation> pos) {\n    assertEquals(startLine, pos.getStartLine());\n    assertEquals(startChar, pos.getPositionOnStartLine());\n    assertTrue(\n        \"expected endline >= \" + endLine + \".  Found \" + pos.getEndLine(),\n        pos.getEndLine() >= endLine);\n    assertTrue(\"expected endChar >= \" + endChar + \".  Found \"\n        + pos.getPositionOnEndLine(), pos.getPositionOnEndLine() >= endChar);\n  }\n",
        "begin_line": 697,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 699,col 48)",
            "(line 700,col 5)-(line 700,col 58)",
            "(line 701,col 5)-(line 703,col 37)",
            "(line 704,col 5)-(line 705,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected ScopedAliases getProcessor(Compiler compiler) {\n    return new ScopedAliases(compiler, null, transformationHandler);\n  }\n",
        "begin_line": 708,
        "end_line": 711,
        "comment": "",
        "child_ranges": [
            "(line 710,col 5)-(line 710,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TransformationHandlerSpy.logAliasTransformation(java.lang.String, com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation>)",
        "snippet": "    @Override\n    public AliasTransformation logAliasTransformation(\n        String sourceFile, SourcePosition<AliasTransformation> position) {\n      if(!observedPositions.containsKey(sourceFile)) {\n        observedPositions.put(sourceFile,\n            Lists.<SourcePosition<AliasTransformation>> newArrayList());\n      }\n      observedPositions.get(sourceFile).add(position);\n      AliasTransformation spy = new AliasSpy();\n      constructedAliases.add(spy);\n      return spy;\n    }\n",
        "begin_line": 722,
        "end_line": 733,
        "comment": "",
        "child_ranges": [
            "(line 725,col 7)-(line 728,col 7)",
            "(line 729,col 7)-(line 729,col 54)",
            "(line 730,col 7)-(line 730,col 47)",
            "(line 731,col 7)-(line 731,col 34)",
            "(line 732,col 7)-(line 732,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.AliasSpy.addAlias(java.lang.String, java.lang.String)",
        "snippet": "    @Override\n    public void addAlias(String alias, String definition) {\n      observedDefinitions.put(alias, definition);\n    }\n",
        "begin_line": 739,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 741,col 7)-(line 741,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.TypeVerifyingPass(com.google.javascript.jscomp.Compiler)",
        "snippet": "    public TypeVerifyingPass(Compiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 750,
        "end_line": 752,
        "comment": "",
        "child_ranges": [
            "(line 751,col 7)-(line 751,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverse(compiler, root, this);\n    }\n",
        "begin_line": 754,
        "end_line": 757,
        "comment": "",
        "child_ranges": [
            "(line 756,col 7)-(line 756,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 759,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 762,col 7)-(line 762,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliasesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
        "signature": "com.google.javascript.jscomp.ScopedAliasesTest.TypeVerifyingPass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null) {\n        Collection<Node> typeNodes = info.getTypeNodes();\n        if (typeNodes.size() > 0) {\n          if (actualTypes != null) {\n            List<Node> expectedTypes = Lists.newArrayList();\n            for (Node typeNode : info.getTypeNodes()) {\n              expectedTypes.add(typeNode);\n            }\n            assertEquals(\"Wrong number of JsDoc types\",\n                expectedTypes.size(), actualTypes.size());\n            for (int i = 0; i < expectedTypes.size(); i++) {\n              assertNull(\n                  expectedTypes.get(i).checkTreeEquals(actualTypes.get(i)));\n            }\n          } else {\n            actualTypes = Lists.newArrayList();\n            for (Node typeNode : info.getTypeNodes()) {\n              actualTypes.add(typeNode);\n            }\n          }\n        }\n      }\n    }\n",
        "begin_line": 765,
        "end_line": 790,
        "comment": "",
        "child_ranges": [
            "(line 767,col 7)-(line 767,col 40)",
            "(line 768,col 7)-(line 789,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 139,col 49)",
            "(line 140,col 5)-(line 140,col 39)",
            "(line 141,col 5)-(line 141,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 21)",
            "(line 161,col 5)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 185,
        "end_line": 200,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 188,col 5)",
            "(line 192,col 5)-(line 192,col 32)",
            "(line 194,col 5)-(line 195,col 65)",
            "(line 196,col 5)-(line 197,col 60)",
            "(line 198,col 5)-(line 198,col 55)",
            "(line 199,col 5)-(line 199,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 29)",
            "(line 254,col 5)-(line 254,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 28)",
            "(line 301,col 5)-(line 301,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": " TODO(nicksantos): This pass doesn't get run anymore. It should be removed.",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableComputeSideEffects()",
        "snippet": "  void enableComputeSideEffects() {\n    computeSideEffects  = true;\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Run the PureFunctionIdentifier pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(), level);\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 346,col 5)-(line 348,col 40)",
            "(line 350,col 5)-(line 350,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 401,
        "end_line": 404,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 417,
        "end_line": 420,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 49)",
            "(line 441,col 5)-(line 441,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 458,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 41)",
            "(line 462,col 5)-(line 462,col 28)",
            "(line 464,col 5)-(line 464,col 43)",
            "(line 466,col 5)-(line 468,col 5)",
            "(line 471,col 5)-(line 471,col 39)",
            "(line 472,col 5)-(line 473,col 53)",
            "(line 475,col 5)-(line 475,col 71)",
            "(line 477,col 5)-(line 477,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 483,col 5)",
            "(line 484,col 5)-(line 484,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 537,
        "end_line": 548,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 539,col 41)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 51)",
            "(line 543,col 5)-(line 545,col 5)",
            "(line 546,col 5)-(line 546,col 55)",
            "(line 547,col 5)-(line 547,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 583,
        "end_line": 591,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 41)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 589,col 66)",
            "(line 590,col 5)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 652,col 5)-(line 656,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 670,
        "end_line": 675,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 673,col 49)",
            "(line 674,col 5)-(line 674,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 707,col 5)-(line 707,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 725,
        "end_line": 738,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 726,col 5)-(line 737,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 751,
        "end_line": 754,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n    Map<Node, Node> mtoc = NodeUtil.mapMainToClone(mainRoot, mainRootClone);\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR, false)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (!runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (computeSideEffects && i == 0) {\n          PureFunctionIdentifier.Driver mark =\n              new PureFunctionIdentifier.Driver(compiler, null, false);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        if (runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be changed by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called.\"\n            + \"\\nOriginal: \" + mainRootClone.toStringTree()\n            + \"\\nNew: \" + mainRoot.toStringTree(), hasCodeChanged);\n      }\n\n      // Check correctness of the changed-scopes-only traversal\n      NodeUtil.verifyScopeChanges(mtoc, mainRoot, false, compiler);\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone =\n          normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 770,
        "end_line": 1013,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 773,col 5)-(line 773,col 51)",
            "(line 774,col 5)-(line 774,col 44)",
            "(line 776,col 5)-(line 776,col 39)",
            "(line 777,col 5)-(line 778,col 66)",
            "(line 779,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 787,col 5)",
            "(line 788,col 5)-(line 788,col 44)",
            "(line 789,col 5)-(line 789,col 40)",
            "(line 792,col 5)-(line 792,col 38)",
            "(line 793,col 5)-(line 793,col 54)",
            "(line 794,col 5)-(line 794,col 50)",
            "(line 795,col 5)-(line 795,col 76)",
            "(line 797,col 5)-(line 797,col 45)",
            "(line 798,col 5)-(line 798,col 68)",
            "(line 799,col 5)-(line 799,col 34)",
            "(line 800,col 5)-(line 800,col 59)",
            "(line 801,col 5)-(line 801,col 35)",
            "(line 803,col 5)-(line 804,col 39)",
            "(line 806,col 5)-(line 868,col 5)",
            "(line 870,col 5)-(line 1012,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 57)",
            "(line 1018,col 5)-(line 1018,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 1024,
        "end_line": 1042,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 41)",
            "(line 1026,col 5)-(line 1026,col 51)",
            "(line 1027,col 5)-(line 1029,col 5)",
            "(line 1030,col 5)-(line 1030,col 55)",
            "(line 1031,col 5)-(line 1031,col 39)",
            "(line 1032,col 5)-(line 1033,col 66)",
            "(line 1034,col 5)-(line 1034,col 44)",
            "(line 1035,col 5)-(line 1035,col 42)",
            "(line 1037,col 5)-(line 1040,col 5)",
            "(line 1041,col 5)-(line 1041,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String input, String expectedExtern) {\n    testExternChanges(\"\", input, expectedExtern);\n  }\n",
        "begin_line": 1044,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 5)-(line 1046,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String extern, String input, String expectedExtern) {\n    Compiler compiler = createCompiler();\n    CompilerOptions options = getOptions();\n    compiler.init(\n        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n        options);\n    compiler.parseInputs();\n    assertFalse(compiler.hasErrors());\n\n    Node externsAndJs = compiler.getRoot();\n    Node root = externsAndJs.getLastChild();\n\n    Node externs = externsAndJs.getFirstChild();\n\n    Node expected = compiler.parseTestCode(expectedExtern);\n    assertFalse(compiler.hasErrors());\n\n    (getProcessor(compiler)).process(externs, root);\n\n    String externsCode = compiler.toSource(externs);\n    String expectedCode = compiler.toSource(expected);\n\n    assertEquals(expectedCode, externsCode);\n  }\n",
        "begin_line": 1049,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1051,col 5)-(line 1051,col 41)",
            "(line 1052,col 5)-(line 1052,col 43)",
            "(line 1053,col 5)-(line 1056,col 17)",
            "(line 1057,col 5)-(line 1057,col 27)",
            "(line 1058,col 5)-(line 1058,col 38)",
            "(line 1060,col 5)-(line 1060,col 43)",
            "(line 1061,col 5)-(line 1061,col 44)",
            "(line 1063,col 5)-(line 1063,col 48)",
            "(line 1065,col 5)-(line 1065,col 59)",
            "(line 1066,col 5)-(line 1066,col 38)",
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1070,col 5)-(line 1070,col 52)",
            "(line 1071,col 5)-(line 1071,col 54)",
            "(line 1073,col 5)-(line 1073,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1084,
        "end_line": 1090,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1085,col 5)-(line 1085,col 47)",
            "(line 1086,col 5)-(line 1088,col 5)",
            "(line 1089,col 5)-(line 1089,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1096,
        "end_line": 1102,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1097,col 5)-(line 1097,col 47)",
            "(line 1098,col 5)-(line 1100,col 5)",
            "(line 1101,col 5)-(line 1101,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1109,
        "end_line": 1116,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1110,col 5)-(line 1110,col 48)",
            "(line 1111,col 5)-(line 1111,col 47)",
            "(line 1112,col 5)-(line 1114,col 5)",
            "(line 1115,col 5)-(line 1115,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1123,
        "end_line": 1129,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 47)",
            "(line 1125,col 5)-(line 1127,col 5)",
            "(line 1128,col 5)-(line 1128,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1135,
        "end_line": 1142,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1136,col 5)-(line 1136,col 53)",
            "(line 1137,col 5)-(line 1140,col 5)",
            "(line 1141,col 5)-(line 1141,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1145,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 7)-(line 1146,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1149,
        "end_line": 1150,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1152,
        "end_line": 1153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1157,col 39)",
            "(line 1158,col 5)-(line 1158,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1161,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1162,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1166,
        "end_line": 1178,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1167,col 5)-(line 1167,col 52)",
            "(line 1168,col 5)-(line 1176,col 39)",
            "(line 1177,col 5)-(line 1177,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ScopedAliasesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-fb840931-04a4-423d-a1b2-cc4bb37a615c.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1170,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1171,col 13)-(line 1173,col 13)"
        ]
    }
]