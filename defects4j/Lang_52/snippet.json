[
    {
        "name": "StringEscapeUtils.escapeJavaScript#121",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(java.lang.String)",
        "snippet": "    public static String escapeJavaScript(String str) {\n        return escapeJavaStyleString(str, true);\n    }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n     * <p>Escapes any values it finds into their JavaScript String form.\n     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n     *\n     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n     * <code>'t'</code>.</p>\n     *\n     * <p>The only difference between Java strings and JavaScript strings\n     * is that in JavaScript, a single quote must be escaped.</p>\n     *\n     * <p>Example:\n     * <pre>\n     * input string: He didn't say, \"Stop!\"\n     * output string: He didn\\'t say, \\\"Stop!\\\"\n     * </pre>\n     * </p>\n     *\n     * @param str  String to escape values in, may be null\n     * @return String with escaped values, <code>null</code> if null string input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringEscapeUtils.escapeJavaScript#137",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(java.io.Writer, java.lang.String)",
        "snippet": "    public static void escapeJavaScript(Writer out, String str) throws IOException {\n        escapeJavaStyleString(out, str, true);\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n     * to a <code>Writer</code>.</p>\n     * \n     * <p>A <code>null</code> string input has no effect.</p>\n     * \n     * @see #escapeJavaScript(java.lang.String)\n     * @param out  Writer to write escaped string into\n     * @param str  String to escape values in, may be null\n     * @throws IllegalArgumentException if the Writer is <code>null</code>\n     * @throws IOException if error occurs on underlying Writer\n     *",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringEscapeUtils.escapeJavaStyleString#171",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(java.io.Writer, java.lang.String, boolean)",
        "snippet": "    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (str == null) {\n            return;\n        }\n        int sz;\n        sz = str.length();\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n\n            // handle unicode\n            if (ch > 0xfff) {\n                out.write(\"\\\\u\" + hex(ch));\n            } else if (ch > 0xff) {\n                out.write(\"\\\\u0\" + hex(ch));\n            } else if (ch > 0x7f) {\n                out.write(\"\\\\u00\" + hex(ch));\n            } else if (ch < 32) {\n                switch (ch) {\n                    case '\\b':\n                        out.write('\\\\');\n                        out.write('b');\n                        break;\n                    case '\\n':\n                        out.write('\\\\');\n                        out.write('n');\n                        break;\n                    case '\\t':\n                        out.write('\\\\');\n                        out.write('t');\n                        break;\n                    case '\\f':\n                        out.write('\\\\');\n                        out.write('f');\n                        break;\n                    case '\\r':\n                        out.write('\\\\');\n                        out.write('r');\n                        break;\n                    default :\n                        if (ch > 0xf) {\n                            out.write(\"\\\\u00\" + hex(ch));\n                        } else {\n                            out.write(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }\n            } else {\n                switch (ch) {\n                    case '\\'':\n                        if (escapeSingleQuote) {\n                          out.write('\\\\');\n                        }\n                        out.write('\\'');\n                        break;\n                    case '\"':\n                        out.write('\\\\');\n                        out.write('\"');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        out.write('\\\\');\n                        break;\n                    default :\n                        out.write(ch);\n                        break;\n                }\n            }\n        }\n    }\n",
        "begin_line": 171,
        "end_line": 242,
        "comment": "\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param out write to receieve the escaped string\n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuote escapes single quotes if <code>true</code>\n     * @throws IOException if an IOException occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringEscapeUtils.escapeJavaStyleString#148",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(java.lang.String, boolean)",
        "snippet": "    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(str.length() * 2);\n            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            ioe.printStackTrace();\n            return null;\n        }\n    }\n",
        "begin_line": 148,
        "end_line": 161,
        "comment": "\n     * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n     * \n     * @param str String to escape values in, may be null\n     * @param escapeSingleQuotes escapes single quotes if <code>true</code>\n     * @return the escaped string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    }
]