[
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.StringEscapeUtilsTest(java.lang.String)",
        "snippet": "    public StringEscapeUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringEscapeUtilsTest.class);\n        suite.setName(\"StringEscapeUtilsTest Tests\");\n        return suite;\n    }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 69)",
            "(line 48,col 9)-(line 48,col 53)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringEscapeUtils());\n        Constructor[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n    }\n",
        "begin_line": 53,
        "end_line": 60,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 47)",
            "(line 55,col 9)-(line 55,col 79)",
            "(line 56,col 9)-(line 56,col 37)",
            "(line 57,col 9)-(line 57,col 70)",
            "(line 58,col 9)-(line 58,col 86)",
            "(line 59,col 9)-(line 59,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJava()",
        "snippet": "    public void testEscapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.escapeJava(null));\n        try {\n            StringEscapeUtils.escapeJava(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.escapeJava(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEscapeJava(\"empty string\", \"\", \"\");\n        assertEscapeJava(FOO, FOO);\n        assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\n        assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\n        assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\n        assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n        assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n        assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n        assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\n        assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\n        assertEscapeJava(\"Should use capitalized unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\n\n        assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n                \"He didn't say, \\\"stop!\\\"\");\n        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00A0\",\n                \"This space is non-breaking:\\u00a0\");\n        assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\",\n                \"\\uABCD\\u1234\\u012C\");\n    }\n",
        "begin_line": 63,
        "end_line": 98,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 63)",
            "(line 65,col 9)-(line 71,col 9)",
            "(line 72,col 9)-(line 78,col 9)",
            "(line 80,col 9)-(line 80,col 49)",
            "(line 81,col 9)-(line 81,col 35)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 73)",
            "(line 85,col 9)-(line 85,col 54)",
            "(line 86,col 9)-(line 86,col 46)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 84)",
            "(line 92,col 9)-(line 93,col 44)",
            "(line 94,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 97,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.escapeJava(writer, original);\n        assertEquals(expected, writer.toString());\n    }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 66)",
            "(line 106,col 9)-(line 106,col 90)",
            "(line 107,col 9)-(line 107,col 51)",
            "(line 109,col 9)-(line 109,col 49)",
            "(line 110,col 9)-(line 110,col 55)",
            "(line 111,col 9)-(line 111,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeJava()",
        "snippet": "    public void testUnescapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.unescapeJava(null));\n        try {\n            StringEscapeUtils.unescapeJava(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n            fail();\n        } catch (RuntimeException ex) {\n        }\n        \n        assertUnescapeJava(\"\", \"\");\n        assertUnescapeJava(\"test\", \"test\");\n        assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n        assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n        assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\n        assertUnescapeJava(\"\\\\\", \"\\\\\");\n        //foo\n        assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n        assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n        assertUnescapeJava(\"unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\n    }\n",
        "begin_line": 114,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 65)",
            "(line 116,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 129,col 9)",
            "(line 130,col 9)-(line 134,col 9)",
            "(line 136,col 9)-(line 136,col 35)",
            "(line 137,col 9)-(line 137,col 43)",
            "(line 138,col 9)-(line 138,col 53)",
            "(line 139,col 9)-(line 139,col 76)",
            "(line 140,col 9)-(line 140,col 66)",
            "(line 141,col 9)-(line 141,col 39)",
            "(line 143,col 9)-(line 143,col 71)",
            "(line 144,col 9)-(line 144,col 71)",
            "(line 145,col 9)-(line 145,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.unescapeJava(writer, original);\n        assertEquals(unescaped, writer.toString());\n\n    }\n",
        "begin_line": 152,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 36)",
            "(line 154,col 9)-(line 154,col 65)",
            "(line 156,col 9)-(line 161,col 34)",
            "(line 163,col 9)-(line 163,col 49)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaScript()",
        "snippet": "    public void testEscapeJavaScript() {\n        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));\n        try {\n            StringEscapeUtils.escapeJavaScript(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.escapeJavaScript(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJavaScript(\"He didn't say, \\\"stop!\\\"\"));\n        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n                StringEscapeUtils.escapeJavaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n    }\n",
        "begin_line": 169,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 69)",
            "(line 171,col 9)-(line 177,col 9)",
            "(line 178,col 9)-(line 184,col 9)",
            "(line 186,col 9)-(line 186,col 119)",
            "(line 187,col 9)-(line 188,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtml()",
        "snippet": "    public void testEscapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][1];\n            String original = htmlEscapes[i][2];\n            assertEquals(message, expected, StringEscapeUtils.escapeHtml(original));\n            StringWriter sw = new StringWriter();\n            try {\n            StringEscapeUtils.escapeHtml(sw, original);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n    }\n",
        "begin_line": 210,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 223,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHtml()",
        "snippet": "    public void testUnescapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][2];\n            String original = htmlEscapes[i][1];\n            assertEquals(message, expected, StringEscapeUtils.unescapeHtml(original));\n            \n            StringWriter sw = new StringWriter();\n            try {\n            StringEscapeUtils.unescapeHtml(sw, original);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n        // \\u00E7 is a cedilla (c with wiggle under)\n        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n        // on some locales        \n        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml(\"Fran\\u00E7ais\"));\n        \n        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml(\"Hello&;World\"));\n        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml(\"Hello&#;World\"));\n        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml(\"Hello&# ;World\"));\n        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml(\"Hello&##;World\"));\n    }\n",
        "begin_line": 226,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 240,col 9)",
            "(line 244,col 9)-(line 244,col 118)",
            "(line 246,col 9)-(line 246,col 85)",
            "(line 247,col 9)-(line 247,col 87)",
            "(line 248,col 9)-(line 248,col 89)",
            "(line 249,col 9)-(line 249,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHexCharsHtml()",
        "snippet": "    public void testUnescapeHexCharsHtml() {\n        // Simple easy to grok test \n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#x80;&#x9F;\"));\n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#X80;&#X9F;\"));\n        // Test all Character values:\n        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n            Character c1 = new Character(i);\n            Character c2 = new Character((char)(i+1));\n            String expected = c1.toString() + c2.toString();\n            String escapedC1 = \"&#x\" + Integer.toHexString((c1.charValue())) + \";\";\n            String escapedC2 = \"&#x\" + Integer.toHexString((c2.charValue())) + \";\";\n            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));\n        }\n    }\n",
        "begin_line": 252,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 108)",
            "(line 255,col 9)-(line 255,col 108)",
            "(line 257,col 9)-(line 264,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeUnknownEntity()",
        "snippet": "    public void testUnescapeUnknownEntity() throws Exception\n    {\n        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml(\"&zzzz;\"));\n    }\n",
        "begin_line": 267,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 269,col 9)-(line 269,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtmlVersions()",
        "snippet": "    public void testEscapeHtmlVersions() throws Exception\n    {\n        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml(\"\\u0392\"));\n        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml(\"&Beta;\"));\n\n        //todo: refine API for escaping/unescaping specific HTML versions\n\n    }\n",
        "begin_line": 272,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 71)",
            "(line 275,col 9)-(line 275,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeXml()",
        "snippet": "    public void testEscapeXml() throws Exception {\n        assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n        assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n\n        assertEquals(\"XML should use numbers, not names for HTML entities\",\n                \"&#161;\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n        assertEquals(\"XML should use numbers, not names for HTML entities\",\n                \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n\n        assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n        assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\n        assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeXml(null));\n        assertEquals(null, StringEscapeUtils.unescapeXml(null));\n\n        StringWriter sw = new StringWriter();\n        try {\n            StringEscapeUtils.escapeXml(sw, \"<abc>\");\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n\n        sw = new StringWriter();\n        try {\n            StringEscapeUtils.unescapeXml(sw, \"&lt;abc&gt;\");\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n    }\n",
        "begin_line": 281,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 74)",
            "(line 283,col 9)-(line 283,col 76)",
            "(line 285,col 9)-(line 286,col 65)",
            "(line 287,col 9)-(line 288,col 67)",
            "(line 290,col 9)-(line 290,col 75)",
            "(line 291,col 9)-(line 291,col 73)",
            "(line 292,col 9)-(line 292,col 58)",
            "(line 293,col 9)-(line 293,col 62)",
            "(line 294,col 9)-(line 294,col 64)",
            "(line 296,col 9)-(line 296,col 45)",
            "(line 297,col 9)-(line 300,col 9)",
            "(line 301,col 9)-(line 301,col 83)",
            "(line 303,col 9)-(line 303,col 32)",
            "(line 304,col 9)-(line 307,col 9)",
            "(line 308,col 9)-(line 308,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeSql()",
        "snippet": "    public void testEscapeSql() throws Exception\n    {\n        assertEquals(\"don''t stop\", StringEscapeUtils.escapeSql(\"don't stop\"));\n        assertEquals(\"\", StringEscapeUtils.escapeSql(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeSql(null));\n    }\n",
        "begin_line": 315,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 79)",
            "(line 318,col 9)-(line 318,col 58)",
            "(line 319,col 9)-(line 319,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testStandaloneAmphersand()",
        "snippet": "    public void testStandaloneAmphersand() {\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml(\"test & &lt;\"));\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n    }\n",
        "begin_line": 324,
        "end_line": 329,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38569",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 77)",
            "(line 326,col 9)-(line 326,col 80)",
            "(line 327,col 9)-(line 327,col 76)",
            "(line 328,col 9)-(line 328,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testLang313()",
        "snippet": "    public void testLang313() {\n        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml(\"& &amp;\"));\n    }\n",
        "begin_line": 331,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 332,col 9)-(line 332,col 71)"
        ]
    }
]