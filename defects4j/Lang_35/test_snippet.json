[
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testJira567()",
        "snippet": "    public void testJira567(){\n        Number[] n;\n        // Valid array construction\n        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n        assertEquals(2,n.length);\n        assertEquals(Number.class,n.getClass().getComponentType());\n        try {\n            // Invalid - can't store Long in Integer array\n               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n               fail(\"Should have generated IllegalArgumentException\");\n        } catch (IllegalArgumentException expected) {\n        }\n    }\n",
        "begin_line": 32,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 19)",
            "(line 35,col 9)-(line 35,col 93)",
            "(line 36,col 9)-(line 36,col 33)",
            "(line 37,col 9)-(line 37,col 67)",
            "(line 38,col 9)-(line 43,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean()",
        "snippet": "    public void testAddObjectArrayBoolean() {\n        boolean[] newArray;\n        newArray = ArrayUtils.add((boolean[])null, false);\n        assertTrue(Arrays.equals(new boolean[]{false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((boolean[])null, true);\n        assertTrue(Arrays.equals(new boolean[]{true}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n        boolean[] array1 = new boolean[]{true, false, true};\n        newArray = ArrayUtils.add(array1, false);\n        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));\n        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 46,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 27)",
            "(line 48,col 9)-(line 48,col 58)",
            "(line 49,col 9)-(line 49,col 66)",
            "(line 50,col 9)-(line 50,col 75)",
            "(line 51,col 9)-(line 51,col 57)",
            "(line 52,col 9)-(line 52,col 65)",
            "(line 53,col 9)-(line 53,col 75)",
            "(line 54,col 9)-(line 54,col 60)",
            "(line 55,col 9)-(line 55,col 49)",
            "(line 56,col 9)-(line 56,col 85)",
            "(line 57,col 9)-(line 57,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayByte()",
        "snippet": "    public void testAddObjectArrayByte() {\n        byte[] newArray;\n        newArray = ArrayUtils.add((byte[])null, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((byte[])null, (byte)1);\n        assertTrue(Arrays.equals(new byte[]{1}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        byte[] array1 = new byte[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (byte)0);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (byte)4);\n        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));\n        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 24)",
            "(line 62,col 9)-(line 62,col 57)",
            "(line 63,col 9)-(line 63,col 59)",
            "(line 64,col 9)-(line 64,col 72)",
            "(line 65,col 9)-(line 65,col 57)",
            "(line 66,col 9)-(line 66,col 59)",
            "(line 67,col 9)-(line 67,col 72)",
            "(line 68,col 9)-(line 68,col 44)",
            "(line 69,col 9)-(line 69,col 51)",
            "(line 70,col 9)-(line 70,col 68)",
            "(line 71,col 9)-(line 71,col 72)",
            "(line 72,col 9)-(line 72,col 51)",
            "(line 73,col 9)-(line 73,col 68)",
            "(line 74,col 9)-(line 74,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayChar()",
        "snippet": "    public void testAddObjectArrayChar() {\n        char[] newArray;\n        newArray = ArrayUtils.add((char[])null, (char)0);\n        assertTrue(Arrays.equals(new char[]{0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((char[])null, (char)1);\n        assertTrue(Arrays.equals(new char[]{1}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        char[] array1 = new char[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (char)0);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (char)4);\n        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));\n        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 77,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 24)",
            "(line 79,col 9)-(line 79,col 57)",
            "(line 80,col 9)-(line 80,col 59)",
            "(line 81,col 9)-(line 81,col 77)",
            "(line 82,col 9)-(line 82,col 57)",
            "(line 83,col 9)-(line 83,col 59)",
            "(line 84,col 9)-(line 84,col 77)",
            "(line 85,col 9)-(line 85,col 44)",
            "(line 86,col 9)-(line 86,col 51)",
            "(line 87,col 9)-(line 87,col 68)",
            "(line 88,col 9)-(line 88,col 77)",
            "(line 89,col 9)-(line 89,col 51)",
            "(line 90,col 9)-(line 90,col 68)",
            "(line 91,col 9)-(line 91,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayDouble()",
        "snippet": "    public void testAddObjectArrayDouble() {\n        double[] newArray;\n        newArray = ArrayUtils.add((double[])null, 0);\n        assertTrue(Arrays.equals(new double[]{0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((double[])null, 1);\n        assertTrue(Arrays.equals(new double[]{1}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        double[] array1 = new double[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));\n        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 26)",
            "(line 96,col 9)-(line 96,col 53)",
            "(line 97,col 9)-(line 97,col 61)",
            "(line 98,col 9)-(line 98,col 74)",
            "(line 99,col 9)-(line 99,col 53)",
            "(line 100,col 9)-(line 100,col 61)",
            "(line 101,col 9)-(line 101,col 74)",
            "(line 102,col 9)-(line 102,col 48)",
            "(line 103,col 9)-(line 103,col 45)",
            "(line 104,col 9)-(line 104,col 70)",
            "(line 105,col 9)-(line 105,col 74)",
            "(line 106,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 70)",
            "(line 108,col 9)-(line 108,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayFloat()",
        "snippet": "    public void testAddObjectArrayFloat() {\n        float[] newArray;\n        newArray = ArrayUtils.add((float[])null, 0);\n        assertTrue(Arrays.equals(new float[]{0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((float[])null, 1);\n        assertTrue(Arrays.equals(new float[]{1}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        float[] array1 = new float[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));\n        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 111,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 25)",
            "(line 113,col 9)-(line 113,col 52)",
            "(line 114,col 9)-(line 114,col 60)",
            "(line 115,col 9)-(line 115,col 73)",
            "(line 116,col 9)-(line 116,col 52)",
            "(line 117,col 9)-(line 117,col 60)",
            "(line 118,col 9)-(line 118,col 73)",
            "(line 119,col 9)-(line 119,col 46)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 69)",
            "(line 122,col 9)-(line 122,col 73)",
            "(line 123,col 9)-(line 123,col 45)",
            "(line 124,col 9)-(line 124,col 69)",
            "(line 125,col 9)-(line 125,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayInt()",
        "snippet": "    public void testAddObjectArrayInt() {\n        int[] newArray;\n        newArray = ArrayUtils.add((int[])null, 0);\n        assertTrue(Arrays.equals(new int[]{0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((int[])null, 1);\n        assertTrue(Arrays.equals(new int[]{1}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        int[] array1 = new int[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));\n        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 128,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 23)",
            "(line 130,col 9)-(line 130,col 50)",
            "(line 131,col 9)-(line 131,col 58)",
            "(line 132,col 9)-(line 132,col 75)",
            "(line 133,col 9)-(line 133,col 50)",
            "(line 134,col 9)-(line 134,col 58)",
            "(line 135,col 9)-(line 135,col 75)",
            "(line 136,col 9)-(line 136,col 42)",
            "(line 137,col 9)-(line 137,col 45)",
            "(line 138,col 9)-(line 138,col 67)",
            "(line 139,col 9)-(line 139,col 75)",
            "(line 140,col 9)-(line 140,col 45)",
            "(line 141,col 9)-(line 141,col 67)",
            "(line 142,col 9)-(line 142,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayLong()",
        "snippet": "    public void testAddObjectArrayLong() {\n        long[] newArray;\n        newArray = ArrayUtils.add((long[])null, 0);\n        assertTrue(Arrays.equals(new long[]{0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((long[])null, 1);\n        assertTrue(Arrays.equals(new long[]{1}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        long[] array1 = new long[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, 0);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, 4);\n        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));\n        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 145,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 146,col 9)-(line 146,col 24)",
            "(line 147,col 9)-(line 147,col 51)",
            "(line 148,col 9)-(line 148,col 59)",
            "(line 149,col 9)-(line 149,col 72)",
            "(line 150,col 9)-(line 150,col 51)",
            "(line 151,col 9)-(line 151,col 59)",
            "(line 152,col 9)-(line 152,col 72)",
            "(line 153,col 9)-(line 153,col 44)",
            "(line 154,col 9)-(line 154,col 45)",
            "(line 155,col 9)-(line 155,col 68)",
            "(line 156,col 9)-(line 156,col 72)",
            "(line 157,col 9)-(line 157,col 45)",
            "(line 158,col 9)-(line 158,col 68)",
            "(line 159,col 9)-(line 159,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort()",
        "snippet": "    public void testAddObjectArrayShort() {\n        short[] newArray;\n        newArray = ArrayUtils.add((short[])null, (short)0);\n        assertTrue(Arrays.equals(new short[]{0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add((short[])null, (short)1);\n        assertTrue(Arrays.equals(new short[]{1}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        short[] array1 = new short[]{1, 2, 3};\n        newArray = ArrayUtils.add(array1, (short)0);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.add(array1, (short)4);\n        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));\n        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n    }\n",
        "begin_line": 162,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 25)",
            "(line 164,col 9)-(line 164,col 59)",
            "(line 165,col 9)-(line 165,col 60)",
            "(line 166,col 9)-(line 166,col 73)",
            "(line 167,col 9)-(line 167,col 59)",
            "(line 168,col 9)-(line 168,col 60)",
            "(line 169,col 9)-(line 169,col 73)",
            "(line 170,col 9)-(line 170,col 46)",
            "(line 171,col 9)-(line 171,col 52)",
            "(line 172,col 9)-(line 172,col 69)",
            "(line 173,col 9)-(line 173,col 73)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 69)",
            "(line 176,col 9)-(line 176,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayObject()",
        "snippet": "    public void testAddObjectArrayObject() {}\n",
        "begin_line": 179,
        "end_line": 179,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testLANG571()",
        "snippet": "    public void testLANG571(){\n        String[] stringArray=null;\n        String aString=null;\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, 0, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n    }\n",
        "begin_line": 227,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 34)",
            "(line 229,col 9)-(line 229,col 28)",
            "(line 230,col 9)-(line 236,col 9)",
            "(line 237,col 9)-(line 243,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray()",
        "snippet": "    public void testAddObjectArrayToObjectArray() {\n        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));\n        Object[] newArray;\n        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n        newArray = ArrayUtils.addAll(stringArray1, (String[]) null);\n        assertNotSame(stringArray1, newArray);\n        assertTrue(Arrays.equals(stringArray1, newArray));\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, stringArray2);\n        assertNotSame(stringArray2, newArray);\n        assertTrue(Arrays.equals(stringArray2, newArray));\n        assertTrue(Arrays.equals((new String[]{\"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(stringArray1, stringArray2);\n        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n        assertTrue(Arrays.equals((new String[]{}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n        String[] stringArrayNull = new String []{null};\n        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);\n        assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n        assertEquals(String.class, newArray.getClass().getComponentType());\n\n        // boolean\n        assertTrue( Arrays.equals( new boolean[] { true, false, false, true },\n            ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { false, true },\n            ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );\n\n        assertTrue( Arrays.equals( new boolean[] { true, false },\n            ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );\n\n        // char\n        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' },\n            ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'c', 'd' },\n            ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );\n\n        assertTrue( Arrays.equals( new char[] { 'a', 'b' },\n            ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );\n\n        // byte\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 },\n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 },\n            ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );\n\n        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 },\n            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );\n\n        // short\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 },\n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 },\n            ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );\n\n        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 },\n            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );\n\n        // int\n        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 },\n            ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { -1000, -1 },\n            ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );\n\n        assertTrue( Arrays.equals( new int[] { 1, 1000 },\n            ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );\n\n        // long\n        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L },\n            ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n\n        assertTrue( Arrays.equals( new long[] { 1000L, -1000L },\n            ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );\n\n        assertTrue( Arrays.equals( new long[] { 1L, -1L },\n            ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );\n\n        // float\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f },\n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f },\n            ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );\n\n        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f },\n            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );\n\n        // double\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 },\n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { 0, 9.99 },\n            ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );\n\n        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI },\n            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );\n\n    }\n",
        "begin_line": 246,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 72)",
            "(line 248,col 9)-(line 248,col 26)",
            "(line 249,col 9)-(line 249,col 60)",
            "(line 250,col 9)-(line 250,col 60)",
            "(line 251,col 9)-(line 251,col 68)",
            "(line 252,col 9)-(line 252,col 46)",
            "(line 253,col 9)-(line 253,col 58)",
            "(line 254,col 9)-(line 254,col 75)",
            "(line 255,col 9)-(line 255,col 75)",
            "(line 256,col 9)-(line 256,col 57)",
            "(line 257,col 9)-(line 257,col 46)",
            "(line 258,col 9)-(line 258,col 58)",
            "(line 259,col 9)-(line 259,col 75)",
            "(line 260,col 9)-(line 260,col 75)",
            "(line 261,col 9)-(line 261,col 65)",
            "(line 262,col 9)-(line 262,col 90)",
            "(line 263,col 9)-(line 263,col 75)",
            "(line 264,col 9)-(line 264,col 85)",
            "(line 265,col 9)-(line 265,col 75)",
            "(line 266,col 9)-(line 266,col 62)",
            "(line 267,col 9)-(line 267,col 75)",
            "(line 268,col 9)-(line 268,col 74)",
            "(line 269,col 9)-(line 269,col 75)",
            "(line 270,col 9)-(line 270,col 62)",
            "(line 271,col 9)-(line 271,col 75)",
            "(line 272,col 9)-(line 272,col 99)",
            "(line 273,col 9)-(line 273,col 75)",
            "(line 274,col 9)-(line 274,col 62)",
            "(line 275,col 9)-(line 275,col 75)",
            "(line 276,col 9)-(line 276,col 55)",
            "(line 277,col 9)-(line 277,col 71)",
            "(line 278,col 9)-(line 278,col 72)",
            "(line 279,col 9)-(line 279,col 75)",
            "(line 282,col 9)-(line 283,col 98)",
            "(line 285,col 9)-(line 286,col 73)",
            "(line 288,col 9)-(line 289,col 73)",
            "(line 292,col 9)-(line 293,col 86)",
            "(line 295,col 9)-(line 296,col 67)",
            "(line 298,col 9)-(line 299,col 67)",
            "(line 302,col 9)-(line 303,col 106)",
            "(line 305,col 9)-(line 306,col 77)",
            "(line 308,col 9)-(line 309,col 77)",
            "(line 312,col 9)-(line 313,col 116)",
            "(line 315,col 9)-(line 316,col 82)",
            "(line 318,col 9)-(line 319,col 82)",
            "(line 322,col 9)-(line 323,col 84)",
            "(line 325,col 9)-(line 326,col 67)",
            "(line 328,col 9)-(line 329,col 65)",
            "(line 332,col 9)-(line 333,col 90)",
            "(line 335,col 9)-(line 336,col 72)",
            "(line 338,col 9)-(line 339,col 66)",
            "(line 342,col 9)-(line 343,col 95)",
            "(line 345,col 9)-(line 346,col 71)",
            "(line 348,col 9)-(line 349,col 72)",
            "(line 352,col 9)-(line 353,col 98)",
            "(line 355,col 9)-(line 356,col 68)",
            "(line 358,col 9)-(line 359,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtilsAddTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
        "signature": "org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex()",
        "snippet": "    public void testAddObjectAtIndex() {}\n",
        "begin_line": 363,
        "end_line": 363,
        "comment": "",
        "child_ranges": []
    }
]