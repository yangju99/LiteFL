[
    {
        "name": "StringEscapeUtils.escapeXml#505",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.escapeXml(java.lang.String)",
        "snippet": "    public static final String escapeXml(String input) {\n        return ESCAPE_XML.translate(input);\n    }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n     * <p>Escapes the characters in a {@code String} using XML entities.</p>\n     *\n     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n     * </p>\n     *\n     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n     * Does not support DTDs or external entities.</p>\n     *\n     * <p>Note that unicode characters greater than 0x7f are as of 3.0, no longer \n     *    escaped. If you still wish this functionality, you can achieve it \n     *    via the following: \n     * {@code StringEscapeUtils.ESCAPE_XML.with( new UnicodeEscaper(Range.between(0x7f, Integer.MAX_VALUE)) );}</p>\n     *\n     * @param input  the {@code String} to escape, may be null\n     * @return a new escaped {@code String}, {@code null} if null string input\n     * @see #unescapeXml(java.lang.String)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AggregateTranslator.translate#49",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/AggregateTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.AggregateTranslator",
        "signature": "org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer)",
        "snippet": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        for (CharSequenceTranslator translator : translators) {\n            int consumed = translator.translate(input, index, out);\n            if(consumed != 0) {\n                return consumed;\n            }\n        }\n        return 0;\n    }\n",
        "begin_line": 49,
        "end_line": 58,
        "comment": "\n     * The first translator to consume codepoints from the input is the 'winner'. \n     * Execution stops with the number of consumed codepoints being returned. \n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator": "\n     * Translate a set of codepoints, represented by an int index into a CharSequence, \n     * into another set of codepoints. The number of codepoints consumed must be returned, \n     * and the only IOExceptions thrown must be from interacting with the Writer so that \n     * the top level API may reliable ignore StringWriter IOExceptions. \n     *\n     * @param input CharSequence that is being translated\n     * @param index int representing the current point of translation\n     * @param out Writer to translate the text to\n     * @return int count of codepoints consumed\n     * @throws IOException if and only if the Writer produces an IOException\n     "
        },
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "LookupTranslator.translate#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslator",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer)",
        "snippet": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int max = longest;\n        if (index + longest > input.length()) {\n            max = input.length() - index;\n        }\n        // descend so as to get a greedy algorithm\n        for (int i = max; i >= shortest; i--) {\n            CharSequence subSeq = input.subSequence(index, index + i);\n            CharSequence result = lookupMap.get(subSeq);\n            if (result != null) {\n                out.write(result.toString());\n                return i;\n            }\n        }\n        return 0;\n    }\n",
        "begin_line": 63,
        "end_line": 79,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator": "\n     * Translate a set of codepoints, represented by an int index into a CharSequence, \n     * into another set of codepoints. The number of codepoints consumed must be returned, \n     * and the only IOExceptions thrown must be from interacting with the Writer so that \n     * the top level API may reliable ignore StringWriter IOExceptions. \n     *\n     * @param input CharSequence that is being translated\n     * @param index int representing the current point of translation\n     * @param out Writer to translate the text to\n     * @return int count of codepoints consumed\n     * @throws IOException if and only if the Writer produces an IOException\n     "
        },
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.ISO8859_1_ESCAPE#34",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE()",
        "snippet": "    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n     * Mapping to escape <a href=\"https://secure.wikimedia.org/wikipedia/en/wiki/ISO/IEC_8859-1\">ISO-8859-1</a>\n     * characters to their named HTML 3.x equivalents.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.ISO8859_1_UNESCAPE#138",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE()",
        "snippet": "    public static String[][] ISO8859_1_UNESCAPE() { return ISO8859_1_UNESCAPE.clone(); }\n",
        "begin_line": 138,
        "end_line": 138,
        "comment": "\n     * Reverse of {@link #ISO8859_1_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.HTML40_EXTENDED_ESCAPE#147",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE()",
        "snippet": "    public static String[][] HTML40_EXTENDED_ESCAPE() { return HTML40_EXTENDED_ESCAPE.clone(); }\n",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\n     * Mapping to escape additional <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">character entity\n     * references</a>. Note that this must be used with {@link #ISO8859_1_ESCAPE()} to get the full list of\n     * HTML 4.0 character entities.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.HTML40_EXTENDED_UNESCAPE#349",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE()",
        "snippet": "    public static String[][] HTML40_EXTENDED_UNESCAPE() { return HTML40_EXTENDED_UNESCAPE.clone(); }\n",
        "begin_line": 349,
        "end_line": 349,
        "comment": "\n     * Reverse of {@link #HTML40_EXTENDED_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.BASIC_ESCAPE#358",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE()",
        "snippet": "    public static String[][] BASIC_ESCAPE() { return BASIC_ESCAPE.clone(); }\n",
        "begin_line": 358,
        "end_line": 358,
        "comment": "\n     * Mapping to escape the basic XML and HTML character entities.\n     *\n     * Namely: {@code \" & < >}\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.BASIC_UNESCAPE#370",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE()",
        "snippet": "    public static String[][] BASIC_UNESCAPE() { return BASIC_UNESCAPE.clone(); }\n",
        "begin_line": 370,
        "end_line": 370,
        "comment": "\n     * Reverse of {@link #BASIC_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.APOS_ESCAPE#377",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE()",
        "snippet": "    public static String[][] APOS_ESCAPE() { return APOS_ESCAPE.clone(); }\n",
        "begin_line": 377,
        "end_line": 377,
        "comment": "\n     * Mapping to escape the apostrophe character to its XML character entity.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.APOS_UNESCAPE#386",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE()",
        "snippet": "    public static String[][] APOS_UNESCAPE() { return APOS_UNESCAPE.clone(); }\n",
        "begin_line": 386,
        "end_line": 386,
        "comment": "\n     * Reverse of {@link #APOS_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.JAVA_CTRL_CHARS_ESCAPE#395",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE()",
        "snippet": "    public static String[][] JAVA_CTRL_CHARS_ESCAPE() { return JAVA_CTRL_CHARS_ESCAPE.clone(); }\n",
        "begin_line": 395,
        "end_line": 395,
        "comment": "\n     * Mapping to escape the Java control characters.\n     *\n     * Namely: {@code \\b \\n \\t \\f \\r}\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.JAVA_CTRL_CHARS_UNESCAPE#408",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE()",
        "snippet": "    public static String[][] JAVA_CTRL_CHARS_UNESCAPE() { return JAVA_CTRL_CHARS_UNESCAPE.clone(); }\n",
        "begin_line": 408,
        "end_line": 408,
        "comment": "\n     * Reverse of {@link #JAVA_CTRL_CHARS_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.invert#416",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.invert(java.lang.String[][])",
        "snippet": "    public static String[][] invert(String[][] array) {\n        String[][] newarray = new String[array.length][2];\n        for(int i = 0; i<array.length; i++) {\n            newarray[i][0] = array[i][1];\n            newarray[i][1] = array[i][0];\n        }\n        return newarray;\n    }\n",
        "begin_line": 416,
        "end_line": 423,
        "comment": "\n     * Used to invert an escape array into an unescape array\n     * @param array String[][] to be inverted\n     * @return String[][] inverted array\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.with#113",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.with(org.apache.commons.lang3.text.translate.CharSequenceTranslator...)",
        "snippet": "    public final CharSequenceTranslator with(CharSequenceTranslator... translators) {\n        CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];\n        newArray[0] = this;\n        System.arraycopy(translators, 0, newArray, 1, translators.length);\n        return new AggregateTranslator(newArray);\n    }\n",
        "begin_line": 113,
        "end_line": 118,
        "comment": "\n     * Helper method to create a merger of this translator with another set of \n     * translators. Useful in customizing the standard functionality.\n     *\n     * @param translators CharSequenceTranslator array of translators to merge with this one\n     * @return CharSequenceTranslator merging this translator with the others\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "AggregateTranslator.AggregateTranslator#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/AggregateTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.AggregateTranslator",
        "signature": "org.apache.commons.lang3.text.translate.AggregateTranslator.AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator...)",
        "snippet": "    public AggregateTranslator(CharSequenceTranslator... translators) {\n        this.translators = ArrayUtils.clone(translators);\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "\n     * Specify the translators to be used at creation time. \n     *\n     * @param translators CharSequenceTranslator array to aggregate\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayUtils.clone#316",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "signature": "org.apache.commons.lang3.ArrayUtils.clone(T[])",
        "snippet": "    public static <T> T[] clone(T[] array) {\n        if (array == null) {\n            return null;\n        }\n        return array.clone();\n    }\n",
        "begin_line": 316,
        "end_line": 321,
        "comment": "\n     * <p>Shallow clones an array returning a typecast result and handling\n     * {@code null}.</p>\n     *\n     * <p>The objects in the array are not cloned, thus there is no special\n     * handling for multi-dimensional arrays.</p>\n     *\n     * <p>This method returns {@code null} for a {@code null} input array.</p>\n     *\n     * @param <T> the component type of the array\n     * @param array  the array to shallow clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "LookupTranslator.LookupTranslator#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslator",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslator.LookupTranslator(java.lang.CharSequence[]...)",
        "snippet": "    public LookupTranslator(CharSequence[]... lookup) {\n        lookupMap = new HashMap<CharSequence, CharSequence>();\n        int _shortest = Integer.MAX_VALUE;\n        int _longest = 0;\n        if (lookup != null) {\n            for (CharSequence[] seq : lookup) {\n                this.lookupMap.put(seq[0], seq[1]);\n                int sz = seq[0].length();\n                if (sz < _shortest) {\n                    _shortest = sz;\n                }\n                if (sz > _longest) {\n                    _longest = sz;\n                }\n            }\n        }\n        shortest = _shortest;\n        longest = _longest;\n    }\n",
        "begin_line": 40,
        "end_line": 58,
        "comment": "\n     * Define the lookup table to be used in translation\n     *\n     * @param lookup CharSequence[][] table of size [*][2]\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnicodeEscaper.outsideOf#84",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaper.outsideOf(int, int)",
        "snippet": "    public static UnicodeEscaper outsideOf(int codepointLow, int codepointHigh) {\n        return new UnicodeEscaper(codepointLow, codepointHigh, false);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * <p>Constructs a <code>UnicodeEscaper</code> outside of the specified values (exclusive). </p>\n     *\n     * @param codepointLow below which to escape\n     * @param codepointHigh above which to escape\n     * @return the newly created {@code UnicodeEscaper} instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnicodeEscaper.UnicodeEscaper#51",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)",
        "snippet": "    private UnicodeEscaper(int below, int above, boolean between) {\n        this.below = below;\n        this.above = above;\n        this.between = between;\n    }\n",
        "begin_line": 51,
        "end_line": 55,
        "comment": "\n     * <p>Constructs a <code>UnicodeEscaper</code> for the specified range. This is\n     * the underlying method for the other constructors/builders. The <code>below</code>\n     * and <code>above</code> boundaries are inclusive when <code>between</code> is\n     * <code>true</code> and exclusive when it is <code>false</code>. </p>\n     *\n     * @param below int value representing the lowest codepoint boundary\n     * @param above int value representing the highest codepoint boundary\n     * @param between whether to escape between the boundaries or outside them\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumericEntityUnescaper.NumericEntityUnescaper#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "class_name": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
        "signature": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION...)",
        "snippet": "    public NumericEntityUnescaper(OPTION... options) {\n        if(options.length > 0) {\n            this.options = EnumSet.copyOf(Arrays.asList(options));\n        } else {\n            this.options = EnumSet.copyOf(Arrays.asList(new OPTION[] { OPTION.semiColonRequired }));\n        }\n    }\n",
        "begin_line": 56,
        "end_line": 62,
        "comment": "\n     * Create a UnicodeUnescaper.\n     *\n     * The constructor takes a list of options, only one type of which is currently \n     * available (whether to allow, error or ignore the semi-colon on the end of a \n     * numeric entity to being missing).\n     *\n     * For example, to support numeric entities without a ';':\n     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional)\n     * and to throw an IllegalArgumentException when they're missing:\n     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon)\n     *\n     * Note that the default behaviour is to ignore them. \n     *\n     * @param options to apply to this unescaper\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.translate#75",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer)",
        "snippet": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = Character.codePointCount(input, 0, input.length());\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n            }\n            else {\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                    if (pos < len - 2) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n                    } else {\n                        pos++;\n                    }\n                }\n                pos--;\n            }\n            pos++;\n        }\n    }\n",
        "begin_line": 75,
        "end_line": 104,
        "comment": "\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.translate#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence)",
        "snippet": "    public final String translate(CharSequence input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length() * 2);\n            translate(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }\n",
        "begin_line": 53,
        "end_line": 65,
        "comment": "\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 1
    }
]