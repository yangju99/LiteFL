[
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.StringEscapeUtilsTest(java.lang.String)",
        "snippet": "    public StringEscapeUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringEscapeUtils());\n        Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n    }\n",
        "begin_line": 39,
        "end_line": 46,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 47)",
            "(line 41,col 9)-(line 41,col 82)",
            "(line 42,col 9)-(line 42,col 37)",
            "(line 43,col 9)-(line 43,col 70)",
            "(line 44,col 9)-(line 44,col 86)",
            "(line 45,col 9)-(line 45,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava()",
        "snippet": "    public void testEscapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.escapeJava(null));\n        try {\n            StringEscapeUtils.ESCAPE_JAVA.translate(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.ESCAPE_JAVA.translate(\"\", null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEscapeJava(\"empty string\", \"\", \"\");\n        assertEscapeJava(FOO, FOO);\n        assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\n        assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\n        assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\n        assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n        assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n        assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n        assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\n        assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\n        assertEscapeJava(\"Should use capitalized unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\n\n        assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n                \"He didn't say, \\\"stop!\\\"\");\n        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00A0\",\n                \"This space is non-breaking:\\u00a0\");\n        assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\",\n                \"\\uABCD\\u1234\\u012C\");\n    }\n",
        "begin_line": 49,
        "end_line": 84,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 50,col 9)-(line 50,col 63)",
            "(line 51,col 9)-(line 57,col 9)",
            "(line 58,col 9)-(line 64,col 9)",
            "(line 66,col 9)-(line 66,col 49)",
            "(line 67,col 9)-(line 67,col 35)",
            "(line 68,col 9)-(line 68,col 45)",
            "(line 69,col 9)-(line 69,col 52)",
            "(line 70,col 9)-(line 70,col 73)",
            "(line 71,col 9)-(line 71,col 54)",
            "(line 72,col 9)-(line 72,col 46)",
            "(line 73,col 9)-(line 73,col 46)",
            "(line 74,col 9)-(line 74,col 46)",
            "(line 75,col 9)-(line 75,col 46)",
            "(line 76,col 9)-(line 76,col 84)",
            "(line 78,col 9)-(line 79,col 44)",
            "(line 80,col 9)-(line 81,col 53)",
            "(line 82,col 9)-(line 83,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash()",
        "snippet": "    public void testEscapeJavaWithSlash() {\n        final String input = \"String with a slash (/) in it\";\n\n        final String expected = input;\n        final String actual = StringEscapeUtils.escapeJava(input);\n\n        /**\n         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape\n         * in a Java string.\n         */\n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 89,
        "end_line": 100,
        "comment": "\n     * https://issues.apache.org/jira/browse/LANG-421\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 61)",
            "(line 92,col 9)-(line 92,col 38)",
            "(line 93,col 9)-(line 93,col 66)",
            "(line 99,col 9)-(line 99,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.ESCAPE_JAVA.translate(original, writer);\n        assertEquals(expected, writer.toString());\n    }\n",
        "begin_line": 106,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 66)",
            "(line 108,col 9)-(line 108,col 90)",
            "(line 109,col 9)-(line 109,col 51)",
            "(line 111,col 9)-(line 111,col 49)",
            "(line 112,col 9)-(line 112,col 66)",
            "(line 113,col 9)-(line 113,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava()",
        "snippet": "    public void testUnescapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.unescapeJava(null));\n        try {\n            StringEscapeUtils.UNESCAPE_JAVA.translate(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.UNESCAPE_JAVA.translate(\"\", null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n            fail();\n        } catch (RuntimeException ex) {\n        }\n        \n        assertUnescapeJava(\"\", \"\");\n        assertUnescapeJava(\"test\", \"test\");\n        assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n        assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n        assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\n        assertUnescapeJava(\"\", \"\\\\\");\n        //foo\n        assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n        assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n        assertUnescapeJava(\"unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\n    }\n",
        "begin_line": 116,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 65)",
            "(line 118,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 136,col 9)",
            "(line 138,col 9)-(line 138,col 35)",
            "(line 139,col 9)-(line 139,col 43)",
            "(line 140,col 9)-(line 140,col 53)",
            "(line 141,col 9)-(line 141,col 76)",
            "(line 142,col 9)-(line 142,col 66)",
            "(line 143,col 9)-(line 143,col 37)",
            "(line 145,col 9)-(line 145,col 71)",
            "(line 146,col 9)-(line 146,col 71)",
            "(line 147,col 9)-(line 147,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }\n",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.UNESCAPE_JAVA.translate(original, writer);\n        assertEquals(unescaped, writer.toString());\n\n    }\n",
        "begin_line": 154,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 36)",
            "(line 156,col 9)-(line 156,col 65)",
            "(line 158,col 9)-(line 163,col 34)",
            "(line 165,col 9)-(line 165,col 49)",
            "(line 166,col 9)-(line 166,col 68)",
            "(line 167,col 9)-(line 167,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript()",
        "snippet": "    public void testEscapeEcmaScript() {\n        assertEquals(null, StringEscapeUtils.escapeEcmaScript(null));\n        try {\n            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(\"\", null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeEcmaScript(\"He didn't say, \\\"stop!\\\"\"));\n        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n                StringEscapeUtils.escapeEcmaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n    }\n",
        "begin_line": 171,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 69)",
            "(line 173,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 186,col 9)",
            "(line 188,col 9)-(line 188,col 119)",
            "(line 189,col 9)-(line 190,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml()",
        "snippet": "    public void testEscapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][1];\n            String original = htmlEscapes[i][2];\n            assertEquals(message, expected, StringEscapeUtils.escapeHtml4(original));\n            StringWriter sw = new StringWriter();\n            try {\n                StringEscapeUtils.ESCAPE_HTML4.translate(original, sw);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n    }\n",
        "begin_line": 211,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 224,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4()",
        "snippet": "    public void testUnescapeHtml4() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][2];\n            String original = htmlEscapes[i][1];\n            assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original));\n            \n            StringWriter sw = new StringWriter();\n            try {\n                StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n        // \\u00E7 is a cedilla (c with wiggle under)\n        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n        // on some locales        \n        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml4(\"Fran\\u00E7ais\"));\n        \n        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml4(\"Hello&;World\"));\n        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml4(\"Hello&#;World\"));\n        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml4(\"Hello&# ;World\"));\n        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml4(\"Hello&##;World\"));\n    }\n",
        "begin_line": 227,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 241,col 9)",
            "(line 245,col 9)-(line 245,col 119)",
            "(line 247,col 9)-(line 247,col 86)",
            "(line 248,col 9)-(line 248,col 88)",
            "(line 249,col 9)-(line 249,col 90)",
            "(line 250,col 9)-(line 250,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml()",
        "snippet": "    public void testUnescapeHexCharsHtml() {\n        // Simple easy to grok test \n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#x80;&#x9F;\"));\n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#X80;&#X9F;\"));\n        // Test all Character values:\n        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n            Character c1 = new Character(i);\n            Character c2 = new Character((char)(i+1));\n            String expected = c1.toString() + c2.toString();\n            String escapedC1 = \"&#x\" + Integer.toHexString((c1.charValue())) + \";\";\n            String escapedC2 = \"&#x\" + Integer.toHexString((c2.charValue())) + \";\";\n            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2));\n        }\n    }\n",
        "begin_line": 253,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 109)",
            "(line 256,col 9)-(line 256,col 109)",
            "(line 258,col 9)-(line 265,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity()",
        "snippet": "    public void testUnescapeUnknownEntity() throws Exception\n    {\n        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml4(\"&zzzz;\"));\n    }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions()",
        "snippet": "    public void testEscapeHtmlVersions() throws Exception\n    {\n        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml4(\"\\u0392\"));\n        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml4(\"&Beta;\"));\n\n        // TODO: refine API for escaping/unescaping specific HTML versions\n\n    }\n",
        "begin_line": 273,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 275,col 9)-(line 275,col 72)",
            "(line 276,col 9)-(line 276,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml()",
        "snippet": "    public void testEscapeXml() throws Exception {\n        assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n        assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n\n        assertEquals(\"XML should not escape >0x7f values\",\n                \"\\u00A1\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n        assertEquals(\"XML should be able to unescape >0x7f values\",\n                \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n\n        assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n        assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\n        assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeXml(null));\n        assertEquals(null, StringEscapeUtils.unescapeXml(null));\n\n        StringWriter sw = new StringWriter();\n        try {\n            StringEscapeUtils.ESCAPE_XML.translate(\"<abc>\", sw);\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n\n        sw = new StringWriter();\n        try {\n            StringEscapeUtils.UNESCAPE_XML.translate(\"&lt;abc&gt;\", sw);\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n    }\n",
        "begin_line": 282,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 74)",
            "(line 284,col 9)-(line 284,col 76)",
            "(line 286,col 9)-(line 287,col 65)",
            "(line 288,col 9)-(line 289,col 67)",
            "(line 291,col 9)-(line 291,col 75)",
            "(line 292,col 9)-(line 292,col 73)",
            "(line 293,col 9)-(line 293,col 58)",
            "(line 294,col 9)-(line 294,col 62)",
            "(line 295,col 9)-(line 295,col 64)",
            "(line 297,col 9)-(line 297,col 45)",
            "(line 298,col 9)-(line 301,col 9)",
            "(line 302,col 9)-(line 302,col 83)",
            "(line 304,col 9)-(line 304,col 32)",
            "(line 305,col 9)-(line 308,col 9)",
            "(line 309,col 9)-(line 309,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand()",
        "snippet": "    public void testStandaloneAmphersand() {\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml4(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml4(\"test & &lt;\"));\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n    }\n",
        "begin_line": 314,
        "end_line": 319,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38569",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 78)",
            "(line 316,col 9)-(line 316,col 81)",
            "(line 317,col 9)-(line 317,col 76)",
            "(line 318,col 9)-(line 318,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testLang313()",
        "snippet": "    public void testLang313() {\n        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml4(\"& &amp;\"));\n    }\n",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString()",
        "snippet": "    public void testEscapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n        assertEquals(\"\\\"foo,bar\\\"\",      StringEscapeUtils.escapeCsv(\"foo,bar\"));\n        assertEquals(\"\\\"foo\\nbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\n        assertEquals(\"\\\"foo\\rbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\n        assertEquals(\"\\\"foo\\\"\\\"bar\\\"\",   StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\n        assertEquals(\"\",   StringEscapeUtils.escapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeCsv(null));\n    }\n",
        "begin_line": 325,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 81)",
            "(line 328,col 9)-(line 328,col 81)",
            "(line 329,col 9)-(line 329,col 82)",
            "(line 330,col 9)-(line 330,col 82)",
            "(line 331,col 9)-(line 331,col 82)",
            "(line 332,col 9)-(line 332,col 60)",
            "(line 333,col 9)-(line 333,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter()",
        "snippet": "    public void testEscapeCsvWriter() throws Exception\n    {\n        checkCsvEscapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvEscapeWriter(\"\\\"foo,bar\\\"\",    \"foo,bar\");\n        checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\",   \"foo\\nbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\",   \"foo\\rbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\n        checkCsvEscapeWriter(\"\", null);\n        checkCsvEscapeWriter(\"\", \"\");\n    }\n",
        "begin_line": 336,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 58)",
            "(line 339,col 9)-(line 339,col 58)",
            "(line 340,col 9)-(line 340,col 59)",
            "(line 341,col 9)-(line 341,col 59)",
            "(line 342,col 9)-(line 342,col 59)",
            "(line 343,col 9)-(line 343,col 39)",
            "(line 344,col 9)-(line 344,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvEscapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvEscapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.ESCAPE_CSV.translate(value, writer);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n",
        "begin_line": 347,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 348,col 9)-(line 354,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString()",
        "snippet": "    public void testUnescapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.unescapeCsv(\"foo.bar\"));\n        assertEquals(\"foo,bar\",      StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\n        assertEquals(\"foo\\nbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\n        assertEquals(\"foo\\rbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\n        assertEquals(\"foo\\\"bar\",   StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\n        assertEquals(\"\",   StringEscapeUtils.unescapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.unescapeCsv(null));\n\n        assertEquals(\"\\\"foo.bar\\\"\",          StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\n    }\n",
        "begin_line": 357,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 83)",
            "(line 360,col 9)-(line 360,col 83)",
            "(line 361,col 9)-(line 361,col 84)",
            "(line 362,col 9)-(line 362,col 84)",
            "(line 363,col 9)-(line 363,col 84)",
            "(line 364,col 9)-(line 364,col 62)",
            "(line 365,col 9)-(line 365,col 64)",
            "(line 367,col 9)-(line 367,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter()",
        "snippet": "    public void testUnescapeCsvWriter() throws Exception\n    {\n        checkCsvUnescapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvUnescapeWriter(\"foo,bar\",    \"\\\"foo,bar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\nbar\",   \"\\\"foo\\nbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\rbar\",   \"\\\"foo\\rbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\n        checkCsvUnescapeWriter(\"\", null);\n        checkCsvUnescapeWriter(\"\", \"\");\n\n        checkCsvUnescapeWriter(\"\\\"foo.bar\\\"\",        \"\\\"foo.bar\\\"\");\n    }\n",
        "begin_line": 370,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 372,col 60)",
            "(line 373,col 9)-(line 373,col 60)",
            "(line 374,col 9)-(line 374,col 61)",
            "(line 375,col 9)-(line 375,col 61)",
            "(line 376,col 9)-(line 376,col 61)",
            "(line 377,col 9)-(line 377,col 41)",
            "(line 378,col 9)-(line 378,col 39)",
            "(line 380,col 9)-(line 380,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvUnescapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvUnescapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.UNESCAPE_CSV.translate(value, writer);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n",
        "begin_line": 383,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 384,col 9)-(line 390,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode()",
        "snippet": "    public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {\n        // this is the utf8 representation of the character:\n        // COUNTING ROD UNIT DIGIT THREE\n        // in unicode\n        // codepoint: U+1D362\n        byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };\n\n        String original = new String(data, \"UTF8\");\n\n        String escaped = StringEscapeUtils.escapeHtml4( original );\n        assertEquals( \"High unicode should not have been escaped\", original, escaped);\n\n        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n        assertEquals( \"High unicode should have been unchanged\", original, unescaped);\n\n// TODO: I think this should hold, needs further investigation\n//        String unescapedFromEntity = StringEscapeUtils.unescapeHtml4( \"&#119650;\" );\n//        assertEquals( \"High unicode should have been unescaped\", original, unescapedFromEntity);\n    }\n",
        "begin_line": 394,
        "end_line": 412,
        "comment": " https://issues.apache.org/jira/browse/LANG-480",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 84)",
            "(line 401,col 9)-(line 401,col 51)",
            "(line 403,col 9)-(line 403,col 67)",
            "(line 404,col 9)-(line 404,col 86)",
            "(line 406,col 9)-(line 406,col 70)",
            "(line 407,col 9)-(line 407,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana()",
        "snippet": "    public void testEscapeHiragana() {\n        // Some random Japanese unicode characters\n        String original = \"\\u304B\\u304C\\u3068\";\n        String escaped = StringEscapeUtils.escapeHtml4(original);\n        assertEquals( \"Hiragana character unicode behaviour should not be being escaped by escapeHtml4\",\n        original, escaped);\n\n        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n\n        assertEquals( \"Hiragana character unicode behaviour has changed - expected no unescaping\", escaped, unescaped);\n    }\n",
        "begin_line": 415,
        "end_line": 425,
        "comment": " https://issues.apache.org/jira/browse/LANG-339",
        "child_ranges": [
            "(line 417,col 9)-(line 417,col 47)",
            "(line 418,col 9)-(line 418,col 65)",
            "(line 419,col 9)-(line 420,col 27)",
            "(line 422,col 9)-(line 422,col 70)",
            "(line 424,col 9)-(line 424,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtilsTest.testLang720()",
        "snippet": "    public void testLang720() {\n        String input = new StringBuilder(\"\\ud842\\udfb7\").append(\"A\").toString();\n        String escaped = StringEscapeUtils.escapeXml(input);\n        assertEquals(input, escaped);\n    }\n",
        "begin_line": 428,
        "end_line": 432,
        "comment": " https://issues.apache.org/jira/browse/LANG-720",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 80)",
            "(line 430,col 9)-(line 430,col 60)",
            "(line 431,col 9)-(line 431,col 37)"
        ]
    }
]