[
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.ESCAPE_JAVA",
        "snippet": "    public static final CharSequenceTranslator ESCAPE_JAVA = \n          new LookupTranslator(\n            new String[][] { \n              {\"\\\"\", \"\\\\\\\"\"},\n              {\"\\\\\", \"\\\\\\\\\"},\n          }).with(\n            new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())\n          ).with(\n            UnicodeEscaper.outsideOf(32, 0x7f) \n        );",
        "begin_line": 52,
        "end_line": 61,
        "comment": "\n     * Translator object for escaping Java. \n     * \n     * While {@link #escapeJava(String)} is the expected method of use, this \n     * object allows the Java escaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.ESCAPE_ECMASCRIPT",
        "snippet": "    public static final CharSequenceTranslator ESCAPE_ECMASCRIPT = \n        new AggregateTranslator(\n            new LookupTranslator(\n                      new String[][] { \n                            {\"'\", \"\\\\'\"},\n                            {\"\\\"\", \"\\\\\\\"\"},\n                            {\"\\\\\", \"\\\\\\\\\"},\n                            {\"/\", \"\\\\/\"}\n                      }),\n            new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),\n            UnicodeEscaper.outsideOf(32, 0x7f) \n        );",
        "begin_line": 72,
        "end_line": 83,
        "comment": "\n     * Translator object for escaping EcmaScript/JavaScript. \n     * \n     * While {@link #escapeEcmaScript(String)} is the expected method of use, this \n     * object allows the EcmaScript escaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.ESCAPE_XML",
        "snippet": "    public static final CharSequenceTranslator ESCAPE_XML = \n        new AggregateTranslator(\n            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n            new LookupTranslator(EntityArrays.APOS_ESCAPE())\n        );",
        "begin_line": 94,
        "end_line": 98,
        "comment": "\n     * Translator object for escaping XML.\n     * \n     * While {@link #escapeXml(String)} is the expected method of use, this \n     * object allows the XML escaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML3",
        "snippet": "    public static final CharSequenceTranslator ESCAPE_HTML3 = \n        new AggregateTranslator(\n            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n            new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE())\n        );",
        "begin_line": 109,
        "end_line": 113,
        "comment": "\n     * Translator object for escaping HTML version 3.0.\n     * \n     * While {@link #escapeHtml3(String)} is the expected method of use, this \n     * object allows the HTML escaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.ESCAPE_HTML4",
        "snippet": "    public static final CharSequenceTranslator ESCAPE_HTML4 = \n        new AggregateTranslator(\n            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n            new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE()),\n            new LookupTranslator(EntityArrays.HTML40_EXTENDED_ESCAPE())\n        );",
        "begin_line": 124,
        "end_line": 129,
        "comment": "\n     * Translator object for escaping HTML version 4.0.\n     * \n     * While {@link #escapeHtml4(String)} is the expected method of use, this \n     * object allows the HTML escaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.ESCAPE_CSV",
        "snippet": "    public static final CharSequenceTranslator ESCAPE_CSV = new CsvEscaper();",
        "begin_line": 140,
        "end_line": 140,
        "comment": "\n     * Translator object for escaping individual Comma Separated Values. \n     * \n     * While {@link #escapeCsv(String)} is the expected method of use, this \n     * object allows the CSV escaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.CsvEscaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvEscaper.CSV_DELIMITER",
        "snippet": "        private static final char CSV_DELIMITER = ',';",
        "begin_line": 147,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.CsvEscaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvEscaper.CSV_QUOTE",
        "snippet": "        private static final char CSV_QUOTE = '\"';",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.CsvEscaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvEscaper.CSV_QUOTE_STR",
        "snippet": "        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);",
        "begin_line": 149,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.CsvEscaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvEscaper.CSV_SEARCH_CHARS",
        "snippet": "        private static final char[] CSV_SEARCH_CHARS = \n            new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};",
        "begin_line": 150,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_JAVA",
        "snippet": "    public static final CharSequenceTranslator UNESCAPE_JAVA = \n        new AggregateTranslator(\n            new OctalUnescaper(),     // .between('\\1', '\\377'),\n            new UnicodeUnescaper(),\n            new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_UNESCAPE()),\n            new LookupTranslator(\n                      new String[][] { \n                            {\"\\\\\\\\\", \"\\\\\"},\n                            {\"\\\\\\\"\", \"\\\"\"},\n                            {\"\\\\'\", \"'\"},\n                            {\"\\\\\", \"\"}\n                      })\n        );",
        "begin_line": 183,
        "end_line": 195,
        "comment": " TODO: throw \"illegal character: \\92\" as an Exception if a \\ on the end of the Java (as per the compiler)?"
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_ECMASCRIPT",
        "snippet": "    public static final CharSequenceTranslator UNESCAPE_ECMASCRIPT = UNESCAPE_JAVA;",
        "begin_line": 206,
        "end_line": 206,
        "comment": "\n     * Translator object for unescaping escaped EcmaScript. \n     * \n     * While {@link #unescapeEcmaScript(String)} is the expected method of use, this \n     * object allows the EcmaScript unescaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML3",
        "snippet": "    public static final CharSequenceTranslator UNESCAPE_HTML3 = \n        new AggregateTranslator(\n            new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n            new LookupTranslator(EntityArrays.ISO8859_1_UNESCAPE()),\n            new NumericEntityUnescaper()\n        );",
        "begin_line": 217,
        "end_line": 222,
        "comment": "\n     * Translator object for unescaping escaped HTML 3.0. \n     * \n     * While {@link #unescapeHtml3(String)} is the expected method of use, this \n     * object allows the HTML unescaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_HTML4",
        "snippet": "    public static final CharSequenceTranslator UNESCAPE_HTML4 = \n        new AggregateTranslator(\n            new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n            new LookupTranslator(EntityArrays.ISO8859_1_UNESCAPE()),\n            new LookupTranslator(EntityArrays.HTML40_EXTENDED_UNESCAPE()),\n            new NumericEntityUnescaper()\n        );",
        "begin_line": 233,
        "end_line": 239,
        "comment": "\n     * Translator object for unescaping escaped HTML 4.0. \n     * \n     * While {@link #unescapeHtml4(String)} is the expected method of use, this \n     * object allows the HTML unescaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_XML",
        "snippet": "    public static final CharSequenceTranslator UNESCAPE_XML = \n        new AggregateTranslator(\n            new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n            new LookupTranslator(EntityArrays.APOS_UNESCAPE()),\n            new NumericEntityUnescaper()\n        );",
        "begin_line": 250,
        "end_line": 255,
        "comment": "\n     * Translator object for unescaping escaped XML.\n     * \n     * While {@link #unescapeXml(String)} is the expected method of use, this \n     * object allows the XML unescaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.UNESCAPE_CSV",
        "snippet": "    public static final CharSequenceTranslator UNESCAPE_CSV = new CsvUnescaper();",
        "begin_line": 266,
        "end_line": 266,
        "comment": "\n     * Translator object for unescaping escaped Comma Separated Value entries.\n     * \n     * While {@link #unescapeCsv(String)} is the expected method of use, this \n     * object allows the CSV unescaping functionality to be used \n     * as the foundation for a custom translator. \n     *\n     * @since 3.0\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.CsvUnescaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvUnescaper.CSV_DELIMITER",
        "snippet": "        private static final char CSV_DELIMITER = ',';",
        "begin_line": 270,
        "end_line": 270,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.CsvUnescaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvUnescaper.CSV_QUOTE",
        "snippet": "        private static final char CSV_QUOTE = '\"';",
        "begin_line": 271,
        "end_line": 271,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.CsvUnescaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvUnescaper.CSV_QUOTE_STR",
        "snippet": "        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);",
        "begin_line": 272,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.CsvUnescaper",
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "signature": "org.apache.commons.lang3.CsvUnescaper.CSV_SEARCH_CHARS",
        "snippet": "        private static final char[] CSV_SEARCH_CHARS = \n            new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};",
        "begin_line": 273,
        "end_line": 274,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "signature": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.options",
        "snippet": "    private final EnumSet<OPTION> options;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " TODO?: Create an OptionsSet class to hide some of the conditional logic below"
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.AggregateTranslator",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/AggregateTranslator.java",
        "signature": "org.apache.commons.lang3.text.translate.AggregateTranslator.translators",
        "snippet": "    private final CharSequenceTranslator[] translators;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslator",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslator.lookupMap",
        "snippet": "    private final HashMap<CharSequence, CharSequence> lookupMap;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslator",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslator.shortest",
        "snippet": "    private final int shortest;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslator",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslator.longest",
        "snippet": "    private final int longest;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE",
        "snippet": "    private static final String[][] ISO8859_1_ESCAPE = {\n        {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n        {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark\n        {\"\\u00A2\", \"&cent;\"}, // cent sign\n        {\"\\u00A3\", \"&pound;\"}, // pound sign\n        {\"\\u00A4\", \"&curren;\"}, // currency sign\n        {\"\\u00A5\", \"&yen;\"}, // yen sign = yuan sign\n        {\"\\u00A6\", \"&brvbar;\"}, // broken bar = broken vertical bar\n        {\"\\u00A7\", \"&sect;\"}, // section sign\n        {\"\\u00A8\", \"&uml;\"}, // diaeresis = spacing diaeresis\n        {\"\\u00A9\", \"&copy;\"}, // \\xa9 - copyright sign\n        {\"\\u00AA\", \"&ordf;\"}, // feminine ordinal indicator\n        {\"\\u00AB\", \"&laquo;\"}, // left-pointing double angle quotation mark = left pointing guillemet\n        {\"\\u00AC\", \"&not;\"}, // not sign\n        {\"\\u00AD\", \"&shy;\"}, // soft hyphen = discretionary hyphen\n        {\"\\u00AE\", \"&reg;\"}, // \\xae - registered trademark sign\n        {\"\\u00AF\", \"&macr;\"}, // macron = spacing macron = overline = APL overbar\n        {\"\\u00B0\", \"&deg;\"}, // degree sign\n        {\"\\u00B1\", \"&plusmn;\"}, // plus-minus sign = plus-or-minus sign\n        {\"\\u00B2\", \"&sup2;\"}, // superscript two = superscript digit two = squared\n        {\"\\u00B3\", \"&sup3;\"}, // superscript three = superscript digit three = cubed\n        {\"\\u00B4\", \"&acute;\"}, // acute accent = spacing acute\n        {\"\\u00B5\", \"&micro;\"}, // micro sign\n        {\"\\u00B6\", \"&para;\"}, // pilcrow sign = paragraph sign\n        {\"\\u00B7\", \"&middot;\"}, // middle dot = Georgian comma = Greek middle dot\n        {\"\\u00B8\", \"&cedil;\"}, // cedilla = spacing cedilla\n        {\"\\u00B9\", \"&sup1;\"}, // superscript one = superscript digit one\n        {\"\\u00BA\", \"&ordm;\"}, // masculine ordinal indicator\n        {\"\\u00BB\", \"&raquo;\"}, // right-pointing double angle quotation mark = right pointing guillemet\n        {\"\\u00BC\", \"&frac14;\"}, // vulgar fraction one quarter = fraction one quarter\n        {\"\\u00BD\", \"&frac12;\"}, // vulgar fraction one half = fraction one half\n        {\"\\u00BE\", \"&frac34;\"}, // vulgar fraction three quarters = fraction three quarters\n        {\"\\u00BF\", \"&iquest;\"}, // inverted question mark = turned question mark\n        {\"\\u00C0\", \"&Agrave;\"}, // \\xc0 - uppercase A, grave accent\n        {\"\\u00C1\", \"&Aacute;\"}, // \\xc1 - uppercase A, acute accent\n        {\"\\u00C2\", \"&Acirc;\"}, // \\xc2 - uppercase A, circumflex accent\n        {\"\\u00C3\", \"&Atilde;\"}, // \\xc3 - uppercase A, tilde\n        {\"\\u00C4\", \"&Auml;\"}, // \\xc4 - uppercase A, umlaut\n        {\"\\u00C5\", \"&Aring;\"}, // \\xc5 - uppercase A, ring\n        {\"\\u00C6\", \"&AElig;\"}, // \\xc6 - uppercase AE\n        {\"\\u00C7\", \"&Ccedil;\"}, // \\xc7 - uppercase C, cedilla\n        {\"\\u00C8\", \"&Egrave;\"}, // \\xc8 - uppercase E, grave accent\n        {\"\\u00C9\", \"&Eacute;\"}, // \\xc9 - uppercase E, acute accent\n        {\"\\u00CA\", \"&Ecirc;\"}, // \\xca - uppercase E, circumflex accent\n        {\"\\u00CB\", \"&Euml;\"}, // \\xcb - uppercase E, umlaut\n        {\"\\u00CC\", \"&Igrave;\"}, // \\xcc - uppercase I, grave accent\n        {\"\\u00CD\", \"&Iacute;\"}, // \\xcd - uppercase I, acute accent\n        {\"\\u00CE\", \"&Icirc;\"}, // \\xce - uppercase I, circumflex accent\n        {\"\\u00CF\", \"&Iuml;\"}, // \\xcf - uppercase I, umlaut\n        {\"\\u00D0\", \"&ETH;\"}, // \\xd0 - uppercase Eth, Icelandic\n        {\"\\u00D1\", \"&Ntilde;\"}, // \\xd1 - uppercase N, tilde\n        {\"\\u00D2\", \"&Ograve;\"}, // \\xd2 - uppercase O, grave accent\n        {\"\\u00D3\", \"&Oacute;\"}, // \\xd3 - uppercase O, acute accent\n        {\"\\u00D4\", \"&Ocirc;\"}, // \\xd4 - uppercase O, circumflex accent\n        {\"\\u00D5\", \"&Otilde;\"}, // \\xd5 - uppercase O, tilde\n        {\"\\u00D6\", \"&Ouml;\"}, // \\xd6 - uppercase O, umlaut\n        {\"\\u00D7\", \"&times;\"}, // multiplication sign\n        {\"\\u00D8\", \"&Oslash;\"}, // \\xd8 - uppercase O, slash\n        {\"\\u00D9\", \"&Ugrave;\"}, // \\xd9 - uppercase U, grave accent\n        {\"\\u00DA\", \"&Uacute;\"}, // \\xda - uppercase U, acute accent\n        {\"\\u00DB\", \"&Ucirc;\"}, // \\xdb - uppercase U, circumflex accent\n        {\"\\u00DC\", \"&Uuml;\"}, // \\xdc - uppercase U, umlaut\n        {\"\\u00DD\", \"&Yacute;\"}, // \\xdd - uppercase Y, acute accent\n        {\"\\u00DE\", \"&THORN;\"}, // \\xde - uppercase THORN, Icelandic\n        {\"\\u00DF\", \"&szlig;\"}, // \\xdf - lowercase sharps, German\n        {\"\\u00E0\", \"&agrave;\"}, // \\xe0 - lowercase a, grave accent\n        {\"\\u00E1\", \"&aacute;\"}, // \\xe1 - lowercase a, acute accent\n        {\"\\u00E2\", \"&acirc;\"}, // \\xe2 - lowercase a, circumflex accent\n        {\"\\u00E3\", \"&atilde;\"}, // \\xe3 - lowercase a, tilde\n        {\"\\u00E4\", \"&auml;\"}, // \\xe4 - lowercase a, umlaut\n        {\"\\u00E5\", \"&aring;\"}, // \\xe5 - lowercase a, ring\n        {\"\\u00E6\", \"&aelig;\"}, // \\xe6 - lowercase ae\n        {\"\\u00E7\", \"&ccedil;\"}, // \\xe7 - lowercase c, cedilla\n        {\"\\u00E8\", \"&egrave;\"}, // \\xe8 - lowercase e, grave accent\n        {\"\\u00E9\", \"&eacute;\"}, // \\xe9 - lowercase e, acute accent\n        {\"\\u00EA\", \"&ecirc;\"}, // \\xea - lowercase e, circumflex accent\n        {\"\\u00EB\", \"&euml;\"}, // \\xeb - lowercase e, umlaut\n        {\"\\u00EC\", \"&igrave;\"}, // \\xec - lowercase i, grave accent\n        {\"\\u00ED\", \"&iacute;\"}, // \\xed - lowercase i, acute accent\n        {\"\\u00EE\", \"&icirc;\"}, // \\xee - lowercase i, circumflex accent\n        {\"\\u00EF\", \"&iuml;\"}, // \\xef - lowercase i, umlaut\n        {\"\\u00F0\", \"&eth;\"}, // \\xf0 - lowercase eth, Icelandic\n        {\"\\u00F1\", \"&ntilde;\"}, // \\xf1 - lowercase n, tilde\n        {\"\\u00F2\", \"&ograve;\"}, // \\xf2 - lowercase o, grave accent\n        {\"\\u00F3\", \"&oacute;\"}, // \\xf3 - lowercase o, acute accent\n        {\"\\u00F4\", \"&ocirc;\"}, // \\xf4 - lowercase o, circumflex accent\n        {\"\\u00F5\", \"&otilde;\"}, // \\xf5 - lowercase o, tilde\n        {\"\\u00F6\", \"&ouml;\"}, // \\xf6 - lowercase o, umlaut\n        {\"\\u00F7\", \"&divide;\"}, // division sign\n        {\"\\u00F8\", \"&oslash;\"}, // \\xf8 - lowercase o, slash\n        {\"\\u00F9\", \"&ugrave;\"}, // \\xf9 - lowercase u, grave accent\n        {\"\\u00FA\", \"&uacute;\"}, // \\xfa - lowercase u, acute accent\n        {\"\\u00FB\", \"&ucirc;\"}, // \\xfb - lowercase u, circumflex accent\n        {\"\\u00FC\", \"&uuml;\"}, // \\xfc - lowercase u, umlaut\n        {\"\\u00FD\", \"&yacute;\"}, // \\xfd - lowercase y, acute accent\n        {\"\\u00FE\", \"&thorn;\"}, // \\xfe - lowercase thorn, Icelandic\n        {\"\\u00FF\", \"&yuml;\"}, // \\xff - lowercase y, umlaut\n    };",
        "begin_line": 35,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE",
        "snippet": "    private static final String[][] ISO8859_1_UNESCAPE = invert(ISO8859_1_ESCAPE);",
        "begin_line": 139,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE",
        "snippet": "    private static final String[][] HTML40_EXTENDED_ESCAPE = {\n        // <!-- Latin Extended-B -->\n        {\"\\u0192\", \"&fnof;\"}, // latin small f with hook = function= florin, U+0192 ISOtech -->\n        // <!-- Greek -->\n        {\"\\u0391\", \"&Alpha;\"}, // greek capital letter alpha, U+0391 -->\n        {\"\\u0392\", \"&Beta;\"}, // greek capital letter beta, U+0392 -->\n        {\"\\u0393\", \"&Gamma;\"}, // greek capital letter gamma,U+0393 ISOgrk3 -->\n        {\"\\u0394\", \"&Delta;\"}, // greek capital letter delta,U+0394 ISOgrk3 -->\n        {\"\\u0395\", \"&Epsilon;\"}, // greek capital letter epsilon, U+0395 -->\n        {\"\\u0396\", \"&Zeta;\"}, // greek capital letter zeta, U+0396 -->\n        {\"\\u0397\", \"&Eta;\"}, // greek capital letter eta, U+0397 -->\n        {\"\\u0398\", \"&Theta;\"}, // greek capital letter theta,U+0398 ISOgrk3 -->\n        {\"\\u0399\", \"&Iota;\"}, // greek capital letter iota, U+0399 -->\n        {\"\\u039A\", \"&Kappa;\"}, // greek capital letter kappa, U+039A -->\n        {\"\\u039B\", \"&Lambda;\"}, // greek capital letter lambda,U+039B ISOgrk3 -->\n        {\"\\u039C\", \"&Mu;\"}, // greek capital letter mu, U+039C -->\n        {\"\\u039D\", \"&Nu;\"}, // greek capital letter nu, U+039D -->\n        {\"\\u039E\", \"&Xi;\"}, // greek capital letter xi, U+039E ISOgrk3 -->\n        {\"\\u039F\", \"&Omicron;\"}, // greek capital letter omicron, U+039F -->\n        {\"\\u03A0\", \"&Pi;\"}, // greek capital letter pi, U+03A0 ISOgrk3 -->\n        {\"\\u03A1\", \"&Rho;\"}, // greek capital letter rho, U+03A1 -->\n        // <!-- there is no Sigmaf, and no U+03A2 character either -->\n        {\"\\u03A3\", \"&Sigma;\"}, // greek capital letter sigma,U+03A3 ISOgrk3 -->\n        {\"\\u03A4\", \"&Tau;\"}, // greek capital letter tau, U+03A4 -->\n        {\"\\u03A5\", \"&Upsilon;\"}, // greek capital letter upsilon,U+03A5 ISOgrk3 -->\n        {\"\\u03A6\", \"&Phi;\"}, // greek capital letter phi,U+03A6 ISOgrk3 -->\n        {\"\\u03A7\", \"&Chi;\"}, // greek capital letter chi, U+03A7 -->\n        {\"\\u03A8\", \"&Psi;\"}, // greek capital letter psi,U+03A8 ISOgrk3 -->\n        {\"\\u03A9\", \"&Omega;\"}, // greek capital letter omega,U+03A9 ISOgrk3 -->\n        {\"\\u03B1\", \"&alpha;\"}, // greek small letter alpha,U+03B1 ISOgrk3 -->\n        {\"\\u03B2\", \"&beta;\"}, // greek small letter beta, U+03B2 ISOgrk3 -->\n        {\"\\u03B3\", \"&gamma;\"}, // greek small letter gamma,U+03B3 ISOgrk3 -->\n        {\"\\u03B4\", \"&delta;\"}, // greek small letter delta,U+03B4 ISOgrk3 -->\n        {\"\\u03B5\", \"&epsilon;\"}, // greek small letter epsilon,U+03B5 ISOgrk3 -->\n        {\"\\u03B6\", \"&zeta;\"}, // greek small letter zeta, U+03B6 ISOgrk3 -->\n        {\"\\u03B7\", \"&eta;\"}, // greek small letter eta, U+03B7 ISOgrk3 -->\n        {\"\\u03B8\", \"&theta;\"}, // greek small letter theta,U+03B8 ISOgrk3 -->\n        {\"\\u03B9\", \"&iota;\"}, // greek small letter iota, U+03B9 ISOgrk3 -->\n        {\"\\u03BA\", \"&kappa;\"}, // greek small letter kappa,U+03BA ISOgrk3 -->\n        {\"\\u03BB\", \"&lambda;\"}, // greek small letter lambda,U+03BB ISOgrk3 -->\n        {\"\\u03BC\", \"&mu;\"}, // greek small letter mu, U+03BC ISOgrk3 -->\n        {\"\\u03BD\", \"&nu;\"}, // greek small letter nu, U+03BD ISOgrk3 -->\n        {\"\\u03BE\", \"&xi;\"}, // greek small letter xi, U+03BE ISOgrk3 -->\n        {\"\\u03BF\", \"&omicron;\"}, // greek small letter omicron, U+03BF NEW -->\n        {\"\\u03C0\", \"&pi;\"}, // greek small letter pi, U+03C0 ISOgrk3 -->\n        {\"\\u03C1\", \"&rho;\"}, // greek small letter rho, U+03C1 ISOgrk3 -->\n        {\"\\u03C2\", \"&sigmaf;\"}, // greek small letter final sigma,U+03C2 ISOgrk3 -->\n        {\"\\u03C3\", \"&sigma;\"}, // greek small letter sigma,U+03C3 ISOgrk3 -->\n        {\"\\u03C4\", \"&tau;\"}, // greek small letter tau, U+03C4 ISOgrk3 -->\n        {\"\\u03C5\", \"&upsilon;\"}, // greek small letter upsilon,U+03C5 ISOgrk3 -->\n        {\"\\u03C6\", \"&phi;\"}, // greek small letter phi, U+03C6 ISOgrk3 -->\n        {\"\\u03C7\", \"&chi;\"}, // greek small letter chi, U+03C7 ISOgrk3 -->\n        {\"\\u03C8\", \"&psi;\"}, // greek small letter psi, U+03C8 ISOgrk3 -->\n        {\"\\u03C9\", \"&omega;\"}, // greek small letter omega,U+03C9 ISOgrk3 -->\n        {\"\\u03D1\", \"&thetasym;\"}, // greek small letter theta symbol,U+03D1 NEW -->\n        {\"\\u03D2\", \"&upsih;\"}, // greek upsilon with hook symbol,U+03D2 NEW -->\n        {\"\\u03D6\", \"&piv;\"}, // greek pi symbol, U+03D6 ISOgrk3 -->\n        // <!-- General Punctuation -->\n        {\"\\u2022\", \"&bull;\"}, // bullet = black small circle,U+2022 ISOpub -->\n        // <!-- bullet is NOT the same as bullet operator, U+2219 -->\n        {\"\\u2026\", \"&hellip;\"}, // horizontal ellipsis = three dot leader,U+2026 ISOpub -->\n        {\"\\u2032\", \"&prime;\"}, // prime = minutes = feet, U+2032 ISOtech -->\n        {\"\\u2033\", \"&Prime;\"}, // double prime = seconds = inches,U+2033 ISOtech -->\n        {\"\\u203E\", \"&oline;\"}, // overline = spacing overscore,U+203E NEW -->\n        {\"\\u2044\", \"&frasl;\"}, // fraction slash, U+2044 NEW -->\n        // <!-- Letterlike Symbols -->\n        {\"\\u2118\", \"&weierp;\"}, // script capital P = power set= Weierstrass p, U+2118 ISOamso -->\n        {\"\\u2111\", \"&image;\"}, // blackletter capital I = imaginary part,U+2111 ISOamso -->\n        {\"\\u211C\", \"&real;\"}, // blackletter capital R = real part symbol,U+211C ISOamso -->\n        {\"\\u2122\", \"&trade;\"}, // trade mark sign, U+2122 ISOnum -->\n        {\"\\u2135\", \"&alefsym;\"}, // alef symbol = first transfinite cardinal,U+2135 NEW -->\n        // <!-- alef symbol is NOT the same as hebrew letter alef,U+05D0 although the\n        // same glyph could be used to depict both characters -->\n        // <!-- Arrows -->\n        {\"\\u2190\", \"&larr;\"}, // leftwards arrow, U+2190 ISOnum -->\n        {\"\\u2191\", \"&uarr;\"}, // upwards arrow, U+2191 ISOnum-->\n        {\"\\u2192\", \"&rarr;\"}, // rightwards arrow, U+2192 ISOnum -->\n        {\"\\u2193\", \"&darr;\"}, // downwards arrow, U+2193 ISOnum -->\n        {\"\\u2194\", \"&harr;\"}, // left right arrow, U+2194 ISOamsa -->\n        {\"\\u21B5\", \"&crarr;\"}, // downwards arrow with corner leftwards= carriage return, U+21B5 NEW -->\n        {\"\\u21D0\", \"&lArr;\"}, // leftwards double arrow, U+21D0 ISOtech -->\n        // <!-- ISO 10646 does not say that lArr is the same as the 'is implied by'\n        // arrow but also does not have any other character for that function.\n        // So ? lArr canbe used for 'is implied by' as ISOtech suggests -->\n        {\"\\u21D1\", \"&uArr;\"}, // upwards double arrow, U+21D1 ISOamsa -->\n        {\"\\u21D2\", \"&rArr;\"}, // rightwards double arrow,U+21D2 ISOtech -->\n        // <!-- ISO 10646 does not say this is the 'implies' character but does not\n        // have another character with this function so ?rArr can be used for\n        // 'implies' as ISOtech suggests -->\n        {\"\\u21D3\", \"&dArr;\"}, // downwards double arrow, U+21D3 ISOamsa -->\n        {\"\\u21D4\", \"&hArr;\"}, // left right double arrow,U+21D4 ISOamsa -->\n        // <!-- Mathematical Operators -->\n        {\"\\u2200\", \"&forall;\"}, // for all, U+2200 ISOtech -->\n        {\"\\u2202\", \"&part;\"}, // partial differential, U+2202 ISOtech -->\n        {\"\\u2203\", \"&exist;\"}, // there exists, U+2203 ISOtech -->\n        {\"\\u2205\", \"&empty;\"}, // empty set = null set = diameter,U+2205 ISOamso -->\n        {\"\\u2207\", \"&nabla;\"}, // nabla = backward difference,U+2207 ISOtech -->\n        {\"\\u2208\", \"&isin;\"}, // element of, U+2208 ISOtech -->\n        {\"\\u2209\", \"&notin;\"}, // not an element of, U+2209 ISOtech -->\n        {\"\\u220B\", \"&ni;\"}, // contains as member, U+220B ISOtech -->\n        // <!-- should there be a more memorable name than 'ni'? -->\n        {\"\\u220F\", \"&prod;\"}, // n-ary product = product sign,U+220F ISOamsb -->\n        // <!-- prod is NOT the same character as U+03A0 'greek capital letter pi'\n        // though the same glyph might be used for both -->\n        {\"\\u2211\", \"&sum;\"}, // n-ary summation, U+2211 ISOamsb -->\n        // <!-- sum is NOT the same character as U+03A3 'greek capital letter sigma'\n        // though the same glyph might be used for both -->\n        {\"\\u2212\", \"&minus;\"}, // minus sign, U+2212 ISOtech -->\n        {\"\\u2217\", \"&lowast;\"}, // asterisk operator, U+2217 ISOtech -->\n        {\"\\u221A\", \"&radic;\"}, // square root = radical sign,U+221A ISOtech -->\n        {\"\\u221D\", \"&prop;\"}, // proportional to, U+221D ISOtech -->\n        {\"\\u221E\", \"&infin;\"}, // infinity, U+221E ISOtech -->\n        {\"\\u2220\", \"&ang;\"}, // angle, U+2220 ISOamso -->\n        {\"\\u2227\", \"&and;\"}, // logical and = wedge, U+2227 ISOtech -->\n        {\"\\u2228\", \"&or;\"}, // logical or = vee, U+2228 ISOtech -->\n        {\"\\u2229\", \"&cap;\"}, // intersection = cap, U+2229 ISOtech -->\n        {\"\\u222A\", \"&cup;\"}, // union = cup, U+222A ISOtech -->\n        {\"\\u222B\", \"&int;\"}, // integral, U+222B ISOtech -->\n        {\"\\u2234\", \"&there4;\"}, // therefore, U+2234 ISOtech -->\n        {\"\\u223C\", \"&sim;\"}, // tilde operator = varies with = similar to,U+223C ISOtech -->\n        // <!-- tilde operator is NOT the same character as the tilde, U+007E,although\n        // the same glyph might be used to represent both -->\n        {\"\\u2245\", \"&cong;\"}, // approximately equal to, U+2245 ISOtech -->\n        {\"\\u2248\", \"&asymp;\"}, // almost equal to = asymptotic to,U+2248 ISOamsr -->\n        {\"\\u2260\", \"&ne;\"}, // not equal to, U+2260 ISOtech -->\n        {\"\\u2261\", \"&equiv;\"}, // identical to, U+2261 ISOtech -->\n        {\"\\u2264\", \"&le;\"}, // less-than or equal to, U+2264 ISOtech -->\n        {\"\\u2265\", \"&ge;\"}, // greater-than or equal to,U+2265 ISOtech -->\n        {\"\\u2282\", \"&sub;\"}, // subset of, U+2282 ISOtech -->\n        {\"\\u2283\", \"&sup;\"}, // superset of, U+2283 ISOtech -->\n        // <!-- note that nsup, 'not a superset of, U+2283' is not covered by the\n        // Symbol font encoding and is not included. Should it be, for symmetry?\n        // It is in ISOamsn --> <!ENTITY nsub\", \"8836\"},\n        // not a subset of, U+2284 ISOamsn -->\n        {\"\\u2286\", \"&sube;\"}, // subset of or equal to, U+2286 ISOtech -->\n        {\"\\u2287\", \"&supe;\"}, // superset of or equal to,U+2287 ISOtech -->\n        {\"\\u2295\", \"&oplus;\"}, // circled plus = direct sum,U+2295 ISOamsb -->\n        {\"\\u2297\", \"&otimes;\"}, // circled times = vector product,U+2297 ISOamsb -->\n        {\"\\u22A5\", \"&perp;\"}, // up tack = orthogonal to = perpendicular,U+22A5 ISOtech -->\n        {\"\\u22C5\", \"&sdot;\"}, // dot operator, U+22C5 ISOamsb -->\n        // <!-- dot operator is NOT the same character as U+00B7 middle dot -->\n        // <!-- Miscellaneous Technical -->\n        {\"\\u2308\", \"&lceil;\"}, // left ceiling = apl upstile,U+2308 ISOamsc -->\n        {\"\\u2309\", \"&rceil;\"}, // right ceiling, U+2309 ISOamsc -->\n        {\"\\u230A\", \"&lfloor;\"}, // left floor = apl downstile,U+230A ISOamsc -->\n        {\"\\u230B\", \"&rfloor;\"}, // right floor, U+230B ISOamsc -->\n        {\"\\u2329\", \"&lang;\"}, // left-pointing angle bracket = bra,U+2329 ISOtech -->\n        // <!-- lang is NOT the same character as U+003C 'less than' or U+2039 'single left-pointing angle quotation\n        // mark' -->\n        {\"\\u232A\", \"&rang;\"}, // right-pointing angle bracket = ket,U+232A ISOtech -->\n        // <!-- rang is NOT the same character as U+003E 'greater than' or U+203A\n        // 'single right-pointing angle quotation mark' -->\n        // <!-- Geometric Shapes -->\n        {\"\\u25CA\", \"&loz;\"}, // lozenge, U+25CA ISOpub -->\n        // <!-- Miscellaneous Symbols -->\n        {\"\\u2660\", \"&spades;\"}, // black spade suit, U+2660 ISOpub -->\n        // <!-- black here seems to mean filled as opposed to hollow -->\n        {\"\\u2663\", \"&clubs;\"}, // black club suit = shamrock,U+2663 ISOpub -->\n        {\"\\u2665\", \"&hearts;\"}, // black heart suit = valentine,U+2665 ISOpub -->\n        {\"\\u2666\", \"&diams;\"}, // black diamond suit, U+2666 ISOpub -->\n\n        // <!-- Latin Extended-A -->\n        {\"\\u0152\", \"&OElig;\"}, // -- latin capital ligature OE,U+0152 ISOlat2 -->\n        {\"\\u0153\", \"&oelig;\"}, // -- latin small ligature oe, U+0153 ISOlat2 -->\n        // <!-- ligature is a misnomer, this is a separate character in some languages -->\n        {\"\\u0160\", \"&Scaron;\"}, // -- latin capital letter S with caron,U+0160 ISOlat2 -->\n        {\"\\u0161\", \"&scaron;\"}, // -- latin small letter s with caron,U+0161 ISOlat2 -->\n        {\"\\u0178\", \"&Yuml;\"}, // -- latin capital letter Y with diaeresis,U+0178 ISOlat2 -->\n        // <!-- Spacing Modifier Letters -->\n        {\"\\u02C6\", \"&circ;\"}, // -- modifier letter circumflex accent,U+02C6 ISOpub -->\n        {\"\\u02DC\", \"&tilde;\"}, // small tilde, U+02DC ISOdia -->\n        // <!-- General Punctuation -->\n        {\"\\u2002\", \"&ensp;\"}, // en space, U+2002 ISOpub -->\n        {\"\\u2003\", \"&emsp;\"}, // em space, U+2003 ISOpub -->\n        {\"\\u2009\", \"&thinsp;\"}, // thin space, U+2009 ISOpub -->\n        {\"\\u200C\", \"&zwnj;\"}, // zero width non-joiner,U+200C NEW RFC 2070 -->\n        {\"\\u200D\", \"&zwj;\"}, // zero width joiner, U+200D NEW RFC 2070 -->\n        {\"\\u200E\", \"&lrm;\"}, // left-to-right mark, U+200E NEW RFC 2070 -->\n        {\"\\u200F\", \"&rlm;\"}, // right-to-left mark, U+200F NEW RFC 2070 -->\n        {\"\\u2013\", \"&ndash;\"}, // en dash, U+2013 ISOpub -->\n        {\"\\u2014\", \"&mdash;\"}, // em dash, U+2014 ISOpub -->\n        {\"\\u2018\", \"&lsquo;\"}, // left single quotation mark,U+2018 ISOnum -->\n        {\"\\u2019\", \"&rsquo;\"}, // right single quotation mark,U+2019 ISOnum -->\n        {\"\\u201A\", \"&sbquo;\"}, // single low-9 quotation mark, U+201A NEW -->\n        {\"\\u201C\", \"&ldquo;\"}, // left double quotation mark,U+201C ISOnum -->\n        {\"\\u201D\", \"&rdquo;\"}, // right double quotation mark,U+201D ISOnum -->\n        {\"\\u201E\", \"&bdquo;\"}, // double low-9 quotation mark, U+201E NEW -->\n        {\"\\u2020\", \"&dagger;\"}, // dagger, U+2020 ISOpub -->\n        {\"\\u2021\", \"&Dagger;\"}, // double dagger, U+2021 ISOpub -->\n        {\"\\u2030\", \"&permil;\"}, // per mille sign, U+2030 ISOtech -->\n        {\"\\u2039\", \"&lsaquo;\"}, // single left-pointing angle quotation mark,U+2039 ISO proposed -->\n        // <!-- lsaquo is proposed but not yet ISO standardized -->\n        {\"\\u203A\", \"&rsaquo;\"}, // single right-pointing angle quotation mark,U+203A ISO proposed -->\n        // <!-- rsaquo is proposed but not yet ISO standardized -->\n        {\"\\u20AC\", \"&euro;\"}, // -- euro sign, U+20AC NEW -->\n    };",
        "begin_line": 148,
        "end_line": 343,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE",
        "snippet": "    private static final String[][] HTML40_EXTENDED_UNESCAPE = invert(HTML40_EXTENDED_ESCAPE);",
        "begin_line": 350,
        "end_line": 350,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE",
        "snippet": "    private static final String[][] BASIC_ESCAPE = {\n        {\"\\\"\", \"&quot;\"}, // \" - double-quote\n        {\"&\", \"&amp;\"},   // & - ampersand\n        {\"<\", \"&lt;\"},    // < - less-than\n        {\">\", \"&gt;\"},    // > - greater-than\n    };",
        "begin_line": 359,
        "end_line": 364,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE",
        "snippet": "    private static final String[][] BASIC_UNESCAPE = invert(BASIC_ESCAPE);",
        "begin_line": 371,
        "end_line": 371,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE",
        "snippet": "    private static final String[][] APOS_ESCAPE = {\n        {\"'\", \"&apos;\"}, // XML apostrophe\n    };",
        "begin_line": 378,
        "end_line": 380,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE",
        "snippet": "    private static final String[][] APOS_UNESCAPE = invert(APOS_ESCAPE);",
        "begin_line": 387,
        "end_line": 387,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE",
        "snippet": "    private static final String[][] JAVA_CTRL_CHARS_ESCAPE = {\n        {\"\\b\", \"\\\\b\"},\n        {\"\\n\", \"\\\\n\"},\n        {\"\\t\", \"\\\\t\"},\n        {\"\\f\", \"\\\\f\"},\n        {\"\\r\", \"\\\\r\"}\n    };",
        "begin_line": 396,
        "end_line": 402,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE",
        "snippet": "    private static final String[][] JAVA_CTRL_CHARS_UNESCAPE = invert(JAVA_CTRL_CHARS_ESCAPE);",
        "begin_line": 409,
        "end_line": 409,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY",
        "snippet": "    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n     * An empty immutable {@code Object} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY",
        "snippet": "    public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * An empty immutable {@code Class} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY",
        "snippet": "    public static final String[] EMPTY_STRING_ARRAY = new String[0];",
        "begin_line": 54,
        "end_line": 54,
        "comment": "\n     * An empty immutable {@code String} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY",
        "snippet": "    public static final long[] EMPTY_LONG_ARRAY = new long[0];",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * An empty immutable {@code long} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY",
        "snippet": "    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n     * An empty immutable {@code Long} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY",
        "snippet": "    public static final int[] EMPTY_INT_ARRAY = new int[0];",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\n     * An empty immutable {@code int} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY",
        "snippet": "    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n     * An empty immutable {@code Integer} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY",
        "snippet": "    public static final short[] EMPTY_SHORT_ARRAY = new short[0];",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * An empty immutable {@code short} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY",
        "snippet": "    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     * An empty immutable {@code Short} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY",
        "snippet": "    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * An empty immutable {@code byte} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY",
        "snippet": "    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n     * An empty immutable {@code Byte} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY",
        "snippet": "    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * An empty immutable {@code double} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY",
        "snippet": "    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n     * An empty immutable {@code Double} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY",
        "snippet": "    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n     * An empty immutable {@code float} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY",
        "snippet": "    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\n     * An empty immutable {@code Float} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY",
        "snippet": "    public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * An empty immutable {@code boolean} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY",
        "snippet": "    public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];",
        "begin_line": 110,
        "end_line": 110,
        "comment": "\n     * An empty immutable {@code Boolean} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY",
        "snippet": "    public static final char[] EMPTY_CHAR_ARRAY = new char[0];",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\n     * An empty immutable {@code char} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY",
        "snippet": "    public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];",
        "begin_line": 118,
        "end_line": 118,
        "comment": "\n     * An empty immutable {@code Character} array.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "signature": "org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND",
        "snippet": "    public static final int INDEX_NOT_FOUND = -1;",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n     * The index value when an element is not found in a list or array: {@code -1}.\n     * This value is returned by methods in this class and can also be used in comparisons with values returned by\n     * various method from {@link java.util.List}.\n     "
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaper.below",
        "snippet": "    private final int below;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaper.above",
        "snippet": "    private final int above;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaper.between",
        "snippet": "    private final boolean between;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    }
]