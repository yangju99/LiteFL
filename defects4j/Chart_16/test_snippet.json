[
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(DefaultIntervalCategoryDatasetTests.class);\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 72)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.DefaultIntervalCategoryDatasetTests(java.lang.String)",
        "snippet": "    public DefaultIntervalCategoryDatasetTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetValue()",
        "snippet": "    public void testGetValue() {        \n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d \n                = new DefaultIntervalCategoryDataset(starts, ends);        \n\n        assertEquals(new Double(0.1), d.getStartValue(\"Series 1\", \n                \"Category 1\"));\n        assertEquals(new Double(0.2), d.getStartValue(\"Series 1\", \n                \"Category 2\"));\n        assertEquals(new Double(0.3), d.getStartValue(\"Series 1\", \n                \"Category 3\"));\n        assertEquals(new Double(0.3), d.getStartValue(\"Series 2\", \n                \"Category 1\"));\n        assertEquals(new Double(0.4), d.getStartValue(\"Series 2\", \n                \"Category 2\"));\n        assertEquals(new Double(0.5), d.getStartValue(\"Series 2\", \n                \"Category 3\"));\n        \n        assertEquals(new Double(0.5), d.getEndValue(\"Series 1\", \n                \"Category 1\"));\n        assertEquals(new Double(0.6), d.getEndValue(\"Series 1\", \n                \"Category 2\"));\n        assertEquals(new Double(0.7), d.getEndValue(\"Series 1\", \n                \"Category 3\"));\n        assertEquals(new Double(0.7), d.getEndValue(\"Series 2\", \n                \"Category 1\"));\n        assertEquals(new Double(0.8), d.getEndValue(\"Series 2\", \n                \"Category 2\"));\n        assertEquals(new Double(0.9), d.getEndValue(\"Series 2\", \n                \"Category 3\"));\n\n        boolean pass = false;\n        try {\n            d.getValue(\"XX\", \"Category 1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d.getValue(\"Series 1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 85,
        "end_line": 138,
        "comment": "\n     * Some checks for the getValue() method.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 58)",
            "(line 87,col 9)-(line 87,col 58)",
            "(line 88,col 9)-(line 88,col 56)",
            "(line 89,col 9)-(line 89,col 56)",
            "(line 90,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 91,col 60)",
            "(line 92,col 9)-(line 93,col 67)",
            "(line 95,col 9)-(line 96,col 31)",
            "(line 97,col 9)-(line 98,col 31)",
            "(line 99,col 9)-(line 100,col 31)",
            "(line 101,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 104,col 31)",
            "(line 105,col 9)-(line 106,col 31)",
            "(line 108,col 9)-(line 109,col 31)",
            "(line 110,col 9)-(line 111,col 31)",
            "(line 112,col 9)-(line 113,col 31)",
            "(line 114,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 117,col 31)",
            "(line 118,col 9)-(line 119,col 31)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 127,col 9)",
            "(line 128,col 9)-(line 128,col 25)",
            "(line 130,col 9)-(line 130,col 21)",
            "(line 131,col 9)-(line 136,col 9)",
            "(line 137,col 9)-(line 137,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowAndColumnCount()",
        "snippet": "    public void testGetRowAndColumnCount() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d \n                = new DefaultIntervalCategoryDataset(starts, ends);        \n\n        assertEquals(2, d.getRowCount());\n        assertEquals(3, d.getColumnCount());\n    }\n",
        "begin_line": 144,
        "end_line": 156,
        "comment": "\n     * Some tests for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 58)",
            "(line 146,col 9)-(line 146,col 58)",
            "(line 147,col 9)-(line 147,col 56)",
            "(line 148,col 9)-(line 148,col 56)",
            "(line 149,col 9)-(line 149,col 66)",
            "(line 150,col 9)-(line 150,col 60)",
            "(line 151,col 9)-(line 152,col 67)",
            "(line 154,col 9)-(line 154,col 41)",
            "(line 155,col 9)-(line 155,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testEquals()",
        "snippet": "    public void testEquals() {\n        double[] starts_S1A = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2A = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1A = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2A = new double[] {0.7, 0.8, 0.9};\n        double[][] startsA = new double[][] {starts_S1A, starts_S2A};\n        double[][] endsA = new double[][] {ends_S1A, ends_S2A};\n        DefaultIntervalCategoryDataset dA \n                = new DefaultIntervalCategoryDataset(startsA, endsA);        \n\n        double[] starts_S1B = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2B = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1B = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2B = new double[] {0.7, 0.8, 0.9};\n        double[][] startsB = new double[][] {starts_S1B, starts_S2B};\n        double[][] endsB = new double[][] {ends_S1B, ends_S2B};\n        DefaultIntervalCategoryDataset dB \n                = new DefaultIntervalCategoryDataset(startsB, endsB);        \n            \n        assertTrue(dA.equals(dB));\n        assertTrue(dB.equals(dA));\n        \n        // check that two empty datasets are equal\n    \tDefaultIntervalCategoryDataset empty1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t        new double[0][0]);\n    \tDefaultIntervalCategoryDataset empty2 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n\t\t                new double[0][0]);\n    \tassertTrue(empty1.equals(empty2));\n    }\n",
        "begin_line": 161,
        "end_line": 191,
        "comment": "\n     * Confirm that the equals method can distinguish all the required fields.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 59)",
            "(line 163,col 9)-(line 163,col 59)",
            "(line 164,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 57)",
            "(line 166,col 9)-(line 166,col 69)",
            "(line 167,col 9)-(line 167,col 63)",
            "(line 168,col 9)-(line 169,col 69)",
            "(line 171,col 9)-(line 171,col 59)",
            "(line 172,col 9)-(line 172,col 59)",
            "(line 173,col 9)-(line 173,col 57)",
            "(line 174,col 9)-(line 174,col 57)",
            "(line 175,col 9)-(line 175,col 69)",
            "(line 176,col 9)-(line 176,col 63)",
            "(line 177,col 9)-(line 178,col 69)",
            "(line 180,col 9)-(line 180,col 34)",
            "(line 181,col 9)-(line 181,col 34)",
            "(line 184,col 6)-(line 186,col 36)",
            "(line 187,col 6)-(line 189,col 36)",
            "(line 190,col 6)-(line 190,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1\n                = new DefaultIntervalCategoryDataset(starts, ends);        \n        DefaultIntervalCategoryDataset d2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(d1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            d2 = (DefaultIntervalCategoryDataset) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(d1, d2);\n\n    }\n",
        "begin_line": 196,
        "end_line": 224,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 58)",
            "(line 199,col 9)-(line 199,col 58)",
            "(line 200,col 9)-(line 200,col 56)",
            "(line 201,col 9)-(line 201,col 56)",
            "(line 202,col 9)-(line 202,col 66)",
            "(line 203,col 9)-(line 203,col 60)",
            "(line 204,col 9)-(line 205,col 67)",
            "(line 206,col 9)-(line 206,col 49)",
            "(line 208,col 9)-(line 221,col 9)",
            "(line 222,col 9)-(line 222,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning()",
        "snippet": "    public void testCloning() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(\n                starts, ends);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\n        \n        // check that the clone doesn't share the same underlying arrays.\n        d1.setStartValue(0, \"Category 1\", new Double(0.99));\n        assertFalse(d1.equals(d2));\n        d2.setStartValue(0, \"Category 1\", new Double(0.99));\n        assertTrue(d1.equals(d2));\n    }\n",
        "begin_line": 229,
        "end_line": 254,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 58)",
            "(line 231,col 9)-(line 231,col 58)",
            "(line 232,col 9)-(line 232,col 56)",
            "(line 233,col 9)-(line 233,col 56)",
            "(line 234,col 9)-(line 234,col 66)",
            "(line 235,col 9)-(line 235,col 60)",
            "(line 236,col 9)-(line 237,col 30)",
            "(line 238,col 9)-(line 238,col 49)",
            "(line 239,col 9)-(line 244,col 9)",
            "(line 245,col 9)-(line 245,col 29)",
            "(line 246,col 9)-(line 246,col 51)",
            "(line 247,col 9)-(line 247,col 34)",
            "(line 250,col 9)-(line 250,col 60)",
            "(line 251,col 9)-(line 251,col 35)",
            "(line 252,col 9)-(line 252,col 60)",
            "(line 253,col 9)-(line 253,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\t\n    }\n",
        "begin_line": 259,
        "end_line": 273,
        "comment": "\n     * A check to ensure that an empty dataset can be cloned.\n     ",
        "child_ranges": [
            "(line 260,col 6)-(line 262,col 32)",
            "(line 263,col 9)-(line 263,col 49)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 29)",
            "(line 271,col 9)-(line 271,col 51)",
            "(line 272,col 9)-(line 272,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetStartValue()",
        "snippet": "    public void testSetStartValue() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(\n                starts, ends);\n        d1.setStartValue(0, \"Category 2\", new Double(99.9));\n        assertEquals(new Double(99.9), d1.getStartValue(\"Series 1\", \n                \"Category 2\"));\n        \n        boolean pass = false;\n        try {\n            d1.setStartValue(-1, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d1.setStartValue(2, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 278,
        "end_line": 308,
        "comment": "\n     * Some basic checks for the setStartValue() method.\n     ",
        "child_ranges": [
            "(line 279,col 9)-(line 279,col 58)",
            "(line 280,col 9)-(line 280,col 58)",
            "(line 281,col 9)-(line 281,col 56)",
            "(line 282,col 9)-(line 282,col 56)",
            "(line 283,col 9)-(line 283,col 66)",
            "(line 284,col 9)-(line 284,col 60)",
            "(line 285,col 9)-(line 286,col 30)",
            "(line 287,col 9)-(line 287,col 60)",
            "(line 288,col 9)-(line 289,col 31)",
            "(line 291,col 9)-(line 291,col 29)",
            "(line 292,col 9)-(line 297,col 9)",
            "(line 298,col 9)-(line 298,col 25)",
            "(line 300,col 9)-(line 300,col 21)",
            "(line 301,col 9)-(line 306,col 9)",
            "(line 307,col 9)-(line 307,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetEndValue()",
        "snippet": "    public void testSetEndValue() {\n        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};\n        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};\n        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};\n        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};\n        double[][] starts = new double[][] {starts_S1, starts_S2};\n        double[][] ends = new double[][] {ends_S1, ends_S2};\n        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(\n                starts, ends);\n        d1.setEndValue(0, \"Category 2\", new Double(99.9));\n        assertEquals(new Double(99.9), d1.getEndValue(\"Series 1\", \n                \"Category 2\"));\n        \n        boolean pass = false;\n        try {\n            d1.setEndValue(-1, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            d1.setEndValue(2, \"Category 2\", new Double(99.9));\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 313,
        "end_line": 343,
        "comment": "\n     * Some basic checks for the setEndValue() method.\n     ",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 58)",
            "(line 315,col 9)-(line 315,col 58)",
            "(line 316,col 9)-(line 316,col 56)",
            "(line 317,col 9)-(line 317,col 56)",
            "(line 318,col 9)-(line 318,col 66)",
            "(line 319,col 9)-(line 319,col 60)",
            "(line 320,col 9)-(line 321,col 30)",
            "(line 322,col 9)-(line 322,col 58)",
            "(line 323,col 9)-(line 324,col 31)",
            "(line 326,col 9)-(line 326,col 29)",
            "(line 327,col 9)-(line 332,col 9)",
            "(line 333,col 9)-(line 333,col 25)",
            "(line 335,col 9)-(line 335,col 21)",
            "(line 336,col 9)-(line 341,col 9)",
            "(line 342,col 9)-(line 342,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesCount()",
        "snippet": "    public void testGetSeriesCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(0, empty.getSeriesCount());\n    }\n",
        "begin_line": 348,
        "end_line": 354,
        "comment": "\n     * Some checks for the getSeriesCount() method.\n     ",
        "child_ranges": [
            "(line 350,col 6)-(line 352,col 33)",
            "(line 353,col 6)-(line 353,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryCount()",
        "snippet": "    public void testGetCategoryCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(0, empty.getCategoryCount());\n    }\n",
        "begin_line": 359,
        "end_line": 365,
        "comment": "\n     * Some checks for the getCategoryCount() method.\n     ",
        "child_ranges": [
            "(line 361,col 6)-(line 363,col 33)",
            "(line 364,col 6)-(line 364,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesIndex()",
        "snippet": "    public void testGetSeriesIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getSeriesIndex(\"ABC\"));\n    }\n",
        "begin_line": 370,
        "end_line": 376,
        "comment": "\n     * Some checks for the getSeriesIndex() method.\n     ",
        "child_ranges": [
            "(line 372,col 6)-(line 374,col 33)",
            "(line 375,col 6)-(line 375,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowIndex()",
        "snippet": "    public void testGetRowIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getRowIndex(\"ABC\"));\n    }\n",
        "begin_line": 381,
        "end_line": 387,
        "comment": "\n     * Some checks for the getRowIndex() method.\n     ",
        "child_ranges": [
            "(line 383,col 6)-(line 385,col 33)",
            "(line 386,col 6)-(line 386,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetSeriesKeys()",
        "snippet": "    public void testSetSeriesKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tboolean pass = true;\n    \ttry {\n    \t\tempty.setSeriesKeys(new String[0]);\n    \t}\n    \tcatch (RuntimeException e) {\n    \t\tpass = false;\n    \t}\n    \tassertTrue(pass);\n    }\n",
        "begin_line": 392,
        "end_line": 405,
        "comment": "\n     * Some checks for the setSeriesKeys() method.\n     ",
        "child_ranges": [
            "(line 394,col 6)-(line 396,col 33)",
            "(line 397,col 6)-(line 397,col 25)",
            "(line 398,col 6)-(line 403,col 6)",
            "(line 404,col 6)-(line 404,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryIndex()",
        "snippet": "    public void testGetCategoryIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getCategoryIndex(\"ABC\"));\n    }\n",
        "begin_line": 410,
        "end_line": 416,
        "comment": "\n     * Some checks for the getCategoryIndex() method.\n     ",
        "child_ranges": [
            "(line 412,col 6)-(line 414,col 33)",
            "(line 415,col 6)-(line 415,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnIndex()",
        "snippet": "    public void testGetColumnIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getColumnIndex(\"ABC\"));\n    }\n",
        "begin_line": 421,
        "end_line": 427,
        "comment": "\n     * Some checks for the getColumnIndex() method.\n     ",
        "child_ranges": [
            "(line 423,col 6)-(line 425,col 33)",
            "(line 426,col 6)-(line 426,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetCategoryKeys()",
        "snippet": "    public void testSetCategoryKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tboolean pass = true;\n    \ttry {\n    \t\tempty.setCategoryKeys(new String[0]);\n    \t}\n    \tcatch (RuntimeException e) {\n    \t\tpass = false;\n    \t}\n    \tassertTrue(pass);\n    }\n",
        "begin_line": 432,
        "end_line": 445,
        "comment": "\n     * Some checks for the setCategoryKeys() method.\n     ",
        "child_ranges": [
            "(line 434,col 6)-(line 436,col 33)",
            "(line 437,col 6)-(line 437,col 25)",
            "(line 438,col 6)-(line 443,col 6)",
            "(line 444,col 6)-(line 444,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnKeys()",
        "snippet": "    public void testGetColumnKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        List keys = empty.getColumnKeys();\n        assertEquals(0, keys.size());\n    }\n",
        "begin_line": 450,
        "end_line": 457,
        "comment": "\n     * Some checks for the getColumnKeys() method.\n     ",
        "child_ranges": [
            "(line 452,col 6)-(line 454,col 33)",
            "(line 455,col 9)-(line 455,col 42)",
            "(line 456,col 9)-(line 456,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowKeys()",
        "snippet": "    public void testGetRowKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        List keys = empty.getRowKeys();\n        assertEquals(0, keys.size());\n    }\n",
        "begin_line": 462,
        "end_line": 469,
        "comment": "\n     * Some checks for the getRowKeys() method.\n     ",
        "child_ranges": [
            "(line 464,col 6)-(line 466,col 33)",
            "(line 467,col 9)-(line 467,col 39)",
            "(line 468,col 9)-(line 468,col 37)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnCount()",
        "snippet": "    public void testGetColumnCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }\n",
        "begin_line": 474,
        "end_line": 480,
        "comment": "\n     * Some checks for the getColumnCount() method.\n     ",
        "child_ranges": [
            "(line 476,col 6)-(line 478,col 33)",
            "(line 479,col 9)-(line 479,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
        "signature": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowCount()",
        "snippet": "    public void testGetRowCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }\n",
        "begin_line": 485,
        "end_line": 491,
        "comment": "\n     * Some checks for the getRowCount() method.\n     ",
        "child_ranges": [
            "(line 487,col 6)-(line 489,col 33)",
            "(line 490,col 9)-(line 490,col 48)"
        ]
    }
]