[
    {
        "name": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset#142",
        "is_bug": true,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(java.lang.Comparable[], java.lang.Comparable[], java.lang.Number[][], java.lang.Number[][])",
        "snippet": "    public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends) {\n\n        this.startData = starts;\n        this.endData = ends;\n\n        if (starts != null && ends != null) {\n\n            String baseName = \"org.jfree.data.resources.DataPackageResources\";\n            ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n            int seriesCount = starts.length;\n            if (seriesCount != ends.length) {\n                String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n                    + \"of series in the start value dataset does \"\n                    + \"not match the number of series in the end \"\n                    + \"value dataset.\";\n                throw new IllegalArgumentException(errMsg);\n            }\n            if (seriesCount > 0) {\n\n                // set up the series names...\n                if (seriesKeys != null) {\n\n                    if (seriesKeys.length != seriesCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of series keys does not \"\n                                + \"match the number of series in the data.\");\n                    }\n\n                    this.seriesKeys = seriesKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"series.default-prefix\") + \" \";\n                    this.seriesKeys = generateKeys(seriesCount, prefix);\n                }\n\n                // set up the category names...\n                int categoryCount = starts[0].length;\n                if (categoryCount != ends[0].length) {\n                    String errMsg = \"DefaultIntervalCategoryDataset: the \"\n                                + \"number of categories in the start value \"\n                                + \"dataset does not match the number of \"\n                                + \"categories in the end value dataset.\";\n                    throw new IllegalArgumentException(errMsg);\n                }\n                if (categoryKeys != null) {\n                    if (categoryKeys.length != categoryCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of category keys does not match \"\n                                + \"the number of categories in the data.\");\n                    }\n                    this.categoryKeys = categoryKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"categories.default-prefix\") + \" \";\n                    this.categoryKeys = generateKeys(categoryCount, prefix);\n                }\n\n            }\n            else {\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n            }\n        }\n\n    }\n",
        "begin_line": 142,
        "end_line": 212,
        "comment": "\r\n     * Constructs a DefaultIntervalCategoryDataset, populates it with data\r\n     * from the arrays, and uses the supplied names for the series and the\r\n     * supplied objects for the categories.\r\n     *\r\n     * @param seriesKeys  the series keys (if <code>null</code>, series keys\r\n     *         will be generated automatically).\r\n     * @param categoryKeys  the category keys (if <code>null</code>, category \r\n     *         keys will be generated automatically).\r\n     * @param starts  the start values data, indexed as data[series][category].\r\n     * @param ends  the end values data, indexed as data[series][category].\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7559
        },
        "num_failing_tests": 8
    },
    {
        "name": "DatasetGroup.DatasetGroup#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 8
    },
    {
        "name": "AbstractSeriesDataset.AbstractSeriesDataset#64",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
        "class_name": "org.jfree.data.general.AbstractSeriesDataset",
        "signature": "org.jfree.data.general.AbstractSeriesDataset.AbstractSeriesDataset()",
        "snippet": "    protected AbstractSeriesDataset() {\n        super();\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 8
    },
    {
        "name": "AbstractDataset.AbstractDataset#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own \r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 8
    },
    {
        "name": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset#90",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][], double[][])",
        "snippet": "    public DefaultIntervalCategoryDataset(double[][] starts, double[][] ends) {\n        this(DataUtilities.createNumberArray2D(starts),\n                DataUtilities.createNumberArray2D(ends));\n    }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\r\n     * Creates a new dataset using the specified data values and automatically\r\n     * generated series and category keys.\r\n     *\r\n     * @param starts  the starting values for the intervals (<code>null</code>\r\n     *                not permitted).\r\n     * @param ends  the ending values for the intervals (<code>null</code> not\r\n     *                permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 8
    },
    {
        "name": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset#106",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(java.lang.Number[][], java.lang.Number[][])",
        "snippet": "    public DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends) {\n        this(null, null, starts, ends);\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\r\n     * Constructs a dataset and populates it with data from the array.\r\n     * <p>\r\n     * The arrays are indexed as data[series][category].  Series and category\r\n     * names are automatically generated - you can change them using the\r\n     * {@link #setSeriesKeys(Comparable[])} and \r\n     * {@link #setCategoryKeys(Comparable[])} methods.\r\n     *\r\n     * @param starts  the start values data.\r\n     * @param ends  the end values data.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 8
    },
    {
        "name": "DataUtilities.createNumberArray2D#124",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DataUtilities.java",
        "class_name": "org.jfree.data.DataUtilities",
        "signature": "org.jfree.data.DataUtilities.createNumberArray2D(double[][])",
        "snippet": "    public static Number[][] createNumberArray2D(double[][] data) {\n        if (data == null) {\n            throw new IllegalArgumentException(\"Null 'data' argument.\");   \n        }\n        int l1 = data.length;\n        Number[][] result = new Number[l1][];\n        for (int i = 0; i < l1; i++) {\n            result[i] = createNumberArray(data[i]);\n        }\n        return result;\n    }\n",
        "begin_line": 124,
        "end_line": 134,
        "comment": "\r\n     * Constructs an array of arrays of <code>Number</code> objects from a \r\n     * corresponding structure containing <code>double</code> primitives.\r\n     *\r\n     * @param data  the data (<code>null</code> not permitted).\r\n     *\r\n     * @return An array of <code>Double</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 8
    },
    {
        "name": "DefaultIntervalCategoryDataset.getColumnCount#689",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.categoryKeys.length;\n    }\n",
        "begin_line": 689,
        "end_line": 691,
        "comment": "\r\n     * Returns the number of categories in the dataset.  This method is part of \r\n     * the {@link CategoryDataset} interface.\r\n     *\r\n     * @return The number of categories in the dataset.\r\n     * \r\n     * @see #getCategoryCount()\r\n     * @see #getRowCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultIntervalCategoryDataset.setCategoryKeys#334",
        "is_bug": true,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.setCategoryKeys(java.lang.Comparable[])",
        "snippet": "    public void setCategoryKeys(Comparable[] categoryKeys) {\n        if (categoryKeys == null) {\n            throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n        }\n        if (categoryKeys.length != this.startData[0].length) {\n            throw new IllegalArgumentException(\n                    \"The number of categories does not match the data.\");\n        }\n        for (int i = 0; i < categoryKeys.length; i++) {\n            if (categoryKeys[i] == null) {\n                throw new IllegalArgumentException(\n                    \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n                    + \"null category not permitted.\");\n            }\n        }\n        this.categoryKeys = categoryKeys;\n        fireDatasetChanged();\n    }\n",
        "begin_line": 334,
        "end_line": 351,
        "comment": "\r\n     * Sets the categories for the dataset.\r\n     *\r\n     * @param categoryKeys  an array of objects representing the categories in \r\n     *                      the dataset.\r\n     *                      \r\n     * @see #getRowKeys()\r\n     * @see #setSeriesKeys(Comparable[])\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getRowIndex#640",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex(java.lang.Comparable)",
        "snippet": "    public int getRowIndex(Comparable rowKey) {\n        return getSeriesIndex(rowKey);\n    }\n",
        "begin_line": 640,
        "end_line": 642,
        "comment": "\r\n     * Returns a row index.\r\n     *\r\n     * @param rowKey  the row key.\r\n     *\r\n     * @return The row index.\r\n     * \r\n     * @see #getSeriesIndex(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getSeriesIndex#240",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex(java.lang.Comparable)",
        "snippet": "    public int getSeriesIndex(Comparable seriesKey) {\n        int result = -1;\n        for (int i = 0; i < this.seriesKeys.length; i++) {\n            if (seriesKey.equals(this.seriesKeys[i])) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 240,
        "end_line": 249,
        "comment": "\r\n     * Returns a series index.\r\n     *\r\n     * @param seriesKey  the series key.\r\n     *\r\n     * @return The series index.\r\n     * \r\n     * @see #getRowIndex(Comparable)\r\n     * @see #getSeriesKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultIntervalCategoryDataset.getCategoryIndex#572",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex(java.lang.Comparable)",
        "snippet": "    public int getCategoryIndex(Comparable category) {\n        int result = -1;\n        for (int i = 0; i < this.categoryKeys.length; i++) {\n            if (category.equals(this.categoryKeys[i])) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 572,
        "end_line": 581,
        "comment": "\r\n     * Returns the index for the given category.\r\n     *\r\n     * @param category  the category (<code>null</code> not permitted).\r\n     *\r\n     * @return The index.\r\n     * \r\n     * @see #getColumnIndex(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractDataset.clone#204",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.clone()",
        "snippet": "    public Object clone() throws CloneNotSupportedException {\n        AbstractDataset clone = (AbstractDataset) super.clone();\n        clone.listenerList = new EventListenerList();\n        return clone;    \n    }\n",
        "begin_line": 204,
        "end_line": 208,
        "comment": "\r\n     * Returns a clone of the dataset. The cloned dataset will NOT include the \r\n     * {@link DatasetChangeListener} references that have been registered with \r\n     * this dataset.\r\n     * \r\n     * @return A clone.\r\n     * \r\n     * @throws CloneNotSupportedException  if the dataset does not support \r\n     *                                     cloning.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.clone#745",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.clone()",
        "snippet": "    public Object clone() throws CloneNotSupportedException {\n        DefaultIntervalCategoryDataset clone \n                = (DefaultIntervalCategoryDataset) super.clone();\n        clone.categoryKeys = (Comparable[]) this.categoryKeys.clone();\n        clone.seriesKeys = (Comparable[]) this.seriesKeys.clone();\n        clone.startData = clone(this.startData);\n        clone.endData = clone(this.endData);\n        return clone;\n    }\n",
        "begin_line": 745,
        "end_line": 753,
        "comment": "\r\n     * Returns a clone of this dataset.\r\n     * \r\n     * @return A clone.\r\n     * \r\n     * @throws CloneNotSupportedException if there is a problem cloning the\r\n     *         dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getColumnIndex#624",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex(java.lang.Comparable)",
        "snippet": "    public int getColumnIndex(Comparable columnKey) {\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        return getCategoryIndex(columnKey);\n    }\n",
        "begin_line": 624,
        "end_line": 629,
        "comment": "\r\n     * Returns a column index.\r\n     *\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     *\r\n     * @return The column index.\r\n     * \r\n     * @see #getCategoryIndex(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    }
]