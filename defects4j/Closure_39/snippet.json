[
    {
        "name": "PrototypeObjectType.toStringHelper#352",
        "is_bug": true,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n",
        "begin_line": 352,
        "end_line": 396,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProxyObjectType.toStringHelper#256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return referencedType.toStringHelper(forAnnotations);\n  }\n",
        "begin_line": 256,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toAnnotationString#1164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toAnnotationString()",
        "snippet": "  public final String toAnnotationString() {\n    return toStringHelper(true);\n  }\n",
        "begin_line": 1164,
        "end_line": 1166,
        "comment": "\n   * A string representation of this type, suitable for printing\n   * in type annotations at code generation time.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.239
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordType.getImplicitPrototype#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "signature": "com.google.javascript.rhino.jstype.RecordType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n  }\n",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1796
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProxyObjectType.setReferencedType#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.setReferencedType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  void setReferencedType(JSType referencedType) {\n    this.referencedType = referencedType;\n    if (referencedType instanceof ObjectType) {\n      this.referencedObjType = (ObjectType) referencedType;\n    } else {\n      this.referencedObjType = null;\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1213
        },
        "num_failing_tests": 1
    },
    {
        "name": "RecordTypeBuilder.RecordProperty#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty.RecordProperty(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "    RecordProperty(JSType type, Node propertyNode) {\n      this.type = type;\n      this.propertyNode = propertyNode;\n    }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordTypeBuilder.getType#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty.getType()",
        "snippet": "    public JSType getType() {\n      return type;\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordTypeBuilder.getPropertyNode#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty.getPropertyNode()",
        "snippet": "    public Node getPropertyNode() {\n      return propertyNode;\n    }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordTypeBuilder.RecordTypeBuilder#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public RecordTypeBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordTypeBuilder.addProperty#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.addProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public RecordTypeBuilder addProperty(String name, JSType type, Node\n      propertyNode) {\n    isEmpty = false;\n    if (properties.containsKey(name)) {\n      return null;\n    }\n    properties.put(name, new RecordProperty(type, propertyNode));\n    return this;\n  }\n",
        "begin_line": 69,
        "end_line": 77,
        "comment": "\n   * Adds a property with the given name and type to the record type.\n   * @param name the name of the new property\n   * @param type the JSType of the new property\n   * @param propertyNode the node that holds this property definition\n   * @return The builder itself for chaining purposes, or null if there's\n   *          a duplicate.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordTypeBuilder.build#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.build()",
        "snippet": "  public JSType build() {\n     // If we have an empty record, simply return the object type.\n    if (isEmpty) {\n       return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    }\n\n    return registry.createRecordType(Collections.unmodifiableMap(properties));\n  }\n",
        "begin_line": 83,
        "end_line": 90,
        "comment": "\n   * Creates a record.\n   * @return The record type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordType.RecordType#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "signature": "com.google.javascript.rhino.jstype.RecordType.RecordType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty>)",
        "snippet": "  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {\n    super(registry, null, null);\n    setPrettyPrint(true);\n\n    for (String property : properties.keySet()) {\n      RecordProperty prop = properties.get(property);\n      if (prop == null) {\n        throw new IllegalStateException(\n            \"RecordProperty associated with a property should not be null!\");\n      }\n      defineDeclaredProperty(property, prop.getType(), prop.getPropertyNode());\n    }\n\n    // Freeze the record type.\n    isFrozen = true;\n  }\n",
        "begin_line": 78,
        "end_line": 93,
        "comment": "\n   * Creates a record type.\n   *\n   * @param registry The type registry under which this type lives.\n   * @param properties A map of all the properties of this record type.\n   * @throws IllegalStateException if the {@code RecordProperty} associated\n   *         with a property is null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "RecordType.defineProperty#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "signature": "com.google.javascript.rhino.jstype.RecordType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode) {\n    if (isFrozen) {\n      return false;\n    }\n\n    if (!inferred) {\n      properties.put(propertyName, type);\n    }\n\n    return super.defineProperty(propertyName, type, inferred,\n        propertyNode);\n  }\n",
        "begin_line": 125,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createRecordType#1313",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createRecordType(java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty>)",
        "snippet": "  public RecordType createRecordType(Map<String, RecordProperty> properties) {\n    return new RecordType(this, properties);\n  }\n",
        "begin_line": 1313,
        "end_line": 1315,
        "comment": "\n   * Creates a record type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getOwnPropertyNames#177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnPropertyNames()",
        "snippet": "  @Override\n  public Set<String> getOwnPropertyNames() {\n    return properties.keySet();\n  }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0867
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter)",
        "snippet": "  public JSTypeRegistry(ErrorReporter reporter) {\n    this(reporter, false);\n  }\n",
        "begin_line": 198,
        "end_line": 200,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0514
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 631,
        "end_line": 650,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0497
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getPropertyType#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getPropertyType(java.lang.String)",
        "snippet": "  @Override\n  public JSType getPropertyType(String property) {\n    StaticSlot<JSType> slot = getSlot(property);\n    if (slot == null) {\n      return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    return slot.getType();\n  }\n",
        "begin_line": 211,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0293
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getSlot#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getSlot(java.lang.String)",
        "snippet": "  @Override\n  public Property getSlot(String name) {\n    if (properties.containsKey(name)) {\n      return properties.get(name);\n    }\n    ObjectType implicitPrototype = getImplicitPrototype();\n    if (implicitPrototype != null) {\n      Property prop = implicitPrototype.getSlot(name);\n      if (prop != null) {\n        return prop;\n      }\n    }\n    for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n      Property prop = interfaceType.getSlot(name);\n      if (prop != null) {\n        return prop;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 127,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getPropertiesCount#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getPropertiesCount()",
        "snippet": "  @Override\n  public int getPropertiesCount() {\n    ObjectType implicitPrototype = getImplicitPrototype();\n    if (implicitPrototype == null) {\n      return this.properties.size();\n    }\n    int localCount = 0;\n    for (String property : properties.keySet()) {\n      if (!implicitPrototype.hasProperty(property)) {\n        localCount++;\n      }\n    }\n    return implicitPrototype.getPropertiesCount() + localCount;\n  }\n",
        "begin_line": 151,
        "end_line": 164,
        "comment": "\n   * Gets the number of properties of this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.isImplicitPrototype#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 469,
        "end_line": 478,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.isEquivalentTo#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isEquivalentTo(JSType that) {\n    if (this == that) {\n      return true;\n    } else if (this.isNominalType()) {\n      ObjectType thatObj = ObjectType.cast(that);\n      if (thatObj != null && thatObj.isNominalType()) {\n        return getReferenceName().equals(thatObj.getReferenceName());\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.addAlternate#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union = alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarro sub-lattice. See the commants on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() && functionTypePosition != -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other =\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum =\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result = null;\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex = 0;\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n            if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              it.remove();\n\n              if (currentIndex == functionTypePosition) {\n                functionTypePosition = -1;\n              } else if (currentIndex < functionTypePosition) {\n                functionTypePosition--;\n                currentIndex--;\n              }\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition == -1);\n          functionTypePosition = alternates.size();\n        }\n\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 121,
        "end_line": 212,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNominalType#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getConstructor#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 406,
        "end_line": 409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.defineProperty#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.defineDeclaredProperty#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    boolean result = defineProperty(propertyName, type, false,\n        propertyNode);\n\n    // All property definitions go through this method\n    // or defineDeclaredProperty. Because the properties defined an an\n    // object can affect subtyping, it's slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return result;\n  }\n",
        "begin_line": 271,
        "end_line": 283,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param propertyNode the node corresponding to the declaration of property\n   *        which might later be accessed using {@code getPropertyNode}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.defineProperty#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    Property newProp = new Property(\n        name, type, inferred, propertyNode);\n    Property oldProp = properties.get(name);\n    if (oldProp != null) {\n      // This is to keep previously inferred jsdoc info, e.g., in a\n      // replaceScript scenario.\n      newProp.setJSDocInfo(oldProp.getJSDocInfo());\n    }\n    properties.put(name, newProp);\n    return true;\n  }\n",
        "begin_line": 233,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createNullableType#977",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getReferenceName#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else if (ownerFunction != null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 427,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 2
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "VoidType.toStringHelper#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnknownType.UnknownType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry = registry;\n    this.maxUnionSize = maxUnionSize;\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 219,
        "end_line": 240,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.build#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 247,
        "end_line": 255,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionType.UnionType#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "StringType.toStringHelper#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false);\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newTreeMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 113,
        "end_line": 125,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.setPrettyPrint#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
        "snippet": "  void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint = prettyPrint;\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 411,
        "end_line": 414,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#422",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 422,
        "end_line": 425,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null || ownerFunction != null;\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.isSubtype#443",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n    if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    if (getConstructor() != null && getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say 'yes', to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n  }\n",
        "begin_line": 443,
        "end_line": 491,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 493,
        "end_line": 502,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 504,
        "end_line": 507,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 510,
        "end_line": 513,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.setOwnerFunction#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction == null || type == null);\n    ownerFunction = type;\n  }\n",
        "begin_line": 515,
        "end_line": 518,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getOwnerFunction#520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
        "snippet": "  @Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 520,
        "end_line": 523,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.getCtorExtendedInterfaces#532",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();\n  }\n",
        "begin_line": 532,
        "end_line": 537,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.Property#599",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "    Property(String name, JSType type, boolean inferred,\n        Node propertyNode) {\n      this.name = name;\n      this.type = type;\n      this.inferred = inferred;\n      this.propertyNode = propertyNode;\n    }\n",
        "begin_line": 599,
        "end_line": 605,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.getType#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.getType()",
        "snippet": "    @Override\n    public JSType getType() {\n      return type;\n    }\n",
        "begin_line": 632,
        "end_line": 635,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.ObjectType#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.isUnknownType#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown = true;\n            break;\n          }\n        }\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 489,
        "end_line": 509,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.hasCachedValues#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 521,
        "end_line": 523,
        "comment": "\n   * Returns true if any cached values have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.cast#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public static ObjectType cast(JSType type) {\n    return type == null ? null : type.toObjectType();\n  }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "\n   * A null-safe version of JSType#toObjectType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.isFunctionPrototypeType#545",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() != null;\n  }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NullType.toStringHelper#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE =\n        new PrototypeObjectType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 246,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 205,
        "end_line": 212,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 237,
        "end_line": 244,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 561,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.register#587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.register#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 591,
        "end_line": 599,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.registerNativeType#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 617,
        "end_line": 629,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.getNativeType#874",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 874,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 878,
        "end_line": 880,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#882",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 882,
        "end_line": 884,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createOptionalType#955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createUnionType#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 993,
        "end_line": 999,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createArrowType#1029",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 1029,
        "end_line": 1031,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createArrowType#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 1039,
        "end_line": 1041,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1085",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1085,
        "end_line": 1089,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1192,
        "end_line": 1194,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1200,
        "end_line": 1204,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createParameters#1216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1216,
        "end_line": 1227,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1236,
        "end_line": 1243,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1279,
        "end_line": 1285,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.JSType#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.getNativeType#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNoType#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNoResolvedType#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNoObjectType#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isEmptyType#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isAllType#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isUnknownType#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isUnionType#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public final boolean isUnionType() {\n    return toMaybeUnionType() != null;\n  }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toMaybeUnionType#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
        "snippet": "  public UnionType toMaybeUnionType() {\n    return null;\n  }\n",
        "begin_line": 254,
        "end_line": 256,
        "comment": "\n   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n   *\n   * Named in honor of Haskell's Maybe type constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isFunctionType#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
        "snippet": "  public final boolean isFunctionType() {\n    return toMaybeFunctionType() != null;\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": " Returns true if toMaybeFunctionType returns a non-null FunctionType. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toMaybeFunctionType#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
        "snippet": "  public FunctionType toMaybeFunctionType() {\n    return null;\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "\n   * Downcasts this to a FunctionType, or returns null if this is not\n   * a function.\n   *\n   * For the purposes of this function, we define a MaybeFunctionType as any\n   * type in the sub-lattice\n   * { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }\n   * This definition excludes bottom types like NoType and NoObjectType.\n   *\n   * This definition is somewhat arbitrary and axiomatic, but this is the\n   * definition that makes the most sense for the most callers.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isRecordType#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
        "snippet": "  public boolean isRecordType() {\n    return toMaybeRecordType() != null;\n  }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toMaybeRecordType#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
        "snippet": "  RecordType toMaybeRecordType() {\n    return null;\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n   * Downcasts this to a RecordType, or returns null if this is not\n   * a RecordType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isEquivalentTo#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isEquivalentTo(JSType jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.isEquivalentTo(this);\n    }\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this == jsType;\n  }\n",
        "begin_line": 408,
        "end_line": 417,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.hashCode#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toObjectType#554",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 554,
        "end_line": 556,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   *\n   * Does not change the underlying JS type. If you want to simulate JS\n   * autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n   * Those methods may change the underlying JS type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isSubtype#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }\n",
        "begin_line": 989,
        "end_line": 991,
        "comment": "\n   * Checks whether {@code this} is a subtype of {@code that}.<p>\n   *\n   * Subtyping rules:\n   * <ul>\n   * <li>(unknown) &mdash; every type is a subtype of the Unknown type.</li>\n   * <li>(no) &mdash; the No type is a subtype of every type.</li>\n   * <li>(no-object) &mdash; the NoObject type is a subtype of every object\n   * type (i.e. subtypes of the Object type).</li>\n   * <li>(ref) &mdash; a type is a subtype of itself.</li>\n   * <li>(union-l) &mdash; A union type is a subtype of a type U if all the\n   * union type's constituents are a subtype of U. Formally<br>\n   * {@code (T<sub>1</sub>, &hellip;, T<sub>n</sub>) &lt;: U} if and only\n   * {@code T<sub>k</sub> &lt;: U} for all {@code k &isin; 1..n}.</li>\n   * <li>(union-r) &mdash; A type U is a subtype of a union type if it is a\n   * subtype of one of the union type's constituents. Formally<br>\n   * {@code U &lt;: (T<sub>1</sub>, &hellip;, T<sub>n</sub>)} if and only\n   * if {@code U &lt;: T<sub>k</sub>} for some index {@code k}.</li>\n   * <li>(objects) &mdash; an Object {@code O<sub>1</sub>} is a subtype\n   * of an object {@code O<sub>2</sub>} if it has more properties\n   * than {@code O<sub>2</sub>} and all common properties are\n   * pairwise subtypes.</li>\n   * </ul>\n   *\n   * @return {@code this &lt;: that}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isSubtypeHelper#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union = thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }\n",
        "begin_line": 1014,
        "end_line": 1042,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.toString#1147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toStringHelper(false);\n  }\n",
        "begin_line": 1147,
        "end_line": 1150,
        "comment": "\n   * A string representation of this type, suitable for printing\n   * in warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toStringHelper(forAnnotations);\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.isNominalType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.hashCode#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 173,
        "end_line": 180,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.getCtorExtendedInterfaces#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.FunctionType#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.isConstructor#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.isInterface#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.toMaybeFunctionType#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
        "snippet": "  @Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getInternalArrowType#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getPrototype#308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot == null) {\n      setPrototype(\n          new PrototypeObjectType(\n              registry,\n              this.getReferenceName() + \".prototype\",\n              registry.getNativeObjectType(OBJECT_TYPE),\n              isNativeObjectType()),\n          null);\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }\n",
        "begin_line": 308,
        "end_line": 320,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#327",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#331",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType() ||\n        !(baseType instanceof PrototypeObjectType)) {\n\n      baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType, propertyNode);\n  }\n",
        "begin_line": 331,
        "end_line": 358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setPrototype#365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.PrototypeObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    PrototypeObjectType oldPrototype = prototypeSlot == null\n        ? null : (PrototypeObjectType) prototypeSlot.getType();\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 365,
        "end_line": 408,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getExtendedInterfaces#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getExtendedInterfaces() {\n    return extendedInterfaces;\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": " Returns interfaces directly extended by an interface ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getSuperClassConstructor#755",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 755,
        "end_line": 762,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.getInstanceType#987",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 987,
        "end_line": 990,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.setInstanceType#996",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 996,
        "end_line": 998,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.hasInstanceType#1003",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 1003,
        "end_line": 1005,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.addSubType#1042",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 1042,
        "end_line": 1047,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionType.hasCachedValues#1079",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototypeSlot != null || super.hasCachedValues();\n  }\n",
        "begin_line": 1079,
        "end_line": 1082,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.newParameter#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 122,
        "end_line": 127,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.build#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.withParamsNode#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.withReturnType#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionBuilder.build#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeName, isConstructor, isNativeType);\n  }\n",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "BooleanType.toStringHelper#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "AllType.isAllType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setJSType#1812",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 1812,
        "end_line": 1814,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setOptionalArg#1884",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 1884,
        "end_line": 1886,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setVarArgs#1866",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 1866,
        "end_line": 1868,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getLastChild#543",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 543,
        "end_line": 545,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.017
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.addChildToBack#607",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 607,
        "end_line": 618,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.newString#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 515,
        "end_line": 517,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putBooleanProp#845",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 845,
        "end_line": 847,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.IntPropListItem#334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue = intValue;\n    }\n",
        "begin_line": 334,
        "end_line": 337,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putIntProp#849",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 849,
        "end_line": 854,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.createProp#860",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }\n",
        "begin_line": 860,
        "end_line": 862,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.StringNode#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 195,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.AbstractPropListItem#276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    AbstractPropListItem(int propType, PropListItem next) {\n      this.propType = propType;\n      this.next = next;\n    }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0168
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeProp#768",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 768,
        "end_line": 773,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0168
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeProp#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.getType() == propType) {\n      return item.getNext();\n    } else {\n      PropListItem result = removeProp(item.getNext(), propType);\n      if (result != item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 781,
        "end_line": 794,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0168
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0168
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProxyObjectType.ProxyObjectType#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.ProxyObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ProxyObjectType(JSTypeRegistry registry, JSType referencedType) {\n    super(registry);\n    setReferencedType(referencedType);\n  }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 1
    }
]