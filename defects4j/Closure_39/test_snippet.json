[
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeTest.testRecursiveRecord()",
        "snippet": "  public void testRecursiveRecord() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());\n\n    loop.setReferencedType(record);\n    assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());\n    assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());\n\n    Asserts.assertEquivalenceOperations(record, loop);\n  }\n",
        "begin_line": 46,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 70)",
            "(line 48,col 5)-(line 52,col 17)",
            "(line 53,col 5)-(line 54,col 27)",
            "(line 56,col 5)-(line 56,col 35)",
            "(line 57,col 5)-(line 58,col 27)",
            "(line 59,col 5)-(line 60,col 37)",
            "(line 62,col 5)-(line 62,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeTest.testLongToString()",
        "snippet": "  public void testLongToString() {\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"a1\", NUMBER_TYPE, null)\n        .addProperty(\"a2\", NUMBER_TYPE, null)\n        .addProperty(\"a3\", NUMBER_TYPE, null)\n        .addProperty(\"a4\", NUMBER_TYPE, null)\n        .addProperty(\"a5\", NUMBER_TYPE, null)\n        .addProperty(\"a6\", NUMBER_TYPE, null)\n        .build();\n    assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n        record.toString());\n    assertEquals(\n        \"{a1: number, a2: number, a3: number, a4: number,\" +\n        \" a5: number, a6: number}\",\n        record.toAnnotationString());\n  }\n",
        "begin_line": 65,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 66,col 5)-(line 73,col 17)",
            "(line 74,col 5)-(line 75,col 27)",
            "(line 76,col 5)-(line 79,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeTest.testSupAndInf()",
        "snippet": "  public void testSupAndInf() {\n    JSType recordA = new RecordTypeBuilder(registry)\n        .addProperty(\"a\", NUMBER_TYPE, null)\n        .addProperty(\"b\", NUMBER_TYPE, null)\n        .build();\n    JSType recordC = new RecordTypeBuilder(registry)\n        .addProperty(\"b\", NUMBER_TYPE, null)\n        .addProperty(\"c\", NUMBER_TYPE, null)\n        .build();\n    ProxyObjectType proxyRecordA = new ProxyObjectType(registry, recordA);\n    ProxyObjectType proxyRecordC = new ProxyObjectType(registry, recordC);\n\n    JSType aInfC = new RecordTypeBuilder(registry)\n        .addProperty(\"a\", NUMBER_TYPE, null)\n        .addProperty(\"b\", NUMBER_TYPE, null)\n        .addProperty(\"c\", NUMBER_TYPE, null)\n        .build();\n\n    JSType aSupC = registry.createUnionType(recordA, recordC);\n\n    Asserts.assertTypeEquals(\n        aInfC, recordA.getGreatestSubtype(recordC));\n    Asserts.assertTypeEquals(\n        aSupC, recordA.getLeastSupertype(recordC));\n\n    Asserts.assertTypeEquals(\n        aInfC, proxyRecordA.getGreatestSubtype(proxyRecordC));\n    Asserts.assertTypeEquals(\n        aSupC, proxyRecordA.getLeastSupertype(proxyRecordC));\n  }\n",
        "begin_line": 82,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 86,col 17)",
            "(line 87,col 5)-(line 90,col 17)",
            "(line 91,col 5)-(line 91,col 74)",
            "(line 92,col 5)-(line 92,col 74)",
            "(line 94,col 5)-(line 98,col 17)",
            "(line 100,col 5)-(line 100,col 62)",
            "(line 102,col 5)-(line 103,col 52)",
            "(line 104,col 5)-(line 105,col 51)",
            "(line 107,col 5)-(line 108,col 62)",
            "(line 109,col 5)-(line 110,col 61)"
        ]
    }
]