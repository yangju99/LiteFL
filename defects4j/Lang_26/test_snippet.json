[
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.FastDateFormatTest(java.lang.String)",
        "snippet": "    public FastDateFormatTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance()",
        "snippet": "    public void test_getInstance() {\n        FastDateFormat format1 = FastDateFormat.getInstance();\n        FastDateFormat format2 = FastDateFormat.getInstance();\n        assertSame(format1, format2);\n        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());\n    }\n",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 62)",
            "(line 47,col 9)-(line 47,col 62)",
            "(line 48,col 9)-(line 48,col 37)",
            "(line 49,col 9)-(line 49,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String()",
        "snippet": "    public void test_getInstance_String() {\n        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n        FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n        FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n        assertSame(format2, format3);\n        assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n        assertEquals(TimeZone.getDefault(), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n        assertEquals(false, format1.getTimeZoneOverridesCalendar());\n        assertEquals(false, format2.getTimeZoneOverridesCalendar());\n    }\n",
        "begin_line": 52,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 74)",
            "(line 54,col 9)-(line 54,col 74)",
            "(line 55,col 9)-(line 55,col 74)",
            "(line 57,col 9)-(line 57,col 39)",
            "(line 58,col 9)-(line 58,col 37)",
            "(line 59,col 9)-(line 59,col 57)",
            "(line 60,col 9)-(line 60,col 67)",
            "(line 61,col 9)-(line 61,col 67)",
            "(line 62,col 9)-(line 62,col 68)",
            "(line 63,col 9)-(line 63,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone()",
        "snippet": "    public void test_getInstance_String_TimeZone() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n            FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertSame(format3, format4);\n            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 66,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 55)",
            "(line 68,col 9)-(line 68,col 57)",
            "(line 69,col 9)-(line 93,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_Locale()",
        "snippet": "    public void test_getInstance_String_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertSame(format1, format3);\n            assertSame(Locale.GERMANY, format1.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 96,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 55)",
            "(line 98,col 9)-(line 110,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 113,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 55)",
            "(line 115,col 9)-(line 130,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateTimeInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 133,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 55)",
            "(line 135,col 9)-(line 150,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale()",
        "snippet": "    public void test_getInstance_String_TimeZone_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getDefault(), Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format3.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertEquals(true, format3.getTimeZoneOverridesCalendar());\n            assertEquals(Locale.GERMANY, format1.getLocale());\n            assertEquals(Locale.GERMANY, format2.getLocale());\n            assertEquals(Locale.GERMANY, format3.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 153,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 55)",
            "(line 155,col 9)-(line 155,col 57)",
            "(line 156,col 9)-(line 180,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testFormat()",
        "snippet": "    public void testFormat() {}\n",
        "begin_line": 183,
        "end_line": 183,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testShortDateStyleWithLocales()",
        "snippet": "    public void testShortDateStyleWithLocales() {\n        Locale usLocale = Locale.US;\n        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 1, 3);\n        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);\n        assertEquals(\"2/3/04\", fdf.format(cal));\n\n        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);\n        assertEquals(\"2004-02-03\", fdf.format(cal));\n\n    }\n",
        "begin_line": 247,
        "end_line": 258,
        "comment": "\n     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.\n     ",
        "child_ranges": [
            "(line 248,col 9)-(line 248,col 36)",
            "(line 249,col 9)-(line 249,col 54)",
            "(line 250,col 9)-(line 250,col 46)",
            "(line 251,col 9)-(line 251,col 28)",
            "(line 252,col 9)-(line 252,col 92)",
            "(line 253,col 9)-(line 253,col 48)",
            "(line 255,col 9)-(line 255,col 82)",
            "(line 256,col 9)-(line 256,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLowYearPadding()",
        "snippet": "    public void testLowYearPadding() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/DD\");\n\n        cal.set(1,0,1);\n        assertEquals(\"0001/01/01\", format.format(cal));\n        cal.set(10,0,1);\n        assertEquals(\"0010/01/01\", format.format(cal));\n        cal.set(100,0,1);\n        assertEquals(\"0100/01/01\", format.format(cal));\n        cal.set(999,0,1);\n        assertEquals(\"0999/01/01\", format.format(cal));\n    }\n",
        "begin_line": 263,
        "end_line": 275,
        "comment": "\n     * Tests that pre-1000AD years get padded with yyyy\n     ",
        "child_ranges": [
            "(line 264,col 9)-(line 264,col 46)",
            "(line 265,col 9)-(line 265,col 73)",
            "(line 267,col 9)-(line 267,col 23)",
            "(line 268,col 9)-(line 268,col 55)",
            "(line 269,col 9)-(line 269,col 24)",
            "(line 270,col 9)-(line 270,col 55)",
            "(line 271,col 9)-(line 271,col 25)",
            "(line 272,col 9)-(line 272,col 55)",
            "(line 273,col 9)-(line 273,col 25)",
            "(line 274,col 9)-(line 274,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testMilleniumBug()",
        "snippet": "    public void testMilleniumBug() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"dd.MM.yyyy\");\n\n        cal.set(1000,0,1);\n        assertEquals(\"01.01.1000\", format.format(cal));\n    }\n",
        "begin_line": 279,
        "end_line": 285,
        "comment": "\n     * Show Bug #39410 is solved\n     ",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 46)",
            "(line 281,col 9)-(line 281,col 73)",
            "(line 283,col 9)-(line 283,col 26)",
            "(line 284,col 9)-(line 284,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testSimpleDate()",
        "snippet": "    public void testSimpleDate() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n\n        cal.set(2004,11,31);\n        assertEquals(\"2004/12/31\", format.format(cal));\n        cal.set(999,11,31);\n        assertEquals(\"0999/12/31\", format.format(cal));\n        cal.set(1,2,2);\n        assertEquals(\"0001/03/02\", format.format(cal));\n    }\n",
        "begin_line": 292,
        "end_line": 302,
        "comment": " TODO: Fix this problem",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 46)",
            "(line 294,col 9)-(line 294,col 73)",
            "(line 296,col 9)-(line 296,col 28)",
            "(line 297,col 9)-(line 297,col 55)",
            "(line 298,col 9)-(line 298,col 27)",
            "(line 299,col 9)-(line 299,col 55)",
            "(line 300,col 9)-(line 300,col 23)",
            "(line 301,col 9)-(line 301,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang303()",
        "snippet": "    public void testLang303() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004,11,31);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n        String output = format.format(cal);\n\n        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n        assertEquals(output, format.format(cal));\n    }\n",
        "begin_line": 304,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 46)",
            "(line 306,col 9)-(line 306,col 28)",
            "(line 308,col 9)-(line 308,col 73)",
            "(line 309,col 9)-(line 309,col 43)",
            "(line 311,col 9)-(line 311,col 107)",
            "(line 312,col 9)-(line 312,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang538()",
        "snippet": "    public void testLang538() {\n        final String dateTime = \"2009-10-16T16:42:16.000Z\";\n\n        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n        cal.clear();\n        cal.set(2009, 9, 16, 8, 42, 16);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n        assertEquals(\"dateTime\", dateTime, format.format(cal));\n    }\n",
        "begin_line": 315,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 316,col 9)-(line 316,col 59)",
            "(line 320,col 9)-(line 320,col 85)",
            "(line 321,col 9)-(line 321,col 20)",
            "(line 322,col 9)-(line 322,col 40)",
            "(line 324,col 9)-(line 324,col 120)",
            "(line 325,col 9)-(line 325,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang3.time.FastDateFormatTest.testLang645()",
        "snippet": "    public void testLang645() {\n        Locale locale = new Locale(\"sv\", \"SE\");\n\n        Calendar cal = Calendar.getInstance();\n        cal.set(2010, 0, 1, 12, 0, 0);\n        Date d = cal.getTime();\n\n        FastDateFormat fdf = FastDateFormat.getInstance(\"EEEE', week 'ww\", locale);\n\n        assertEquals(\"fredag, week 53\", fdf.format(d));\n    }\n",
        "begin_line": 328,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 329,col 9)-(line 329,col 47)",
            "(line 331,col 9)-(line 331,col 46)",
            "(line 332,col 9)-(line 332,col 38)",
            "(line 333,col 9)-(line 333,col 31)",
            "(line 335,col 9)-(line 335,col 83)",
            "(line 337,col 9)-(line 337,col 55)"
        ]
    }
]