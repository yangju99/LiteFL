[
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testPreconditions1()",
        "snippet": "    @Test(expected=NumberIsTooSmallException.class)\n    public void testPreconditions1() {\n        HarmonicFitter fitter =\n            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n\n        fitter.fit();\n    }\n",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 35,col 9)-(line 36,col 66)",
            "(line 38,col 9)-(line 38,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testNoError()",
        "snippet": "    @Test\n    public void testNoError() {\n        final double a = 0.2;\n        final double w = 3.4;\n        final double p = 4.1;\n        HarmonicOscillator f = new HarmonicOscillator(a, w, p);\n\n        HarmonicFitter fitter =\n            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n        for (double x = 0.0; x < 1.3; x += 0.01) {\n            fitter.addObservedPoint(1, x, f.value(x));\n        }\n\n        final double[] fitted = fitter.fit();\n        Assert.assertEquals(a, fitted[0], 1.0e-13);\n        Assert.assertEquals(w, fitted[1], 1.0e-13);\n        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13);\n\n        HarmonicOscillator ff = new HarmonicOscillator(fitted[0], fitted[1], fitted[2]);\n\n        for (double x = -1.0; x < 1.0; x += 0.01) {\n            Assert.assertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13);\n        }\n    }\n",
        "begin_line": 56,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 58,col 29)",
            "(line 59,col 9)-(line 59,col 29)",
            "(line 60,col 9)-(line 60,col 29)",
            "(line 61,col 9)-(line 61,col 63)",
            "(line 63,col 9)-(line 64,col 66)",
            "(line 65,col 9)-(line 67,col 9)",
            "(line 69,col 9)-(line 69,col 45)",
            "(line 70,col 9)-(line 70,col 51)",
            "(line 71,col 9)-(line 71,col 51)",
            "(line 72,col 9)-(line 72,col 78)",
            "(line 74,col 9)-(line 74,col 88)",
            "(line 76,col 9)-(line 78,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.test1PercentError()",
        "snippet": "    @Test\n    public void test1PercentError() {\n        Random randomizer = new Random(64925784252l);\n        final double a = 0.2;\n        final double w = 3.4;\n        final double p = 4.1;\n        HarmonicOscillator f = new HarmonicOscillator(a, w, p);\n\n        HarmonicFitter fitter =\n            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n        for (double x = 0.0; x < 10.0; x += 0.1) {\n            fitter.addObservedPoint(1, x,\n                                    f.value(x) + 0.01 * randomizer.nextGaussian());\n        }\n\n        final double[] fitted = fitter.fit();\n        Assert.assertEquals(a, fitted[0], 7.6e-4);\n        Assert.assertEquals(w, fitted[1], 2.7e-3);\n        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2);\n    }\n",
        "begin_line": 81,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 53)",
            "(line 84,col 9)-(line 84,col 29)",
            "(line 85,col 9)-(line 85,col 29)",
            "(line 86,col 9)-(line 86,col 29)",
            "(line 87,col 9)-(line 87,col 63)",
            "(line 89,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 94,col 9)",
            "(line 96,col 9)-(line 96,col 45)",
            "(line 97,col 9)-(line 97,col 50)",
            "(line 98,col 9)-(line 98,col 50)",
            "(line 99,col 9)-(line 99,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testTinyVariationsData()",
        "snippet": "    @Test\n    public void testTinyVariationsData() {\n        Random randomizer = new Random(64925784252l);\n\n        HarmonicFitter fitter =\n            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n        for (double x = 0.0; x < 10.0; x += 0.1) {\n            fitter.addObservedPoint(1, x, 1e-7 * randomizer.nextGaussian());\n        }\n\n        fitter.fit();\n        // This test serves to cover the part of the code of \"guessAOmega\"\n        // when the algorithm using integrals fails.\n    }\n",
        "begin_line": 102,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 53)",
            "(line 106,col 9)-(line 107,col 66)",
            "(line 108,col 9)-(line 110,col 9)",
            "(line 112,col 9)-(line 112,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testInitialGuess()",
        "snippet": "    @Test\n    public void testInitialGuess() {\n        Random randomizer = new Random(45314242l);\n        final double a = 0.2;\n        final double w = 3.4;\n        final double p = 4.1;\n        HarmonicOscillator f = new HarmonicOscillator(a, w, p);\n\n        HarmonicFitter fitter =\n            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n        for (double x = 0.0; x < 10.0; x += 0.1) {\n            fitter.addObservedPoint(1, x,\n                                    f.value(x) + 0.01 * randomizer.nextGaussian());\n        }\n\n        final double[] fitted = fitter.fit(new double[] { 0.15, 3.6, 4.5 });\n        Assert.assertEquals(a, fitted[0], 1.2e-3);\n        Assert.assertEquals(w, fitted[1], 3.3e-3);\n        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2);\n    }\n",
        "begin_line": 117,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 50)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 121,col 9)-(line 121,col 29)",
            "(line 122,col 9)-(line 122,col 29)",
            "(line 123,col 9)-(line 123,col 63)",
            "(line 125,col 9)-(line 126,col 66)",
            "(line 127,col 9)-(line 130,col 9)",
            "(line 132,col 9)-(line 132,col 76)",
            "(line 133,col 9)-(line 133,col 50)",
            "(line 134,col 9)-(line 134,col 50)",
            "(line 135,col 9)-(line 135,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testUnsorted()",
        "snippet": "    @Test\n    public void testUnsorted() {\n        Random randomizer = new Random(64925784252l);\n        final double a = 0.2;\n        final double w = 3.4;\n        final double p = 4.1;\n        HarmonicOscillator f = new HarmonicOscillator(a, w, p);\n\n        HarmonicFitter fitter =\n            new HarmonicFitter(new LevenbergMarquardtOptimizer());\n\n        // build a regularly spaced array of measurements\n        int size = 100;\n        double[] xTab = new double[size];\n        double[] yTab = new double[size];\n        for (int i = 0; i < size; ++i) {\n            xTab[i] = 0.1 * i;\n            yTab[i] = f.value(xTab[i]) + 0.01 * randomizer.nextGaussian();\n        }\n\n        // shake it\n        for (int i = 0; i < size; ++i) {\n            int i1 = randomizer.nextInt(size);\n            int i2 = randomizer.nextInt(size);\n            double xTmp = xTab[i1];\n            double yTmp = yTab[i1];\n            xTab[i1] = xTab[i2];\n            yTab[i1] = yTab[i2];\n            xTab[i2] = xTmp;\n            yTab[i2] = yTmp;\n        }\n\n        // pass it to the fitter\n        for (int i = 0; i < size; ++i) {\n            fitter.addObservedPoint(1, xTab[i], yTab[i]);\n        }\n\n        final double[] fitted = fitter.fit();\n        Assert.assertEquals(a, fitted[0], 7.6e-4);\n        Assert.assertEquals(w, fitted[1], 3.5e-3);\n        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);\n    }\n",
        "begin_line": 138,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 53)",
            "(line 141,col 9)-(line 141,col 29)",
            "(line 142,col 9)-(line 142,col 29)",
            "(line 143,col 9)-(line 143,col 29)",
            "(line 144,col 9)-(line 144,col 63)",
            "(line 146,col 9)-(line 147,col 66)",
            "(line 150,col 9)-(line 150,col 23)",
            "(line 151,col 9)-(line 151,col 41)",
            "(line 152,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 156,col 9)",
            "(line 159,col 9)-(line 168,col 9)",
            "(line 171,col 9)-(line 173,col 9)",
            "(line 175,col 9)-(line 175,col 45)",
            "(line 176,col 9)-(line 176,col 50)",
            "(line 177,col 9)-(line 177,col 50)",
            "(line 178,col 9)-(line 178,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testMath844()",
        "snippet": "    @Test(expected=MathIllegalStateException.class)\n    public void testMath844() {\n        final double[] y = { 0, 1, 2, 3, 2, 1,\n                             0, -1, -2, -3, -2, -1,\n                             0, 1, 2, 3, 2, 1,\n                             0, -1, -2, -3, -2, -1,\n                             0, 1, 2, 3, 2, 1, 0 };\n        final int len = y.length;\n        final WeightedObservedPoint[] points = new WeightedObservedPoint[len];\n        for (int i = 0; i < len; i++) {\n            points[i] = new WeightedObservedPoint(1, i, y[i]);\n        }\n\n        final HarmonicFitter.ParameterGuesser guesser\n            = new HarmonicFitter.ParameterGuesser(points);\n\n        // The guesser fails because the function is far from an harmonic\n        // function: It is a triangular periodic function with amplitude 3\n        // and period 12, and all sample points are taken at integer abscissae\n        // so function values all belong to the integer subset {-3, -2, -1, 0,\n        // 1, 2, 3}.\n        guesser.guess();\n    }\n",
        "begin_line": 181,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 187,col 51)",
            "(line 188,col 9)-(line 188,col 33)",
            "(line 189,col 9)-(line 189,col 78)",
            "(line 190,col 9)-(line 192,col 9)",
            "(line 194,col 9)-(line 195,col 58)",
            "(line 202,col 9)-(line 202,col 24)"
        ]
    }
]