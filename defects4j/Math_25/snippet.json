[
    {
        "name": "HarmonicFitter.guessAOmega#257",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser.guessAOmega()",
        "snippet": "        private void guessAOmega() {\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {\n                final int last = observations.length - 1;\n                // Range of the observations, assuming that the\n                // observations are sorted.\n                final double xRange = observations[last].getX() - observations[0].getX();\n                if (xRange == 0) {\n                    throw new ZeroException();\n                }\n                omega = 2 * Math.PI / xRange;\n\n                double yMin = Double.POSITIVE_INFINITY;\n                double yMax = Double.NEGATIVE_INFINITY;\n                for (int i = 1; i < observations.length; ++i) {\n                    final double y = observations[i].getY();\n                    if (y < yMin) {\n                        yMin = y;\n                    }\n                    if (y > yMax) {\n                        yMax = y;\n                    }\n                }\n                a = 0.5 * (yMax - yMin);\n            } else {\n                    // In some ill-conditioned cases (cf. MATH-844), the guesser\n                    // procedure cannot produce sensible results.\n\n                a = FastMath.sqrt(c1 / c2);\n                omega = FastMath.sqrt(c2 / c3);\n            }\n        }\n",
        "begin_line": 257,
        "end_line": 329,
        "comment": "\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "HarmonicFitter.ParameterGuesser#195",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser.ParameterGuesser(org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[])",
        "snippet": "        public ParameterGuesser(WeightedObservedPoint[] observations) {\n            if (observations.length < 4) {\n                throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n                                                    observations.length, 4, true);\n            }\n\n            this.observations = observations.clone();\n        }\n",
        "begin_line": 195,
        "end_line": 202,
        "comment": "\n         * Simple constructor.\n         * @param observations sampled observations\n         * @throws NumberIsTooSmallException if the sample is too short or if\n         * the first guess cannot be computed.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "HarmonicFitter.guess#214",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser.guess()",
        "snippet": "        public double[] guess() {\n            sortObservations();\n            guessAOmega();\n            guessPhi();\n            return new double[] { a, omega, phi };\n        }\n",
        "begin_line": 214,
        "end_line": 219,
        "comment": "\n         * Estimate a first guess of the coefficients.\n         *\n         * @return the guessed coefficients, in the following order:\n         * <ul>\n         *  <li>Amplitude</li>\n         *  <li>Angular frequency</li>\n         *  <li>Phase</li>\n         * </ul>\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "HarmonicFitter.sortObservations#224",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser.sortObservations()",
        "snippet": "        private void sortObservations() {\n            // Since the samples are almost always already sorted, this\n            // method is implemented as an insertion sort that reorders the\n            // elements in place. Insertion sort is very efficient in this case.\n            WeightedObservedPoint curr = observations[0];\n            for (int j = 1; j < observations.length; ++j) {\n                WeightedObservedPoint prec = curr;\n                curr = observations[j];\n                if (curr.getX() < prec.getX()) {\n                    // the current element should be inserted closer to the beginning\n                    int i = j - 1;\n                    WeightedObservedPoint mI = observations[i];\n                    while ((i >= 0) && (curr.getX() < mI.getX())) {\n                        observations[i + 1] = mI;\n                        if (i-- != 0) {\n                            mI = observations[i];\n                        }\n                    }\n                    observations[i + 1] = curr;\n                    curr = observations[j];\n                }\n            }\n        }\n",
        "begin_line": 224,
        "end_line": 246,
        "comment": "\n         * Sort the observations with respect to the abscissa.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "HarmonicFitter.guessPhi#334",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.HarmonicFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser.guessPhi()",
        "snippet": "        private void guessPhi() {\n            // initialize the means\n            double fcMean = 0;\n            double fsMean = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n                final double currentYPrime = (currentY - previousY) / (currentX - previousX);\n\n                double omegaX = omega * currentX;\n                double cosine = FastMath.cos(omegaX);\n                double sine = FastMath.sin(omegaX);\n                fcMean += omega * currentY * cosine - currentYPrime * sine;\n                fsMean += omega * currentY * sine + currentYPrime * cosine;\n            }\n\n            phi = FastMath.atan2(-fsMean, fcMean);\n        }\n",
        "begin_line": 334,
        "end_line": 357,
        "comment": "\n         * Estimate a first guess of the phase.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.WeightedObservedPoint#47",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double)",
        "snippet": "    public WeightedObservedPoint(final double weight, final double x, final double y) {\n        this.weight = weight;\n        this.x      = x;\n        this.y      = y;\n    }\n",
        "begin_line": 47,
        "end_line": 51,
        "comment": " Simple constructor.\n     * @param weight weight of the measurement in the fitting process\n     * @param x abscissa of the measurement\n     * @param y ordinate of the measurement\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getX#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint.getX()",
        "snippet": "    public double getX() {\n        return x;\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Get the abscissa of the point.\n     * @return abscissa of the point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getY#70",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint.getY()",
        "snippet": "    public double getY() {\n        return y;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": " Get the observed value of the function at x.\n     * @return observed value of the function at x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    }
]