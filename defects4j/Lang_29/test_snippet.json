[
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.SystemUtilsTest(java.lang.String)",
        "snippet": "    public SystemUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new SystemUtils());\n        Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n    }\n",
        "begin_line": 46,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 41)",
            "(line 48,col 9)-(line 48,col 76)",
            "(line 49,col 9)-(line 49,col 37)",
            "(line 50,col 9)-(line 50,col 70)",
            "(line 51,col 9)-(line 51,col 80)",
            "(line 52,col 9)-(line 52,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetJavaHome()",
        "snippet": "    public void testGetJavaHome() {\n        File dir = SystemUtils.getJavaHome();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }\n",
        "begin_line": 58,
        "end_line": 62,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 45)",
            "(line 60,col 9)-(line 60,col 34)",
            "(line 61,col 9)-(line 61,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetJavaIoTmpDir()",
        "snippet": "    public void testGetJavaIoTmpDir() {\n        File dir = SystemUtils.getJavaIoTmpDir();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }\n",
        "begin_line": 67,
        "end_line": 71,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 49)",
            "(line 69,col 9)-(line 69,col 34)",
            "(line 70,col 9)-(line 70,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetUserDir()",
        "snippet": "    public void testGetUserDir() {\n        File dir = SystemUtils.getUserDir();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }\n",
        "begin_line": 76,
        "end_line": 80,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 44)",
            "(line 78,col 9)-(line 78,col 34)",
            "(line 79,col 9)-(line 79,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testGetUserHome()",
        "snippet": "    public void testGetUserHome() {\n        File dir = SystemUtils.getUserHome();\n        Assert.assertNotNull(dir);\n        Assert.assertTrue(dir.exists());\n    }\n",
        "begin_line": 85,
        "end_line": 89,
        "comment": "\n     * Assums no security manager exists.\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 45)",
            "(line 87,col 9)-(line 87,col 34)",
            "(line 88,col 9)-(line 88,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testIS_JAVA()",
        "snippet": "    public void testIS_JAVA() {\n        String javaVersion = System.getProperty(\"java.version\");\n        if (javaVersion == null) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n        } else if (javaVersion.startsWith(\"1.1\")) {\n            assertEquals(true, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n        } else if (javaVersion.startsWith(\"1.2\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(true, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n        } else if (javaVersion.startsWith(\"1.3\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(true, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n        } else if (javaVersion.startsWith(\"1.4\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(true, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n        } else if (javaVersion.startsWith(\"1.5\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(true, SystemUtils.IS_JAVA_1_5);\n            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n        } else if (javaVersion.startsWith(\"1.6\")) {\n            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n            assertEquals(true, SystemUtils.IS_JAVA_1_6);\n            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n        } else {\n            System.out.println(\"Can't test IS_JAVA value\");\n        }\n    }\n",
        "begin_line": 91,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 64)",
            "(line 93,col 9)-(line 151,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testIS_OS()",
        "snippet": "    public void testIS_OS() {\n        String osName = System.getProperty(\"os.name\");\n        if (osName == null) {\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n            assertEquals(false, SystemUtils.IS_OS_LINUX);\n            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n        } else if (osName.startsWith(\"Windows\")) {\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(true, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"Solaris\")) {\n            assertEquals(true, SystemUtils.IS_OS_SOLARIS);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.toLowerCase(Locale.ENGLISH).startsWith(\"linux\")) {\n            assertEquals(true, SystemUtils.IS_OS_LINUX);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"Mac OS X\")) {\n            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"OS/2\")) {\n            assertEquals(true, SystemUtils.IS_OS_OS2);\n            assertEquals(false, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else if (osName.startsWith(\"SunOS\")) {\n            assertEquals(true, SystemUtils.IS_OS_SUN_OS);\n            assertEquals(true, SystemUtils.IS_OS_UNIX);\n            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n        } else {\n            System.out.println(\"Can't test IS_OS value\");\n        }\n    }\n",
        "begin_line": 154,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 54)",
            "(line 156,col 9)-(line 187,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAsFloat()",
        "snippet": "    public void testJavaVersionAsFloat() {\n        assertEquals(0f, SystemUtils.toJavaVersionFloat(null), 0.000001f);\n        assertEquals(0f, SystemUtils.toJavaVersionFloat(\"\"), 0.000001f);\n        assertEquals(0f, SystemUtils.toJavaVersionFloat(\"0\"), 0.000001f);\n        assertEquals(1.1f, SystemUtils.toJavaVersionFloat(\"1.1\"), 0.000001f);\n        assertEquals(1.2f, SystemUtils.toJavaVersionFloat(\"1.2\"), 0.000001f);\n        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"1.3.0\"), 0.000001f);\n        assertEquals(1.31f, SystemUtils.toJavaVersionFloat(\"1.3.1\"), 0.000001f);\n        assertEquals(1.4f, SystemUtils.toJavaVersionFloat(\"1.4.0\"), 0.000001f);\n        assertEquals(1.41f, SystemUtils.toJavaVersionFloat(\"1.4.1\"), 0.000001f);\n        assertEquals(1.42f, SystemUtils.toJavaVersionFloat(\"1.4.2\"), 0.000001f);\n        assertEquals(1.5f, SystemUtils.toJavaVersionFloat(\"1.5.0\"), 0.000001f);\n        assertEquals(1.6f, SystemUtils.toJavaVersionFloat(\"1.6.0\"), 0.000001f);\n        assertEquals(1.31f, SystemUtils.toJavaVersionFloat(\"JavaVM-1.3.1\"), 0.000001f);\n        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"1.3.0 subset\"), 0.000001f);\n        // This used to return 0f in [lang] version 2.5:\n        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(\"XXX-1.3.x\"), 0.000001f);\n    }\n",
        "begin_line": 190,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 74)",
            "(line 192,col 9)-(line 192,col 72)",
            "(line 193,col 9)-(line 193,col 73)",
            "(line 194,col 9)-(line 194,col 77)",
            "(line 195,col 9)-(line 195,col 77)",
            "(line 196,col 9)-(line 196,col 79)",
            "(line 197,col 9)-(line 197,col 80)",
            "(line 198,col 9)-(line 198,col 79)",
            "(line 199,col 9)-(line 199,col 80)",
            "(line 200,col 9)-(line 200,col 80)",
            "(line 201,col 9)-(line 201,col 79)",
            "(line 202,col 9)-(line 202,col 79)",
            "(line 203,col 9)-(line 203,col 87)",
            "(line 204,col 9)-(line 204,col 86)",
            "(line 206,col 9)-(line 206,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAsInt()",
        "snippet": "    public void testJavaVersionAsInt() {\n        assertEquals(0, SystemUtils.toJavaVersionInt(null));\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"));\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"));\n        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"));\n        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"));\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"));\n        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"));\n        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"));\n        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"));\n        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"));\n        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"));\n        // This used to return 0f in [lang] version 2.5:\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"));\n    }\n",
        "begin_line": 209,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 60)",
            "(line 211,col 9)-(line 211,col 58)",
            "(line 212,col 9)-(line 212,col 59)",
            "(line 213,col 9)-(line 213,col 63)",
            "(line 214,col 9)-(line 214,col 63)",
            "(line 215,col 9)-(line 215,col 65)",
            "(line 216,col 9)-(line 216,col 65)",
            "(line 217,col 9)-(line 217,col 65)",
            "(line 218,col 9)-(line 218,col 65)",
            "(line 219,col 9)-(line 219,col 65)",
            "(line 220,col 9)-(line 220,col 65)",
            "(line 221,col 9)-(line 221,col 65)",
            "(line 222,col 9)-(line 222,col 72)",
            "(line 223,col 9)-(line 223,col 72)",
            "(line 225,col 9)-(line 225,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAtLeastFloat()",
        "snippet": "    public void testJavaVersionAtLeastFloat() {\n        float version = SystemUtils.JAVA_VERSION_FLOAT;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version -= 0.1f;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version += 0.2f;\n        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n    }\n",
        "begin_line": 228,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 55)",
            "(line 230,col 9)-(line 230,col 70)",
            "(line 231,col 9)-(line 231,col 24)",
            "(line 232,col 9)-(line 232,col 70)",
            "(line 233,col 9)-(line 233,col 24)",
            "(line 234,col 9)-(line 234,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionAtLeastInt()",
        "snippet": "    public void testJavaVersionAtLeastInt() {\n        int version = SystemUtils.JAVA_VERSION_INT;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version -= 10;\n        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n        version += 20;\n        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n    }\n",
        "begin_line": 237,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 51)",
            "(line 239,col 9)-(line 239,col 70)",
            "(line 240,col 9)-(line 240,col 22)",
            "(line 241,col 9)-(line 241,col 70)",
            "(line 242,col 9)-(line 242,col 22)",
            "(line 243,col 9)-(line 243,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaVersionMatches()",
        "snippet": "    public void testJavaVersionMatches() {\n        String javaVersion = null;\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.0\";\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.1\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.2\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.3.0\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.3.1\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.4.0\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.4.1\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.4.2\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.5.0\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.6.0\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n        javaVersion = \"1.7.0\";\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n    }\n",
        "begin_line": 246,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 34)",
            "(line 248,col 9)-(line 248,col 80)",
            "(line 249,col 9)-(line 249,col 80)",
            "(line 250,col 9)-(line 250,col 80)",
            "(line 251,col 9)-(line 251,col 80)",
            "(line 252,col 9)-(line 252,col 80)",
            "(line 253,col 9)-(line 253,col 80)",
            "(line 254,col 9)-(line 254,col 80)",
            "(line 255,col 9)-(line 255,col 80)",
            "(line 256,col 9)-(line 256,col 25)",
            "(line 257,col 9)-(line 257,col 80)",
            "(line 258,col 9)-(line 258,col 80)",
            "(line 259,col 9)-(line 259,col 80)",
            "(line 260,col 9)-(line 260,col 80)",
            "(line 261,col 9)-(line 261,col 80)",
            "(line 262,col 9)-(line 262,col 80)",
            "(line 263,col 9)-(line 263,col 80)",
            "(line 264,col 9)-(line 264,col 80)",
            "(line 265,col 9)-(line 265,col 28)",
            "(line 266,col 9)-(line 266,col 79)",
            "(line 267,col 9)-(line 267,col 80)",
            "(line 268,col 9)-(line 268,col 80)",
            "(line 269,col 9)-(line 269,col 80)",
            "(line 270,col 9)-(line 270,col 80)",
            "(line 271,col 9)-(line 271,col 80)",
            "(line 272,col 9)-(line 272,col 80)",
            "(line 273,col 9)-(line 273,col 80)",
            "(line 274,col 9)-(line 274,col 28)",
            "(line 275,col 9)-(line 275,col 80)",
            "(line 276,col 9)-(line 276,col 79)",
            "(line 277,col 9)-(line 277,col 80)",
            "(line 278,col 9)-(line 278,col 80)",
            "(line 279,col 9)-(line 279,col 80)",
            "(line 280,col 9)-(line 280,col 80)",
            "(line 281,col 9)-(line 281,col 80)",
            "(line 282,col 9)-(line 282,col 80)",
            "(line 283,col 9)-(line 283,col 28)",
            "(line 284,col 9)-(line 284,col 80)",
            "(line 285,col 9)-(line 285,col 80)",
            "(line 286,col 9)-(line 286,col 79)",
            "(line 287,col 9)-(line 287,col 80)",
            "(line 288,col 9)-(line 288,col 80)",
            "(line 289,col 9)-(line 289,col 80)",
            "(line 290,col 9)-(line 290,col 80)",
            "(line 291,col 9)-(line 291,col 80)",
            "(line 292,col 9)-(line 292,col 30)",
            "(line 293,col 9)-(line 293,col 80)",
            "(line 294,col 9)-(line 294,col 80)",
            "(line 295,col 9)-(line 295,col 80)",
            "(line 296,col 9)-(line 296,col 79)",
            "(line 297,col 9)-(line 297,col 80)",
            "(line 298,col 9)-(line 298,col 80)",
            "(line 299,col 9)-(line 299,col 80)",
            "(line 300,col 9)-(line 300,col 80)",
            "(line 301,col 9)-(line 301,col 30)",
            "(line 302,col 9)-(line 302,col 80)",
            "(line 303,col 9)-(line 303,col 80)",
            "(line 304,col 9)-(line 304,col 80)",
            "(line 305,col 9)-(line 305,col 79)",
            "(line 306,col 9)-(line 306,col 80)",
            "(line 307,col 9)-(line 307,col 80)",
            "(line 308,col 9)-(line 308,col 80)",
            "(line 309,col 9)-(line 309,col 80)",
            "(line 310,col 9)-(line 310,col 30)",
            "(line 311,col 9)-(line 311,col 80)",
            "(line 312,col 9)-(line 312,col 80)",
            "(line 313,col 9)-(line 313,col 80)",
            "(line 314,col 9)-(line 314,col 80)",
            "(line 315,col 9)-(line 315,col 79)",
            "(line 316,col 9)-(line 316,col 80)",
            "(line 317,col 9)-(line 317,col 80)",
            "(line 318,col 9)-(line 318,col 80)",
            "(line 319,col 9)-(line 319,col 30)",
            "(line 320,col 9)-(line 320,col 80)",
            "(line 321,col 9)-(line 321,col 80)",
            "(line 322,col 9)-(line 322,col 80)",
            "(line 323,col 9)-(line 323,col 80)",
            "(line 324,col 9)-(line 324,col 79)",
            "(line 325,col 9)-(line 325,col 80)",
            "(line 326,col 9)-(line 326,col 80)",
            "(line 327,col 9)-(line 327,col 80)",
            "(line 328,col 9)-(line 328,col 30)",
            "(line 329,col 9)-(line 329,col 80)",
            "(line 330,col 9)-(line 330,col 80)",
            "(line 331,col 9)-(line 331,col 80)",
            "(line 332,col 9)-(line 332,col 80)",
            "(line 333,col 9)-(line 333,col 79)",
            "(line 334,col 9)-(line 334,col 80)",
            "(line 335,col 9)-(line 335,col 80)",
            "(line 336,col 9)-(line 336,col 80)",
            "(line 337,col 9)-(line 337,col 30)",
            "(line 338,col 9)-(line 338,col 80)",
            "(line 339,col 9)-(line 339,col 80)",
            "(line 340,col 9)-(line 340,col 80)",
            "(line 341,col 9)-(line 341,col 80)",
            "(line 342,col 9)-(line 342,col 80)",
            "(line 343,col 9)-(line 343,col 79)",
            "(line 344,col 9)-(line 344,col 80)",
            "(line 345,col 9)-(line 345,col 80)",
            "(line 346,col 9)-(line 346,col 30)",
            "(line 347,col 9)-(line 347,col 80)",
            "(line 348,col 9)-(line 348,col 80)",
            "(line 349,col 9)-(line 349,col 80)",
            "(line 350,col 9)-(line 350,col 80)",
            "(line 351,col 9)-(line 351,col 80)",
            "(line 352,col 9)-(line 352,col 80)",
            "(line 353,col 9)-(line 353,col 79)",
            "(line 354,col 9)-(line 354,col 80)",
            "(line 355,col 9)-(line 355,col 30)",
            "(line 356,col 9)-(line 356,col 80)",
            "(line 357,col 9)-(line 357,col 80)",
            "(line 358,col 9)-(line 358,col 80)",
            "(line 359,col 9)-(line 359,col 80)",
            "(line 360,col 9)-(line 360,col 80)",
            "(line 361,col 9)-(line 361,col 80)",
            "(line 362,col 9)-(line 362,col 80)",
            "(line 363,col 9)-(line 363,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testOSMatchesName()",
        "snippet": "    public void testOSMatchesName() {\n        String osName = null;\n        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n        osName = \"\";\n        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n        osName = \"Windows 95\";\n        assertEquals(true, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n        osName = \"Windows NT\";\n        assertEquals(true, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n        osName = \"OS/2\";\n        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n    }\n",
        "begin_line": 366,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 367,col 9)-(line 367,col 29)",
            "(line 368,col 9)-(line 368,col 74)",
            "(line 369,col 9)-(line 369,col 20)",
            "(line 370,col 9)-(line 370,col 74)",
            "(line 371,col 9)-(line 371,col 30)",
            "(line 372,col 9)-(line 372,col 73)",
            "(line 373,col 9)-(line 373,col 30)",
            "(line 374,col 9)-(line 374,col 73)",
            "(line 375,col 9)-(line 375,col 24)",
            "(line 376,col 9)-(line 376,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testOSMatchesNameAndVersion()",
        "snippet": "    public void testOSMatchesNameAndVersion() {\n        String osName = null;\n        String osVersion = null;\n        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n        osName = \"\";\n        osVersion = \"\";\n        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n        osName = \"Windows 95\";\n        osVersion = \"4.0\";\n        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n        osName = \"Windows 95\";\n        osVersion = \"4.1\";\n        assertEquals(true, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n        osName = \"Windows 98\";\n        osVersion = \"4.1\";\n        assertEquals(true, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n        osName = \"Windows NT\";\n        osVersion = \"4.0\";\n        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n        osName = \"OS/2\";\n        osVersion = \"4.0\";\n        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n    }\n",
        "begin_line": 379,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 29)",
            "(line 381,col 9)-(line 381,col 32)",
            "(line 382,col 9)-(line 382,col 90)",
            "(line 383,col 9)-(line 383,col 20)",
            "(line 384,col 9)-(line 384,col 23)",
            "(line 385,col 9)-(line 385,col 90)",
            "(line 386,col 9)-(line 386,col 30)",
            "(line 387,col 9)-(line 387,col 26)",
            "(line 388,col 9)-(line 388,col 90)",
            "(line 389,col 9)-(line 389,col 30)",
            "(line 390,col 9)-(line 390,col 26)",
            "(line 391,col 9)-(line 391,col 89)",
            "(line 392,col 9)-(line 392,col 30)",
            "(line 393,col 9)-(line 393,col 26)",
            "(line 394,col 9)-(line 394,col 89)",
            "(line 395,col 9)-(line 395,col 30)",
            "(line 396,col 9)-(line 396,col 26)",
            "(line 397,col 9)-(line 397,col 90)",
            "(line 398,col 9)-(line 398,col 24)",
            "(line 399,col 9)-(line 399,col 26)",
            "(line 400,col 9)-(line 400,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SystemUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
        "signature": "org.apache.commons.lang3.SystemUtilsTest.testJavaAwtHeadless()",
        "snippet": "    public void testJavaAwtHeadless() {\n        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);\n        String expectedStringValue = System.getProperty(\"java.awt.headless\");\n        String expectedStringValueWithDefault = System.getProperty(\"java.awt.headless\", \"false\");\n        assertNotNull(expectedStringValueWithDefault);\n        if (atLeastJava14) {\n            boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();\n            if (expectedStringValue != null) {\n                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);\n            }\n            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());\n        } else {\n            assertNull(expectedStringValue);\n            assertNull(SystemUtils.JAVA_AWT_HEADLESS);\n            assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n        }\n        assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n    }\n",
        "begin_line": 403,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 70)",
            "(line 405,col 9)-(line 405,col 77)",
            "(line 406,col 9)-(line 406,col 97)",
            "(line 407,col 9)-(line 407,col 54)",
            "(line 408,col 9)-(line 418,col 9)",
            "(line 419,col 9)-(line 419,col 91)"
        ]
    }
]