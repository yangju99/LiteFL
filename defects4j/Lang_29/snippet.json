[
    {
        "name": "SystemUtils.toJavaVersionInt#1672",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.toJavaVersionInt(java.lang.String)",
        "snippet": "    static float toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }\n",
        "begin_line": 1672,
        "end_line": 1674,
        "comment": "\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.toJavaVersionIntArray#1715",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(java.lang.String, int)",
        "snippet": "    private static int[] toJavaVersionIntArray(String version, int limit) {\n        if (version == null) {\n            return ArrayUtils.EMPTY_INT_ARRAY;\n        }\n        String[] strings = Pattern.compile(\"[^\\\\d]\").split(version);\n        int[] ints = new int[Math.min(limit, strings.length)];\n        int j = 0;\n        for (int i = 0; i < strings.length && j < limit; i++) {\n            String s = strings[i];\n            if (s.length() > 0) {\n                ints[j++] = Integer.parseInt(s);\n            }\n        }\n        return ints;\n    }\n",
        "begin_line": 1715,
        "end_line": 1729,
        "comment": "\n     * <p>\n     * Converts the given Java version string to an <code>int[]</code> of maximum size <code>limit</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>[1, 2, 0]</code> for Java 1.2</li>\n     * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>\n     * <li><code>[1, 5, 0, 21]</code> for Java 1.5.0_21</li>\n     * </ul>\n     * \n     * @return the version, for example [1, 5, 0, 21] for Java 1.5.0_21\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getJavaVersionAsFloat#1363",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat()",
        "snippet": "    private static float getJavaVersionAsFloat() {\n        return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }\n",
        "begin_line": 1363,
        "end_line": 1365,
        "comment": "\n     * <p>\n     * Gets the Java version number as a <code>float</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>1.2f</code> for Java 1.2</li>\n     * <li><code>1.31f</code> for Java 1.3.1</li>\n     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * \n     * @return the version, for example 1.31f for Java 1.3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getJavaVersionAsInt#1387",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt()",
        "snippet": "    private static int getJavaVersionAsInt() {\n        return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));\n    }\n",
        "begin_line": 1387,
        "end_line": 1389,
        "comment": "\n     * <p>\n     * Gets the Java version number as an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getJavaVersionMatches#1400",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String)",
        "snippet": "    private static boolean getJavaVersionMatches(String versionPrefix) {\n        return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);\n    }\n",
        "begin_line": 1400,
        "end_line": 1402,
        "comment": "\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     * \n     * @param versionPrefix\n     *            the prefix for the java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getJavaVersionTrimmed#1409",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed()",
        "snippet": "    private static String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }\n",
        "begin_line": 1409,
        "end_line": 1419,
        "comment": "\n     * Trims the text of the java version to start with numbers.\n     * \n     * @return the trimmed java version\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getOSMatches#1430",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String)",
        "snippet": "    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);\n    }\n",
        "begin_line": 1430,
        "end_line": 1432,
        "comment": "\n     * Decides if the operating system matches.\n     * \n     * @param osNamePrefix\n     *            the prefix for the os name\n     * @param osVersionPrefix\n     *            the prefix for the version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getOSMatchesName#1441",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String)",
        "snippet": "    private static boolean getOSMatchesName(String osNamePrefix) {\n        return isOSNameMatch(OS_NAME, osNamePrefix);\n    }\n",
        "begin_line": 1441,
        "end_line": 1443,
        "comment": "\n     * Decides if the operating system matches.\n     * \n     * @param osNamePrefix\n     *            the prefix for the os name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.getSystemProperty#1460",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String)",
        "snippet": "    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            // we are not allowed to look at this property\n            System.err.println(\"Caught a SecurityException reading the system property '\" + property\n                    + \"'; the SystemUtils property value will default to null.\");\n            return null;\n        }\n    }\n",
        "begin_line": 1460,
        "end_line": 1469,
        "comment": "\n     * <p>\n     * Gets a System property, defaulting to <code>null</code> if the property cannot be read.\n     * </p>\n     * \n     * <p>\n     * If a <code>SecurityException</code> is caught, the return value is <code>null</code> and a message is written to\n     * <code>System.err</code>.\n     * </p>\n     * \n     * @param property\n     *            the system property name\n     * @return the system property value or <code>null</code> if a security problem occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.isJavaVersionMatch#1573",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String)",
        "snippet": "    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }\n",
        "begin_line": 1573,
        "end_line": 1578,
        "comment": "\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param version\n     *            the actual Java version\n     * @param versionPrefix\n     *            the prefix for the expected Java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.isOSMatch#1596",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }\n",
        "begin_line": 1596,
        "end_line": 1601,
        "comment": "\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param osName\n     *            the actual OS name\n     * @param osVersion\n     *            the actual OS version\n     * @param osNamePrefix\n     *            the prefix for the expected OS name\n     * @param osVersionPrefix\n     *            the prefix for the expected OS version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.isOSNameMatch#1615",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String)",
        "snippet": "    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }\n",
        "begin_line": 1615,
        "end_line": 1620,
        "comment": "\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param osName\n     *            the actual OS name\n     * @param osNamePrefix\n     *            the prefix for the expected OS name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.toVersionFloat#1751",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.toVersionFloat(int[])",
        "snippet": "    private static float toVersionFloat(int[] javaVersions) {\n        if (javaVersions == null || javaVersions.length == 0) {\n            return 0f;\n        }\n        if (javaVersions.length == 1) {\n            return javaVersions[0];\n        }\n        StringBuilder builder = new StringBuilder();\n        builder.append(javaVersions[0]);\n        builder.append('.');\n        for (int i = 1; i < javaVersions.length; i++) {\n            builder.append(javaVersions[i]);\n        }\n        try {\n            return Float.parseFloat(builder.toString());\n        } catch (Exception ex) {\n            return 0f;\n        }\n    }\n",
        "begin_line": 1751,
        "end_line": 1769,
        "comment": "\n     * <p>\n     * Converts given the Java version array to a <code>float</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>1.2f</code> for Java 1.2</li>\n     * <li><code>1.31f</code> for Java 1.3.1</li>\n     * <li><code>1.6f</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * \n     * @return the version, for example 1.31f for Java 1.3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    },
    {
        "name": "SystemUtils.toVersionInt#1791",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.toVersionInt(int[])",
        "snippet": "    private static int toVersionInt(int[] javaVersions) {\n        if (javaVersions == null) {\n            return 0;\n        }\n        int intVersion = 0;\n        int len = javaVersions.length;\n        if (len >= 1) {\n            intVersion = javaVersions[0] * 100;\n        }\n        if (len >= 2) {\n            intVersion += javaVersions[1] * 10;\n        }\n        if (len >= 3) {\n            intVersion += javaVersions[2];\n        }\n        return intVersion;\n    }\n",
        "begin_line": 1791,
        "end_line": 1807,
        "comment": "\n     * <p>\n     * Converts given the Java version array to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * \n     * @return the version, for example 1.31f for Java 1.3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.064
        },
        "num_failing_tests": 1
    }
]