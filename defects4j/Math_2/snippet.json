[
    {
        "name": "Well19937c.next#83",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "signature": "org.apache.commons.math3.random.Well19937c.next(int)",
        "snippet": "    @Override\n    protected int next(final int bits) {\n\n        final int indexRm1 = iRm1[index];\n        final int indexRm2 = iRm2[index];\n\n        final int v0       = v[index];\n        final int vM1      = v[i1[index]];\n        final int vM2      = v[i2[index]];\n        final int vM3      = v[i3[index]];\n\n        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);\n        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));\n        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));\n        final int z3 = z1      ^ z2;\n        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));\n\n        v[index]     = z3;\n        v[indexRm1]  = z4;\n        v[indexRm2] &= 0x80000000;\n        index        = indexRm1;\n\n\n        // add Matsumoto-Kurita tempering\n        // to get a maximally-equidistributed generator\n        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);\n        z4 = z4 ^ ((z4 << 15) & 0x9b868000);\n\n        return z4 >>> (32 - bits);\n\n    }\n",
        "begin_line": 83,
        "end_line": 113,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.random.AbstractWell": " {@inheritDoc} ",
            "org.apache.commons.math3.random.BitsStreamGenerator": " Generate next pseudorandom number.\n     * <p>This method is the core generation algorithm. It is used by all the\n     * public generation methods for the various primitive types {@link\n     * #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},\n     * {@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},\n     * {@link #next(int)} and {@link #nextLong()}.</p>\n     * @param bits number of random bits to produce\n     * @return random bits generated\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.nextDouble#89",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.nextDouble()",
        "snippet": "    public double nextDouble() {\n        final long high = ((long) next(26)) << 26;\n        final int  low  = next(26);\n        return (high | low) * 0x1.0p-52d;\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.io.Serializable": null,
            "org.apache.commons.math3.random.RandomGenerator": "\n     * Returns the next pseudorandom, uniformly distributed\n     * <code>double</code> value between <code>0.0</code> and\n     * <code>1.0</code> from this random number generator's sequence.\n     *\n     * @return  the next pseudorandom, uniformly distributed\n     *  <code>double</code> value between <code>0.0</code> and\n     *  <code>1.0</code> from this random number generator's sequence\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractIntegerDistribution.sample#192",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution.sample()",
        "snippet": "    public int sample() {\n        return inverseCumulativeProbability(random.nextDouble());\n    }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\n     * {@inheritDoc}\n     *\n     * The default implementation uses the\n     * <a href=\"http://en.wikipedia.org/wiki/Inverse_transform_sampling\">\n     * inversion method</a>.\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.IntegerDistribution": "\n     * Generate a random value sampled from this distribution.\n     *\n     * @return a random value\n     * @since 3.0\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractIntegerDistribution.inverseCumulativeProbability#100",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution.inverseCumulativeProbability(double)",
        "snippet": "    public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n        if (p < 0.0 || p > 1.0) {\n            throw new OutOfRangeException(p, 0, 1);\n        }\n\n        int lower = getSupportLowerBound();\n        if (p == 0.0) {\n            return lower;\n        }\n        if (lower == Integer.MIN_VALUE) {\n            if (checkedCumulativeProbability(lower) >= p) {\n                return lower;\n            }\n        } else {\n            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                        // is important for the solving step\n        }\n\n        int upper = getSupportUpperBound();\n        if (p == 1.0) {\n            return upper;\n        }\n\n        // use the one-sided Chebyshev inequality to narrow the bracket\n        // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n        final double mu = getNumericalMean();\n        final double sigma = FastMath.sqrt(getNumericalVariance());\n        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n        if (chebyshevApplies) {\n            double k = FastMath.sqrt((1.0 - p) / p);\n            double tmp = mu - k * sigma;\n            if (tmp > lower) {\n                lower = ((int) Math.ceil(tmp)) - 1;\n            }\n            k = 1.0 / k;\n            tmp = mu + k * sigma;\n            if (tmp < upper) {\n                upper = ((int) Math.ceil(tmp)) - 1;\n            }\n        }\n\n        return solveInverseCumulativeProbability(p, lower, upper);\n    }\n",
        "begin_line": 100,
        "end_line": 143,
        "comment": "\n     * {@inheritDoc}\n     *\n     * The default implementation returns\n     * <ul>\n     * <li>{@link #getSupportLowerBound()} for {@code p = 0},</li>\n     * <li>{@link #getSupportUpperBound()} for {@code p = 1}, and</li>\n     * <li>{@link #solveInverseCumulativeProbability(double, int, int)} for\n     *     {@code 0 < p < 1}.</li>\n     * </ul>\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.IntegerDistribution": "\n     * Computes the quantile function of this distribution.\n     * For a random variable {@code X} distributed according to this distribution,\n     * the returned value is\n     * <ul>\n     * <li><code>inf{x in Z | P(X<=x) >= p}</code> for {@code 0 < p <= 1},</li>\n     * <li><code>inf{x in Z | P(X<=x) > 0}</code> for {@code p = 0}.</li>\n     * </ul>\n     * If the result exceeds the range of the data type {@code int},\n     * then {@code Integer.MIN_VALUE} or {@code Integer.MAX_VALUE} is returned.\n     *\n     * @param p the cumulative probability\n     * @return the smallest {@code p}-quantile of this distribution\n     * (largest 0-quantile for {@code p = 0})\n     * @throws OutOfRangeException if {@code p < 0} or {@code p > 1}\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.sqrt#384",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.sqrt(double)",
        "snippet": "    public static double sqrt(final double a) {\n        return Math.sqrt(a);\n    }\n",
        "begin_line": 384,
        "end_line": 386,
        "comment": " Compute the square root of a number.\n     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n     * @param a number on which evaluation is done\n     * @return square root of a\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractIntegerDistribution.solveInverseCumulativeProbability#157",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution.solveInverseCumulativeProbability(double, int, int)",
        "snippet": "    protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n        while (lower + 1 < upper) {\n            int xm = (lower + upper) / 2;\n            if (xm < lower || xm > upper) {\n                /*\n                 * Overflow.\n                 * There will never be an overflow in both calculation methods\n                 * for xm at the same time\n                 */\n                xm = lower + (upper - lower) / 2;\n            }\n\n            double pm = checkedCumulativeProbability(xm);\n            if (pm >= p) {\n                upper = xm;\n            } else {\n                lower = xm;\n            }\n        }\n        return upper;\n    }\n",
        "begin_line": 157,
        "end_line": 177,
        "comment": "\n     * This is a utility function used by {@link\n     * #inverseCumulativeProbability(double)}. It assumes {@code 0 < p < 1} and\n     * that the inverse cumulative probability lies in the bracket {@code\n     * (lower, upper]}. The implementation does simple bisection to find the\n     * smallest {@code p}-quantile <code>inf{x in Z | P(X<=x) >= p}</code>.\n     *\n     * @param p the cumulative probability\n     * @param lower a value satisfying {@code cumulativeProbability(lower) < p}\n     * @param upper a value satisfying {@code p <= cumulativeProbability(upper)}\n     * @return the smallest {@code p}-quantile of this distribution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.getNumericalMean#267",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean()",
        "snippet": "    public double getNumericalMean() {\n        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n    }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n     * {@inheritDoc}\n     *\n     * For population size {@code N}, number of successes {@code m}, and sample\n     * size {@code n}, the mean is {@code n * m / N}.\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.AbstractIntegerDistribution": null,
            "org.apache.commons.math3.distribution.IntegerDistribution": "\n     * Use this method to get the numerical value of the mean of this\n     * distribution.\n     *\n     * @return the mean or {@code Double.NaN} if it is not defined\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.getNumericalVariance#278",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalVariance()",
        "snippet": "    public double getNumericalVariance() {\n        if (!numericalVarianceIsCalculated) {\n            numericalVariance = calculateNumericalVariance();\n            numericalVarianceIsCalculated = true;\n        }\n        return numericalVariance;\n    }\n",
        "begin_line": 278,
        "end_line": 284,
        "comment": "\n     * {@inheritDoc}\n     *\n     * For population size {@code N}, number of successes {@code m}, and sample\n     * size {@code n}, the variance is\n     * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.AbstractIntegerDistribution": null,
            "org.apache.commons.math3.distribution.IntegerDistribution": "\n     * Use this method to get the numerical value of the variance of this\n     * distribution.\n     *\n     * @return the variance (possibly {@code Double.POSITIVE_INFINITY} or\n     * {@code Double.NaN} if it is not defined)\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.calculateNumericalVariance#291",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.calculateNumericalVariance()",
        "snippet": "    protected double calculateNumericalVariance() {\n        final double N = getPopulationSize();\n        final double m = getNumberOfSuccesses();\n        final double n = getSampleSize();\n        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n    }\n",
        "begin_line": 291,
        "end_line": 296,
        "comment": "\n     * Used by {@link #getNumericalVariance()}.\n     *\n     * @return the variance of this distribution\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.getSupportLowerBound#307",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportLowerBound()",
        "snippet": "    public int getSupportLowerBound() {\n        return FastMath.max(0,\n                            getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n    }\n",
        "begin_line": 307,
        "end_line": 310,
        "comment": "\n     * {@inheritDoc}\n     *\n     * For population size {@code N}, number of successes {@code m}, and sample\n     * size {@code n}, the lower bound of the support is\n     * {@code max(0, n + m - N)}.\n     *\n     * @return lower bound of the support\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.AbstractIntegerDistribution": null,
            "org.apache.commons.math3.distribution.IntegerDistribution": "\n     * Access the lower bound of the support. This method must return the same\n     * value as {@code inverseCumulativeProbability(0)}. In other words, this\n     * method must return\n     * <p><code>inf {x in Z | P(X <= x) > 0}</code>.</p>\n     *\n     * @return lower bound of the support ({@code Integer.MIN_VALUE}\n     * for negative infinity)\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.getSupportUpperBound#320",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.getSupportUpperBound()",
        "snippet": "    public int getSupportUpperBound() {\n        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n    }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": "\n     * {@inheritDoc}\n     *\n     * For number of successes {@code m} and sample size {@code n}, the upper\n     * bound of the support is {@code min(m, n)}.\n     *\n     * @return upper bound of the support\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.distribution.AbstractIntegerDistribution": null,
            "org.apache.commons.math3.distribution.IntegerDistribution": "\n     * Access the upper bound of the support. This method must return the same\n     * value as {@code inverseCumulativeProbability(1)}. In other words, this\n     * method must return\n     * <p><code>inf {x in R | P(X <= x) = 1}</code>.</p>\n     *\n     * @return upper bound of the support ({@code Integer.MAX_VALUE}\n     * for positive infinity)\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.getNumberOfSuccesses#160",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.getNumberOfSuccesses()",
        "snippet": "    public int getNumberOfSuccesses() {\n        return numberOfSuccesses;\n    }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": "\n     * Access the number of successes.\n     *\n     * @return the number of successes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.getPopulationSize#169",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.getPopulationSize()",
        "snippet": "    public int getPopulationSize() {\n        return populationSize;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Access the population size.\n     *\n     * @return the population size.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.getSampleSize#178",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.getSampleSize()",
        "snippet": "    public int getSampleSize() {\n        return sampleSize;\n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n     * Access the sample size.\n     *\n     * @return the sample size.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.min#3428",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.min(int, int)",
        "snippet": "    public static int min(final int a, final int b) {\n        return (a <= b) ? a : b;\n    }\n",
        "begin_line": 3428,
        "end_line": 3430,
        "comment": " Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.max#3496",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.max(int, int)",
        "snippet": "    public static int max(final int a, final int b) {\n        return (a <= b) ? b : a;\n    }\n",
        "begin_line": 3496,
        "end_line": 3498,
        "comment": " Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Well19937c.Well19937c#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "signature": "org.apache.commons.math3.random.Well19937c.Well19937c()",
        "snippet": "    public Well19937c() {\n        super(K, M1, M2, M3);\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": " Creates a new random number generator.\n     * <p>The instance is initialized using the current time as the\n     * seed.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "RandomDataImpl.RandomDataImpl#114",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataImpl.java",
        "class_name": "org.apache.commons.math3.random.RandomDataImpl",
        "signature": "org.apache.commons.math3.random.RandomDataImpl.RandomDataImpl()",
        "snippet": "    public RandomDataImpl() {\n        delegate = new RandomDataGenerator();\n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\n     * Construct a RandomDataImpl, using a default random generator as the source\n     * of randomness.\n     *\n     * <p>The default generator is a {@link Well19937c} seeded\n     * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n     * The generator is initialized and seeded on first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "RandomDataGenerator.RandomDataGenerator#132",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.RandomDataGenerator()",
        "snippet": "    public RandomDataGenerator() {\n    }\n",
        "begin_line": 132,
        "end_line": 133,
        "comment": "\n     * Construct a RandomDataGenerator, using a default random generator as the source\n     * of randomness.\n     *\n     * <p>The default generator is a {@link Well19937c} seeded\n     * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n     * The generator is initialized and seeded on first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.BitsStreamGenerator#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.BitsStreamGenerator()",
        "snippet": "    public BitsStreamGenerator() {\n        nextGaussian = Double.NaN;\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "\n     * Creates a new random number generator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.clear#194",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.clear()",
        "snippet": "    public void clear() {\n        nextGaussian = Double.NaN;\n    }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n     * Clears the cache used by the default implementation of\n     * {@link #nextGaussian}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.AbstractWell#71",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int)",
        "snippet": "    protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\n        this(k, m1, m2, m3, null);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": " Creates a new random number generator.\n     * <p>The instance is initialized using the current time plus the\n     * system identity hash code of this instance as the seed.</p>\n     * @param k number of bits in the pool (not necessarily a multiple of 32)\n     * @param m1 first parameter of the algorithm\n     * @param m2 second parameter of the algorithm\n     * @param m3 third parameter of the algorithm\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.AbstractWell#94",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, int[])",
        "snippet": "    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\n\n        // the bits pool contains k bits, k = r w - p where r is the number\n        // of w bits blocks, w is the block size (always 32 in the original paper)\n        // and p is the number of unused bits in the last block\n        final int w = 32;\n        final int r = (k + w - 1) / w;\n        this.v      = new int[r];\n        this.index  = 0;\n\n        // precompute indirection index tables. These tables are used for optimizing access\n        // they allow saving computations like \"(j + r - 2) % r\" with costly modulo operations\n        iRm1 = new int[r];\n        iRm2 = new int[r];\n        i1   = new int[r];\n        i2   = new int[r];\n        i3   = new int[r];\n        for (int j = 0; j < r; ++j) {\n            iRm1[j] = (j + r - 1) % r;\n            iRm2[j] = (j + r - 2) % r;\n            i1[j]   = (j + m1)    % r;\n            i2[j]   = (j + m2)    % r;\n            i3[j]   = (j + m3)    % r;\n        }\n\n        // initialize the pool content\n        setSeed(seed);\n\n    }\n",
        "begin_line": 94,
        "end_line": 122,
        "comment": " Creates a new random number generator using an int array seed.\n     * @param k number of bits in the pool (not necessarily a multiple of 32)\n     * @param m1 first parameter of the algorithm\n     * @param m2 second parameter of the algorithm\n     * @param m3 third parameter of the algorithm\n     * @param seed the initial seed (32 bits integers array), if null\n     * the seed of the generator will be related to the current time\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.setSeed#152",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.setSeed(int[])",
        "snippet": "    @Override\n    public void setSeed(final int[] seed) {\n        if (seed == null) {\n            setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n            return;\n        }\n\n        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n\n        if (seed.length < v.length) {\n            for (int i = seed.length; i < v.length; ++i) {\n                final long l = v[i - seed.length];\n                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\n            }\n        }\n\n        index = 0;\n        clear();  // Clear normal deviate cache\n    }\n",
        "begin_line": 152,
        "end_line": 170,
        "comment": " Reinitialize the generator as if just built with the given int array seed.\n     * <p>The state of the generator is exactly the same as a new\n     * generator built with the same seed.</p>\n     * @param seed the initial seed (32 bits integers array). If null\n     * the seed of the generator will be the system time plus the system identity\n     * hash code of the instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.setSeed#177",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.setSeed(long)",
        "snippet": "    @Override\n    public void setSeed(final long seed) {\n        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n    }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": " Reinitialize the generator as if just built with the given long seed.\n     * <p>The state of the generator is exactly the same as a new\n     * generator built with the same seed.</p>\n     * @param seed the initial seed (64 bits integer)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.HypergeometricDistribution#61",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(int, int, int)",
        "snippet": "    public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {\n        this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);\n    }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n     * Construct a new hypergeometric distribution with the specified population\n     * size, number of successes in the population, and sample size.\n     *\n     * @param populationSize Population size.\n     * @param numberOfSuccesses Number of successes in the population.\n     * @param sampleSize Sample size.\n     * @throws NotPositiveException if {@code numberOfSuccesses < 0}.\n     * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.\n     * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},\n     * or {@code sampleSize > populationSize}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "HypergeometricDistribution.HypergeometricDistribution#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistribution.HypergeometricDistribution(org.apache.commons.math3.random.RandomGenerator, int, int, int)",
        "snippet": "    public HypergeometricDistribution(RandomGenerator rng,\n                                      int populationSize,\n                                      int numberOfSuccesses,\n                                      int sampleSize)\n    throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {\n        super(rng);\n\n        if (populationSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,\n                                                   populationSize);\n        }\n        if (numberOfSuccesses < 0) {\n            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,\n                                           numberOfSuccesses);\n        }\n        if (sampleSize < 0) {\n            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                                           sampleSize);\n        }\n\n        if (numberOfSuccesses > populationSize) {\n            throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,\n                                                numberOfSuccesses, populationSize, true);\n        }\n        if (sampleSize > populationSize) {\n            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n                                                sampleSize, populationSize, true);\n        }\n\n        this.numberOfSuccesses = numberOfSuccesses;\n        this.populationSize = populationSize;\n        this.sampleSize = sampleSize;\n    }\n",
        "begin_line": 79,
        "end_line": 111,
        "comment": "\n     * Creates a new hypergeometric distribution.\n     *\n     * @param rng Random number generator.\n     * @param populationSize Population size.\n     * @param numberOfSuccesses Number of successes in the population.\n     * @param sampleSize Sample size.\n     * @throws NotPositiveException if {@code numberOfSuccesses < 0}.\n     * @throws NotStrictlyPositiveException if {@code populationSize <= 0}.\n     * @throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},\n     * or {@code sampleSize > populationSize}.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractIntegerDistribution.AbstractIntegerDistribution#71",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "signature": "org.apache.commons.math3.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution(org.apache.commons.math3.random.RandomGenerator)",
        "snippet": "    protected AbstractIntegerDistribution(RandomGenerator rng) {\n        random = rng;\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * @param rng Random number generator.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    }
]