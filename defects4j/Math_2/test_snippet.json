[
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public IntegerDistribution makeDistribution() {\n        return new HypergeometricDistribution(10, 5, 5);\n    }\n",
        "begin_line": 40,
        "end_line": 43,
        "comment": " Creates the default discrete distribution instance to use in tests. ",
        "child_ranges": [
            "(line 42,col 9)-(line 42,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.makeDensityTestPoints()",
        "snippet": "    @Override\n    public int[] makeDensityTestPoints() {\n        return new int[] {-1, 0, 1, 2, 3, 4, 5, 10};\n    }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": " Creates the default probability density test input values ",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        return new double[] {0d, 0.003968d, 0.099206d, 0.396825d, 0.396825d,\n                0.099206d, 0.003968d, 0d};\n    }\n",
        "begin_line": 52,
        "end_line": 56,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": [
            "(line 54,col 9)-(line 55,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public int[] makeCumulativeTestPoints() {\n        return makeDensityTestPoints();\n    }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": " Creates the default cumulative probability density test input values ",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] {0d, .003968d, .103175d, .50000d, .896825d, .996032d,\n                1.00000d, 1d};\n    }\n",
        "begin_line": 65,
        "end_line": 69,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 67,col 9)-(line 68,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.makeInverseCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeInverseCumulativeTestPoints() {\n        return new double[] {0d, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,\n                0.990d, 0.975d, 0.950d, 0.900d, 1d};\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": [
            "(line 74,col 9)-(line 75,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.makeInverseCumulativeTestValues()",
        "snippet": "    @Override\n    public int[] makeInverseCumulativeTestValues() {\n        return new int[] {0, 0, 1, 1, 1, 1, 5, 4, 4, 4, 4, 5};\n    }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures()",
        "snippet": "    @Test\n    public void testDegenerateNoFailures() {\n        HypergeometricDistribution dist = new HypergeometricDistribution(5,5,3);\n        setDistribution(dist);\n        setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n        setCumulativeTestValues(new double[] {0d, 0d, 0d, 1d, 1d});\n        setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n        setDensityTestValues(new double[] {0d, 0d, 0d, 1d, 0d});\n        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n        setInverseCumulativeTestValues(new int[] {3, 3});\n        verifyDensities();\n        verifyCumulativeProbabilities();\n        verifyInverseCumulativeProbabilities();\n        Assert.assertEquals(dist.getSupportLowerBound(), 3);\n        Assert.assertEquals(dist.getSupportUpperBound(), 3);\n    }\n",
        "begin_line": 87,
        "end_line": 102,
        "comment": " Verify that if there are no failures, mass is concentrated on sampleSize ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 80)",
            "(line 90,col 9)-(line 90,col 30)",
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 92,col 67)",
            "(line 93,col 9)-(line 93,col 58)",
            "(line 94,col 9)-(line 94,col 64)",
            "(line 95,col 9)-(line 95,col 66)",
            "(line 96,col 9)-(line 96,col 57)",
            "(line 97,col 9)-(line 97,col 26)",
            "(line 98,col 9)-(line 98,col 40)",
            "(line 99,col 9)-(line 99,col 47)",
            "(line 100,col 9)-(line 100,col 60)",
            "(line 101,col 9)-(line 101,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses()",
        "snippet": "    @Test\n    public void testDegenerateNoSuccesses() {\n        HypergeometricDistribution dist = new HypergeometricDistribution(5,0,3);\n        setDistribution(dist);\n        setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n        setCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d});\n        setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n        setDensityTestValues(new double[] {0d, 1d, 0d, 0d, 0d});\n        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n        setInverseCumulativeTestValues(new int[] {0, 0});\n        verifyDensities();\n        verifyCumulativeProbabilities();\n        verifyInverseCumulativeProbabilities();\n        Assert.assertEquals(dist.getSupportLowerBound(), 0);\n        Assert.assertEquals(dist.getSupportUpperBound(), 0);\n    }\n",
        "begin_line": 105,
        "end_line": 120,
        "comment": " Verify that if there are no successes, mass is concentrated on 0 ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 80)",
            "(line 108,col 9)-(line 108,col 30)",
            "(line 109,col 9)-(line 109,col 62)",
            "(line 110,col 9)-(line 110,col 67)",
            "(line 111,col 9)-(line 111,col 58)",
            "(line 112,col 9)-(line 112,col 64)",
            "(line 113,col 9)-(line 113,col 66)",
            "(line 114,col 9)-(line 114,col 57)",
            "(line 115,col 9)-(line 115,col 26)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 47)",
            "(line 118,col 9)-(line 118,col 60)",
            "(line 119,col 9)-(line 119,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample()",
        "snippet": "    @Test\n    public void testDegenerateFullSample() {\n        HypergeometricDistribution dist = new HypergeometricDistribution(5,3,5);\n        setDistribution(dist);\n        setCumulativeTestPoints(new int[] {-1, 0, 1, 3, 10 });\n        setCumulativeTestValues(new double[] {0d, 0d, 0d, 1d, 1d});\n        setDensityTestPoints(new int[] {-1, 0, 1, 3, 10});\n        setDensityTestValues(new double[] {0d, 0d, 0d, 1d, 0d});\n        setInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});\n        setInverseCumulativeTestValues(new int[] {3, 3});\n        verifyDensities();\n        verifyCumulativeProbabilities();\n        verifyInverseCumulativeProbabilities();\n        Assert.assertEquals(dist.getSupportLowerBound(), 3);\n        Assert.assertEquals(dist.getSupportUpperBound(), 3);\n    }\n",
        "begin_line": 123,
        "end_line": 138,
        "comment": " Verify that if sampleSize = populationSize, mass is concentrated on numberOfSuccesses ",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 80)",
            "(line 126,col 9)-(line 126,col 30)",
            "(line 127,col 9)-(line 127,col 62)",
            "(line 128,col 9)-(line 128,col 67)",
            "(line 129,col 9)-(line 129,col 58)",
            "(line 130,col 9)-(line 130,col 64)",
            "(line 131,col 9)-(line 131,col 66)",
            "(line 132,col 9)-(line 132,col 57)",
            "(line 133,col 9)-(line 133,col 26)",
            "(line 134,col 9)-(line 134,col 40)",
            "(line 135,col 9)-(line 135,col 47)",
            "(line 136,col 9)-(line 136,col 60)",
            "(line 137,col 9)-(line 137,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testPreconditions()",
        "snippet": "    @Test\n    public void testPreconditions() {\n        try {\n            new HypergeometricDistribution(0, 3, 5);\n            Assert.fail(\"negative population size. NotStrictlyPositiveException expected\");\n        } catch(NotStrictlyPositiveException ex) {\n            // Expected.\n        }\n        try {\n            new HypergeometricDistribution(5, -1, 5);\n            Assert.fail(\"negative number of successes. NotPositiveException expected\");\n        } catch(NotPositiveException ex) {\n            // Expected.\n        }\n        try {\n            new HypergeometricDistribution(5, 3, -1);\n            Assert.fail(\"negative sample size. NotPositiveException expected\");\n        } catch(NotPositiveException ex) {\n            // Expected.\n        }\n        try {\n            new HypergeometricDistribution(5, 6, 5);\n            Assert.fail(\"numberOfSuccesses > populationSize. NumberIsTooLargeException expected\");\n        } catch(NumberIsTooLargeException ex) {\n            // Expected.\n        }\n        try {\n            new HypergeometricDistribution(5, 3, 6);\n            Assert.fail(\"sampleSize > populationSize. NumberIsTooLargeException expected\");\n        } catch(NumberIsTooLargeException ex) {\n            // Expected.\n        }\n    }\n",
        "begin_line": 140,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 147,col 9)",
            "(line 148,col 9)-(line 153,col 9)",
            "(line 154,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 165,col 9)",
            "(line 166,col 9)-(line 171,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors()",
        "snippet": "    @Test\n    public void testAccessors() {\n        HypergeometricDistribution dist = new HypergeometricDistribution(5, 3, 4);\n        Assert.assertEquals(5, dist.getPopulationSize());\n        Assert.assertEquals(3, dist.getNumberOfSuccesses());\n        Assert.assertEquals(4, dist.getSampleSize());\n    }\n",
        "begin_line": 174,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 82)",
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 178,col 60)",
            "(line 179,col 9)-(line 179,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testLargeValues()",
        "snippet": "    @Test\n    public void testLargeValues() {\n        int populationSize = 3456;\n        int sampleSize = 789;\n        int numberOfSucceses = 101;\n        double[][] data = {\n            {0.0, 2.75646034603961e-12, 2.75646034603961e-12, 1.0},\n            {1.0, 8.55705370142386e-11, 8.83269973602783e-11, 0.999999999997244},\n            {2.0, 1.31288129219665e-9, 1.40120828955693e-9, 0.999999999911673},\n            {3.0, 1.32724172984193e-8, 1.46736255879763e-8, 0.999999998598792},\n            {4.0, 9.94501711734089e-8, 1.14123796761385e-7, 0.999999985326375},\n            {5.0, 5.89080768883643e-7, 7.03204565645028e-7, 0.999999885876203},\n            {20.0, 0.0760051397707708, 0.27349758476299, 0.802507555007781},\n            {21.0, 0.087144222047629, 0.360641806810619, 0.72650241523701},\n            {22.0, 0.0940378846881819, 0.454679691498801, 0.639358193189381},\n            {23.0, 0.0956897500614809, 0.550369441560282, 0.545320308501199},\n            {24.0, 0.0919766921922999, 0.642346133752582, 0.449630558439718},\n            {25.0, 0.083641637261095, 0.725987771013677, 0.357653866247418},\n            {96.0, 5.93849188852098e-57, 1.0, 6.01900244560712e-57},\n            {97.0, 7.96593036832547e-59, 1.0, 8.05105570861321e-59},\n            {98.0, 8.44582921934367e-61, 1.0, 8.5125340287733e-61},\n            {99.0, 6.63604297068222e-63, 1.0, 6.670480942963e-63},\n            {100.0, 3.43501099007557e-65, 1.0, 3.4437972280786e-65},\n            {101.0, 8.78623800302957e-68, 1.0, 8.78623800302957e-68},\n        };\n\n        testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);\n    }\n",
        "begin_line": 182,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 34)",
            "(line 185,col 9)-(line 185,col 29)",
            "(line 186,col 9)-(line 186,col 35)",
            "(line 187,col 9)-(line 206,col 10)",
            "(line 208,col 9)-(line 208,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testHypergeometricDistributionProbabilities(int, int, int, double[][])",
        "snippet": "    private void testHypergeometricDistributionProbabilities(int populationSize, int sampleSize, int numberOfSucceses, double[][] data) {\n        HypergeometricDistribution dist = new HypergeometricDistribution(populationSize, numberOfSucceses, sampleSize);\n        for (int i = 0; i < data.length; ++i) {\n            int x = (int)data[i][0];\n            double pmf = data[i][1];\n            double actualPmf = dist.probability(x);\n            TestUtils.assertRelativelyEquals(\"Expected equals for <\"+x+\"> pmf\",pmf, actualPmf, 1.0e-9);\n\n            double cdf = data[i][2];\n            double actualCdf = dist.cumulativeProbability(x);\n            TestUtils.assertRelativelyEquals(\"Expected equals for <\"+x+\"> cdf\",cdf, actualCdf, 1.0e-9);\n\n            double cdf1 = data[i][3];\n            double actualCdf1 = dist.upperCumulativeProbability(x);\n            TestUtils.assertRelativelyEquals(\"Expected equals for <\"+x+\"> cdf1\",cdf1, actualCdf1, 1.0e-9);\n        }\n    }\n",
        "begin_line": 211,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 119)",
            "(line 213,col 9)-(line 226,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoreLargeValues()",
        "snippet": "    @Test\n    public void testMoreLargeValues() {\n        int populationSize = 26896;\n        int sampleSize = 895;\n        int numberOfSucceses = 55;\n        double[][] data = {\n            {0.0, 0.155168304750504, 0.155168304750504, 1.0},\n            {1.0, 0.29437545000746, 0.449543754757964, 0.844831695249496},\n            {2.0, 0.273841321577003, 0.723385076334967, 0.550456245242036},\n            {3.0, 0.166488572570786, 0.889873648905753, 0.276614923665033},\n            {4.0, 0.0743969744713231, 0.964270623377076, 0.110126351094247},\n            {5.0, 0.0260542785784855, 0.990324901955562, 0.0357293766229237},\n            {20.0, 3.57101101678792e-16, 1.0, 3.78252101622096e-16},\n            {21.0, 2.00551638598312e-17, 1.0, 2.11509999433041e-17},\n            {22.0, 1.04317070180562e-18, 1.0, 1.09583608347287e-18},\n            {23.0, 5.03153504903308e-20, 1.0, 5.266538166725e-20},\n            {24.0, 2.2525984149695e-21, 1.0, 2.35003117691919e-21},\n            {25.0, 9.3677424515947e-23, 1.0, 9.74327619496943e-23},\n            {50.0, 9.83633962945521e-69, 1.0, 9.8677629437617e-69},\n            {51.0, 3.13448949497553e-71, 1.0, 3.14233143064882e-71},\n            {52.0, 7.82755221928122e-74, 1.0, 7.84193567329055e-74},\n            {53.0, 1.43662126065532e-76, 1.0, 1.43834540093295e-76},\n            {54.0, 1.72312692517348e-79, 1.0, 1.7241402776278e-79},\n            {55.0, 1.01335245432581e-82, 1.0, 1.01335245432581e-82},\n        };\n        testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);\n    }\n",
        "begin_line": 229,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 231,col 9)-(line 231,col 35)",
            "(line 232,col 9)-(line 232,col 29)",
            "(line 233,col 9)-(line 233,col 34)",
            "(line 234,col 9)-(line 253,col 10)",
            "(line 254,col 9)-(line 254,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments()",
        "snippet": "    @Test\n    public void testMoments() {\n        final double tol = 1e-9;\n        HypergeometricDistribution dist;\n\n        dist = new HypergeometricDistribution(1500, 40, 100);\n        Assert.assertEquals(dist.getNumericalMean(), 40d * 100d / 1500d, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), ( 100d * 40d * (1500d - 100d) * (1500d - 40d) ) / ( (1500d * 1500d * 1499d) ), tol);\n\n        dist = new HypergeometricDistribution(3000, 55, 200);\n        Assert.assertEquals(dist.getNumericalMean(), 55d * 200d / 3000d, tol);\n        Assert.assertEquals(dist.getNumericalVariance(), ( 200d * 55d * (3000d - 200d) * (3000d - 55d) ) / ( (3000d * 3000d * 2999d) ), tol);\n    }\n",
        "begin_line": 257,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 259,col 9)-(line 259,col 32)",
            "(line 260,col 9)-(line 260,col 40)",
            "(line 262,col 9)-(line 262,col 61)",
            "(line 263,col 9)-(line 263,col 78)",
            "(line 264,col 9)-(line 264,col 141)",
            "(line 266,col 9)-(line 266,col 61)",
            "(line 267,col 9)-(line 267,col 78)",
            "(line 268,col 9)-(line 268,col 141)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath644()",
        "snippet": "    @Test\n    public void testMath644() {\n        int N = 14761461;  // population\n        int m = 1035;      // successes in population\n        int n = 1841;      // number of trials\n\n        int k = 0;\n        final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n        \n        Assert.assertTrue(Precision.compareTo(1.0, dist.upperCumulativeProbability(k), 1) == 0);\n        Assert.assertTrue(Precision.compareTo(dist.cumulativeProbability(k), 0.0, 1) > 0);\n        \n        // another way to calculate the upper cumulative probability\n        double upper = 1.0 - dist.cumulativeProbability(k) + dist.probability(k);\n        Assert.assertTrue(Precision.compareTo(1.0, upper, 1) == 0);\n    }\n",
        "begin_line": 271,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 25)",
            "(line 274,col 9)-(line 274,col 21)",
            "(line 275,col 9)-(line 275,col 21)",
            "(line 277,col 9)-(line 277,col 18)",
            "(line 278,col 9)-(line 278,col 88)",
            "(line 280,col 9)-(line 280,col 96)",
            "(line 281,col 9)-(line 281,col 90)",
            "(line 284,col 9)-(line 284,col 81)",
            "(line 285,col 9)-(line 285,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.HypergeometricDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021()",
        "snippet": "    @Test\n    public void testMath1021() {\n        final int N = 43130568;\n        final int m = 42976365;\n        final int n = 50;\n        final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);\n\n        for (int i = 0; i < 100; i++) {\n            final int sample = dist.sample();\n            Assert.assertTrue(\"sample=\" + sample, 0 <= sample);\n            Assert.assertTrue(\"sample=\" + sample, sample <= n);\n        }\n    }\n",
        "begin_line": 288,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 31)",
            "(line 291,col 9)-(line 291,col 31)",
            "(line 292,col 9)-(line 292,col 25)",
            "(line 293,col 9)-(line 293,col 88)",
            "(line 295,col 9)-(line 299,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.makeDistribution()",
        "snippet": "    public abstract IntegerDistribution makeDistribution();\n",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Creates the default discrete distribution instance to use in tests. ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.makeDensityTestPoints()",
        "snippet": "    public abstract int[] makeDensityTestPoints();\n",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Creates the default probability density test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.makeDensityTestValues()",
        "snippet": "    public abstract double[] makeDensityTestValues();\n",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.makeCumulativeTestPoints()",
        "snippet": "    public abstract int[] makeCumulativeTestPoints();\n",
        "begin_line": 87,
        "end_line": 87,
        "comment": " Creates the default cumulative probability density test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.makeCumulativeTestValues()",
        "snippet": "    public abstract double[] makeCumulativeTestValues();\n",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestPoints()",
        "snippet": "    public abstract double[] makeInverseCumulativeTestPoints();\n",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestValues()",
        "snippet": "    public abstract int[] makeInverseCumulativeTestValues();\n",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        distribution = makeDistribution();\n        densityTestPoints = makeDensityTestPoints();\n        densityTestValues = makeDensityTestValues();\n        cumulativeTestPoints = makeCumulativeTestPoints();\n        cumulativeTestValues = makeCumulativeTestValues();\n        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n        inverseCumulativeTestValues = makeInverseCumulativeTestValues();\n    }\n",
        "begin_line": 103,
        "end_line": 112,
        "comment": "\n     * Setup sets all test instance data to default values\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 42)",
            "(line 106,col 9)-(line 106,col 52)",
            "(line 107,col 9)-(line 107,col 52)",
            "(line 108,col 9)-(line 108,col 58)",
            "(line 109,col 9)-(line 109,col 58)",
            "(line 110,col 9)-(line 110,col 72)",
            "(line 111,col 9)-(line 111,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() {\n        distribution = null;\n        densityTestPoints = null;\n        densityTestValues = null;\n        cumulativeTestPoints = null;\n        cumulativeTestValues = null;\n        inverseCumulativeTestPoints = null;\n        inverseCumulativeTestValues = null;\n    }\n",
        "begin_line": 117,
        "end_line": 126,
        "comment": "\n     * Cleans up test instance data\n     ",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 28)",
            "(line 120,col 9)-(line 120,col 33)",
            "(line 121,col 9)-(line 121,col 33)",
            "(line 122,col 9)-(line 122,col 36)",
            "(line 123,col 9)-(line 123,col 36)",
            "(line 124,col 9)-(line 124,col 43)",
            "(line 125,col 9)-(line 125,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.verifyDensities()",
        "snippet": "    protected void verifyDensities() {\n        for (int i = 0; i < densityTestPoints.length; i++) {\n            Assert.assertEquals(\"Incorrect density value returned for \" + densityTestPoints[i],\n                    densityTestValues[i],\n                    distribution.probability(densityTestPoints[i]), tolerance);\n        }\n    }\n",
        "begin_line": 134,
        "end_line": 140,
        "comment": "\n     * Verifies that probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 139,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()",
        "snippet": "    protected void verifyCumulativeProbabilities() {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            Assert.assertEquals(\"Incorrect cumulative probability value returned for \" + cumulativeTestPoints[i],\n                    cumulativeTestValues[i],\n                    distribution.cumulativeProbability(cumulativeTestPoints[i]), tolerance);\n        }\n    }\n",
        "begin_line": 146,
        "end_line": 152,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 151,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()",
        "snippet": "    protected void verifyInverseCumulativeProbabilities() {\n        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n            Assert.assertEquals(\"Incorrect inverse cumulative probability value returned for \"\n                    + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],\n                    distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]));\n        }\n    }\n",
        "begin_line": 159,
        "end_line": 165,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 164,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.testDensities()",
        "snippet": "    @Test\n    public void testDensities() {\n        verifyDensities();\n    }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": "\n     * Verifies that probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.testCumulativeProbabilities()",
        "snippet": "    @Test\n    public void testCumulativeProbabilities() {\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.testInverseCumulativeProbabilities()",
        "snippet": "    @Test\n    public void testInverseCumulativeProbabilities() {\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 191,
        "end_line": 194,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.testConsistencyAtSupportBounds()",
        "snippet": "    @Test\n    public void testConsistencyAtSupportBounds() {\n        final int lower = distribution.getSupportLowerBound();\n        Assert.assertEquals(\"Cumulative probability mmust be 0 below support lower bound.\",\n                0.0, distribution.cumulativeProbability(lower - 1), 0.0);\n        Assert.assertEquals(\"Cumulative probability of support lower bound must be equal to probability mass at this point.\",\n                distribution.probability(lower), distribution.cumulativeProbability(lower), tolerance);\n        Assert.assertEquals(\"Inverse cumulative probability of 0 must be equal to support lower bound.\",\n                lower, distribution.inverseCumulativeProbability(0.0));\n\n        final int upper = distribution.getSupportUpperBound();\n        if (upper != Integer.MAX_VALUE)\n            Assert.assertEquals(\"Cumulative probability of support upper bound must be equal to 1.\",\n                    1.0, distribution.cumulativeProbability(upper), 0.0);\n        Assert.assertEquals(\"Inverse cumulative probability of 1 must be equal to support upper bound.\",\n                upper, distribution.inverseCumulativeProbability(1.0));\n    }\n",
        "begin_line": 196,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 62)",
            "(line 199,col 9)-(line 200,col 73)",
            "(line 201,col 9)-(line 202,col 103)",
            "(line 203,col 9)-(line 204,col 71)",
            "(line 206,col 9)-(line 206,col 62)",
            "(line 207,col 9)-(line 209,col 73)",
            "(line 210,col 9)-(line 211,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.testIllegalArguments()",
        "snippet": "    @Test\n    public void testIllegalArguments() {\n        try {\n            distribution.cumulativeProbability(1, 0);\n            Assert.fail(\"Expecting MathIllegalArgumentException for bad cumulativeProbability interval\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(-1);\n            Assert.fail(\"Expecting MathIllegalArgumentException for p = -1\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(2);\n            Assert.fail(\"Expecting MathIllegalArgumentException for p = 2\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 217,
        "end_line": 237,
        "comment": "\n     * Verifies that illegal arguments are correctly handled\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 224,col 9)",
            "(line 225,col 9)-(line 230,col 9)",
            "(line 231,col 9)-(line 236,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.testSampling()",
        "snippet": "    @Test\n    public void testSampling() {\n        int[] densityPoints = makeDensityTestPoints();\n        double[] densityValues = makeDensityTestValues();\n        int sampleSize = 1000;\n        int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);\n        AbstractIntegerDistribution distribution = (AbstractIntegerDistribution) makeDistribution();\n        double[] expectedCounts = new double[length];\n        long[] observedCounts = new long[length];\n        for (int i = 0; i < length; i++) {\n            expectedCounts[i] = sampleSize * densityValues[i];\n        }\n        distribution.reseedRandomGenerator(1000); // Use fixed seed\n        int[] sample = distribution.sample(sampleSize);\n        for (int i = 0; i < sampleSize; i++) {\n          for (int j = 0; j < length; j++) {\n              if (sample[i] == densityPoints[j]) {\n                  observedCounts[j]++;\n              }\n          }\n        }\n        TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);\n    }\n",
        "begin_line": 242,
        "end_line": 264,
        "comment": "\n     * Test sampling\n     ",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 54)",
            "(line 245,col 9)-(line 245,col 57)",
            "(line 246,col 9)-(line 246,col 30)",
            "(line 247,col 9)-(line 247,col 85)",
            "(line 248,col 9)-(line 248,col 100)",
            "(line 249,col 9)-(line 249,col 53)",
            "(line 250,col 9)-(line 250,col 49)",
            "(line 251,col 9)-(line 253,col 9)",
            "(line 254,col 9)-(line 254,col 49)",
            "(line 255,col 9)-(line 255,col 55)",
            "(line 256,col 9)-(line 262,col 9)",
            "(line 263,col 9)-(line 263,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getCumulativeTestPoints()",
        "snippet": "    protected int[] getCumulativeTestPoints() {\n        return cumulativeTestPoints;\n    }\n",
        "begin_line": 270,
        "end_line": 272,
        "comment": "\n     * @return Returns the cumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setCumulativeTestPoints(int[])",
        "snippet": "    protected void setCumulativeTestPoints(int[] cumulativeTestPoints) {\n        this.cumulativeTestPoints = cumulativeTestPoints;\n    }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": "\n     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getCumulativeTestValues()",
        "snippet": "    protected double[] getCumulativeTestValues() {\n        return cumulativeTestValues;\n    }\n",
        "begin_line": 284,
        "end_line": 286,
        "comment": "\n     * @return Returns the cumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setCumulativeTestValues(double[])",
        "snippet": "    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n        this.cumulativeTestValues = cumulativeTestValues;\n    }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n     * @param cumulativeTestValues The cumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getDensityTestPoints()",
        "snippet": "    protected int[] getDensityTestPoints() {\n        return densityTestPoints;\n    }\n",
        "begin_line": 298,
        "end_line": 300,
        "comment": "\n     * @return Returns the densityTestPoints.\n     ",
        "child_ranges": [
            "(line 299,col 9)-(line 299,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setDensityTestPoints(int[])",
        "snippet": "    protected void setDensityTestPoints(int[] densityTestPoints) {\n        this.densityTestPoints = densityTestPoints;\n    }\n",
        "begin_line": 305,
        "end_line": 307,
        "comment": "\n     * @param densityTestPoints The densityTestPoints to set.\n     ",
        "child_ranges": [
            "(line 306,col 9)-(line 306,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getDensityTestValues()",
        "snippet": "    protected double[] getDensityTestValues() {\n        return densityTestValues;\n    }\n",
        "begin_line": 312,
        "end_line": 314,
        "comment": "\n     * @return Returns the densityTestValues.\n     ",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setDensityTestValues(double[])",
        "snippet": "    protected void setDensityTestValues(double[] densityTestValues) {\n        this.densityTestValues = densityTestValues;\n    }\n",
        "begin_line": 319,
        "end_line": 321,
        "comment": "\n     * @param densityTestValues The densityTestValues to set.\n     ",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getDistribution()",
        "snippet": "    protected IntegerDistribution getDistribution() {\n        return distribution;\n    }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\n     * @return Returns the distribution.\n     ",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setDistribution(org.apache.commons.math3.distribution.IntegerDistribution)",
        "snippet": "    protected void setDistribution(IntegerDistribution distribution) {\n        this.distribution = distribution;\n    }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "\n     * @param distribution The distribution to set.\n     ",
        "child_ranges": [
            "(line 334,col 9)-(line 334,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestPoints()",
        "snippet": "    protected double[] getInverseCumulativeTestPoints() {\n        return inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "\n     * @return Returns the inverseCumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestPoints(double[])",
        "snippet": "    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 347,
        "end_line": 349,
        "comment": "\n     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestValues()",
        "snippet": "    protected int[] getInverseCumulativeTestValues() {\n        return inverseCumulativeTestValues;\n    }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": "\n     * @return Returns the inverseCumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestValues(int[])",
        "snippet": "    protected void setInverseCumulativeTestValues(int[] inverseCumulativeTestValues) {\n        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n    }\n",
        "begin_line": 361,
        "end_line": 363,
        "comment": "\n     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.getTolerance()",
        "snippet": "    protected double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 368,
        "end_line": 370,
        "comment": "\n     * @return Returns the tolerance.\n     ",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.HypergeometricDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.IntegerDistributionAbstractTest.setTolerance(double)",
        "snippet": "    protected void setTolerance(double tolerance) {\n        this.tolerance = tolerance;\n    }\n",
        "begin_line": 375,
        "end_line": 377,
        "comment": "\n     * @param tolerance The tolerance to set.\n     ",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 35)"
        ]
    }
]