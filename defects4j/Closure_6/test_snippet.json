[
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getOptions()",
        "snippet": "  @Override\n  public CompilerOptions getOptions() {\n    CompilerOptions options = super.getOptions();\n    options.looseTypes = true;\n    return options;\n  }\n",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 49)",
            "(line 52,col 5)-(line 52,col 30)",
            "(line 53,col 5)-(line 53,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        CodingConventions.getDefault()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertTypeEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertTypeEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertTypeEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertTypeEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertTypeEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertTypeEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertTypeEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertTypeEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertTypeEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertTypeEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertTypeEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertTypeEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertTypeEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertTypeEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 56,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 59,col 35)",
            "(line 61,col 5)-(line 61,col 71)",
            "(line 62,col 5)-(line 63,col 39)",
            "(line 64,col 5)-(line 64,col 69)",
            "(line 65,col 5)-(line 65,col 71)",
            "(line 66,col 5)-(line 67,col 41)",
            "(line 68,col 5)-(line 69,col 38)",
            "(line 70,col 5)-(line 70,col 73)",
            "(line 71,col 5)-(line 72,col 42)",
            "(line 73,col 5)-(line 74,col 46)",
            "(line 75,col 5)-(line 75,col 73)",
            "(line 76,col 5)-(line 77,col 38)",
            "(line 78,col 5)-(line 79,col 43)",
            "(line 80,col 5)-(line 81,col 41)",
            "(line 82,col 5)-(line 83,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 87,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 90,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 91,col 5)-(line 94,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 98,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 105,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 111,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 123,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 126,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 132,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 135,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 139,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 142,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 146,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 5)-(line 150,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 158,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck16a()",
        "snippet": "  public void testTypeCheck16a() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 161,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 165,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck16b()",
        "snippet": "  public void testTypeCheck16b() throws Exception {\n    testTypes(\"/**@type {!Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 172,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 177,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 182,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 195,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 198,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 203,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 210,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 214,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 223,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 226,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 231,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 234,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 241,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 244,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 250,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array.<number>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 253,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 259,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 262,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 265,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 268,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 273,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 278,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 281,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 287,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 290,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 296,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 299,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 305,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 308,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 314,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 317,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 318,col 5)-(line 323,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 326,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 333,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 336,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 338,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 341,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 343,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 346,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 347,col 5)-(line 349,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 352,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 358,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 363,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 368,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 371,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 372,col 5)-(line 373,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 376,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 379,col 23)",
            "(line 381,col 5)-(line 382,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning =\n        \"Bad type annotation. variable length argument must be last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 385,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 386,col 5)-(line 387,col 69)",
            "(line 388,col 5)-(line 389,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 394,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 399,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 402,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 404,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 407,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 408,col 5)-(line 410,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 413,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 416,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 423,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 424,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 427,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 431,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 434,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 436,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 439,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 441,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 444,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 445,col 5)-(line 454,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 457,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 467,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n     testTypes(\"/** @constructor */var T = function() {};\\n\" +\n         \"/**\\n\" +\n         \"* @param {Array|T} x\\n\" +\n         \"* @return {null|undefined}\\n\" +\n         \"*/\\n\" +\n         \"var f = function(x) {\\n\" +\n         \"if (!x) {\\n\" +\n         \"return x;\\n\" +\n         \"}\\n\" +\n         \"return null;\\n\" +\n         \"};\");\n   }\n",
        "begin_line": 470,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 471,col 6)-(line 481,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 484,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 489,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 492,
        "end_line": 498,
        "comment": "",
        "child_ranges": [
            "(line 493,col 5)-(line 497,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 500,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 501,col 5)-(line 505,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 508,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 512,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 515,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 516,col 5)-(line 520,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null|undefined)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 523,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 524,col 5)-(line 528,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 531,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 533,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 536,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 537,col 5)-(line 538,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 541,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 543,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 546,
        "end_line": 549,
        "comment": "",
        "child_ranges": [
            "(line 547,col 5)-(line 548,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 551,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 552,col 5)-(line 554,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 557,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 558,col 5)-(line 561,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 564,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 565,col 5)-(line 569,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 572,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 573,col 5)-(line 578,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 581,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 582,col 5)-(line 587,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 590,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 591,col 5)-(line 596,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 599,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 600,col 5)-(line 605,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 608,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 609,col 5)-(line 611,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 614,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 615,col 5)-(line 619,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 622,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 624,col 5)-(line 628,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 631,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 633,col 5)-(line 637,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 640,
        "end_line": 644,
        "comment": "",
        "child_ranges": [
            "(line 641,col 5)-(line 643,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 646,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 647,col 5)-(line 650,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 653,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 654,col 5)-(line 657,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 660,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 661,col 5)-(line 666,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 669,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 670,col 5)-(line 674,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 677,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 678,col 5)-(line 682,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 685,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 686,col 5)-(line 688,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 691,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 692,col 5)-(line 698,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 701,
        "end_line": 710,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 709,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 712,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 713,col 5)-(line 720,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 723,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 724,col 5)-(line 731,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 734,
        "end_line": 740,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 739,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 742,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 743,col 5)-(line 747,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 750,
        "end_line": 759,
        "comment": "",
        "child_ranges": [
            "(line 751,col 5)-(line 758,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 761,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 762,col 5)-(line 771,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 774,
        "end_line": 784,
        "comment": "",
        "child_ranges": [
            "(line 776,col 5)-(line 783,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 786,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 788,col 5)-(line 795,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 798,
        "end_line": 804,
        "comment": "",
        "child_ranges": [
            "(line 799,col 5)-(line 803,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 806,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 807,col 5)-(line 811,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 814,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 815,col 5)-(line 819,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 822,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 824,col 5)-(line 828,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 831,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 833,col 5)-(line 837,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 840,
        "end_line": 848,
        "comment": "",
        "child_ranges": [
            "(line 842,col 5)-(line 847,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 850,
        "end_line": 858,
        "comment": "",
        "child_ranges": [
            "(line 852,col 5)-(line 857,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 860,
        "end_line": 868,
        "comment": "",
        "child_ranges": [
            "(line 861,col 5)-(line 867,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 870,
        "end_line": 879,
        "comment": "",
        "child_ranges": [
            "(line 871,col 5)-(line 878,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 881,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 882,col 5)-(line 882,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 885,
        "end_line": 887,
        "comment": "",
        "child_ranges": [
            "(line 886,col 5)-(line 886,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 889,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 890,col 5)-(line 892,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 895,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 896,col 5)-(line 898,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 901,
        "end_line": 905,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 904,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 907,
        "end_line": 911,
        "comment": "",
        "child_ranges": [
            "(line 908,col 5)-(line 910,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 913,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 914,col 5)-(line 919,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 922,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 923,col 5)-(line 928,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 931,
        "end_line": 938,
        "comment": "",
        "child_ranges": [
            "(line 932,col 5)-(line 937,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 940,
        "end_line": 946,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 945,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 948,
        "end_line": 954,
        "comment": "",
        "child_ranges": [
            "(line 950,col 5)-(line 953,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 956,
        "end_line": 963,
        "comment": "",
        "child_ranges": [
            "(line 957,col 5)-(line 962,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 965,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 966,col 5)-(line 971,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 974,
        "end_line": 981,
        "comment": "",
        "child_ranges": [
            "(line 975,col 5)-(line 980,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 983,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 984,col 5)-(line 989,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 992,
        "end_line": 999,
        "comment": "",
        "child_ranges": [
            "(line 993,col 5)-(line 998,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1001,
        "end_line": 1008,
        "comment": "",
        "child_ranges": [
            "(line 1002,col 5)-(line 1007,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1010,
        "end_line": 1017,
        "comment": "",
        "child_ranges": [
            "(line 1011,col 5)-(line 1016,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1019,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 1020,col 5)-(line 1022,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1025,
        "end_line": 1029,
        "comment": "",
        "child_ranges": [
            "(line 1026,col 5)-(line 1028,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1031,
        "end_line": 1036,
        "comment": "",
        "child_ranges": [
            "(line 1032,col 5)-(line 1035,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1038,
        "end_line": 1040,
        "comment": "",
        "child_ranges": [
            "(line 1039,col 5)-(line 1039,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1042,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1043,col 5)-(line 1046,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1049,
        "end_line": 1051,
        "comment": "",
        "child_ranges": [
            "(line 1050,col 5)-(line 1050,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1053,
        "end_line": 1056,
        "comment": "",
        "child_ranges": [
            "(line 1054,col 5)-(line 1055,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1058,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1059,col 5)-(line 1062,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return {void}*/ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1065,
        "end_line": 1070,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 5)-(line 1069,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1072,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1073,col 5)-(line 1073,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1080,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 5)-(line 1081,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1084,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1086,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1089,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 5)-(line 1091,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ \" +\n        \"function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1094,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 5)-(line 1099,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1102,
        "end_line": 1106,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1105,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1108,
        "end_line": 1113,
        "comment": "",
        "child_ranges": [
            "(line 1109,col 5)-(line 1112,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1115,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1116,col 5)-(line 1119,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1122,
        "end_line": 1125,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1124,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1127,
        "end_line": 1133,
        "comment": "",
        "child_ranges": [
            "(line 1128,col 5)-(line 1132,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1135,
        "end_line": 1141,
        "comment": "",
        "child_ranges": [
            "(line 1136,col 5)-(line 1140,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1143,
        "end_line": 1146,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 5)-(line 1145,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1148,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1149,col 5)-(line 1150,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1153,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 5)-(line 1156,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1159,
        "end_line": 1162,
        "comment": "",
        "child_ranges": [
            "(line 1160,col 5)-(line 1161,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1164,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1165,col 5)-(line 1173,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1176,
        "end_line": 1183,
        "comment": "",
        "child_ranges": [
            "(line 1177,col 5)-(line 1182,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1185,
        "end_line": 1191,
        "comment": "",
        "child_ranges": [
            "(line 1186,col 5)-(line 1190,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null|undefined)\");\n  }\n",
        "begin_line": 1193,
        "end_line": 1197,
        "comment": "",
        "child_ranges": [
            "(line 1194,col 5)-(line 1196,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null|undefined)\");\n  }\n",
        "begin_line": 1199,
        "end_line": 1203,
        "comment": "",
        "child_ranges": [
            "(line 1200,col 5)-(line 1202,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1205,
        "end_line": 1209,
        "comment": "",
        "child_ranges": [
            "(line 1208,col 5)-(line 1208,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1211,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1214,col 5)-(line 1214,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1217,
        "end_line": 1224,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1223,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1226,
        "end_line": 1234,
        "comment": "",
        "child_ranges": [
            "(line 1227,col 5)-(line 1233,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1236,
        "end_line": 1244,
        "comment": "",
        "child_ranges": [
            "(line 1237,col 5)-(line 1243,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1246,
        "end_line": 1256,
        "comment": "",
        "child_ranges": [
            "(line 1247,col 5)-(line 1247,col 78)",
            "(line 1250,col 5)-(line 1250,col 47)",
            "(line 1251,col 5)-(line 1251,col 48)",
            "(line 1254,col 5)-(line 1255,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named anonymous functions create a binding in their body only\n    // the return is wrong but the assignment is OK since the type of b is ?\n    testTypes(\n        \"/** @return {number} */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1258,
        "end_line": 1266,
        "comment": "",
        "child_ranges": [
            "(line 1261,col 5)-(line 1265,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return {string} */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1268,
        "end_line": 1273,
        "comment": "",
        "child_ranges": [
            "(line 1269,col 5)-(line 1272,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(opt_a) {}\",\n        \"function (number=): string\");\n  }\n",
        "begin_line": 1275,
        "end_line": 1280,
        "comment": "",
        "child_ranges": [
            "(line 1276,col 5)-(line 1279,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return {string} */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1282,
        "end_line": 1287,
        "comment": "",
        "child_ranges": [
            "(line 1283,col 5)-(line 1286,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, number=): string\");\n  }\n",
        "begin_line": 1289,
        "end_line": 1294,
        "comment": "",
        "child_ranges": [
            "(line 1290,col 5)-(line 1293,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1296,
        "end_line": 1300,
        "comment": "",
        "child_ranges": [
            "(line 1297,col 5)-(line 1299,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1302,
        "end_line": 1306,
        "comment": "",
        "child_ranges": [
            "(line 1303,col 5)-(line 1305,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1308,
        "end_line": 1312,
        "comment": "",
        "child_ranges": [
            "(line 1309,col 5)-(line 1311,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1314,
        "end_line": 1318,
        "comment": "",
        "child_ranges": [
            "(line 1315,col 5)-(line 1317,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1320,
        "end_line": 1325,
        "comment": "",
        "child_ranges": [
            "(line 1322,col 5)-(line 1324,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1327,
        "end_line": 1332,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1331,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1334,
        "end_line": 1338,
        "comment": "",
        "child_ranges": [
            "(line 1335,col 5)-(line 1337,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1340,
        "end_line": 1343,
        "comment": "",
        "child_ranges": [
            "(line 1341,col 5)-(line 1342,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have non-inferable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1345,
        "end_line": 1354,
        "comment": "",
        "child_ranges": [
            "(line 1347,col 5)-(line 1353,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1356,
        "end_line": 1364,
        "comment": "",
        "child_ranges": [
            "(line 1357,col 5)-(line 1363,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1366,
        "end_line": 1373,
        "comment": "",
        "child_ranges": [
            "(line 1367,col 5)-(line 1372,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1375,
        "end_line": 1383,
        "comment": "",
        "child_ranges": [
            "(line 1377,col 5)-(line 1382,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1385,
        "end_line": 1393,
        "comment": "",
        "child_ranges": [
            "(line 1386,col 5)-(line 1392,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1395,
        "end_line": 1399,
        "comment": "",
        "child_ranges": [
            "(line 1396,col 5)-(line 1398,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1401,
        "end_line": 1405,
        "comment": "",
        "child_ranges": [
            "(line 1402,col 5)-(line 1404,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1407,
        "end_line": 1411,
        "comment": "",
        "child_ranges": [
            "(line 1408,col 5)-(line 1410,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1413,
        "end_line": 1417,
        "comment": "",
        "child_ranges": [
            "(line 1414,col 5)-(line 1416,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1419,
        "end_line": 1423,
        "comment": "",
        "child_ranges": [
            "(line 1420,col 5)-(line 1422,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n        \"function (this:Date, ?=): string\");\n  }\n",
        "begin_line": 1425,
        "end_line": 1429,
        "comment": "",
        "child_ranges": [
            "(line 1426,col 5)-(line 1428,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1431,
        "end_line": 1435,
        "comment": "",
        "child_ranges": [
            "(line 1432,col 5)-(line 1434,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1437,
        "end_line": 1441,
        "comment": "",
        "child_ranges": [
            "(line 1438,col 5)-(line 1440,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1443,
        "end_line": 1447,
        "comment": "",
        "child_ranges": [
            "(line 1444,col 5)-(line 1446,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1449,
        "end_line": 1454,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 5)-(line 1453,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return {number}*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1456,
        "end_line": 1462,
        "comment": "",
        "child_ranges": [
            "(line 1457,col 5)-(line 1461,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1464,
        "end_line": 1470,
        "comment": "",
        "child_ranges": [
            "(line 1465,col 5)-(line 1469,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1472,
        "end_line": 1479,
        "comment": "",
        "child_ranges": [
            "(line 1473,col 5)-(line 1478,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1481,
        "end_line": 1488,
        "comment": "",
        "child_ranges": [
            "(line 1482,col 5)-(line 1487,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1490,
        "end_line": 1496,
        "comment": "",
        "child_ranges": [
            "(line 1491,col 5)-(line 1495,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1498,
        "end_line": 1504,
        "comment": "",
        "child_ranges": [
            "(line 1499,col 5)-(line 1503,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1506,
        "end_line": 1513,
        "comment": "",
        "child_ranges": [
            "(line 1507,col 5)-(line 1512,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1515,
        "end_line": 1521,
        "comment": "",
        "child_ranges": [
            "(line 1516,col 5)-(line 1520,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1523,
        "end_line": 1528,
        "comment": "",
        "child_ranges": [
            "(line 1524,col 5)-(line 1527,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1530,
        "end_line": 1535,
        "comment": "",
        "child_ranges": [
            "(line 1531,col 5)-(line 1534,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1537,
        "end_line": 1547,
        "comment": "",
        "child_ranges": [
            "(line 1538,col 5)-(line 1546,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1549,
        "end_line": 1561,
        "comment": "",
        "child_ranges": [
            "(line 1550,col 5)-(line 1560,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1563,
        "end_line": 1576,
        "comment": "",
        "child_ranges": [
            "(line 1564,col 5)-(line 1575,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1578,
        "end_line": 1591,
        "comment": "",
        "child_ranges": [
            "(line 1579,col 5)-(line 1590,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1593,
        "end_line": 1605,
        "comment": "",
        "child_ranges": [
            "(line 1594,col 5)-(line 1604,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1607,
        "end_line": 1618,
        "comment": "",
        "child_ranges": [
            "(line 1608,col 5)-(line 1617,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1620,
        "end_line": 1632,
        "comment": "",
        "child_ranges": [
            "(line 1621,col 5)-(line 1631,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1634,
        "end_line": 1645,
        "comment": "",
        "child_ranges": [
            "(line 1635,col 5)-(line 1644,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1647,
        "end_line": 1655,
        "comment": "",
        "child_ranges": [
            "(line 1648,col 5)-(line 1654,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 1657,
        "end_line": 1661,
        "comment": "",
        "child_ranges": [
            "(line 1658,col 5)-(line 1660,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1663,
        "end_line": 1670,
        "comment": "",
        "child_ranges": [
            "(line 1664,col 5)-(line 1669,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 1672,
        "end_line": 1677,
        "comment": "",
        "child_ranges": [
            "(line 1673,col 5)-(line 1676,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1679,
        "end_line": 1687,
        "comment": "",
        "child_ranges": [
            "(line 1680,col 5)-(line 1686,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1689,
        "end_line": 1697,
        "comment": "",
        "child_ranges": [
            "(line 1690,col 5)-(line 1696,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1699,
        "end_line": 1708,
        "comment": "",
        "child_ranges": [
            "(line 1700,col 5)-(line 1707,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1710,
        "end_line": 1720,
        "comment": "",
        "child_ranges": [
            "(line 1711,col 5)-(line 1719,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1722,
        "end_line": 1734,
        "comment": "",
        "child_ranges": [
            "(line 1723,col 5)-(line 1733,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1736,
        "end_line": 1748,
        "comment": "",
        "child_ranges": [
            "(line 1737,col 5)-(line 1747,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1750,
        "end_line": 1762,
        "comment": "",
        "child_ranges": [
            "(line 1751,col 5)-(line 1761,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1764,
        "end_line": 1777,
        "comment": "",
        "child_ranges": [
            "(line 1765,col 5)-(line 1776,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\");\n  }\n",
        "begin_line": 1779,
        "end_line": 1787,
        "comment": "",
        "child_ranges": [
            "(line 1780,col 5)-(line 1786,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\",\n        \"mismatch of the foo property type and the type of the property \" +\n        \"it overrides from superclass F\\n\" +\n        \"original: function (this:F): undefined\\n\" +\n        \"override: function (this:G, ?, ?): undefined\");\n  }\n",
        "begin_line": 1789,
        "end_line": 1800,
        "comment": "",
        "child_ranges": [
            "(line 1790,col 5)-(line 1799,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(opt_b, var_args) { };\" +\n        \"(new G()).foo(1, 2, 3);\");\n  }\n",
        "begin_line": 1802,
        "end_line": 1811,
        "comment": "",
        "child_ranges": [
            "(line 1803,col 5)-(line 1810,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1813,
        "end_line": 1822,
        "comment": "",
        "child_ranges": [
            "(line 1814,col 5)-(line 1821,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1824,
        "end_line": 1831,
        "comment": "",
        "child_ranges": [
            "(line 1825,col 5)-(line 1830,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1833,
        "end_line": 1840,
        "comment": "",
        "child_ranges": [
            "(line 1834,col 5)-(line 1839,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1842,
        "end_line": 1848,
        "comment": "",
        "child_ranges": [
            "(line 1843,col 5)-(line 1847,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (number): undefined\");\n  }\n",
        "begin_line": 1850,
        "end_line": 1858,
        "comment": "",
        "child_ranges": [
            "(line 1851,col 5)-(line 1857,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1860,
        "end_line": 1866,
        "comment": "",
        "child_ranges": [
            "(line 1861,col 5)-(line 1865,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1868,
        "end_line": 1873,
        "comment": "",
        "child_ranges": [
            "(line 1869,col 5)-(line 1872,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1875,
        "end_line": 1880,
        "comment": "",
        "child_ranges": [
            "(line 1876,col 5)-(line 1879,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1882,
        "end_line": 1890,
        "comment": "",
        "child_ranges": [
            "(line 1883,col 5)-(line 1889,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1892,
        "end_line": 1898,
        "comment": "",
        "child_ranges": [
            "(line 1893,col 5)-(line 1897,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1900,
        "end_line": 1906,
        "comment": "",
        "child_ranges": [
            "(line 1901,col 5)-(line 1905,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1908,
        "end_line": 1916,
        "comment": "",
        "child_ranges": [
            "(line 1909,col 5)-(line 1915,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        Lists.newArrayList(\n            \"assignment to property foo of goog\\n\" +\n            \"found   : string\\n\" +\n            \"required: Foo\",\n            \"variable goog.foo redefined with type string, \" +\n            \"original definition at [testcode]:1 with type Foo\"));\n  }\n",
        "begin_line": 1918,
        "end_line": 1930,
        "comment": "",
        "child_ranges": [
            "(line 1919,col 5)-(line 1929,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        Lists.newArrayList(\n            \"assignment to property foo of goog\\n\" +\n            \"found   : string\\n\" +\n            \"required: Foo\",\n            \"variable goog.foo redefined with type string, \" +\n            \"original definition at [testcode]:1 with type Foo\"));\n  }\n",
        "begin_line": 1932,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1933,col 5)-(line 1943,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 1946,
        "end_line": 1951,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1950,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 1953,
        "end_line": 1958,
        "comment": "",
        "child_ranges": [
            "(line 1954,col 5)-(line 1957,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 1960,
        "end_line": 1966,
        "comment": "",
        "child_ranges": [
            "(line 1961,col 5)-(line 1965,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 1968,
        "end_line": 1974,
        "comment": "",
        "child_ranges": [
            "(line 1969,col 5)-(line 1973,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        Lists.newArrayList(\n            \"variable x redefined with type string, original definition\" +\n            \" at [testcode]:2 with type number\",\n            \"initializing variable\\n\" +\n            \"found   : string\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 1976,
        "end_line": 1986,
        "comment": "",
        "child_ranges": [
            "(line 1977,col 5)-(line 1985,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 1988,
        "end_line": 1995,
        "comment": "",
        "child_ranges": [
            "(line 1989,col 5)-(line 1994,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testExternFunctionType(\n        // externs\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (new:f.subclass): ?\");\n  }\n",
        "begin_line": 1997,
        "end_line": 2004,
        "comment": "",
        "child_ranges": [
            "(line 1998,col 5)-(line 2003,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 2006,
        "end_line": 2012,
        "comment": "",
        "child_ranges": [
            "(line 2007,col 5)-(line 2011,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2014,
        "end_line": 2021,
        "comment": "",
        "child_ranges": [
            "(line 2015,col 5)-(line 2020,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2023,
        "end_line": 2031,
        "comment": "",
        "child_ranges": [
            "(line 2024,col 5)-(line 2030,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2033,
        "end_line": 2040,
        "comment": "",
        "child_ranges": [
            "(line 2034,col 5)-(line 2039,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2042,
        "end_line": 2049,
        "comment": "",
        "child_ranges": [
            "(line 2043,col 5)-(line 2048,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n            .toString());\n  }\n",
        "begin_line": 2051,
        "end_line": 2057,
        "comment": "",
        "child_ranges": [
            "(line 2052,col 5)-(line 2056,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2059,
        "end_line": 2064,
        "comment": "",
        "child_ranges": [
            "(line 2060,col 5)-(line 2063,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2066,
        "end_line": 2071,
        "comment": "",
        "child_ranges": [
            "(line 2067,col 5)-(line 2070,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2073,
        "end_line": 2079,
        "comment": "",
        "child_ranges": [
            "(line 2074,col 5)-(line 2076,col 60)",
            "(line 2077,col 5)-(line 2078,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2085,
        "end_line": 2088,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2087,col 5)-(line 2087,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2094,
        "end_line": 2103,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2097,col 5)-(line 2102,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testExternFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    testTypes(\n        functionDef,\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\", false);\n  }\n",
        "begin_line": 2110,
        "end_line": 2118,
        "comment": "\n   * Tests the type of a function definition in externs.\n   * The function defined by {@code functionDef} should be\n   * named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2112,col 5)-(line 2117,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        Lists.newArrayList(\n            \"variable a.A redefined with type function (new:a.A): undefined, \" +\n            \"original definition at [testcode]:1 with type enum{a.A}\",\n            \"assignment to property A of a\\n\" +\n            \"found   : function (new:a.A): undefined\\n\" +\n            \"required: enum{a.A}\"));\n  }\n",
        "begin_line": 2120,
        "end_line": 2130,
        "comment": "",
        "child_ranges": [
            "(line 2121,col 5)-(line 2129,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2132,
        "end_line": 2134,
        "comment": "",
        "child_ranges": [
            "(line 2133,col 5)-(line 2133,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2136,
        "end_line": 2138,
        "comment": "",
        "child_ranges": [
            "(line 2137,col 5)-(line 2137,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2140,
        "end_line": 2142,
        "comment": "",
        "child_ranges": [
            "(line 2141,col 5)-(line 2141,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2144,
        "end_line": 2149,
        "comment": "",
        "child_ranges": [
            "(line 2145,col 5)-(line 2148,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2151,
        "end_line": 2156,
        "comment": "",
        "child_ranges": [
            "(line 2152,col 5)-(line 2155,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2158,
        "end_line": 2166,
        "comment": "",
        "child_ranges": [
            "(line 2159,col 5)-(line 2165,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2168,
        "end_line": 2184,
        "comment": "",
        "child_ranges": [
            "(line 2170,col 5)-(line 2183,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to true\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2196,
        "end_line": 2203,
        "comment": "",
        "child_ranges": [
            "(line 2197,col 5)-(line 2202,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2205,
        "end_line": 2209,
        "comment": "",
        "child_ranges": [
            "(line 2207,col 5)-(line 2208,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2211,
        "end_line": 2215,
        "comment": "",
        "child_ranges": [
            "(line 2212,col 5)-(line 2214,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2217,
        "end_line": 2224,
        "comment": "",
        "child_ranges": [
            "(line 2218,col 5)-(line 2223,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2226,
        "end_line": 2233,
        "comment": "",
        "child_ranges": [
            "(line 2227,col 5)-(line 2232,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2235,
        "end_line": 2242,
        "comment": "",
        "child_ranges": [
            "(line 2236,col 5)-(line 2241,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2244,
        "end_line": 2247,
        "comment": "",
        "child_ranges": [
            "(line 2245,col 5)-(line 2246,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2249,
        "end_line": 2255,
        "comment": "",
        "child_ranges": [
            "(line 2250,col 5)-(line 2254,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2257,
        "end_line": 2260,
        "comment": "",
        "child_ranges": [
            "(line 2258,col 5)-(line 2259,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2262,
        "end_line": 2270,
        "comment": "",
        "child_ranges": [
            "(line 2263,col 5)-(line 2269,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2272,
        "end_line": 2280,
        "comment": "",
        "child_ranges": [
            "(line 2273,col 5)-(line 2279,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2282,
        "end_line": 2285,
        "comment": "",
        "child_ranges": [
            "(line 2283,col 5)-(line 2284,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2287,
        "end_line": 2290,
        "comment": "",
        "child_ranges": [
            "(line 2288,col 5)-(line 2289,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"variable a.BB redefined with type a.<number>, \" +\n        \"original definition at [testcode]:1 with type a.<number>\");\n  }\n",
        "begin_line": 2292,
        "end_line": 2296,
        "comment": "",
        "child_ranges": [
            "(line 2293,col 5)-(line 2295,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2298,
        "end_line": 2303,
        "comment": "",
        "child_ranges": [
            "(line 2299,col 5)-(line 2302,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null|undefined)\");\n  }\n",
        "begin_line": 2305,
        "end_line": 2310,
        "comment": "",
        "child_ranges": [
            "(line 2306,col 5)-(line 2309,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2312,
        "end_line": 2317,
        "comment": "",
        "child_ranges": [
            "(line 2313,col 5)-(line 2316,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2319,
        "end_line": 2323,
        "comment": "",
        "child_ranges": [
            "(line 2320,col 5)-(line 2322,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testClosureTypesMultipleWarnings(\"/** @enum */var a=8;\",\n        Lists.newArrayList(\n            \"enum initializer must be an object literal or an enum\",\n            \"initializing variable\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{a}\"));\n  }\n",
        "begin_line": 2325,
        "end_line": 2332,
        "comment": "",
        "child_ranges": [
            "(line 2326,col 5)-(line 2331,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        Lists.newArrayList(\n            \"assignment to property a of goog\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{goog.a}\",\n            \"enum initializer must be an object literal or an enum\"));\n  }\n",
        "begin_line": 2334,
        "end_line": 2343,
        "comment": "",
        "child_ranges": [
            "(line 2335,col 5)-(line 2342,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2345,
        "end_line": 2349,
        "comment": "",
        "child_ranges": [
            "(line 2346,col 5)-(line 2348,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2351,
        "end_line": 2355,
        "comment": "",
        "child_ranges": [
            "(line 2352,col 5)-(line 2354,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2357,
        "end_line": 2361,
        "comment": "",
        "child_ranges": [
            "(line 2358,col 5)-(line 2360,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2363,
        "end_line": 2370,
        "comment": "",
        "child_ranges": [
            "(line 2364,col 5)-(line 2369,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2372,
        "end_line": 2377,
        "comment": "",
        "child_ranges": [
            "(line 2373,col 5)-(line 2376,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2379,
        "end_line": 2385,
        "comment": "",
        "child_ranges": [
            "(line 2380,col 5)-(line 2384,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog .a={BB:1,BB:2}\",\n        \"variable goog.a.BB redefined with type goog.a.<number>, \" +\n        \"original definition at [testcode]:1 with type goog.a.<number>\");\n  }\n",
        "begin_line": 2387,
        "end_line": 2392,
        "comment": "",
        "child_ranges": [
            "(line 2388,col 5)-(line 2391,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"assignment to property BB of enum{goog.a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2394,
        "end_line": 2400,
        "comment": "",
        "child_ranges": [
            "(line 2395,col 5)-(line 2399,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2402,
        "end_line": 2406,
        "comment": "",
        "child_ranges": [
            "(line 2403,col 5)-(line 2405,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2408,
        "end_line": 2415,
        "comment": "",
        "child_ranges": [
            "(line 2409,col 5)-(line 2414,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2417,
        "end_line": 2419,
        "comment": "",
        "child_ranges": [
            "(line 2418,col 5)-(line 2418,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2421,
        "end_line": 2429,
        "comment": "",
        "child_ranges": [
            "(line 2422,col 5)-(line 2424,col 74)",
            "(line 2425,col 5)-(line 2425,col 79)",
            "(line 2426,col 5)-(line 2426,col 37)",
            "(line 2427,col 5)-(line 2427,col 34)",
            "(line 2428,col 5)-(line 2428,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2431,
        "end_line": 2434,
        "comment": "",
        "child_ranges": [
            "(line 2432,col 5)-(line 2433,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2436,
        "end_line": 2442,
        "comment": "",
        "child_ranges": [
            "(line 2437,col 5)-(line 2441,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null|undefined)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2444,
        "end_line": 2450,
        "comment": "",
        "child_ranges": [
            "(line 2445,col 5)-(line 2449,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2452,
        "end_line": 2455,
        "comment": "",
        "child_ranges": [
            "(line 2453,col 5)-(line 2454,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2457,
        "end_line": 2460,
        "comment": "",
        "child_ranges": [
            "(line 2458,col 5)-(line 2459,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 2462,
        "end_line": 2466,
        "comment": "",
        "child_ranges": [
            "(line 2464,col 5)-(line 2465,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 2468,
        "end_line": 2472,
        "comment": "",
        "child_ranges": [
            "(line 2470,col 5)-(line 2471,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2474,
        "end_line": 2480,
        "comment": "",
        "child_ranges": [
            "(line 2475,col 5)-(line 2479,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2482,
        "end_line": 2485,
        "comment": "",
        "child_ranges": [
            "(line 2483,col 5)-(line 2484,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 2487,
        "end_line": 2493,
        "comment": "",
        "child_ranges": [
            "(line 2488,col 5)-(line 2492,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2495,
        "end_line": 2498,
        "comment": "",
        "child_ranges": [
            "(line 2496,col 5)-(line 2497,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 2500,
        "end_line": 2503,
        "comment": "",
        "child_ranges": [
            "(line 2501,col 5)-(line 2502,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 2505,
        "end_line": 2508,
        "comment": "",
        "child_ranges": [
            "(line 2506,col 5)-(line 2507,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 2510,
        "end_line": 2516,
        "comment": "",
        "child_ranges": [
            "(line 2511,col 5)-(line 2515,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 2518,
        "end_line": 2523,
        "comment": "",
        "child_ranges": [
            "(line 2519,col 5)-(line 2522,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 2525,
        "end_line": 2531,
        "comment": "",
        "child_ranges": [
            "(line 2526,col 5)-(line 2530,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2533,
        "end_line": 2541,
        "comment": "",
        "child_ranges": [
            "(line 2534,col 5)-(line 2540,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2543,
        "end_line": 2551,
        "comment": "",
        "child_ranges": [
            "(line 2544,col 5)-(line 2550,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2553,
        "end_line": 2558,
        "comment": "",
        "child_ranges": [
            "(line 2554,col 5)-(line 2557,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2560,
        "end_line": 2565,
        "comment": "",
        "child_ranges": [
            "(line 2561,col 5)-(line 2564,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2567,
        "end_line": 2572,
        "comment": "",
        "child_ranges": [
            "(line 2568,col 5)-(line 2571,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2574,
        "end_line": 2579,
        "comment": "",
        "child_ranges": [
            "(line 2575,col 5)-(line 2578,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2581,
        "end_line": 2589,
        "comment": "",
        "child_ranges": [
            "(line 2582,col 5)-(line 2588,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 2591,
        "end_line": 2595,
        "comment": "",
        "child_ranges": [
            "(line 2592,col 5)-(line 2594,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2597,
        "end_line": 2604,
        "comment": "",
        "child_ranges": [
            "(line 2598,col 5)-(line 2603,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 2606,
        "end_line": 2611,
        "comment": "",
        "child_ranges": [
            "(line 2607,col 5)-(line 2610,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2613,
        "end_line": 2621,
        "comment": "",
        "child_ranges": [
            "(line 2614,col 5)-(line 2620,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2623,
        "end_line": 2629,
        "comment": "",
        "child_ranges": [
            "(line 2624,col 5)-(line 2628,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2631,
        "end_line": 2639,
        "comment": "",
        "child_ranges": [
            "(line 2632,col 5)-(line 2638,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2641,
        "end_line": 2651,
        "comment": "",
        "child_ranges": [
            "(line 2642,col 5)-(line 2650,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 2653,
        "end_line": 2655,
        "comment": "",
        "child_ranges": [
            "(line 2654,col 5)-(line 2654,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2657,
        "end_line": 2661,
        "comment": "",
        "child_ranges": [
            "(line 2659,col 5)-(line 2660,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 2663,
        "end_line": 2666,
        "comment": "",
        "child_ranges": [
            "(line 2664,col 5)-(line 2665,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2668,
        "end_line": 2671,
        "comment": "",
        "child_ranges": [
            "(line 2669,col 5)-(line 2670,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 2673,
        "end_line": 2691,
        "comment": "",
        "child_ranges": [
            "(line 2677,col 5)-(line 2681,col 69)",
            "(line 2682,col 5)-(line 2682,col 71)",
            "(line 2683,col 5)-(line 2683,col 65)",
            "(line 2685,col 5)-(line 2686,col 57)",
            "(line 2687,col 5)-(line 2687,col 75)",
            "(line 2689,col 5)-(line 2689,col 73)",
            "(line 2690,col 5)-(line 2690,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 2693,
        "end_line": 2697,
        "comment": "",
        "child_ranges": [
            "(line 2695,col 5)-(line 2696,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 2699,
        "end_line": 2709,
        "comment": "",
        "child_ranges": [
            "(line 2700,col 5)-(line 2708,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (new:derived, ...[?]): ?\");\n  }\n",
        "begin_line": 2711,
        "end_line": 2719,
        "comment": "",
        "child_ranges": [
            "(line 2712,col 5)-(line 2718,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2721,
        "end_line": 2729,
        "comment": "",
        "child_ranges": [
            "(line 2722,col 5)-(line 2728,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 2731,
        "end_line": 2738,
        "comment": "",
        "child_ranges": [
            "(line 2732,col 5)-(line 2737,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 2740,
        "end_line": 2746,
        "comment": "",
        "child_ranges": [
            "(line 2741,col 5)-(line 2745,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2748,
        "end_line": 2759,
        "comment": "",
        "child_ranges": [
            "(line 2749,col 5)-(line 2758,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Bad type annotation. Unknown type not_base\");\n  }\n",
        "begin_line": 2761,
        "end_line": 2765,
        "comment": "",
        "child_ranges": [
            "(line 2762,col 5)-(line 2764,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 2767,
        "end_line": 2781,
        "comment": "",
        "child_ranges": [
            "(line 2768,col 5)-(line 2780,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 2783,
        "end_line": 2786,
        "comment": "",
        "child_ranges": [
            "(line 2784,col 5)-(line 2785,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 2788,
        "end_line": 2796,
        "comment": "",
        "child_ranges": [
            "(line 2789,col 5)-(line 2795,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 2798,
        "end_line": 2804,
        "comment": "",
        "child_ranges": [
            "(line 2799,col 5)-(line 2799,col 76)",
            "(line 2800,col 5)-(line 2803,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 2806,
        "end_line": 2815,
        "comment": "",
        "child_ranges": [
            "(line 2807,col 5)-(line 2807,col 76)",
            "(line 2808,col 5)-(line 2814,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2817,
        "end_line": 2824,
        "comment": "",
        "child_ranges": [
            "(line 2818,col 5)-(line 2818,col 76)",
            "(line 2819,col 5)-(line 2823,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2826,
        "end_line": 2833,
        "comment": "",
        "child_ranges": [
            "(line 2827,col 5)-(line 2827,col 76)",
            "(line 2828,col 5)-(line 2832,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 2835,
        "end_line": 2842,
        "comment": "",
        "child_ranges": [
            "(line 2836,col 5)-(line 2841,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 2844,
        "end_line": 2851,
        "comment": "",
        "child_ranges": [
            "(line 2845,col 5)-(line 2850,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2853,
        "end_line": 2863,
        "comment": "",
        "child_ranges": [
            "(line 2854,col 5)-(line 2862,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 2865,
        "end_line": 2874,
        "comment": "",
        "child_ranges": [
            "(line 2868,col 5)-(line 2873,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 2876,
        "end_line": 2879,
        "comment": "",
        "child_ranges": [
            "(line 2877,col 5)-(line 2878,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 2881,
        "end_line": 2888,
        "comment": "",
        "child_ranges": [
            "(line 2882,col 5)-(line 2887,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 2890,
        "end_line": 2898,
        "comment": "",
        "child_ranges": [
            "(line 2891,col 5)-(line 2897,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor for f\");\n  }\n",
        "begin_line": 2900,
        "end_line": 2904,
        "comment": "",
        "child_ranges": [
            "(line 2901,col 5)-(line 2903,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplements3()",
        "snippet": "  public void testBadImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n        \"f cannot implement this type; an interface can only extend, \" +\n        \"but not implement interfaces\");\n  }\n",
        "begin_line": 2906,
        "end_line": 2911,
        "comment": "",
        "child_ranges": [
            "(line 2907,col 5)-(line 2910,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 2913,
        "end_line": 2919,
        "comment": "",
        "child_ranges": [
            "(line 2914,col 5)-(line 2918,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 2921,
        "end_line": 2924,
        "comment": "",
        "child_ranges": [
            "(line 2922,col 5)-(line 2923,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; interfaces can only extend interfaces\");\n  }\n",
        "begin_line": 2926,
        "end_line": 2930,
        "comment": "",
        "child_ranges": [
            "(line 2927,col 5)-(line 2929,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; constructors can only extend constructors\");\n  }\n",
        "begin_line": 2932,
        "end_line": 2936,
        "comment": "",
        "child_ranges": [
            "(line 2933,col 5)-(line 2935,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 2938,
        "end_line": 2945,
        "comment": "",
        "child_ranges": [
            "(line 2942,col 5)-(line 2944,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 2947,
        "end_line": 2954,
        "comment": "",
        "child_ranges": [
            "(line 2951,col 5)-(line 2953,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2956,
        "end_line": 2960,
        "comment": "",
        "child_ranges": [
            "(line 2957,col 5)-(line 2959,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2962,
        "end_line": 2965,
        "comment": "",
        "child_ranges": [
            "(line 2963,col 5)-(line 2964,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 2967,
        "end_line": 2970,
        "comment": "",
        "child_ranges": [
            "(line 2968,col 5)-(line 2969,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 2972,
        "end_line": 2977,
        "comment": "",
        "child_ranges": [
            "(line 2973,col 5)-(line 2976,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 2979,
        "end_line": 2987,
        "comment": "",
        "child_ranges": [
            "(line 2980,col 5)-(line 2986,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 2989,
        "end_line": 2994,
        "comment": "",
        "child_ranges": [
            "(line 2990,col 5)-(line 2993,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 2996,
        "end_line": 3002,
        "comment": "",
        "child_ranges": [
            "(line 2997,col 5)-(line 3001,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 3004,
        "end_line": 3012,
        "comment": "",
        "child_ranges": [
            "(line 3005,col 5)-(line 3011,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 3014,
        "end_line": 3023,
        "comment": "",
        "child_ranges": [
            "(line 3015,col 5)-(line 3022,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3025,
        "end_line": 3033,
        "comment": "",
        "child_ranges": [
            "(line 3026,col 5)-(line 3032,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\");\n  }\n",
        "begin_line": 3035,
        "end_line": 3039,
        "comment": "",
        "child_ranges": [
            "(line 3036,col 5)-(line 3038,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null|undefined)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3041,
        "end_line": 3048,
        "comment": "",
        "child_ranges": [
            "(line 3042,col 5)-(line 3047,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3050,
        "end_line": 3059,
        "comment": "",
        "child_ranges": [
            "(line 3051,col 5)-(line 3058,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3061,
        "end_line": 3070,
        "comment": "",
        "child_ranges": [
            "(line 3062,col 5)-(line 3069,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3072,
        "end_line": 3077,
        "comment": "",
        "child_ranges": [
            "(line 3073,col 5)-(line 3076,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3079,
        "end_line": 3088,
        "comment": "",
        "child_ranges": [
            "(line 3080,col 5)-(line 3087,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3090,
        "end_line": 3095,
        "comment": "",
        "child_ranges": [
            "(line 3091,col 5)-(line 3094,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 3097,
        "end_line": 3099,
        "comment": "",
        "child_ranges": [
            "(line 3098,col 5)-(line 3098,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3101,
        "end_line": 3106,
        "comment": "",
        "child_ranges": [
            "(line 3102,col 5)-(line 3105,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3108,
        "end_line": 3115,
        "comment": "",
        "child_ranges": [
            "(line 3109,col 5)-(line 3114,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3117,
        "end_line": 3122,
        "comment": "",
        "child_ranges": [
            "(line 3118,col 5)-(line 3121,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3124,
        "end_line": 3129,
        "comment": "",
        "child_ranges": [
            "(line 3125,col 5)-(line 3128,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3131,
        "end_line": 3136,
        "comment": "",
        "child_ranges": [
            "(line 3132,col 5)-(line 3135,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3138,
        "end_line": 3145,
        "comment": "",
        "child_ranges": [
            "(line 3141,col 5)-(line 3144,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3147,
        "end_line": 3153,
        "comment": "",
        "child_ranges": [
            "(line 3148,col 5)-(line 3152,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3155,
        "end_line": 3160,
        "comment": "",
        "child_ranges": [
            "(line 3156,col 5)-(line 3159,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3162,
        "end_line": 3169,
        "comment": "",
        "child_ranges": [
            "(line 3165,col 5)-(line 3168,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 3171,
        "end_line": 3173,
        "comment": "",
        "child_ranges": [
            "(line 3172,col 5)-(line 3172,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3175,
        "end_line": 3182,
        "comment": "",
        "child_ranges": [
            "(line 3176,col 5)-(line 3181,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 3184,
        "end_line": 3186,
        "comment": "",
        "child_ranges": [
            "(line 3185,col 5)-(line 3185,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertTypeEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3188,
        "end_line": 3194,
        "comment": "",
        "child_ranges": [
            "(line 3189,col 5)-(line 3190,col 79)",
            "(line 3192,col 5)-(line 3193,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 3196,
        "end_line": 3198,
        "comment": "",
        "child_ranges": [
            "(line 3197,col 5)-(line 3197,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertTypeEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3200,
        "end_line": 3204,
        "comment": "",
        "child_ranges": [
            "(line 3201,col 5)-(line 3201,col 65)",
            "(line 3203,col 5)-(line 3203,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3206,
        "end_line": 3212,
        "comment": "",
        "child_ranges": [
            "(line 3207,col 5)-(line 3208,col 36)",
            "(line 3210,col 5)-(line 3211,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3214,
        "end_line": 3221,
        "comment": "",
        "child_ranges": [
            "(line 3215,col 5)-(line 3220,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3223,
        "end_line": 3234,
        "comment": "",
        "child_ranges": [
            "(line 3224,col 5)-(line 3233,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 3236,
        "end_line": 3239,
        "comment": "",
        "child_ranges": [
            "(line 3237,col 5)-(line 3238,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 3241,
        "end_line": 3243,
        "comment": "",
        "child_ranges": [
            "(line 3242,col 5)-(line 3242,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 3245,
        "end_line": 3248,
        "comment": "",
        "child_ranges": [
            "(line 3246,col 5)-(line 3247,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3250,
        "end_line": 3255,
        "comment": "",
        "child_ranges": [
            "(line 3251,col 5)-(line 3254,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3257,
        "end_line": 3262,
        "comment": "",
        "child_ranges": [
            "(line 3258,col 5)-(line 3261,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 3264,
        "end_line": 3274,
        "comment": "",
        "child_ranges": [
            "(line 3265,col 5)-(line 3273,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 3276,
        "end_line": 3279,
        "comment": "",
        "child_ranges": [
            "(line 3278,col 5)-(line 3278,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3281,
        "end_line": 3286,
        "comment": "",
        "child_ranges": [
            "(line 3282,col 5)-(line 3285,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3288,
        "end_line": 3294,
        "comment": "",
        "child_ranges": [
            "(line 3289,col 5)-(line 3293,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3296,
        "end_line": 3302,
        "comment": "",
        "child_ranges": [
            "(line 3297,col 5)-(line 3301,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3304,
        "end_line": 3311,
        "comment": "",
        "child_ranges": [
            "(line 3305,col 5)-(line 3310,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 3313,
        "end_line": 3317,
        "comment": "",
        "child_ranges": [
            "(line 3314,col 5)-(line 3316,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 3319,
        "end_line": 3323,
        "comment": "",
        "child_ranges": [
            "(line 3320,col 5)-(line 3322,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 3325,
        "end_line": 3336,
        "comment": "",
        "child_ranges": [
            "(line 3326,col 5)-(line 3335,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 3338,
        "end_line": 3342,
        "comment": "",
        "child_ranges": [
            "(line 3339,col 5)-(line 3341,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3344,
        "end_line": 3351,
        "comment": "",
        "child_ranges": [
            "(line 3345,col 5)-(line 3350,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 3353,
        "end_line": 3356,
        "comment": "",
        "child_ranges": [
            "(line 3354,col 5)-(line 3355,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3363,
        "end_line": 3368,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 3364,col 6)-(line 3367,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3373,
        "end_line": 3378,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 3374,col 6)-(line 3377,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 3380,
        "end_line": 3384,
        "comment": "",
        "child_ranges": [
            "(line 3381,col 5)-(line 3383,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3386,
        "end_line": 3393,
        "comment": "",
        "child_ranges": [
            "(line 3387,col 5)-(line 3392,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3395,
        "end_line": 3401,
        "comment": "",
        "child_ranges": [
            "(line 3396,col 5)-(line 3400,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 3403,
        "end_line": 3407,
        "comment": "",
        "child_ranges": [
            "(line 3404,col 5)-(line 3406,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 3409,
        "end_line": 3413,
        "comment": "",
        "child_ranges": [
            "(line 3410,col 5)-(line 3412,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 3415,
        "end_line": 3419,
        "comment": "",
        "child_ranges": [
            "(line 3416,col 5)-(line 3418,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 3421,
        "end_line": 3427,
        "comment": "",
        "child_ranges": [
            "(line 3426,col 5)-(line 3426,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 3429,
        "end_line": 3431,
        "comment": "",
        "child_ranges": [
            "(line 3430,col 5)-(line 3430,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 3433,
        "end_line": 3439,
        "comment": "",
        "child_ranges": [
            "(line 3434,col 5)-(line 3438,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type (null|undefined) */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 3441,
        "end_line": 3446,
        "comment": "",
        "child_ranges": [
            "(line 3442,col 5)-(line 3445,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type (null|undefined) */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 3448,
        "end_line": 3453,
        "comment": "",
        "child_ranges": [
            "(line 3449,col 5)-(line 3452,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 3455,
        "end_line": 3460,
        "comment": "",
        "child_ranges": [
            "(line 3456,col 5)-(line 3459,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 3462,
        "end_line": 3467,
        "comment": "",
        "child_ranges": [
            "(line 3463,col 5)-(line 3466,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 3469,
        "end_line": 3474,
        "comment": "",
        "child_ranges": [
            "(line 3470,col 5)-(line 3473,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 3476,
        "end_line": 3481,
        "comment": "",
        "child_ranges": [
            "(line 3477,col 5)-(line 3480,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3483,
        "end_line": 3493,
        "comment": "",
        "child_ranges": [
            "(line 3484,col 5)-(line 3492,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 3495,
        "end_line": 3502,
        "comment": "",
        "child_ranges": [
            "(line 3496,col 5)-(line 3501,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3504,
        "end_line": 3511,
        "comment": "",
        "child_ranges": [
            "(line 3505,col 5)-(line 3510,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3513,
        "end_line": 3520,
        "comment": "",
        "child_ranges": [
            "(line 3514,col 5)-(line 3519,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3522,
        "end_line": 3526,
        "comment": "",
        "child_ranges": [
            "(line 3523,col 5)-(line 3525,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3528,
        "end_line": 3532,
        "comment": "",
        "child_ranges": [
            "(line 3529,col 5)-(line 3531,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3534,
        "end_line": 3544,
        "comment": "",
        "child_ranges": [
            "(line 3535,col 5)-(line 3543,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3546,
        "end_line": 3556,
        "comment": "",
        "child_ranges": [
            "(line 3547,col 5)-(line 3555,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3558,
        "end_line": 3568,
        "comment": "",
        "child_ranges": [
            "(line 3559,col 5)-(line 3567,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3570,
        "end_line": 3580,
        "comment": "",
        "child_ranges": [
            "(line 3571,col 5)-(line 3579,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 3582,
        "end_line": 3588,
        "comment": "",
        "child_ranges": [
            "(line 3583,col 5)-(line 3587,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 3590,
        "end_line": 3596,
        "comment": "",
        "child_ranges": [
            "(line 3591,col 5)-(line 3595,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3598,
        "end_line": 3608,
        "comment": "",
        "child_ranges": [
            "(line 3599,col 5)-(line 3607,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3610,
        "end_line": 3622,
        "comment": "",
        "child_ranges": [
            "(line 3611,col 5)-(line 3621,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3624,
        "end_line": 3635,
        "comment": "",
        "child_ranges": [
            "(line 3625,col 5)-(line 3634,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3637,
        "end_line": 3647,
        "comment": "",
        "child_ranges": [
            "(line 3638,col 5)-(line 3646,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3649,
        "end_line": 3656,
        "comment": "",
        "child_ranges": [
            "(line 3650,col 5)-(line 3655,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3658,
        "end_line": 3665,
        "comment": "",
        "child_ranges": [
            "(line 3659,col 5)-(line 3664,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3667,
        "end_line": 3674,
        "comment": "",
        "child_ranges": [
            "(line 3668,col 5)-(line 3673,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3676,
        "end_line": 3683,
        "comment": "",
        "child_ranges": [
            "(line 3677,col 5)-(line 3682,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3685,
        "end_line": 3692,
        "comment": "",
        "child_ranges": [
            "(line 3686,col 5)-(line 3691,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3694,
        "end_line": 3701,
        "comment": "",
        "child_ranges": [
            "(line 3695,col 5)-(line 3700,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3703,
        "end_line": 3708,
        "comment": "",
        "child_ranges": [
            "(line 3704,col 5)-(line 3707,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3710,
        "end_line": 3715,
        "comment": "",
        "child_ranges": [
            "(line 3711,col 5)-(line 3714,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3717,
        "end_line": 3722,
        "comment": "",
        "child_ranges": [
            "(line 3718,col 5)-(line 3721,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3724,
        "end_line": 3729,
        "comment": "",
        "child_ranges": [
            "(line 3725,col 5)-(line 3728,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 3731,
        "end_line": 3734,
        "comment": "",
        "child_ranges": [
            "(line 3732,col 5)-(line 3733,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3736,
        "end_line": 3743,
        "comment": "",
        "child_ranges": [
            "(line 3737,col 5)-(line 3742,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3745,
        "end_line": 3752,
        "comment": "",
        "child_ranges": [
            "(line 3746,col 5)-(line 3751,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3754,
        "end_line": 3761,
        "comment": "",
        "child_ranges": [
            "(line 3755,col 5)-(line 3760,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return {number} */goog.A.prototype.n = \" +\n        \"  function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3763,
        "end_line": 3771,
        "comment": "",
        "child_ranges": [
            "(line 3764,col 5)-(line 3770,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3773,
        "end_line": 3783,
        "comment": "",
        "child_ranges": [
            "(line 3774,col 5)-(line 3782,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 3785,
        "end_line": 3791,
        "comment": "",
        "child_ranges": [
            "(line 3786,col 5)-(line 3790,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3793,
        "end_line": 3803,
        "comment": "",
        "child_ranges": [
            "(line 3794,col 5)-(line 3802,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3805,
        "end_line": 3810,
        "comment": "",
        "child_ranges": [
            "(line 3806,col 5)-(line 3809,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return {!Date} */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3812,
        "end_line": 3819,
        "comment": "",
        "child_ranges": [
            "(line 3813,col 5)-(line 3818,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return {number} */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3821,
        "end_line": 3827,
        "comment": "",
        "child_ranges": [
            "(line 3822,col 5)-(line 3826,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3829,
        "end_line": 3838,
        "comment": "",
        "child_ranges": [
            "(line 3830,col 5)-(line 3837,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 3840,
        "end_line": 3845,
        "comment": "",
        "child_ranges": [
            "(line 3842,col 5)-(line 3844,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3847,
        "end_line": 3856,
        "comment": "",
        "child_ranges": [
            "(line 3849,col 5)-(line 3855,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3858,
        "end_line": 3867,
        "comment": "",
        "child_ranges": [
            "(line 3859,col 5)-(line 3866,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\");\n  }\n",
        "begin_line": 3869,
        "end_line": 3875,
        "comment": "",
        "child_ranges": [
            "(line 3870,col 5)-(line 3874,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3877,
        "end_line": 3886,
        "comment": "",
        "child_ranges": [
            "(line 3878,col 5)-(line 3885,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3888,
        "end_line": 3897,
        "comment": "",
        "child_ranges": [
            "(line 3889,col 5)-(line 3896,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 3899,
        "end_line": 3907,
        "comment": "",
        "child_ranges": [
            "(line 3900,col 5)-(line 3906,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 3909,
        "end_line": 3916,
        "comment": "",
        "child_ranges": [
            "(line 3910,col 5)-(line 3915,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1a()",
        "snippet": "  public void testControlFlowRestrictsType1a() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\\n\" +\n        \"/** @type {String?} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type (null|undefined) */ var c = null;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3918,
        "end_line": 3928,
        "comment": "",
        "child_ranges": [
            "(line 3919,col 5)-(line 3927,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1b()",
        "snippet": "  public void testControlFlowRestrictsType1b() throws Exception {\n    testTypes(\"/** @return {!String|null} */ function f() { return null; }\\n\" +\n        \"/** @type {!String|null} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type (null) */ var c = null;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3930,
        "end_line": 3940,
        "comment": "",
        "child_ranges": [
            "(line 3931,col 5)-(line 3939,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType1c()",
        "snippet": "  public void testControlFlowRestrictsType1c() throws Exception {\n    testTypes(\"/** @return {!String|undefined} */\\n\" +\n        \"function f() { return undefined; }\\n\" +\n        \"/** @type {!String|undefined} */ var a = f();\\n\" +\n        \"/** @type String */ var b = new String('foo');\\n\" +\n        \"/** @type undefined */ var c = undefined;\\n\" +\n        \"if (a) {\\n\" +\n        \"  b = a;\\n\" +\n        \"} else {\\n\" +\n        \"  c = a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 3942,
        "end_line": 3953,
        "comment": "",
        "child_ranges": [
            "(line 3943,col 5)-(line 3952,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3955,
        "end_line": 3968,
        "comment": "",
        "child_ranges": [
            "(line 3956,col 5)-(line 3967,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 3970,
        "end_line": 3978,
        "comment": "",
        "child_ranges": [
            "(line 3971,col 5)-(line 3977,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 3980,
        "end_line": 3984,
        "comment": "",
        "child_ranges": [
            "(line 3981,col 5)-(line 3983,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 3986,
        "end_line": 3990,
        "comment": "",
        "child_ranges": [
            "(line 3987,col 5)-(line 3989,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3992,
        "end_line": 3999,
        "comment": "",
        "child_ranges": [
            "(line 3993,col 5)-(line 3998,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4001,
        "end_line": 4008,
        "comment": "",
        "child_ranges": [
            "(line 4002,col 5)-(line 4007,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 4010,
        "end_line": 4014,
        "comment": "",
        "child_ranges": [
            "(line 4011,col 5)-(line 4013,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 4016,
        "end_line": 4021,
        "comment": "",
        "child_ranges": [
            "(line 4017,col 5)-(line 4020,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 4023,
        "end_line": 4027,
        "comment": "",
        "child_ranges": [
            "(line 4024,col 5)-(line 4026,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4029,
        "end_line": 4033,
        "comment": "",
        "child_ranges": [
            "(line 4030,col 5)-(line 4032,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4035,
        "end_line": 4039,
        "comment": "",
        "child_ranges": [
            "(line 4036,col 5)-(line 4038,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 4041,
        "end_line": 4045,
        "comment": "",
        "child_ranges": [
            "(line 4042,col 5)-(line 4044,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4047,
        "end_line": 4063,
        "comment": "",
        "child_ranges": [
            "(line 4049,col 5)-(line 4062,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4065,
        "end_line": 4081,
        "comment": "",
        "child_ranges": [
            "(line 4067,col 5)-(line 4080,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 4083,
        "end_line": 4085,
        "comment": "",
        "child_ranges": [
            "(line 4084,col 5)-(line 4084,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4087,
        "end_line": 4089,
        "comment": "",
        "child_ranges": [
            "(line 4088,col 5)-(line 4088,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4091,
        "end_line": 4093,
        "comment": "",
        "child_ranges": [
            "(line 4092,col 5)-(line 4092,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4095,
        "end_line": 4098,
        "comment": "",
        "child_ranges": [
            "(line 4096,col 5)-(line 4097,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 4100,
        "end_line": 4103,
        "comment": "",
        "child_ranges": [
            "(line 4101,col 5)-(line 4102,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4105,
        "end_line": 4108,
        "comment": "",
        "child_ranges": [
            "(line 4106,col 5)-(line 4107,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 4110,
        "end_line": 4113,
        "comment": "",
        "child_ranges": [
            "(line 4111,col 5)-(line 4112,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 4115,
        "end_line": 4118,
        "comment": "",
        "child_ranges": [
            "(line 4116,col 5)-(line 4117,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4120,
        "end_line": 4126,
        "comment": "",
        "child_ranges": [
            "(line 4121,col 5)-(line 4125,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4128,
        "end_line": 4136,
        "comment": "",
        "child_ranges": [
            "(line 4129,col 5)-(line 4135,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"\n               });\n  }\n",
        "begin_line": 4138,
        "end_line": 4151,
        "comment": "",
        "child_ranges": [
            "(line 4139,col 5)-(line 4150,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertTypeEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4153,
        "end_line": 4157,
        "comment": "",
        "child_ranges": [
            "(line 4154,col 5)-(line 4154,col 42)",
            "(line 4156,col 5)-(line 4156,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertTypeEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4159,
        "end_line": 4163,
        "comment": "",
        "child_ranges": [
            "(line 4160,col 5)-(line 4160,col 48)",
            "(line 4162,col 5)-(line 4162,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertTypeEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 4165,
        "end_line": 4169,
        "comment": "",
        "child_ranges": [
            "(line 4166,col 5)-(line 4166,col 52)",
            "(line 4168,col 5)-(line 4168,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertTypeEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 4171,
        "end_line": 4175,
        "comment": "",
        "child_ranges": [
            "(line 4172,col 5)-(line 4172,col 54)",
            "(line 4174,col 5)-(line 4174,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertTypeEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4177,
        "end_line": 4185,
        "comment": "",
        "child_ranges": [
            "(line 4178,col 5)-(line 4178,col 33)",
            "(line 4179,col 5)-(line 4179,col 53)",
            "(line 4180,col 5)-(line 4180,col 24)",
            "(line 4181,col 5)-(line 4181,col 40)",
            "(line 4182,col 5)-(line 4182,col 17)",
            "(line 4184,col 5)-(line 4184,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null|undefined)\");\n  }\n",
        "begin_line": 4187,
        "end_line": 4192,
        "comment": "",
        "child_ranges": [
            "(line 4188,col 5)-(line 4191,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4194,
        "end_line": 4199,
        "comment": "",
        "child_ranges": [
            "(line 4195,col 5)-(line 4198,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null|undefined)\");\n  }\n",
        "begin_line": 4201,
        "end_line": 4206,
        "comment": "",
        "child_ranges": [
            "(line 4202,col 5)-(line 4205,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4208,
        "end_line": 4213,
        "comment": "",
        "child_ranges": [
            "(line 4209,col 5)-(line 4212,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null|undefined)\");\n  }\n",
        "begin_line": 4215,
        "end_line": 4220,
        "comment": "",
        "child_ranges": [
            "(line 4216,col 5)-(line 4219,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4222,
        "end_line": 4227,
        "comment": "",
        "child_ranges": [
            "(line 4223,col 5)-(line 4226,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4229,
        "end_line": 4238,
        "comment": "",
        "child_ranges": [
            "(line 4230,col 5)-(line 4237,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 4240,
        "end_line": 4247,
        "comment": "",
        "child_ranges": [
            "(line 4241,col 5)-(line 4246,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 4249,
        "end_line": 4259,
        "comment": "",
        "child_ranges": [
            "(line 4250,col 5)-(line 4258,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\",\n        \"Type annotations are not allowed here. Are you missing parentheses?\");\n  }\n",
        "begin_line": 4266,
        "end_line": 4274,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 4267,col 5)-(line 4273,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 4281,
        "end_line": 4286,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 4282,col 5)-(line 4283,col 37)",
            "(line 4284,col 5)-(line 4285,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 4291,
        "end_line": 4294,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 4292,col 5)-(line 4293,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 4299,
        "end_line": 4304,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 4300,col 5)-(line 4303,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to anonymous functions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 4310,
        "end_line": 4321,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 4312,col 5)-(line 4312,col 72)",
            "(line 4313,col 5)-(line 4313,col 42)",
            "(line 4314,col 5)-(line 4314,col 60)",
            "(line 4317,col 5)-(line 4320,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return {boolean}*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4323,
        "end_line": 4331,
        "comment": "",
        "child_ranges": [
            "(line 4324,col 5)-(line 4330,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4333,
        "end_line": 4340,
        "comment": "",
        "child_ranges": [
            "(line 4334,col 5)-(line 4339,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 4342,
        "end_line": 4355,
        "comment": "",
        "child_ranges": [
            "(line 4343,col 5)-(line 4354,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 4357,
        "end_line": 4384,
        "comment": "",
        "child_ranges": [
            "(line 4358,col 5)-(line 4383,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 4386,
        "end_line": 4396,
        "comment": "",
        "child_ranges": [
            "(line 4387,col 5)-(line 4395,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\"+\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 4398,
        "end_line": 4408,
        "comment": "",
        "child_ranges": [
            "(line 4399,col 5)-(line 4407,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 4410,
        "end_line": 4416,
        "comment": "",
        "child_ranges": [
            "(line 4411,col 5)-(line 4415,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4418,
        "end_line": 4428,
        "comment": "",
        "child_ranges": [
            "(line 4419,col 5)-(line 4427,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 4430,
        "end_line": 4441,
        "comment": "",
        "child_ranges": [
            "(line 4431,col 5)-(line 4440,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4443,
        "end_line": 4452,
        "comment": "",
        "child_ranges": [
            "(line 4444,col 5)-(line 4451,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 4454,
        "end_line": 4463,
        "comment": "",
        "child_ranges": [
            "(line 4455,col 5)-(line 4462,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testScopedConstructors()",
        "snippet": "  public void testScopedConstructors() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4465,
        "end_line": 4485,
        "comment": "",
        "child_ranges": [
            "(line 4466,col 5)-(line 4484,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4487,
        "end_line": 4501,
        "comment": "",
        "child_ranges": [
            "(line 4488,col 5)-(line 4500,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4503,
        "end_line": 4516,
        "comment": "",
        "child_ranges": [
            "(line 4504,col 5)-(line 4515,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 4518,
        "end_line": 4531,
        "comment": "",
        "child_ranges": [
            "(line 4519,col 5)-(line 4530,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 4533,
        "end_line": 4544,
        "comment": "",
        "child_ranges": [
            "(line 4534,col 5)-(line 4543,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return {number} */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 4546,
        "end_line": 4567,
        "comment": "",
        "child_ranges": [
            "(line 4547,col 5)-(line 4558,col 13)",
            "(line 4559,col 5)-(line 4560,col 39)",
            "(line 4561,col 5)-(line 4561,col 37)",
            "(line 4562,col 5)-(line 4562,col 33)",
            "(line 4564,col 5)-(line 4564,col 55)",
            "(line 4565,col 5)-(line 4565,col 37)",
            "(line 4566,col 5)-(line 4566,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 4569,
        "end_line": 4576,
        "comment": "",
        "child_ranges": [
            "(line 4570,col 5)-(line 4570,col 48)",
            "(line 4572,col 5)-(line 4572,col 51)",
            "(line 4573,col 5)-(line 4573,col 39)",
            "(line 4574,col 5)-(line 4574,col 50)",
            "(line 4575,col 5)-(line 4575,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 4578,
        "end_line": 4587,
        "comment": "",
        "child_ranges": [
            "(line 4579,col 5)-(line 4582,col 24)",
            "(line 4584,col 5)-(line 4584,col 49)",
            "(line 4585,col 5)-(line 4585,col 50)",
            "(line 4586,col 5)-(line 4586,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4589,
        "end_line": 4591,
        "comment": "",
        "child_ranges": [
            "(line 4590,col 5)-(line 4590,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4593,
        "end_line": 4595,
        "comment": "",
        "child_ranges": [
            "(line 4594,col 5)-(line 4594,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 4597,
        "end_line": 4599,
        "comment": "",
        "child_ranges": [
            "(line 4598,col 5)-(line 4598,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 4601,
        "end_line": 4603,
        "comment": "",
        "child_ranges": [
            "(line 4602,col 5)-(line 4602,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4605,
        "end_line": 4607,
        "comment": "",
        "child_ranges": [
            "(line 4606,col 5)-(line 4606,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 4609,
        "end_line": 4618,
        "comment": "",
        "child_ranges": [
            "(line 4610,col 5)-(line 4612,col 26)",
            "(line 4614,col 5)-(line 4614,col 49)",
            "(line 4615,col 5)-(line 4615,col 44)",
            "(line 4616,col 5)-(line 4616,col 48)",
            "(line 4617,col 5)-(line 4617,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 4620,
        "end_line": 4625,
        "comment": "",
        "child_ranges": [
            "(line 4621,col 5)-(line 4624,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 4627,
        "end_line": 4632,
        "comment": "",
        "child_ranges": [
            "(line 4628,col 5)-(line 4631,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 4634,
        "end_line": 4639,
        "comment": "",
        "child_ranges": [
            "(line 4635,col 5)-(line 4638,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 4641,
        "end_line": 4647,
        "comment": "",
        "child_ranges": [
            "(line 4642,col 5)-(line 4646,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4649,
        "end_line": 4655,
        "comment": "",
        "child_ranges": [
            "(line 4650,col 5)-(line 4654,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTypeEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 4657,
        "end_line": 4662,
        "comment": "",
        "child_ranges": [
            "(line 4658,col 5)-(line 4658,col 75)",
            "(line 4659,col 5)-(line 4659,col 32)",
            "(line 4661,col 5)-(line 4661,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 4664,
        "end_line": 4672,
        "comment": "",
        "child_ranges": [
            "(line 4665,col 5)-(line 4667,col 33)",
            "(line 4668,col 5)-(line 4668,col 32)",
            "(line 4670,col 5)-(line 4670,col 50)",
            "(line 4671,col 5)-(line 4671,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 4674,
        "end_line": 4682,
        "comment": "",
        "child_ranges": [
            "(line 4675,col 5)-(line 4677,col 33)",
            "(line 4678,col 5)-(line 4678,col 32)",
            "(line 4680,col 5)-(line 4680,col 50)",
            "(line 4681,col 5)-(line 4681,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 4684,
        "end_line": 4693,
        "comment": "",
        "child_ranges": [
            "(line 4685,col 5)-(line 4688,col 33)",
            "(line 4689,col 5)-(line 4689,col 32)",
            "(line 4691,col 5)-(line 4691,col 50)",
            "(line 4692,col 5)-(line 4692,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4695,
        "end_line": 4706,
        "comment": "",
        "child_ranges": [
            "(line 4696,col 5)-(line 4705,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertTypeEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 4708,
        "end_line": 4710,
        "comment": "",
        "child_ranges": [
            "(line 4709,col 5)-(line 4709,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertTypeEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 4712,
        "end_line": 4714,
        "comment": "",
        "child_ranges": [
            "(line 4713,col 5)-(line 4713,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertTypeEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 4716,
        "end_line": 4718,
        "comment": "",
        "child_ranges": [
            "(line 4717,col 5)-(line 4717,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertTypeEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 4720,
        "end_line": 4722,
        "comment": "",
        "child_ranges": [
            "(line 4721,col 5)-(line 4721,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertTypeEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 4724,
        "end_line": 4726,
        "comment": "",
        "child_ranges": [
            "(line 4725,col 5)-(line 4725,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n    parent.setInputId(new InputId(\"code\"));\n\n    Node externs = new Node(Token.SCRIPT);\n    externs.setInputId(new InputId(\"externs\"));\n\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 4731,
        "end_line": 4744,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 4732,col 5)-(line 4732,col 49)",
            "(line 4733,col 5)-(line 4733,col 47)",
            "(line 4734,col 5)-(line 4734,col 43)",
            "(line 4736,col 5)-(line 4736,col 42)",
            "(line 4737,col 5)-(line 4737,col 47)",
            "(line 4739,col 5)-(line 4739,col 66)",
            "(line 4740,col 5)-(line 4740,col 46)",
            "(line 4742,col 5)-(line 4742,col 52)",
            "(line 4743,col 5)-(line 4743,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 4746,
        "end_line": 4749,
        "comment": "",
        "child_ranges": [
            "(line 4747,col 5)-(line 4748,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 4751,
        "end_line": 4754,
        "comment": "",
        "child_ranges": [
            "(line 4752,col 5)-(line 4753,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 4756,
        "end_line": 4759,
        "comment": "",
        "child_ranges": [
            "(line 4757,col 5)-(line 4758,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 4761,
        "end_line": 4764,
        "comment": "",
        "child_ranges": [
            "(line 4762,col 5)-(line 4763,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 4766,
        "end_line": 4769,
        "comment": "",
        "child_ranges": [
            "(line 4767,col 5)-(line 4768,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 4771,
        "end_line": 4776,
        "comment": "",
        "child_ranges": [
            "(line 4772,col 5)-(line 4775,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 4778,
        "end_line": 4780,
        "comment": "",
        "child_ranges": [
            "(line 4779,col 5)-(line 4779,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 4782,
        "end_line": 4784,
        "comment": "",
        "child_ranges": [
            "(line 4783,col 5)-(line 4783,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 4786,
        "end_line": 4791,
        "comment": "",
        "child_ranges": [
            "(line 4787,col 5)-(line 4790,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 4793,
        "end_line": 4795,
        "comment": "",
        "child_ranges": [
            "(line 4794,col 5)-(line 4794,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4797,
        "end_line": 4802,
        "comment": "",
        "child_ranges": [
            "(line 4798,col 5)-(line 4801,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Bad type annotation. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 4804,
        "end_line": 4812,
        "comment": "",
        "child_ranges": [
            "(line 4807,col 5)-(line 4811,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4814,
        "end_line": 4819,
        "comment": "",
        "child_ranges": [
            "(line 4815,col 5)-(line 4818,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4821,
        "end_line": 4826,
        "comment": "",
        "child_ranges": [
            "(line 4822,col 5)-(line 4825,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4828,
        "end_line": 4834,
        "comment": "",
        "child_ranges": [
            "(line 4829,col 5)-(line 4833,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 4836,
        "end_line": 4842,
        "comment": "",
        "child_ranges": [
            "(line 4837,col 5)-(line 4841,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 4844,
        "end_line": 4848,
        "comment": "",
        "child_ranges": [
            "(line 4845,col 5)-(line 4847,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 4850,
        "end_line": 4859,
        "comment": "",
        "child_ranges": [
            "(line 4851,col 5)-(line 4858,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 4861,
        "end_line": 4863,
        "comment": "",
        "child_ranges": [
            "(line 4862,col 5)-(line 4862,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 4865,
        "end_line": 4867,
        "comment": "",
        "child_ranges": [
            "(line 4866,col 5)-(line 4866,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 4869,
        "end_line": 4873,
        "comment": "",
        "child_ranges": [
            "(line 4870,col 5)-(line 4872,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4875,
        "end_line": 4882,
        "comment": "",
        "child_ranges": [
            "(line 4876,col 5)-(line 4881,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 4884,
        "end_line": 4889,
        "comment": "",
        "child_ranges": [
            "(line 4885,col 5)-(line 4888,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4891,
        "end_line": 4900,
        "comment": "",
        "child_ranges": [
            "(line 4892,col 5)-(line 4899,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 4902,
        "end_line": 4906,
        "comment": "",
        "child_ranges": [
            "(line 4903,col 5)-(line 4905,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 4908,
        "end_line": 4912,
        "comment": "",
        "child_ranges": [
            "(line 4909,col 5)-(line 4911,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 4914,
        "end_line": 4920,
        "comment": "",
        "child_ranges": [
            "(line 4915,col 5)-(line 4919,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 4922,
        "end_line": 4928,
        "comment": "",
        "child_ranges": [
            "(line 4923,col 5)-(line 4927,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 4930,
        "end_line": 4935,
        "comment": "",
        "child_ranges": [
            "(line 4932,col 5)-(line 4934,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 4937,
        "end_line": 4945,
        "comment": "",
        "child_ranges": [
            "(line 4939,col 5)-(line 4944,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 4947,
        "end_line": 4953,
        "comment": "",
        "child_ranges": [
            "(line 4949,col 5)-(line 4952,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 4955,
        "end_line": 4963,
        "comment": "",
        "child_ranges": [
            "(line 4957,col 5)-(line 4962,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 4965,
        "end_line": 4977,
        "comment": "",
        "child_ranges": [
            "(line 4967,col 5)-(line 4976,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4979,
        "end_line": 4982,
        "comment": "",
        "child_ranges": [
            "(line 4980,col 5)-(line 4981,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4984,
        "end_line": 4987,
        "comment": "",
        "child_ranges": [
            "(line 4985,col 5)-(line 4986,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4989,
        "end_line": 4993,
        "comment": "",
        "child_ranges": [
            "(line 4990,col 5)-(line 4992,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 4995,
        "end_line": 4999,
        "comment": "",
        "child_ranges": [
            "(line 4996,col 5)-(line 4998,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5001,
        "end_line": 5005,
        "comment": "",
        "child_ranges": [
            "(line 5002,col 5)-(line 5004,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5007,
        "end_line": 5011,
        "comment": "",
        "child_ranges": [
            "(line 5008,col 5)-(line 5010,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5013,
        "end_line": 5021,
        "comment": "",
        "child_ranges": [
            "(line 5016,col 5)-(line 5020,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 5023,
        "end_line": 5030,
        "comment": "",
        "child_ranges": [
            "(line 5026,col 5)-(line 5029,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a run-time cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {number} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 5032,
        "end_line": 5048,
        "comment": "",
        "child_ranges": [
            "(line 5040,col 5)-(line 5047,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCast16()",
        "snippet": "  public void testCast16() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ y)\");\n  }\n",
        "begin_line": 5050,
        "end_line": 5057,
        "comment": "",
        "child_ranges": [
            "(line 5052,col 5)-(line 5053,col 62)",
            "(line 5055,col 5)-(line 5056,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/** @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5059,
        "end_line": 5076,
        "comment": "",
        "child_ranges": [
            "(line 5060,col 5)-(line 5075,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5078,
        "end_line": 5085,
        "comment": "",
        "child_ranges": [
            "(line 5079,col 5)-(line 5084,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5087,
        "end_line": 5094,
        "comment": "",
        "child_ranges": [
            "(line 5088,col 5)-(line 5093,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5096,
        "end_line": 5103,
        "comment": "",
        "child_ranges": [
            "(line 5097,col 5)-(line 5102,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5105,
        "end_line": 5112,
        "comment": "",
        "child_ranges": [
            "(line 5106,col 5)-(line 5111,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (new:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 5114,
        "end_line": 5120,
        "comment": "",
        "child_ranges": [
            "(line 5115,col 5)-(line 5119,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 5122,
        "end_line": 5124,
        "comment": "",
        "child_ranges": [
            "(line 5123,col 5)-(line 5123,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 5126,
        "end_line": 5132,
        "comment": "",
        "child_ranges": [
            "(line 5127,col 5)-(line 5131,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 5134,
        "end_line": 5140,
        "comment": "",
        "child_ranges": [
            "(line 5135,col 5)-(line 5139,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 5142,
        "end_line": 5150,
        "comment": "",
        "child_ranges": [
            "(line 5145,col 5)-(line 5149,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 5152,
        "end_line": 5161,
        "comment": "",
        "child_ranges": [
            "(line 5153,col 5)-(line 5160,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 5163,
        "end_line": 5166,
        "comment": "",
        "child_ranges": [
            "(line 5164,col 5)-(line 5165,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5168,
        "end_line": 5175,
        "comment": "",
        "child_ranges": [
            "(line 5169,col 5)-(line 5174,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 5177,
        "end_line": 5185,
        "comment": "",
        "child_ranges": [
            "(line 5178,col 5)-(line 5179,col 73)",
            "(line 5181,col 5)-(line 5181,col 48)",
            "(line 5182,col 5)-(line 5182,col 45)",
            "(line 5183,col 5)-(line 5183,col 45)",
            "(line 5184,col 5)-(line 5184,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5187,
        "end_line": 5191,
        "comment": "",
        "child_ranges": [
            "(line 5188,col 5)-(line 5190,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5193,
        "end_line": 5197,
        "comment": "",
        "child_ranges": [
            "(line 5194,col 5)-(line 5196,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 5199,
        "end_line": 5203,
        "comment": "",
        "child_ranges": [
            "(line 5200,col 5)-(line 5202,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null|undefined)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 5205,
        "end_line": 5211,
        "comment": "",
        "child_ranges": [
            "(line 5206,col 5)-(line 5210,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 5213,
        "end_line": 5216,
        "comment": "",
        "child_ranges": [
            "(line 5214,col 5)-(line 5215,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 5218,
        "end_line": 5221,
        "comment": "",
        "child_ranges": [
            "(line 5219,col 5)-(line 5220,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 5223,
        "end_line": 5228,
        "comment": "",
        "child_ranges": [
            "(line 5224,col 5)-(line 5227,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 5230,
        "end_line": 5233,
        "comment": "",
        "child_ranges": [
            "(line 5231,col 5)-(line 5232,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 5235,
        "end_line": 5238,
        "comment": "",
        "child_ranges": [
            "(line 5236,col 5)-(line 5237,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 5240,
        "end_line": 5243,
        "comment": "",
        "child_ranges": [
            "(line 5241,col 5)-(line 5242,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5245,
        "end_line": 5252,
        "comment": "",
        "child_ranges": [
            "(line 5246,col 5)-(line 5251,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5254,
        "end_line": 5261,
        "comment": "",
        "child_ranges": [
            "(line 5255,col 5)-(line 5260,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 5263,
        "end_line": 5265,
        "comment": "",
        "child_ranges": [
            "(line 5264,col 5)-(line 5264,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */ (new f()); }\");\n  }\n",
        "begin_line": 5267,
        "end_line": 5269,
        "comment": "",
        "child_ranges": [
            "(line 5268,col 5)-(line 5268,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 5271,
        "end_line": 5273,
        "comment": "",
        "child_ranges": [
            "(line 5272,col 5)-(line 5272,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 5275,
        "end_line": 5286,
        "comment": "",
        "child_ranges": [
            "(line 5276,col 5)-(line 5285,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 5288,
        "end_line": 5301,
        "comment": "",
        "child_ranges": [
            "(line 5289,col 5)-(line 5293,col 57)",
            "(line 5295,col 5)-(line 5295,col 55)",
            "(line 5296,col 5)-(line 5296,col 46)",
            "(line 5298,col 5)-(line 5298,col 64)",
            "(line 5299,col 5)-(line 5299,col 42)",
            "(line 5300,col 5)-(line 5300,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top-level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertTypeEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 5303,
        "end_line": 5366,
        "comment": "",
        "child_ranges": [
            "(line 5304,col 5)-(line 5307,col 26)",
            "(line 5309,col 5)-(line 5309,col 55)",
            "(line 5312,col 5)-(line 5312,col 60)",
            "(line 5313,col 5)-(line 5313,col 52)",
            "(line 5314,col 5)-(line 5315,col 57)",
            "(line 5316,col 5)-(line 5317,col 57)",
            "(line 5320,col 5)-(line 5320,col 42)",
            "(line 5321,col 5)-(line 5321,col 47)",
            "(line 5322,col 5)-(line 5322,col 62)",
            "(line 5323,col 5)-(line 5323,col 51)",
            "(line 5326,col 5)-(line 5326,col 46)",
            "(line 5329,col 5)-(line 5329,col 73)",
            "(line 5330,col 5)-(line 5330,col 55)",
            "(line 5331,col 5)-(line 5331,col 66)",
            "(line 5332,col 5)-(line 5332,col 73)",
            "(line 5333,col 5)-(line 5333,col 58)",
            "(line 5336,col 5)-(line 5336,col 53)",
            "(line 5339,col 5)-(line 5339,col 77)",
            "(line 5340,col 5)-(line 5340,col 50)",
            "(line 5344,col 5)-(line 5345,col 57)",
            "(line 5346,col 5)-(line 5346,col 55)",
            "(line 5347,col 5)-(line 5347,col 66)",
            "(line 5348,col 5)-(line 5348,col 73)",
            "(line 5349,col 5)-(line 5349,col 58)",
            "(line 5352,col 5)-(line 5352,col 53)",
            "(line 5356,col 5)-(line 5356,col 57)",
            "(line 5357,col 5)-(line 5358,col 51)",
            "(line 5359,col 5)-(line 5359,col 76)",
            "(line 5360,col 5)-(line 5361,col 54)",
            "(line 5362,col 5)-(line 5363,col 54)",
            "(line 5364,col 5)-(line 5365,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5368,
        "end_line": 5378,
        "comment": "",
        "child_ranges": [
            "(line 5370,col 5)-(line 5372,col 30)",
            "(line 5374,col 5)-(line 5374,col 55)",
            "(line 5375,col 5)-(line 5376,col 43)",
            "(line 5377,col 5)-(line 5377,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5380,
        "end_line": 5388,
        "comment": "",
        "child_ranges": [
            "(line 5382,col 5)-(line 5385,col 54)",
            "(line 5387,col 5)-(line 5387,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5390,
        "end_line": 5398,
        "comment": "",
        "child_ranges": [
            "(line 5392,col 5)-(line 5395,col 54)",
            "(line 5397,col 5)-(line 5397,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.LooseTypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5400,
        "end_line": 5411,
        "comment": "",
        "child_ranges": [
            "(line 5402,col 5)-(line 5402,col 68)",
            "(line 5403,col 5)-(line 5403,col 73)",
            "(line 5404,col 5)-(line 5404,col 45)",
            "(line 5405,col 5)-(line 5405,col 25)",
            "(line 5406,col 5)-(line 5406,col 46)",
            "(line 5407,col 5)-(line 5407,col 54)",
            "(line 5408,col 5)-(line 5408,col 56)",
            "(line 5409,col 5)-(line 5409,col 75)",
            "(line 5410,col 5)-(line 5410,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5413,
        "end_line": 5424,
        "comment": "",
        "child_ranges": [
            "(line 5415,col 5)-(line 5417,col 43)",
            "(line 5419,col 5)-(line 5419,col 55)",
            "(line 5420,col 5)-(line 5421,col 43)",
            "(line 5422,col 5)-(line 5422,col 53)",
            "(line 5423,col 5)-(line 5423,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertTypeEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertTypeEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 5426,
        "end_line": 5438,
        "comment": "",
        "child_ranges": [
            "(line 5428,col 5)-(line 5430,col 43)",
            "(line 5432,col 5)-(line 5432,col 63)",
            "(line 5433,col 5)-(line 5433,col 69)",
            "(line 5434,col 5)-(line 5435,col 49)",
            "(line 5436,col 5)-(line 5437,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 5440,
        "end_line": 5449,
        "comment": "",
        "child_ranges": [
            "(line 5441,col 5)-(line 5448,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 5451,
        "end_line": 5464,
        "comment": "",
        "child_ranges": [
            "(line 5452,col 5)-(line 5455,col 47)",
            "(line 5457,col 5)-(line 5457,col 55)",
            "(line 5458,col 5)-(line 5458,col 47)",
            "(line 5459,col 5)-(line 5460,col 43)",
            "(line 5461,col 5)-(line 5461,col 53)",
            "(line 5462,col 5)-(line 5462,col 54)",
            "(line 5463,col 5)-(line 5463,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(createUnionType(OBJECT_TYPE, NULL_TYPE), VOID_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5466,
        "end_line": 5487,
        "comment": "",
        "child_ranges": [
            "(line 5467,col 5)-(line 5475,col 50)",
            "(line 5477,col 5)-(line 5477,col 55)",
            "(line 5478,col 5)-(line 5479,col 43)",
            "(line 5480,col 5)-(line 5480,col 53)",
            "(line 5481,col 5)-(line 5482,col 77)",
            "(line 5483,col 5)-(line 5483,col 54)",
            "(line 5484,col 5)-(line 5484,col 53)",
            "(line 5485,col 5)-(line 5485,col 53)",
            "(line 5486,col 5)-(line 5486,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertTypeEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5489,
        "end_line": 5492,
        "comment": "",
        "child_ranges": [
            "(line 5490,col 5)-(line 5490,col 53)",
            "(line 5491,col 5)-(line 5491,col 84)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertTypeEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5494,
        "end_line": 5501,
        "comment": "",
        "child_ranges": [
            "(line 5497,col 5)-(line 5499,col 41)",
            "(line 5500,col 5)-(line 5500,col 83)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertTypeEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5503,
        "end_line": 5514,
        "comment": "",
        "child_ranges": [
            "(line 5504,col 5)-(line 5511,col 70)",
            "(line 5512,col 5)-(line 5512,col 78)",
            "(line 5513,col 5)-(line 5513,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertTypeEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5516,
        "end_line": 5527,
        "comment": "",
        "child_ranges": [
            "(line 5517,col 5)-(line 5524,col 70)",
            "(line 5525,col 5)-(line 5525,col 64)",
            "(line 5526,col 5)-(line 5526,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertTypeEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5529,
        "end_line": 5535,
        "comment": "",
        "child_ranges": [
            "(line 5530,col 5)-(line 5532,col 33)",
            "(line 5533,col 5)-(line 5533,col 62)",
            "(line 5534,col 5)-(line 5534,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertTypeEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5537,
        "end_line": 5543,
        "comment": "",
        "child_ranges": [
            "(line 5538,col 5)-(line 5540,col 32)",
            "(line 5541,col 5)-(line 5541,col 62)",
            "(line 5542,col 5)-(line 5542,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5545,
        "end_line": 5550,
        "comment": "",
        "child_ranges": [
            "(line 5546,col 5)-(line 5549,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 5552,
        "end_line": 5558,
        "comment": "",
        "child_ranges": [
            "(line 5553,col 5)-(line 5557,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5560,
        "end_line": 5568,
        "comment": "",
        "child_ranges": [
            "(line 5561,col 5)-(line 5567,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5570,
        "end_line": 5576,
        "comment": "",
        "child_ranges": [
            "(line 5571,col 5)-(line 5575,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5578,
        "end_line": 5587,
        "comment": "",
        "child_ranges": [
            "(line 5579,col 5)-(line 5586,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5589,
        "end_line": 5596,
        "comment": "",
        "child_ranges": [
            "(line 5590,col 5)-(line 5595,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 5598,
        "end_line": 5605,
        "comment": "",
        "child_ranges": [
            "(line 5599,col 5)-(line 5604,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 5607,
        "end_line": 5614,
        "comment": "",
        "child_ranges": [
            "(line 5608,col 5)-(line 5613,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 5616,
        "end_line": 5623,
        "comment": "",
        "child_ranges": [
            "(line 5617,col 5)-(line 5622,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 5625,
        "end_line": 5633,
        "comment": "",
        "child_ranges": [
            "(line 5626,col 5)-(line 5632,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 5635,
        "end_line": 5647,
        "comment": "",
        "child_ranges": [
            "(line 5636,col 5)-(line 5646,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 4; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 5649,
        "end_line": 5657,
        "comment": "",
        "child_ranges": [
            "(line 5650,col 5)-(line 5656,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 5659,
        "end_line": 5668,
        "comment": "",
        "child_ranges": [
            "(line 5660,col 5)-(line 5667,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 5670,
        "end_line": 5683,
        "comment": "",
        "child_ranges": [
            "(line 5671,col 5)-(line 5682,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 5685,
        "end_line": 5696,
        "comment": "",
        "child_ranges": [
            "(line 5686,col 5)-(line 5695,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\");\n  }\n",
        "begin_line": 5698,
        "end_line": 5705,
        "comment": "",
        "child_ranges": [
            "(line 5699,col 5)-(line 5704,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 5707,
        "end_line": 5713,
        "comment": "",
        "child_ranges": [
            "(line 5708,col 5)-(line 5712,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 5715,
        "end_line": 5723,
        "comment": "",
        "child_ranges": [
            "(line 5716,col 5)-(line 5722,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 5755,
        "end_line": 5763,
        "comment": "",
        "child_ranges": [
            "(line 5756,col 5)-(line 5762,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5765,
        "end_line": 5771,
        "comment": "",
        "child_ranges": [
            "(line 5766,col 5)-(line 5770,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 5773,
        "end_line": 5782,
        "comment": "",
        "child_ranges": [
            "(line 5774,col 5)-(line 5781,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 5784,
        "end_line": 5792,
        "comment": "",
        "child_ranges": [
            "(line 5785,col 5)-(line 5791,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 5794,
        "end_line": 5805,
        "comment": "",
        "child_ranges": [
            "(line 5795,col 5)-(line 5804,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 5807,
        "end_line": 5819,
        "comment": "",
        "child_ranges": [
            "(line 5808,col 5)-(line 5818,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 5821,
        "end_line": 5832,
        "comment": "",
        "child_ranges": [
            "(line 5822,col 5)-(line 5831,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Bad type annotation. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 5834,
        "end_line": 5842,
        "comment": "",
        "child_ranges": [
            "(line 5835,col 5)-(line 5841,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 5844,
        "end_line": 5850,
        "comment": "",
        "child_ranges": [
            "(line 5845,col 5)-(line 5849,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 5852,
        "end_line": 5859,
        "comment": "",
        "child_ranges": [
            "(line 5853,col 5)-(line 5858,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\n        // externs\n        \"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n        \"\", null, false);\n  }\n",
        "begin_line": 5861,
        "end_line": 5870,
        "comment": "",
        "child_ranges": [
            "(line 5864,col 5)-(line 5869,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertTypeEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertTypeEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertTypeEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 5872,
        "end_line": 5890,
        "comment": "",
        "child_ranges": [
            "(line 5873,col 5)-(line 5873,col 63)",
            "(line 5875,col 5)-(line 5875,col 54)",
            "(line 5876,col 5)-(line 5876,col 47)",
            "(line 5879,col 5)-(line 5879,col 49)",
            "(line 5880,col 5)-(line 5880,col 56)",
            "(line 5883,col 5)-(line 5884,col 44)",
            "(line 5885,col 5)-(line 5885,col 68)",
            "(line 5886,col 5)-(line 5886,col 68)",
            "(line 5889,col 5)-(line 5889,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 5892,
        "end_line": 5899,
        "comment": "",
        "child_ranges": [
            "(line 5893,col 5)-(line 5898,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertTypeEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5901,
        "end_line": 5906,
        "comment": "",
        "child_ranges": [
            "(line 5904,col 5)-(line 5904,col 41)",
            "(line 5905,col 5)-(line 5905,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertTypeEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5911,
        "end_line": 5915,
        "comment": "",
        "child_ranges": [
            "(line 5912,col 5)-(line 5912,col 45)",
            "(line 5913,col 5)-(line 5914,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertTypeEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5917,
        "end_line": 5921,
        "comment": "",
        "child_ranges": [
            "(line 5918,col 5)-(line 5918,col 42)",
            "(line 5919,col 5)-(line 5920,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5923,
        "end_line": 5934,
        "comment": "",
        "child_ranges": [
            "(line 5924,col 5)-(line 5933,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 5967,
        "end_line": 5972,
        "comment": "",
        "child_ranges": [
            "(line 5970,col 5)-(line 5971,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 5974,
        "end_line": 5977,
        "comment": "",
        "child_ranges": [
            "(line 5975,col 5)-(line 5976,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 5979,
        "end_line": 5982,
        "comment": "",
        "child_ranges": [
            "(line 5980,col 5)-(line 5981,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 5984,
        "end_line": 5989,
        "comment": "",
        "child_ranges": [
            "(line 5985,col 5)-(line 5988,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 6003,
        "end_line": 6006,
        "comment": "",
        "child_ranges": [
            "(line 6004,col 5)-(line 6005,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 6008,
        "end_line": 6011,
        "comment": "",
        "child_ranges": [
            "(line 6009,col 5)-(line 6010,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6027,
        "end_line": 6032,
        "comment": "",
        "child_ranges": [
            "(line 6028,col 5)-(line 6031,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6034,
        "end_line": 6039,
        "comment": "",
        "child_ranges": [
            "(line 6035,col 5)-(line 6038,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 6070,
        "end_line": 6075,
        "comment": "",
        "child_ranges": [
            "(line 6071,col 5)-(line 6074,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6077,
        "end_line": 6083,
        "comment": "",
        "child_ranges": [
            "(line 6078,col 5)-(line 6082,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        Lists.newArrayList(\n            \"assignment to property x of T.prototype\\n\" +\n            \"found   : number\\n\" +\n            \"required: function (this:T): number\",\n            \"interface members can only be empty property declarations, \" +\n            \"empty functions, or goog.abstractMethod\"));\n  }\n",
        "begin_line": 6085,
        "end_line": 6095,
        "comment": "",
        "child_ranges": [
            "(line 6086,col 5)-(line 6094,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 6097,
        "end_line": 6102,
        "comment": "",
        "child_ranges": [
            "(line 6098,col 5)-(line 6101,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 6104,
        "end_line": 6108,
        "comment": "",
        "child_ranges": [
            "(line 6105,col 5)-(line 6107,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 6110,
        "end_line": 6114,
        "comment": "",
        "child_ranges": [
            "(line 6111,col 5)-(line 6113,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f = function(){}; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 6116,
        "end_line": 6119,
        "comment": "",
        "child_ranges": [
            "(line 6117,col 5)-(line 6118,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 6121,
        "end_line": 6129,
        "comment": "",
        "child_ranges": [
            "(line 6122,col 5)-(line 6128,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    // For now, we just ignore @type annotations on the prototype.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\");\n  }\n",
        "begin_line": 6131,
        "end_line": 6137,
        "comment": "",
        "child_ranges": [
            "(line 6133,col 5)-(line 6136,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6142,
        "end_line": 6153,
        "comment": "",
        "child_ranges": [
            "(line 6143,col 5)-(line 6152,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6155,
        "end_line": 6167,
        "comment": "",
        "child_ranges": [
            "(line 6156,col 5)-(line 6166,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6169,
        "end_line": 6180,
        "comment": "",
        "child_ranges": [
            "(line 6170,col 5)-(line 6179,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 6182,
        "end_line": 6192,
        "comment": "",
        "child_ranges": [
            "(line 6183,col 5)-(line 6191,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 6194,
        "end_line": 6201,
        "comment": "",
        "child_ranges": [
            "(line 6195,col 5)-(line 6195,col 79)",
            "(line 6196,col 5)-(line 6196,col 62)",
            "(line 6197,col 5)-(line 6197,col 38)",
            "(line 6198,col 5)-(line 6198,col 45)",
            "(line 6199,col 5)-(line 6200,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    Asserts.assertTypeCollectionEquals(\n        Lists.newArrayList(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6203,
        "end_line": 6214,
        "comment": "",
        "child_ranges": [
            "(line 6204,col 5)-(line 6205,col 43)",
            "(line 6206,col 5)-(line 6206,col 62)",
            "(line 6207,col 5)-(line 6207,col 38)",
            "(line 6208,col 5)-(line 6208,col 43)",
            "(line 6209,col 5)-(line 6209,col 46)",
            "(line 6210,col 5)-(line 6210,col 45)",
            "(line 6211,col 5)-(line 6213,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTypeEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    Asserts.assertTypeCollectionEquals(\n        Lists.newArrayList(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6216,
        "end_line": 6230,
        "comment": "",
        "child_ranges": [
            "(line 6217,col 5)-(line 6218,col 75)",
            "(line 6219,col 5)-(line 6219,col 21)",
            "(line 6220,col 5)-(line 6220,col 23)",
            "(line 6221,col 5)-(line 6221,col 62)",
            "(line 6222,col 5)-(line 6222,col 38)",
            "(line 6223,col 5)-(line 6223,col 40)",
            "(line 6224,col 5)-(line 6224,col 43)",
            "(line 6225,col 5)-(line 6225,col 46)",
            "(line 6226,col 5)-(line 6226,col 45)",
            "(line 6227,col 5)-(line 6229,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 6232,
        "end_line": 6235,
        "comment": "",
        "child_ranges": [
            "(line 6233,col 5)-(line 6234,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 6237,
        "end_line": 6239,
        "comment": "",
        "child_ranges": [
            "(line 6238,col 5)-(line 6238,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6241,
        "end_line": 6245,
        "comment": "",
        "child_ranges": [
            "(line 6242,col 5)-(line 6244,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6247,
        "end_line": 6252,
        "comment": "",
        "child_ranges": [
            "(line 6248,col 5)-(line 6251,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 6254,
        "end_line": 6258,
        "comment": "",
        "child_ranges": [
            "(line 6255,col 5)-(line 6257,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 6260,
        "end_line": 6264,
        "comment": "",
        "child_ranges": [
            "(line 6261,col 5)-(line 6263,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 6266,
        "end_line": 6270,
        "comment": "",
        "child_ranges": [
            "(line 6267,col 5)-(line 6269,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 6272,
        "end_line": 6278,
        "comment": "",
        "child_ranges": [
            "(line 6273,col 5)-(line 6277,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 6280,
        "end_line": 6286,
        "comment": "",
        "child_ranges": [
            "(line 6281,col 5)-(line 6285,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 6288,
        "end_line": 6294,
        "comment": "",
        "child_ranges": [
            "(line 6289,col 5)-(line 6293,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 6296,
        "end_line": 6304,
        "comment": "",
        "child_ranges": [
            "(line 6297,col 5)-(line 6303,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 6306,
        "end_line": 6310,
        "comment": "",
        "child_ranges": [
            "(line 6307,col 5)-(line 6309,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6312,
        "end_line": 6323,
        "comment": "",
        "child_ranges": [
            "(line 6313,col 5)-(line 6322,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 6325,
        "end_line": 6336,
        "comment": "",
        "child_ranges": [
            "(line 6326,col 5)-(line 6335,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6338,
        "end_line": 6344,
        "comment": "",
        "child_ranges": [
            "(line 6339,col 5)-(line 6343,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6346,
        "end_line": 6352,
        "comment": "",
        "child_ranges": [
            "(line 6347,col 5)-(line 6351,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 6354,
        "end_line": 6359,
        "comment": "",
        "child_ranges": [
            "(line 6355,col 5)-(line 6358,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 6361,
        "end_line": 6366,
        "comment": "",
        "child_ranges": [
            "(line 6362,col 5)-(line 6365,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6368,
        "end_line": 6378,
        "comment": "",
        "child_ranges": [
            "(line 6369,col 5)-(line 6377,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6380,
        "end_line": 6388,
        "comment": "",
        "child_ranges": [
            "(line 6381,col 5)-(line 6387,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|string|undefined)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 6390,
        "end_line": 6401,
        "comment": "",
        "child_ranges": [
            "(line 6391,col 5)-(line 6400,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6403,
        "end_line": 6416,
        "comment": "",
        "child_ranges": [
            "(line 6404,col 5)-(line 6415,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Bad type annotation. Unknown type MyType\");\n  }\n",
        "begin_line": 6418,
        "end_line": 6422,
        "comment": "",
        "child_ranges": [
            "(line 6419,col 5)-(line 6421,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 6424,
        "end_line": 6426,
        "comment": "",
        "child_ranges": [
            "(line 6425,col 5)-(line 6425,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 6428,
        "end_line": 6437,
        "comment": "",
        "child_ranges": [
            "(line 6429,col 5)-(line 6436,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null|undefined)\");\n  }\n",
        "begin_line": 6439,
        "end_line": 6447,
        "comment": "",
        "child_ranges": [
            "(line 6440,col 5)-(line 6441,col 53)",
            "(line 6442,col 5)-(line 6442,col 30)",
            "(line 6443,col 5)-(line 6446,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null|undefined)\");\n  }\n",
        "begin_line": 6449,
        "end_line": 6458,
        "comment": "",
        "child_ranges": [
            "(line 6450,col 5)-(line 6457,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 6460,
        "end_line": 6468,
        "comment": "",
        "child_ranges": [
            "(line 6461,col 5)-(line 6467,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 6470,
        "end_line": 6476,
        "comment": "",
        "child_ranges": [
            "(line 6471,col 5)-(line 6475,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6478,
        "end_line": 6487,
        "comment": "",
        "child_ranges": [
            "(line 6479,col 5)-(line 6486,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6489,
        "end_line": 6498,
        "comment": "",
        "child_ranges": [
            "(line 6490,col 5)-(line 6497,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 6500,
        "end_line": 6506,
        "comment": "",
        "child_ranges": [
            "(line 6501,col 5)-(line 6505,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6508,
        "end_line": 6512,
        "comment": "",
        "child_ranges": [
            "(line 6509,col 5)-(line 6510,col 58)",
            "(line 6511,col 5)-(line 6511,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6514,
        "end_line": 6517,
        "comment": "",
        "child_ranges": [
            "(line 6515,col 5)-(line 6515,col 39)",
            "(line 6516,col 5)-(line 6516,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6519,
        "end_line": 6522,
        "comment": "",
        "child_ranges": [
            "(line 6520,col 5)-(line 6520,col 53)",
            "(line 6521,col 5)-(line 6521,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6524,
        "end_line": 6528,
        "comment": "",
        "child_ranges": [
            "(line 6525,col 5)-(line 6526,col 46)",
            "(line 6527,col 5)-(line 6527,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 6530,
        "end_line": 6540,
        "comment": "",
        "child_ranges": [
            "(line 6531,col 5)-(line 6531,col 40)",
            "(line 6533,col 5)-(line 6533,col 41)",
            "(line 6534,col 5)-(line 6534,col 61)",
            "(line 6535,col 5)-(line 6535,col 46)",
            "(line 6537,col 5)-(line 6537,col 34)",
            "(line 6538,col 5)-(line 6538,col 33)",
            "(line 6539,col 5)-(line 6539,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 6542,
        "end_line": 6549,
        "comment": "",
        "child_ranges": [
            "(line 6543,col 5)-(line 6543,col 54)",
            "(line 6544,col 5)-(line 6544,col 24)",
            "(line 6545,col 5)-(line 6545,col 45)",
            "(line 6546,col 5)-(line 6546,col 52)",
            "(line 6547,col 5)-(line 6547,col 45)",
            "(line 6548,col 5)-(line 6548,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 6551,
        "end_line": 6568,
        "comment": "",
        "child_ranges": [
            "(line 6552,col 5)-(line 6560,col 15)",
            "(line 6561,col 5)-(line 6561,col 46)",
            "(line 6562,col 5)-(line 6562,col 48)",
            "(line 6564,col 5)-(line 6564,col 72)",
            "(line 6565,col 5)-(line 6565,col 74)",
            "(line 6566,col 5)-(line 6567,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 6570,
        "end_line": 6586,
        "comment": "",
        "child_ranges": [
            "(line 6571,col 5)-(line 6584,col 37)",
            "(line 6585,col 5)-(line 6585,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 6588,
        "end_line": 6593,
        "comment": "",
        "child_ranges": [
            "(line 6589,col 5)-(line 6592,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6595,
        "end_line": 6601,
        "comment": "",
        "child_ranges": [
            "(line 6596,col 5)-(line 6600,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 6603,
        "end_line": 6608,
        "comment": "",
        "child_ranges": [
            "(line 6604,col 5)-(line 6607,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6610,
        "end_line": 6616,
        "comment": "",
        "child_ranges": [
            "(line 6611,col 5)-(line 6615,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 6618,
        "end_line": 6624,
        "comment": "",
        "child_ranges": [
            "(line 6619,col 5)-(line 6623,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 6626,
        "end_line": 6632,
        "comment": "",
        "child_ranges": [
            "(line 6627,col 5)-(line 6631,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 6634,
        "end_line": 6639,
        "comment": "",
        "child_ranges": [
            "(line 6635,col 5)-(line 6638,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 6641,
        "end_line": 6645,
        "comment": "",
        "child_ranges": [
            "(line 6642,col 5)-(line 6644,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 6647,
        "end_line": 6651,
        "comment": "",
        "child_ranges": [
            "(line 6648,col 5)-(line 6650,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 6653,
        "end_line": 6657,
        "comment": "",
        "child_ranges": [
            "(line 6654,col 5)-(line 6656,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 6659,
        "end_line": 6663,
        "comment": "",
        "child_ranges": [
            "(line 6660,col 5)-(line 6662,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 6665,
        "end_line": 6669,
        "comment": "",
        "child_ranges": [
            "(line 6666,col 5)-(line 6668,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 6671,
        "end_line": 6676,
        "comment": "",
        "child_ranges": [
            "(line 6672,col 5)-(line 6675,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 6678,
        "end_line": 6684,
        "comment": "",
        "child_ranges": [
            "(line 6679,col 5)-(line 6683,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 6686,
        "end_line": 6690,
        "comment": "",
        "child_ranges": [
            "(line 6687,col 5)-(line 6689,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 6692,
        "end_line": 6697,
        "comment": "",
        "child_ranges": [
            "(line 6693,col 5)-(line 6696,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 6699,
        "end_line": 6703,
        "comment": "",
        "child_ranges": [
            "(line 6700,col 5)-(line 6702,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 6705,
        "end_line": 6709,
        "comment": "",
        "child_ranges": [
            "(line 6706,col 5)-(line 6708,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 6711,
        "end_line": 6716,
        "comment": "",
        "child_ranges": [
            "(line 6712,col 5)-(line 6715,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 6718,
        "end_line": 6722,
        "comment": "",
        "child_ranges": [
            "(line 6719,col 5)-(line 6721,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 6724,
        "end_line": 6728,
        "comment": "",
        "child_ranges": [
            "(line 6725,col 5)-(line 6727,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 6730,
        "end_line": 6734,
        "comment": "",
        "child_ranges": [
            "(line 6731,col 5)-(line 6733,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 6736,
        "end_line": 6741,
        "comment": "",
        "child_ranges": [
            "(line 6737,col 5)-(line 6740,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 6743,
        "end_line": 6749,
        "comment": "",
        "child_ranges": [
            "(line 6744,col 5)-(line 6748,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 6751,
        "end_line": 6757,
        "comment": "",
        "child_ranges": [
            "(line 6752,col 5)-(line 6756,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 6759,
        "end_line": 6766,
        "comment": "",
        "child_ranges": [
            "(line 6760,col 5)-(line 6765,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 6768,
        "end_line": 6780,
        "comment": "",
        "child_ranges": [
            "(line 6769,col 5)-(line 6773,col 13)",
            "(line 6774,col 5)-(line 6779,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 6782,
        "end_line": 6792,
        "comment": "",
        "child_ranges": [
            "(line 6784,col 5)-(line 6791,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 6794,
        "end_line": 6798,
        "comment": "",
        "child_ranges": [
            "(line 6795,col 5)-(line 6795,col 76)",
            "(line 6796,col 5)-(line 6797,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6800,
        "end_line": 6804,
        "comment": "",
        "child_ranges": [
            "(line 6801,col 5)-(line 6801,col 49)",
            "(line 6802,col 5)-(line 6803,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6806,
        "end_line": 6818,
        "comment": "",
        "child_ranges": [
            "(line 6807,col 5)-(line 6812,col 42)",
            "(line 6815,col 5)-(line 6817,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertTypeEquals(registry.createOptionalType(\n            registry.createNullableType(registry.getType(\"Foo\"))),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 6820,
        "end_line": 6840,
        "comment": "",
        "child_ranges": [
            "(line 6821,col 5)-(line 6833,col 15)",
            "(line 6836,col 5)-(line 6839,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 6842,
        "end_line": 6850,
        "comment": "",
        "child_ranges": [
            "(line 6843,col 5)-(line 6845,col 41)",
            "(line 6846,col 5)-(line 6846,col 62)",
            "(line 6847,col 5)-(line 6848,col 53)",
            "(line 6849,col 5)-(line 6849,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    MemoizedScopeCreator scopeCreator =\n        new MemoizedScopeCreator(new TypedScopeCreator(compiler));\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 6852,
        "end_line": 6875,
        "comment": "",
        "child_ranges": [
            "(line 6853,col 5)-(line 6853,col 58)",
            "(line 6854,col 5)-(line 6854,col 17)",
            "(line 6855,col 5)-(line 6856,col 66)",
            "(line 6857,col 5)-(line 6857,col 55)",
            "(line 6859,col 5)-(line 6859,col 52)",
            "(line 6861,col 5)-(line 6861,col 41)",
            "(line 6862,col 5)-(line 6862,col 66)",
            "(line 6863,col 5)-(line 6863,col 46)",
            "(line 6865,col 5)-(line 6870,col 31)",
            "(line 6872,col 5)-(line 6872,col 48)",
            "(line 6873,col 5)-(line 6874,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertTypeEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 6877,
        "end_line": 6886,
        "comment": "",
        "child_ranges": [
            "(line 6879,col 5)-(line 6881,col 60)",
            "(line 6882,col 5)-(line 6885,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 6888,
        "end_line": 6890,
        "comment": "",
        "child_ranges": [
            "(line 6889,col 5)-(line 6889,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 6892,
        "end_line": 6894,
        "comment": "",
        "child_ranges": [
            "(line 6893,col 5)-(line 6893,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 6896,
        "end_line": 6898,
        "comment": "",
        "child_ranges": [
            "(line 6897,col 5)-(line 6897,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 6900,
        "end_line": 6904,
        "comment": "",
        "child_ranges": [
            "(line 6902,col 5)-(line 6903,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(descriptions.size(), compiler.getWarningCount());\n      Set<String> actualWarningDescriptions = Sets.newHashSet();\n      for (int i = 0; i < descriptions.size(); i++) {\n        actualWarningDescriptions.add(compiler.getWarnings()[i].description);\n      }\n      assertEquals(\n          Sets.newHashSet(descriptions), actualWarningDescriptions);\n    }\n  }\n",
        "begin_line": 6906,
        "end_line": 6947,
        "comment": "",
        "child_ranges": [
            "(line 6908,col 5)-(line 6908,col 40)",
            "(line 6909,col 5)-(line 6909,col 41)",
            "(line 6910,col 5)-(line 6910,col 61)",
            "(line 6911,col 5)-(line 6911,col 46)",
            "(line 6913,col 5)-(line 6915,col 37)",
            "(line 6918,col 5)-(line 6919,col 26)",
            "(line 6921,col 5)-(line 6921,col 65)",
            "(line 6922,col 5)-(line 6929,col 36)",
            "(line 6931,col 5)-(line 6931,col 46)",
            "(line 6933,col 5)-(line 6946,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 6949,
        "end_line": 6952,
        "comment": "",
        "child_ranges": [
            "(line 6951,col 5)-(line 6951,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 6954,
        "end_line": 6979,
        "comment": "",
        "child_ranges": [
            "(line 6956,col 5)-(line 6956,col 44)",
            "(line 6958,col 5)-(line 6958,col 44)",
            "(line 6959,col 5)-(line 6964,col 5)",
            "(line 6965,col 5)-(line 6967,col 5)",
            "(line 6969,col 5)-(line 6969,col 48)",
            "(line 6970,col 5)-(line 6975,col 5)",
            "(line 6976,col 5)-(line 6978,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 6984,
        "end_line": 6986,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 6985,col 5)-(line 6985,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 6988,
        "end_line": 6990,
        "comment": "",
        "child_ranges": [
            "(line 6989,col 5)-(line 6989,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 6996,
        "end_line": 6998,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 6997,col 5)-(line 6997,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(SourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(SourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(new InputId(\"[testcode]\")).getAstRoot(compiler);\n    Node externsNode = compiler.getInput(new InputId(\"[externs]\"))\n        .getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 7000,
        "end_line": 7019,
        "comment": "",
        "child_ranges": [
            "(line 7002,col 5)-(line 7005,col 31)",
            "(line 7007,col 5)-(line 7007,col 79)",
            "(line 7008,col 5)-(line 7009,col 30)",
            "(line 7010,col 5)-(line 7010,col 65)",
            "(line 7011,col 5)-(line 7011,col 46)",
            "(line 7013,col 5)-(line 7015,col 37)",
            "(line 7017,col 5)-(line 7017,col 64)",
            "(line 7018,col 5)-(line 7018,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 7021,
        "end_line": 7028,
        "comment": "",
        "child_ranges": [
            "(line 7022,col 5)-(line 7022,col 45)",
            "(line 7023,col 5)-(line 7023,col 65)",
            "(line 7024,col 5)-(line 7024,col 46)",
            "(line 7026,col 5)-(line 7026,col 47)",
            "(line 7027,col 5)-(line 7027,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry);\n  }\n",
        "begin_line": 7030,
        "end_line": 7036,
        "comment": "",
        "child_ranges": [
            "(line 7031,col 5)-(line 7035,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 7038,
        "end_line": 7056,
        "comment": "",
        "child_ranges": [
            "(line 7039,col 5)-(line 7039,col 40)",
            "(line 7040,col 5)-(line 7040,col 46)",
            "(line 7041,col 5)-(line 7041,col 45)",
            "(line 7042,col 5)-(line 7042,col 65)",
            "(line 7044,col 5)-(line 7044,col 47)",
            "(line 7045,col 5)-(line 7045,col 46)",
            "(line 7046,col 5)-(line 7055,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 7058,
        "end_line": 7064,
        "comment": "",
        "child_ranges": [
            "(line 7059,col 5)-(line 7059,col 43)",
            "(line 7060,col 5)-(line 7062,col 5)",
            "(line 7063,col 5)-(line 7063,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LooseTypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.LooseTypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 7070,
        "end_line": 7073,
        "comment": "",
        "child_ranges": [
            "(line 7071,col 7)-(line 7071,col 23)",
            "(line 7072,col 7)-(line 7072,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    reportMissingOverrides = CheckLevel.WARNING;\n  }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 18)",
            "(line 49,col 5)-(line 49,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        CodingConventions.getDefault()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertTypeEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertTypeEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertTypeEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertTypeEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertTypeEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertTypeEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertTypeEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertTypeEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertTypeEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertTypeEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertTypeEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertTypeEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertTypeEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertTypeEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 52,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 53,col 5)-(line 55,col 35)",
            "(line 57,col 5)-(line 57,col 71)",
            "(line 58,col 5)-(line 59,col 39)",
            "(line 60,col 5)-(line 60,col 69)",
            "(line 61,col 5)-(line 61,col 71)",
            "(line 62,col 5)-(line 63,col 41)",
            "(line 64,col 5)-(line 65,col 38)",
            "(line 66,col 5)-(line 66,col 73)",
            "(line 67,col 5)-(line 68,col 42)",
            "(line 69,col 5)-(line 70,col 46)",
            "(line 71,col 5)-(line 71,col 73)",
            "(line 72,col 5)-(line 73,col 38)",
            "(line 74,col 5)-(line 75,col 43)",
            "(line 76,col 5)-(line 77,col 41)",
            "(line 78,col 5)-(line 79,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 86,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 90,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 5)-(line 94,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 101,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 107,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 122,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 128,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 131,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 135,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 138,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 142,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 150,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 154,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck16()",
        "snippet": "  public void testTypeCheck16() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 157,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 161,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 167,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 172,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 176,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 183,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 185,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 188,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 193,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 200,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 204,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 211,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 213,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 216,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 221,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 224,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 231,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckCustomExterns2()",
        "snippet": "  public void testTypeCheckCustomExterns2() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @enum {string} */ var Enum = {FOO: 1, BAR: 1};\",\n        \"/** @param {Enum} x */ function f(x) {} f(Enum.FOO); f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: Enum.<string>\",\n        false);\n  }\n",
        "begin_line": 235,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 242,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 245,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 246,col 5)-(line 251,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array.<number>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 254,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 255,col 5)-(line 260,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 263,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 266,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 269,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 274,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 277,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 279,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 282,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 283,col 5)-(line 288,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 291,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 292,col 5)-(line 297,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 300,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 301,col 5)-(line 306,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 309,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 310,col 5)-(line 315,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 318,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 324,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 327,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 328,col 5)-(line 334,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject5()",
        "snippet": "  public void testParameterizedObject5() throws Exception {\n    testTypes(\"/** @constructor */ function F() {\" +\n        \"  /** @type {Object.<number, string>} */ this.numbers = {};\" +\n        \"}\" +\n        \"(new F()).numbers['ten'] = '10';\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 337,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 344,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 347,
        "end_line": 350,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 349,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 353,col 5)-(line 354,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 357,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 358,col 5)-(line 360,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 363,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 369,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 372,
        "end_line": 375,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 374,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 377,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 378,col 5)-(line 379,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 382,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 383,col 5)-(line 384,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 387,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 390,col 23)",
            "(line 392,col 5)-(line 393,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning =\n        \"Bad type annotation. variable length argument must be last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 396,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 397,col 5)-(line 398,col 69)",
            "(line 399,col 5)-(line 400,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 403,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 405,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 408,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 409,col 5)-(line 410,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 415,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 418,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 421,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 424,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 427,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 430,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 431,col 5)-(line 431,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 434,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 435,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 438,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 441,col 5)-(line 442,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 447,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 450,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 451,col 5)-(line 452,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 455,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 456,col 5)-(line 465,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 468,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 469,col 5)-(line 478,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {Array|T} x\\n\" +\n        \"* @return {null}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 481,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 482,col 5)-(line 492,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 495,
        "end_line": 501,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 500,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 503,
        "end_line": 509,
        "comment": "",
        "child_ranges": [
            "(line 504,col 5)-(line 508,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 511,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 512,col 5)-(line 516,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 519,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 523,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 526,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 527,col 5)-(line 531,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 534,
        "end_line": 540,
        "comment": "",
        "child_ranges": [
            "(line 535,col 5)-(line 539,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 542,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 543,col 5)-(line 544,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 547,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 548,col 5)-(line 549,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 552,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 553,col 5)-(line 554,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 557,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 558,col 5)-(line 559,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 562,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 563,col 5)-(line 565,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 568,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 572,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 575,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 576,col 5)-(line 580,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 583,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 584,col 5)-(line 589,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 592,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 593,col 5)-(line 598,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 601,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 607,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 610,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 611,col 5)-(line 616,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 619,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 620,col 5)-(line 622,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 625,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 626,col 5)-(line 630,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 633,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 635,col 5)-(line 639,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(x) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 642,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 648,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 651,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 654,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 657,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 658,col 5)-(line 661,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 664,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 668,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 671,
        "end_line": 678,
        "comment": "",
        "child_ranges": [
            "(line 672,col 5)-(line 677,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5a()",
        "snippet": "  public void testQualifiedNameReduction5a() throws Exception {\n    testTypes(\"var x = {/** @type {string} */ a:'b' };\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 680,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 681,col 5)-(line 683,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5b()",
        "snippet": "  public void testQualifiedNameReduction5b() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"/** @return {string} */\\n\" +\n        \"var f = function() {\\n\" +\n        \"  return x.a;\\n\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 686,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 695,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction5c()",
        "snippet": "  public void testQualifiedNameReduction5c() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @type {number} */ a:0 };\\n\" +\n        \"return (x.a) ? (x.a) : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 698,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 705,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction6()",
        "snippet": "  public void testQualifiedNameReduction6() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {string?} */ get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 708,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 709,col 5)-(line 712,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7()",
        "snippet": "  public void testQualifiedNameReduction7() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {/** @return {number} */ get a() {return 12}};\\n\" +\n        \"return x.a; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 715,
        "end_line": 723,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 722,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction7a()",
        "snippet": "  public void testQualifiedNameReduction7a() throws Exception {\n    // It would be nice to find a way to make this an error.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 12}};\\n\" +\n        \"return x.a; }\");\n  }\n",
        "begin_line": 725,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 727,col 5)-(line 730,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction8()",
        "snippet": "  public void testQualifiedNameReduction8() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = {get a() {return 'a'}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 733,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 734,col 5)-(line 737,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction9()",
        "snippet": "  public void testQualifiedNameReduction9() throws Exception {\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {string} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 740,
        "end_line": 745,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 744,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction10()",
        "snippet": "  public void testQualifiedNameReduction10() throws Exception {\n    // TODO(johnlenz): separate setter property types from getter property\n    // types.\n    testTypes(\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"var x = { /** @param {number} b */ set a(b) {}};\\n\" +\n        \"return x.a ? x.a : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 747,
        "end_line": 757,
        "comment": "",
        "child_ranges": [
            "(line 750,col 5)-(line 756,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1a()",
        "snippet": "  public void testObjLitDef1a() throws Exception {\n    testTypes(\n        \"var x = {/** @type {number} */ a:12 };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 759,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 760,col 5)-(line 765,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef1b()",
        "snippet": "  public void testObjLitDef1b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @type {number} */ a:12 };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 768,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 769,col 5)-(line 777,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2a()",
        "snippet": "  public void testObjLitDef2a() throws Exception {\n    testTypes(\n        \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n        \"x.a = 'a';\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 780,
        "end_line": 787,
        "comment": "",
        "child_ranges": [
            "(line 781,col 5)-(line 786,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef2b()",
        "snippet": "  public void testObjLitDef2b() throws Exception {\n    testTypes(\n        \"function f(){\" +\n          \"var x = {/** @param {number} b */ set a(b){} };\\n\" +\n          \"x.a = 'a';\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment to property a of x\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 789,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 790,col 5)-(line 798,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3a()",
        "snippet": "  public void testObjLitDef3a() throws Exception {\n    testTypes(\n        \"/** @type {string} */ var y;\\n\" +\n        \"var x = {/** @return {number} */ get a(){} };\\n\" +\n        \"y = x.a;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 801,
        "end_line": 809,
        "comment": "",
        "child_ranges": [
            "(line 802,col 5)-(line 808,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef3b()",
        "snippet": "  public void testObjLitDef3b() throws Exception {\n    testTypes(\n      \"/** @type {string} */ var y;\\n\" +\n        \"function f(){\" +\n          \"var x = {/** @return {number} */ get a(){} };\\n\" +\n          \"y = x.a;\" +\n        \"};\\n\" +\n        \"f();\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 811,
        "end_line": 822,
        "comment": "",
        "child_ranges": [
            "(line 812,col 5)-(line 821,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef4()",
        "snippet": "  public void testObjLitDef4() throws Exception {\n    testTypes(\n        \"var x = {\" +\n          \"/** @return {number} */ a:12 };\\n\",\n          \"assignment to property a of {a: function (): number}\\n\" +\n          \"found   : number\\n\" +\n          \"required: function (): number\");\n  }\n",
        "begin_line": 824,
        "end_line": 831,
        "comment": "",
        "child_ranges": [
            "(line 825,col 5)-(line 830,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjLitDef5()",
        "snippet": "  public void testObjLitDef5() throws Exception {\n    testTypes(\n        \"var x = {};\\n\" +\n        \"/** @return {number} */ x.a = 12;\\n\",\n        \"assignment to property a of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: function (): number\");\n  }\n",
        "begin_line": 833,
        "end_line": 840,
        "comment": "",
        "child_ranges": [
            "(line 834,col 5)-(line 839,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 843,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 848,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 851,
        "end_line": 857,
        "comment": "",
        "child_ranges": [
            "(line 852,col 5)-(line 856,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty1()",
        "snippet": "  public void testUndeclaredGlobalProperty1() throws Exception {\n    testTypes(\"/** @const */ var x = {}; x.y = null;\" +\n        \"function f(a) { x.y = a; }\" +\n        \"/** @param {string} a */ function g(a) { }\" +\n        \"function h() { g(x.y); }\");\n  }\n",
        "begin_line": 859,
        "end_line": 864,
        "comment": "",
        "child_ranges": [
            "(line 860,col 5)-(line 863,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty2()",
        "snippet": "  public void testUndeclaredGlobalProperty2() throws Exception {\n    testTypes(\"/** @const */ var x = {}; x.y = null;\" +\n        \"function f() { x.y = 3; }\" +\n        \"/** @param {string} a */ function g(a) { }\" +\n        \"function h() { g(x.y); }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 866,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 867,col 5)-(line 873,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLocallyInferredGlobalProperty1()",
        "snippet": "  public void testLocallyInferredGlobalProperty1() throws Exception {\n    // We used to have a bug where x.y.z leaked from f into h.\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {number} */ F.prototype.z;\" +\n        \"/** @const */ var x = {}; /** @type {F} */ x.y;\" +\n        \"function f() { x.y.z = 'abc'; }\" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"function h() { g(x.y.z); }\",\n        \"assignment to property z of F\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 876,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 878,col 5)-(line 887,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 890,
        "end_line": 894,
        "comment": "",
        "child_ranges": [
            "(line 891,col 5)-(line 893,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 896,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 897,col 5)-(line 903,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 906,
        "end_line": 915,
        "comment": "",
        "child_ranges": [
            "(line 907,col 5)-(line 914,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 917,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 918,col 5)-(line 925,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 928,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 929,col 5)-(line 936,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 939,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 940,col 5)-(line 944,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 947,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 952,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 955,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 963,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 966,
        "end_line": 977,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 976,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference9()",
        "snippet": "  public void testPropertyInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @return {function(): ?} */ function f() { \" +\n        \"  return function() {};\" +\n        \"}\" +\n        \"var g = f();\" +\n        \"/** @type {number} */ g.prototype.bar_ = null;\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 979,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 980,col 5)-(line 989,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference10()",
        "snippet": "  public void testPropertyInference10() throws Exception {\n    // NOTE(nicksantos): There used to be a bug where a property\n    // on the prototype of one structural function would leak onto\n    // the prototype of other variables with the same structural\n    // function type.\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @return {function(): ?} */ function f() { \" +\n        \"  return function() {};\" +\n        \"}\" +\n        \"var g = f();\" +\n        \"/** @type {number} */ g.prototype.bar_ = 1;\" +\n        \"var h = f();\" +\n        \"/** @type {string} */ h.prototype.bar_ = 1;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 992,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 997,col 5)-(line 1008,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 1011,
        "end_line": 1021,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1020,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 1023,
        "end_line": 1033,
        "comment": "",
        "child_ranges": [
            "(line 1025,col 5)-(line 1032,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1035,
        "end_line": 1041,
        "comment": "",
        "child_ranges": [
            "(line 1036,col 5)-(line 1040,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1043,
        "end_line": 1049,
        "comment": "",
        "child_ranges": [
            "(line 1044,col 5)-(line 1048,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1051,
        "end_line": 1057,
        "comment": "",
        "child_ranges": [
            "(line 1052,col 5)-(line 1056,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1059,
        "end_line": 1066,
        "comment": "",
        "child_ranges": [
            "(line 1061,col 5)-(line 1065,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1068,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1070,col 5)-(line 1074,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1077,
        "end_line": 1085,
        "comment": "",
        "child_ranges": [
            "(line 1079,col 5)-(line 1084,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1087,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1089,col 5)-(line 1094,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1097,
        "end_line": 1105,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 5)-(line 1104,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1107,
        "end_line": 1116,
        "comment": "",
        "child_ranges": [
            "(line 1108,col 5)-(line 1115,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 1118,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1119,col 5)-(line 1119,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 1122,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1123,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1126,
        "end_line": 1130,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 5)-(line 1129,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1132,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1133,col 5)-(line 1135,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 1138,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 5)-(line 1141,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 1144,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1145,col 5)-(line 1147,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1150,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1156,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1159,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1160,col 5)-(line 1165,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1168,
        "end_line": 1175,
        "comment": "",
        "child_ranges": [
            "(line 1169,col 5)-(line 1174,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1177,
        "end_line": 1183,
        "comment": "",
        "child_ranges": [
            "(line 1179,col 5)-(line 1182,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 1185,
        "end_line": 1191,
        "comment": "",
        "child_ranges": [
            "(line 1187,col 5)-(line 1190,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1193,
        "end_line": 1200,
        "comment": "",
        "child_ranges": [
            "(line 1194,col 5)-(line 1199,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1202,
        "end_line": 1209,
        "comment": "",
        "child_ranges": [
            "(line 1203,col 5)-(line 1208,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1211,
        "end_line": 1218,
        "comment": "",
        "child_ranges": [
            "(line 1212,col 5)-(line 1217,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1220,
        "end_line": 1227,
        "comment": "",
        "child_ranges": [
            "(line 1221,col 5)-(line 1226,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1229,
        "end_line": 1236,
        "comment": "",
        "child_ranges": [
            "(line 1230,col 5)-(line 1235,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1238,
        "end_line": 1245,
        "comment": "",
        "child_ranges": [
            "(line 1239,col 5)-(line 1244,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1247,
        "end_line": 1254,
        "comment": "",
        "child_ranges": [
            "(line 1248,col 5)-(line 1253,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1256,
        "end_line": 1260,
        "comment": "",
        "child_ranges": [
            "(line 1257,col 5)-(line 1259,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1262,
        "end_line": 1266,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 5)-(line 1265,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1268,
        "end_line": 1273,
        "comment": "",
        "child_ranges": [
            "(line 1269,col 5)-(line 1272,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1275,
        "end_line": 1277,
        "comment": "",
        "child_ranges": [
            "(line 1276,col 5)-(line 1276,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1279,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1280,col 5)-(line 1283,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1286,
        "end_line": 1288,
        "comment": "",
        "child_ranges": [
            "(line 1287,col 5)-(line 1287,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1290,
        "end_line": 1293,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 5)-(line 1292,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1295,
        "end_line": 1300,
        "comment": "",
        "child_ranges": [
            "(line 1296,col 5)-(line 1299,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1302,
        "end_line": 1307,
        "comment": "",
        "child_ranges": [
            "(line 1303,col 5)-(line 1306,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1309,
        "end_line": 1311,
        "comment": "",
        "child_ranges": [
            "(line 1310,col 5)-(line 1310,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1313,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1314,col 5)-(line 1314,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1317,
        "end_line": 1319,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 5)-(line 1318,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1321,
        "end_line": 1324,
        "comment": "",
        "child_ranges": [
            "(line 1322,col 5)-(line 1323,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1326,
        "end_line": 1329,
        "comment": "",
        "child_ranges": [
            "(line 1327,col 5)-(line 1328,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return {void} */ \" +\n        \"function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1331,
        "end_line": 1337,
        "comment": "",
        "child_ranges": [
            "(line 1332,col 5)-(line 1336,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1339,
        "end_line": 1343,
        "comment": "",
        "child_ranges": [
            "(line 1340,col 5)-(line 1342,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1345,
        "end_line": 1350,
        "comment": "",
        "child_ranges": [
            "(line 1346,col 5)-(line 1349,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1352,
        "end_line": 1357,
        "comment": "",
        "child_ranges": [
            "(line 1353,col 5)-(line 1356,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1359,
        "end_line": 1362,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1361,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1364,
        "end_line": 1370,
        "comment": "",
        "child_ranges": [
            "(line 1365,col 5)-(line 1369,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1372,
        "end_line": 1378,
        "comment": "",
        "child_ranges": [
            "(line 1373,col 5)-(line 1377,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1380,
        "end_line": 1383,
        "comment": "",
        "child_ranges": [
            "(line 1381,col 5)-(line 1382,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1385,
        "end_line": 1388,
        "comment": "",
        "child_ranges": [
            "(line 1386,col 5)-(line 1387,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1390,
        "end_line": 1394,
        "comment": "",
        "child_ranges": [
            "(line 1392,col 5)-(line 1393,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1396,
        "end_line": 1399,
        "comment": "",
        "child_ranges": [
            "(line 1397,col 5)-(line 1398,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1401,
        "end_line": 1411,
        "comment": "",
        "child_ranges": [
            "(line 1402,col 5)-(line 1410,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1413,
        "end_line": 1420,
        "comment": "",
        "child_ranges": [
            "(line 1414,col 5)-(line 1419,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1422,
        "end_line": 1428,
        "comment": "",
        "child_ranges": [
            "(line 1423,col 5)-(line 1427,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null)\");\n  }\n",
        "begin_line": 1430,
        "end_line": 1434,
        "comment": "",
        "child_ranges": [
            "(line 1431,col 5)-(line 1433,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null)\");\n  }\n",
        "begin_line": 1436,
        "end_line": 1440,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 5)-(line 1439,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1442,
        "end_line": 1446,
        "comment": "",
        "child_ranges": [
            "(line 1445,col 5)-(line 1445,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1448,
        "end_line": 1452,
        "comment": "",
        "child_ranges": [
            "(line 1451,col 5)-(line 1451,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1454,
        "end_line": 1461,
        "comment": "",
        "child_ranges": [
            "(line 1455,col 5)-(line 1460,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1463,
        "end_line": 1471,
        "comment": "",
        "child_ranges": [
            "(line 1464,col 5)-(line 1470,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1473,
        "end_line": 1481,
        "comment": "",
        "child_ranges": [
            "(line 1474,col 5)-(line 1480,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1483,
        "end_line": 1493,
        "comment": "",
        "child_ranges": [
            "(line 1484,col 5)-(line 1484,col 78)",
            "(line 1487,col 5)-(line 1487,col 47)",
            "(line 1488,col 5)-(line 1488,col 48)",
            "(line 1491,col 5)-(line 1492,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named function expressions create a binding in their body only\n    // the return is wrong but the assignment is OK since the type of b is ?\n    testTypes(\n        \"/** @return {number} */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1495,
        "end_line": 1503,
        "comment": "",
        "child_ranges": [
            "(line 1498,col 5)-(line 1502,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping12()",
        "snippet": "  public void testScoping12() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {number} */ F.prototype.bar = 3;\" +\n        \"/** @param {!F} f */ function g(f) {\" +\n        \"  /** @return {string} */\" +\n        \"  function h() {\" +\n        \"    return f.bar;\" +\n        \"  }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1505,
        "end_line": 1518,
        "comment": "",
        "child_ranges": [
            "(line 1506,col 5)-(line 1517,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return {string} */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1520,
        "end_line": 1525,
        "comment": "",
        "child_ranges": [
            "(line 1521,col 5)-(line 1524,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(opt_a) {}\",\n        \"function (number=): string\");\n  }\n",
        "begin_line": 1527,
        "end_line": 1532,
        "comment": "",
        "child_ranges": [
            "(line 1528,col 5)-(line 1531,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return {string} */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1534,
        "end_line": 1539,
        "comment": "",
        "child_ranges": [
            "(line 1535,col 5)-(line 1538,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, number=): string\");\n  }\n",
        "begin_line": 1541,
        "end_line": 1546,
        "comment": "",
        "child_ranges": [
            "(line 1542,col 5)-(line 1545,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1548,
        "end_line": 1552,
        "comment": "",
        "child_ranges": [
            "(line 1549,col 5)-(line 1551,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1554,
        "end_line": 1558,
        "comment": "",
        "child_ranges": [
            "(line 1555,col 5)-(line 1557,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1560,
        "end_line": 1564,
        "comment": "",
        "child_ranges": [
            "(line 1561,col 5)-(line 1563,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1566,
        "end_line": 1570,
        "comment": "",
        "child_ranges": [
            "(line 1567,col 5)-(line 1569,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1572,
        "end_line": 1577,
        "comment": "",
        "child_ranges": [
            "(line 1574,col 5)-(line 1576,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1579,
        "end_line": 1584,
        "comment": "",
        "child_ranges": [
            "(line 1581,col 5)-(line 1583,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1586,
        "end_line": 1590,
        "comment": "",
        "child_ranges": [
            "(line 1587,col 5)-(line 1589,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1592,
        "end_line": 1595,
        "comment": "",
        "child_ranges": [
            "(line 1593,col 5)-(line 1594,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have non-inferable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return {?boolean} */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1597,
        "end_line": 1606,
        "comment": "",
        "child_ranges": [
            "(line 1599,col 5)-(line 1605,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1608,
        "end_line": 1616,
        "comment": "",
        "child_ranges": [
            "(line 1609,col 5)-(line 1615,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1618,
        "end_line": 1625,
        "comment": "",
        "child_ranges": [
            "(line 1619,col 5)-(line 1624,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments16()",
        "snippet": "  public void testFunctionArguments16() throws Exception {\n    testTypes(\n        \"/** @param {...number} var_args */\" +\n        \"function g(var_args) {} g(1, true);\",\n        \"actual parameter 2 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 1627,
        "end_line": 1634,
        "comment": "",
        "child_ranges": [
            "(line 1628,col 5)-(line 1633,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1636,
        "end_line": 1644,
        "comment": "",
        "child_ranges": [
            "(line 1638,col 5)-(line 1643,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1646,
        "end_line": 1654,
        "comment": "",
        "child_ranges": [
            "(line 1647,col 5)-(line 1653,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1656,
        "end_line": 1660,
        "comment": "",
        "child_ranges": [
            "(line 1657,col 5)-(line 1659,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1662,
        "end_line": 1666,
        "comment": "",
        "child_ranges": [
            "(line 1663,col 5)-(line 1665,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1668,
        "end_line": 1672,
        "comment": "",
        "child_ranges": [
            "(line 1669,col 5)-(line 1671,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1674,
        "end_line": 1678,
        "comment": "",
        "child_ranges": [
            "(line 1675,col 5)-(line 1677,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1680,
        "end_line": 1684,
        "comment": "",
        "child_ranges": [
            "(line 1681,col 5)-(line 1683,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n        \"function (this:Date, ?=): string\");\n  }\n",
        "begin_line": 1686,
        "end_line": 1690,
        "comment": "",
        "child_ranges": [
            "(line 1687,col 5)-(line 1689,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1692,
        "end_line": 1696,
        "comment": "",
        "child_ranges": [
            "(line 1693,col 5)-(line 1695,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1698,
        "end_line": 1702,
        "comment": "",
        "child_ranges": [
            "(line 1699,col 5)-(line 1701,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1704,
        "end_line": 1708,
        "comment": "",
        "child_ranges": [
            "(line 1705,col 5)-(line 1707,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return {string} */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1710,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1711,col 5)-(line 1714,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return {number}*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1723,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1722,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1725,
        "end_line": 1731,
        "comment": "",
        "child_ranges": [
            "(line 1726,col 5)-(line 1730,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1733,
        "end_line": 1740,
        "comment": "",
        "child_ranges": [
            "(line 1734,col 5)-(line 1739,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1742,
        "end_line": 1749,
        "comment": "",
        "child_ranges": [
            "(line 1743,col 5)-(line 1748,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1751,
        "end_line": 1757,
        "comment": "",
        "child_ranges": [
            "(line 1752,col 5)-(line 1756,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1759,
        "end_line": 1765,
        "comment": "",
        "child_ranges": [
            "(line 1760,col 5)-(line 1764,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1767,
        "end_line": 1774,
        "comment": "",
        "child_ranges": [
            "(line 1768,col 5)-(line 1773,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1776,
        "end_line": 1782,
        "comment": "",
        "child_ranges": [
            "(line 1777,col 5)-(line 1781,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1784,
        "end_line": 1789,
        "comment": "",
        "child_ranges": [
            "(line 1785,col 5)-(line 1788,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1791,
        "end_line": 1796,
        "comment": "",
        "child_ranges": [
            "(line 1792,col 5)-(line 1795,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference21()",
        "snippet": "  public void testFunctionInference21() throws Exception {\n    testTypes(\n        \"var f = function() { throw 'x' };\" +\n        \"/** @return {boolean} */ var g = f;\");\n    testFunctionType(\n        \"var f = function() { throw 'x' };\",\n        \"f\",\n        \"function (): ?\");\n  }\n",
        "begin_line": 1798,
        "end_line": 1806,
        "comment": "",
        "child_ranges": [
            "(line 1799,col 5)-(line 1801,col 47)",
            "(line 1802,col 5)-(line 1805,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference22()",
        "snippet": "  public void testFunctionInference22() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var f = function() { g(this); };\" +\n        \"/** @param {boolean} x */ var g = function(x) {};\");\n  }\n",
        "begin_line": 1808,
        "end_line": 1812,
        "comment": "",
        "child_ranges": [
            "(line 1809,col 5)-(line 1811,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference23()",
        "snippet": "  public void testFunctionInference23() throws Exception {\n    // We want to make sure that 'prop' isn't declared on all objects.\n    testTypes(\n        \"/** @type {!Function} */ var f = function() {\\n\" +\n        \"  /** @type {number} */ this.prop = 3;\\n\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {Object} x\\n\" +\n        \" * @return {string}\\n\" +\n        \" */ var g = function(x) { return x.prop; };\");\n  }\n",
        "begin_line": 1814,
        "end_line": 1824,
        "comment": "",
        "child_ranges": [
            "(line 1816,col 5)-(line 1823,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1826,
        "end_line": 1836,
        "comment": "",
        "child_ranges": [
            "(line 1827,col 5)-(line 1835,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1838,
        "end_line": 1850,
        "comment": "",
        "child_ranges": [
            "(line 1839,col 5)-(line 1849,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1852,
        "end_line": 1865,
        "comment": "",
        "child_ranges": [
            "(line 1853,col 5)-(line 1864,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1867,
        "end_line": 1880,
        "comment": "",
        "child_ranges": [
            "(line 1868,col 5)-(line 1879,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1882,
        "end_line": 1894,
        "comment": "",
        "child_ranges": [
            "(line 1883,col 5)-(line 1893,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1896,
        "end_line": 1907,
        "comment": "",
        "child_ranges": [
            "(line 1897,col 5)-(line 1906,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1909,
        "end_line": 1921,
        "comment": "",
        "child_ranges": [
            "(line 1910,col 5)-(line 1920,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1923,
        "end_line": 1934,
        "comment": "",
        "child_ranges": [
            "(line 1924,col 5)-(line 1933,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1936,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1937,col 5)-(line 1943,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction10()",
        "snippet": "  public void testInnerFunction10() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @type {?number} */ var x = null;\" +\n        \"  /** @return {string} */\" +\n        \"  function g() {\" +\n        \"    if (!x) {\" +\n        \"      x = 1;\" +\n        \"    }\" +\n        \"    return x;\" +\n        \"  }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1946,
        "end_line": 1961,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1960,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction11()",
        "snippet": "  public void testInnerFunction11() throws Exception {\n    // TODO(nicksantos): This is actually bad inference, because\n    // h sets x to null. We should fix this, but for now we do it\n    // this way so that we don't break existing binaries. We will\n    // need to change TypeInference#isUnflowable to fix this.\n    testTypes(\n        \"function f() {\" +\n        \"  /** @type {?number} */ var x = null;\" +\n        \"  /** @return {number} */\" +\n        \"  function g() {\" +\n        \"    x = 1;\" +\n        \"    h();\" +\n        \"    return x;\" +\n        \"  }\" +\n        \"  function h() {\" +\n        \"    x = null;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1963,
        "end_line": 1981,
        "comment": "",
        "child_ranges": [
            "(line 1968,col 5)-(line 1980,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 1983,
        "end_line": 1987,
        "comment": "",
        "child_ranges": [
            "(line 1984,col 5)-(line 1986,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1989,
        "end_line": 1996,
        "comment": "",
        "child_ranges": [
            "(line 1990,col 5)-(line 1995,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 1998,
        "end_line": 2003,
        "comment": "",
        "child_ranges": [
            "(line 1999,col 5)-(line 2002,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 2005,
        "end_line": 2013,
        "comment": "",
        "child_ranges": [
            "(line 2006,col 5)-(line 2012,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2015,
        "end_line": 2023,
        "comment": "",
        "child_ranges": [
            "(line 2016,col 5)-(line 2022,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2025,
        "end_line": 2034,
        "comment": "",
        "child_ranges": [
            "(line 2026,col 5)-(line 2033,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2036,
        "end_line": 2046,
        "comment": "",
        "child_ranges": [
            "(line 2037,col 5)-(line 2045,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2048,
        "end_line": 2060,
        "comment": "",
        "child_ranges": [
            "(line 2049,col 5)-(line 2059,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2062,
        "end_line": 2074,
        "comment": "",
        "child_ranges": [
            "(line 2063,col 5)-(line 2073,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2076,
        "end_line": 2088,
        "comment": "",
        "child_ranges": [
            "(line 2077,col 5)-(line 2087,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2090,
        "end_line": 2103,
        "comment": "",
        "child_ranges": [
            "(line 2091,col 5)-(line 2102,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\");\n  }\n",
        "begin_line": 2105,
        "end_line": 2113,
        "comment": "",
        "child_ranges": [
            "(line 2106,col 5)-(line 2112,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\",\n        \"mismatch of the foo property type and the type of the property \" +\n        \"it overrides from superclass F\\n\" +\n        \"original: function (this:F): undefined\\n\" +\n        \"override: function (this:G, ?, ?): undefined\");\n  }\n",
        "begin_line": 2115,
        "end_line": 2126,
        "comment": "",
        "child_ranges": [
            "(line 2116,col 5)-(line 2125,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(opt_b, var_args) { };\" +\n        \"(new G()).foo(1, 2, 3);\");\n  }\n",
        "begin_line": 2128,
        "end_line": 2137,
        "comment": "",
        "child_ranges": [
            "(line 2129,col 5)-(line 2136,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 2139,
        "end_line": 2148,
        "comment": "",
        "child_ranges": [
            "(line 2140,col 5)-(line 2147,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2150,
        "end_line": 2157,
        "comment": "",
        "child_ranges": [
            "(line 2151,col 5)-(line 2156,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2159,
        "end_line": 2166,
        "comment": "",
        "child_ranges": [
            "(line 2160,col 5)-(line 2165,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 2168,
        "end_line": 2174,
        "comment": "",
        "child_ranges": [
            "(line 2169,col 5)-(line 2173,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (number): undefined\");\n  }\n",
        "begin_line": 2176,
        "end_line": 2184,
        "comment": "",
        "child_ranges": [
            "(line 2177,col 5)-(line 2183,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2186,
        "end_line": 2192,
        "comment": "",
        "child_ranges": [
            "(line 2187,col 5)-(line 2191,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2194,
        "end_line": 2199,
        "comment": "",
        "child_ranges": [
            "(line 2195,col 5)-(line 2198,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 2201,
        "end_line": 2206,
        "comment": "",
        "child_ranges": [
            "(line 2202,col 5)-(line 2205,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 2208,
        "end_line": 2216,
        "comment": "",
        "child_ranges": [
            "(line 2209,col 5)-(line 2215,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2218,
        "end_line": 2224,
        "comment": "",
        "child_ranges": [
            "(line 2219,col 5)-(line 2223,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 2226,
        "end_line": 2232,
        "comment": "",
        "child_ranges": [
            "(line 2227,col 5)-(line 2231,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 2234,
        "end_line": 2242,
        "comment": "",
        "child_ranges": [
            "(line 2235,col 5)-(line 2241,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        Lists.newArrayList(\n            \"assignment to property foo of goog\\n\" +\n            \"found   : string\\n\" +\n            \"required: Foo\",\n            \"variable goog.foo redefined with type string, \" +\n            \"original definition at [testcode]:1 with type Foo\"));\n  }\n",
        "begin_line": 2244,
        "end_line": 2256,
        "comment": "",
        "child_ranges": [
            "(line 2245,col 5)-(line 2255,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        Lists.newArrayList(\n            \"assignment to property foo of goog\\n\" +\n            \"found   : string\\n\" +\n            \"required: Foo\",\n            \"variable goog.foo redefined with type string, \" +\n            \"original definition at [testcode]:1 with type Foo\"));\n  }\n",
        "begin_line": 2258,
        "end_line": 2270,
        "comment": "",
        "child_ranges": [
            "(line 2259,col 5)-(line 2269,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 2272,
        "end_line": 2277,
        "comment": "",
        "child_ranges": [
            "(line 2273,col 5)-(line 2276,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 2279,
        "end_line": 2284,
        "comment": "",
        "child_ranges": [
            "(line 2280,col 5)-(line 2283,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 2286,
        "end_line": 2292,
        "comment": "",
        "child_ranges": [
            "(line 2287,col 5)-(line 2291,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 2294,
        "end_line": 2300,
        "comment": "",
        "child_ranges": [
            "(line 2295,col 5)-(line 2299,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDec20()",
        "snippet": "  public void testDuplicateStaticPropertyDec20() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @fileoverview\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */\" +\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 2302,
        "end_line": 2311,
        "comment": "",
        "child_ranges": [
            "(line 2303,col 5)-(line 2310,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        Lists.newArrayList(\n            \"variable x redefined with type string, original definition\" +\n            \" at [testcode]:2 with type number\",\n            \"initializing variable\\n\" +\n            \"found   : string\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 2313,
        "end_line": 2323,
        "comment": "",
        "child_ranges": [
            "(line 2314,col 5)-(line 2322,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod1()",
        "snippet": "  public void testDuplicateInstanceMethod1() throws Exception {\n    // If there's no jsdoc on the methods, then we treat them like\n    // any other inferred properties.\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"F.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 2325,
        "end_line": 2332,
        "comment": "",
        "child_ranges": [
            "(line 2328,col 5)-(line 2331,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod2()",
        "snippet": "  public void testDuplicateInstanceMethod2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\",\n        \"variable F.prototype.bar redefined with type \" +\n        \"function (this:F): undefined, original definition at \" +\n        \"[testcode]:1 with type function (this:F): undefined\");\n  }\n",
        "begin_line": 2334,
        "end_line": 2342,
        "comment": "",
        "child_ranges": [
            "(line 2335,col 5)-(line 2341,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod3()",
        "snippet": "  public void testDuplicateInstanceMethod3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\",\n        \"variable F.prototype.bar redefined with type \" +\n        \"function (this:F): undefined, original definition at \" +\n        \"[testcode]:1 with type function (this:F): undefined\");\n  }\n",
        "begin_line": 2344,
        "end_line": 2352,
        "comment": "",
        "child_ranges": [
            "(line 2345,col 5)-(line 2351,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod4()",
        "snippet": "  public void testDuplicateInstanceMethod4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc */ F.prototype.bar = function() {};\" +\n        \"F.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 2354,
        "end_line": 2359,
        "comment": "",
        "child_ranges": [
            "(line 2355,col 5)-(line 2358,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod5()",
        "snippet": "  public void testDuplicateInstanceMethod5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc \\n * @return {number} */ F.prototype.bar = function() {\" +\n        \"  return 3;\" +\n        \"};\" +\n        \"/** jsdoc \\n * @suppress {duplicate} */ \" +\n        \"F.prototype.bar = function() { return ''; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2361,
        "end_line": 2372,
        "comment": "",
        "child_ranges": [
            "(line 2362,col 5)-(line 2371,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateInstanceMethod6()",
        "snippet": "  public void testDuplicateInstanceMethod6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** jsdoc \\n * @return {number} */ F.prototype.bar = function() {\" +\n        \"  return 3;\" +\n        \"};\" +\n        \"/** jsdoc \\n * @return {string} * \\n @suppress {duplicate} */ \" +\n        \"F.prototype.bar = function() { return ''; };\",\n        \"assignment to property bar of F.prototype\\n\" +\n        \"found   : function (this:F): string\\n\" +\n        \"required: function (this:F): number\");\n  }\n",
        "begin_line": 2374,
        "end_line": 2385,
        "comment": "",
        "child_ranges": [
            "(line 2375,col 5)-(line 2384,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 2387,
        "end_line": 2394,
        "comment": "",
        "child_ranges": [
            "(line 2388,col 5)-(line 2393,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testExternFunctionType(\n        // externs\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (new:f.subclass): ?\");\n  }\n",
        "begin_line": 2396,
        "end_line": 2403,
        "comment": "",
        "child_ranges": [
            "(line 2397,col 5)-(line 2402,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 2405,
        "end_line": 2411,
        "comment": "",
        "child_ranges": [
            "(line 2406,col 5)-(line 2410,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2413,
        "end_line": 2420,
        "comment": "",
        "child_ranges": [
            "(line 2414,col 5)-(line 2419,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2422,
        "end_line": 2429,
        "comment": "",
        "child_ranges": [
            "(line 2423,col 5)-(line 2428,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2431,
        "end_line": 2437,
        "comment": "",
        "child_ranges": [
            "(line 2432,col 5)-(line 2436,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2439,
        "end_line": 2445,
        "comment": "",
        "child_ranges": [
            "(line 2440,col 5)-(line 2444,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2447,
        "end_line": 2452,
        "comment": "",
        "child_ranges": [
            "(line 2448,col 5)-(line 2451,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2454,
        "end_line": 2459,
        "comment": "",
        "child_ranges": [
            "(line 2455,col 5)-(line 2458,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2461,
        "end_line": 2466,
        "comment": "",
        "child_ranges": [
            "(line 2462,col 5)-(line 2465,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2468,
        "end_line": 2474,
        "comment": "",
        "child_ranges": [
            "(line 2469,col 5)-(line 2471,col 60)",
            "(line 2472,col 5)-(line 2473,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2480,
        "end_line": 2483,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2482,col 5)-(line 2482,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2489,
        "end_line": 2498,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2492,col 5)-(line 2497,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testExternFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    testTypes(\n        functionDef,\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\", false);\n  }\n",
        "begin_line": 2505,
        "end_line": 2513,
        "comment": "\n   * Tests the type of a function definition in externs.\n   * The function defined by {@code functionDef} should be\n   * named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2507,col 5)-(line 2512,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testClosureTypesMultipleWarnings(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        Lists.newArrayList(\n            \"variable a.A redefined with type function (new:a.A): undefined, \" +\n            \"original definition at [testcode]:1 with type enum{a.A}\",\n            \"assignment to property A of a\\n\" +\n            \"found   : function (new:a.A): undefined\\n\" +\n            \"required: enum{a.A}\"));\n  }\n",
        "begin_line": 2515,
        "end_line": 2524,
        "comment": "",
        "child_ranges": [
            "(line 2516,col 5)-(line 2523,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2526,
        "end_line": 2528,
        "comment": "",
        "child_ranges": [
            "(line 2527,col 5)-(line 2527,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2530,
        "end_line": 2532,
        "comment": "",
        "child_ranges": [
            "(line 2531,col 5)-(line 2531,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2534,
        "end_line": 2536,
        "comment": "",
        "child_ranges": [
            "(line 2535,col 5)-(line 2535,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2538,
        "end_line": 2543,
        "comment": "",
        "child_ranges": [
            "(line 2539,col 5)-(line 2542,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2545,
        "end_line": 2550,
        "comment": "",
        "child_ranges": [
            "(line 2546,col 5)-(line 2549,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2552,
        "end_line": 2560,
        "comment": "",
        "child_ranges": [
            "(line 2553,col 5)-(line 2559,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2562,
        "end_line": 2578,
        "comment": "",
        "child_ranges": [
            "(line 2564,col 5)-(line 2577,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn1()",
        "snippet": "  public void testForIn1() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"for (var k in {}) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2580,
        "end_line": 2589,
        "comment": "",
        "child_ranges": [
            "(line 2581,col 5)-(line 2588,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn2()",
        "snippet": "  public void testForIn2() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, string>} */ var obj = {};\" +\n        \"var k = null;\" +\n        \"for (k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E.<string>\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2591,
        "end_line": 2603,
        "comment": "",
        "child_ranges": [
            "(line 2592,col 5)-(line 2602,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn3()",
        "snippet": "  public void testForIn3() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @type {Object.<number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2605,
        "end_line": 2615,
        "comment": "",
        "child_ranges": [
            "(line 2606,col 5)-(line 2614,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn4()",
        "snippet": "  public void testForIn4() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n        \"/** @type {Object.<E, Array>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(obj[k]);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (Array|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2617,
        "end_line": 2628,
        "comment": "",
        "child_ranges": [
            "(line 2618,col 5)-(line 2627,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForIn5()",
        "snippet": "  public void testForIn5() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */ function f(x) {}\" +\n        \"/** @constructor */ var E = function(){};\" +\n        \"/** @type {Object.<E, number>} */ var obj = {};\" +\n        \"for (var k in obj) {\" +\n        \"  f(k);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2630,
        "end_line": 2641,
        "comment": "",
        "child_ranges": [
            "(line 2631,col 5)-(line 2640,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to true\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2653,
        "end_line": 2660,
        "comment": "",
        "child_ranges": [
            "(line 2654,col 5)-(line 2659,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2662,
        "end_line": 2666,
        "comment": "",
        "child_ranges": [
            "(line 2664,col 5)-(line 2665,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2668,
        "end_line": 2672,
        "comment": "",
        "child_ranges": [
            "(line 2669,col 5)-(line 2671,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2674,
        "end_line": 2681,
        "comment": "",
        "child_ranges": [
            "(line 2675,col 5)-(line 2680,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2683,
        "end_line": 2690,
        "comment": "",
        "child_ranges": [
            "(line 2684,col 5)-(line 2689,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2692,
        "end_line": 2699,
        "comment": "",
        "child_ranges": [
            "(line 2693,col 5)-(line 2698,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2701,
        "end_line": 2704,
        "comment": "",
        "child_ranges": [
            "(line 2702,col 5)-(line 2703,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2706,
        "end_line": 2712,
        "comment": "",
        "child_ranges": [
            "(line 2707,col 5)-(line 2711,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2714,
        "end_line": 2717,
        "comment": "",
        "child_ranges": [
            "(line 2715,col 5)-(line 2716,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison11()",
        "snippet": "  public void testComparison11() throws Exception {\n    testTypes(\n        \"(function(){}) == 'x'\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 2719,
        "end_line": 2725,
        "comment": "",
        "child_ranges": [
            "(line 2720,col 5)-(line 2724,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison12()",
        "snippet": "  public void testComparison12() throws Exception {\n    testTypes(\n        \"(function(){}) == 3\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 2727,
        "end_line": 2733,
        "comment": "",
        "child_ranges": [
            "(line 2728,col 5)-(line 2732,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison13()",
        "snippet": "  public void testComparison13() throws Exception {\n    testTypes(\n        \"(function(){}) == false\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: boolean\");\n  }\n",
        "begin_line": 2735,
        "end_line": 2741,
        "comment": "",
        "child_ranges": [
            "(line 2736,col 5)-(line 2740,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison14()",
        "snippet": "  public void testComparison14() throws Exception {\n    testTypes(\"/** @type {function((Array|string), Object): number} */\" +\n        \"function f(x, y) { return x === y; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2743,
        "end_line": 2749,
        "comment": "",
        "child_ranges": [
            "(line 2744,col 5)-(line 2748,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison15()",
        "snippet": "  public void testComparison15() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function F() {}\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {F}\\n\" +\n        \" */\\n\" +\n        \"function G(x) {}\\n\" +\n        \"goog.inherits(G, F);\\n\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {G}\\n\" +\n        \" */\\n\" +\n        \"function H(x) {}\\n\" +\n        \"goog.inherits(H, G);\\n\" +\n        \"/** @param {G} x */\" +\n        \"function f(x) { return x.constructor === H; }\",\n        null);\n  }\n",
        "begin_line": 2751,
        "end_line": 2772,
        "comment": "",
        "child_ranges": [
            "(line 2752,col 5)-(line 2771,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator1()",
        "snippet": "  public void testDeleteOperator1() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/** @return {string} */ function f() { return delete x['a']; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2774,
        "end_line": 2781,
        "comment": "",
        "child_ranges": [
            "(line 2775,col 5)-(line 2780,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeleteOperator2()",
        "snippet": "  public void testDeleteOperator2() throws Exception {\n    testTypes(\n        \"var obj = {};\" +\n        \"/** \\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @return {Object} */ function f(x) { return obj; }\" +\n        \"/** @param {?number} x */ function g(x) {\" +\n        \"  if (x) { delete f(x)['a']; }\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2783,
        "end_line": 2795,
        "comment": "",
        "child_ranges": [
            "(line 2784,col 5)-(line 2794,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2797,
        "end_line": 2805,
        "comment": "",
        "child_ranges": [
            "(line 2798,col 5)-(line 2804,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2807,
        "end_line": 2815,
        "comment": "",
        "child_ranges": [
            "(line 2808,col 5)-(line 2814,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2817,
        "end_line": 2820,
        "comment": "",
        "child_ranges": [
            "(line 2818,col 5)-(line 2819,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2822,
        "end_line": 2825,
        "comment": "",
        "child_ranges": [
            "(line 2823,col 5)-(line 2824,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"variable a.BB redefined with type a.<number>, \" +\n        \"original definition at [testcode]:1 with type a.<number>\");\n  }\n",
        "begin_line": 2827,
        "end_line": 2831,
        "comment": "",
        "child_ranges": [
            "(line 2828,col 5)-(line 2830,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2833,
        "end_line": 2838,
        "comment": "",
        "child_ranges": [
            "(line 2834,col 5)-(line 2837,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"assignment to property BB of enum{a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 2840,
        "end_line": 2845,
        "comment": "",
        "child_ranges": [
            "(line 2841,col 5)-(line 2844,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2847,
        "end_line": 2852,
        "comment": "",
        "child_ranges": [
            "(line 2848,col 5)-(line 2851,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2854,
        "end_line": 2858,
        "comment": "",
        "child_ranges": [
            "(line 2855,col 5)-(line 2857,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testClosureTypesMultipleWarnings(\"/** @enum */var a=8;\",\n        Lists.newArrayList(\n            \"enum initializer must be an object literal or an enum\",\n            \"initializing variable\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{a}\"));\n  }\n",
        "begin_line": 2860,
        "end_line": 2867,
        "comment": "",
        "child_ranges": [
            "(line 2861,col 5)-(line 2866,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        Lists.newArrayList(\n            \"assignment to property a of goog\\n\" +\n            \"found   : number\\n\" +\n            \"required: enum{goog.a}\",\n            \"enum initializer must be an object literal or an enum\"));\n  }\n",
        "begin_line": 2869,
        "end_line": 2878,
        "comment": "",
        "child_ranges": [
            "(line 2870,col 5)-(line 2877,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2880,
        "end_line": 2884,
        "comment": "",
        "child_ranges": [
            "(line 2881,col 5)-(line 2883,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2886,
        "end_line": 2890,
        "comment": "",
        "child_ranges": [
            "(line 2887,col 5)-(line 2889,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2892,
        "end_line": 2896,
        "comment": "",
        "child_ranges": [
            "(line 2893,col 5)-(line 2895,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2898,
        "end_line": 2905,
        "comment": "",
        "child_ranges": [
            "(line 2899,col 5)-(line 2904,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2907,
        "end_line": 2912,
        "comment": "",
        "child_ranges": [
            "(line 2908,col 5)-(line 2911,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2914,
        "end_line": 2920,
        "comment": "",
        "child_ranges": [
            "(line 2915,col 5)-(line 2919,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog .a={BB:1,BB:2}\",\n        \"variable goog.a.BB redefined with type goog.a.<number>, \" +\n        \"original definition at [testcode]:1 with type goog.a.<number>\");\n  }\n",
        "begin_line": 2922,
        "end_line": 2927,
        "comment": "",
        "child_ranges": [
            "(line 2923,col 5)-(line 2926,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"assignment to property BB of enum{goog.a}\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2929,
        "end_line": 2935,
        "comment": "",
        "child_ranges": [
            "(line 2930,col 5)-(line 2934,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2937,
        "end_line": 2941,
        "comment": "",
        "child_ranges": [
            "(line 2938,col 5)-(line 2940,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2943,
        "end_line": 2950,
        "comment": "",
        "child_ranges": [
            "(line 2944,col 5)-(line 2949,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2952,
        "end_line": 2954,
        "comment": "",
        "child_ranges": [
            "(line 2953,col 5)-(line 2953,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2956,
        "end_line": 2964,
        "comment": "",
        "child_ranges": [
            "(line 2957,col 5)-(line 2959,col 74)",
            "(line 2960,col 5)-(line 2960,col 79)",
            "(line 2961,col 5)-(line 2961,col 37)",
            "(line 2962,col 5)-(line 2962,col 34)",
            "(line 2963,col 5)-(line 2963,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2966,
        "end_line": 2969,
        "comment": "",
        "child_ranges": [
            "(line 2967,col 5)-(line 2968,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2971,
        "end_line": 2977,
        "comment": "",
        "child_ranges": [
            "(line 2972,col 5)-(line 2976,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2979,
        "end_line": 2985,
        "comment": "",
        "child_ranges": [
            "(line 2980,col 5)-(line 2984,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2987,
        "end_line": 2990,
        "comment": "",
        "child_ranges": [
            "(line 2988,col 5)-(line 2989,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2992,
        "end_line": 2995,
        "comment": "",
        "child_ranges": [
            "(line 2993,col 5)-(line 2994,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 2997,
        "end_line": 3001,
        "comment": "",
        "child_ranges": [
            "(line 2999,col 5)-(line 3000,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 3003,
        "end_line": 3007,
        "comment": "",
        "child_ranges": [
            "(line 3005,col 5)-(line 3006,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3009,
        "end_line": 3015,
        "comment": "",
        "child_ranges": [
            "(line 3010,col 5)-(line 3014,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 3017,
        "end_line": 3020,
        "comment": "",
        "child_ranges": [
            "(line 3018,col 5)-(line 3019,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 3022,
        "end_line": 3028,
        "comment": "",
        "child_ranges": [
            "(line 3023,col 5)-(line 3027,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 3030,
        "end_line": 3033,
        "comment": "",
        "child_ranges": [
            "(line 3031,col 5)-(line 3032,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 3035,
        "end_line": 3038,
        "comment": "",
        "child_ranges": [
            "(line 3036,col 5)-(line 3037,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 3040,
        "end_line": 3043,
        "comment": "",
        "child_ranges": [
            "(line 3041,col 5)-(line 3042,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 3045,
        "end_line": 3051,
        "comment": "",
        "child_ranges": [
            "(line 3046,col 5)-(line 3050,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 3053,
        "end_line": 3058,
        "comment": "",
        "child_ranges": [
            "(line 3054,col 5)-(line 3057,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 3060,
        "end_line": 3066,
        "comment": "",
        "child_ranges": [
            "(line 3061,col 5)-(line 3065,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3068,
        "end_line": 3076,
        "comment": "",
        "child_ranges": [
            "(line 3069,col 5)-(line 3075,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3078,
        "end_line": 3086,
        "comment": "",
        "child_ranges": [
            "(line 3079,col 5)-(line 3085,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum41()",
        "snippet": "  public void testEnum41() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var MyEnum = {/** @const */ FOO: 1};\" +\n        \"/** @return {string} */\" +\n        \"function f() { return MyEnum.FOO; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3088,
        "end_line": 3096,
        "comment": "",
        "child_ranges": [
            "(line 3089,col 5)-(line 3095,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum42()",
        "snippet": "  public void testEnum42() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @enum {Object} */ var MyEnum = {FOO: {newProperty: 1, b: 2}};\" +\n        \"f(MyEnum.FOO.newProperty);\");\n  }\n",
        "begin_line": 3098,
        "end_line": 3103,
        "comment": "",
        "child_ranges": [
            "(line 3099,col 5)-(line 3102,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 3105,
        "end_line": 3110,
        "comment": "",
        "child_ranges": [
            "(line 3106,col 5)-(line 3109,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 3112,
        "end_line": 3117,
        "comment": "",
        "child_ranges": [
            "(line 3113,col 5)-(line 3116,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 3119,
        "end_line": 3124,
        "comment": "",
        "child_ranges": [
            "(line 3120,col 5)-(line 3123,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 3126,
        "end_line": 3131,
        "comment": "",
        "child_ranges": [
            "(line 3127,col 5)-(line 3130,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3133,
        "end_line": 3141,
        "comment": "",
        "child_ranges": [
            "(line 3134,col 5)-(line 3140,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 3143,
        "end_line": 3147,
        "comment": "",
        "child_ranges": [
            "(line 3144,col 5)-(line 3146,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3149,
        "end_line": 3156,
        "comment": "",
        "child_ranges": [
            "(line 3150,col 5)-(line 3155,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 3158,
        "end_line": 3163,
        "comment": "",
        "child_ranges": [
            "(line 3159,col 5)-(line 3162,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3165,
        "end_line": 3173,
        "comment": "",
        "child_ranges": [
            "(line 3166,col 5)-(line 3172,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 3175,
        "end_line": 3181,
        "comment": "",
        "child_ranges": [
            "(line 3176,col 5)-(line 3180,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse2()",
        "snippet": "  public void testBackwardsTypedefUse2() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {!(Date|Array)} */ var MyTypedef;\");\n  }\n",
        "begin_line": 3183,
        "end_line": 3187,
        "comment": "",
        "child_ranges": [
            "(line 3184,col 5)-(line 3186,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse4()",
        "snippet": "  public void testBackwardsTypedefUse4() throws Exception {\n    testTypes(\n        \"/** @return {MyTypedef} */ function f() { return null; }\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3189,
        "end_line": 3196,
        "comment": "",
        "child_ranges": [
            "(line 3190,col 5)-(line 3195,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse6()",
        "snippet": "  public void testBackwardsTypedefUse6() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {string} */ goog.MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3198,
        "end_line": 3206,
        "comment": "",
        "child_ranges": [
            "(line 3199,col 5)-(line 3205,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse7()",
        "snippet": "  public void testBackwardsTypedefUse7() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {Object} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 3208,
        "end_line": 3213,
        "comment": "",
        "child_ranges": [
            "(line 3209,col 5)-(line 3212,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse8()",
        "snippet": "  public void testBackwardsTypedefUse8() throws Exception {\n    // Technically, this isn't quite right, because the JS runtime\n    // will coerce null -> the global object. But we'll punt on that for now.\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 3215,
        "end_line": 3223,
        "comment": "",
        "child_ranges": [
            "(line 3218,col 5)-(line 3222,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse9()",
        "snippet": "  public void testBackwardsTypedefUse9() throws Exception {\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 3225,
        "end_line": 3234,
        "comment": "",
        "child_ranges": [
            "(line 3226,col 5)-(line 3233,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse10()",
        "snippet": "  public void testBackwardsTypedefUse10() throws Exception {\n    testTypes(\n        \"/** @param {goog.MyEnum} x */ function g(x) {}\" +\n        \"var goog = {};\" +\n        \"/** @enum {goog.MyTypedef} */ goog.MyEnum = {FOO: 1};\" +\n        \"/** @typedef {number} */ goog.MyTypedef;\" +\n        \"g(1);\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: goog.MyEnum.<number>\");\n  }\n",
        "begin_line": 3236,
        "end_line": 3246,
        "comment": "",
        "child_ranges": [
            "(line 3237,col 5)-(line 3245,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3248,
        "end_line": 3256,
        "comment": "",
        "child_ranges": [
            "(line 3249,col 5)-(line 3255,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3258,
        "end_line": 3268,
        "comment": "",
        "child_ranges": [
            "(line 3259,col 5)-(line 3267,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 3270,
        "end_line": 3272,
        "comment": "",
        "child_ranges": [
            "(line 3271,col 5)-(line 3271,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3274,
        "end_line": 3278,
        "comment": "",
        "child_ranges": [
            "(line 3276,col 5)-(line 3277,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 3280,
        "end_line": 3283,
        "comment": "",
        "child_ranges": [
            "(line 3281,col 5)-(line 3282,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 3285,
        "end_line": 3288,
        "comment": "",
        "child_ranges": [
            "(line 3286,col 5)-(line 3287,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 3290,
        "end_line": 3308,
        "comment": "",
        "child_ranges": [
            "(line 3294,col 5)-(line 3298,col 69)",
            "(line 3299,col 5)-(line 3299,col 71)",
            "(line 3300,col 5)-(line 3300,col 65)",
            "(line 3302,col 5)-(line 3303,col 57)",
            "(line 3304,col 5)-(line 3304,col 75)",
            "(line 3306,col 5)-(line 3306,col 73)",
            "(line 3307,col 5)-(line 3307,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 3310,
        "end_line": 3314,
        "comment": "",
        "child_ranges": [
            "(line 3312,col 5)-(line 3313,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 3316,
        "end_line": 3326,
        "comment": "",
        "child_ranges": [
            "(line 3317,col 5)-(line 3325,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (new:derived, ...[?]): ?\");\n  }\n",
        "begin_line": 3328,
        "end_line": 3336,
        "comment": "",
        "child_ranges": [
            "(line 3329,col 5)-(line 3335,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3338,
        "end_line": 3346,
        "comment": "",
        "child_ranges": [
            "(line 3339,col 5)-(line 3345,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 3348,
        "end_line": 3355,
        "comment": "",
        "child_ranges": [
            "(line 3349,col 5)-(line 3354,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 3357,
        "end_line": 3363,
        "comment": "",
        "child_ranges": [
            "(line 3358,col 5)-(line 3362,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3365,
        "end_line": 3376,
        "comment": "",
        "child_ranges": [
            "(line 3366,col 5)-(line 3375,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends12()",
        "snippet": "  public void testGoodExtends12() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {Super} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\");\n  }\n",
        "begin_line": 3378,
        "end_line": 3385,
        "comment": "",
        "child_ranges": [
            "(line 3379,col 5)-(line 3384,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends13()",
        "snippet": "  public void testGoodExtends13() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {B}  */ function C() {}\" +\n        \"/** @constructor \\n * @extends {D}  */ function E() {}\" +\n        \"/** @constructor \\n * @extends {C}  */ function D() {}\" +\n        \"/** @constructor \\n * @extends {A} */ function B() {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @param {number} x */ function f(x) {} f(new E());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3387,
        "end_line": 3398,
        "comment": "",
        "child_ranges": [
            "(line 3388,col 5)-(line 3397,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends14()",
        "snippet": "  public void testGoodExtends14() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Function} f */ function g(f) {\" +\n        \"  /** @constructor */ function NewType() {};\" +\n        \"  goog.inherits(NewType, f);\" +\n        \"  (new NewType());\" +\n        \"}\");\n  }\n",
        "begin_line": 3400,
        "end_line": 3408,
        "comment": "",
        "child_ranges": [
            "(line 3401,col 5)-(line 3407,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends15()",
        "snippet": "  public void testGoodExtends15() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function OldType() {}\" +\n        \"/** @param {?function(new:OldType)} f */ function g(f) {\" +\n        \"  /**\\n\" +\n        \"    * @constructor\\n\" +\n        \"    * @extends {OldType}\\n\" +\n        \"    */\\n\" +\n        \"  function NewType() {};\" +\n        \"  goog.inherits(NewType, f);\" +\n        \"  NewType.prototype.method = function() {\" +\n        \"    NewType.superClass_.foo.call(this);\" +\n        \"  };\" +\n        \"}\",\n        \"Property foo never defined on OldType.prototype\");\n  }\n",
        "begin_line": 3410,
        "end_line": 3426,
        "comment": "",
        "child_ranges": [
            "(line 3411,col 5)-(line 3425,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends16()",
        "snippet": "  public void testGoodExtends16() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Function} f */ function g(f) {\" +\n        \"  /** @constructor */ function NewType() {};\" +\n        \"  goog.inherits(f, NewType);\" +\n        \"  (new NewType());\" +\n        \"}\");\n  }\n",
        "begin_line": 3428,
        "end_line": 3436,
        "comment": "",
        "child_ranges": [
            "(line 3429,col 5)-(line 3435,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends17()",
        "snippet": "  public void testGoodExtends17() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @param {number} x */ base.prototype.bar = function(x) {};\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor.prototype.bar\",\n        \"function (this:base, number): undefined\");\n  }\n",
        "begin_line": 3438,
        "end_line": 3447,
        "comment": "",
        "child_ranges": [
            "(line 3439,col 5)-(line 3446,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Bad type annotation. Unknown type not_base\");\n  }\n",
        "begin_line": 3449,
        "end_line": 3453,
        "comment": "",
        "child_ranges": [
            "(line 3450,col 5)-(line 3452,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 3455,
        "end_line": 3469,
        "comment": "",
        "child_ranges": [
            "(line 3456,col 5)-(line 3468,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 3471,
        "end_line": 3474,
        "comment": "",
        "child_ranges": [
            "(line 3472,col 5)-(line 3473,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends4()",
        "snippet": "  public void testBadExtends4() throws Exception {\n    // If there's a subclass of a class with a bad extends,\n    // we only want to warn about the first one.\n    testTypes(\n        \"/** @constructor \\n * @extends {bad} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @param {Sub} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\",\n        \"Bad type annotation. Unknown type bad\");\n  }\n",
        "begin_line": 3476,
        "end_line": 3485,
        "comment": "",
        "child_ranges": [
            "(line 3479,col 5)-(line 3484,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 3487,
        "end_line": 3495,
        "comment": "",
        "child_ranges": [
            "(line 3488,col 5)-(line 3494,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 3497,
        "end_line": 3503,
        "comment": "",
        "child_ranges": [
            "(line 3498,col 5)-(line 3498,col 76)",
            "(line 3499,col 5)-(line 3502,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 3505,
        "end_line": 3514,
        "comment": "",
        "child_ranges": [
            "(line 3506,col 5)-(line 3506,col 76)",
            "(line 3507,col 5)-(line 3513,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3516,
        "end_line": 3523,
        "comment": "",
        "child_ranges": [
            "(line 3517,col 5)-(line 3517,col 76)",
            "(line 3518,col 5)-(line 3522,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 3525,
        "end_line": 3532,
        "comment": "",
        "child_ranges": [
            "(line 3526,col 5)-(line 3526,col 76)",
            "(line 3527,col 5)-(line 3531,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 3534,
        "end_line": 3541,
        "comment": "",
        "child_ranges": [
            "(line 3535,col 5)-(line 3540,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 3543,
        "end_line": 3550,
        "comment": "",
        "child_ranges": [
            "(line 3544,col 5)-(line 3549,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3552,
        "end_line": 3562,
        "comment": "",
        "child_ranges": [
            "(line 3553,col 5)-(line 3561,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 3564,
        "end_line": 3573,
        "comment": "",
        "child_ranges": [
            "(line 3567,col 5)-(line 3572,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment3()",
        "snippet": "  public void testDirectPrototypeAssignment3() throws Exception {\n    // This verifies that the compiler doesn't crash if the user\n    // overwrites the prototype of a global variable in a local scope.\n    testTypes(\n        \"/** @constructor */ var MainWidgetCreator = function() {};\" +\n        \"/** @param {Function} ctor */\" +\n        \"function createMainWidget(ctor) {\" +\n        \"  /** @constructor */ function tempCtor() {};\" +\n        \"  tempCtor.prototype = ctor.prototype;\" +\n        \"  MainWidgetCreator.superClass_ = ctor.prototype;\" +\n        \"  MainWidgetCreator.prototype = new tempCtor();\" +\n        \"}\");\n  }\n",
        "begin_line": 3575,
        "end_line": 3587,
        "comment": "",
        "child_ranges": [
            "(line 3578,col 5)-(line 3586,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 3589,
        "end_line": 3592,
        "comment": "",
        "child_ranges": [
            "(line 3590,col 5)-(line 3591,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3594,
        "end_line": 3601,
        "comment": "",
        "child_ranges": [
            "(line 3595,col 5)-(line 3600,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements3()",
        "snippet": "  public void testGoodImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @constructor \\n @implements {Disposable} */function f() {}\");\n  }\n",
        "begin_line": 3603,
        "end_line": 3606,
        "comment": "",
        "child_ranges": [
            "(line 3604,col 5)-(line 3605,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements4()",
        "snippet": "  public void testGoodImplements4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type {!Function} */\" +\n        \"goog.abstractMethod = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = goog.abstractMethod;\" +\n        \"goog.Disposable.prototype.dispose = goog.abstractMethod;\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @inheritDoc */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() {};\");\n  }\n",
        "begin_line": 3608,
        "end_line": 3619,
        "comment": "",
        "child_ranges": [
            "(line 3609,col 5)-(line 3618,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements5()",
        "snippet": "  public void testGoodImplements5() throws Exception {\n    testTypes(\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = function() {};\" +\n        \"/** @type {Function} */\" +\n        \"goog.Disposable.prototype.dispose = function() {};\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @param {number} key \\n @override */ \" +\n        \"goog.SubDisposable.prototype.dispose = function(key) {};\");\n  }\n",
        "begin_line": 3621,
        "end_line": 3631,
        "comment": "",
        "child_ranges": [
            "(line 3622,col 5)-(line 3630,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements6()",
        "snippet": "  public void testGoodImplements6() throws Exception {\n    testTypes(\n        \"var myNullFunction = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = function() {};\" +\n        \"/** @return {number} */\" +\n        \"goog.Disposable.prototype.dispose = myNullFunction;\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @return {number} \\n @override */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() { return 0; };\");\n  }\n",
        "begin_line": 3633,
        "end_line": 3644,
        "comment": "",
        "child_ranges": [
            "(line 3634,col 5)-(line 3643,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements7()",
        "snippet": "  public void testGoodImplements7() throws Exception {\n    testTypes(\n        \"var myNullFunction = function() {};\" +\n        \"/** @interface */\\n\" +\n        \"goog.Disposable = function() {};\" +\n        \"/** @return {number} */\" +\n        \"goog.Disposable.prototype.dispose = function() {};\" +\n        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n        \"goog.SubDisposable = function() {};\" +\n        \"/** @return {number} \\n @override */ \" +\n        \"goog.SubDisposable.prototype.dispose = function() { return 0; };\");\n  }\n",
        "begin_line": 3646,
        "end_line": 3657,
        "comment": "",
        "child_ranges": [
            "(line 3647,col 5)-(line 3656,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3659,
        "end_line": 3667,
        "comment": "",
        "child_ranges": [
            "(line 3660,col 5)-(line 3666,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor for f\");\n  }\n",
        "begin_line": 3669,
        "end_line": 3673,
        "comment": "",
        "child_ranges": [
            "(line 3670,col 5)-(line 3672,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements3()",
        "snippet": "  public void testBadImplements3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {!Function} */ goog.abstractMethod = function(){};\" +\n        \"/** @interface */ var Disposable = goog.abstractMethod;\" +\n        \"Disposable.prototype.method = goog.abstractMethod;\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\",\n        \"property method on interface Disposable is not implemented by type f\");\n  }\n",
        "begin_line": 3675,
        "end_line": 3683,
        "comment": "",
        "child_ranges": [
            "(line 3676,col 5)-(line 3682,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements4()",
        "snippet": "  public void testBadImplements4() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n        \"f cannot implement this type; an interface can only extend, \" +\n        \"but not implement interfaces\");\n  }\n",
        "begin_line": 3685,
        "end_line": 3690,
        "comment": "",
        "child_ranges": [
            "(line 3686,col 5)-(line 3689,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements5()",
        "snippet": "  public void testBadImplements5() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @type {number} */ Disposable.prototype.bar = function() {};\",\n        \"assignment to property bar of Disposable.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3692,
        "end_line": 3698,
        "comment": "",
        "child_ranges": [
            "(line 3693,col 5)-(line 3697,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements6()",
        "snippet": "  public void testBadImplements6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @interface */function Disposable() {}\\n\" +\n        \"/** @type {function()} */ Disposable.prototype.bar = 3;\",\n        Lists.newArrayList(\n            \"assignment to property bar of Disposable.prototype\\n\" +\n            \"found   : number\\n\" +\n            \"required: function (): ?\",\n            \"interface members can only be empty property declarations, \" +\n            \"empty functions, or goog.abstractMethod\"));\n  }\n",
        "begin_line": 3700,
        "end_line": 3710,
        "comment": "",
        "child_ranges": [
            "(line 3701,col 5)-(line 3709,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3712,
        "end_line": 3718,
        "comment": "",
        "child_ranges": [
            "(line 3713,col 5)-(line 3717,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Bad type annotation. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3720,
        "end_line": 3723,
        "comment": "",
        "child_ranges": [
            "(line 3721,col 5)-(line 3722,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; interfaces can only extend interfaces\");\n  }\n",
        "begin_line": 3725,
        "end_line": 3729,
        "comment": "",
        "child_ranges": [
            "(line 3726,col 5)-(line 3728,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; constructors can only extend constructors\");\n  }\n",
        "begin_line": 3731,
        "end_line": 3735,
        "comment": "",
        "child_ranges": [
            "(line 3732,col 5)-(line 3734,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3737,
        "end_line": 3744,
        "comment": "",
        "child_ranges": [
            "(line 3741,col 5)-(line 3743,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3746,
        "end_line": 3753,
        "comment": "",
        "child_ranges": [
            "(line 3750,col 5)-(line 3752,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3755,
        "end_line": 3759,
        "comment": "",
        "child_ranges": [
            "(line 3756,col 5)-(line 3758,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3761,
        "end_line": 3764,
        "comment": "",
        "child_ranges": [
            "(line 3762,col 5)-(line 3763,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3766,
        "end_line": 3769,
        "comment": "",
        "child_ranges": [
            "(line 3767,col 5)-(line 3768,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 3771,
        "end_line": 3776,
        "comment": "",
        "child_ranges": [
            "(line 3772,col 5)-(line 3775,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3778,
        "end_line": 3786,
        "comment": "",
        "child_ranges": [
            "(line 3779,col 5)-(line 3785,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 3788,
        "end_line": 3793,
        "comment": "",
        "child_ranges": [
            "(line 3789,col 5)-(line 3792,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 3795,
        "end_line": 3801,
        "comment": "",
        "child_ranges": [
            "(line 3796,col 5)-(line 3800,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 3803,
        "end_line": 3811,
        "comment": "",
        "child_ranges": [
            "(line 3804,col 5)-(line 3810,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 3813,
        "end_line": 3822,
        "comment": "",
        "child_ranges": [
            "(line 3814,col 5)-(line 3821,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3824,
        "end_line": 3832,
        "comment": "",
        "child_ranges": [
            "(line 3825,col 5)-(line 3831,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\\n\" +\n        \"new Object().prototype = i.prototype;\");\n  }\n",
        "begin_line": 3834,
        "end_line": 3839,
        "comment": "",
        "child_ranges": [
            "(line 3835,col 5)-(line 3838,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3841,
        "end_line": 3848,
        "comment": "",
        "child_ranges": [
            "(line 3842,col 5)-(line 3847,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3850,
        "end_line": 3859,
        "comment": "",
        "child_ranges": [
            "(line 3851,col 5)-(line 3858,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3861,
        "end_line": 3870,
        "comment": "",
        "child_ranges": [
            "(line 3862,col 5)-(line 3869,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3872,
        "end_line": 3877,
        "comment": "",
        "child_ranges": [
            "(line 3873,col 5)-(line 3876,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3879,
        "end_line": 3888,
        "comment": "",
        "child_ranges": [
            "(line 3880,col 5)-(line 3887,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3890,
        "end_line": 3895,
        "comment": "",
        "child_ranges": [
            "(line 3891,col 5)-(line 3894,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop2()",
        "snippet": "  public void testGetprop2() throws Exception {\n    testTypes(\"var x = null; x.alert();\",\n        \"No properties on this expression\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3897,
        "end_line": 3902,
        "comment": "",
        "child_ranges": [
            "(line 3898,col 5)-(line 3901,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop3()",
        "snippet": "  public void testGetprop3() throws Exception {\n    testTypes(\n        \"/** @constructor */ \" +\n        \"function Foo() { /** @type {?Object} */ this.x = null; }\" +\n        \"Foo.prototype.initX = function() { this.x = {foo: 1}; };\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x == null) { this.initX(); alert(this.x.foo); }\" +\n        \"};\");\n  }\n",
        "begin_line": 3904,
        "end_line": 3912,
        "comment": "",
        "child_ranges": [
            "(line 3905,col 5)-(line 3911,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop4()",
        "snippet": "  public void testGetprop4() throws Exception {\n    testTypes(\"var x = null; x.prop = 3;\",\n        \"No properties on this expression\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3914,
        "end_line": 3919,
        "comment": "",
        "child_ranges": [
            "(line 3915,col 5)-(line 3918,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop1()",
        "snippet": "  public void testSetprop1() throws Exception {\n    // Create property on struct in the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() { this.x = 123; }\");\n  }\n",
        "begin_line": 3921,
        "end_line": 3928,
        "comment": "",
        "child_ranges": [
            "(line 3923,col 5)-(line 3927,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop2()",
        "snippet": "  public void testSetprop2() throws Exception {\n    // Create property on struct outside the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(new Foo()).x = 123;\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 3930,
        "end_line": 3940,
        "comment": "",
        "child_ranges": [
            "(line 3932,col 5)-(line 3939,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop3()",
        "snippet": "  public void testSetprop3() throws Exception {\n    // Create property on struct outside the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(function() { (new Foo()).x = 123; })();\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 3942,
        "end_line": 3952,
        "comment": "",
        "child_ranges": [
            "(line 3944,col 5)-(line 3951,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop4()",
        "snippet": "  public void testSetprop4() throws Exception {\n    // Assign to existing property of struct outside the constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() { this.x = 123; }\\n\" +\n              \"(new Foo()).x = \\\"asdf\\\";\");\n  }\n",
        "begin_line": 3954,
        "end_line": 3962,
        "comment": "",
        "child_ranges": [
            "(line 3956,col 5)-(line 3961,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop5()",
        "snippet": "  public void testSetprop5() throws Exception {\n    // Create a property on union that includes a struct\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(true ? new Foo() : {}).x = 123;\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 3964,
        "end_line": 3974,
        "comment": "",
        "child_ranges": [
            "(line 3966,col 5)-(line 3973,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop6()",
        "snippet": "  public void testSetprop6() throws Exception {\n    // Create property on struct in another constructor\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @param{Foo} f\\n\" +\n              \" */\\n\" +\n              \"function Bar(f) { f.x = 123; }\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 3976,
        "end_line": 3990,
        "comment": "",
        "child_ranges": [
            "(line 3978,col 5)-(line 3989,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop7()",
        "snippet": "  public void testSetprop7() throws Exception {\n    //Bug b/c we require THIS when creating properties on structs for simplicity\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {\\n\" +\n              \"  var t = this;\\n\" +\n              \"  t.x = 123;\\n\" +\n              \"}\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 3992,
        "end_line": 4004,
        "comment": "",
        "child_ranges": [
            "(line 3994,col 5)-(line 4003,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop8()",
        "snippet": "  public void testSetprop8() throws Exception {\n    // Create property on struct using DEC\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(new Foo()).x--;\",\n              new String[] {\n                \"Property x never defined on Foo\",\n                \"Cannot add a property to a struct instance \" +\n                \"after it is constructed.\"\n              });\n  }\n",
        "begin_line": 4006,
        "end_line": 4019,
        "comment": "",
        "child_ranges": [
            "(line 4008,col 5)-(line 4018,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop9()",
        "snippet": "  public void testSetprop9() throws Exception {\n    // Create property on struct using ASSIGN_ADD\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"(new Foo()).x += 123;\",\n              new String[] {\n                \"Property x never defined on Foo\",\n                \"Cannot add a property to a struct instance \" +\n                \"after it is constructed.\"\n              });\n  }\n",
        "begin_line": 4021,
        "end_line": 4034,
        "comment": "",
        "child_ranges": [
            "(line 4023,col 5)-(line 4033,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop10()",
        "snippet": "  public void testSetprop10() throws Exception {\n    // Create property on object literal that is a struct\n    testTypes(\"/** \\n\" +\n              \" * @constructor \\n\" +\n              \" * @struct \\n\" +\n              \" */ \\n\" +\n              \"function Square(side) { \\n\" +\n              \"  this.side = side; \\n\" +\n              \"} \\n\" +\n              \"Square.prototype = /** @struct */ {\\n\" +\n              \"  area: function() { return this.side * this.side; }\\n\" +\n              \"};\\n\" +\n              \"Square.prototype.id = function(x) { return x; };\\n\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 4036,
        "end_line": 4051,
        "comment": "",
        "child_ranges": [
            "(line 4038,col 5)-(line 4050,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSetprop11()",
        "snippet": "  public void testSetprop11() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = new Foo();\\n\" +\n              \"Bar.prototype.someprop = 123;\\n\",\n              \"Cannot add a property to a struct instance \" +\n              \"after it is constructed.\");\n  }\n",
        "begin_line": 4053,
        "end_line": 4064,
        "comment": "",
        "child_ranges": [
            "(line 4054,col 5)-(line 4063,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict1()",
        "snippet": "  public void testGetpropDict1() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1(){ this['prop'] = 123; }\" +\n              \"/** @param{Dict1} x */\" +\n              \"function takesDict(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4066,
        "end_line": 4075,
        "comment": "",
        "child_ranges": [
            "(line 4067,col 5)-(line 4074,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict2()",
        "snippet": "  public void testGetpropDict2() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1(){ this['prop'] = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @extends {Dict1}\\n\" +\n              \" */\" +\n              \"function Dict1kid(){ this['prop'] = 123; }\" +\n              \"/** @param{Dict1kid} x */\" +\n              \"function takesDict(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4077,
        "end_line": 4091,
        "comment": "",
        "child_ranges": [
            "(line 4078,col 5)-(line 4090,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict3()",
        "snippet": "  public void testGetpropDict3() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1() { this['prop'] = 123; }\" +\n              \"/** @constructor */\" +\n              \"function NonDict() { this.prop = 321; }\" +\n              \"/** @param{(NonDict|Dict1)} x */\" +\n              \"function takesDict(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4093,
        "end_line": 4104,
        "comment": "",
        "child_ranges": [
            "(line 4094,col 5)-(line 4103,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict4()",
        "snippet": "  public void testGetpropDict4() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1() { this['prop'] = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1() { this.prop = 123; }\" +\n              \"/** @param{(Struct1|Dict1)} x */\" +\n              \"function takesNothing(x) { return x.prop; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4106,
        "end_line": 4120,
        "comment": "",
        "child_ranges": [
            "(line 4107,col 5)-(line 4119,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict5()",
        "snippet": "  public void testGetpropDict5() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1(){ this.prop = 123; }\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4122,
        "end_line": 4129,
        "comment": "",
        "child_ranges": [
            "(line 4123,col 5)-(line 4128,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict6()",
        "snippet": "  public void testGetpropDict6() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = new Foo();\\n\" +\n              \"Bar.prototype.someprop = 123;\\n\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4131,
        "end_line": 4141,
        "comment": "",
        "child_ranges": [
            "(line 4132,col 5)-(line 4140,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetpropDict7()",
        "snippet": "  public void testGetpropDict7() throws Exception {\n    testTypes(\"(/** @dict */ {x: 123}).x = 321;\",\n              \"Cannot do '.' access on a dict\");\n  }\n",
        "begin_line": 4143,
        "end_line": 4146,
        "comment": "",
        "child_ranges": [
            "(line 4144,col 5)-(line 4145,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct1()",
        "snippet": "  public void testGetelemStruct1() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1(){ this.prop = 123; }\" +\n              \"/** @param{Struct1} x */\" +\n              \"function takesStruct(x) {\" +\n              \"  var z = x;\" +\n              \"  return z['prop'];\" +\n              \"}\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4148,
        "end_line": 4160,
        "comment": "",
        "child_ranges": [
            "(line 4149,col 5)-(line 4159,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct2()",
        "snippet": "  public void testGetelemStruct2() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1(){ this.prop = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @extends {Struct1}\" +\n              \" */\" +\n              \"function Struct1kid(){ this.prop = 123; }\" +\n              \"/** @param{Struct1kid} x */\" +\n              \"function takesStruct2(x) { return x['prop']; }\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4162,
        "end_line": 4176,
        "comment": "",
        "child_ranges": [
            "(line 4163,col 5)-(line 4175,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct3()",
        "snippet": "  public void testGetelemStruct3() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1(){ this.prop = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @extends {Struct1}\\n\" +\n              \" */\" +\n              \"function Struct1kid(){ this.prop = 123; }\" +\n              \"var x = (new Struct1kid())['prop'];\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4178,
        "end_line": 4191,
        "comment": "",
        "child_ranges": [
            "(line 4179,col 5)-(line 4190,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct4()",
        "snippet": "  public void testGetelemStruct4() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1() { this.prop = 123; }\" +\n              \"/** @constructor */\" +\n              \"function NonStruct() { this.prop = 321; }\" +\n              \"/** @param{(NonStruct|Struct1)} x */\" +\n              \"function takesStruct(x) { return x['prop']; }\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4193,
        "end_line": 4204,
        "comment": "",
        "child_ranges": [
            "(line 4194,col 5)-(line 4203,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct5()",
        "snippet": "  public void testGetelemStruct5() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Struct1() { this.prop = 123; }\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" */\" +\n              \"function Dict1() { this['prop'] = 123; }\" +\n              \"/** @param{(Struct1|Dict1)} x */\" +\n              \"function takesNothing(x) { return x['prop']; }\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4206,
        "end_line": 4220,
        "comment": "",
        "child_ranges": [
            "(line 4207,col 5)-(line 4219,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct6()",
        "snippet": "  public void testGetelemStruct6() throws Exception {\n    // By casting Bar to Foo, the illegal bracket access is not detected\n    testTypes(\"/** @interface */ function Foo(){}\\n\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" * @implements {Foo}\\n\" +\n              \" */\" +\n              \"function Bar(){ this.x = 123; }\\n\" +\n              \"var z = /** @type {Foo} */(new Bar)['x'];\");\n  }\n",
        "begin_line": 4222,
        "end_line": 4232,
        "comment": "",
        "child_ranges": [
            "(line 4224,col 5)-(line 4231,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetelemStruct7()",
        "snippet": "  public void testGetelemStruct7() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Foo() {}\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = new Foo();\\n\" +\n              \"Bar.prototype['someprop'] = 123;\\n\",\n              \"Cannot do '[]' access on a struct\");\n  }\n",
        "begin_line": 4234,
        "end_line": 4244,
        "comment": "",
        "child_ranges": [
            "(line 4235,col 5)-(line 4243,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInOnStruct()",
        "snippet": "  public void testInOnStruct() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Foo() {}\\n\" +\n              \"if ('prop' in (new Foo())) {}\",\n              \"Cannot use the IN operator with structs\");\n  }\n",
        "begin_line": 4246,
        "end_line": 4254,
        "comment": "",
        "child_ranges": [
            "(line 4247,col 5)-(line 4253,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForinOnStruct()",
        "snippet": "  public void testForinOnStruct() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\" +\n              \"function Foo() {}\\n\" +\n              \"for (var prop in (new Foo())) {}\",\n              \"Cannot use the IN operator with structs\");\n  }\n",
        "begin_line": 4256,
        "end_line": 4264,
        "comment": "",
        "child_ranges": [
            "(line 4257,col 5)-(line 4263,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 4266,
        "end_line": 4268,
        "comment": "",
        "child_ranges": [
            "(line 4267,col 5)-(line 4267,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4270,
        "end_line": 4275,
        "comment": "",
        "child_ranges": [
            "(line 4271,col 5)-(line 4274,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4277,
        "end_line": 4284,
        "comment": "",
        "child_ranges": [
            "(line 4278,col 5)-(line 4283,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4286,
        "end_line": 4291,
        "comment": "",
        "child_ranges": [
            "(line 4287,col 5)-(line 4290,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4293,
        "end_line": 4298,
        "comment": "",
        "child_ranges": [
            "(line 4294,col 5)-(line 4297,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4300,
        "end_line": 4305,
        "comment": "",
        "child_ranges": [
            "(line 4301,col 5)-(line 4304,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4307,
        "end_line": 4314,
        "comment": "",
        "child_ranges": [
            "(line 4310,col 5)-(line 4313,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess9()",
        "snippet": "  public void testArrayAccess9() throws Exception {\n    testTypes(\"/** @return {?Array} */ function f() { return []; }\" +\n        \"f()[{}]\",\n        \"array access\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4316,
        "end_line": 4322,
        "comment": "",
        "child_ranges": [
            "(line 4317,col 5)-(line 4321,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 4324,
        "end_line": 4330,
        "comment": "",
        "child_ranges": [
            "(line 4325,col 5)-(line 4329,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4332,
        "end_line": 4337,
        "comment": "",
        "child_ranges": [
            "(line 4333,col 5)-(line 4336,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"No properties on this expression\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 4339,
        "end_line": 4346,
        "comment": "",
        "child_ranges": [
            "(line 4342,col 5)-(line 4345,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 4348,
        "end_line": 4350,
        "comment": "",
        "child_ranges": [
            "(line 4349,col 5)-(line 4349,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4352,
        "end_line": 4359,
        "comment": "",
        "child_ranges": [
            "(line 4353,col 5)-(line 4358,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 4361,
        "end_line": 4363,
        "comment": "",
        "child_ranges": [
            "(line 4362,col 5)-(line 4362,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertTypeEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 4365,
        "end_line": 4371,
        "comment": "",
        "child_ranges": [
            "(line 4366,col 5)-(line 4367,col 79)",
            "(line 4369,col 5)-(line 4370,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 4373,
        "end_line": 4375,
        "comment": "",
        "child_ranges": [
            "(line 4374,col 5)-(line 4374,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertTypeEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 4377,
        "end_line": 4381,
        "comment": "",
        "child_ranges": [
            "(line 4378,col 5)-(line 4378,col 65)",
            "(line 4380,col 5)-(line 4380,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertTypeEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 4383,
        "end_line": 4389,
        "comment": "",
        "child_ranges": [
            "(line 4384,col 5)-(line 4385,col 36)",
            "(line 4387,col 5)-(line 4388,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4391,
        "end_line": 4398,
        "comment": "",
        "child_ranges": [
            "(line 4392,col 5)-(line 4397,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 4400,
        "end_line": 4411,
        "comment": "",
        "child_ranges": [
            "(line 4401,col 5)-(line 4410,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 4413,
        "end_line": 4416,
        "comment": "",
        "child_ranges": [
            "(line 4414,col 5)-(line 4415,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 4418,
        "end_line": 4420,
        "comment": "",
        "child_ranges": [
            "(line 4419,col 5)-(line 4419,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 4422,
        "end_line": 4425,
        "comment": "",
        "child_ranges": [
            "(line 4423,col 5)-(line 4424,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4427,
        "end_line": 4432,
        "comment": "",
        "child_ranges": [
            "(line 4428,col 5)-(line 4431,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 4434,
        "end_line": 4439,
        "comment": "",
        "child_ranges": [
            "(line 4435,col 5)-(line 4438,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 4441,
        "end_line": 4451,
        "comment": "",
        "child_ranges": [
            "(line 4442,col 5)-(line 4450,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 4453,
        "end_line": 4456,
        "comment": "",
        "child_ranges": [
            "(line 4455,col 5)-(line 4455,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4458,
        "end_line": 4463,
        "comment": "",
        "child_ranges": [
            "(line 4459,col 5)-(line 4462,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4465,
        "end_line": 4471,
        "comment": "",
        "child_ranges": [
            "(line 4466,col 5)-(line 4470,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4473,
        "end_line": 4479,
        "comment": "",
        "child_ranges": [
            "(line 4474,col 5)-(line 4478,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4481,
        "end_line": 4488,
        "comment": "",
        "child_ranges": [
            "(line 4482,col 5)-(line 4487,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 4490,
        "end_line": 4494,
        "comment": "",
        "child_ranges": [
            "(line 4491,col 5)-(line 4493,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 4496,
        "end_line": 4500,
        "comment": "",
        "child_ranges": [
            "(line 4497,col 5)-(line 4499,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 4502,
        "end_line": 4513,
        "comment": "",
        "child_ranges": [
            "(line 4503,col 5)-(line 4512,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 4515,
        "end_line": 4519,
        "comment": "",
        "child_ranges": [
            "(line 4516,col 5)-(line 4518,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4521,
        "end_line": 4528,
        "comment": "",
        "child_ranges": [
            "(line 4522,col 5)-(line 4527,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 4530,
        "end_line": 4533,
        "comment": "",
        "child_ranges": [
            "(line 4531,col 5)-(line 4532,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 4540,
        "end_line": 4545,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 4541,col 6)-(line 4544,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 4550,
        "end_line": 4555,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 4551,col 6)-(line 4554,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 4557,
        "end_line": 4561,
        "comment": "",
        "child_ranges": [
            "(line 4558,col 5)-(line 4560,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4563,
        "end_line": 4570,
        "comment": "",
        "child_ranges": [
            "(line 4564,col 5)-(line 4569,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4572,
        "end_line": 4578,
        "comment": "",
        "child_ranges": [
            "(line 4573,col 5)-(line 4577,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 4580,
        "end_line": 4584,
        "comment": "",
        "child_ranges": [
            "(line 4581,col 5)-(line 4583,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 4586,
        "end_line": 4590,
        "comment": "",
        "child_ranges": [
            "(line 4587,col 5)-(line 4589,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 4592,
        "end_line": 4596,
        "comment": "",
        "child_ranges": [
            "(line 4593,col 5)-(line 4595,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 4598,
        "end_line": 4604,
        "comment": "",
        "child_ranges": [
            "(line 4603,col 5)-(line 4603,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 4606,
        "end_line": 4608,
        "comment": "",
        "child_ranges": [
            "(line 4607,col 5)-(line 4607,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 4610,
        "end_line": 4616,
        "comment": "",
        "child_ranges": [
            "(line 4611,col 5)-(line 4615,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type null */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 4618,
        "end_line": 4623,
        "comment": "",
        "child_ranges": [
            "(line 4619,col 5)-(line 4622,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type null */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 4625,
        "end_line": 4630,
        "comment": "",
        "child_ranges": [
            "(line 4626,col 5)-(line 4629,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 4632,
        "end_line": 4637,
        "comment": "",
        "child_ranges": [
            "(line 4633,col 5)-(line 4636,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 4639,
        "end_line": 4644,
        "comment": "",
        "child_ranges": [
            "(line 4640,col 5)-(line 4643,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 4646,
        "end_line": 4651,
        "comment": "",
        "child_ranges": [
            "(line 4647,col 5)-(line 4650,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 4653,
        "end_line": 4658,
        "comment": "",
        "child_ranges": [
            "(line 4654,col 5)-(line 4657,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 4660,
        "end_line": 4670,
        "comment": "",
        "child_ranges": [
            "(line 4661,col 5)-(line 4669,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 4672,
        "end_line": 4679,
        "comment": "",
        "child_ranges": [
            "(line 4673,col 5)-(line 4678,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4681,
        "end_line": 4688,
        "comment": "",
        "child_ranges": [
            "(line 4682,col 5)-(line 4687,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4690,
        "end_line": 4697,
        "comment": "",
        "child_ranges": [
            "(line 4691,col 5)-(line 4696,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 4699,
        "end_line": 4703,
        "comment": "",
        "child_ranges": [
            "(line 4700,col 5)-(line 4702,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 4705,
        "end_line": 4709,
        "comment": "",
        "child_ranges": [
            "(line 4706,col 5)-(line 4708,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions5()",
        "snippet": "  public void testHigherOrderFunctions5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"/** @type {function(new:Error,...[number]):Date} */ var f;\" +\n        \"g(new f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4711,
        "end_line": 4719,
        "comment": "",
        "child_ranges": [
            "(line 4712,col 5)-(line 4718,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4721,
        "end_line": 4731,
        "comment": "",
        "child_ranges": [
            "(line 4722,col 5)-(line 4730,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4733,
        "end_line": 4743,
        "comment": "",
        "child_ranges": [
            "(line 4734,col 5)-(line 4742,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4745,
        "end_line": 4755,
        "comment": "",
        "child_ranges": [
            "(line 4746,col 5)-(line 4754,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4757,
        "end_line": 4767,
        "comment": "",
        "child_ranges": [
            "(line 4758,col 5)-(line 4766,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 4769,
        "end_line": 4775,
        "comment": "",
        "child_ranges": [
            "(line 4770,col 5)-(line 4774,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 4777,
        "end_line": 4783,
        "comment": "",
        "child_ranges": [
            "(line 4778,col 5)-(line 4782,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4785,
        "end_line": 4795,
        "comment": "",
        "child_ranges": [
            "(line 4786,col 5)-(line 4794,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4797,
        "end_line": 4809,
        "comment": "",
        "child_ranges": [
            "(line 4798,col 5)-(line 4808,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4811,
        "end_line": 4822,
        "comment": "",
        "child_ranges": [
            "(line 4812,col 5)-(line 4821,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4824,
        "end_line": 4834,
        "comment": "",
        "child_ranges": [
            "(line 4825,col 5)-(line 4833,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4836,
        "end_line": 4843,
        "comment": "",
        "child_ranges": [
            "(line 4837,col 5)-(line 4842,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4845,
        "end_line": 4852,
        "comment": "",
        "child_ranges": [
            "(line 4846,col 5)-(line 4851,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4854,
        "end_line": 4861,
        "comment": "",
        "child_ranges": [
            "(line 4855,col 5)-(line 4860,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4863,
        "end_line": 4870,
        "comment": "",
        "child_ranges": [
            "(line 4864,col 5)-(line 4869,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 4872,
        "end_line": 4879,
        "comment": "",
        "child_ranges": [
            "(line 4873,col 5)-(line 4878,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 4881,
        "end_line": 4888,
        "comment": "",
        "child_ranges": [
            "(line 4882,col 5)-(line 4887,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure7()",
        "snippet": "  public void testClosure7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */ var a = foo();\" +\n        \"/** @type {number} */\" +\n        \"var b = goog.asserts.assert(a);\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4890,
        "end_line": 4899,
        "comment": "",
        "child_ranges": [
            "(line 4891,col 5)-(line 4898,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4901,
        "end_line": 4906,
        "comment": "",
        "child_ranges": [
            "(line 4902,col 5)-(line 4905,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4908,
        "end_line": 4913,
        "comment": "",
        "child_ranges": [
            "(line 4909,col 5)-(line 4912,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4915,
        "end_line": 4920,
        "comment": "",
        "child_ranges": [
            "(line 4916,col 5)-(line 4919,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 4922,
        "end_line": 4927,
        "comment": "",
        "child_ranges": [
            "(line 4923,col 5)-(line 4926,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 4929,
        "end_line": 4932,
        "comment": "",
        "child_ranges": [
            "(line 4930,col 5)-(line 4931,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return {string} */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4934,
        "end_line": 4941,
        "comment": "",
        "child_ranges": [
            "(line 4935,col 5)-(line 4940,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4943,
        "end_line": 4950,
        "comment": "",
        "child_ranges": [
            "(line 4944,col 5)-(line 4949,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 4952,
        "end_line": 4959,
        "comment": "",
        "child_ranges": [
            "(line 4953,col 5)-(line 4958,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn1()",
        "snippet": "  public void testInferredReturn1() throws Exception {\n    testTypes(\n        \"function f() {} /** @param {number} x */ function g(x) {}\" +\n        \"g(f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4961,
        "end_line": 4968,
        "comment": "",
        "child_ranges": [
            "(line 4962,col 5)-(line 4967,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn2()",
        "snippet": "  public void testInferredReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"g((new Foo()).bar());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4970,
        "end_line": 4979,
        "comment": "",
        "child_ranges": [
            "(line 4971,col 5)-(line 4978,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn3()",
        "snippet": "  public void testInferredReturn3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {number} \\n * @override  */ \" +\n        \"SubFoo.prototype.bar = function() { return 3; }; \",\n        \"mismatch of the bar property type and the type of the property \" +\n        \"it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): undefined\\n\" +\n        \"override: function (this:SubFoo): number\");\n  }\n",
        "begin_line": 4981,
        "end_line": 4992,
        "comment": "",
        "child_ranges": [
            "(line 4982,col 5)-(line 4991,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn4()",
        "snippet": "  public void testInferredReturn4() throws Exception {\n    // By design, this throws a warning. if you want global x to be\n    // defined to some other type of function, then you need to declare it\n    // as a greater type.\n    testTypes(\n        \"var x = function() {};\" +\n        \"x = /** @type {function(): number} */ (function() { return 3; });\",\n        \"assignment\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: function (): undefined\");\n  }\n",
        "begin_line": 4994,
        "end_line": 5004,
        "comment": "",
        "child_ranges": [
            "(line 4998,col 5)-(line 5003,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn5()",
        "snippet": "  public void testInferredReturn5() throws Exception {\n    // If x is local, then the function type is not declared.\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  x = /** @type {function(): number} */ (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5006,
        "end_line": 5018,
        "comment": "",
        "child_ranges": [
            "(line 5008,col 5)-(line 5017,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn6()",
        "snippet": "  public void testInferredReturn6() throws Exception {\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  if (f()) \" +\n        \"    x = /** @type {function(): number} */ \" +\n        \"        (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5020,
        "end_line": 5033,
        "comment": "",
        "child_ranges": [
            "(line 5021,col 5)-(line 5032,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn7()",
        "snippet": "  public void testInferredReturn7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"Foo.prototype.bar = function(x) { return 3; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5035,
        "end_line": 5043,
        "comment": "",
        "child_ranges": [
            "(line 5036,col 5)-(line 5042,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn8()",
        "snippet": "  public void testInferredReturn8() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number} x */ SubFoo.prototype.bar = \" +\n        \"    function(x) { return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5045,
        "end_line": 5056,
        "comment": "",
        "child_ranges": [
            "(line 5046,col 5)-(line 5046,col 44)",
            "(line 5047,col 5)-(line 5055,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam1()",
        "snippet": "  public void testInferredParam1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"Foo.prototype.bar = function(y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5058,
        "end_line": 5067,
        "comment": "",
        "child_ranges": [
            "(line 5059,col 5)-(line 5066,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam2()",
        "snippet": "  public void testInferredParam2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5069,
        "end_line": 5081,
        "comment": "",
        "child_ranges": [
            "(line 5070,col 5)-(line 5070,col 44)",
            "(line 5071,col 5)-(line 5080,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam3()",
        "snippet": "  public void testInferredParam3() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5083,
        "end_line": 5095,
        "comment": "",
        "child_ranges": [
            "(line 5084,col 5)-(line 5084,col 44)",
            "(line 5085,col 5)-(line 5094,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam4()",
        "snippet": "  public void testInferredParam4() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5097,
        "end_line": 5109,
        "comment": "",
        "child_ranges": [
            "(line 5098,col 5)-(line 5098,col 44)",
            "(line 5099,col 5)-(line 5108,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam5()",
        "snippet": "  public void testInferredParam5() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {...number} y  */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5111,
        "end_line": 5124,
        "comment": "",
        "child_ranges": [
            "(line 5112,col 5)-(line 5112,col 44)",
            "(line 5113,col 5)-(line 5123,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam6()",
        "snippet": "  public void testInferredParam6() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {number=} y */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5126,
        "end_line": 5139,
        "comment": "",
        "child_ranges": [
            "(line 5127,col 5)-(line 5127,col 44)",
            "(line 5128,col 5)-(line 5138,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams1()",
        "snippet": "  public void testOverriddenParams1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...?} var_args */\" +\n        \"Foo.prototype.bar = function(var_args) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\");\n  }\n",
        "begin_line": 5141,
        "end_line": 5155,
        "comment": "",
        "child_ranges": [
            "(line 5142,col 5)-(line 5154,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams2()",
        "snippet": "  public void testOverriddenParams2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {function(...[?])} */\" +\n        \"Foo.prototype.bar = function(var_args) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {function(number)}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\");\n  }\n",
        "begin_line": 5157,
        "end_line": 5171,
        "comment": "",
        "child_ranges": [
            "(line 5158,col 5)-(line 5170,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams3()",
        "snippet": "  public void testOverriddenParams3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} var_args */\" +\n        \"Foo.prototype.bar = function(var_args) { };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo, ...[number]): undefined\\n\" +\n        \"override: function (this:SubFoo, number): undefined\");\n  }\n",
        "begin_line": 5173,
        "end_line": 5191,
        "comment": "",
        "child_ranges": [
            "(line 5174,col 5)-(line 5190,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams4()",
        "snippet": "  public void testOverriddenParams4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {function(...[number])} */\" +\n        \"Foo.prototype.bar = function(var_args) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {function(number)}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function(x) {};\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (...[number]): ?\\n\" +\n        \"override: function (number): ?\");\n  }\n",
        "begin_line": 5193,
        "end_line": 5211,
        "comment": "",
        "child_ranges": [
            "(line 5194,col 5)-(line 5210,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams5()",
        "snippet": "  public void testOverriddenParams5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */\" +\n        \"Foo.prototype.bar = function(x) { };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function() {};\" +\n        \"(new SubFoo()).bar();\");\n  }\n",
        "begin_line": 5213,
        "end_line": 5227,
        "comment": "",
        "child_ranges": [
            "(line 5214,col 5)-(line 5226,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenParams6()",
        "snippet": "  public void testOverriddenParams6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */\" +\n        \"Foo.prototype.bar = function(x) { };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = function() {};\" +\n        \"(new SubFoo()).bar(true);\",\n        \"actual parameter 1 of SubFoo.prototype.bar \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5229,
        "end_line": 5247,
        "comment": "",
        "child_ranges": [
            "(line 5230,col 5)-(line 5246,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn1()",
        "snippet": "  public void testOverriddenReturn1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {Object} */ Foo.prototype.bar = \" +\n        \"    function() { return {}; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {SubFoo}\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new Foo(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (SubFoo|null)\");\n  }\n",
        "begin_line": 5249,
        "end_line": 5260,
        "comment": "",
        "child_ranges": [
            "(line 5250,col 5)-(line 5259,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn2()",
        "snippet": "  public void testOverriddenReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {SubFoo} */ Foo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {Foo} x\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); }\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): (SubFoo|null)\\n\" +\n        \"override: function (this:SubFoo): (Foo|null)\");\n  }\n",
        "begin_line": 5262,
        "end_line": 5274,
        "comment": "",
        "child_ranges": [
            "(line 5263,col 5)-(line 5273,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5276,
        "end_line": 5284,
        "comment": "",
        "child_ranges": [
            "(line 5277,col 5)-(line 5283,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty1()",
        "snippet": "  public void testOverriddenProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {Object} */\" +\n        \"Foo.prototype.bar = {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {Array}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = [];\");\n  }\n",
        "begin_line": 5286,
        "end_line": 5300,
        "comment": "",
        "child_ranges": [
            "(line 5287,col 5)-(line 5299,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty2()",
        "snippet": "  public void testOverriddenProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {\" +\n        \"  /** @type {Object} */\" +\n        \"  this.bar = {};\" +\n        \"}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/**\\n\" +\n        \" * @type {Array}\\n\" +\n        \" * @override\\n\" +\n        \" */\" +\n        \"SubFoo.prototype.bar = [];\");\n  }\n",
        "begin_line": 5302,
        "end_line": 5317,
        "comment": "",
        "child_ranges": [
            "(line 5303,col 5)-(line 5316,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty3()",
        "snippet": "  public void testOverriddenProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {\" +\n        \"}\" +\n        \"/** @type {string} */ Foo.prototype.data;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @type {string|Object} \\n @override */ \" +\n        \"SubFoo.prototype.data = null;\",\n        \"mismatch of the data property type and the type \" +\n        \"of the property it overrides from superclass Foo\\n\" +\n        \"original: string\\n\" +\n        \"override: (Object|null|string)\");\n  }\n",
        "begin_line": 5319,
        "end_line": 5334,
        "comment": "",
        "child_ranges": [
            "(line 5320,col 5)-(line 5333,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty4()",
        "snippet": "  public void testOverriddenProperty4() throws Exception {\n    // These properties aren't declared, so there should be no warning.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = null;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 3;\");\n  }\n",
        "begin_line": 5336,
        "end_line": 5346,
        "comment": "",
        "child_ranges": [
            "(line 5338,col 5)-(line 5345,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty5()",
        "snippet": "  public void testOverriddenProperty5() throws Exception {\n    // An override should be OK if the superclass property wasn't declared.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = null;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @override */ SubFoo.prototype.bar = 3;\");\n  }\n",
        "begin_line": 5348,
        "end_line": 5358,
        "comment": "",
        "child_ranges": [
            "(line 5350,col 5)-(line 5357,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenProperty6()",
        "snippet": "  public void testOverriddenProperty6() throws Exception {\n    // The override keyword shouldn't be neccessary if the subclass property\n    // is inferred.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {?number} */ Foo.prototype.bar = null;\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 3;\");\n  }\n",
        "begin_line": 5360,
        "end_line": 5371,
        "comment": "",
        "child_ranges": [
            "(line 5363,col 5)-(line 5370,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5373,
        "end_line": 5383,
        "comment": "",
        "child_ranges": [
            "(line 5374,col 5)-(line 5382,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 5385,
        "end_line": 5391,
        "comment": "",
        "child_ranges": [
            "(line 5386,col 5)-(line 5390,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5393,
        "end_line": 5403,
        "comment": "",
        "child_ranges": [
            "(line 5394,col 5)-(line 5402,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return {number}*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5405,
        "end_line": 5410,
        "comment": "",
        "child_ranges": [
            "(line 5406,col 5)-(line 5409,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return {!Date} */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 5412,
        "end_line": 5419,
        "comment": "",
        "child_ranges": [
            "(line 5413,col 5)-(line 5418,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return {number} */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5421,
        "end_line": 5427,
        "comment": "",
        "child_ranges": [
            "(line 5422,col 5)-(line 5426,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return {number} */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5429,
        "end_line": 5438,
        "comment": "",
        "child_ranges": [
            "(line 5430,col 5)-(line 5437,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 5440,
        "end_line": 5445,
        "comment": "",
        "child_ranges": [
            "(line 5442,col 5)-(line 5444,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5447,
        "end_line": 5456,
        "comment": "",
        "child_ranges": [
            "(line 5449,col 5)-(line 5455,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis11()",
        "snippet": "  public void testThis11() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {\" +\n        \"  /** @this {Date} */\" +\n        \"  this.method = function() {\" +\n        \"    f(this);\" +\n        \"  };\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5458,
        "end_line": 5470,
        "comment": "",
        "child_ranges": [
            "(line 5459,col 5)-(line 5469,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis12()",
        "snippet": "  public void testThis12() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {}\" +\n        \"Ctor.prototype['method'] = function() {\" +\n        \"  f(this);\" +\n        \"}\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Ctor\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5472,
        "end_line": 5482,
        "comment": "",
        "child_ranges": [
            "(line 5473,col 5)-(line 5481,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis13()",
        "snippet": "  public void testThis13() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Ctor() {}\" +\n        \"Ctor.prototype = {\" +\n        \"  method: function() {\" +\n        \"    f(this);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Ctor\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5484,
        "end_line": 5496,
        "comment": "",
        "child_ranges": [
            "(line 5485,col 5)-(line 5495,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis14()",
        "snippet": "  public void testThis14() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(this.Object);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : function (new:Object, *=): ?\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5498,
        "end_line": 5505,
        "comment": "",
        "child_ranges": [
            "(line 5499,col 5)-(line 5504,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction1()",
        "snippet": "  public void testThisTypeOfFunction1() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Object)} */ function f() {}\" +\n        \"f();\");\n  }\n",
        "begin_line": 5507,
        "end_line": 5511,
        "comment": "",
        "child_ranges": [
            "(line 5508,col 5)-(line 5510,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction2()",
        "snippet": "  public void testThisTypeOfFunction2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @type {function(this:F)} */ function f() {}\" +\n        \"f();\",\n        \"\\\"function (this:F): ?\\\" must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 5513,
        "end_line": 5519,
        "comment": "",
        "child_ranges": [
            "(line 5514,col 5)-(line 5518,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction3()",
        "snippet": "  public void testThisTypeOfFunction3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.bar = function() {};\" +\n        \"var f = (new F()).bar; f();\",\n        \"\\\"function (this:F): undefined\\\" must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 5521,
        "end_line": 5527,
        "comment": "",
        "child_ranges": [
            "(line 5522,col 5)-(line 5526,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThisTypeOfFunction4()",
        "snippet": "  public void testThisTypeOfFunction4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.moveTo = function(x, y) {};\" +\n        \"F.prototype.lineTo = function(x, y) {};\" +\n        \"function demo() {\" +\n        \"  var path = new F();\" +\n        \"  var points = [[1,1], [2,2]];\" +\n        \"  for (var i = 0; i < points.length; i++) {\" +\n        \"    (i == 0 ? path.moveTo : path.lineTo)(\" +\n        \"       points[i][0], points[i][1]);\" +\n        \"  }\" +\n        \"}\",\n        \"\\\"function (this:F, ?, ?): undefined\\\" \" +\n        \"must be called with a \\\"this\\\" type\");\n  }\n",
        "begin_line": 5529,
        "end_line": 5544,
        "comment": "",
        "child_ranges": [
            "(line 5530,col 5)-(line 5543,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5546,
        "end_line": 5555,
        "comment": "",
        "child_ranges": [
            "(line 5547,col 5)-(line 5554,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    // this.alert = 3 doesn't count as a declaration, so this isn't a warning.\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\");\n  }\n",
        "begin_line": 5557,
        "end_line": 5564,
        "comment": "",
        "child_ranges": [
            "(line 5559,col 5)-(line 5563,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2b()",
        "snippet": "  public void testGlobalThis2b() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"/** @return {number} */ this.alert = function() { return 3; };\" +\n        \"(new Bindow()).alert(this.alert())\",\n        \"actual parameter 1 of Bindow.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5567,
        "end_line": 5577,
        "comment": "",
        "child_ranges": [
            "(line 5568,col 5)-(line 5576,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5579,
        "end_line": 5588,
        "comment": "",
        "child_ranges": [
            "(line 5580,col 5)-(line 5587,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of global this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5590,
        "end_line": 5599,
        "comment": "",
        "child_ranges": [
            "(line 5591,col 5)-(line 5598,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 5601,
        "end_line": 5609,
        "comment": "",
        "child_ranges": [
            "(line 5602,col 5)-(line 5608,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 5611,
        "end_line": 5618,
        "comment": "",
        "child_ranges": [
            "(line 5612,col 5)-(line 5617,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis7()",
        "snippet": "  public void testGlobalThis7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {Window} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\");\n  }\n",
        "begin_line": 5620,
        "end_line": 5626,
        "comment": "",
        "child_ranges": [
            "(line 5621,col 5)-(line 5625,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis8()",
        "snippet": "  public void testGlobalThis8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Window() {}\" +\n        \"/** @param {number} msg */ \" +\n        \"var foo = function(msg) {};\" +\n        \"foo(this);\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : global this\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5628,
        "end_line": 5637,
        "comment": "",
        "child_ranges": [
            "(line 5629,col 5)-(line 5636,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis9()",
        "snippet": "  public void testGlobalThis9() throws Exception {\n    testTypes(\n        // Window is not marked as a constructor, so the\n        // inheritance doesn't happen.\n        \"function Window() {}\" +\n        \"Window.prototype.alert = function() {};\" +\n        \"this.alert();\",\n        \"Property alert never defined on global this\");\n  }\n",
        "begin_line": 5639,
        "end_line": 5647,
        "comment": "",
        "child_ranges": [
            "(line 5640,col 5)-(line 5646,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType1()",
        "snippet": "  public void testControlFlowRestrictsType1() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\" +\n        \"/** @type {String?} */ var a = f();\" +\n        \"/** @type String */ var b = new String('foo');\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 5649,
        "end_line": 5659,
        "comment": "",
        "child_ranges": [
            "(line 5650,col 5)-(line 5658,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 5661,
        "end_line": 5674,
        "comment": "",
        "child_ranges": [
            "(line 5662,col 5)-(line 5673,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 5676,
        "end_line": 5684,
        "comment": "",
        "child_ranges": [
            "(line 5677,col 5)-(line 5683,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 5686,
        "end_line": 5690,
        "comment": "",
        "child_ranges": [
            "(line 5687,col 5)-(line 5689,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 5692,
        "end_line": 5696,
        "comment": "",
        "child_ranges": [
            "(line 5693,col 5)-(line 5695,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5698,
        "end_line": 5705,
        "comment": "",
        "child_ranges": [
            "(line 5699,col 5)-(line 5704,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 5707,
        "end_line": 5714,
        "comment": "",
        "child_ranges": [
            "(line 5708,col 5)-(line 5713,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 5716,
        "end_line": 5720,
        "comment": "",
        "child_ranges": [
            "(line 5717,col 5)-(line 5719,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 5722,
        "end_line": 5727,
        "comment": "",
        "child_ranges": [
            "(line 5723,col 5)-(line 5726,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType10()",
        "snippet": "  public void testControlFlowRestrictsType10() throws Exception {\n    // We should correctly infer that y will be (null|{}) because\n    // the loop wraps around.\n    testTypes(\"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(y);\" +\n        \"    if (y != null) {\" +\n        \"      // y is None the first time it goes through this branch\\n\" +\n        \"    } else {\" +\n        \"      y = {};\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5729,
        "end_line": 5747,
        "comment": "",
        "child_ranges": [
            "(line 5732,col 5)-(line 5746,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType11()",
        "snippet": "  public void testControlFlowRestrictsType11() throws Exception {\n    testTypes(\"/** @param {boolean} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \"  var y = null;\" +\n        \"  if (y != null) {\" +\n        \"    for (var i = 0; i < 10; i++) {\" +\n        \"      f(y);\" +\n        \"    }\" +\n        \"  }\" +\n        \"};\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 5749,
        "end_line": 5762,
        "comment": "",
        "child_ranges": [
            "(line 5750,col 5)-(line 5761,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 5764,
        "end_line": 5768,
        "comment": "",
        "child_ranges": [
            "(line 5765,col 5)-(line 5767,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 5770,
        "end_line": 5774,
        "comment": "",
        "child_ranges": [
            "(line 5771,col 5)-(line 5773,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 5776,
        "end_line": 5780,
        "comment": "",
        "child_ranges": [
            "(line 5777,col 5)-(line 5779,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 5782,
        "end_line": 5786,
        "comment": "",
        "child_ranges": [
            "(line 5783,col 5)-(line 5785,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5788,
        "end_line": 5804,
        "comment": "",
        "child_ranges": [
            "(line 5790,col 5)-(line 5803,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5806,
        "end_line": 5822,
        "comment": "",
        "child_ranges": [
            "(line 5808,col 5)-(line 5821,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 5824,
        "end_line": 5826,
        "comment": "",
        "child_ranges": [
            "(line 5825,col 5)-(line 5825,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 5828,
        "end_line": 5830,
        "comment": "",
        "child_ranges": [
            "(line 5829,col 5)-(line 5829,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 5832,
        "end_line": 5834,
        "comment": "",
        "child_ranges": [
            "(line 5833,col 5)-(line 5833,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 5836,
        "end_line": 5839,
        "comment": "",
        "child_ranges": [
            "(line 5837,col 5)-(line 5838,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 5841,
        "end_line": 5844,
        "comment": "",
        "child_ranges": [
            "(line 5842,col 5)-(line 5843,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 5846,
        "end_line": 5849,
        "comment": "",
        "child_ranges": [
            "(line 5847,col 5)-(line 5848,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 5851,
        "end_line": 5854,
        "comment": "",
        "child_ranges": [
            "(line 5852,col 5)-(line 5853,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 5856,
        "end_line": 5859,
        "comment": "",
        "child_ranges": [
            "(line 5857,col 5)-(line 5858,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck9()",
        "snippet": "  public void testNoTypeCheck9() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" /** @type {string} */ var a = 1\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5861,
        "end_line": 5868,
        "comment": "",
        "child_ranges": [
            "(line 5862,col 5)-(line 5867,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck10()",
        "snippet": "  public void testNoTypeCheck10() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" function h() {/** @type {string} */ var a = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5870,
        "end_line": 5877,
        "comment": "",
        "child_ranges": [
            "(line 5871,col 5)-(line 5876,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck11()",
        "snippet": "  public void testNoTypeCheck11() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"/** @notypecheck */ function h() {/** @type {string} */ var a = 1}\"\n        );\n  }\n",
        "begin_line": 5879,
        "end_line": 5883,
        "comment": "",
        "child_ranges": [
            "(line 5880,col 5)-(line 5882,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck12()",
        "snippet": "  public void testNoTypeCheck12() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1}\"\n        );\n  }\n",
        "begin_line": 5885,
        "end_line": 5889,
        "comment": "",
        "child_ranges": [
            "(line 5886,col 5)-(line 5888,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck13()",
        "snippet": "  public void testNoTypeCheck13() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1;\" +\n        \"/** @type {string}*/ var b = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 5891,
        "end_line": 5899,
        "comment": "",
        "child_ranges": [
            "(line 5892,col 5)-(line 5898,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck14()",
        "snippet": "  public void testNoTypeCheck14() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ function g() { }\" +\n        \"g(1,2,3)\");\n  }\n",
        "begin_line": 5901,
        "end_line": 5904,
        "comment": "",
        "child_ranges": [
            "(line 5902,col 5)-(line 5903,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 5906,
        "end_line": 5912,
        "comment": "",
        "child_ranges": [
            "(line 5907,col 5)-(line 5911,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\",\n             null, false);\n  }\n",
        "begin_line": 5914,
        "end_line": 5923,
        "comment": "",
        "child_ranges": [
            "(line 5915,col 5)-(line 5922,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"});\n  }\n",
        "begin_line": 5925,
        "end_line": 5937,
        "comment": "",
        "child_ranges": [
            "(line 5926,col 5)-(line 5936,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertTypeEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5939,
        "end_line": 5943,
        "comment": "",
        "child_ranges": [
            "(line 5940,col 5)-(line 5940,col 42)",
            "(line 5942,col 5)-(line 5942,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertTypeEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5945,
        "end_line": 5949,
        "comment": "",
        "child_ranges": [
            "(line 5946,col 5)-(line 5946,col 48)",
            "(line 5948,col 5)-(line 5948,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertTypeEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 5951,
        "end_line": 5955,
        "comment": "",
        "child_ranges": [
            "(line 5952,col 5)-(line 5952,col 52)",
            "(line 5954,col 5)-(line 5954,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertTypeEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 5957,
        "end_line": 5961,
        "comment": "",
        "child_ranges": [
            "(line 5958,col 5)-(line 5958,col 54)",
            "(line 5960,col 5)-(line 5960,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertTypeEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 5963,
        "end_line": 5971,
        "comment": "",
        "child_ranges": [
            "(line 5964,col 5)-(line 5964,col 33)",
            "(line 5965,col 5)-(line 5965,col 53)",
            "(line 5966,col 5)-(line 5966,col 24)",
            "(line 5967,col 5)-(line 5967,col 40)",
            "(line 5968,col 5)-(line 5968,col 17)",
            "(line 5970,col 5)-(line 5970,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 5973,
        "end_line": 5978,
        "comment": "",
        "child_ranges": [
            "(line 5974,col 5)-(line 5977,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5980,
        "end_line": 5985,
        "comment": "",
        "child_ranges": [
            "(line 5981,col 5)-(line 5984,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 5987,
        "end_line": 5992,
        "comment": "",
        "child_ranges": [
            "(line 5988,col 5)-(line 5991,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5994,
        "end_line": 5999,
        "comment": "",
        "child_ranges": [
            "(line 5995,col 5)-(line 5998,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null)\");\n  }\n",
        "begin_line": 6001,
        "end_line": 6006,
        "comment": "",
        "child_ranges": [
            "(line 6002,col 5)-(line 6005,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6008,
        "end_line": 6013,
        "comment": "",
        "child_ranges": [
            "(line 6009,col 5)-(line 6012,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE1()",
        "snippet": "  public void testIIFE1() throws Exception {\n    testTypes(\n        \"var namespace = {};\" +\n        \"/** @type {number} */ namespace.prop = 3;\" +\n        \"(function(ns) {\" +\n        \"  ns.prop = true;\" +\n        \"})(namespace);\",\n        \"assignment to property prop of ns\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6015,
        "end_line": 6025,
        "comment": "",
        "child_ranges": [
            "(line 6016,col 5)-(line 6024,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE2()",
        "snippet": "  public void testIIFE2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"(function(ctor) {\" +\n        \"  /** @type {boolean} */ ctor.prop = true;\" +\n        \"})(Foo);\" +\n        \"/** @return {number} */ function f() { return Foo.prop; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6027,
        "end_line": 6037,
        "comment": "",
        "child_ranges": [
            "(line 6028,col 5)-(line 6036,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE3()",
        "snippet": "  public void testIIFE3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"(function(ctor) {\" +\n        \"  /** @type {boolean} */ ctor.prop = true;\" +\n        \"})(Foo);\" +\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Foo.prop);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6039,
        "end_line": 6050,
        "comment": "",
        "child_ranges": [
            "(line 6040,col 5)-(line 6049,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE4()",
        "snippet": "  public void testIIFE4() throws Exception {\n    testTypes(\n        \"/** @const */ var namespace = {};\" +\n        \"(function(ns) {\" +\n        \"  /**\\n\" +\n        \"   * @constructor\\n\" +\n        \"   * @param {number} x\\n\" +\n        \"   */\\n\" +\n        \"   ns.Ctor = function(x) {};\" +\n        \"})(namespace);\" +\n        \"new namespace.Ctor(true);\",\n        \"actual parameter 1 of namespace.Ctor \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6052,
        "end_line": 6067,
        "comment": "",
        "child_ranges": [
            "(line 6053,col 5)-(line 6066,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIIFE5()",
        "snippet": "  public void testIIFE5() throws Exception {\n    // TODO(nicksantos): This behavior is currently incorrect.\n    // To handle this case properly, we'll need to change how we handle\n    // type resolution.\n    testTypes(\n        \"/** @const */ var namespace = {};\" +\n        \"(function(ns) {\" +\n        \"  /**\\n\" +\n        \"   * @constructor\\n\" +\n        \"   */\\n\" +\n        \"   ns.Ctor = function() {};\" +\n        \"   /** @type {boolean} */ ns.Ctor.prototype.bar = true;\" +\n        \"})(namespace);\" +\n        \"/** @param {namespace.Ctor} x\\n\" +\n        \"  * @return {number} */ function f(x) { return x.bar; }\",\n        \"Bad type annotation. Unknown type namespace.Ctor\");\n  }\n",
        "begin_line": 6069,
        "end_line": 6085,
        "comment": "",
        "child_ranges": [
            "(line 6073,col 5)-(line 6084,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNotIIFE1()",
        "snippet": "  public void testNotIIFE1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @param {...?} x */ function g(x) {}\" +\n        \"g(function(y) { f(y); }, true);\");\n  }\n",
        "begin_line": 6087,
        "end_line": 6092,
        "comment": "",
        "child_ranges": [
            "(line 6088,col 5)-(line 6091,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue61()",
        "snippet": "  public void testIssue61() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"(function() {\" +\n        \"  /** @param {string} b */\" +\n        \"  ns.a = function(b) {};\" +\n        \"})();\" +\n        \"function d() {\" +\n        \"  ns.a(123);\" +\n        \"}\",\n        \"actual parameter 1 of ns.a does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6094,
        "end_line": 6107,
        "comment": "",
        "child_ranges": [
            "(line 6095,col 5)-(line 6106,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue61b()",
        "snippet": "  public void testIssue61b() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"(function() {\" +\n        \"  /** @param {string} b */\" +\n        \"  ns.a = function(b) {};\" +\n        \"})();\" +\n        \"ns.a(123);\",\n        \"actual parameter 1 of ns.a does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6109,
        "end_line": 6120,
        "comment": "",
        "child_ranges": [
            "(line 6110,col 5)-(line 6119,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6122,
        "end_line": 6131,
        "comment": "",
        "child_ranges": [
            "(line 6123,col 5)-(line 6130,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 6133,
        "end_line": 6140,
        "comment": "",
        "child_ranges": [
            "(line 6134,col 5)-(line 6139,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 6142,
        "end_line": 6152,
        "comment": "",
        "child_ranges": [
            "(line 6143,col 5)-(line 6151,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue259()",
        "snippet": "  public void testIssue259() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */\" +\n        \"var Clock = function() {\" +\n        \"  /** @constructor */\" +\n        \"  this.Date = function() {};\" +\n        \"  f(new this.Date());\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : this.Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6154,
        "end_line": 6166,
        "comment": "",
        "child_ranges": [
            "(line 6155,col 5)-(line 6165,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue301()",
        "snippet": "  public void testIssue301() throws Exception {\n    testTypes(\n        \"Array.indexOf = function() {};\" +\n        \"var s = 'hello';\" +\n        \"alert(s.toLowerCase.indexOf('1'));\",\n        \"Property indexOf never defined on String.prototype.toLowerCase\");\n  }\n",
        "begin_line": 6168,
        "end_line": 6174,
        "comment": "",
        "child_ranges": [
            "(line 6169,col 5)-(line 6173,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue368()",
        "snippet": "  public void testIssue368() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo(){}\" +\n        \"/**\\n\" +\n        \" * @param {number} one\\n\" +\n        \" * @param {string} two\\n\" +\n        \" */\\n\" +\n        \"Foo.prototype.add = function(one, two) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar(){}\" +\n        \"/** @override */\\n\" +\n        \"Bar.prototype.add = function(ignored) {};\" +\n        \"(new Bar()).add(1, 2);\",\n        \"actual parameter 2 of Bar.prototype.add does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6176,
        "end_line": 6195,
        "comment": "",
        "child_ranges": [
            "(line 6177,col 5)-(line 6194,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue380()",
        "snippet": "  public void testIssue380() throws Exception {\n    testTypes(\n        \"/** @type { function(string): {innerHTML: string} } */\\n\" +\n        \"document.getElementById;\\n\" +\n        \"var list = /** @type {!Array.<string>} */ ['hello', 'you'];\\n\" +\n        \"list.push('?');\\n\" +\n        \"document.getElementById('node').innerHTML = list.toString();\",\n        // Parse warning, but still applied.\n        \"Type annotations are not allowed here. \" +\n        \"Are you missing parentheses?\");\n  }\n",
        "begin_line": 6197,
        "end_line": 6207,
        "comment": "",
        "child_ranges": [
            "(line 6198,col 5)-(line 6206,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue483()",
        "snippet": "  public void testIssue483() throws Exception {\n    testTypes(\n        \"/** @constructor */ function C() {\" +\n        \"  /** @type {?Array} */ this.a = [];\" +\n        \"}\" +\n        \"C.prototype.f = function() {\" +\n        \"  if (this.a.length > 0) {\" +\n        \"    g(this.a);\" +\n        \"  }\" +\n        \"};\" +\n        \"/** @param {number} a */ function g(a) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6209,
        "end_line": 6223,
        "comment": "",
        "child_ranges": [
            "(line 6210,col 5)-(line 6222,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537a()",
        "snippet": "  public void testIssue537a() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz()) this.method(1);\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Foo.prototype.method: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 6225,
        "end_line": 6246,
        "comment": "",
        "child_ranges": [
            "(line 6226,col 5)-(line 6245,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537b()",
        "snippet": "  public void testIssue537b() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz(1)) this.method();\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Bar.prototype.baz: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 6248,
        "end_line": 6269,
        "comment": "",
        "child_ranges": [
            "(line 6249,col 5)-(line 6268,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537c()",
        "snippet": "  public void testIssue537c() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz2()) alert(1);\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Property baz2 never defined on Bar\");\n  }\n",
        "begin_line": 6271,
        "end_line": 6289,
        "comment": "",
        "child_ranges": [
            "(line 6272,col 5)-(line 6288,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue537d()",
        "snippet": "  public void testIssue537d() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {\" +\n        \"  /** @return {Bar} */ x: function() { new Bar(); },\" +\n        \"  /** @return {Foo} */ y: function() { new Bar(); }\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  this.xy = 3;\" +\n        \"}\" +\n        \"/** @return {Bar} */ function f() { return new Bar(); }\" +\n        \"/** @return {Foo} */ function g() { return new Bar(); }\" +\n        \"Bar.prototype = {\" +\n        \"  /** @return {Bar} */ x: function() { new Bar(); },\" +\n        \"  /** @return {Foo} */ y: function() { new Bar(); }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\");\n  }\n",
        "begin_line": 6291,
        "end_line": 6312,
        "comment": "",
        "child_ranges": [
            "(line 6292,col 5)-(line 6311,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue586()",
        "snippet": "  public void testIssue586() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var MyClass = function() {};\" +\n        \"/** @param {boolean} success */\" +\n        \"MyClass.prototype.fn = function(success) {};\" +\n        \"MyClass.prototype.test = function() {\" +\n        \"  this.fn();\" +\n        \"  this.fn = function() {};\" +\n        \"};\",\n        \"Function MyClass.prototype.fn: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 6314,
        "end_line": 6327,
        "comment": "",
        "child_ranges": [
            "(line 6315,col 5)-(line 6326,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue635()",
        "snippet": "  public void testIssue635() throws Exception {\n    // TODO(nicksantos): Make this emit a warning, because of the 'this' type.\n    testTypes(\n        \"/** @constructor */\" +\n        \"function F() {}\" +\n        \"F.prototype.bar = function() { this.baz(); };\" +\n        \"F.prototype.baz = function() {};\" +\n        \"/** @constructor */\" +\n        \"function G() {}\" +\n        \"G.prototype.bar = F.prototype.bar;\");\n  }\n",
        "begin_line": 6329,
        "end_line": 6339,
        "comment": "",
        "child_ranges": [
            "(line 6331,col 5)-(line 6338,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue635b()",
        "snippet": "  public void testIssue635b() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"function F() {}\" +\n        \"/** @constructor */\" +\n        \"function G() {}\" +\n        \"/** @type {function(new:G)} */ var x = F;\",\n        \"initializing variable\\n\" +\n        \"found   : function (new:F): undefined\\n\" +\n        \"required: function (new:G): ?\");\n  }\n",
        "begin_line": 6341,
        "end_line": 6351,
        "comment": "",
        "child_ranges": [
            "(line 6342,col 5)-(line 6350,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue669()",
        "snippet": "  public void testIssue669() throws Exception {\n    testTypes(\n        \"/** @return {{prop1: (Object|undefined)}} */\" +\n         \"function f(a) {\" +\n         \"  var results;\" +\n         \"  if (a) {\" +\n         \"    results = {};\" +\n         \"    results.prop1 = {a: 3};\" +\n         \"  } else {\" +\n         \"    results = {prop2: 3};\" +\n         \"  }\" +\n         \"  return results;\" +\n         \"}\");\n  }\n",
        "begin_line": 6353,
        "end_line": 6366,
        "comment": "",
        "child_ranges": [
            "(line 6354,col 5)-(line 6365,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue688()",
        "snippet": "  public void testIssue688() throws Exception {\n    testTypes(\n        \"/** @const */ var SOME_DEFAULT =\\n\" +\n        \"    /** @type {TwoNumbers} */ ({first: 1, second: 2});\\n\" +\n        \"/**\\n\" +\n        \"* Class defining an interface with two numbers.\\n\" +\n        \"* @interface\\n\" +\n        \"*/\\n\" +\n        \"function TwoNumbers() {}\\n\" +\n        \"/** @type number */\\n\" +\n        \"TwoNumbers.prototype.first;\\n\" +\n        \"/** @type number */\\n\" +\n        \"TwoNumbers.prototype.second;\\n\" +\n        \"/** @return {number} */ function f() { return SOME_DEFAULT; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (TwoNumbers|null)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6368,
        "end_line": 6385,
        "comment": "",
        "child_ranges": [
            "(line 6369,col 5)-(line 6384,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue700()",
        "snippet": "  public void testIssue700() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {{text: string}} opt_data\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function temp1(opt_data) {\\n\" +\n        \"  return opt_data.text;\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"/**\\n\" +\n        \" * @param {{activity: (boolean|number|string|null|Object)}} opt_data\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function temp2(opt_data) {\\n\" +\n        \"  /** @notypecheck */\\n\" +\n        \"  function __inner() {\\n\" +\n        \"    return temp1(opt_data.activity);\\n\" +\n        \"  }\\n\" +\n        \"  return __inner();\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"/**\\n\" +\n        \" * @param {{n: number, text: string, b: boolean}} opt_data\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function temp3(opt_data) {\\n\" +\n        \"  return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"function callee() {\\n\" +\n        \"  var output = temp3({\\n\" +\n        \"    n: 0,\\n\" +\n        \"    text: 'a string',\\n\" +\n        \"    b: true\\n\" +\n        \"  })\\n\" +\n        \"  alert(output);\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"callee();\");\n  }\n",
        "begin_line": 6387,
        "end_line": 6427,
        "comment": "",
        "child_ranges": [
            "(line 6388,col 5)-(line 6426,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue725()",
        "snippet": "  public void testIssue725() throws Exception {\n    testTypes(\n        \"/** @typedef {{name: string}} */ var RecordType1;\" +\n        \"/** @typedef {{name2: string}} */ var RecordType2;\" +\n        \"/** @param {RecordType1} rec */ function f(rec) {\" +\n        \"  alert(rec.name2);\" +\n        \"}\",\n        \"Property name2 never defined on rec\");\n  }\n",
        "begin_line": 6429,
        "end_line": 6437,
        "comment": "",
        "child_ranges": [
            "(line 6430,col 5)-(line 6436,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue726()",
        "snippet": "  public void testIssue726() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @return {!Function} */ \" +\n        \"Foo.prototype.getDeferredBar = function() { \" +\n        \"  var self = this;\" +\n        \"  return function() {\" +\n        \"    self.bar(true);\" +\n        \"  };\" +\n        \"};\",\n        \"actual parameter 1 of Foo.prototype.bar does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6439,
        "end_line": 6453,
        "comment": "",
        "child_ranges": [
            "(line 6440,col 5)-(line 6452,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue765()",
        "snippet": "  public void testIssue765() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var AnotherType = function (parent) {\" +\n        \"    /** @param {string} stringParameter Description... */\" +\n        \"    this.doSomething = function (stringParameter) {};\" +\n        \"};\" +\n        \"/** @constructor */\" +\n        \"var YetAnotherType = function () {\" +\n        \"    this.field = new AnotherType(self);\" +\n        \"    this.testfun=function(stringdata) {\" +\n        \"        this.field.doSomething(null);\" +\n        \"    };\" +\n        \"};\",\n        \"actual parameter 1 of AnotherType.doSomething \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6455,
        "end_line": 6473,
        "comment": "",
        "child_ranges": [
            "(line 6456,col 5)-(line 6472,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue783()",
        "snippet": "  public void testIssue783() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var Type = function () {\" +\n        \"  /** @type {Type} */\" +\n        \"  this.me_ = this;\" +\n        \"};\" +\n        \"Type.prototype.doIt = function() {\" +\n        \"  var me = this.me_;\" +\n        \"  for (var i = 0; i < me.unknownProp; i++) {}\" +\n        \"};\",\n        \"Property unknownProp never defined on Type\");\n  }\n",
        "begin_line": 6475,
        "end_line": 6487,
        "comment": "",
        "child_ranges": [
            "(line 6476,col 5)-(line 6486,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue791()",
        "snippet": "  public void testIssue791() throws Exception {\n    testTypes(\n        \"/** @param {{func: function()}} obj */\" +\n        \"function test1(obj) {}\" +\n        \"var fnStruc1 = {};\" +\n        \"fnStruc1.func = function() {};\" +\n        \"test1(fnStruc1);\");\n  }\n",
        "begin_line": 6489,
        "end_line": 6496,
        "comment": "",
        "child_ranges": [
            "(line 6490,col 5)-(line 6495,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue810()",
        "snippet": "  public void testIssue810() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"var Type = function () {\" +\n        \"};\" +\n        \"Type.prototype.doIt = function(obj) {\" +\n        \"  this.prop = obj.unknownProp;\" +\n        \"};\",\n        \"Property unknownProp never defined on obj\");\n  }\n",
        "begin_line": 6498,
        "end_line": 6507,
        "comment": "",
        "child_ranges": [
            "(line 6499,col 5)-(line 6506,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\",\n        \"Type annotations are not allowed here. Are you missing parentheses?\");\n  }\n",
        "begin_line": 6514,
        "end_line": 6522,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 6515,col 5)-(line 6521,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 6529,
        "end_line": 6534,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 6530,col 5)-(line 6531,col 37)",
            "(line 6532,col 5)-(line 6533,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 6539,
        "end_line": 6542,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 6540,col 5)-(line 6541,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 6547,
        "end_line": 6552,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 6548,col 5)-(line 6551,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to function expressions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 6558,
        "end_line": 6569,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 6560,col 5)-(line 6560,col 72)",
            "(line 6561,col 5)-(line 6561,col 42)",
            "(line 6562,col 5)-(line 6562,col 60)",
            "(line 6565,col 5)-(line 6568,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return {boolean}*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6571,
        "end_line": 6579,
        "comment": "",
        "child_ranges": [
            "(line 6572,col 5)-(line 6578,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 6581,
        "end_line": 6588,
        "comment": "",
        "child_ranges": [
            "(line 6582,col 5)-(line 6587,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 6590,
        "end_line": 6603,
        "comment": "",
        "child_ranges": [
            "(line 6591,col 5)-(line 6602,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 6605,
        "end_line": 6632,
        "comment": "",
        "child_ranges": [
            "(line 6606,col 5)-(line 6631,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 6634,
        "end_line": 6644,
        "comment": "",
        "child_ranges": [
            "(line 6635,col 5)-(line 6643,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\" +\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 6646,
        "end_line": 6656,
        "comment": "",
        "child_ranges": [
            "(line 6647,col 5)-(line 6655,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 6658,
        "end_line": 6664,
        "comment": "",
        "child_ranges": [
            "(line 6659,col 5)-(line 6663,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6666,
        "end_line": 6676,
        "comment": "",
        "child_ranges": [
            "(line 6667,col 5)-(line 6675,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 6678,
        "end_line": 6689,
        "comment": "",
        "child_ranges": [
            "(line 6679,col 5)-(line 6688,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6691,
        "end_line": 6700,
        "comment": "",
        "child_ranges": [
            "(line 6692,col 5)-(line 6699,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 6702,
        "end_line": 6711,
        "comment": "",
        "child_ranges": [
            "(line 6703,col 5)-(line 6710,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors1()",
        "snippet": "  public void testScopedConstructors1() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6713,
        "end_line": 6733,
        "comment": "",
        "child_ranges": [
            "(line 6714,col 5)-(line 6732,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors2()",
        "snippet": "  public void testScopedConstructors2() throws Exception {\n    testTypes(\n        \"/** @param {Function} f */\" +\n        \"function foo1(f) {\" +\n        \"  /** @param {Function} g */\" +\n        \"  f.prototype.bar = function(g) {};\" +\n        \"}\");\n  }\n",
        "begin_line": 6735,
        "end_line": 6742,
        "comment": "",
        "child_ranges": [
            "(line 6736,col 5)-(line 6741,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6744,
        "end_line": 6758,
        "comment": "",
        "child_ranges": [
            "(line 6745,col 5)-(line 6757,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6760,
        "end_line": 6773,
        "comment": "",
        "child_ranges": [
            "(line 6761,col 5)-(line 6772,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 6775,
        "end_line": 6788,
        "comment": "",
        "child_ranges": [
            "(line 6776,col 5)-(line 6787,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 6790,
        "end_line": 6801,
        "comment": "",
        "child_ranges": [
            "(line 6791,col 5)-(line 6800,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference5()",
        "snippet": "  public void testQualifiedNameInference5() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"    /** @param {number} x */ ns.foo = function(x) {}; })();\" +\n        \"(function() { ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6803,
        "end_line": 6812,
        "comment": "",
        "child_ranges": [
            "(line 6804,col 5)-(line 6811,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference6()",
        "snippet": "  public void testQualifiedNameInference6() throws Exception {\n    testTypes(\n        \"/** @const */ var ns = {}; \" +\n        \"/** @param {number} x */ ns.foo = function(x) {};\" +\n        \"(function() { \" +\n        \"    ns.foo = function(x) {};\" +\n        \"    ns.foo(true); \" +\n        \"})();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6814,
        "end_line": 6825,
        "comment": "",
        "child_ranges": [
            "(line 6815,col 5)-(line 6824,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference7()",
        "snippet": "  public void testQualifiedNameInference7() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"  /** @param {ns.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6827,
        "end_line": 6839,
        "comment": "",
        "child_ranges": [
            "(line 6828,col 5)-(line 6838,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference8()",
        "snippet": "  public void testQualifiedNameInference8() throws Exception {\n    // We may need to reshuffle name resolution order so that the @param\n    // type resolves correctly.\n    testClosureTypesMultipleWarnings(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.Foo = function(x) {};\" +\n        \"})();\" +\n        \"/** @param {ns.Foo} x */ function f(x) {}\" +\n        \"f(new ns.Foo(true));\",\n        Lists.newArrayList(\n            \"Bad type annotation. Unknown type ns.Foo\",\n            \"actual parameter 1 of ns.Foo does not match formal parameter\\n\" +\n            \"found   : boolean\\n\" +\n            \"required: number\"));\n  }\n",
        "begin_line": 6841,
        "end_line": 6857,
        "comment": "",
        "child_ranges": [
            "(line 6844,col 5)-(line 6856,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference9()",
        "snippet": "  public void testQualifiedNameInference9() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @constructor \\n * @param {number} x */ \" +\n        \"  ns.ns2.Foo = function(x) {};\" +\n        \"  /** @param {ns.ns2.Foo} x */ function f(x) {}\" +\n        \"  f(new ns.ns2.Foo(true));\" +\n        \"})();\",\n        \"actual parameter 1 of ns.ns2.Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6859,
        "end_line": 6872,
        "comment": "",
        "child_ranges": [
            "(line 6860,col 5)-(line 6871,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference10()",
        "snippet": "  public void testQualifiedNameInference10() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"ns.ns2 = {}; \" +\n        \"(function() { \" +\n        \"  /** @interface */ \" +\n        \"  ns.ns2.Foo = function() {};\" +\n        \"  /** @constructor \\n * @implements {ns.ns2.Foo} */ \" +\n        \"  function F() {}\" +\n        \"  (new F());\" +\n        \"})();\");\n  }\n",
        "begin_line": 6874,
        "end_line": 6885,
        "comment": "",
        "child_ranges": [
            "(line 6875,col 5)-(line 6884,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference11()",
        "snippet": "  public void testQualifiedNameInference11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"function f() {\" +\n        \"  var x = new Foo();\" +\n        \"  x.onload = function() {\" +\n        \"    x.onload = null;\" +\n        \"  };\" +\n        \"}\");\n  }\n",
        "begin_line": 6887,
        "end_line": 6896,
        "comment": "",
        "child_ranges": [
            "(line 6888,col 5)-(line 6895,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference12()",
        "snippet": "  public void testQualifiedNameInference12() throws Exception {\n    // We should be able to tell that the two 'this' properties\n    // are different.\n    testTypes(\n        \"/** @param {function(this:Object)} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {\" +\n        \"  /** @type {number} */ this.bar = 3;\" +\n        \"  f(function() { this.bar = true; });\" +\n        \"}\");\n  }\n",
        "begin_line": 6898,
        "end_line": 6907,
        "comment": "",
        "child_ranges": [
            "(line 6901,col 5)-(line 6906,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference13()",
        "snippet": "  public void testQualifiedNameInference13() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"function f(z) {\" +\n        \"  var x = new Foo();\" +\n        \"  if (z) {\" +\n        \"    x.onload = function() {};\" +\n        \"  } else {\" +\n        \"    x.onload = null;\" +\n        \"  };\" +\n        \"}\");\n  }\n",
        "begin_line": 6909,
        "end_line": 6920,
        "comment": "",
        "child_ranges": [
            "(line 6910,col 5)-(line 6919,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return {number} */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 6922,
        "end_line": 6943,
        "comment": "",
        "child_ranges": [
            "(line 6923,col 5)-(line 6934,col 13)",
            "(line 6935,col 5)-(line 6936,col 39)",
            "(line 6937,col 5)-(line 6937,col 37)",
            "(line 6938,col 5)-(line 6938,col 33)",
            "(line 6940,col 5)-(line 6940,col 55)",
            "(line 6941,col 5)-(line 6941,col 37)",
            "(line 6942,col 5)-(line 6942,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 6945,
        "end_line": 6952,
        "comment": "",
        "child_ranges": [
            "(line 6946,col 5)-(line 6946,col 48)",
            "(line 6948,col 5)-(line 6948,col 51)",
            "(line 6949,col 5)-(line 6949,col 39)",
            "(line 6950,col 5)-(line 6950,col 50)",
            "(line 6951,col 5)-(line 6951,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 6954,
        "end_line": 6963,
        "comment": "",
        "child_ranges": [
            "(line 6955,col 5)-(line 6958,col 24)",
            "(line 6960,col 5)-(line 6960,col 49)",
            "(line 6961,col 5)-(line 6961,col 50)",
            "(line 6962,col 5)-(line 6962,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 6965,
        "end_line": 6967,
        "comment": "",
        "child_ranges": [
            "(line 6966,col 5)-(line 6966,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 6969,
        "end_line": 6971,
        "comment": "",
        "child_ranges": [
            "(line 6970,col 5)-(line 6970,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 6973,
        "end_line": 6975,
        "comment": "",
        "child_ranges": [
            "(line 6974,col 5)-(line 6974,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 6977,
        "end_line": 6979,
        "comment": "",
        "child_ranges": [
            "(line 6978,col 5)-(line 6978,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 6981,
        "end_line": 6983,
        "comment": "",
        "child_ranges": [
            "(line 6982,col 5)-(line 6982,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 6985,
        "end_line": 6994,
        "comment": "",
        "child_ranges": [
            "(line 6986,col 5)-(line 6988,col 26)",
            "(line 6990,col 5)-(line 6990,col 49)",
            "(line 6991,col 5)-(line 6991,col 44)",
            "(line 6992,col 5)-(line 6992,col 48)",
            "(line 6993,col 5)-(line 6993,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 6996,
        "end_line": 7001,
        "comment": "",
        "child_ranges": [
            "(line 6997,col 5)-(line 7000,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 7003,
        "end_line": 7008,
        "comment": "",
        "child_ranges": [
            "(line 7004,col 5)-(line 7007,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 7010,
        "end_line": 7015,
        "comment": "",
        "child_ranges": [
            "(line 7011,col 5)-(line 7014,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 7017,
        "end_line": 7023,
        "comment": "",
        "child_ranges": [
            "(line 7018,col 5)-(line 7022,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 7025,
        "end_line": 7031,
        "comment": "",
        "child_ranges": [
            "(line 7026,col 5)-(line 7030,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTypeEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 7033,
        "end_line": 7038,
        "comment": "",
        "child_ranges": [
            "(line 7034,col 5)-(line 7034,col 75)",
            "(line 7035,col 5)-(line 7035,col 32)",
            "(line 7037,col 5)-(line 7037,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 7040,
        "end_line": 7048,
        "comment": "",
        "child_ranges": [
            "(line 7041,col 5)-(line 7043,col 33)",
            "(line 7044,col 5)-(line 7044,col 32)",
            "(line 7046,col 5)-(line 7046,col 50)",
            "(line 7047,col 5)-(line 7047,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 7050,
        "end_line": 7058,
        "comment": "",
        "child_ranges": [
            "(line 7051,col 5)-(line 7053,col 33)",
            "(line 7054,col 5)-(line 7054,col 32)",
            "(line 7056,col 5)-(line 7056,col 50)",
            "(line 7057,col 5)-(line 7057,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 7060,
        "end_line": 7069,
        "comment": "",
        "child_ranges": [
            "(line 7061,col 5)-(line 7064,col 33)",
            "(line 7065,col 5)-(line 7065,col 32)",
            "(line 7067,col 5)-(line 7067,col 50)",
            "(line 7068,col 5)-(line 7068,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7071,
        "end_line": 7082,
        "comment": "",
        "child_ranges": [
            "(line 7072,col 5)-(line 7081,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew17()",
        "snippet": "  public void testNew17() throws Exception {\n    testTypes(\"var goog = {}; goog.x = 3; new goog.x\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 7084,
        "end_line": 7087,
        "comment": "",
        "child_ranges": [
            "(line 7085,col 5)-(line 7086,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew18()",
        "snippet": "  public void testNew18() throws Exception {\n    testTypes(\"var goog = {};\" +\n              \"/** @constructor */ goog.F = function() {};\" +\n              \"/** @constructor */ goog.G = goog.F;\");\n  }\n",
        "begin_line": 7089,
        "end_line": 7093,
        "comment": "",
        "child_ranges": [
            "(line 7090,col 5)-(line 7092,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertTypeEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 7095,
        "end_line": 7097,
        "comment": "",
        "child_ranges": [
            "(line 7096,col 5)-(line 7096,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertTypeEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 7099,
        "end_line": 7101,
        "comment": "",
        "child_ranges": [
            "(line 7100,col 5)-(line 7100,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertTypeEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 7103,
        "end_line": 7105,
        "comment": "",
        "child_ranges": [
            "(line 7104,col 5)-(line 7104,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertTypeEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 7107,
        "end_line": 7109,
        "comment": "",
        "child_ranges": [
            "(line 7108,col 5)-(line 7108,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertTypeEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 7111,
        "end_line": 7113,
        "comment": "",
        "child_ranges": [
            "(line 7112,col 5)-(line 7112,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n    parent.setInputId(new InputId(\"code\"));\n\n    Node externs = new Node(Token.SCRIPT);\n    externs.setInputId(new InputId(\"externs\"));\n\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 7118,
        "end_line": 7131,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 7119,col 5)-(line 7119,col 49)",
            "(line 7120,col 5)-(line 7120,col 47)",
            "(line 7121,col 5)-(line 7121,col 43)",
            "(line 7123,col 5)-(line 7123,col 42)",
            "(line 7124,col 5)-(line 7124,col 47)",
            "(line 7126,col 5)-(line 7126,col 66)",
            "(line 7127,col 5)-(line 7127,col 46)",
            "(line 7129,col 5)-(line 7129,col 52)",
            "(line 7130,col 5)-(line 7130,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 7133,
        "end_line": 7136,
        "comment": "",
        "child_ranges": [
            "(line 7134,col 5)-(line 7135,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 7138,
        "end_line": 7141,
        "comment": "",
        "child_ranges": [
            "(line 7139,col 5)-(line 7140,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 7143,
        "end_line": 7146,
        "comment": "",
        "child_ranges": [
            "(line 7144,col 5)-(line 7145,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 7148,
        "end_line": 7151,
        "comment": "",
        "child_ranges": [
            "(line 7149,col 5)-(line 7150,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 7153,
        "end_line": 7156,
        "comment": "",
        "child_ranges": [
            "(line 7154,col 5)-(line 7155,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 7158,
        "end_line": 7163,
        "comment": "",
        "child_ranges": [
            "(line 7159,col 5)-(line 7162,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 7165,
        "end_line": 7167,
        "comment": "",
        "child_ranges": [
            "(line 7166,col 5)-(line 7166,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 7169,
        "end_line": 7171,
        "comment": "",
        "child_ranges": [
            "(line 7170,col 5)-(line 7170,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 7173,
        "end_line": 7178,
        "comment": "",
        "child_ranges": [
            "(line 7174,col 5)-(line 7177,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 7180,
        "end_line": 7182,
        "comment": "",
        "child_ranges": [
            "(line 7181,col 5)-(line 7181,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 7184,
        "end_line": 7189,
        "comment": "",
        "child_ranges": [
            "(line 7185,col 5)-(line 7188,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Bad type annotation. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 7191,
        "end_line": 7199,
        "comment": "",
        "child_ranges": [
            "(line 7194,col 5)-(line 7198,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 7201,
        "end_line": 7206,
        "comment": "",
        "child_ranges": [
            "(line 7202,col 5)-(line 7205,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 7208,
        "end_line": 7213,
        "comment": "",
        "child_ranges": [
            "(line 7209,col 5)-(line 7212,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 7215,
        "end_line": 7221,
        "comment": "",
        "child_ranges": [
            "(line 7216,col 5)-(line 7220,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 7223,
        "end_line": 7229,
        "comment": "",
        "child_ranges": [
            "(line 7224,col 5)-(line 7228,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 7231,
        "end_line": 7235,
        "comment": "",
        "child_ranges": [
            "(line 7232,col 5)-(line 7234,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 7237,
        "end_line": 7246,
        "comment": "",
        "child_ranges": [
            "(line 7238,col 5)-(line 7245,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 7248,
        "end_line": 7250,
        "comment": "",
        "child_ranges": [
            "(line 7249,col 5)-(line 7249,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 7252,
        "end_line": 7254,
        "comment": "",
        "child_ranges": [
            "(line 7253,col 5)-(line 7253,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 7256,
        "end_line": 7260,
        "comment": "",
        "child_ranges": [
            "(line 7257,col 5)-(line 7259,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7262,
        "end_line": 7269,
        "comment": "",
        "child_ranges": [
            "(line 7263,col 5)-(line 7268,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 7271,
        "end_line": 7276,
        "comment": "",
        "child_ranges": [
            "(line 7272,col 5)-(line 7275,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7278,
        "end_line": 7287,
        "comment": "",
        "child_ranges": [
            "(line 7279,col 5)-(line 7286,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 7289,
        "end_line": 7293,
        "comment": "",
        "child_ranges": [
            "(line 7290,col 5)-(line 7292,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 7295,
        "end_line": 7299,
        "comment": "",
        "child_ranges": [
            "(line 7296,col 5)-(line 7298,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 7301,
        "end_line": 7307,
        "comment": "",
        "child_ranges": [
            "(line 7302,col 5)-(line 7306,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 7309,
        "end_line": 7315,
        "comment": "",
        "child_ranges": [
            "(line 7310,col 5)-(line 7314,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind1()",
        "snippet": "  public void testFunctionBind1() throws Exception {\n    testTypes(\n        \"/** @type {function(string, number): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f.bind(null, 3);\",\n        \"actual parameter 2 of f.bind does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7317,
        "end_line": 7325,
        "comment": "",
        "child_ranges": [
            "(line 7318,col 5)-(line 7324,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind2()",
        "snippet": "  public void testFunctionBind2() throws Exception {\n    testTypes(\n        \"/** @type {function(number): boolean} */\" +\n        \"function f(x) { return true; }\" +\n        \"f(f.bind(null, 3)());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7327,
        "end_line": 7335,
        "comment": "",
        "child_ranges": [
            "(line 7328,col 5)-(line 7334,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind3()",
        "snippet": "  public void testFunctionBind3() throws Exception {\n    testTypes(\n        \"/** @type {function(number, string): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f.bind(null, 3)(true);\",\n        \"actual parameter 1 of function does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7337,
        "end_line": 7345,
        "comment": "",
        "child_ranges": [
            "(line 7338,col 5)-(line 7344,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind4()",
        "snippet": "  public void testFunctionBind4() throws Exception {\n    testTypes(\n        \"/** @param {...number} x */\" +\n        \"function f(x) {}\" +\n        \"f.bind(null, 3, 3, 3)(true);\",\n        \"actual parameter 1 of function does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 7347,
        "end_line": 7355,
        "comment": "",
        "child_ranges": [
            "(line 7348,col 5)-(line 7354,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionBind5()",
        "snippet": "  public void testFunctionBind5() throws Exception {\n    testTypes(\n        \"/** @param {...number} x */\" +\n        \"function f(x) {}\" +\n        \"f.bind(null, true)(3, 3, 3);\",\n        \"actual parameter 2 of f.bind does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 7357,
        "end_line": 7365,
        "comment": "",
        "child_ranges": [
            "(line 7358,col 5)-(line 7364,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoogBind1()",
        "snippet": "  public void testGoogBind1() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.bind = function(var_args) {};\" +\n        \"/** @type {function(number): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f(goog.bind(f, null, 'x')());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7367,
        "end_line": 7376,
        "comment": "",
        "child_ranges": [
            "(line 7368,col 5)-(line 7375,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoogBind2()",
        "snippet": "  public void testGoogBind2() throws Exception {\n    // TODO(nicksantos): We do not currently type-check the arguments\n    // of the goog.bind.\n    testClosureTypes(\n        \"var goog = {}; goog.bind = function(var_args) {};\" +\n        \"/** @type {function(boolean): boolean} */\" +\n        \"function f(x, y) { return true; }\" +\n        \"f(goog.bind(f, null, 'x')());\",\n        null);\n  }\n",
        "begin_line": 7378,
        "end_line": 7387,
        "comment": "",
        "child_ranges": [
            "(line 7381,col 5)-(line 7386,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 7389,
        "end_line": 7394,
        "comment": "",
        "child_ranges": [
            "(line 7391,col 5)-(line 7393,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 7396,
        "end_line": 7404,
        "comment": "",
        "child_ranges": [
            "(line 7398,col 5)-(line 7403,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 7406,
        "end_line": 7412,
        "comment": "",
        "child_ranges": [
            "(line 7408,col 5)-(line 7411,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 7414,
        "end_line": 7422,
        "comment": "",
        "child_ranges": [
            "(line 7416,col 5)-(line 7421,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 7424,
        "end_line": 7436,
        "comment": "",
        "child_ranges": [
            "(line 7426,col 5)-(line 7435,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7438,
        "end_line": 7441,
        "comment": "",
        "child_ranges": [
            "(line 7439,col 5)-(line 7440,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7443,
        "end_line": 7446,
        "comment": "",
        "child_ranges": [
            "(line 7444,col 5)-(line 7445,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7448,
        "end_line": 7452,
        "comment": "",
        "child_ranges": [
            "(line 7449,col 5)-(line 7451,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type foo\");\n  }\n",
        "begin_line": 7454,
        "end_line": 7458,
        "comment": "",
        "child_ranges": [
            "(line 7455,col 5)-(line 7457,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 7460,
        "end_line": 7464,
        "comment": "",
        "child_ranges": [
            "(line 7461,col 5)-(line 7463,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 7466,
        "end_line": 7470,
        "comment": "",
        "child_ranges": [
            "(line 7467,col 5)-(line 7469,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Bad type annotation. Unknown type goog.foo\");\n  }\n",
        "begin_line": 7472,
        "end_line": 7480,
        "comment": "",
        "child_ranges": [
            "(line 7475,col 5)-(line 7479,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 7482,
        "end_line": 7489,
        "comment": "",
        "child_ranges": [
            "(line 7485,col 5)-(line 7488,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a run-time cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {number} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 7491,
        "end_line": 7507,
        "comment": "",
        "child_ranges": [
            "(line 7499,col 5)-(line 7506,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast16()",
        "snippet": "  public void testCast16() throws Exception {\n    // A type cast should not invalidate the checks on the members\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ (\" +\n          \"  {/** @type {string} */ foo: 3});\" +\n        \"}\",\n        \"assignment to property foo of Object\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7509,
        "end_line": 7519,
        "comment": "",
        "child_ranges": [
            "(line 7511,col 5)-(line 7518,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast17()",
        "snippet": "  public void testCast17() throws Exception {\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ (y)\");\n\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ y)\");\n\n    // Mostly verifying that rhino actually understands these JsDocs.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n  }\n",
        "begin_line": 7521,
        "end_line": 7532,
        "comment": "",
        "child_ranges": [
            "(line 7523,col 5)-(line 7524,col 61)",
            "(line 7526,col 5)-(line 7527,col 61)",
            "(line 7530,col 5)-(line 7531,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast18()",
        "snippet": "  public void testCast18() throws Exception {\n    // Mostly verifying that legacy annotations are applied\n    // despite the parser warning.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\",\n        \"Type annotations are not allowed here. \" +\n        \"Are you missing parentheses?\");\n\n    // Not really encourage because of possible ambiguity but it works.\n    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\",\n        \"Type annotations are not allowed here. \" +\n        \"Are you missing parentheses?\");\n  }\n",
        "begin_line": 7534,
        "end_line": 7547,
        "comment": "",
        "child_ranges": [
            "(line 7537,col 5)-(line 7540,col 40)",
            "(line 7543,col 5)-(line 7546,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/** @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 7549,
        "end_line": 7566,
        "comment": "",
        "child_ranges": [
            "(line 7550,col 5)-(line 7565,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7568,
        "end_line": 7575,
        "comment": "",
        "child_ranges": [
            "(line 7569,col 5)-(line 7574,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7577,
        "end_line": 7584,
        "comment": "",
        "child_ranges": [
            "(line 7578,col 5)-(line 7583,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7586,
        "end_line": 7593,
        "comment": "",
        "child_ranges": [
            "(line 7587,col 5)-(line 7592,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 7595,
        "end_line": 7602,
        "comment": "",
        "child_ranges": [
            "(line 7596,col 5)-(line 7601,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (new:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 7604,
        "end_line": 7610,
        "comment": "",
        "child_ranges": [
            "(line 7605,col 5)-(line 7609,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 7612,
        "end_line": 7614,
        "comment": "",
        "child_ranges": [
            "(line 7613,col 5)-(line 7613,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof2()",
        "snippet": "  public void testTypeof2() throws Exception {\n    testTypes(\"function f(){ if (typeof 123 == 'numbr') return 321; }\",\n              \"unknown type: numbr\");\n  }\n",
        "begin_line": 7616,
        "end_line": 7619,
        "comment": "",
        "child_ranges": [
            "(line 7617,col 5)-(line 7618,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof3()",
        "snippet": "  public void testTypeof3() throws Exception {\n    testTypes(\"function f() {\" +\n              \"return (typeof 123 == 'number' ||\" +\n              \"typeof 123 == 'string' ||\" +\n              \"typeof 123 == 'boolean' ||\" +\n              \"typeof 123 == 'undefined' ||\" +\n              \"typeof 123 == 'function' ||\" +\n              \"typeof 123 == 'object' ||\" +\n              \"typeof 123 == 'unknown'); }\");\n  }\n",
        "begin_line": 7621,
        "end_line": 7630,
        "comment": "",
        "child_ranges": [
            "(line 7622,col 5)-(line 7629,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 7632,
        "end_line": 7638,
        "comment": "",
        "child_ranges": [
            "(line 7633,col 5)-(line 7637,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 7640,
        "end_line": 7646,
        "comment": "",
        "child_ranges": [
            "(line 7641,col 5)-(line 7645,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 7648,
        "end_line": 7656,
        "comment": "",
        "child_ranges": [
            "(line 7651,col 5)-(line 7655,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 7658,
        "end_line": 7667,
        "comment": "",
        "child_ranges": [
            "(line 7659,col 5)-(line 7666,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 7669,
        "end_line": 7672,
        "comment": "",
        "child_ranges": [
            "(line 7670,col 5)-(line 7671,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 7674,
        "end_line": 7681,
        "comment": "",
        "child_ranges": [
            "(line 7675,col 5)-(line 7680,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 7683,
        "end_line": 7691,
        "comment": "",
        "child_ranges": [
            "(line 7684,col 5)-(line 7685,col 73)",
            "(line 7687,col 5)-(line 7687,col 48)",
            "(line 7688,col 5)-(line 7688,col 45)",
            "(line 7689,col 5)-(line 7689,col 45)",
            "(line 7690,col 5)-(line 7690,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType8()",
        "snippet": "  public void testConstructorType8() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = {x: 0, y: 0};\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 7693,
        "end_line": 7709,
        "comment": "",
        "child_ranges": [
            "(line 7694,col 5)-(line 7708,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType9()",
        "snippet": "  public void testConstructorType9() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"ns.create = function() { return function() {}; };\" +\n        \"ns.extend = function(x) { return x; };\" +\n        \"/** @constructor */ ns.Foo = ns.create();\" +\n        \"ns.Foo.prototype = ns.extend({x: 0, y: 0});\" +\n        \"/**\\n\" +\n        \" * @param {ns.Foo} foo\\n\" +\n        \" * @return {string}\\n\" +\n        \" */\\n\" +\n        \"function f(foo) {\" +\n        \"  return foo.x;\" +\n        \"}\");\n  }\n",
        "begin_line": 7711,
        "end_line": 7725,
        "comment": "",
        "child_ranges": [
            "(line 7712,col 5)-(line 7724,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType10()",
        "snippet": "  public void testConstructorType10() throws Exception {\n    testTypes(\"/** @constructor */\" +\n              \"function NonStr() {}\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" * @extends{NonStr}\\n\" +\n              \" */\" +\n              \"function NonStrKid() {}\",\n              \"NonStrKid cannot extend this type; \" +\n              \"structs can only extend structs\");\n  }\n",
        "begin_line": 7727,
        "end_line": 7738,
        "comment": "",
        "child_ranges": [
            "(line 7728,col 5)-(line 7737,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType11()",
        "snippet": "  public void testConstructorType11() throws Exception {\n    testTypes(\"/** @constructor */\" +\n              \"function NonDict() {}\" +\n              \"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @dict\\n\" +\n              \" * @extends{NonDict}\\n\" +\n              \" */\" +\n              \"function NonDictKid() {}\",\n              \"NonDictKid cannot extend this type; \" +\n              \"dicts can only extend dicts\");\n  }\n",
        "begin_line": 7740,
        "end_line": 7751,
        "comment": "",
        "child_ranges": [
            "(line 7741,col 5)-(line 7750,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType12()",
        "snippet": "  public void testConstructorType12() throws Exception {\n    testTypes(\"/**\\n\" +\n              \" * @constructor\\n\" +\n              \" * @struct\\n\" +\n              \" */\\n\" +\n              \"function Bar() {}\\n\" +\n              \"Bar.prototype = {};\\n\",\n              \"Bar cannot extend this type; \" +\n              \"structs can only extend structs\");\n  }\n",
        "begin_line": 7753,
        "end_line": 7762,
        "comment": "",
        "child_ranges": [
            "(line 7754,col 5)-(line 7761,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadStruct()",
        "snippet": "  public void testBadStruct() throws Exception {\n    testTypes(\"/** @struct */function Struct1() {}\",\n              \"@struct used without @constructor for Struct1\");\n  }\n",
        "begin_line": 7764,
        "end_line": 7767,
        "comment": "",
        "child_ranges": [
            "(line 7765,col 5)-(line 7766,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadDict()",
        "snippet": "  public void testBadDict() throws Exception {\n    testTypes(\"/** @dict */function Dict1() {}\",\n              \"@dict used without @constructor for Dict1\");\n  }\n",
        "begin_line": 7769,
        "end_line": 7772,
        "comment": "",
        "child_ranges": [
            "(line 7770,col 5)-(line 7771,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousPrototype1()",
        "snippet": "  public void testAnonymousPrototype1() throws Exception {\n    testTypes(\n        \"var ns = {};\" +\n        \"/** @constructor */ ns.Foo = function() {\" +\n        \"  this.bar(3, 5);\" +\n        \"};\" +\n        \"ns.Foo.prototype = {\" +\n        \"  bar: function(x) {}\" +\n        \"};\",\n        \"Function ns.Foo.prototype.bar: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) and no more \" +\n        \"than 1 argument(s).\");\n  }\n",
        "begin_line": 7774,
        "end_line": 7786,
        "comment": "",
        "child_ranges": [
            "(line 7775,col 5)-(line 7785,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousPrototype2()",
        "snippet": "  public void testAnonymousPrototype2() throws Exception {\n    testTypes(\n        \"/** @interface */ var Foo = function() {};\" +\n        \"Foo.prototype = {\" +\n        \"  foo: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {Foo}\\n\" +\n        \" */ var Bar = function() {};\",\n        \"property foo on interface Foo is not implemented by type Bar\");\n  }\n",
        "begin_line": 7788,
        "end_line": 7799,
        "comment": "",
        "child_ranges": [
            "(line 7789,col 5)-(line 7798,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 7801,
        "end_line": 7805,
        "comment": "",
        "child_ranges": [
            "(line 7802,col 5)-(line 7804,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 7807,
        "end_line": 7811,
        "comment": "",
        "child_ranges": [
            "(line 7808,col 5)-(line 7810,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() { return {}; }\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 7813,
        "end_line": 7817,
        "comment": "",
        "child_ranges": [
            "(line 7814,col 5)-(line 7816,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 7819,
        "end_line": 7825,
        "comment": "",
        "child_ranges": [
            "(line 7820,col 5)-(line 7824,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 7827,
        "end_line": 7830,
        "comment": "",
        "child_ranges": [
            "(line 7828,col 5)-(line 7829,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 7832,
        "end_line": 7835,
        "comment": "",
        "child_ranges": [
            "(line 7833,col 5)-(line 7834,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 7837,
        "end_line": 7842,
        "comment": "",
        "child_ranges": [
            "(line 7838,col 5)-(line 7841,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 7844,
        "end_line": 7847,
        "comment": "",
        "child_ranges": [
            "(line 7845,col 5)-(line 7846,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 7849,
        "end_line": 7852,
        "comment": "",
        "child_ranges": [
            "(line 7850,col 5)-(line 7851,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 7854,
        "end_line": 7857,
        "comment": "",
        "child_ranges": [
            "(line 7855,col 5)-(line 7856,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 7859,
        "end_line": 7866,
        "comment": "",
        "child_ranges": [
            "(line 7860,col 5)-(line 7865,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 7868,
        "end_line": 7875,
        "comment": "",
        "child_ranges": [
            "(line 7869,col 5)-(line 7874,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return {Array} */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 7877,
        "end_line": 7879,
        "comment": "",
        "child_ranges": [
            "(line 7878,col 5)-(line 7878,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */(new f()); }\");\n  }\n",
        "begin_line": 7881,
        "end_line": 7883,
        "comment": "",
        "child_ranges": [
            "(line 7882,col 5)-(line 7882,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 7885,
        "end_line": 7887,
        "comment": "",
        "child_ranges": [
            "(line 7886,col 5)-(line 7886,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 7889,
        "end_line": 7900,
        "comment": "",
        "child_ranges": [
            "(line 7890,col 5)-(line 7899,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 7902,
        "end_line": 7915,
        "comment": "",
        "child_ranges": [
            "(line 7903,col 5)-(line 7907,col 57)",
            "(line 7909,col 5)-(line 7909,col 55)",
            "(line 7910,col 5)-(line 7910,col 46)",
            "(line 7912,col 5)-(line 7912,col 64)",
            "(line 7913,col 5)-(line 7913,col 42)",
            "(line 7914,col 5)-(line 7914,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top-level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertTypeEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 7917,
        "end_line": 7980,
        "comment": "",
        "child_ranges": [
            "(line 7918,col 5)-(line 7921,col 26)",
            "(line 7923,col 5)-(line 7923,col 55)",
            "(line 7926,col 5)-(line 7926,col 60)",
            "(line 7927,col 5)-(line 7927,col 52)",
            "(line 7928,col 5)-(line 7929,col 57)",
            "(line 7930,col 5)-(line 7931,col 57)",
            "(line 7934,col 5)-(line 7934,col 42)",
            "(line 7935,col 5)-(line 7935,col 47)",
            "(line 7936,col 5)-(line 7936,col 62)",
            "(line 7937,col 5)-(line 7937,col 51)",
            "(line 7940,col 5)-(line 7940,col 46)",
            "(line 7943,col 5)-(line 7943,col 73)",
            "(line 7944,col 5)-(line 7944,col 55)",
            "(line 7945,col 5)-(line 7945,col 66)",
            "(line 7946,col 5)-(line 7946,col 73)",
            "(line 7947,col 5)-(line 7947,col 58)",
            "(line 7950,col 5)-(line 7950,col 53)",
            "(line 7953,col 5)-(line 7953,col 77)",
            "(line 7954,col 5)-(line 7954,col 50)",
            "(line 7958,col 5)-(line 7959,col 57)",
            "(line 7960,col 5)-(line 7960,col 55)",
            "(line 7961,col 5)-(line 7961,col 66)",
            "(line 7962,col 5)-(line 7962,col 73)",
            "(line 7963,col 5)-(line 7963,col 58)",
            "(line 7966,col 5)-(line 7966,col 53)",
            "(line 7970,col 5)-(line 7970,col 57)",
            "(line 7971,col 5)-(line 7972,col 51)",
            "(line 7973,col 5)-(line 7973,col 76)",
            "(line 7974,col 5)-(line 7975,col 54)",
            "(line 7976,col 5)-(line 7977,col 54)",
            "(line 7978,col 5)-(line 7979,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 7982,
        "end_line": 7992,
        "comment": "",
        "child_ranges": [
            "(line 7984,col 5)-(line 7986,col 30)",
            "(line 7988,col 5)-(line 7988,col 55)",
            "(line 7989,col 5)-(line 7990,col 43)",
            "(line 7991,col 5)-(line 7991,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 7994,
        "end_line": 8002,
        "comment": "",
        "child_ranges": [
            "(line 7996,col 5)-(line 7999,col 54)",
            "(line 8001,col 5)-(line 8001,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 8004,
        "end_line": 8012,
        "comment": "",
        "child_ranges": [
            "(line 8006,col 5)-(line 8009,col 54)",
            "(line 8011,col 5)-(line 8011,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 8014,
        "end_line": 8025,
        "comment": "",
        "child_ranges": [
            "(line 8016,col 5)-(line 8016,col 68)",
            "(line 8017,col 5)-(line 8017,col 73)",
            "(line 8018,col 5)-(line 8018,col 45)",
            "(line 8019,col 5)-(line 8019,col 25)",
            "(line 8020,col 5)-(line 8020,col 46)",
            "(line 8021,col 5)-(line 8021,col 54)",
            "(line 8022,col 5)-(line 8022,col 56)",
            "(line 8023,col 5)-(line 8023,col 75)",
            "(line 8024,col 5)-(line 8024,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 8027,
        "end_line": 8038,
        "comment": "",
        "child_ranges": [
            "(line 8029,col 5)-(line 8031,col 43)",
            "(line 8033,col 5)-(line 8033,col 55)",
            "(line 8034,col 5)-(line 8035,col 43)",
            "(line 8036,col 5)-(line 8036,col 53)",
            "(line 8037,col 5)-(line 8037,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertTypeEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertTypeEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 8040,
        "end_line": 8052,
        "comment": "",
        "child_ranges": [
            "(line 8042,col 5)-(line 8044,col 43)",
            "(line 8046,col 5)-(line 8046,col 63)",
            "(line 8047,col 5)-(line 8047,col 69)",
            "(line 8048,col 5)-(line 8049,col 49)",
            "(line 8050,col 5)-(line 8051,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 8054,
        "end_line": 8063,
        "comment": "",
        "child_ranges": [
            "(line 8055,col 5)-(line 8062,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 8065,
        "end_line": 8078,
        "comment": "",
        "child_ranges": [
            "(line 8066,col 5)-(line 8069,col 47)",
            "(line 8071,col 5)-(line 8071,col 55)",
            "(line 8072,col 5)-(line 8072,col 47)",
            "(line 8073,col 5)-(line 8074,col 43)",
            "(line 8075,col 5)-(line 8075,col 53)",
            "(line 8076,col 5)-(line 8076,col 54)",
            "(line 8077,col 5)-(line 8077,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(OBJECT_TYPE, NULL_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 8080,
        "end_line": 8101,
        "comment": "",
        "child_ranges": [
            "(line 8081,col 5)-(line 8089,col 50)",
            "(line 8091,col 5)-(line 8091,col 55)",
            "(line 8092,col 5)-(line 8093,col 43)",
            "(line 8094,col 5)-(line 8094,col 53)",
            "(line 8095,col 5)-(line 8096,col 49)",
            "(line 8097,col 5)-(line 8097,col 54)",
            "(line 8098,col 5)-(line 8098,col 53)",
            "(line 8099,col 5)-(line 8099,col 53)",
            "(line 8100,col 5)-(line 8100,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertTypeEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8103,
        "end_line": 8106,
        "comment": "",
        "child_ranges": [
            "(line 8104,col 5)-(line 8104,col 53)",
            "(line 8105,col 5)-(line 8105,col 84)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertTypeEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8108,
        "end_line": 8115,
        "comment": "",
        "child_ranges": [
            "(line 8111,col 5)-(line 8113,col 41)",
            "(line 8114,col 5)-(line 8114,col 83)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertTypeEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8117,
        "end_line": 8128,
        "comment": "",
        "child_ranges": [
            "(line 8118,col 5)-(line 8125,col 70)",
            "(line 8126,col 5)-(line 8126,col 78)",
            "(line 8127,col 5)-(line 8127,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertTypeEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8130,
        "end_line": 8141,
        "comment": "",
        "child_ranges": [
            "(line 8131,col 5)-(line 8138,col 70)",
            "(line 8139,col 5)-(line 8139,col 64)",
            "(line 8140,col 5)-(line 8140,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertTypeEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 8143,
        "end_line": 8149,
        "comment": "",
        "child_ranges": [
            "(line 8144,col 5)-(line 8146,col 33)",
            "(line 8147,col 5)-(line 8147,col 62)",
            "(line 8148,col 5)-(line 8148,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertTypeEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 8151,
        "end_line": 8157,
        "comment": "",
        "child_ranges": [
            "(line 8152,col 5)-(line 8154,col 32)",
            "(line 8155,col 5)-(line 8155,col 62)",
            "(line 8156,col 5)-(line 8156,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8159,
        "end_line": 8164,
        "comment": "",
        "child_ranges": [
            "(line 8160,col 5)-(line 8163,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 8166,
        "end_line": 8172,
        "comment": "",
        "child_ranges": [
            "(line 8167,col 5)-(line 8171,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 8174,
        "end_line": 8182,
        "comment": "",
        "child_ranges": [
            "(line 8175,col 5)-(line 8181,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8184,
        "end_line": 8190,
        "comment": "",
        "child_ranges": [
            "(line 8185,col 5)-(line 8189,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 8192,
        "end_line": 8201,
        "comment": "",
        "child_ranges": [
            "(line 8193,col 5)-(line 8200,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8203,
        "end_line": 8210,
        "comment": "",
        "child_ranges": [
            "(line 8204,col 5)-(line 8209,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 8212,
        "end_line": 8219,
        "comment": "",
        "child_ranges": [
            "(line 8213,col 5)-(line 8218,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 8221,
        "end_line": 8228,
        "comment": "",
        "child_ranges": [
            "(line 8222,col 5)-(line 8227,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 8230,
        "end_line": 8237,
        "comment": "",
        "child_ranges": [
            "(line 8231,col 5)-(line 8236,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 8239,
        "end_line": 8247,
        "comment": "",
        "child_ranges": [
            "(line 8240,col 5)-(line 8246,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return {number} */\" +\n        \"Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 8249,
        "end_line": 8261,
        "comment": "",
        "child_ranges": [
            "(line 8250,col 5)-(line 8260,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 8263,
        "end_line": 8271,
        "comment": "",
        "child_ranges": [
            "(line 8264,col 5)-(line 8270,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 8273,
        "end_line": 8282,
        "comment": "",
        "child_ranges": [
            "(line 8274,col 5)-(line 8281,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return {number} */\" +\n        \"Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {string} */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 8284,
        "end_line": 8297,
        "comment": "",
        "child_ranges": [
            "(line 8285,col 5)-(line 8296,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 8299,
        "end_line": 8310,
        "comment": "",
        "child_ranges": [
            "(line 8300,col 5)-(line 8309,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\");\n  }\n",
        "begin_line": 8312,
        "end_line": 8319,
        "comment": "",
        "child_ranges": [
            "(line 8313,col 5)-(line 8318,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 8321,
        "end_line": 8327,
        "comment": "",
        "child_ranges": [
            "(line 8322,col 5)-(line 8326,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testClosureTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Bad type annotation. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 8329,
        "end_line": 8337,
        "comment": "",
        "child_ranges": [
            "(line 8330,col 5)-(line 8336,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck15()",
        "snippet": "  public void testInheritanceCheck15() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo;\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {number} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\");\n  }\n",
        "begin_line": 8339,
        "end_line": 8346,
        "comment": "",
        "child_ranges": [
            "(line 8340,col 5)-(line 8345,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck16()",
        "snippet": "  public void testInheritanceCheck16() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"/** @type {number} */ goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @type {number} */ goog.Sub.prototype.foo = 5;\",\n        \"property foo already defined on superclass goog.Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 8348,
        "end_line": 8357,
        "comment": "",
        "child_ranges": [
            "(line 8349,col 5)-(line 8356,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck17()",
        "snippet": "  public void testInheritanceCheck17() throws Exception {\n    // Make sure this warning still works, even when there's no\n    // @override tag.\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"/** @param {number} x */ goog.Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @param {string} x */ goog.Sub.prototype.foo = function(x) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass goog.Super\\n\" +\n        \"original: function (this:goog.Super, number): undefined\\n\" +\n        \"override: function (this:goog.Sub, string): undefined\");\n  }\n",
        "begin_line": 8359,
        "end_line": 8373,
        "comment": "",
        "child_ranges": [
            "(line 8362,col 5)-(line 8362,col 44)",
            "(line 8363,col 5)-(line 8372,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyOverride1()",
        "snippet": "  public void testInterfacePropertyOverride1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Super} */function Sub() {};\" +\n        \"/** @desc description */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8375,
        "end_line": 8381,
        "comment": "",
        "child_ranges": [
            "(line 8376,col 5)-(line 8380,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyOverride2()",
        "snippet": "  public void testInterfacePropertyOverride2() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @desc description */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @interface\\n @extends {Super} */function Sub() {};\" +\n        \"/** @desc description */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8383,
        "end_line": 8390,
        "comment": "",
        "child_ranges": [
            "(line 8384,col 5)-(line 8389,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 8392,
        "end_line": 8400,
        "comment": "",
        "child_ranges": [
            "(line 8393,col 5)-(line 8399,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 8402,
        "end_line": 8408,
        "comment": "",
        "child_ranges": [
            "(line 8403,col 5)-(line 8407,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 8410,
        "end_line": 8419,
        "comment": "",
        "child_ranges": [
            "(line 8411,col 5)-(line 8418,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 8421,
        "end_line": 8429,
        "comment": "",
        "child_ranges": [
            "(line 8422,col 5)-(line 8428,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return {string} */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 8431,
        "end_line": 8442,
        "comment": "",
        "child_ranges": [
            "(line 8432,col 5)-(line 8441,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {string} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 8444,
        "end_line": 8456,
        "comment": "",
        "child_ranges": [
            "(line 8445,col 5)-(line 8455,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 8458,
        "end_line": 8469,
        "comment": "",
        "child_ranges": [
            "(line 8459,col 5)-(line 8468,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Bad type annotation. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 8471,
        "end_line": 8479,
        "comment": "",
        "child_ranges": [
            "(line 8472,col 5)-(line 8478,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck9()",
        "snippet": "  public void testInterfaceInheritanceCheck9() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.bar = function() {return 3; };\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8481,
        "end_line": 8494,
        "comment": "",
        "child_ranges": [
            "(line 8482,col 5)-(line 8493,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck10()",
        "snippet": "  public void testInterfaceInheritanceCheck10() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.bar = function() {};\" +\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() {return 3; };\" +\n        \"/** @constructor \\n * @extends {F} \\n * @implements {I} */ \" +\n        \"function G() {}\" +\n        \"/** @return {number} \\n * @override */ \" +\n        \"G.prototype.bar = G.prototype.foo;\" +\n        \"/** @return {string} */ function f() { return new G().bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8496,
        "end_line": 8510,
        "comment": "",
        "child_ranges": [
            "(line 8497,col 5)-(line 8509,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck12()",
        "snippet": "  public void testInterfaceInheritanceCheck12() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {};\\n\" +\n        \"/** @type {string} */ I.prototype.foobar;\\n\" +\n        \"/** \\n * @constructor \\n * @implements {I} */\\n\" +\n        \"function C() {\\n\" +\n        \"/** \\n * @type {number} */ this.foobar = 2;};\\n\" +\n        \"/** @type {I} */ \\n var test = new C(); alert(test.foobar);\",\n        \"mismatch of the foobar property type and the type of the property\" +\n        \" it overrides from interface I\\n\" +\n        \"original: string\\n\" +\n        \"override: number\");\n  }\n",
        "begin_line": 8512,
        "end_line": 8524,
        "comment": "",
        "child_ranges": [
            "(line 8513,col 5)-(line 8523,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck13()",
        "snippet": "  public void testInterfaceInheritanceCheck13() throws Exception {\n    testTypes(\n        \"function abstractMethod() {};\\n\" +\n        \"/** @interface */var base = function() {};\\n\" +\n        \"/** @extends {base} \\n @interface */ var Int = function() {}\\n\" +\n        \"/** @type {{bar : !Function}} */ var x; \\n\" +\n        \"/** @type {!Function} */ base.prototype.bar = abstractMethod; \\n\" +\n        \"/** @type {Int} */ var foo;\\n\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 8526,
        "end_line": 8535,
        "comment": "",
        "child_ranges": [
            "(line 8527,col 5)-(line 8534,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 8537,
        "end_line": 8543,
        "comment": "",
        "child_ranges": [
            "(line 8538,col 5)-(line 8542,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 8545,
        "end_line": 8552,
        "comment": "",
        "child_ranges": [
            "(line 8546,col 5)-(line 8551,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\n        // externs\n        \"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n        \"\", null, false);\n  }\n",
        "begin_line": 8554,
        "end_line": 8563,
        "comment": "",
        "child_ranges": [
            "(line 8557,col 5)-(line 8562,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertTypeEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertTypeEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertTypeEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 8565,
        "end_line": 8583,
        "comment": "",
        "child_ranges": [
            "(line 8566,col 5)-(line 8566,col 63)",
            "(line 8568,col 5)-(line 8568,col 54)",
            "(line 8569,col 5)-(line 8569,col 47)",
            "(line 8572,col 5)-(line 8572,col 49)",
            "(line 8573,col 5)-(line 8573,col 56)",
            "(line 8576,col 5)-(line 8577,col 44)",
            "(line 8578,col 5)-(line 8578,col 68)",
            "(line 8579,col 5)-(line 8579,col 68)",
            "(line 8582,col 5)-(line 8582,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 8585,
        "end_line": 8592,
        "comment": "",
        "child_ranges": [
            "(line 8586,col 5)-(line 8591,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration2()",
        "snippet": "  public void testObjectLiteralDeclaration2() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @type {boolean} */ abc: true\" +\n        \"};\" +\n        \"x.abc = 0;\",\n        \"assignment to property abc of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 8594,
        "end_line": 8603,
        "comment": "",
        "child_ranges": [
            "(line 8595,col 5)-(line 8602,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration3()",
        "snippet": "  public void testObjectLiteralDeclaration3() throws Exception {\n    testTypes(\n        \"/** @param {{foo: !Function}} x */ function f(x) {}\" +\n        \"f({foo: function() {}});\");\n  }\n",
        "begin_line": 8605,
        "end_line": 8609,
        "comment": "",
        "child_ranges": [
            "(line 8606,col 5)-(line 8608,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration4()",
        "snippet": "  public void testObjectLiteralDeclaration4() throws Exception {\n    testClosureTypes(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\",\n        \"assignment to property abc of x\\n\" +\n        \"found   : function (string): undefined\\n\" +\n        \"required: function (boolean): undefined\");\n    // TODO(user): suppress {duplicate} currently also silence the\n    // redefining type error in the TypeValidator. Maybe it needs\n    // a new suppress name instead?\n  }\n",
        "begin_line": 8611,
        "end_line": 8626,
        "comment": "",
        "child_ranges": [
            "(line 8612,col 5)-(line 8622,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration5()",
        "snippet": "  public void testObjectLiteralDeclaration5() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"  /** @param {boolean} x */ abc: function(x) {}\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\");\n  }\n",
        "begin_line": 8628,
        "end_line": 8637,
        "comment": "",
        "child_ranges": [
            "(line 8629,col 5)-(line 8636,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration6()",
        "snippet": "  public void testObjectLiteralDeclaration6() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @param {boolean} x\\n\" +\n        \" * @suppress {duplicate}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 8639,
        "end_line": 8653,
        "comment": "",
        "child_ranges": [
            "(line 8640,col 5)-(line 8652,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration7()",
        "snippet": "  public void testObjectLiteralDeclaration7() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"/**\\n\" +\n        \" * @type {function(boolean): undefined}\\n\" +\n        \" */ x.abc = function(x) {};\" +\n        \"x = {\" +\n        \"  /**\\n\" +\n        \"   * @param {boolean} x\\n\" +\n        \"   * @suppress {duplicate}\\n\" +\n        \"   */\" +\n        \"  abc: function(x) {}\" +\n        \"};\");\n  }\n",
        "begin_line": 8655,
        "end_line": 8668,
        "comment": "",
        "child_ranges": [
            "(line 8656,col 5)-(line 8667,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertTypeEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8670,
        "end_line": 8675,
        "comment": "",
        "child_ranges": [
            "(line 8673,col 5)-(line 8673,col 41)",
            "(line 8674,col 5)-(line 8674,col 81)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertTypeEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8680,
        "end_line": 8684,
        "comment": "",
        "child_ranges": [
            "(line 8681,col 5)-(line 8681,col 45)",
            "(line 8682,col 5)-(line 8683,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertTypeEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 8686,
        "end_line": 8690,
        "comment": "",
        "child_ranges": [
            "(line 8687,col 5)-(line 8687,col 42)",
            "(line 8688,col 5)-(line 8689,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8692,
        "end_line": 8703,
        "comment": "",
        "child_ranges": [
            "(line 8693,col 5)-(line 8702,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 8736,
        "end_line": 8741,
        "comment": "",
        "child_ranges": [
            "(line 8739,col 5)-(line 8740,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 8743,
        "end_line": 8746,
        "comment": "",
        "child_ranges": [
            "(line 8744,col 5)-(line 8745,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 8748,
        "end_line": 8751,
        "comment": "",
        "child_ranges": [
            "(line 8749,col 5)-(line 8750,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 8753,
        "end_line": 8758,
        "comment": "",
        "child_ranges": [
            "(line 8754,col 5)-(line 8757,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 8772,
        "end_line": 8775,
        "comment": "",
        "child_ranges": [
            "(line 8773,col 5)-(line 8774,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 8777,
        "end_line": 8780,
        "comment": "",
        "child_ranges": [
            "(line 8778,col 5)-(line 8779,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface1()",
        "snippet": "  public void testDataPropertyOnInterface1() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\");\n  }\n",
        "begin_line": 8790,
        "end_line": 8793,
        "comment": "",
        "child_ranges": [
            "(line 8791,col 5)-(line 8792,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface2()",
        "snippet": "  public void testDataPropertyOnInterface2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 8795,
        "end_line": 8808,
        "comment": "",
        "child_ranges": [
            "(line 8796,col 5)-(line 8796,col 44)",
            "(line 8797,col 5)-(line 8807,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface3()",
        "snippet": "  public void testDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"/** @override */\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 8810,
        "end_line": 8823,
        "comment": "",
        "child_ranges": [
            "(line 8811,col 5)-(line 8822,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface4()",
        "snippet": "  public void testDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() { /** @type {string} */ \\n this.x = 'foo'; }\\n\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 8825,
        "end_line": 8836,
        "comment": "",
        "child_ranges": [
            "(line 8826,col 5)-(line 8835,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 8838,
        "end_line": 8843,
        "comment": "",
        "child_ranges": [
            "(line 8839,col 5)-(line 8842,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 8845,
        "end_line": 8850,
        "comment": "",
        "child_ranges": [
            "(line 8846,col 5)-(line 8849,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 8881,
        "end_line": 8886,
        "comment": "",
        "child_ranges": [
            "(line 8882,col 5)-(line 8885,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 8888,
        "end_line": 8894,
        "comment": "",
        "child_ranges": [
            "(line 8889,col 5)-(line 8893,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        Lists.newArrayList(\n            \"assignment to property x of T.prototype\\n\" +\n            \"found   : number\\n\" +\n            \"required: function (this:T): number\",\n            \"interface members can only be empty property declarations, \" +\n            \"empty functions, or goog.abstractMethod\"));\n  }\n",
        "begin_line": 8896,
        "end_line": 8906,
        "comment": "",
        "child_ranges": [
            "(line 8897,col 5)-(line 8905,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 8908,
        "end_line": 8913,
        "comment": "",
        "child_ranges": [
            "(line 8909,col 5)-(line 8912,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 8915,
        "end_line": 8919,
        "comment": "",
        "child_ranges": [
            "(line 8916,col 5)-(line 8918,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 8921,
        "end_line": 8925,
        "comment": "",
        "child_ranges": [
            "(line 8922,col 5)-(line 8924,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f = function(){}; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 8927,
        "end_line": 8930,
        "comment": "",
        "child_ranges": [
            "(line 8928,col 5)-(line 8929,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 8932,
        "end_line": 8940,
        "comment": "",
        "child_ranges": [
            "(line 8933,col 5)-(line 8939,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    // For now, we just ignore @type annotations on the prototype.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\");\n  }\n",
        "begin_line": 8942,
        "end_line": 8948,
        "comment": "",
        "child_ranges": [
            "(line 8944,col 5)-(line 8947,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8953,
        "end_line": 8964,
        "comment": "",
        "child_ranges": [
            "(line 8954,col 5)-(line 8963,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8966,
        "end_line": 8978,
        "comment": "",
        "child_ranges": [
            "(line 8967,col 5)-(line 8977,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 8980,
        "end_line": 8991,
        "comment": "",
        "child_ranges": [
            "(line 8981,col 5)-(line 8990,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 8993,
        "end_line": 9003,
        "comment": "",
        "child_ranges": [
            "(line 8994,col 5)-(line 9002,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 9005,
        "end_line": 9012,
        "comment": "",
        "child_ranges": [
            "(line 9006,col 5)-(line 9006,col 79)",
            "(line 9007,col 5)-(line 9007,col 62)",
            "(line 9008,col 5)-(line 9008,col 38)",
            "(line 9009,col 5)-(line 9009,col 45)",
            "(line 9010,col 5)-(line 9011,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    Asserts.assertTypeCollectionEquals(\n        Lists.newArrayList(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 9014,
        "end_line": 9025,
        "comment": "",
        "child_ranges": [
            "(line 9015,col 5)-(line 9016,col 43)",
            "(line 9017,col 5)-(line 9017,col 62)",
            "(line 9018,col 5)-(line 9018,col 38)",
            "(line 9019,col 5)-(line 9019,col 43)",
            "(line 9020,col 5)-(line 9020,col 46)",
            "(line 9021,col 5)-(line 9021,col 45)",
            "(line 9022,col 5)-(line 9024,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTypeEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    Asserts.assertTypeCollectionEquals(\n        Lists.newArrayList(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 9027,
        "end_line": 9041,
        "comment": "",
        "child_ranges": [
            "(line 9028,col 5)-(line 9029,col 75)",
            "(line 9030,col 5)-(line 9030,col 21)",
            "(line 9031,col 5)-(line 9031,col 23)",
            "(line 9032,col 5)-(line 9032,col 62)",
            "(line 9033,col 5)-(line 9033,col 38)",
            "(line 9034,col 5)-(line 9034,col 40)",
            "(line 9035,col 5)-(line 9035,col 43)",
            "(line 9036,col 5)-(line 9036,col 46)",
            "(line 9037,col 5)-(line 9037,col 45)",
            "(line 9038,col 5)-(line 9040,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 9043,
        "end_line": 9046,
        "comment": "",
        "child_ranges": [
            "(line 9044,col 5)-(line 9045,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 9048,
        "end_line": 9050,
        "comment": "",
        "child_ranges": [
            "(line 9049,col 5)-(line 9049,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 9052,
        "end_line": 9056,
        "comment": "",
        "child_ranges": [
            "(line 9053,col 5)-(line 9055,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 9058,
        "end_line": 9063,
        "comment": "",
        "child_ranges": [
            "(line 9059,col 5)-(line 9062,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 9065,
        "end_line": 9069,
        "comment": "",
        "child_ranges": [
            "(line 9066,col 5)-(line 9068,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 9071,
        "end_line": 9075,
        "comment": "",
        "child_ranges": [
            "(line 9072,col 5)-(line 9074,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 9077,
        "end_line": 9081,
        "comment": "",
        "child_ranges": [
            "(line 9078,col 5)-(line 9080,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 9083,
        "end_line": 9089,
        "comment": "",
        "child_ranges": [
            "(line 9084,col 5)-(line 9088,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 9091,
        "end_line": 9097,
        "comment": "",
        "child_ranges": [
            "(line 9092,col 5)-(line 9096,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 9099,
        "end_line": 9105,
        "comment": "",
        "child_ranges": [
            "(line 9100,col 5)-(line 9104,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 9107,
        "end_line": 9115,
        "comment": "",
        "child_ranges": [
            "(line 9108,col 5)-(line 9114,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 9117,
        "end_line": 9121,
        "comment": "",
        "child_ranges": [
            "(line 9118,col 5)-(line 9120,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9123,
        "end_line": 9134,
        "comment": "",
        "child_ranges": [
            "(line 9124,col 5)-(line 9133,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 9136,
        "end_line": 9147,
        "comment": "",
        "child_ranges": [
            "(line 9137,col 5)-(line 9146,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 9149,
        "end_line": 9155,
        "comment": "",
        "child_ranges": [
            "(line 9150,col 5)-(line 9154,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 9157,
        "end_line": 9163,
        "comment": "",
        "child_ranges": [
            "(line 9158,col 5)-(line 9162,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 9165,
        "end_line": 9170,
        "comment": "",
        "child_ranges": [
            "(line 9166,col 5)-(line 9169,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 9172,
        "end_line": 9177,
        "comment": "",
        "child_ranges": [
            "(line 9173,col 5)-(line 9176,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9179,
        "end_line": 9189,
        "comment": "",
        "child_ranges": [
            "(line 9180,col 5)-(line 9188,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 9191,
        "end_line": 9199,
        "comment": "",
        "child_ranges": [
            "(line 9192,col 5)-(line 9198,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|string)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 9201,
        "end_line": 9212,
        "comment": "",
        "child_ranges": [
            "(line 9202,col 5)-(line 9211,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry1()",
        "snippet": "  public void testTypeInferenceWithNoEntry1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function SubFoo() {}\" +\n        \"/** Method */\" +\n        \"SubFoo.prototype.method = function() {\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(this.bar);\" +\n        \"    f(this.bar.baz);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{baz: number})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9214,
        "end_line": 9236,
        "comment": "",
        "child_ranges": [
            "(line 9215,col 5)-(line 9235,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry2()",
        "snippet": "  public void testTypeInferenceWithNoEntry2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"/** @param {!Object} x */ function g(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n        \"};\" +\n        \"/**\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function SubFoo() {}\" +\n        \"/** Method */\" +\n        \"SubFoo.prototype.method = function() {\" +\n        \"  for (var i = 0; i < 10; i++) {\" +\n        \"    f(this.bar);\" +\n        \"    goog.asserts.assert(this.bar);\" +\n        \"    g(this.bar);\" +\n        \"  }\" +\n        \"};\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (null|{baz: number})\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9238,
        "end_line": 9263,
        "comment": "",
        "child_ranges": [
            "(line 9239,col 5)-(line 9262,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9265,
        "end_line": 9278,
        "comment": "",
        "child_ranges": [
            "(line 9266,col 5)-(line 9277,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Bad type annotation. Unknown type MyType\");\n  }\n",
        "begin_line": 9280,
        "end_line": 9284,
        "comment": "",
        "child_ranges": [
            "(line 9281,col 5)-(line 9283,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 9286,
        "end_line": 9288,
        "comment": "",
        "child_ranges": [
            "(line 9287,col 5)-(line 9287,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 9290,
        "end_line": 9299,
        "comment": "",
        "child_ranges": [
            "(line 9291,col 5)-(line 9298,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 9301,
        "end_line": 9309,
        "comment": "",
        "child_ranges": [
            "(line 9302,col 5)-(line 9303,col 53)",
            "(line 9304,col 5)-(line 9304,col 30)",
            "(line 9305,col 5)-(line 9308,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 9311,
        "end_line": 9320,
        "comment": "",
        "child_ranges": [
            "(line 9312,col 5)-(line 9319,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration4()",
        "snippet": "  public void testForwardTypeDeclaration4() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(new MyType());\",\n        null);\n  }\n",
        "begin_line": 9322,
        "end_line": 9329,
        "comment": "",
        "child_ranges": [
            "(line 9323,col 5)-(line 9328,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration5()",
        "snippet": "  public void testForwardTypeDeclaration5() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        \"Could not resolve type in @extends tag of YourType\");\n  }\n",
        "begin_line": 9331,
        "end_line": 9340,
        "comment": "",
        "child_ranges": [
            "(line 9332,col 5)-(line 9339,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration6()",
        "snippet": "  public void testForwardTypeDeclaration6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        Lists.newArrayList(\n            \"Could not resolve type in @implements tag of YourType\",\n            \"property method not defined on any superclass of YourType\"));\n  }\n",
        "begin_line": 9342,
        "end_line": 9353,
        "comment": "",
        "child_ranges": [
            "(line 9343,col 5)-(line 9352,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration7()",
        "snippet": "  public void testForwardTypeDeclaration7() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType=} x */\" +\n        \"function f(x) { return x == undefined; }\", null);\n  }\n",
        "begin_line": 9355,
        "end_line": 9360,
        "comment": "",
        "child_ranges": [
            "(line 9356,col 5)-(line 9359,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration8()",
        "snippet": "  public void testForwardTypeDeclaration8() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { return x.name == undefined; }\", null);\n  }\n",
        "begin_line": 9362,
        "end_line": 9367,
        "comment": "",
        "child_ranges": [
            "(line 9363,col 5)-(line 9366,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration9()",
        "snippet": "  public void testForwardTypeDeclaration9() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */\" +\n        \"function f(x) { x.name = 'Bob'; }\", null);\n  }\n",
        "begin_line": 9369,
        "end_line": 9374,
        "comment": "",
        "child_ranges": [
            "(line 9370,col 5)-(line 9373,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration10()",
        "snippet": "  public void testForwardTypeDeclaration10() throws Exception {\n    String f = \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType|number} x */ function f(x) { }\";\n    testClosureTypes(f, null);\n    testClosureTypes(f + \"f(3);\", null);\n    testClosureTypes(f + \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: (MyType|null|number)\");\n  }\n",
        "begin_line": 9376,
        "end_line": 9385,
        "comment": "",
        "child_ranges": [
            "(line 9377,col 5)-(line 9378,col 60)",
            "(line 9379,col 5)-(line 9379,col 30)",
            "(line 9380,col 5)-(line 9380,col 40)",
            "(line 9381,col 5)-(line 9384,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration12()",
        "snippet": "  public void testForwardTypeDeclaration12() throws Exception {\n    // We assume that {Function} types can produce anything, and don't\n    // want to type-check them.\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @param {!Function} ctor\\n\" +\n        \" * @return {MyType}\\n\" +\n        \" */\\n\" +\n        \"function f(ctor) { return new ctor(); }\", null);\n  }\n",
        "begin_line": 9387,
        "end_line": 9397,
        "comment": "",
        "child_ranges": [
            "(line 9390,col 5)-(line 9396,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration13()",
        "snippet": "  public void testForwardTypeDeclaration13() throws Exception {\n    // Some projects use {Function} registries to register constructors\n    // that aren't in their binaries. We want to make sure we can pass these\n    // around, but still do other checks on them.\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @param {!Function} ctor\\n\" +\n        \" * @return {MyType}\\n\" +\n        \" */\\n\" +\n        \"function f(ctor) { return (new ctor()).impossibleProp; }\",\n        \"Property impossibleProp never defined on ?\");\n  }\n",
        "begin_line": 9399,
        "end_line": 9411,
        "comment": "",
        "child_ranges": [
            "(line 9403,col 5)-(line 9410,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (new:goog.Bar): undefined\");\n  }\n",
        "begin_line": 9413,
        "end_line": 9421,
        "comment": "",
        "child_ranges": [
            "(line 9414,col 5)-(line 9420,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 9423,
        "end_line": 9429,
        "comment": "",
        "child_ranges": [
            "(line 9424,col 5)-(line 9428,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9431,
        "end_line": 9440,
        "comment": "",
        "child_ranges": [
            "(line 9432,col 5)-(line 9439,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 9442,
        "end_line": 9451,
        "comment": "",
        "child_ranges": [
            "(line 9443,col 5)-(line 9450,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef4()",
        "snippet": "  public void testTypeDef4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 9453,
        "end_line": 9463,
        "comment": "",
        "child_ranges": [
            "(line 9454,col 5)-(line 9462,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef5()",
        "snippet": "  public void testTypeDef5() throws Exception {\n    // Notice that the error message is slightly different than\n    // the one for testTypeDef4, even though they should be the same.\n    // This is an implementation detail necessary for NamedTypes work out\n    // OK, and it should change if NamedTypes ever go away.\n    testTypes(\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 9465,
        "end_line": 9479,
        "comment": "",
        "child_ranges": [
            "(line 9470,col 5)-(line 9478,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 9481,
        "end_line": 9487,
        "comment": "",
        "child_ranges": [
            "(line 9482,col 5)-(line 9486,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9489,
        "end_line": 9493,
        "comment": "",
        "child_ranges": [
            "(line 9490,col 5)-(line 9491,col 58)",
            "(line 9492,col 5)-(line 9492,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9495,
        "end_line": 9498,
        "comment": "",
        "child_ranges": [
            "(line 9496,col 5)-(line 9496,col 39)",
            "(line 9497,col 5)-(line 9497,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9500,
        "end_line": 9503,
        "comment": "",
        "child_ranges": [
            "(line 9501,col 5)-(line 9501,col 53)",
            "(line 9502,col 5)-(line 9502,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9505,
        "end_line": 9509,
        "comment": "",
        "child_ranges": [
            "(line 9506,col 5)-(line 9507,col 46)",
            "(line 9508,col 5)-(line 9508,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent5()",
        "snippet": "  public void testGetTypedPercent5() throws Exception {\n    String js = \"/** @enum {number} */ keys = {A: 1,B: 2,C: 3};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9511,
        "end_line": 9514,
        "comment": "",
        "child_ranges": [
            "(line 9512,col 5)-(line 9512,col 65)",
            "(line 9513,col 5)-(line 9513,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent6()",
        "snippet": "  public void testGetTypedPercent6() throws Exception {\n    String js = \"a = {TRUE: 1, FALSE: 0};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9516,
        "end_line": 9519,
        "comment": "",
        "child_ranges": [
            "(line 9517,col 5)-(line 9517,col 43)",
            "(line 9518,col 5)-(line 9518,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 9521,
        "end_line": 9531,
        "comment": "",
        "child_ranges": [
            "(line 9522,col 5)-(line 9522,col 40)",
            "(line 9524,col 5)-(line 9524,col 41)",
            "(line 9525,col 5)-(line 9525,col 61)",
            "(line 9526,col 5)-(line 9526,col 46)",
            "(line 9528,col 5)-(line 9528,col 34)",
            "(line 9529,col 5)-(line 9529,col 33)",
            "(line 9530,col 5)-(line 9530,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 9533,
        "end_line": 9540,
        "comment": "",
        "child_ranges": [
            "(line 9534,col 5)-(line 9534,col 54)",
            "(line 9535,col 5)-(line 9535,col 24)",
            "(line 9536,col 5)-(line 9536,col 45)",
            "(line 9537,col 5)-(line 9537,col 52)",
            "(line 9538,col 5)-(line 9538,col 45)",
            "(line 9539,col 5)-(line 9539,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 9542,
        "end_line": 9559,
        "comment": "",
        "child_ranges": [
            "(line 9543,col 5)-(line 9551,col 15)",
            "(line 9552,col 5)-(line 9552,col 46)",
            "(line 9553,col 5)-(line 9553,col 48)",
            "(line 9555,col 5)-(line 9555,col 72)",
            "(line 9556,col 5)-(line 9556,col 74)",
            "(line 9557,col 5)-(line 9558,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 9561,
        "end_line": 9577,
        "comment": "",
        "child_ranges": [
            "(line 9562,col 5)-(line 9575,col 37)",
            "(line 9576,col 5)-(line 9576,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 9579,
        "end_line": 9584,
        "comment": "",
        "child_ranges": [
            "(line 9580,col 5)-(line 9583,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 9586,
        "end_line": 9592,
        "comment": "",
        "child_ranges": [
            "(line 9587,col 5)-(line 9591,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 9594,
        "end_line": 9599,
        "comment": "",
        "child_ranges": [
            "(line 9595,col 5)-(line 9598,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 9601,
        "end_line": 9607,
        "comment": "",
        "child_ranges": [
            "(line 9602,col 5)-(line 9606,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 9609,
        "end_line": 9615,
        "comment": "",
        "child_ranges": [
            "(line 9610,col 5)-(line 9614,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 9617,
        "end_line": 9623,
        "comment": "",
        "child_ranges": [
            "(line 9618,col 5)-(line 9622,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 9625,
        "end_line": 9630,
        "comment": "",
        "child_ranges": [
            "(line 9626,col 5)-(line 9629,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 9632,
        "end_line": 9636,
        "comment": "",
        "child_ranges": [
            "(line 9633,col 5)-(line 9635,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 9638,
        "end_line": 9642,
        "comment": "",
        "child_ranges": [
            "(line 9639,col 5)-(line 9641,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 9644,
        "end_line": 9648,
        "comment": "",
        "child_ranges": [
            "(line 9645,col 5)-(line 9647,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 9650,
        "end_line": 9654,
        "comment": "",
        "child_ranges": [
            "(line 9651,col 5)-(line 9653,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 9656,
        "end_line": 9660,
        "comment": "",
        "child_ranges": [
            "(line 9657,col 5)-(line 9659,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 9662,
        "end_line": 9667,
        "comment": "",
        "child_ranges": [
            "(line 9663,col 5)-(line 9666,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 9669,
        "end_line": 9675,
        "comment": "",
        "child_ranges": [
            "(line 9670,col 5)-(line 9674,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 9677,
        "end_line": 9681,
        "comment": "",
        "child_ranges": [
            "(line 9678,col 5)-(line 9680,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 9683,
        "end_line": 9688,
        "comment": "",
        "child_ranges": [
            "(line 9684,col 5)-(line 9687,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 9690,
        "end_line": 9694,
        "comment": "",
        "child_ranges": [
            "(line 9691,col 5)-(line 9693,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 9696,
        "end_line": 9700,
        "comment": "",
        "child_ranges": [
            "(line 9697,col 5)-(line 9699,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 9702,
        "end_line": 9707,
        "comment": "",
        "child_ranges": [
            "(line 9703,col 5)-(line 9706,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty20()",
        "snippet": "  public void testMissingProperty20() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 9709,
        "end_line": 9714,
        "comment": "",
        "child_ranges": [
            "(line 9710,col 5)-(line 9713,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 9716,
        "end_line": 9720,
        "comment": "",
        "child_ranges": [
            "(line 9717,col 5)-(line 9719,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 9722,
        "end_line": 9726,
        "comment": "",
        "child_ranges": [
            "(line 9723,col 5)-(line 9725,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 9728,
        "end_line": 9732,
        "comment": "",
        "child_ranges": [
            "(line 9729,col 5)-(line 9731,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 9734,
        "end_line": 9739,
        "comment": "",
        "child_ranges": [
            "(line 9735,col 5)-(line 9738,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 9741,
        "end_line": 9747,
        "comment": "",
        "child_ranges": [
            "(line 9742,col 5)-(line 9746,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 9749,
        "end_line": 9755,
        "comment": "",
        "child_ranges": [
            "(line 9750,col 5)-(line 9754,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 9757,
        "end_line": 9764,
        "comment": "",
        "child_ranges": [
            "(line 9758,col 5)-(line 9763,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 9766,
        "end_line": 9778,
        "comment": "",
        "child_ranges": [
            "(line 9767,col 5)-(line 9771,col 13)",
            "(line 9772,col 5)-(line 9777,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 9780,
        "end_line": 9790,
        "comment": "",
        "child_ranges": [
            "(line 9782,col 5)-(line 9789,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty30()",
        "snippet": "  public void testMissingProperty30() throws Exception {\n    testTypes(\n        \"/** @return {*} */\" +\n        \"function f() {\" +\n        \" return {};\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Object} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 9792,
        "end_line": 9800,
        "comment": "",
        "child_ranges": [
            "(line 9793,col 5)-(line 9799,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty31()",
        "snippet": "  public void testMissingProperty31() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Array} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 9802,
        "end_line": 9810,
        "comment": "",
        "child_ranges": [
            "(line 9803,col 5)-(line 9809,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty32()",
        "snippet": "  public void testMissingProperty32() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Date} y */ function g(y) { return y.a; }\",\n        \"Property a never defined on Date\");\n  }\n",
        "begin_line": 9812,
        "end_line": 9821,
        "comment": "",
        "child_ranges": [
            "(line 9813,col 5)-(line 9820,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty33()",
        "snippet": "  public void testMissingProperty33() throws Exception {\n    testTypes(\n      \"/** @param {Object} x */\" +\n      \"function f(x) { !x.foo || x.foo(); }\");\n  }\n",
        "begin_line": 9823,
        "end_line": 9827,
        "comment": "",
        "child_ranges": [
            "(line 9824,col 5)-(line 9826,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty34()",
        "snippet": "  public void testMissingProperty34() throws Exception {\n    testTypes(\n        \"/** @fileoverview \\n * @suppress {missingProperties} */\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\");\n  }\n",
        "begin_line": 9829,
        "end_line": 9835,
        "comment": "",
        "child_ranges": [
            "(line 9830,col 5)-(line 9834,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty35()",
        "snippet": "  public void testMissingProperty35() throws Exception {\n    // Bar has specialProp defined, so Bar|Baz may have specialProp defined.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @constructor */ function Baz() {}\" +\n        \"/** @param {Foo|Bar} x */ function f(x) { x.specialProp = 1; }\" +\n        \"/** @param {Bar|Baz} x */ function g(x) { return x.specialProp; }\");\n  }\n",
        "begin_line": 9837,
        "end_line": 9845,
        "comment": "",
        "child_ranges": [
            "(line 9839,col 5)-(line 9844,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty36()",
        "snippet": "  public void testMissingProperty36() throws Exception {\n    // Foo has baz defined, and SubFoo has bar defined, so some objects with\n    // bar may have baz.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.baz = 0;\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 0;\" +\n        \"/** @param {{bar: number}} x */ function f(x) { return x.baz; }\");\n  }\n",
        "begin_line": 9847,
        "end_line": 9856,
        "comment": "",
        "child_ranges": [
            "(line 9850,col 5)-(line 9855,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty37()",
        "snippet": "  public void testMissingProperty37() throws Exception {\n    // This used to emit a missing property warning because we couldn't\n    // determine that the inf(Foo, {isVisible:boolean}) == SubFoo.\n    testTypes(\n        \"/** @param {{isVisible: boolean}} x */ function f(x){\" +\n        \"  x.isVisible = false;\" +\n        \"}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/**\\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */ function SubFoo() {}\" +\n        \"/** @type {boolean} */ SubFoo.prototype.isVisible = true;\" +\n        \"/**\\n\" +\n        \" * @param {Foo} x\\n\" +\n        \" * @return {boolean}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return x.isVisible; }\");\n  }\n",
        "begin_line": 9858,
        "end_line": 9876,
        "comment": "",
        "child_ranges": [
            "(line 9861,col 5)-(line 9875,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty38()",
        "snippet": "  public void testMissingProperty38() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @return {Foo|Bar} */ function f() { return new Foo(); }\" +\n        \"f().missing;\",\n        \"Property missing never defined on (Bar|Foo|null)\");\n  }\n",
        "begin_line": 9878,
        "end_line": 9885,
        "comment": "",
        "child_ranges": [
            "(line 9879,col 5)-(line 9884,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty39()",
        "snippet": "  public void testMissingProperty39() throws Exception {\n    testTypes(\n        \"/** @return {string|number} */ function f() { return 3; }\" +\n        \"f().length;\");\n  }\n",
        "begin_line": 9887,
        "end_line": 9891,
        "comment": "",
        "child_ranges": [
            "(line 9888,col 5)-(line 9890,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty40()",
        "snippet": "  public void testMissingProperty40() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {(Array|MissingType)} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 9893,
        "end_line": 9898,
        "comment": "",
        "child_ranges": [
            "(line 9894,col 5)-(line 9897,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty41()",
        "snippet": "  public void testMissingProperty41() throws Exception {\n    testTypes(\n        \"/** @param {(Array|Date)} x */\" +\n        \"function f(x) { if (x.impossible) x.impossible(); }\");\n  }\n",
        "begin_line": 9900,
        "end_line": 9904,
        "comment": "",
        "child_ranges": [
            "(line 9901,col 5)-(line 9903,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty42()",
        "snippet": "  public void testMissingProperty42() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { \" +\n        \"  if (typeof x.impossible == 'undefined') throw Error();\" +\n        \"  return x.impossible;\" +\n        \"}\");\n  }\n",
        "begin_line": 9907,
        "end_line": 9914,
        "comment": "",
        "child_ranges": [
            "(line 9908,col 5)-(line 9913,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject1()",
        "snippet": "  public void testReflectObject1() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: 3});\",\n        null);\n  }\n",
        "begin_line": 9916,
        "end_line": 9923,
        "comment": "",
        "child_ranges": [
            "(line 9917,col 5)-(line 9922,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReflectObject2()",
        "snippet": "  public void testReflectObject2() throws Exception {\n    testClosureTypes(\n        \"var goog = {}; goog.reflect = {}; \" +\n        \"goog.reflect.object = function(x, y){};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"goog.reflect.object(A, {x: f(1 + 1)});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 9925,
        "end_line": 9935,
        "comment": "",
        "child_ranges": [
            "(line 9926,col 5)-(line 9934,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends1()",
        "snippet": "  public void testLends1() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends */ ({bar: 1}));\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 9937,
        "end_line": 9943,
        "comment": "",
        "child_ranges": [
            "(line 9938,col 5)-(line 9942,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends2()",
        "snippet": "  public void testLends2() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foob} */ ({bar: 1}));\",\n        \"Variable Foob not declared before @lends annotation.\");\n  }\n",
        "begin_line": 9945,
        "end_line": 9951,
        "comment": "",
        "child_ranges": [
            "(line 9946,col 5)-(line 9950,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends3()",
        "snippet": "  public void testLends3() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert(Foo.bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 9953,
        "end_line": 9960,
        "comment": "",
        "child_ranges": [
            "(line 9954,col 5)-(line 9959,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends4()",
        "snippet": "  public void testLends4() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\" +\n        \"alert(Foo.bar);\");\n  }\n",
        "begin_line": 9962,
        "end_line": 9968,
        "comment": "",
        "child_ranges": [
            "(line 9963,col 5)-(line 9967,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends5()",
        "snippet": "  public void testLends5() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert((new Foo()).bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 9970,
        "end_line": 9977,
        "comment": "",
        "child_ranges": [
            "(line 9971,col 5)-(line 9976,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends6()",
        "snippet": "  public void testLends6() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype} */ ({bar: 1}));\" +\n        \"alert((new Foo()).bar);\");\n  }\n",
        "begin_line": 9979,
        "end_line": 9985,
        "comment": "",
        "child_ranges": [
            "(line 9980,col 5)-(line 9984,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends7()",
        "snippet": "  public void testLends7() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype|Foo} */ ({bar: 1}));\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 9987,
        "end_line": 9993,
        "comment": "",
        "child_ranges": [
            "(line 9988,col 5)-(line 9992,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends8()",
        "snippet": "  public void testLends8() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @type {number} */ var Foo = 3;\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\",\n        \"May only lend properties to object types. Foo has type number.\");\n  }\n",
        "begin_line": 9995,
        "end_line": 10001,
        "comment": "",
        "child_ranges": [
            "(line 9996,col 5)-(line 10000,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends9()",
        "snippet": "  public void testLends9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {!Foo} */ ({bar: 1}));\",\n        Lists.newArrayList(\n            \"Bad type annotation. expected closing }\",\n            \"Bad type annotation. missing object name in @lends tag\"));\n  }\n",
        "begin_line": 10003,
        "end_line": 10011,
        "comment": "",
        "child_ranges": [
            "(line 10004,col 5)-(line 10010,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends10()",
        "snippet": "  public void testLends10() throws Exception {\n    testTypes(\n        \"function defineClass(x) { return function() {}; } \" +\n        \"/** @constructor */\" +\n        \"var Foo = defineClass(\" +\n        \"    /** @lends {Foo.prototype} */ ({/** @type {number} */ bar: 1}));\" +\n        \"/** @return {string} */ function f() { return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10013,
        "end_line": 10023,
        "comment": "",
        "child_ranges": [
            "(line 10014,col 5)-(line 10022,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends11()",
        "snippet": "  public void testLends11() throws Exception {\n    testTypes(\n        \"function defineClass(x, y) { return function() {}; } \" +\n        \"/** @constructor */\" +\n        \"var Foo = function() {};\" +\n        \"/** @return {*} */ Foo.prototype.bar = function() { return 3; };\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"var SubFoo = defineClass(Foo, \" +\n        \"    /** @lends {SubFoo.prototype} */ ({\\n\" +\n        \"      /** @return {number} */ bar: function() { return 3; }}));\" +\n        \"/** @return {string} */ function f() { return (new SubFoo()).bar(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10025,
        "end_line": 10042,
        "comment": "",
        "child_ranges": [
            "(line 10026,col 5)-(line 10041,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertTypeEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 10044,
        "end_line": 10048,
        "comment": "",
        "child_ranges": [
            "(line 10045,col 5)-(line 10045,col 76)",
            "(line 10046,col 5)-(line 10047,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertTypeEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 10050,
        "end_line": 10054,
        "comment": "",
        "child_ranges": [
            "(line 10051,col 5)-(line 10051,col 49)",
            "(line 10052,col 5)-(line 10053,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertTypeEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 10056,
        "end_line": 10068,
        "comment": "",
        "child_ranges": [
            "(line 10057,col 5)-(line 10062,col 42)",
            "(line 10065,col 5)-(line 10067,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertTypeEquals(registry.createNullableType(registry.getType(\"Foo\")),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 10070,
        "end_line": 10089,
        "comment": "",
        "child_ranges": [
            "(line 10071,col 5)-(line 10083,col 15)",
            "(line 10086,col 5)-(line 10088,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 10091,
        "end_line": 10099,
        "comment": "",
        "child_ranges": [
            "(line 10092,col 5)-(line 10094,col 41)",
            "(line 10095,col 5)-(line 10095,col 62)",
            "(line 10096,col 5)-(line 10097,col 53)",
            "(line 10098,col 5)-(line 10098,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    MemoizedScopeCreator scopeCreator = new MemoizedScopeCreator(\n        new TypedScopeCreator(compiler));\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 10101,
        "end_line": 10124,
        "comment": "",
        "child_ranges": [
            "(line 10102,col 5)-(line 10102,col 58)",
            "(line 10103,col 5)-(line 10103,col 17)",
            "(line 10104,col 5)-(line 10105,col 41)",
            "(line 10106,col 5)-(line 10106,col 55)",
            "(line 10108,col 5)-(line 10108,col 52)",
            "(line 10110,col 5)-(line 10110,col 41)",
            "(line 10111,col 5)-(line 10111,col 66)",
            "(line 10112,col 5)-(line 10112,col 46)",
            "(line 10114,col 5)-(line 10119,col 31)",
            "(line 10121,col 5)-(line 10121,col 48)",
            "(line 10122,col 5)-(line 10123,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUpdateParameterTypeOnClosure()",
        "snippet": "  public void testUpdateParameterTypeOnClosure() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {*=} opt_value\\n\" +\n        \"* @return {?}\\n\" +\n        \"*/\\n\" +\n        \"function Object(opt_value) {}\\n\" +\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {...*} var_args\\n\" +\n        \"*/\\n\" +\n        \"function Function(var_args) {}\\n\" +\n        \"/**\\n\" +\n        \"* @type {Function}\\n\" +\n        \"*/\\n\" +\n        // The line below sets JSDocInfo on Object so that the type of the\n        // argument to function f has JSDoc through its prototype chain.\n        \"Object.prototype.constructor = function() {};\\n\",\n        \"/**\\n\" +\n        \"* @param {function(): boolean} fn\\n\" +\n        \"*/\\n\" +\n        \"function f(fn) {}\\n\" +\n        \"f(function(g) { });\\n\",\n        null,\n        false);\n  }\n",
        "begin_line": 10126,
        "end_line": 10152,
        "comment": "",
        "child_ranges": [
            "(line 10127,col 5)-(line 10151,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplatedThisType1()",
        "snippet": "  public void testTemplatedThisType1() throws Exception {\n    testTypes(\n        \"/** @constructor */\\n\" +\n        \"function Foo() {}\\n\" +\n        \"/**\\n\" +\n        \" * @this {T}\\n\" +\n        \" * @return {T}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"Foo.prototype.method = function() {};\\n\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {}\\n\" +\n        \"var g = new Bar().method();\\n\" +\n        \"/**\\n\" +\n        \" * @param {number} a\\n\" +\n        \" */\\n\" +\n        \"function compute(a) {};\\n\" +\n        \"compute(g);\\n\",\n\n        \"actual parameter 1 of compute does not match formal parameter\\n\" +\n        \"found   : Bar\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 10154,
        "end_line": 10179,
        "comment": "",
        "child_ranges": [
            "(line 10155,col 5)-(line 10178,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplatedThisType2()",
        "snippet": "  public void testTemplatedThisType2() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @this {Array.<T>|{length:number}}\\n\" +\n        \" * @return {T}\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"Array.prototype.method = function() {};\\n\" +\n        \"(function(){\\n\" +\n        \"  Array.prototype.method.call(arguments);\" +\n        \"})();\");\n  }\n",
        "begin_line": 10181,
        "end_line": 10192,
        "comment": "",
        "child_ranges": [
            "(line 10182,col 5)-(line 10191,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType1()",
        "snippet": "  public void testTemplateType1() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {T} y\\n\" +\n        \"* @param {function(this:T, ...)} z\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y, z) {}\\n\" +\n        \"f(this, this, function() { this });\");\n  }\n",
        "begin_line": 10194,
        "end_line": 10204,
        "comment": "",
        "child_ranges": [
            "(line 10195,col 5)-(line 10203,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType2()",
        "snippet": "  public void testTemplateType2() throws Exception {\n    // \"this\" types need to be coerced for ES3 style function or left\n    // allow for ES5-strict methods.\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(0, function() {});\");\n  }\n",
        "begin_line": 10206,
        "end_line": 10217,
        "comment": "",
        "child_ranges": [
            "(line 10209,col 5)-(line 10216,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTemplateType3()",
        "snippet": "  public void testTemplateType3() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {T} v\\n\" +\n        \" * @param {function(T)} f\\n\" +\n        \" * @template T\\n\" +\n        \" */\\n\" +\n        \"function call(v, f) { f.call(null, v); }\" +\n        \"/** @type {string} */ var s;\" +\n        \"call(3, function(x) {\" +\n        \" x = true;\" +\n        \" s = x;\" +\n        \"});\",\n        \"assignment\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10219,
        "end_line": 10235,
        "comment": "",
        "child_ranges": [
            "(line 10220,col 5)-(line 10234,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.disable_testBadTemplateType4()",
        "snippet": "  public void disable_testBadTemplateType4() throws Exception {\n    // TODO(johnlenz): Add a check for useless of template types.\n    // Unless there are at least two references to a Template type in\n    // a definition it isn't useful.\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 10237,
        "end_line": 10248,
        "comment": "",
        "child_ranges": [
            "(line 10241,col 5)-(line 10247,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.disable_testBadTemplateType5()",
        "snippet": "  public void disable_testBadTemplateType5() throws Exception {\n    // TODO(johnlenz): Add a check for useless of template types.\n    // Unless there are at least two references to a Template type in\n    // a definition it isn't useful.\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"* @return {T}\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n  }\n",
        "begin_line": 10250,
        "end_line": 10262,
        "comment": "",
        "child_ranges": [
            "(line 10254,col 5)-(line 10261,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.disable_testFunctionLiteralUndefinedThisArgument()",
        "snippet": "  public void disable_testFunctionLiteralUndefinedThisArgument()\n      throws Exception {\n    // TODO(johnlenz): this was a weird error.  We should add a general\n    // restriction on what is accepted for T. Something like:\n    // \"@template T of {Object|string}\" or some such.\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; });\",\n        \"Function literal argument refers to undefined this argument\");\n  }\n",
        "begin_line": 10264,
        "end_line": 10278,
        "comment": "",
        "child_ranges": [
            "(line 10269,col 5)-(line 10277,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralDefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; }, {});\");\n  }\n",
        "begin_line": 10280,
        "end_line": 10289,
        "comment": "",
        "child_ranges": [
            "(line 10281,col 5)-(line 10288,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument2()",
        "snippet": "  public void testFunctionLiteralDefinedThisArgument2() throws Exception {\n    testTypes(\"\"\n        + \"/** @param {string} x */ function f(x) {}\"\n        + \"/**\\n\"\n        + \" * @param {?function(this:T, ...)} fn\\n\"\n        + \" * @param {T=} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"function g() { baz(function() { f(this.length); }, []); }\",\n        \"actual parameter 1 of f does not match formal parameter\\n\"\n        + \"found   : number\\n\"\n        + \"required: string\");\n  }\n",
        "begin_line": 10291,
        "end_line": 10304,
        "comment": "",
        "child_ranges": [
            "(line 10292,col 5)-(line 10303,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUnreadNullThisArgument()",
        "snippet": "  public void testFunctionLiteralUnreadNullThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() {}, null);\");\n  }\n",
        "begin_line": 10306,
        "end_line": 10315,
        "comment": "",
        "child_ranges": [
            "(line 10307,col 5)-(line 10314,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionTemplateThisType()",
        "snippet": "  public void testUnionTemplateThisType() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {F|Array} */ function g() { return []; }\" +\n        \"/** @param {F} x */ function h(x) { }\" +\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(g(), function() { h(this); });\",\n        \"actual parameter 1 of h does not match formal parameter\\n\" +\n        \"found   : (Array|F|null)\\n\" +\n        \"required: (F|null)\");\n  }\n",
        "begin_line": 10317,
        "end_line": 10332,
        "comment": "",
        "child_ranges": [
            "(line 10318,col 5)-(line 10331,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testActiveXObject()",
        "snippet": "  public void testActiveXObject() throws Exception {\n    testTypes(\n        \"/** @type {Object} */ var x = new ActiveXObject();\" +\n        \"/** @type { {impossibleProperty} } */ var y = new ActiveXObject();\");\n  }\n",
        "begin_line": 10334,
        "end_line": 10338,
        "comment": "",
        "child_ranges": [
            "(line 10335,col 5)-(line 10337,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType1()",
        "snippet": "  public void testRecordType1() throws Exception {\n    testTypes(\n        \"/** @param {{prop: number}} x */\" +\n        \"function f(x) {}\" +\n        \"f({});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : {prop: (number|undefined)}\\n\" +\n        \"required: {prop: number}\");\n  }\n",
        "begin_line": 10340,
        "end_line": 10348,
        "comment": "",
        "child_ranges": [
            "(line 10341,col 5)-(line 10347,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType2()",
        "snippet": "  public void testRecordType2() throws Exception {\n    testTypes(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"f({});\");\n  }\n",
        "begin_line": 10350,
        "end_line": 10355,
        "comment": "",
        "child_ranges": [
            "(line 10351,col 5)-(line 10354,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType3()",
        "snippet": "  public void testRecordType3() throws Exception {\n    testTypes(\n        \"/** @param {{prop: number}} x */\" +\n        \"function f(x) {}\" +\n        \"f({prop: 'x'});\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : {prop: (number|string)}\\n\" +\n        \"required: {prop: number}\");\n  }\n",
        "begin_line": 10357,
        "end_line": 10365,
        "comment": "",
        "child_ranges": [
            "(line 10358,col 5)-(line 10364,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType4()",
        "snippet": "  public void testRecordType4() throws Exception {\n    // Notice that we do not do flow-based inference on the object type:\n    // We don't try to prove that x.prop may not be string until x\n    // gets passed to g.\n    testClosureTypesMultipleWarnings(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"/** @param {{prop: (string|undefined)}} x */\" +\n        \"function g(x) {}\" +\n        \"var x = {}; f(x); g(x);\",\n        Lists.newArrayList(\n            \"actual parameter 1 of f does not match formal parameter\\n\" +\n            \"found   : {prop: (number|string|undefined)}\\n\" +\n            \"required: {prop: (number|undefined)}\",\n            \"actual parameter 1 of g does not match formal parameter\\n\" +\n            \"found   : {prop: (number|string|undefined)}\\n\" +\n            \"required: {prop: (string|undefined)}\"));\n  }\n",
        "begin_line": 10367,
        "end_line": 10384,
        "comment": "",
        "child_ranges": [
            "(line 10371,col 5)-(line 10383,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType5()",
        "snippet": "  public void testRecordType5() throws Exception {\n    testTypes(\n        \"/** @param {{prop: (number|undefined)}} x */\" +\n        \"function f(x) {}\" +\n        \"/** @param {{otherProp: (string|undefined)}} x */\" +\n        \"function g(x) {}\" +\n        \"var x = {}; f(x); g(x);\");\n  }\n",
        "begin_line": 10386,
        "end_line": 10393,
        "comment": "",
        "child_ranges": [
            "(line 10387,col 5)-(line 10392,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType6()",
        "snippet": "  public void testRecordType6() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|undefined)}} x */\" +\n        \"function f() { return {}; }\");\n  }\n",
        "begin_line": 10395,
        "end_line": 10399,
        "comment": "",
        "child_ranges": [
            "(line 10396,col 5)-(line 10398,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType7()",
        "snippet": "  public void testRecordType7() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|undefined)}} x */\" +\n        \"function f() { var x = {}; g(x); return x; }\" +\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : {prop: (number|undefined)}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 10401,
        "end_line": 10410,
        "comment": "",
        "child_ranges": [
            "(line 10402,col 5)-(line 10409,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testRecordType8()",
        "snippet": "  public void testRecordType8() throws Exception {\n    testTypes(\n        \"/** @return {{prop: (number|string)}} x */\" +\n        \"function f() { var x = {prop: 3}; g(x.prop); return x; }\" +\n        \"/** @param {string} x */\" +\n        \"function g(x) {}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10412,
        "end_line": 10421,
        "comment": "",
        "child_ranges": [
            "(line 10413,col 5)-(line 10420,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields1()",
        "snippet": "  public void testDuplicateRecordFields1() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{x:string, x:number}} a\"\n         + \"*/\"\n         + \"function f(a) {};\",\n         \"Parse error. Duplicate record field x\");\n  }\n",
        "begin_line": 10423,
        "end_line": 10429,
        "comment": "",
        "child_ranges": [
            "(line 10424,col 5)-(line 10428,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateRecordFields2()",
        "snippet": "  public void testDuplicateRecordFields2() throws Exception {\n    testTypes(\"/**\"\n         + \"* @param {{name:string,number:x,number:y}} a\"\n         + \" */\"\n         + \"function f(a) {};\",\n         new String[] {\"Bad type annotation. Unknown type x\",\n           \"Parse error. Duplicate record field number\",\n           \"Bad type annotation. Unknown type y\"});\n  }\n",
        "begin_line": 10431,
        "end_line": 10439,
        "comment": "",
        "child_ranges": [
            "(line 10432,col 5)-(line 10438,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface1()",
        "snippet": "  public void testMultipleExtendsInterface1() throws Exception {\n    testTypes(\"/** @interface */ function base1() {}\\n\"\n        + \"/** @interface */ function base2() {}\\n\"\n        + \"/** @interface\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\");\n  }\n",
        "begin_line": 10441,
        "end_line": 10449,
        "comment": "",
        "child_ranges": [
            "(line 10442,col 5)-(line 10448,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface2()",
        "snippet": "  public void testMultipleExtendsInterface2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int0.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int0 is not implemented by type Foo\");\n  }\n",
        "begin_line": 10451,
        "end_line": 10460,
        "comment": "",
        "child_ranges": [
            "(line 10452,col 5)-(line 10459,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface3()",
        "snippet": "  public void testMultipleExtendsInterface3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @desc description */Int1.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int1 is not implemented by type Foo\");\n  }\n",
        "begin_line": 10462,
        "end_line": 10471,
        "comment": "",
        "child_ranges": [
            "(line 10463,col 5)-(line 10470,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface4()",
        "snippet": "  public void testMultipleExtendsInterface4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \" @extends {number} */\" +\n        \"function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"Int2 @extends non-object type number\");\n  }\n",
        "begin_line": 10473,
        "end_line": 10482,
        "comment": "",
        "child_ranges": [
            "(line 10474,col 5)-(line 10481,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface5()",
        "snippet": "  public void testMultipleExtendsInterface5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @constructor */function Int1() {};\" +\n        \"/** @desc description @ return {string} x */\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Int2 cannot extend this type; interfaces can only extend interfaces\");\n  }\n",
        "begin_line": 10484,
        "end_line": 10492,
        "comment": "",
        "child_ranges": [
            "(line 10485,col 5)-(line 10491,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterface6()",
        "snippet": "  public void testMultipleExtendsInterface6() throws Exception {\n    testTypes(\n        \"/** @interface */function Super1() {};\" +\n        \"/** @interface */function Super2() {};\" +\n        \"/** @param {number} bar */Super2.prototype.foo = function(bar) {};\" +\n        \"/** @interface\\n @extends {Super1}\\n \" +\n        \"@extends {Super2} */function Sub() {};\" +\n        \"/** @override\\n @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super2\\n\" +\n        \"original: function (this:Super2, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 10494,
        "end_line": 10507,
        "comment": "",
        "child_ranges": [
            "(line 10495,col 5)-(line 10506,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceAssignment()",
        "snippet": "  public void testMultipleExtendsInterfaceAssignment() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n         \"/** @type {I1} */var i1 = t;\\n\" +\n         \"/** @type {I2} */var i2 = t;\\n\" +\n         \"/** @type {I3} */var i3 = t;\\n\" +\n         \"i1 = i3;\\n\" +\n         \"i2 = i3;\\n\");\n  }\n",
        "begin_line": 10509,
        "end_line": 10521,
        "comment": "",
        "child_ranges": [
            "(line 10510,col 5)-(line 10520,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceParamPass()",
        "snippet": "  public void testMultipleExtendsInterfaceParamPass() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */ var I2 = function() {}\\n\" +\n        \"/** @interface\\n@extends {I1}\\n@extends {I2}*/\" +\n        \"var I3 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I3}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @param x I1 \\n@param y I2\\n@param z I3*/function foo(x,y,z){};\\n\" +\n        \"foo(t,t,t)\\n\");\n  }\n",
        "begin_line": 10523,
        "end_line": 10532,
        "comment": "",
        "child_ranges": [
            "(line 10524,col 5)-(line 10531,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadMultipleExtendsClass()",
        "snippet": "  public void testBadMultipleExtendsClass() throws Exception {\n    testTypes(\"/** @constructor */ function base1() {}\\n\"\n        + \"/** @constructor */ function base2() {}\\n\"\n        + \"/** @constructor\\n\"\n        + \"* @extends {base1}\\n\"\n        + \"* @extends {base2}\\n\"\n        + \"*/\\n\"\n        + \"function derived() {}\",\n        \"Bad type annotation. type annotation incompatible \"\n        + \"with other annotations\");\n  }\n",
        "begin_line": 10534,
        "end_line": 10544,
        "comment": "",
        "child_ranges": [
            "(line 10535,col 5)-(line 10543,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtendsResolution()",
        "snippet": "  public void testInterfaceExtendsResolution() throws Exception {\n    testTypes(\"/** @interface \\n @extends {A} */ function B() {};\\n\" +\n        \"/** @constructor \\n @implements {B} */ function C() {};\\n\" +\n        \"/** @interface */ function A() {};\");\n  }\n",
        "begin_line": 10546,
        "end_line": 10550,
        "comment": "",
        "child_ranges": [
            "(line 10547,col 5)-(line 10549,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyCanBeDefinedInObject()",
        "snippet": "  public void testPropertyCanBeDefinedInObject() throws Exception {\n    testTypes(\"/** @interface */ function I() {};\" +\n        \"I.prototype.bar = function() {};\" +\n        \"/** @type {Object} */ var foo;\" +\n        \"foo.bar();\");\n  }\n",
        "begin_line": 10552,
        "end_line": 10557,
        "comment": "",
        "child_ranges": [
            "(line 10553,col 5)-(line 10556,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertTypeEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 10559,
        "end_line": 10568,
        "comment": "",
        "child_ranges": [
            "(line 10561,col 5)-(line 10563,col 60)",
            "(line 10564,col 5)-(line 10567,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility1()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility1() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n        \"function Int2() {};\",\n        \"Interface Int2 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 10570,
        "end_line": 10582,
        "comment": "",
        "child_ranges": [
            "(line 10571,col 5)-(line 10581,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility2()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @type {Object} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n        \"@extends {Int2}*/\" +\n        \"function Int3() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int0 and Int1\",\n            \"Interface Int3 has a property foo with incompatible types in \" +\n            \"its super interfaces Int1 and Int2\"\n        });\n  }\n",
        "begin_line": 10584,
        "end_line": 10604,
        "comment": "",
        "child_ranges": [
            "(line 10585,col 5)-(line 10603,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility3()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility3() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 10606,
        "end_line": 10619,
        "comment": "",
        "child_ranges": [
            "(line 10607,col 5)-(line 10618,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility4()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility4() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface \\n @extends {Int0} */ function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @interface */function Int2() {};\" +\n        \"/** @interface \\n @extends {Int2} */ function Int3() {};\" +\n        \"/** @type {string} */\" +\n        \"Int2.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} \\n @extends {Int3} */\" +\n        \"function Int4() {};\",\n        \"Interface Int4 has a property foo with incompatible types in its \" +\n        \"super interfaces Int0 and Int2\");\n  }\n",
        "begin_line": 10621,
        "end_line": 10635,
        "comment": "",
        "child_ranges": [
            "(line 10622,col 5)-(line 10634,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility5()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility5() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {number} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 10637,
        "end_line": 10658,
        "comment": "",
        "child_ranges": [
            "(line 10638,col 5)-(line 10657,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility6()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility6() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {string} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        \"Interface Int3 has a property foo with incompatible types in its\" +\n        \" super interfaces Int0 and Int1\");\n  }\n",
        "begin_line": 10660,
        "end_line": 10678,
        "comment": "",
        "child_ranges": [
            "(line 10661,col 5)-(line 10677,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility7()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility7() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int3 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int1\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\"});\n  }\n",
        "begin_line": 10680,
        "end_line": 10701,
        "comment": "",
        "child_ranges": [
            "(line 10681,col 5)-(line 10700,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility8()",
        "snippet": "  public void testExtendedInterfacePropertiesCompatibility8() throws Exception {\n    testTypes(\n        \"/** @interface */function Int0() {};\" +\n        \"/** @interface */function Int1() {};\" +\n        \"/** @type {number} */\" +\n        \"Int0.prototype.foo;\" +\n        \"/** @type {string} */\" +\n        \"Int1.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n        \"function Int3() {};\" +\n        \"/** @interface */function Int4() {};\" +\n        \"/** @type {Object} */\" +\n        \"Int4.prototype.foo;\" +\n        \"/** @type {Null} */\" +\n        \"Int4.prototype.bar;\" +\n        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n        \"function Int5() {};\",\n        new String[] {\n            \"Interface Int5 has a property bar with incompatible types in its\" +\n            \" super interfaces Int1 and Int4\",\n            \"Interface Int5 has a property foo with incompatible types in its\" +\n            \" super interfaces Int0 and Int4\"});\n  }\n",
        "begin_line": 10703,
        "end_line": 10726,
        "comment": "",
        "child_ranges": [
            "(line 10704,col 5)-(line 10725,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGenerics1()",
        "snippet": "  public void testGenerics1() throws Exception {\n    String FN_DECL = \"/** \\n\" +\n        \" * @param {T} x \\n\" +\n        \" * @param {function(T):T} y \\n\" +\n        \" * @template T\\n\" +\n        \" */ \\n\" +\n        \"function f(x,y) { return y(x); }\\n\";\n\n    testTypes(\n        FN_DECL +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"/** @type {string} */\" +\n        \"var result = f('hi', function(x){ out = x; return x; });\");\n\n    testTypes(\n        FN_DECL +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"var result = f(0, function(x){ out = x; return x; });\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n\n    testTypes(\n        FN_DECL +\n        \"var out;\" +\n        \"/** @type {string} */\" +\n        \"var result = f(0, function(x){ out = x; return x; });\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10728,
        "end_line": 10760,
        "comment": "",
        "child_ranges": [
            "(line 10729,col 5)-(line 10734,col 45)",
            "(line 10736,col 5)-(line 10741,col 68)",
            "(line 10743,col 5)-(line 10750,col 28)",
            "(line 10752,col 5)-(line 10759,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.disable_testBackwardsInferenceGoogArrayFilter1()",
        "snippet": "  public void disable_testBackwardsInferenceGoogArrayFilter1()\n      throws Exception {\n    // TODO(johnlenz): this doesn't fail because any Array is regarded as\n    // a subtype of any other array regardless of the type parameter.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"/** @type {Array.<number>} */\" +\n        \"var result = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,src) {return false;});\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 10762,
        "end_line": 10777,
        "comment": "",
        "child_ranges": [
            "(line 10766,col 5)-(line 10776,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter2()",
        "snippet": "  public void testBackwardsInferenceGoogArrayFilter2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {number} */\" +\n        \"var out;\" +\n        \"/** @type {Array.<string>} */\" +\n        \"var arr;\\n\" +\n        \"var out4 = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,src) {out = item;});\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 10779,
        "end_line": 10792,
        "comment": "",
        "child_ranges": [
            "(line 10780,col 5)-(line 10791,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter3()",
        "snippet": "  public void testBackwardsInferenceGoogArrayFilter3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"/** @type {Array.<string>} */ var arr;\\n\" +\n        \"var result = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,src) {out = index;});\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10794,
        "end_line": 10806,
        "comment": "",
        "child_ranges": [
            "(line 10795,col 5)-(line 10805,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter4()",
        "snippet": "  public void testBackwardsInferenceGoogArrayFilter4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string} */\" +\n        \"var out;\" +\n        \"/** @type {Array.<string>} */ var arr;\\n\" +\n        \"var out4 = goog.array.filter(\" +\n        \"   arr,\" +\n        \"   function(item,index,srcArr) {out = srcArr;});\",\n        \"assignment\\n\" +\n        \"found   : (null|{length: number})\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 10808,
        "end_line": 10820,
        "comment": "",
        "child_ranges": [
            "(line 10809,col 5)-(line 10819,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 10822,
        "end_line": 10824,
        "comment": "",
        "child_ranges": [
            "(line 10823,col 5)-(line 10823,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 10826,
        "end_line": 10828,
        "comment": "",
        "child_ranges": [
            "(line 10827,col 5)-(line 10827,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 10830,
        "end_line": 10832,
        "comment": "",
        "child_ranges": [
            "(line 10831,col 5)-(line 10831,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 10834,
        "end_line": 10838,
        "comment": "",
        "child_ranges": [
            "(line 10836,col 5)-(line 10837,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(\n        \"unexpected error(s) : \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          descriptions.size(), compiler.getWarningCount());\n      Set<String> actualWarningDescriptions = Sets.newHashSet();\n      for (int i = 0; i < descriptions.size(); i++) {\n        actualWarningDescriptions.add(compiler.getWarnings()[i].description);\n      }\n      assertEquals(\n          Sets.newHashSet(descriptions), actualWarningDescriptions);\n    }\n  }\n",
        "begin_line": 10840,
        "end_line": 10887,
        "comment": "",
        "child_ranges": [
            "(line 10842,col 5)-(line 10842,col 40)",
            "(line 10843,col 5)-(line 10843,col 41)",
            "(line 10844,col 5)-(line 10844,col 61)",
            "(line 10845,col 5)-(line 10845,col 46)",
            "(line 10847,col 5)-(line 10849,col 37)",
            "(line 10852,col 5)-(line 10853,col 26)",
            "(line 10855,col 5)-(line 10855,col 65)",
            "(line 10856,col 5)-(line 10863,col 36)",
            "(line 10865,col 5)-(line 10868,col 37)",
            "(line 10870,col 5)-(line 10886,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 10889,
        "end_line": 10892,
        "comment": "",
        "child_ranges": [
            "(line 10891,col 5)-(line 10891,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 10894,
        "end_line": 10919,
        "comment": "",
        "child_ranges": [
            "(line 10896,col 5)-(line 10896,col 44)",
            "(line 10898,col 5)-(line 10898,col 44)",
            "(line 10899,col 5)-(line 10904,col 5)",
            "(line 10905,col 5)-(line 10907,col 5)",
            "(line 10909,col 5)-(line 10909,col 48)",
            "(line 10910,col 5)-(line 10915,col 5)",
            "(line 10916,col 5)-(line 10918,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 10924,
        "end_line": 10926,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 10925,col 5)-(line 10925,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 10928,
        "end_line": 10930,
        "comment": "",
        "child_ranges": [
            "(line 10929,col 5)-(line 10929,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 10936,
        "end_line": 10938,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 10937,col 5)-(line 10937,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(SourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(SourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(new InputId(\"[testcode]\")).getAstRoot(compiler);\n    Node externsNode = compiler.getInput(new InputId(\"[externs]\"))\n        .getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 10940,
        "end_line": 10959,
        "comment": "",
        "child_ranges": [
            "(line 10942,col 5)-(line 10945,col 31)",
            "(line 10947,col 5)-(line 10947,col 79)",
            "(line 10948,col 5)-(line 10949,col 30)",
            "(line 10950,col 5)-(line 10950,col 65)",
            "(line 10951,col 5)-(line 10951,col 46)",
            "(line 10953,col 5)-(line 10955,col 37)",
            "(line 10957,col 5)-(line 10957,col 64)",
            "(line 10958,col 5)-(line 10958,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 10961,
        "end_line": 10968,
        "comment": "",
        "child_ranges": [
            "(line 10962,col 5)-(line 10962,col 45)",
            "(line 10963,col 5)-(line 10963,col 65)",
            "(line 10964,col 5)-(line 10964,col 46)",
            "(line 10966,col 5)-(line 10966,col 47)",
            "(line 10967,col 5)-(line 10967,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry,\n        reportMissingOverrides,\n        CheckLevel.OFF);\n  }\n",
        "begin_line": 10970,
        "end_line": 10978,
        "comment": "",
        "child_ranges": [
            "(line 10971,col 5)-(line 10977,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 10980,
        "end_line": 10998,
        "comment": "",
        "child_ranges": [
            "(line 10981,col 5)-(line 10981,col 40)",
            "(line 10982,col 5)-(line 10982,col 46)",
            "(line 10983,col 5)-(line 10983,col 45)",
            "(line 10984,col 5)-(line 10984,col 65)",
            "(line 10986,col 5)-(line 10986,col 47)",
            "(line 10987,col 5)-(line 10987,col 46)",
            "(line 10988,col 5)-(line 10997,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 11000,
        "end_line": 11006,
        "comment": "",
        "child_ranges": [
            "(line 11001,col 5)-(line 11001,col 43)",
            "(line 11002,col 5)-(line 11004,col 5)",
            "(line 11005,col 5)-(line 11005,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 11012,
        "end_line": 11015,
        "comment": "",
        "child_ranges": [
            "(line 11013,col 7)-(line 11013,col 23)",
            "(line 11014,col 7)-(line 11014,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.MISPLACED_TYPE_ANNOTATION, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 90,col 52)",
            "(line 91,col 5)-(line 91,col 52)",
            "(line 92,col 5)-(line 93,col 65)",
            "(line 94,col 5)-(line 95,col 72)",
            "(line 96,col 5)-(line 96,col 55)",
            "(line 97,col 5)-(line 97,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.LooseTypeCheckTest",
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    compiler = new Compiler();\n    compiler.initOptions(getOptions());\n    registry = compiler.getTypeRegistry();\n    initTypes();\n  }\n",
        "begin_line": 104,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 30)",
            "(line 107,col 5)-(line 107,col 39)",
            "(line 108,col 5)-(line 108,col 42)",
            "(line 109,col 5)-(line 109,col 16)"
        ]
    }
]