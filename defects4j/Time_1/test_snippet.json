[
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestPartial_Constructors.class);\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 61)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.TestPartial_Constructors(java.lang.String)",
        "snippet": "    public TestPartial_Constructors(String name) {\n        super(name);\n    }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 9)-(line 56,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        zone = DateTimeZone.getDefault();\n        DateTimeZone.setDefault(LONDON);\n    }\n",
        "begin_line": 59,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 59)",
            "(line 61,col 9)-(line 61,col 41)",
            "(line 62,col 9)-(line 62,col 40)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(zone);\n        zone = null;\n    }\n",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 66,col 9)-(line 66,col 47)",
            "(line 67,col 9)-(line 67,col 38)",
            "(line 68,col 9)-(line 68,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor()",
        "snippet": "    public void testConstructor() throws Throwable {\n        Partial test = new Partial();\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(0, test.size());\n    }\n",
        "begin_line": 75,
        "end_line": 79,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 37)",
            "(line 77,col 9)-(line 77,col 52)",
            "(line 78,col 9)-(line 78,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor_Chrono()",
        "snippet": "    public void testConstructor_Chrono() throws Throwable {\n        Partial test = new Partial((Chronology) null);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(0, test.size());\n        \n        test = new Partial(GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(0, test.size());\n    }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 54)",
            "(line 87,col 9)-(line 87,col 52)",
            "(line 88,col 9)-(line 88,col 37)",
            "(line 90,col 9)-(line 90,col 44)",
            "(line 91,col 9)-(line 91,col 58)",
            "(line 92,col 9)-(line 92,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor_Type_int()",
        "snippet": "    public void testConstructor_Type_int() throws Throwable {\n        Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(1, test.size());\n        assertEquals(4, test.getValue(0));\n        assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n    }\n",
        "begin_line": 99,
        "end_line": 106,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 69)",
            "(line 101,col 9)-(line 101,col 52)",
            "(line 102,col 9)-(line 102,col 37)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 65)",
            "(line 105,col 9)-(line 105,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx1_Type_int()",
        "snippet": "    public void testConstructorEx1_Type_int() throws Throwable {\n        try {\n            new Partial(null, 4);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not be null\");\n        }\n    }\n",
        "begin_line": 111,
        "end_line": 118,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 117,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx2_Type_int()",
        "snippet": "    public void testConstructorEx2_Type_int() throws Throwable {\n        try {\n            new Partial(DateTimeFieldType.dayOfYear(), 0);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 123,
        "end_line": 130,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 129,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor_Type_int_Chrono()",
        "snippet": "    public void testConstructor_Type_int_Chrono() throws Throwable {\n        Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(1, test.size());\n        assertEquals(4, test.getValue(0));\n        assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n    }\n",
        "begin_line": 136,
        "end_line": 143,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 86)",
            "(line 138,col 9)-(line 138,col 58)",
            "(line 139,col 9)-(line 139,col 37)",
            "(line 140,col 9)-(line 140,col 42)",
            "(line 141,col 9)-(line 141,col 65)",
            "(line 142,col 9)-(line 142,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx_Type_int_Chrono()",
        "snippet": "    public void testConstructorEx_Type_int_Chrono() throws Throwable {\n        try {\n            new Partial(null, 4, ISO_UTC);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not be null\");\n        }\n    }\n",
        "begin_line": 148,
        "end_line": 155,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 154,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx2_Type_int_Chrono()",
        "snippet": "    public void testConstructorEx2_Type_int_Chrono() throws Throwable {\n        try {\n            new Partial(DateTimeFieldType.dayOfYear(), 0, ISO_UTC);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 161,col 9)-(line 166,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor_TypeArray_intArray()",
        "snippet": "    public void testConstructor_TypeArray_intArray() throws Throwable {\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(),\n            DateTimeFieldType.dayOfYear()\n        };\n        int[] values = new int[] {2005, 33};\n        Partial test = new Partial(types, values);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(2, test.size());\n        assertEquals(2005, test.getValue(0));\n        assertEquals(2005, test.get(DateTimeFieldType.year()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n        assertEquals(33, test.getValue(1));\n        assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n        assertEquals(true, Arrays.equals(test.getFieldTypes(), types));\n        assertEquals(true, Arrays.equals(test.getValues(), values));\n    }\n",
        "begin_line": 173,
        "end_line": 190,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 177,col 10)",
            "(line 178,col 9)-(line 178,col 44)",
            "(line 179,col 9)-(line 179,col 50)",
            "(line 180,col 9)-(line 180,col 52)",
            "(line 181,col 9)-(line 181,col 37)",
            "(line 182,col 9)-(line 182,col 45)",
            "(line 183,col 9)-(line 183,col 63)",
            "(line 184,col 9)-(line 184,col 71)",
            "(line 185,col 9)-(line 185,col 43)",
            "(line 186,col 9)-(line 186,col 66)",
            "(line 187,col 9)-(line 187,col 76)",
            "(line 188,col 9)-(line 188,col 71)",
            "(line 189,col 9)-(line 189,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor2_TypeArray_intArray()",
        "snippet": "    public void testConstructor2_TypeArray_intArray() throws Throwable {\n        DateTimeFieldType[] types = new DateTimeFieldType[0];\n        int[] values = new int[0];\n        Partial test = new Partial(types, values);\n        assertEquals(ISO_UTC, test.getChronology());\n        assertEquals(0, test.size());\n    }\n",
        "begin_line": 195,
        "end_line": 201,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 196,col 61)",
            "(line 197,col 9)-(line 197,col 34)",
            "(line 198,col 9)-(line 198,col 50)",
            "(line 199,col 9)-(line 199,col 52)",
            "(line 200,col 9)-(line 200,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx1_TypeArray_intArray()",
        "snippet": "    public void testConstructorEx1_TypeArray_intArray() throws Throwable {\n        try {\n            new Partial((DateTimeFieldType[]) null, new int[] {1});\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not be null\");\n        }\n    }\n",
        "begin_line": 206,
        "end_line": 213,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 207,col 9)-(line 212,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx3_TypeArray_intArray()",
        "snippet": "    public void testConstructorEx3_TypeArray_intArray() throws Throwable {\n        try {\n            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not be null\");\n        }\n    }\n",
        "begin_line": 218,
        "end_line": 225,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 219,col 9)-(line 224,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx5_TypeArray_intArray()",
        "snippet": "    public void testConstructorEx5_TypeArray_intArray() throws Throwable {\n        try {\n            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, new int[2]);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"same length\");\n        }\n    }\n",
        "begin_line": 230,
        "end_line": 237,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 231,col 9)-(line 236,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx6_TypeArray_intArray()",
        "snippet": "    public void testConstructorEx6_TypeArray_intArray() throws Throwable {\n        try {\n            new Partial(new DateTimeFieldType[] {null, DateTimeFieldType.dayOfYear()}, new int[2]);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"contain null\");\n        }\n        try {\n            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear(), null}, new int[2]);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"contain null\");\n        }\n    }\n",
        "begin_line": 242,
        "end_line": 255,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 243,col 9)-(line 248,col 9)",
            "(line 249,col 9)-(line 254,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx7_TypeArray_intArray()",
        "snippet": "    public void testConstructorEx7_TypeArray_intArray() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n        }\n    }\n",
        "begin_line": 260,
        "end_line": 315,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 43)",
            "(line 262,col 9)-(line 263,col 104)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 271,col 9)-(line 272,col 104)",
            "(line 273,col 9)-(line 278,col 9)",
            "(line 280,col 9)-(line 281,col 97)",
            "(line 282,col 9)-(line 287,col 9)",
            "(line 289,col 9)-(line 290,col 96)",
            "(line 291,col 9)-(line 296,col 9)",
            "(line 298,col 9)-(line 299,col 102)",
            "(line 300,col 9)-(line 305,col 9)",
            "(line 307,col 9)-(line 308,col 101)",
            "(line 309,col 9)-(line 314,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx8_TypeArray_intArray()",
        "snippet": "    public void testConstructorEx8_TypeArray_intArray() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not\", \"duplicate\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not\", \"duplicate\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not\", \"duplicate\");\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() };\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not\", \"duplicate\");\n        }\n    }\n",
        "begin_line": 320,
        "end_line": 357,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 43)",
            "(line 322,col 9)-(line 323,col 90)",
            "(line 324,col 9)-(line 329,col 9)",
            "(line 331,col 9)-(line 332,col 96)",
            "(line 333,col 9)-(line 338,col 9)",
            "(line 340,col 9)-(line 341,col 108)",
            "(line 342,col 9)-(line 347,col 9)",
            "(line 349,col 9)-(line 350,col 112)",
            "(line 351,col 9)-(line 356,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx9_TypeArray_intArray()",
        "snippet": "    public void testConstructorEx9_TypeArray_intArray() throws Throwable {\n        int[] values = new int[] {3, 0};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfWeek()};\n        try {\n            new Partial(types, values);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 362,
        "end_line": 372,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 40)",
            "(line 364,col 9)-(line 365,col 75)",
            "(line 366,col 9)-(line 371,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor_TypeArray_intArray_Chrono()",
        "snippet": "    public void testConstructor_TypeArray_intArray_Chrono() throws Throwable {\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(),\n            DateTimeFieldType.dayOfYear()\n        };\n        int[] values = new int[] {2005, 33};\n        Partial test = new Partial(types, values, GREGORIAN_PARIS);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(2, test.size());\n        assertEquals(2005, test.getValue(0));\n        assertEquals(2005, test.get(DateTimeFieldType.year()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n        assertEquals(33, test.getValue(1));\n        assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n        assertEquals(true, Arrays.equals(test.getFieldTypes(), types));\n        assertEquals(true, Arrays.equals(test.getValues(), values));\n    }\n",
        "begin_line": 378,
        "end_line": 395,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 379,col 9)-(line 382,col 10)",
            "(line 383,col 9)-(line 383,col 44)",
            "(line 384,col 9)-(line 384,col 67)",
            "(line 385,col 9)-(line 385,col 58)",
            "(line 386,col 9)-(line 386,col 37)",
            "(line 387,col 9)-(line 387,col 45)",
            "(line 388,col 9)-(line 388,col 63)",
            "(line 389,col 9)-(line 389,col 71)",
            "(line 390,col 9)-(line 390,col 43)",
            "(line 391,col 9)-(line 391,col 66)",
            "(line 392,col 9)-(line 392,col 76)",
            "(line 393,col 9)-(line 393,col 71)",
            "(line 394,col 9)-(line 394,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructor_Partial()",
        "snippet": "    @SuppressWarnings(\"deprecation\")\n    public void testConstructor_Partial() throws Throwable {\n        YearMonthDay ymd = new YearMonthDay(2005, 6, 25, GREGORIAN_PARIS);\n        Partial test = new Partial(ymd);\n        assertEquals(GREGORIAN_UTC, test.getChronology());\n        assertEquals(3, test.size());\n        assertEquals(2005, test.getValue(0));\n        assertEquals(2005, test.get(DateTimeFieldType.year()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n        assertEquals(6, test.getValue(1));\n        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n        assertEquals(25, test.getValue(2));\n        assertEquals(25, test.get(DateTimeFieldType.dayOfMonth()));\n        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n    }\n",
        "begin_line": 401,
        "end_line": 416,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 74)",
            "(line 404,col 9)-(line 404,col 40)",
            "(line 405,col 9)-(line 405,col 58)",
            "(line 406,col 9)-(line 406,col 37)",
            "(line 407,col 9)-(line 407,col 45)",
            "(line 408,col 9)-(line 408,col 63)",
            "(line 409,col 9)-(line 409,col 71)",
            "(line 410,col 9)-(line 410,col 42)",
            "(line 411,col 9)-(line 411,col 67)",
            "(line 412,col 9)-(line 412,col 78)",
            "(line 413,col 9)-(line 413,col 43)",
            "(line 414,col 9)-(line 414,col 67)",
            "(line 415,col 9)-(line 415,col 77)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.testConstructorEx_Partial()",
        "snippet": "    public void testConstructorEx_Partial() throws Throwable {\n        try {\n            new Partial((ReadablePartial) null);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must not be null\");\n        }\n    }\n",
        "begin_line": 421,
        "end_line": 428,
        "comment": "\n     * Test constructor\n     ",
        "child_ranges": [
            "(line 422,col 9)-(line 427,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.assertMessageContains(java.lang.Exception, java.lang.String)",
        "snippet": "    private void assertMessageContains(Exception ex, String str) {\n        assertEquals(ex.getMessage() + \": \" + str, true, ex.getMessage().indexOf(str) >= 0);\n    }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "\n     * Checks if the exception message is valid.\n     * \n     * @param ex  the exception to check\n     * @param str  the string to check\n     ",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 92)"
        ]
    },
    {
        "class_name": "org.joda.time.TestPartial_Constructors",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "signature": "org.joda.time.TestPartial_Constructors.assertMessageContains(java.lang.Exception, java.lang.String, java.lang.String)",
        "snippet": "    private void assertMessageContains(Exception ex, String str1, String str2) {\n        assertEquals(ex.getMessage() + \": \" + str1 + \"/\" + str2, true,\n            ex.getMessage().indexOf(str1) >= 0 &&\n            ex.getMessage().indexOf(str2) >= 0 &&\n            ex.getMessage().indexOf(str1) < ex.getMessage().indexOf(str2));\n    }\n",
        "begin_line": 448,
        "end_line": 453,
        "comment": "\n     * Checks if the exception message is valid.\n     * \n     * @param ex  the exception to check\n     * @param str1  the string to check\n     * @param str2  the string to check\n     ",
        "child_ranges": [
            "(line 449,col 9)-(line 452,col 75)"
        ]
    }
]