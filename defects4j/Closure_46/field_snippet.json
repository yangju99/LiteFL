[
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCENAME_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PARENTHESIZED_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BRACELESS_TYPE",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FREE_CALL",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LENGTH",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INPUT_ID",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SLASH_V",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "  public static final int\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      LAST_PROP          = 54;",
        "begin_line": 67,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 112,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 112,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 152,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "    private double number;",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "    private String str;",
        "begin_line": 249,
        "end_line": 249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 263,
        "end_line": 263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.next",
        "snippet": "    private final PropListItem next;",
        "begin_line": 265,
        "end_line": 265,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.propType",
        "snippet": "    private final int propType;",
        "begin_line": 266,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 290,
        "end_line": 290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.objectValue",
        "snippet": "    private final Object objectValue;",
        "begin_line": 292,
        "end_line": 292,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 322,
        "end_line": 322,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.intValue",
        "snippet": "    final int intValue;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "  int type;              // type of the node; Token.NAME for example",
        "begin_line": 1021,
        "end_line": 1021,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "  Node next;             // next sibling",
        "begin_line": 1022,
        "end_line": 1022,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "  private Node first;    // first element of a linked list of children",
        "begin_line": 1023,
        "end_line": 1023,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "  private Node last;     // last element of a linked list of children",
        "begin_line": 1024,
        "end_line": 1024,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "  private PropListItem propListHead;",
        "begin_line": 1032,
        "end_line": 1032,
        "comment": "\n   * Linked list of properties. Since vast majority of nodes would have\n   * no more then 2 properties, linked list saves memory and provides\n   * fast lookup. If this does not holds, propListHead can be replaced\n   * by UintMap.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "  public static final int COLUMN_BITS = 12;",
        "begin_line": 1042,
        "end_line": 1042,
        "comment": "\n   * COLUMN_BITS represents how many of the lower-order bits of\n   * sourcePosition are reserved for storing the column number.\n   * Bits above these store the line number.\n   * This gives us decent position information for everything except\n   * files already passed through a minimizer, where lines might\n   * be longer than 4096 characters.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "  public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1049,
        "end_line": 1049,
        "comment": "\n   * MAX_COLUMN_NUMBER represents the maximum column number that can\n   * be represented.  JSCompiler's modifications to Rhino cause all\n   * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "  public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1056,
        "end_line": 1056,
        "comment": "\n   * COLUMN_MASK stores a value where bits storing the column number\n   * are set, and bits storing the line are not set.  It's handy for\n   * separating column number from line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "  private int sourcePosition;",
        "begin_line": 1064,
        "end_line": 1064,
        "comment": "\n   * Source position of this node. The position is encoded with the\n   * column number in the low 12 bits of the integer, and the line\n   * number in the rest.  Create some handy constants so we can change this\n   * size if we want.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "  private JSType jsType;",
        "begin_line": 1066,
        "end_line": 1066,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "  private Node parent;",
        "begin_line": 1068,
        "end_line": 1068,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "    private final Node start;",
        "begin_line": 1241,
        "end_line": 1241,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "    private Node current;",
        "begin_line": 1242,
        "end_line": 1242,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "    private boolean used;",
        "begin_line": 1243,
        "end_line": 1243,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "    private Node cur;",
        "begin_line": 1326,
        "end_line": 1326,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",
        "snippet": "  final public static int FLAG_GLOBAL_STATE_UNMODIFIED = 1;",
        "begin_line": 1956,
        "end_line": 1956,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",
        "snippet": "  final public static int FLAG_THIS_UNMODIFIED = 2;",
        "begin_line": 1957,
        "end_line": 1957,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",
        "snippet": "  final public static int FLAG_ARGUMENTS_UNMODIFIED = 4;",
        "begin_line": 1958,
        "end_line": 1958,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_NO_THROWS",
        "snippet": "  final public static int FLAG_NO_THROWS = 8;",
        "begin_line": 1959,
        "end_line": 1959,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",
        "snippet": "  final public static int FLAG_LOCAL_RESULTS = 16;",
        "begin_line": 1960,
        "end_line": 1960,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",
        "snippet": "  final public static int SIDE_EFFECTS_FLAGS_MASK = 31;",
        "begin_line": 1962,
        "end_line": 1962,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",
        "snippet": "  final public static int SIDE_EFFECTS_ALL = 0;",
        "begin_line": 1964,
        "end_line": 1964,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",
        "snippet": "  final public static int NO_SIDE_EFFECTS =\n    FLAG_GLOBAL_STATE_UNMODIFIED\n    | FLAG_THIS_UNMODIFIED\n    | FLAG_ARGUMENTS_UNMODIFIED\n    | FLAG_NO_THROWS;",
        "begin_line": 1965,
        "end_line": 1969,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SideEffectFlags",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SideEffectFlags.value",
        "snippet": "    private int value = Node.SIDE_EFFECTS_ALL;",
        "begin_line": 2001,
        "end_line": 2001,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "    final Node nodeA;",
        "begin_line": 2114,
        "end_line": 2114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "    final Node nodeB;",
        "begin_line": 2115,
        "end_line": 2115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 73,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 76,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 79,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 82,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 90,
        "end_line": 95,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 1134,
        "end_line": 1134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 1135,
        "end_line": 1135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "signature": "com.google.javascript.rhino.jstype.RecordType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "signature": "com.google.javascript.rhino.jstype.RecordType.properties",
        "snippet": "  private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordType",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordType.java",
        "signature": "com.google.javascript.rhino.jstype.RecordType.isFrozen",
        "snippet": "  private boolean isFrozen = false;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedType",
        "snippet": "  private JSType referencedType;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedObjType",
        "snippet": "  private ObjectType referencedObjType;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototypeSlot",
        "snippet": "  private Property prototypeSlot;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   *\n   * If non-null, the type must be a PrototypeObjectType.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private ObjectType typeOfThis;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 110,
        "end_line": 110,
        "comment": "\n   * The interfaces directly implemented by this function (for constructors)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = ImmutableList.of();",
        "begin_line": 116,
        "end_line": 116,
        "comment": "\n   * The interfaces directly extendeded by this function (for interfaces)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 122,
        "end_line": 122,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 127,
        "end_line": 127,
        "comment": "\n   * The template type name. May be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.isEmpty",
        "snippet": "  private boolean isEmpty = true;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeBuilder.properties",
        "snippet": "  private final HashMap<String, RecordProperty> properties = Maps.newHashMap();",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordProperty",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordProperty.type",
        "snippet": "    private final JSType type;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordProperty",
        "src_path": "src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.RecordProperty.propertyNode",
        "snippet": "    private final Node propertyNode;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeFallback",
        "snippet": "  private ObjectType implicitPrototypeFallback;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " some subclasses override this to do special resolution handling."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.ownerFunction",
        "snippet": "  private FunctionType ownerFunction = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " to do this for multiple functions, then we'll have to create a new one."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.prettyPrint",
        "snippet": "  private boolean prettyPrint = false;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " by printing all properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",
        "snippet": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.primitiveType",
        "snippet": "  private JSType primitiveType;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n   * The primitive type this enum element type wraps. For instance, in\n   * the following code defining the {@code LOCAL_CODES} enum\n   * <pre>var LOCAL_CODES = {A: 3, B: 9, C: 8}</pre>\n   * the primitive type of the the constants is {@code number}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.primitiveObjectType",
        "snippet": "  private ObjectType primitiveObjectType;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The primitive type, if it is an object."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumElementType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumElementType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumElementType.name",
        "snippet": "  private final String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.reference",
        "snippet": "  private final String reference;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.lineno",
        "snippet": "  private final int lineno;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.charno",
        "snippet": "  private final int charno;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.validator",
        "snippet": "  private Predicate<JSType> validator;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n   * Validates the type resolution.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NamedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.NamedType.propertyContinuations",
        "snippet": "  private List<PropertyContinuation> propertyContinuations = null;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n   * Property-defining continuations.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.propertyName",
        "snippet": "    private final String propertyName;",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.type",
        "snippet": "    private final JSType type;",
        "begin_line": 404,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 405,
        "end_line": 405,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyContinuation",
        "src_path": "src/com/google/javascript/rhino/jstype/NamedType.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyContinuation.propertyNode",
        "snippet": "    private final Node propertyNode;",
        "begin_line": 406,
        "end_line": 406,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",
        "snippet": "  private static final int DEFAULT_MAX_UNION_SIZE = 20;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.maxUnionSize",
        "snippet": "  private final int maxUnionSize;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.functionTypePosition",
        "snippet": "  private int functionTypePosition = -1;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " one structural function, or just bails out and uses the top function type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Collection<JSType> alternates;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private final int hashcode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.name",
        "snippet": "  private String name = null;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.sourceNode",
        "snippet": "  private Node sourceNode = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.typeOfThis",
        "snippet": "  private ObjectType typeOfThis = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.templateTypeName",
        "snippet": "  private String templateTypeName = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.inferredReturnType",
        "snippet": "  private boolean inferredReturnType = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isNativeType",
        "snippet": "  private boolean isNativeType = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.PARAM_LIST);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.source",
        "snippet": "  private final Node source;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * The object literal or alias which this type represents.\n   * It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.elementsType",
        "snippet": "  private EnumElementType elementsType;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " the type of the individual elements"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.EnumType",
        "src_path": "src/com/google/javascript/rhino/jstype/EnumType.java",
        "signature": "com.google.javascript.rhino.jstype.EnumType.elements",
        "snippet": "  private final Set<String> elements = new HashSet<String>();",
        "begin_line": 68,
        "end_line": 68,
        "comment": " the elements' names (they all have the same type)"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnTypeInferred",
        "snippet": "  final boolean returnTypeInferred;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Whether the return type is inferred."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 573,
        "end_line": 573,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.name",
        "snippet": "    private final String name;",
        "begin_line": 578,
        "end_line": 578,
        "comment": "\n     * Property's name.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "    private JSType type;",
        "begin_line": 583,
        "end_line": 583,
        "comment": "\n     * Property's type.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 588,
        "end_line": 588,
        "comment": "\n     * Whether the property's type is inferred.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.propertyNode",
        "snippet": "    private Node propertyNode;",
        "begin_line": 594,
        "end_line": 594,
        "comment": "\n     * The node corresponding to this property, e.g., a GETPROP node that\n     * declares this property.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 597,
        "end_line": 597,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.name",
        "snippet": "  final String name;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.type",
        "snippet": "  final JSType type;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.inferred",
        "snippet": "  final boolean inferred;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",
        "snippet": "  private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n   * The UnionTypeBuilder caps the maximum number of alternate types it\n   * remembers and then defaults to \"?\" (unknown type). By default this max\n   * is 20, but it's very easy for the same property to appear on more than 20\n   * types. Use larger unions for property checking. 3000 was picked\n   * semi-randomly for use by the Google+ FE project.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nonNullableTypeNames",
        "snippet": "  private final Set<String> nonNullableTypeNames = new HashSet<String>();",
        "begin_line": 118,
        "end_line": 118,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 123,
        "end_line": 123,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, UnionTypeBuilder> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 127,
        "end_line": 128,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.eachRefTypeIndexedByProperty",
        "snippet": "  private final Map<String, Map<String, ObjectType>>\n      eachRefTypeIndexedByProperty = Maps.newHashMap();",
        "begin_line": 133,
        "end_line": 134,
        "comment": " for de-duping."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 139,
        "end_line": 140,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      LinkedHashMultimap.create();",
        "begin_line": 143,
        "end_line": 144,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 147,
        "end_line": 148,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 151,
        "end_line": 152,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateType",
        "snippet": "  private TemplateType templateType;",
        "begin_line": 161,
        "end_line": 161,
        "comment": " The template type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.tolerateUndefinedValues",
        "snippet": "  private final boolean tolerateUndefinedValues;",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolveMode",
        "snippet": "  private ResolveMode resolveMode = ResolveMode.LAZY_NAMES;",
        "begin_line": 193,
        "end_line": 193,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 520,
        "end_line": 520,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    }
]