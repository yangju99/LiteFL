[
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    recordType = builder.build();\n\n    enumType = new EnumType(registry, \"Enum\", null, NUMBER_TYPE);\n    elementsType = enumType.getElementsType();\n    functionType = new FunctionBuilder(registry)\n        .withReturnType(NUMBER_TYPE)\n        .build();\n    dateMethod = new FunctionBuilder(registry)\n        .withParamsNode(new Node(Token.PARAM_LIST))\n        .withReturnType(NUMBER_TYPE)\n        .withTypeOfThis(DATE_TYPE)\n        .build();\n    unresolvedNamedType =\n        new NamedType(registry, \"not.resolved.named.type\", null, -1, -1);\n    namedGoogBar = new NamedType(registry, \"goog.Bar\", null, -1, -1);\n\n    subclassCtor =\n        new FunctionType(registry, null, null, createArrowType(null),\n            null, null, true, false);\n    subclassCtor.setPrototypeBasedOn(unresolvedNamedType);\n    subclassOfUnresolvedNamedType = subclassCtor.getInstanceType();\n\n    interfaceType = FunctionType.forInterface(registry, \"Interface\", null);\n    interfaceInstType = interfaceType.getInstanceType();\n\n    subInterfaceType = FunctionType.forInterface(\n        registry, \"SubInterface\", null);\n    subInterfaceType.setExtendedInterfaces(\n        Lists.<ObjectType>newArrayList(interfaceInstType));\n    subInterfaceInstType = subInterfaceType.getInstanceType();\n\n    googBar = registry.createConstructorType(\"goog.Bar\", null, null, null);\n    googBar.getPrototype().defineDeclaredProperty(\"date\", DATE_TYPE,\n        null);\n    googBar.setImplementedInterfaces(\n        Lists.<ObjectType>newArrayList(interfaceInstType));\n    googBarInst = googBar.getInstanceType();\n\n    googSubBar = registry.createConstructorType(\n        \"googSubBar\", null, null, null);\n    googSubBar.setPrototypeBasedOn(googBar.getInstanceType());\n    googSubBarInst = googSubBar.getInstanceType();\n\n    googSubSubBar = registry.createConstructorType(\n        \"googSubSubBar\", null, null, null);\n    googSubSubBar.setPrototypeBasedOn(googSubBar.getInstanceType());\n    googSubSubBarInst = googSubSubBar.getInstanceType();\n\n    final ObjectType googObject = registry.createAnonymousObjectType();\n    googObject.defineDeclaredProperty(\"Bar\", googBar, null);\n\n    namedGoogBar.resolve(null, new AbstractStaticScope<JSType>() {\n          @Override\n          public StaticSlot<JSType> getSlot(String name) {\n            if (\"goog\".equals(name)) {\n              return new SimpleSlot(\"goog\", googObject, false);\n            } else {\n              return null;\n            }\n          }\n        });\n    assertNotNull(namedGoogBar.getImplicitPrototype());\n\n    forwardDeclaredNamedType =\n        new NamedType(registry, \"forwardDeclared\", \"source\", 1, 0);\n    registry.forwardDeclareType(\"forwardDeclared\");\n    forwardDeclaredNamedType.resolve(\n        new SimpleErrorReporter(), EMPTY_SCOPE);\n\n    types = ImmutableList.of(\n        NO_OBJECT_TYPE,\n        NO_RESOLVED_TYPE,\n        NO_TYPE,\n        BOOLEAN_OBJECT_TYPE,\n        BOOLEAN_TYPE,\n        STRING_OBJECT_TYPE,\n        STRING_TYPE,\n        VOID_TYPE,\n        UNKNOWN_TYPE,\n        NULL_TYPE,\n        NUMBER_OBJECT_TYPE,\n        NUMBER_TYPE,\n        DATE_TYPE,\n        ERROR_TYPE,\n        SYNTAX_ERROR_TYPE,\n        dateMethod,\n        functionType,\n        unresolvedNamedType,\n        googBar,\n        googSubBar,\n        googSubSubBar,\n        namedGoogBar,\n        googBar.getInstanceType(),\n        subclassOfUnresolvedNamedType,\n        subclassCtor,\n        recordType,\n        enumType,\n        elementsType,\n        googBar,\n        googSubBar,\n        forwardDeclaredNamedType);\n  }\n",
        "begin_line": 98,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 100,col 18)",
            "(line 102,col 5)-(line 102,col 64)",
            "(line 103,col 5)-(line 103,col 48)",
            "(line 104,col 5)-(line 104,col 48)",
            "(line 105,col 5)-(line 105,col 33)",
            "(line 107,col 5)-(line 107,col 65)",
            "(line 108,col 5)-(line 108,col 46)",
            "(line 109,col 5)-(line 111,col 17)",
            "(line 112,col 5)-(line 116,col 17)",
            "(line 117,col 5)-(line 118,col 73)",
            "(line 119,col 5)-(line 119,col 69)",
            "(line 121,col 5)-(line 123,col 37)",
            "(line 124,col 5)-(line 124,col 58)",
            "(line 125,col 5)-(line 125,col 67)",
            "(line 127,col 5)-(line 127,col 75)",
            "(line 128,col 5)-(line 128,col 56)",
            "(line 130,col 5)-(line 131,col 40)",
            "(line 132,col 5)-(line 133,col 59)",
            "(line 134,col 5)-(line 134,col 62)",
            "(line 136,col 5)-(line 136,col 75)",
            "(line 137,col 5)-(line 138,col 14)",
            "(line 139,col 5)-(line 140,col 59)",
            "(line 141,col 5)-(line 141,col 44)",
            "(line 143,col 5)-(line 144,col 40)",
            "(line 145,col 5)-(line 145,col 62)",
            "(line 146,col 5)-(line 146,col 50)",
            "(line 148,col 5)-(line 149,col 43)",
            "(line 150,col 5)-(line 150,col 68)",
            "(line 151,col 5)-(line 151,col 56)",
            "(line 153,col 5)-(line 153,col 71)",
            "(line 154,col 5)-(line 154,col 60)",
            "(line 156,col 5)-(line 165,col 11)",
            "(line 166,col 5)-(line 166,col 55)",
            "(line 168,col 5)-(line 169,col 67)",
            "(line 170,col 5)-(line 170,col 51)",
            "(line 171,col 5)-(line 172,col 48)",
            "(line 174,col 5)-(line 205,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.Anonymous-9d04d8fe-ab7f-43fd-a64b-6f56d2408f46.getSlot(java.lang.String)",
        "snippet": "          @Override\n          public StaticSlot<JSType> getSlot(String name) {\n            if (\"goog\".equals(name)) {\n              return new SimpleSlot(\"goog\", googObject, false);\n            } else {\n              return null;\n            }\n          }\n",
        "begin_line": 157,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 159,col 13)-(line 163,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testUniversalConstructorType()",
        "snippet": "  public void testUniversalConstructorType() throws Exception {\n    // isXxx\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNoObjectType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNoType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isArrayType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isBooleanValueType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isDateType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isEnumElementType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNullType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNamedType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNullType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNumber());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNumberObjectType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNumberValueType());\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isObject());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isFunctionPrototypeType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isRegexpType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isString());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isStringObjectType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isStringValueType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isEnumType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isUnionType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isAllType());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isVoidType());\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isConstructor());\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NO_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(BOOLEAN_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(DATE_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.canAssignTo(functionType));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(recordType));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NULL_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(URI_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(STRING_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.canAssignTo(VOID_TYPE));\n\n    // canTestForEqualityWith\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(NO_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(NO_OBJECT_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(ALL_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(ARRAY_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(BOOLEAN_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(DATE_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(functionType));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(recordType));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(NULL_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(NUMBER_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(OBJECT_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(URI_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(RANGE_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(REFERENCE_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(REGEXP_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(STRING_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(STRING_OBJECT_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(SYNTAX_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(TYPE_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForEqualityWith(VOID_TYPE));\n\n    // canTestForShallowEqualityWith\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(functionType));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(recordType));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue( U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(U2U_CONSTRUCTOR_TYPE.\n        canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(U2U_CONSTRUCTOR_TYPE.isNullable());\n\n    // isObject\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isObject());\n\n    // matchesXxx\n    assertFalse(U2U_CONSTRUCTOR_TYPE.matchesInt32Context());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.matchesNumberContext());\n    assertTrue(U2U_CONSTRUCTOR_TYPE.matchesObjectContext());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.matchesStringContext());\n    assertFalse(U2U_CONSTRUCTOR_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"Function\",\n        U2U_CONSTRUCTOR_TYPE.toString());\n    assertTrue(U2U_CONSTRUCTOR_TYPE.hasDisplayName());\n    assertEquals(\"Function\", U2U_CONSTRUCTOR_TYPE.getDisplayName());\n\n    // getPropertyType\n    assertTypeEquals(UNKNOWN_TYPE,\n        U2U_CONSTRUCTOR_TYPE.getPropertyType(\"anyProperty\"));\n\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isNativeObjectType());\n\n    Asserts.assertResolvesToSame(U2U_CONSTRUCTOR_TYPE);\n\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 211,
        "end_line": 392,
        "comment": "\n   * Tests the behavior of the top constructor type.\n   ",
        "child_ranges": [
            "(line 213,col 5)-(line 213,col 55)",
            "(line 214,col 5)-(line 214,col 49)",
            "(line 215,col 5)-(line 215,col 52)",
            "(line 216,col 5)-(line 216,col 59)",
            "(line 217,col 5)-(line 217,col 51)",
            "(line 218,col 5)-(line 218,col 58)",
            "(line 219,col 5)-(line 219,col 51)",
            "(line 220,col 5)-(line 220,col 52)",
            "(line 221,col 5)-(line 221,col 51)",
            "(line 222,col 5)-(line 222,col 49)",
            "(line 223,col 5)-(line 223,col 59)",
            "(line 224,col 5)-(line 224,col 58)",
            "(line 225,col 5)-(line 225,col 48)",
            "(line 226,col 5)-(line 226,col 64)",
            "(line 227,col 5)-(line 227,col 53)",
            "(line 228,col 5)-(line 228,col 49)",
            "(line 229,col 5)-(line 229,col 59)",
            "(line 230,col 5)-(line 230,col 58)",
            "(line 231,col 5)-(line 231,col 51)",
            "(line 232,col 5)-(line 232,col 52)",
            "(line 233,col 5)-(line 233,col 50)",
            "(line 234,col 5)-(line 234,col 51)",
            "(line 235,col 5)-(line 235,col 53)",
            "(line 236,col 5)-(line 236,col 54)",
            "(line 239,col 5)-(line 239,col 59)",
            "(line 240,col 5)-(line 240,col 66)",
            "(line 241,col 5)-(line 241,col 60)",
            "(line 242,col 5)-(line 242,col 64)",
            "(line 243,col 5)-(line 243,col 71)",
            "(line 244,col 5)-(line 244,col 61)",
            "(line 245,col 5)-(line 245,col 62)",
            "(line 246,col 5)-(line 246,col 67)",
            "(line 247,col 5)-(line 247,col 63)",
            "(line 248,col 5)-(line 248,col 62)",
            "(line 249,col 5)-(line 249,col 61)",
            "(line 250,col 5)-(line 250,col 63)",
            "(line 251,col 5)-(line 251,col 70)",
            "(line 252,col 5)-(line 252,col 62)",
            "(line 253,col 5)-(line 253,col 66)",
            "(line 254,col 5)-(line 254,col 68)",
            "(line 255,col 5)-(line 255,col 72)",
            "(line 256,col 5)-(line 256,col 63)",
            "(line 257,col 5)-(line 257,col 63)",
            "(line 258,col 5)-(line 258,col 70)",
            "(line 259,col 5)-(line 259,col 69)",
            "(line 260,col 5)-(line 260,col 67)",
            "(line 261,col 5)-(line 261,col 59)",
            "(line 262,col 5)-(line 262,col 61)",
            "(line 265,col 5)-(line 266,col 41)",
            "(line 267,col 5)-(line 268,col 48)",
            "(line 269,col 5)-(line 270,col 42)",
            "(line 271,col 5)-(line 272,col 44)",
            "(line 273,col 5)-(line 274,col 46)",
            "(line 275,col 5)-(line 276,col 53)",
            "(line 277,col 5)-(line 278,col 43)",
            "(line 279,col 5)-(line 280,col 44)",
            "(line 281,col 5)-(line 282,col 49)",
            "(line 283,col 5)-(line 284,col 46)",
            "(line 285,col 5)-(line 286,col 44)",
            "(line 287,col 5)-(line 288,col 43)",
            "(line 289,col 5)-(line 290,col 45)",
            "(line 291,col 5)-(line 292,col 52)",
            "(line 293,col 5)-(line 294,col 45)",
            "(line 295,col 5)-(line 296,col 48)",
            "(line 297,col 5)-(line 298,col 50)",
            "(line 299,col 5)-(line 300,col 54)",
            "(line 301,col 5)-(line 302,col 45)",
            "(line 303,col 5)-(line 304,col 45)",
            "(line 305,col 5)-(line 306,col 52)",
            "(line 307,col 5)-(line 308,col 51)",
            "(line 309,col 5)-(line 310,col 49)",
            "(line 311,col 5)-(line 312,col 43)",
            "(line 315,col 5)-(line 316,col 48)",
            "(line 317,col 5)-(line 318,col 55)",
            "(line 319,col 5)-(line 320,col 51)",
            "(line 321,col 5)-(line 322,col 53)",
            "(line 323,col 5)-(line 324,col 60)",
            "(line 325,col 5)-(line 326,col 50)",
            "(line 327,col 5)-(line 328,col 51)",
            "(line 329,col 5)-(line 330,col 56)",
            "(line 331,col 5)-(line 332,col 53)",
            "(line 333,col 5)-(line 334,col 51)",
            "(line 335,col 5)-(line 336,col 50)",
            "(line 337,col 5)-(line 338,col 52)",
            "(line 339,col 5)-(line 340,col 59)",
            "(line 341,col 5)-(line 342,col 52)",
            "(line 343,col 5)-(line 344,col 55)",
            "(line 345,col 5)-(line 346,col 57)",
            "(line 347,col 5)-(line 348,col 61)",
            "(line 349,col 5)-(line 350,col 52)",
            "(line 351,col 5)-(line 352,col 52)",
            "(line 353,col 5)-(line 354,col 59)",
            "(line 355,col 5)-(line 356,col 58)",
            "(line 357,col 5)-(line 358,col 56)",
            "(line 359,col 5)-(line 360,col 49)",
            "(line 361,col 5)-(line 362,col 50)",
            "(line 365,col 5)-(line 365,col 51)",
            "(line 368,col 5)-(line 368,col 48)",
            "(line 371,col 5)-(line 371,col 60)",
            "(line 372,col 5)-(line 372,col 61)",
            "(line 373,col 5)-(line 373,col 60)",
            "(line 374,col 5)-(line 374,col 61)",
            "(line 375,col 5)-(line 375,col 61)",
            "(line 378,col 5)-(line 379,col 41)",
            "(line 380,col 5)-(line 380,col 54)",
            "(line 381,col 5)-(line 381,col 68)",
            "(line 384,col 5)-(line 385,col 61)",
            "(line 387,col 5)-(line 387,col 58)",
            "(line 389,col 5)-(line 389,col 55)",
            "(line 391,col 5)-(line 391,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNoObjectType()",
        "snippet": "  public void testNoObjectType() throws Exception {\n    // isXxx\n    assertTrue(NO_OBJECT_TYPE.isNoObjectType());\n    assertFalse(NO_OBJECT_TYPE.isNoType());\n    assertFalse(NO_OBJECT_TYPE.isArrayType());\n    assertFalse(NO_OBJECT_TYPE.isBooleanValueType());\n    assertFalse(NO_OBJECT_TYPE.isDateType());\n    assertFalse(NO_OBJECT_TYPE.isEnumElementType());\n    assertFalse(NO_OBJECT_TYPE.isNullType());\n    assertFalse(NO_OBJECT_TYPE.isNamedType());\n    assertFalse(NO_OBJECT_TYPE.isNullType());\n    assertTrue(NO_OBJECT_TYPE.isNumber());\n    assertFalse(NO_OBJECT_TYPE.isNumberObjectType());\n    assertFalse(NO_OBJECT_TYPE.isNumberValueType());\n    assertTrue(NO_OBJECT_TYPE.isObject());\n    assertFalse(NO_OBJECT_TYPE.isFunctionPrototypeType());\n    assertFalse(NO_OBJECT_TYPE.isRegexpType());\n    assertTrue(NO_OBJECT_TYPE.isString());\n    assertFalse(NO_OBJECT_TYPE.isStringObjectType());\n    assertFalse(NO_OBJECT_TYPE.isStringValueType());\n    assertFalse(NO_OBJECT_TYPE.isEnumType());\n    assertFalse(NO_OBJECT_TYPE.isUnionType());\n    assertFalse(NO_OBJECT_TYPE.isAllType());\n    assertFalse(NO_OBJECT_TYPE.isVoidType());\n    assertTrue(NO_OBJECT_TYPE.isConstructor());\n    assertFalse(NO_OBJECT_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertFalse(NO_OBJECT_TYPE.canAssignTo(NO_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canAssignTo(BOOLEAN_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(functionType));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(recordType));\n    assertFalse(NO_OBJECT_TYPE.canAssignTo(NULL_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(URI_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canAssignTo(STRING_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canAssignTo(VOID_TYPE));\n\n    // canTestForEqualityWith\n    assertCannotTestForEqualityWith(NO_OBJECT_TYPE, NO_TYPE);\n    assertCannotTestForEqualityWith(NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, ARRAY_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, BOOLEAN_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, EVAL_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, functionType);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, recordType);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, NULL_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, URI_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, RANGE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, REFERENCE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, STRING_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, SYNTAX_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, TYPE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_OBJECT_TYPE, VOID_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(NO_OBJECT_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(functionType));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(recordType));\n    assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertTrue(NO_OBJECT_TYPE.\n        canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertTrue(NO_OBJECT_TYPE.\n        canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.\n        canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(NO_OBJECT_TYPE.isNullable());\n\n    // isObject\n    assertTrue(NO_OBJECT_TYPE.isObject());\n\n    // matchesXxx\n    assertTrue(NO_OBJECT_TYPE.matchesInt32Context());\n    assertTrue(NO_OBJECT_TYPE.matchesNumberContext());\n    assertTrue(NO_OBJECT_TYPE.matchesObjectContext());\n    assertTrue(NO_OBJECT_TYPE.matchesStringContext());\n    assertTrue(NO_OBJECT_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"NoObject\", NO_OBJECT_TYPE.toString());\n    assertFalse(NO_OBJECT_TYPE.hasDisplayName());\n    assertEquals(null, NO_OBJECT_TYPE.getDisplayName());\n\n\n    // getPropertyType\n    assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getPropertyType(\"anyProperty\"));\n\n    Asserts.assertResolvesToSame(NO_OBJECT_TYPE);\n\n    assertFalse(NO_OBJECT_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 397,
        "end_line": 533,
        "comment": "\n   * Tests the behavior of the Bottom Object yype.\n   ",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 48)",
            "(line 400,col 5)-(line 400,col 43)",
            "(line 401,col 5)-(line 401,col 46)",
            "(line 402,col 5)-(line 402,col 53)",
            "(line 403,col 5)-(line 403,col 45)",
            "(line 404,col 5)-(line 404,col 52)",
            "(line 405,col 5)-(line 405,col 45)",
            "(line 406,col 5)-(line 406,col 46)",
            "(line 407,col 5)-(line 407,col 45)",
            "(line 408,col 5)-(line 408,col 42)",
            "(line 409,col 5)-(line 409,col 53)",
            "(line 410,col 5)-(line 410,col 52)",
            "(line 411,col 5)-(line 411,col 42)",
            "(line 412,col 5)-(line 412,col 58)",
            "(line 413,col 5)-(line 413,col 47)",
            "(line 414,col 5)-(line 414,col 42)",
            "(line 415,col 5)-(line 415,col 53)",
            "(line 416,col 5)-(line 416,col 52)",
            "(line 417,col 5)-(line 417,col 45)",
            "(line 418,col 5)-(line 418,col 46)",
            "(line 419,col 5)-(line 419,col 44)",
            "(line 420,col 5)-(line 420,col 45)",
            "(line 421,col 5)-(line 421,col 47)",
            "(line 422,col 5)-(line 422,col 49)",
            "(line 425,col 5)-(line 425,col 53)",
            "(line 426,col 5)-(line 426,col 59)",
            "(line 427,col 5)-(line 427,col 53)",
            "(line 428,col 5)-(line 428,col 58)",
            "(line 429,col 5)-(line 429,col 64)",
            "(line 430,col 5)-(line 430,col 54)",
            "(line 431,col 5)-(line 431,col 55)",
            "(line 432,col 5)-(line 432,col 60)",
            "(line 433,col 5)-(line 433,col 57)",
            "(line 434,col 5)-(line 434,col 55)",
            "(line 435,col 5)-(line 435,col 55)",
            "(line 436,col 5)-(line 436,col 57)",
            "(line 437,col 5)-(line 437,col 63)",
            "(line 438,col 5)-(line 438,col 56)",
            "(line 439,col 5)-(line 439,col 59)",
            "(line 440,col 5)-(line 440,col 61)",
            "(line 441,col 5)-(line 441,col 65)",
            "(line 442,col 5)-(line 442,col 56)",
            "(line 443,col 5)-(line 443,col 57)",
            "(line 444,col 5)-(line 444,col 63)",
            "(line 445,col 5)-(line 445,col 62)",
            "(line 446,col 5)-(line 446,col 60)",
            "(line 447,col 5)-(line 447,col 53)",
            "(line 448,col 5)-(line 448,col 55)",
            "(line 451,col 5)-(line 451,col 61)",
            "(line 452,col 5)-(line 452,col 68)",
            "(line 453,col 5)-(line 453,col 59)",
            "(line 454,col 5)-(line 454,col 61)",
            "(line 455,col 5)-(line 455,col 63)",
            "(line 456,col 5)-(line 456,col 70)",
            "(line 457,col 5)-(line 457,col 60)",
            "(line 458,col 5)-(line 458,col 61)",
            "(line 459,col 5)-(line 459,col 66)",
            "(line 460,col 5)-(line 460,col 63)",
            "(line 461,col 5)-(line 461,col 61)",
            "(line 462,col 5)-(line 462,col 60)",
            "(line 463,col 5)-(line 463,col 62)",
            "(line 464,col 5)-(line 464,col 69)",
            "(line 465,col 5)-(line 465,col 62)",
            "(line 466,col 5)-(line 466,col 65)",
            "(line 467,col 5)-(line 467,col 67)",
            "(line 468,col 5)-(line 468,col 71)",
            "(line 469,col 5)-(line 469,col 62)",
            "(line 470,col 5)-(line 470,col 62)",
            "(line 471,col 5)-(line 471,col 69)",
            "(line 472,col 5)-(line 472,col 68)",
            "(line 473,col 5)-(line 473,col 66)",
            "(line 474,col 5)-(line 474,col 60)",
            "(line 477,col 5)-(line 477,col 70)",
            "(line 478,col 5)-(line 478,col 77)",
            "(line 479,col 5)-(line 479,col 73)",
            "(line 480,col 5)-(line 480,col 76)",
            "(line 481,col 5)-(line 482,col 60)",
            "(line 483,col 5)-(line 483,col 72)",
            "(line 484,col 5)-(line 484,col 73)",
            "(line 485,col 5)-(line 485,col 78)",
            "(line 486,col 5)-(line 486,col 75)",
            "(line 487,col 5)-(line 487,col 73)",
            "(line 488,col 5)-(line 488,col 73)",
            "(line 489,col 5)-(line 489,col 75)",
            "(line 490,col 5)-(line 491,col 59)",
            "(line 492,col 5)-(line 492,col 74)",
            "(line 493,col 5)-(line 493,col 77)",
            "(line 494,col 5)-(line 494,col 79)",
            "(line 495,col 5)-(line 496,col 61)",
            "(line 497,col 5)-(line 497,col 74)",
            "(line 498,col 5)-(line 498,col 75)",
            "(line 499,col 5)-(line 500,col 59)",
            "(line 501,col 5)-(line 502,col 58)",
            "(line 503,col 5)-(line 503,col 78)",
            "(line 504,col 5)-(line 504,col 71)",
            "(line 505,col 5)-(line 505,col 73)",
            "(line 508,col 5)-(line 508,col 45)",
            "(line 511,col 5)-(line 511,col 42)",
            "(line 514,col 5)-(line 514,col 53)",
            "(line 515,col 5)-(line 515,col 54)",
            "(line 516,col 5)-(line 516,col 54)",
            "(line 517,col 5)-(line 517,col 54)",
            "(line 518,col 5)-(line 518,col 54)",
            "(line 521,col 5)-(line 521,col 56)",
            "(line 522,col 5)-(line 522,col 49)",
            "(line 523,col 5)-(line 523,col 56)",
            "(line 527,col 5)-(line 528,col 55)",
            "(line 530,col 5)-(line 530,col 49)",
            "(line 532,col 5)-(line 532,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNoType()",
        "snippet": "  public void testNoType() throws Exception {\n    // isXxx\n    assertFalse(NO_TYPE.isNoObjectType());\n    assertTrue(NO_TYPE.isNoType());\n    assertFalse(NO_TYPE.isArrayType());\n    assertFalse(NO_TYPE.isBooleanValueType());\n    assertFalse(NO_TYPE.isDateType());\n    assertFalse(NO_TYPE.isEnumElementType());\n    assertFalse(NO_TYPE.isNullType());\n    assertFalse(NO_TYPE.isNamedType());\n    assertFalse(NO_TYPE.isNullType());\n    assertTrue(NO_TYPE.isNumber());\n    assertFalse(NO_TYPE.isNumberObjectType());\n    assertFalse(NO_TYPE.isNumberValueType());\n    assertTrue(NO_TYPE.isObject());\n    assertFalse(NO_TYPE.isFunctionPrototypeType());\n    assertFalse(NO_TYPE.isRegexpType());\n    assertTrue(NO_TYPE.isString());\n    assertFalse(NO_TYPE.isStringObjectType());\n    assertFalse(NO_TYPE.isStringValueType());\n    assertFalse(NO_TYPE.isEnumType());\n    assertFalse(NO_TYPE.isUnionType());\n    assertFalse(NO_TYPE.isAllType());\n    assertFalse(NO_TYPE.isVoidType());\n    assertTrue(NO_TYPE.isConstructor());\n    assertFalse(NO_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertTrue(NO_TYPE.canAssignTo(NO_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(ARRAY_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(BOOLEAN_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(ERROR_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(functionType));\n    assertTrue(NO_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(NUMBER_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(OBJECT_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(URI_ERROR_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(REGEXP_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(STRING_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(ALL_TYPE));\n    assertTrue(NO_TYPE.canAssignTo(VOID_TYPE));\n\n    // canTestForEqualityWith\n    assertCannotTestForEqualityWith(NO_TYPE, NO_TYPE);\n    assertCannotTestForEqualityWith(NO_TYPE, NO_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, ARRAY_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, BOOLEAN_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, BOOLEAN_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, EVAL_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, functionType);\n    assertCanTestForEqualityWith(NO_TYPE, NULL_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, NUMBER_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, URI_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, RANGE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, REFERENCE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, STRING_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, SYNTAX_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, TYPE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(NO_TYPE, VOID_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(functionType));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertTrue(NO_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertTrue(NO_TYPE.isNullable());\n\n    // isObject\n    assertTrue(NO_TYPE.isObject());\n\n    // matchesXxx\n    assertTrue(NO_TYPE.matchesInt32Context());\n    assertTrue(NO_TYPE.matchesNumberContext());\n    assertTrue(NO_TYPE.matchesObjectContext());\n    assertTrue(NO_TYPE.matchesStringContext());\n    assertTrue(NO_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"None\", NO_TYPE.toString());\n    assertEquals(null, NO_TYPE.getDisplayName());\n    assertFalse(NO_TYPE.hasDisplayName());\n\n    // getPropertyType\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getPropertyType(\"anyProperty\"));\n\n    Asserts.assertResolvesToSame(NO_TYPE);\n\n    assertFalse(NO_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 538,
        "end_line": 665,
        "comment": "\n   * Tests the behavior of the Bottom type.\n   ",
        "child_ranges": [
            "(line 540,col 5)-(line 540,col 42)",
            "(line 541,col 5)-(line 541,col 35)",
            "(line 542,col 5)-(line 542,col 39)",
            "(line 543,col 5)-(line 543,col 46)",
            "(line 544,col 5)-(line 544,col 38)",
            "(line 545,col 5)-(line 545,col 45)",
            "(line 546,col 5)-(line 546,col 38)",
            "(line 547,col 5)-(line 547,col 39)",
            "(line 548,col 5)-(line 548,col 38)",
            "(line 549,col 5)-(line 549,col 35)",
            "(line 550,col 5)-(line 550,col 46)",
            "(line 551,col 5)-(line 551,col 45)",
            "(line 552,col 5)-(line 552,col 35)",
            "(line 553,col 5)-(line 553,col 51)",
            "(line 554,col 5)-(line 554,col 40)",
            "(line 555,col 5)-(line 555,col 35)",
            "(line 556,col 5)-(line 556,col 46)",
            "(line 557,col 5)-(line 557,col 45)",
            "(line 558,col 5)-(line 558,col 38)",
            "(line 559,col 5)-(line 559,col 39)",
            "(line 560,col 5)-(line 560,col 37)",
            "(line 561,col 5)-(line 561,col 38)",
            "(line 562,col 5)-(line 562,col 40)",
            "(line 563,col 5)-(line 563,col 42)",
            "(line 566,col 5)-(line 566,col 45)",
            "(line 567,col 5)-(line 567,col 52)",
            "(line 568,col 5)-(line 568,col 48)",
            "(line 569,col 5)-(line 569,col 50)",
            "(line 570,col 5)-(line 570,col 57)",
            "(line 571,col 5)-(line 571,col 47)",
            "(line 572,col 5)-(line 572,col 48)",
            "(line 573,col 5)-(line 573,col 53)",
            "(line 574,col 5)-(line 574,col 50)",
            "(line 575,col 5)-(line 575,col 47)",
            "(line 576,col 5)-(line 576,col 49)",
            "(line 577,col 5)-(line 577,col 56)",
            "(line 578,col 5)-(line 578,col 49)",
            "(line 579,col 5)-(line 579,col 52)",
            "(line 580,col 5)-(line 580,col 54)",
            "(line 581,col 5)-(line 581,col 58)",
            "(line 582,col 5)-(line 582,col 49)",
            "(line 583,col 5)-(line 583,col 49)",
            "(line 584,col 5)-(line 584,col 56)",
            "(line 585,col 5)-(line 585,col 55)",
            "(line 586,col 5)-(line 586,col 53)",
            "(line 587,col 5)-(line 587,col 46)",
            "(line 588,col 5)-(line 588,col 47)",
            "(line 591,col 5)-(line 591,col 54)",
            "(line 592,col 5)-(line 592,col 61)",
            "(line 593,col 5)-(line 593,col 54)",
            "(line 594,col 5)-(line 594,col 56)",
            "(line 595,col 5)-(line 595,col 63)",
            "(line 596,col 5)-(line 596,col 53)",
            "(line 597,col 5)-(line 597,col 54)",
            "(line 598,col 5)-(line 598,col 59)",
            "(line 599,col 5)-(line 599,col 56)",
            "(line 600,col 5)-(line 600,col 53)",
            "(line 601,col 5)-(line 601,col 55)",
            "(line 602,col 5)-(line 602,col 62)",
            "(line 603,col 5)-(line 603,col 55)",
            "(line 604,col 5)-(line 604,col 58)",
            "(line 605,col 5)-(line 605,col 60)",
            "(line 606,col 5)-(line 606,col 64)",
            "(line 607,col 5)-(line 607,col 55)",
            "(line 608,col 5)-(line 608,col 55)",
            "(line 609,col 5)-(line 609,col 62)",
            "(line 610,col 5)-(line 610,col 61)",
            "(line 611,col 5)-(line 611,col 59)",
            "(line 612,col 5)-(line 612,col 52)",
            "(line 613,col 5)-(line 613,col 53)",
            "(line 616,col 5)-(line 616,col 63)",
            "(line 617,col 5)-(line 617,col 70)",
            "(line 618,col 5)-(line 618,col 66)",
            "(line 619,col 5)-(line 619,col 68)",
            "(line 620,col 5)-(line 620,col 75)",
            "(line 621,col 5)-(line 621,col 65)",
            "(line 622,col 5)-(line 622,col 66)",
            "(line 623,col 5)-(line 623,col 71)",
            "(line 624,col 5)-(line 624,col 68)",
            "(line 625,col 5)-(line 625,col 65)",
            "(line 626,col 5)-(line 626,col 67)",
            "(line 627,col 5)-(line 627,col 74)",
            "(line 628,col 5)-(line 628,col 67)",
            "(line 629,col 5)-(line 629,col 70)",
            "(line 630,col 5)-(line 630,col 72)",
            "(line 631,col 5)-(line 631,col 76)",
            "(line 632,col 5)-(line 632,col 67)",
            "(line 633,col 5)-(line 633,col 67)",
            "(line 634,col 5)-(line 634,col 74)",
            "(line 635,col 5)-(line 635,col 73)",
            "(line 636,col 5)-(line 636,col 71)",
            "(line 637,col 5)-(line 637,col 64)",
            "(line 638,col 5)-(line 638,col 65)",
            "(line 641,col 5)-(line 641,col 37)",
            "(line 644,col 5)-(line 644,col 35)",
            "(line 647,col 5)-(line 647,col 46)",
            "(line 648,col 5)-(line 648,col 47)",
            "(line 649,col 5)-(line 649,col 47)",
            "(line 650,col 5)-(line 650,col 47)",
            "(line 651,col 5)-(line 651,col 47)",
            "(line 654,col 5)-(line 654,col 45)",
            "(line 655,col 5)-(line 655,col 49)",
            "(line 656,col 5)-(line 656,col 42)",
            "(line 659,col 5)-(line 660,col 48)",
            "(line 662,col 5)-(line 662,col 42)",
            "(line 664,col 5)-(line 664,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNoResolvedType()",
        "snippet": "  public void testNoResolvedType() throws Exception {\n    // isXxx\n    assertFalse(NO_RESOLVED_TYPE.isNoObjectType());\n    assertFalse(NO_RESOLVED_TYPE.isNoType());\n    assertTrue(NO_RESOLVED_TYPE.isNoResolvedType());\n    assertFalse(NO_RESOLVED_TYPE.isArrayType());\n    assertFalse(NO_RESOLVED_TYPE.isBooleanValueType());\n    assertFalse(NO_RESOLVED_TYPE.isDateType());\n    assertFalse(NO_RESOLVED_TYPE.isEnumElementType());\n    assertFalse(NO_RESOLVED_TYPE.isNullType());\n    assertFalse(NO_RESOLVED_TYPE.isNamedType());\n    assertTrue(NO_RESOLVED_TYPE.isNumber());\n    assertFalse(NO_RESOLVED_TYPE.isNumberObjectType());\n    assertFalse(NO_RESOLVED_TYPE.isNumberValueType());\n    assertTrue(NO_RESOLVED_TYPE.isObject());\n    assertFalse(NO_RESOLVED_TYPE.isFunctionPrototypeType());\n    assertFalse(NO_RESOLVED_TYPE.isRegexpType());\n    assertTrue(NO_RESOLVED_TYPE.isString());\n    assertFalse(NO_RESOLVED_TYPE.isStringObjectType());\n    assertFalse(NO_RESOLVED_TYPE.isStringValueType());\n    assertFalse(NO_RESOLVED_TYPE.isEnumType());\n    assertFalse(NO_RESOLVED_TYPE.isUnionType());\n    assertFalse(NO_RESOLVED_TYPE.isAllType());\n    assertFalse(NO_RESOLVED_TYPE.isVoidType());\n    assertTrue(NO_RESOLVED_TYPE.isConstructor());\n    assertFalse(NO_RESOLVED_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NO_RESOLVED_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(ARRAY_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(BOOLEAN_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(functionType));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NUMBER_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(URI_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(REGEXP_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(STRING_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(ALL_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canAssignTo(VOID_TYPE));\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NO_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NO_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, ARRAY_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, BOOLEAN_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, BOOLEAN_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, EVAL_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, functionType);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NULL_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NUMBER_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, URI_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, RANGE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, REFERENCE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, STRING_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, SYNTAX_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, TYPE_ERROR_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(NO_RESOLVED_TYPE, VOID_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(\n        NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NO_RESOLVED_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(\n        NO_RESOLVED_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(functionType));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertTrue(\n        NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertTrue(\n        NO_RESOLVED_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertTrue(\n        NO_RESOLVED_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertTrue(\n        NO_RESOLVED_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertTrue(\n        NO_RESOLVED_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertTrue(NO_RESOLVED_TYPE.isNullable());\n\n    // isObject\n    assertTrue(NO_RESOLVED_TYPE.isObject());\n\n    // matchesXxx\n    assertTrue(NO_RESOLVED_TYPE.matchesInt32Context());\n    assertTrue(NO_RESOLVED_TYPE.matchesNumberContext());\n    assertTrue(NO_RESOLVED_TYPE.matchesObjectContext());\n    assertTrue(NO_RESOLVED_TYPE.matchesStringContext());\n    assertTrue(NO_RESOLVED_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"NoResolvedType\", NO_RESOLVED_TYPE.toString());\n    assertEquals(null, NO_RESOLVED_TYPE.getDisplayName());\n    assertFalse(NO_RESOLVED_TYPE.hasDisplayName());\n\n    // getPropertyType\n    assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        NO_RESOLVED_TYPE.getPropertyType(\"anyProperty\"));\n\n    Asserts.assertResolvesToSame(NO_RESOLVED_TYPE);\n\n    assertTrue(forwardDeclaredNamedType.isEmptyType());\n    assertTrue(forwardDeclaredNamedType.isNoResolvedType());\n  }\n",
        "begin_line": 670,
        "end_line": 806,
        "comment": "\n   * Tests the behavior of the unresolved Bottom type.\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 672,col 51)",
            "(line 673,col 5)-(line 673,col 45)",
            "(line 674,col 5)-(line 674,col 52)",
            "(line 675,col 5)-(line 675,col 48)",
            "(line 676,col 5)-(line 676,col 55)",
            "(line 677,col 5)-(line 677,col 47)",
            "(line 678,col 5)-(line 678,col 54)",
            "(line 679,col 5)-(line 679,col 47)",
            "(line 680,col 5)-(line 680,col 48)",
            "(line 681,col 5)-(line 681,col 44)",
            "(line 682,col 5)-(line 682,col 55)",
            "(line 683,col 5)-(line 683,col 54)",
            "(line 684,col 5)-(line 684,col 44)",
            "(line 685,col 5)-(line 685,col 60)",
            "(line 686,col 5)-(line 686,col 49)",
            "(line 687,col 5)-(line 687,col 44)",
            "(line 688,col 5)-(line 688,col 55)",
            "(line 689,col 5)-(line 689,col 54)",
            "(line 690,col 5)-(line 690,col 47)",
            "(line 691,col 5)-(line 691,col 48)",
            "(line 692,col 5)-(line 692,col 46)",
            "(line 693,col 5)-(line 693,col 47)",
            "(line 694,col 5)-(line 694,col 49)",
            "(line 695,col 5)-(line 695,col 51)",
            "(line 698,col 5)-(line 698,col 63)",
            "(line 699,col 5)-(line 699,col 61)",
            "(line 700,col 5)-(line 700,col 57)",
            "(line 701,col 5)-(line 701,col 59)",
            "(line 702,col 5)-(line 702,col 66)",
            "(line 703,col 5)-(line 703,col 56)",
            "(line 704,col 5)-(line 704,col 57)",
            "(line 705,col 5)-(line 705,col 62)",
            "(line 706,col 5)-(line 706,col 59)",
            "(line 707,col 5)-(line 707,col 56)",
            "(line 708,col 5)-(line 708,col 58)",
            "(line 709,col 5)-(line 709,col 65)",
            "(line 710,col 5)-(line 710,col 58)",
            "(line 711,col 5)-(line 711,col 61)",
            "(line 712,col 5)-(line 712,col 63)",
            "(line 713,col 5)-(line 713,col 67)",
            "(line 714,col 5)-(line 714,col 58)",
            "(line 715,col 5)-(line 715,col 58)",
            "(line 716,col 5)-(line 716,col 65)",
            "(line 717,col 5)-(line 717,col 64)",
            "(line 718,col 5)-(line 718,col 62)",
            "(line 719,col 5)-(line 719,col 55)",
            "(line 720,col 5)-(line 720,col 56)",
            "(line 723,col 5)-(line 723,col 69)",
            "(line 724,col 5)-(line 724,col 60)",
            "(line 725,col 5)-(line 725,col 67)",
            "(line 726,col 5)-(line 726,col 63)",
            "(line 727,col 5)-(line 727,col 65)",
            "(line 728,col 5)-(line 728,col 72)",
            "(line 729,col 5)-(line 729,col 62)",
            "(line 730,col 5)-(line 730,col 63)",
            "(line 731,col 5)-(line 731,col 68)",
            "(line 732,col 5)-(line 732,col 65)",
            "(line 733,col 5)-(line 733,col 62)",
            "(line 734,col 5)-(line 734,col 64)",
            "(line 735,col 5)-(line 735,col 71)",
            "(line 736,col 5)-(line 736,col 64)",
            "(line 737,col 5)-(line 737,col 67)",
            "(line 738,col 5)-(line 738,col 69)",
            "(line 739,col 5)-(line 739,col 73)",
            "(line 740,col 5)-(line 740,col 64)",
            "(line 741,col 5)-(line 741,col 64)",
            "(line 742,col 5)-(line 742,col 71)",
            "(line 743,col 5)-(line 743,col 70)",
            "(line 744,col 5)-(line 744,col 68)",
            "(line 745,col 5)-(line 745,col 61)",
            "(line 746,col 5)-(line 746,col 62)",
            "(line 749,col 5)-(line 750,col 74)",
            "(line 751,col 5)-(line 751,col 79)",
            "(line 752,col 5)-(line 752,col 75)",
            "(line 753,col 5)-(line 753,col 77)",
            "(line 754,col 5)-(line 755,col 77)",
            "(line 756,col 5)-(line 756,col 74)",
            "(line 757,col 5)-(line 757,col 75)",
            "(line 758,col 5)-(line 758,col 80)",
            "(line 759,col 5)-(line 759,col 77)",
            "(line 760,col 5)-(line 760,col 74)",
            "(line 761,col 5)-(line 761,col 76)",
            "(line 762,col 5)-(line 763,col 76)",
            "(line 764,col 5)-(line 764,col 76)",
            "(line 765,col 5)-(line 765,col 79)",
            "(line 766,col 5)-(line 767,col 74)",
            "(line 768,col 5)-(line 769,col 78)",
            "(line 770,col 5)-(line 770,col 76)",
            "(line 771,col 5)-(line 771,col 76)",
            "(line 772,col 5)-(line 773,col 76)",
            "(line 774,col 5)-(line 775,col 75)",
            "(line 776,col 5)-(line 776,col 80)",
            "(line 777,col 5)-(line 777,col 73)",
            "(line 778,col 5)-(line 778,col 74)",
            "(line 781,col 5)-(line 781,col 46)",
            "(line 784,col 5)-(line 784,col 44)",
            "(line 787,col 5)-(line 787,col 55)",
            "(line 788,col 5)-(line 788,col 56)",
            "(line 789,col 5)-(line 789,col 56)",
            "(line 790,col 5)-(line 790,col 56)",
            "(line 791,col 5)-(line 791,col 56)",
            "(line 794,col 5)-(line 794,col 64)",
            "(line 795,col 5)-(line 795,col 58)",
            "(line 796,col 5)-(line 796,col 51)",
            "(line 799,col 5)-(line 800,col 57)",
            "(line 802,col 5)-(line 802,col 51)",
            "(line 804,col 5)-(line 804,col 55)",
            "(line 805,col 5)-(line 805,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testArrayType()",
        "snippet": "  public void testArrayType() throws Exception {\n    // isXxx\n    assertTrue(ARRAY_TYPE.isArrayType());\n    assertFalse(ARRAY_TYPE.isBooleanValueType());\n    assertFalse(ARRAY_TYPE.isDateType());\n    assertFalse(ARRAY_TYPE.isEnumElementType());\n    assertFalse(ARRAY_TYPE.isNamedType());\n    assertFalse(ARRAY_TYPE.isNullType());\n    assertFalse(ARRAY_TYPE.isNumber());\n    assertFalse(ARRAY_TYPE.isNumberObjectType());\n    assertFalse(ARRAY_TYPE.isNumberValueType());\n    assertTrue(ARRAY_TYPE.isObject());\n    assertFalse(ARRAY_TYPE.isFunctionPrototypeType());\n    assertTrue(ARRAY_TYPE.getImplicitPrototype().isFunctionPrototypeType());\n    assertFalse(ARRAY_TYPE.isRegexpType());\n    assertFalse(ARRAY_TYPE.isString());\n    assertFalse(ARRAY_TYPE.isStringObjectType());\n    assertFalse(ARRAY_TYPE.isStringValueType());\n    assertFalse(ARRAY_TYPE.isEnumType());\n    assertFalse(ARRAY_TYPE.isUnionType());\n    assertFalse(ARRAY_TYPE.isAllType());\n    assertFalse(ARRAY_TYPE.isVoidType());\n    assertFalse(ARRAY_TYPE.isConstructor());\n    assertTrue(ARRAY_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertFalse(ARRAY_TYPE.canAssignTo(NO_TYPE));\n    assertFalse(ARRAY_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertTrue(ARRAY_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(ARRAY_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(ARRAY_TYPE.canAssignTo(functionType));\n    assertFalse(ARRAY_TYPE.canAssignTo(recordType));\n    assertFalse(ARRAY_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(ARRAY_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(ARRAY_TYPE.canAssignTo(unresolvedNamedType));\n    assertFalse(ARRAY_TYPE.canAssignTo(namedGoogBar));\n    assertFalse(ARRAY_TYPE.canAssignTo(REGEXP_TYPE));\n\n    // canBeCalled\n    assertFalse(ARRAY_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(ARRAY_TYPE, NO_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, NO_OBJECT_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, functionType);\n    assertCanTestForEqualityWith(ARRAY_TYPE, recordType);\n    assertCannotTestForEqualityWith(ARRAY_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(ARRAY_TYPE, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(recordType));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(ARRAY_TYPE.isNullable());\n    assertTrue(createUnionType(ARRAY_TYPE, NULL_TYPE).isNullable());\n\n    // isObject\n    assertTrue(ARRAY_TYPE.isObject());\n\n    // getLeastSupertype\n    assertTypeEquals(ALL_TYPE,\n        ARRAY_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(createUnionType(STRING_OBJECT_TYPE, ARRAY_TYPE),\n        ARRAY_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_TYPE, ARRAY_TYPE),\n        ARRAY_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(createUnionType(ARRAY_TYPE, functionType),\n        ARRAY_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(OBJECT_TYPE, ARRAY_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(createUnionType(DATE_TYPE, ARRAY_TYPE),\n        ARRAY_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(createUnionType(REGEXP_TYPE, ARRAY_TYPE),\n        ARRAY_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // getPropertyType\n    assertEquals(17, ARRAY_TYPE.getImplicitPrototype().getPropertiesCount());\n    assertEquals(18, ARRAY_TYPE.getPropertiesCount());\n    assertReturnTypeEquals(ARRAY_TYPE,\n        ARRAY_TYPE.getPropertyType(\"constructor\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        ARRAY_TYPE.getPropertyType(\"toString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        ARRAY_TYPE.getPropertyType(\"toLocaleString\"));\n    assertReturnTypeEquals(ARRAY_TYPE, ARRAY_TYPE.getPropertyType(\"concat\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        ARRAY_TYPE.getPropertyType(\"join\"));\n    assertReturnTypeEquals(UNKNOWN_TYPE, ARRAY_TYPE.getPropertyType(\"pop\"));\n    assertReturnTypeEquals(NUMBER_TYPE, ARRAY_TYPE.getPropertyType(\"push\"));\n    assertReturnTypeEquals(ARRAY_TYPE, ARRAY_TYPE.getPropertyType(\"reverse\"));\n    assertReturnTypeEquals(UNKNOWN_TYPE, ARRAY_TYPE.getPropertyType(\"shift\"));\n    assertReturnTypeEquals(ARRAY_TYPE, ARRAY_TYPE.getPropertyType(\"slice\"));\n    assertReturnTypeEquals(ARRAY_TYPE, ARRAY_TYPE.getPropertyType(\"sort\"));\n    assertReturnTypeEquals(ARRAY_TYPE, ARRAY_TYPE.getPropertyType(\"splice\"));\n    assertReturnTypeEquals(NUMBER_TYPE, ARRAY_TYPE.getPropertyType(\"unshift\"));\n    assertTypeEquals(NUMBER_TYPE, ARRAY_TYPE.getPropertyType(\"length\"));\n\n    // isPropertyType*\n    assertPropertyTypeDeclared(ARRAY_TYPE, \"pop\");\n\n    // matchesXxx\n    assertFalse(ARRAY_TYPE.matchesInt32Context());\n    assertFalse(ARRAY_TYPE.matchesNumberContext());\n    assertTrue(ARRAY_TYPE.matchesObjectContext());\n    assertTrue(ARRAY_TYPE.matchesStringContext());\n    assertFalse(ARRAY_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"Array\", ARRAY_TYPE.toString());\n    assertTrue(ARRAY_TYPE.hasDisplayName());\n    assertEquals(\"Array\", ARRAY_TYPE.getDisplayName());\n\n    assertTrue(ARRAY_TYPE.isNativeObjectType());\n\n    Asserts.assertResolvesToSame(ARRAY_TYPE);\n\n    assertFalse(ARRAY_TYPE.isNominalConstructor());\n    assertTrue(ARRAY_TYPE.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 811,
        "end_line": 958,
        "comment": "\n   * Tests the behavior of the Array type.\n   ",
        "child_ranges": [
            "(line 813,col 5)-(line 813,col 41)",
            "(line 814,col 5)-(line 814,col 49)",
            "(line 815,col 5)-(line 815,col 41)",
            "(line 816,col 5)-(line 816,col 48)",
            "(line 817,col 5)-(line 817,col 42)",
            "(line 818,col 5)-(line 818,col 41)",
            "(line 819,col 5)-(line 819,col 39)",
            "(line 820,col 5)-(line 820,col 49)",
            "(line 821,col 5)-(line 821,col 48)",
            "(line 822,col 5)-(line 822,col 38)",
            "(line 823,col 5)-(line 823,col 54)",
            "(line 824,col 5)-(line 824,col 76)",
            "(line 825,col 5)-(line 825,col 43)",
            "(line 826,col 5)-(line 826,col 39)",
            "(line 827,col 5)-(line 827,col 49)",
            "(line 828,col 5)-(line 828,col 48)",
            "(line 829,col 5)-(line 829,col 41)",
            "(line 830,col 5)-(line 830,col 42)",
            "(line 831,col 5)-(line 831,col 40)",
            "(line 832,col 5)-(line 832,col 41)",
            "(line 833,col 5)-(line 833,col 44)",
            "(line 834,col 5)-(line 834,col 44)",
            "(line 837,col 5)-(line 837,col 49)",
            "(line 838,col 5)-(line 838,col 56)",
            "(line 839,col 5)-(line 839,col 49)",
            "(line 840,col 5)-(line 840,col 60)",
            "(line 841,col 5)-(line 841,col 53)",
            "(line 842,col 5)-(line 842,col 54)",
            "(line 843,col 5)-(line 843,col 52)",
            "(line 844,col 5)-(line 844,col 51)",
            "(line 845,col 5)-(line 845,col 52)",
            "(line 846,col 5)-(line 846,col 51)",
            "(line 847,col 5)-(line 847,col 60)",
            "(line 848,col 5)-(line 848,col 54)",
            "(line 849,col 5)-(line 849,col 53)",
            "(line 852,col 5)-(line 852,col 42)",
            "(line 855,col 5)-(line 855,col 54)",
            "(line 856,col 5)-(line 856,col 61)",
            "(line 857,col 5)-(line 857,col 55)",
            "(line 858,col 5)-(line 858,col 65)",
            "(line 859,col 5)-(line 859,col 58)",
            "(line 860,col 5)-(line 860,col 59)",
            "(line 861,col 5)-(line 861,col 57)",
            "(line 862,col 5)-(line 862,col 59)",
            "(line 863,col 5)-(line 863,col 58)",
            "(line 864,col 5)-(line 864,col 56)",
            "(line 865,col 5)-(line 865,col 58)",
            "(line 868,col 5)-(line 868,col 66)",
            "(line 869,col 5)-(line 869,col 73)",
            "(line 870,col 5)-(line 870,col 69)",
            "(line 871,col 5)-(line 871,col 72)",
            "(line 872,col 5)-(line 872,col 79)",
            "(line 873,col 5)-(line 873,col 69)",
            "(line 874,col 5)-(line 874,col 70)",
            "(line 875,col 5)-(line 875,col 75)",
            "(line 876,col 5)-(line 876,col 72)",
            "(line 877,col 5)-(line 877,col 70)",
            "(line 878,col 5)-(line 878,col 69)",
            "(line 879,col 5)-(line 879,col 71)",
            "(line 880,col 5)-(line 880,col 78)",
            "(line 881,col 5)-(line 881,col 70)",
            "(line 882,col 5)-(line 882,col 74)",
            "(line 883,col 5)-(line 883,col 76)",
            "(line 884,col 5)-(line 884,col 80)",
            "(line 885,col 5)-(line 885,col 71)",
            "(line 886,col 5)-(line 886,col 71)",
            "(line 887,col 5)-(line 887,col 78)",
            "(line 888,col 5)-(line 888,col 77)",
            "(line 889,col 5)-(line 889,col 75)",
            "(line 890,col 5)-(line 890,col 67)",
            "(line 891,col 5)-(line 891,col 69)",
            "(line 894,col 5)-(line 894,col 41)",
            "(line 895,col 5)-(line 895,col 68)",
            "(line 898,col 5)-(line 898,col 38)",
            "(line 901,col 5)-(line 902,col 48)",
            "(line 903,col 5)-(line 904,col 58)",
            "(line 905,col 5)-(line 906,col 51)",
            "(line 907,col 5)-(line 908,col 52)",
            "(line 909,col 5)-(line 909,col 77)",
            "(line 910,col 5)-(line 911,col 49)",
            "(line 912,col 5)-(line 913,col 51)",
            "(line 916,col 5)-(line 916,col 77)",
            "(line 917,col 5)-(line 917,col 54)",
            "(line 918,col 5)-(line 919,col 51)",
            "(line 920,col 5)-(line 921,col 48)",
            "(line 922,col 5)-(line 923,col 54)",
            "(line 924,col 5)-(line 924,col 77)",
            "(line 925,col 5)-(line 926,col 44)",
            "(line 927,col 5)-(line 927,col 76)",
            "(line 928,col 5)-(line 928,col 76)",
            "(line 929,col 5)-(line 929,col 78)",
            "(line 930,col 5)-(line 930,col 78)",
            "(line 931,col 5)-(line 931,col 76)",
            "(line 932,col 5)-(line 932,col 75)",
            "(line 933,col 5)-(line 933,col 77)",
            "(line 934,col 5)-(line 934,col 79)",
            "(line 935,col 5)-(line 935,col 72)",
            "(line 938,col 5)-(line 938,col 50)",
            "(line 941,col 5)-(line 941,col 50)",
            "(line 942,col 5)-(line 942,col 51)",
            "(line 943,col 5)-(line 943,col 50)",
            "(line 944,col 5)-(line 944,col 50)",
            "(line 945,col 5)-(line 945,col 51)",
            "(line 948,col 5)-(line 948,col 49)",
            "(line 949,col 5)-(line 949,col 44)",
            "(line 950,col 5)-(line 950,col 55)",
            "(line 952,col 5)-(line 952,col 48)",
            "(line 954,col 5)-(line 954,col 45)",
            "(line 956,col 5)-(line 956,col 51)",
            "(line 957,col 5)-(line 957,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testUnknownType()",
        "snippet": "  public void testUnknownType() throws Exception {\n    // isXxx\n    assertFalse(UNKNOWN_TYPE.isArrayType());\n    assertFalse(UNKNOWN_TYPE.isBooleanObjectType());\n    assertFalse(UNKNOWN_TYPE.isBooleanValueType());\n    assertFalse(UNKNOWN_TYPE.isDateType());\n    assertFalse(UNKNOWN_TYPE.isEnumElementType());\n    assertFalse(UNKNOWN_TYPE.isNamedType());\n    assertFalse(UNKNOWN_TYPE.isNullType());\n    assertFalse(UNKNOWN_TYPE.isNumberObjectType());\n    assertFalse(UNKNOWN_TYPE.isNumberValueType());\n    assertTrue(UNKNOWN_TYPE.isObject());\n    assertFalse(UNKNOWN_TYPE.isFunctionPrototypeType());\n    assertFalse(UNKNOWN_TYPE.isRegexpType());\n    assertFalse(UNKNOWN_TYPE.isStringObjectType());\n    assertFalse(UNKNOWN_TYPE.isStringValueType());\n    assertFalse(UNKNOWN_TYPE.isEnumType());\n    assertFalse(UNKNOWN_TYPE.isUnionType());\n    assertTrue(UNKNOWN_TYPE.isUnknownType());\n    assertFalse(UNKNOWN_TYPE.isVoidType());\n    assertFalse(UNKNOWN_TYPE.isConstructor());\n    assertFalse(UNKNOWN_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertNull(UNKNOWN_TYPE.autoboxesTo());\n\n    // canAssignTo\n    assertTrue(UNKNOWN_TYPE.canAssignTo(UNKNOWN_TYPE));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(STRING_TYPE));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(NUMBER_TYPE));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(functionType));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(recordType));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(OBJECT_TYPE));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(namedGoogBar));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(unresolvedNamedType));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(REGEXP_TYPE));\n    assertTrue(UNKNOWN_TYPE.canAssignTo(VOID_TYPE));\n\n    // canBeCalled\n    assertTrue(UNKNOWN_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, UNKNOWN_TYPE);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, STRING_TYPE);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, functionType);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, recordType);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(UNKNOWN_TYPE, BOOLEAN_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(functionType));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(recordType));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n\n    // canHaveNullValue\n    assertTrue(UNKNOWN_TYPE.isNullable());\n\n    // getGreatestCommonType\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getLeastSupertype(UNKNOWN_TYPE));\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getLeastSupertype(STRING_TYPE));\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // matchesXxx\n    assertTrue(UNKNOWN_TYPE.matchesInt32Context());\n    assertTrue(UNKNOWN_TYPE.matchesNumberContext());\n    assertTrue(UNKNOWN_TYPE.matchesObjectContext());\n    assertTrue(UNKNOWN_TYPE.matchesStringContext());\n    assertTrue(UNKNOWN_TYPE.matchesUint32Context());\n\n    // isPropertyType*\n    assertPropertyTypeUnknown(UNKNOWN_TYPE, \"XXX\");\n\n    // toString\n    assertEquals(\"?\", UNKNOWN_TYPE.toString());\n    assertTrue(UNKNOWN_TYPE.hasDisplayName());\n    assertEquals(\"Unknown\", UNKNOWN_TYPE.getDisplayName());\n\n    Asserts.assertResolvesToSame(UNKNOWN_TYPE);\n    assertFalse(UNKNOWN_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 963,
        "end_line": 1065,
        "comment": "\n   * Tests the behavior of the unknown type.\n   ",
        "child_ranges": [
            "(line 965,col 5)-(line 965,col 44)",
            "(line 966,col 5)-(line 966,col 52)",
            "(line 967,col 5)-(line 967,col 51)",
            "(line 968,col 5)-(line 968,col 43)",
            "(line 969,col 5)-(line 969,col 50)",
            "(line 970,col 5)-(line 970,col 44)",
            "(line 971,col 5)-(line 971,col 43)",
            "(line 972,col 5)-(line 972,col 51)",
            "(line 973,col 5)-(line 973,col 50)",
            "(line 974,col 5)-(line 974,col 40)",
            "(line 975,col 5)-(line 975,col 56)",
            "(line 976,col 5)-(line 976,col 45)",
            "(line 977,col 5)-(line 977,col 51)",
            "(line 978,col 5)-(line 978,col 50)",
            "(line 979,col 5)-(line 979,col 43)",
            "(line 980,col 5)-(line 980,col 44)",
            "(line 981,col 5)-(line 981,col 45)",
            "(line 982,col 5)-(line 982,col 43)",
            "(line 983,col 5)-(line 983,col 46)",
            "(line 984,col 5)-(line 984,col 47)",
            "(line 987,col 5)-(line 987,col 43)",
            "(line 990,col 5)-(line 990,col 55)",
            "(line 991,col 5)-(line 991,col 54)",
            "(line 992,col 5)-(line 992,col 54)",
            "(line 993,col 5)-(line 993,col 55)",
            "(line 994,col 5)-(line 994,col 53)",
            "(line 995,col 5)-(line 995,col 52)",
            "(line 996,col 5)-(line 996,col 54)",
            "(line 997,col 5)-(line 997,col 52)",
            "(line 998,col 5)-(line 998,col 55)",
            "(line 999,col 5)-(line 999,col 62)",
            "(line 1000,col 5)-(line 1000,col 54)",
            "(line 1001,col 5)-(line 1001,col 52)",
            "(line 1004,col 5)-(line 1004,col 43)",
            "(line 1007,col 5)-(line 1007,col 61)",
            "(line 1008,col 5)-(line 1008,col 60)",
            "(line 1009,col 5)-(line 1009,col 60)",
            "(line 1010,col 5)-(line 1010,col 61)",
            "(line 1011,col 5)-(line 1011,col 59)",
            "(line 1012,col 5)-(line 1012,col 58)",
            "(line 1013,col 5)-(line 1013,col 60)",
            "(line 1014,col 5)-(line 1014,col 58)",
            "(line 1015,col 5)-(line 1015,col 60)",
            "(line 1016,col 5)-(line 1016,col 61)",
            "(line 1019,col 5)-(line 1019,col 73)",
            "(line 1020,col 5)-(line 1020,col 72)",
            "(line 1021,col 5)-(line 1021,col 72)",
            "(line 1022,col 5)-(line 1022,col 73)",
            "(line 1023,col 5)-(line 1023,col 71)",
            "(line 1024,col 5)-(line 1024,col 70)",
            "(line 1025,col 5)-(line 1025,col 72)",
            "(line 1026,col 5)-(line 1026,col 70)",
            "(line 1027,col 5)-(line 1027,col 72)",
            "(line 1030,col 5)-(line 1030,col 42)",
            "(line 1033,col 5)-(line 1034,col 54)",
            "(line 1035,col 5)-(line 1036,col 53)",
            "(line 1037,col 5)-(line 1038,col 53)",
            "(line 1039,col 5)-(line 1040,col 54)",
            "(line 1041,col 5)-(line 1042,col 53)",
            "(line 1043,col 5)-(line 1044,col 51)",
            "(line 1045,col 5)-(line 1046,col 53)",
            "(line 1049,col 5)-(line 1049,col 51)",
            "(line 1050,col 5)-(line 1050,col 52)",
            "(line 1051,col 5)-(line 1051,col 52)",
            "(line 1052,col 5)-(line 1052,col 52)",
            "(line 1053,col 5)-(line 1053,col 52)",
            "(line 1056,col 5)-(line 1056,col 51)",
            "(line 1059,col 5)-(line 1059,col 47)",
            "(line 1060,col 5)-(line 1060,col 46)",
            "(line 1061,col 5)-(line 1061,col 59)",
            "(line 1063,col 5)-(line 1063,col 47)",
            "(line 1064,col 5)-(line 1064,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testAllType()",
        "snippet": "  public void testAllType() throws Exception {\n    // isXxx\n    assertFalse(ALL_TYPE.isArrayType());\n    assertFalse(ALL_TYPE.isBooleanValueType());\n    assertFalse(ALL_TYPE.isDateType());\n    assertFalse(ALL_TYPE.isEnumElementType());\n    assertFalse(ALL_TYPE.isNamedType());\n    assertFalse(ALL_TYPE.isNullType());\n    assertFalse(ALL_TYPE.isNumber());\n    assertFalse(ALL_TYPE.isNumberObjectType());\n    assertFalse(ALL_TYPE.isNumberValueType());\n    assertFalse(ALL_TYPE.isObject());\n    assertFalse(ALL_TYPE.isFunctionPrototypeType());\n    assertFalse(ALL_TYPE.isRegexpType());\n    assertFalse(ALL_TYPE.isString());\n    assertFalse(ALL_TYPE.isStringObjectType());\n    assertFalse(ALL_TYPE.isStringValueType());\n    assertFalse(ALL_TYPE.isEnumType());\n    assertFalse(ALL_TYPE.isUnionType());\n    assertTrue(ALL_TYPE.isAllType());\n    assertFalse(ALL_TYPE.isVoidType());\n    assertFalse(ALL_TYPE.isConstructor());\n    assertFalse(ALL_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertFalse(ALL_TYPE.canAssignTo(NO_TYPE));\n    assertFalse(ALL_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertTrue(ALL_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(ALL_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(ALL_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(ALL_TYPE.canAssignTo(functionType));\n    assertFalse(ALL_TYPE.canAssignTo(recordType));\n    assertFalse(ALL_TYPE.canAssignTo(NULL_TYPE));\n    assertFalse(ALL_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(ALL_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(ALL_TYPE.canAssignTo(unresolvedNamedType));\n    assertFalse(ALL_TYPE.canAssignTo(namedGoogBar));\n    assertFalse(ALL_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(ALL_TYPE.canAssignTo(VOID_TYPE));\n    assertTrue(ALL_TYPE.canAssignTo(UNKNOWN_TYPE));\n\n    // canBeCalled\n    assertFalse(ALL_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(ALL_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(ALL_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(ALL_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(ALL_TYPE, functionType);\n    assertCanTestForEqualityWith(ALL_TYPE, recordType);\n    assertCanTestForEqualityWith(ALL_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(ALL_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(ALL_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(ALL_TYPE, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(functionType));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(recordType));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertTrue(ALL_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(ALL_TYPE.isNullable());\n\n    // getLeastSupertype\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(UNKNOWN_TYPE));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // matchesXxx\n    assertFalse(ALL_TYPE.matchesInt32Context());\n    assertFalse(ALL_TYPE.matchesNumberContext());\n    assertTrue(ALL_TYPE.matchesObjectContext());\n    assertTrue(ALL_TYPE.matchesStringContext());\n    assertFalse(ALL_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"*\", ALL_TYPE.toString());\n\n    assertTrue(ALL_TYPE.hasDisplayName());\n    assertEquals(\"<Any Type>\", ALL_TYPE.getDisplayName());\n\n    Asserts.assertResolvesToSame(ALL_TYPE);\n    assertFalse(ALL_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 1070,
        "end_line": 1187,
        "comment": "\n   * Tests the behavior of the unknown type.\n   ",
        "child_ranges": [
            "(line 1072,col 5)-(line 1072,col 40)",
            "(line 1073,col 5)-(line 1073,col 47)",
            "(line 1074,col 5)-(line 1074,col 39)",
            "(line 1075,col 5)-(line 1075,col 46)",
            "(line 1076,col 5)-(line 1076,col 40)",
            "(line 1077,col 5)-(line 1077,col 39)",
            "(line 1078,col 5)-(line 1078,col 37)",
            "(line 1079,col 5)-(line 1079,col 47)",
            "(line 1080,col 5)-(line 1080,col 46)",
            "(line 1081,col 5)-(line 1081,col 37)",
            "(line 1082,col 5)-(line 1082,col 52)",
            "(line 1083,col 5)-(line 1083,col 41)",
            "(line 1084,col 5)-(line 1084,col 37)",
            "(line 1085,col 5)-(line 1085,col 47)",
            "(line 1086,col 5)-(line 1086,col 46)",
            "(line 1087,col 5)-(line 1087,col 39)",
            "(line 1088,col 5)-(line 1088,col 40)",
            "(line 1089,col 5)-(line 1089,col 37)",
            "(line 1090,col 5)-(line 1090,col 39)",
            "(line 1091,col 5)-(line 1091,col 42)",
            "(line 1092,col 5)-(line 1092,col 43)",
            "(line 1095,col 5)-(line 1095,col 47)",
            "(line 1096,col 5)-(line 1096,col 54)",
            "(line 1097,col 5)-(line 1097,col 47)",
            "(line 1098,col 5)-(line 1098,col 58)",
            "(line 1099,col 5)-(line 1099,col 51)",
            "(line 1100,col 5)-(line 1100,col 52)",
            "(line 1101,col 5)-(line 1101,col 50)",
            "(line 1102,col 5)-(line 1102,col 49)",
            "(line 1103,col 5)-(line 1103,col 51)",
            "(line 1104,col 5)-(line 1104,col 49)",
            "(line 1105,col 5)-(line 1105,col 58)",
            "(line 1106,col 5)-(line 1106,col 52)",
            "(line 1107,col 5)-(line 1107,col 51)",
            "(line 1108,col 5)-(line 1108,col 49)",
            "(line 1109,col 5)-(line 1109,col 51)",
            "(line 1112,col 5)-(line 1112,col 40)",
            "(line 1115,col 5)-(line 1115,col 53)",
            "(line 1116,col 5)-(line 1116,col 63)",
            "(line 1117,col 5)-(line 1117,col 56)",
            "(line 1118,col 5)-(line 1118,col 57)",
            "(line 1119,col 5)-(line 1119,col 55)",
            "(line 1120,col 5)-(line 1120,col 54)",
            "(line 1121,col 5)-(line 1121,col 56)",
            "(line 1122,col 5)-(line 1122,col 54)",
            "(line 1123,col 5)-(line 1123,col 56)",
            "(line 1126,col 5)-(line 1126,col 64)",
            "(line 1127,col 5)-(line 1127,col 71)",
            "(line 1128,col 5)-(line 1128,col 67)",
            "(line 1129,col 5)-(line 1129,col 69)",
            "(line 1130,col 5)-(line 1130,col 76)",
            "(line 1131,col 5)-(line 1131,col 66)",
            "(line 1132,col 5)-(line 1132,col 67)",
            "(line 1133,col 5)-(line 1133,col 72)",
            "(line 1134,col 5)-(line 1134,col 69)",
            "(line 1135,col 5)-(line 1135,col 67)",
            "(line 1136,col 5)-(line 1136,col 66)",
            "(line 1137,col 5)-(line 1137,col 68)",
            "(line 1138,col 5)-(line 1138,col 75)",
            "(line 1139,col 5)-(line 1139,col 68)",
            "(line 1140,col 5)-(line 1140,col 71)",
            "(line 1141,col 5)-(line 1141,col 73)",
            "(line 1142,col 5)-(line 1142,col 77)",
            "(line 1143,col 5)-(line 1143,col 68)",
            "(line 1144,col 5)-(line 1144,col 68)",
            "(line 1145,col 5)-(line 1145,col 75)",
            "(line 1146,col 5)-(line 1146,col 74)",
            "(line 1147,col 5)-(line 1147,col 72)",
            "(line 1148,col 5)-(line 1148,col 65)",
            "(line 1149,col 5)-(line 1149,col 66)",
            "(line 1152,col 5)-(line 1152,col 39)",
            "(line 1155,col 5)-(line 1156,col 46)",
            "(line 1157,col 5)-(line 1158,col 50)",
            "(line 1159,col 5)-(line 1160,col 56)",
            "(line 1161,col 5)-(line 1162,col 49)",
            "(line 1163,col 5)-(line 1164,col 50)",
            "(line 1165,col 5)-(line 1166,col 49)",
            "(line 1167,col 5)-(line 1168,col 47)",
            "(line 1169,col 5)-(line 1170,col 49)",
            "(line 1173,col 5)-(line 1173,col 48)",
            "(line 1174,col 5)-(line 1174,col 49)",
            "(line 1175,col 5)-(line 1175,col 48)",
            "(line 1176,col 5)-(line 1176,col 48)",
            "(line 1177,col 5)-(line 1177,col 49)",
            "(line 1180,col 5)-(line 1180,col 43)",
            "(line 1182,col 5)-(line 1182,col 42)",
            "(line 1183,col 5)-(line 1183,col 58)",
            "(line 1185,col 5)-(line 1185,col 43)",
            "(line 1186,col 5)-(line 1186,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testTheObjectType()",
        "snippet": "  public void testTheObjectType() throws Exception {\n    // implicit prototype\n    assertTypeEquals(OBJECT_PROTOTYPE, OBJECT_TYPE.getImplicitPrototype());\n\n    // isXxx\n    assertFalse(OBJECT_TYPE.isNoObjectType());\n    assertFalse(OBJECT_TYPE.isNoType());\n    assertFalse(OBJECT_TYPE.isArrayType());\n    assertFalse(OBJECT_TYPE.isBooleanValueType());\n    assertFalse(OBJECT_TYPE.isDateType());\n    assertFalse(OBJECT_TYPE.isEnumElementType());\n    assertFalse(OBJECT_TYPE.isNullType());\n    assertFalse(OBJECT_TYPE.isNamedType());\n    assertFalse(OBJECT_TYPE.isNullType());\n    assertFalse(OBJECT_TYPE.isNumber());\n    assertFalse(OBJECT_TYPE.isNumberObjectType());\n    assertFalse(OBJECT_TYPE.isNumberValueType());\n    assertTrue(OBJECT_TYPE.isObject());\n    assertFalse(OBJECT_TYPE.isFunctionPrototypeType());\n    assertTrue(OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());\n    assertFalse(OBJECT_TYPE.isRegexpType());\n    assertFalse(OBJECT_TYPE.isString());\n    assertFalse(OBJECT_TYPE.isStringObjectType());\n    assertFalse(OBJECT_TYPE.isStringValueType());\n    assertFalse(OBJECT_TYPE.isEnumType());\n    assertFalse(OBJECT_TYPE.isUnionType());\n    assertFalse(OBJECT_TYPE.isAllType());\n    assertFalse(OBJECT_TYPE.isVoidType());\n    assertFalse(OBJECT_TYPE.isConstructor());\n    assertTrue(OBJECT_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertFalse(OBJECT_TYPE.canAssignTo(NO_TYPE));\n    assertTrue(OBJECT_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(OBJECT_TYPE.canAssignTo(functionType));\n    assertFalse(OBJECT_TYPE.canAssignTo(recordType));\n    assertFalse(OBJECT_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(OBJECT_TYPE.canAssignTo(DATE_TYPE));\n    assertFalse(OBJECT_TYPE.canAssignTo(namedGoogBar));\n    assertTrue(OBJECT_TYPE.canAssignTo(unresolvedNamedType));\n    assertFalse(OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(OBJECT_TYPE.canAssignTo(ARRAY_TYPE));\n    assertTrue(OBJECT_TYPE.canAssignTo(UNKNOWN_TYPE));\n\n    // canBeCalled\n    assertFalse(OBJECT_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(OBJECT_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, STRING_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, BOOLEAN_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, functionType);\n    assertCanTestForEqualityWith(OBJECT_TYPE, recordType);\n    assertCannotTestForEqualityWith(OBJECT_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, ARRAY_TYPE);\n    assertCanTestForEqualityWith(OBJECT_TYPE, UNKNOWN_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(functionType));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(recordType));\n    assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertTrue(OBJECT_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // isNullable\n    assertFalse(OBJECT_TYPE.isNullable());\n\n    // getLeastSupertype\n    assertTypeEquals(ALL_TYPE,\n        OBJECT_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(OBJECT_TYPE,\n        OBJECT_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(createUnionType(OBJECT_TYPE, NUMBER_TYPE),\n        OBJECT_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(OBJECT_TYPE,\n        OBJECT_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(OBJECT_TYPE,\n        OBJECT_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(OBJECT_TYPE,\n        OBJECT_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(OBJECT_TYPE,\n        OBJECT_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // getPropertyType\n    assertEquals(7, OBJECT_TYPE.getPropertiesCount());\n    assertReturnTypeEquals(OBJECT_TYPE,\n        OBJECT_TYPE.getPropertyType(\"constructor\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        OBJECT_TYPE.getPropertyType(\"toString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        OBJECT_TYPE.getPropertyType(\"toLocaleString\"));\n    assertReturnTypeEquals(UNKNOWN_TYPE,\n        OBJECT_TYPE.getPropertyType(\"valueOf\"));\n    assertReturnTypeEquals(BOOLEAN_TYPE,\n        OBJECT_TYPE.getPropertyType(\"hasOwnProperty\"));\n    assertReturnTypeEquals(BOOLEAN_TYPE,\n        OBJECT_TYPE.getPropertyType(\"isPrototypeOf\"));\n    assertReturnTypeEquals(BOOLEAN_TYPE,\n        OBJECT_TYPE.getPropertyType(\"propertyIsEnumerable\"));\n\n    // matchesXxx\n    assertFalse(OBJECT_TYPE.matchesInt32Context());\n    assertFalse(OBJECT_TYPE.matchesNumberContext());\n    assertTrue(OBJECT_TYPE.matchesObjectContext());\n    assertTrue(OBJECT_TYPE.matchesStringContext());\n    assertFalse(OBJECT_TYPE.matchesUint32Context());\n\n    // implicit prototype\n    assertTypeEquals(OBJECT_PROTOTYPE, OBJECT_TYPE.getImplicitPrototype());\n\n    // toString\n    assertEquals(\"Object\", OBJECT_TYPE.toString());\n\n    assertTrue(OBJECT_TYPE.isNativeObjectType());\n    assertTrue(OBJECT_TYPE.getImplicitPrototype().isNativeObjectType());\n\n    Asserts.assertResolvesToSame(OBJECT_TYPE);\n    assertFalse(OBJECT_TYPE.isNominalConstructor());\n    assertTrue(OBJECT_TYPE.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 1193,
        "end_line": 1341,
        "comment": "\n   * Tests the behavior of the Object type (the object\n   * at the top of the JavaScript hierarchy).\n   ",
        "child_ranges": [
            "(line 1195,col 5)-(line 1195,col 75)",
            "(line 1198,col 5)-(line 1198,col 46)",
            "(line 1199,col 5)-(line 1199,col 40)",
            "(line 1200,col 5)-(line 1200,col 43)",
            "(line 1201,col 5)-(line 1201,col 50)",
            "(line 1202,col 5)-(line 1202,col 42)",
            "(line 1203,col 5)-(line 1203,col 49)",
            "(line 1204,col 5)-(line 1204,col 42)",
            "(line 1205,col 5)-(line 1205,col 43)",
            "(line 1206,col 5)-(line 1206,col 42)",
            "(line 1207,col 5)-(line 1207,col 40)",
            "(line 1208,col 5)-(line 1208,col 50)",
            "(line 1209,col 5)-(line 1209,col 49)",
            "(line 1210,col 5)-(line 1210,col 39)",
            "(line 1211,col 5)-(line 1211,col 55)",
            "(line 1212,col 5)-(line 1212,col 77)",
            "(line 1213,col 5)-(line 1213,col 44)",
            "(line 1214,col 5)-(line 1214,col 40)",
            "(line 1215,col 5)-(line 1215,col 50)",
            "(line 1216,col 5)-(line 1216,col 49)",
            "(line 1217,col 5)-(line 1217,col 42)",
            "(line 1218,col 5)-(line 1218,col 43)",
            "(line 1219,col 5)-(line 1219,col 41)",
            "(line 1220,col 5)-(line 1220,col 42)",
            "(line 1221,col 5)-(line 1221,col 45)",
            "(line 1222,col 5)-(line 1222,col 45)",
            "(line 1225,col 5)-(line 1225,col 50)",
            "(line 1226,col 5)-(line 1226,col 50)",
            "(line 1227,col 5)-(line 1227,col 61)",
            "(line 1228,col 5)-(line 1228,col 54)",
            "(line 1229,col 5)-(line 1229,col 55)",
            "(line 1230,col 5)-(line 1230,col 53)",
            "(line 1231,col 5)-(line 1231,col 52)",
            "(line 1232,col 5)-(line 1232,col 53)",
            "(line 1233,col 5)-(line 1233,col 52)",
            "(line 1234,col 5)-(line 1234,col 55)",
            "(line 1235,col 5)-(line 1235,col 61)",
            "(line 1236,col 5)-(line 1236,col 54)",
            "(line 1237,col 5)-(line 1237,col 53)",
            "(line 1238,col 5)-(line 1238,col 54)",
            "(line 1241,col 5)-(line 1241,col 43)",
            "(line 1244,col 5)-(line 1244,col 56)",
            "(line 1245,col 5)-(line 1245,col 66)",
            "(line 1246,col 5)-(line 1246,col 59)",
            "(line 1247,col 5)-(line 1247,col 59)",
            "(line 1248,col 5)-(line 1248,col 60)",
            "(line 1249,col 5)-(line 1249,col 60)",
            "(line 1250,col 5)-(line 1250,col 58)",
            "(line 1251,col 5)-(line 1251,col 60)",
            "(line 1252,col 5)-(line 1252,col 59)",
            "(line 1253,col 5)-(line 1253,col 57)",
            "(line 1254,col 5)-(line 1254,col 59)",
            "(line 1255,col 5)-(line 1255,col 58)",
            "(line 1256,col 5)-(line 1256,col 60)",
            "(line 1259,col 5)-(line 1259,col 67)",
            "(line 1260,col 5)-(line 1260,col 74)",
            "(line 1261,col 5)-(line 1261,col 70)",
            "(line 1262,col 5)-(line 1262,col 73)",
            "(line 1263,col 5)-(line 1263,col 79)",
            "(line 1264,col 5)-(line 1264,col 69)",
            "(line 1265,col 5)-(line 1265,col 70)",
            "(line 1266,col 5)-(line 1266,col 75)",
            "(line 1267,col 5)-(line 1267,col 72)",
            "(line 1268,col 5)-(line 1268,col 70)",
            "(line 1269,col 5)-(line 1269,col 70)",
            "(line 1270,col 5)-(line 1270,col 72)",
            "(line 1271,col 5)-(line 1271,col 78)",
            "(line 1272,col 5)-(line 1272,col 71)",
            "(line 1273,col 5)-(line 1273,col 74)",
            "(line 1274,col 5)-(line 1274,col 76)",
            "(line 1275,col 5)-(line 1276,col 61)",
            "(line 1277,col 5)-(line 1277,col 71)",
            "(line 1278,col 5)-(line 1278,col 72)",
            "(line 1279,col 5)-(line 1279,col 78)",
            "(line 1280,col 5)-(line 1280,col 77)",
            "(line 1281,col 5)-(line 1281,col 75)",
            "(line 1282,col 5)-(line 1282,col 68)",
            "(line 1283,col 5)-(line 1283,col 70)",
            "(line 1284,col 5)-(line 1284,col 72)",
            "(line 1287,col 5)-(line 1287,col 42)",
            "(line 1290,col 5)-(line 1291,col 49)",
            "(line 1292,col 5)-(line 1293,col 59)",
            "(line 1294,col 5)-(line 1295,col 52)",
            "(line 1296,col 5)-(line 1297,col 53)",
            "(line 1298,col 5)-(line 1299,col 52)",
            "(line 1300,col 5)-(line 1301,col 50)",
            "(line 1302,col 5)-(line 1303,col 52)",
            "(line 1306,col 5)-(line 1306,col 54)",
            "(line 1307,col 5)-(line 1308,col 52)",
            "(line 1309,col 5)-(line 1310,col 49)",
            "(line 1311,col 5)-(line 1312,col 55)",
            "(line 1313,col 5)-(line 1314,col 48)",
            "(line 1315,col 5)-(line 1316,col 55)",
            "(line 1317,col 5)-(line 1318,col 54)",
            "(line 1319,col 5)-(line 1320,col 61)",
            "(line 1323,col 5)-(line 1323,col 51)",
            "(line 1324,col 5)-(line 1324,col 52)",
            "(line 1325,col 5)-(line 1325,col 51)",
            "(line 1326,col 5)-(line 1326,col 51)",
            "(line 1327,col 5)-(line 1327,col 52)",
            "(line 1330,col 5)-(line 1330,col 75)",
            "(line 1333,col 5)-(line 1333,col 51)",
            "(line 1335,col 5)-(line 1335,col 49)",
            "(line 1336,col 5)-(line 1336,col 72)",
            "(line 1338,col 5)-(line 1338,col 46)",
            "(line 1339,col 5)-(line 1339,col 52)",
            "(line 1340,col 5)-(line 1340,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNumberObjectType()",
        "snippet": "  public void testNumberObjectType() throws Exception {\n    // isXxx\n    assertFalse(NUMBER_OBJECT_TYPE.isArrayType());\n    assertFalse(NUMBER_OBJECT_TYPE.isBooleanObjectType());\n    assertFalse(NUMBER_OBJECT_TYPE.isBooleanValueType());\n    assertFalse(NUMBER_OBJECT_TYPE.isDateType());\n    assertFalse(NUMBER_OBJECT_TYPE.isEnumElementType());\n    assertFalse(NUMBER_OBJECT_TYPE.isNamedType());\n    assertFalse(NUMBER_OBJECT_TYPE.isNullType());\n    assertTrue(NUMBER_OBJECT_TYPE.isNumber());\n    assertTrue(NUMBER_OBJECT_TYPE.isNumberObjectType());\n    assertFalse(NUMBER_OBJECT_TYPE.isNumberValueType());\n    assertTrue(NUMBER_OBJECT_TYPE.isObject());\n    assertFalse(NUMBER_OBJECT_TYPE.isFunctionPrototypeType());\n    assertTrue(\n        NUMBER_OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());\n    assertFalse(NUMBER_OBJECT_TYPE.isRegexpType());\n    assertFalse(NUMBER_OBJECT_TYPE.isString());\n    assertFalse(NUMBER_OBJECT_TYPE.isStringObjectType());\n    assertFalse(NUMBER_OBJECT_TYPE.isStringValueType());\n    assertFalse(NUMBER_OBJECT_TYPE.isEnumType());\n    assertFalse(NUMBER_OBJECT_TYPE.isUnionType());\n    assertFalse(NUMBER_OBJECT_TYPE.isAllType());\n    assertFalse(NUMBER_OBJECT_TYPE.isVoidType());\n    assertFalse(NUMBER_OBJECT_TYPE.isConstructor());\n    assertTrue(NUMBER_OBJECT_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertTypeEquals(NUMBER_OBJECT_TYPE, NUMBER_TYPE.autoboxesTo());\n\n    // unboxesTo\n    assertTypeEquals(NUMBER_TYPE, NUMBER_OBJECT_TYPE.unboxesTo());\n\n    // canAssignTo\n    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(functionType));\n    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(unresolvedNamedType));\n    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(namedGoogBar));\n    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(\n            createUnionType(NUMBER_OBJECT_TYPE, NULL_TYPE)));\n    assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(\n            createUnionType(NUMBER_TYPE, NULL_TYPE)));\n    assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(UNKNOWN_TYPE));\n\n    // canBeCalled\n    assertFalse(NUMBER_OBJECT_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, NO_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, NO_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, functionType);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, elementsType);\n    assertCannotTestForEqualityWith(NUMBER_OBJECT_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, ARRAY_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertTrue(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.\n        canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(NUMBER_OBJECT_TYPE.isNullable());\n\n    // getLeastSupertype\n    assertTypeEquals(ALL_TYPE,\n        NUMBER_OBJECT_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE, STRING_OBJECT_TYPE),\n        NUMBER_OBJECT_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE),\n        NUMBER_OBJECT_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE, functionType),\n        NUMBER_OBJECT_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(OBJECT_TYPE,\n        NUMBER_OBJECT_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE, DATE_TYPE),\n        NUMBER_OBJECT_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE, REGEXP_TYPE),\n        NUMBER_OBJECT_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // matchesXxx\n    assertTrue(NUMBER_OBJECT_TYPE.matchesInt32Context());\n    assertTrue(NUMBER_OBJECT_TYPE.matchesNumberContext());\n    assertTrue(NUMBER_OBJECT_TYPE.matchesObjectContext());\n    assertTrue(NUMBER_OBJECT_TYPE.matchesStringContext());\n    assertTrue(NUMBER_OBJECT_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"Number\", NUMBER_OBJECT_TYPE.toString());\n    assertTrue(NUMBER_OBJECT_TYPE.hasDisplayName());\n    assertEquals(\"Number\", NUMBER_OBJECT_TYPE.getDisplayName());\n\n    assertTrue(NUMBER_OBJECT_TYPE.isNativeObjectType());\n\n    Asserts.assertResolvesToSame(NUMBER_OBJECT_TYPE);\n  }\n",
        "begin_line": 1346,
        "end_line": 1481,
        "comment": "\n   * Tests the behavior of the number value type.\n   ",
        "child_ranges": [
            "(line 1348,col 5)-(line 1348,col 50)",
            "(line 1349,col 5)-(line 1349,col 58)",
            "(line 1350,col 5)-(line 1350,col 57)",
            "(line 1351,col 5)-(line 1351,col 49)",
            "(line 1352,col 5)-(line 1352,col 56)",
            "(line 1353,col 5)-(line 1353,col 50)",
            "(line 1354,col 5)-(line 1354,col 49)",
            "(line 1355,col 5)-(line 1355,col 46)",
            "(line 1356,col 5)-(line 1356,col 56)",
            "(line 1357,col 5)-(line 1357,col 56)",
            "(line 1358,col 5)-(line 1358,col 46)",
            "(line 1359,col 5)-(line 1359,col 62)",
            "(line 1360,col 5)-(line 1361,col 77)",
            "(line 1362,col 5)-(line 1362,col 51)",
            "(line 1363,col 5)-(line 1363,col 47)",
            "(line 1364,col 5)-(line 1364,col 57)",
            "(line 1365,col 5)-(line 1365,col 56)",
            "(line 1366,col 5)-(line 1366,col 49)",
            "(line 1367,col 5)-(line 1367,col 50)",
            "(line 1368,col 5)-(line 1368,col 48)",
            "(line 1369,col 5)-(line 1369,col 49)",
            "(line 1370,col 5)-(line 1370,col 52)",
            "(line 1371,col 5)-(line 1371,col 52)",
            "(line 1374,col 5)-(line 1374,col 68)",
            "(line 1377,col 5)-(line 1377,col 66)",
            "(line 1380,col 5)-(line 1380,col 57)",
            "(line 1381,col 5)-(line 1381,col 68)",
            "(line 1382,col 5)-(line 1382,col 61)",
            "(line 1383,col 5)-(line 1383,col 62)",
            "(line 1384,col 5)-(line 1384,col 59)",
            "(line 1385,col 5)-(line 1385,col 60)",
            "(line 1386,col 5)-(line 1386,col 59)",
            "(line 1387,col 5)-(line 1387,col 68)",
            "(line 1388,col 5)-(line 1388,col 62)",
            "(line 1389,col 5)-(line 1390,col 61)",
            "(line 1391,col 5)-(line 1392,col 54)",
            "(line 1393,col 5)-(line 1393,col 61)",
            "(line 1396,col 5)-(line 1396,col 50)",
            "(line 1399,col 5)-(line 1399,col 62)",
            "(line 1400,col 5)-(line 1400,col 69)",
            "(line 1401,col 5)-(line 1401,col 63)",
            "(line 1402,col 5)-(line 1402,col 66)",
            "(line 1403,col 5)-(line 1403,col 73)",
            "(line 1404,col 5)-(line 1404,col 67)",
            "(line 1405,col 5)-(line 1405,col 67)",
            "(line 1406,col 5)-(line 1406,col 67)",
            "(line 1407,col 5)-(line 1407,col 66)",
            "(line 1408,col 5)-(line 1408,col 64)",
            "(line 1409,col 5)-(line 1409,col 66)",
            "(line 1410,col 5)-(line 1410,col 65)",
            "(line 1413,col 5)-(line 1413,col 74)",
            "(line 1414,col 5)-(line 1415,col 55)",
            "(line 1416,col 5)-(line 1416,col 78)",
            "(line 1417,col 5)-(line 1417,col 80)",
            "(line 1418,col 5)-(line 1419,col 60)",
            "(line 1420,col 5)-(line 1420,col 77)",
            "(line 1421,col 5)-(line 1421,col 78)",
            "(line 1422,col 5)-(line 1423,col 56)",
            "(line 1424,col 5)-(line 1424,col 80)",
            "(line 1425,col 5)-(line 1425,col 77)",
            "(line 1426,col 5)-(line 1426,col 79)",
            "(line 1427,col 5)-(line 1428,col 59)",
            "(line 1429,col 5)-(line 1429,col 78)",
            "(line 1430,col 5)-(line 1431,col 55)",
            "(line 1432,col 5)-(line 1433,col 57)",
            "(line 1434,col 5)-(line 1435,col 61)",
            "(line 1436,col 5)-(line 1436,col 79)",
            "(line 1437,col 5)-(line 1437,col 79)",
            "(line 1438,col 5)-(line 1439,col 59)",
            "(line 1440,col 5)-(line 1441,col 58)",
            "(line 1442,col 5)-(line 1443,col 56)",
            "(line 1444,col 5)-(line 1444,col 75)",
            "(line 1445,col 5)-(line 1445,col 77)",
            "(line 1448,col 5)-(line 1448,col 49)",
            "(line 1451,col 5)-(line 1452,col 56)",
            "(line 1453,col 5)-(line 1454,col 66)",
            "(line 1455,col 5)-(line 1456,col 59)",
            "(line 1457,col 5)-(line 1458,col 60)",
            "(line 1459,col 5)-(line 1460,col 59)",
            "(line 1461,col 5)-(line 1462,col 57)",
            "(line 1463,col 5)-(line 1464,col 59)",
            "(line 1467,col 5)-(line 1467,col 57)",
            "(line 1468,col 5)-(line 1468,col 58)",
            "(line 1469,col 5)-(line 1469,col 58)",
            "(line 1470,col 5)-(line 1470,col 58)",
            "(line 1471,col 5)-(line 1471,col 58)",
            "(line 1474,col 5)-(line 1474,col 58)",
            "(line 1475,col 5)-(line 1475,col 52)",
            "(line 1476,col 5)-(line 1476,col 64)",
            "(line 1478,col 5)-(line 1478,col 56)",
            "(line 1480,col 5)-(line 1480,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNumberValueType()",
        "snippet": "  public void testNumberValueType() throws Exception {\n    // isXxx\n    assertFalse(NUMBER_TYPE.isArrayType());\n    assertFalse(NUMBER_TYPE.isBooleanObjectType());\n    assertFalse(NUMBER_TYPE.isBooleanValueType());\n    assertFalse(NUMBER_TYPE.isDateType());\n    assertFalse(NUMBER_TYPE.isEnumElementType());\n    assertFalse(NUMBER_TYPE.isNamedType());\n    assertFalse(NUMBER_TYPE.isNullType());\n    assertTrue(NUMBER_TYPE.isNumber());\n    assertFalse(NUMBER_TYPE.isNumberObjectType());\n    assertTrue(NUMBER_TYPE.isNumberValueType());\n    assertFalse(NUMBER_TYPE.isFunctionPrototypeType());\n    assertFalse(NUMBER_TYPE.isRegexpType());\n    assertFalse(NUMBER_TYPE.isString());\n    assertFalse(NUMBER_TYPE.isStringObjectType());\n    assertFalse(NUMBER_TYPE.isStringValueType());\n    assertFalse(NUMBER_TYPE.isEnumType());\n    assertFalse(NUMBER_TYPE.isUnionType());\n    assertFalse(NUMBER_TYPE.isAllType());\n    assertFalse(NUMBER_TYPE.isVoidType());\n    assertFalse(NUMBER_TYPE.isConstructor());\n    assertFalse(NUMBER_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertTypeEquals(NUMBER_OBJECT_TYPE, NUMBER_TYPE.autoboxesTo());\n\n    // canAssignTo\n    assertTrue(NUMBER_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(NUMBER_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertTrue(NUMBER_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(NUMBER_TYPE.canAssignTo(functionType));\n    assertFalse(NUMBER_TYPE.canAssignTo(NULL_TYPE));\n    assertFalse(NUMBER_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(NUMBER_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(NUMBER_TYPE.canAssignTo(unresolvedNamedType));\n    assertFalse(NUMBER_TYPE.canAssignTo(namedGoogBar));\n    assertTrue(NUMBER_TYPE.canAssignTo(\n            createUnionType(NUMBER_TYPE, NULL_TYPE)));\n    assertTrue(NUMBER_TYPE.canAssignTo(UNKNOWN_TYPE));\n\n    // canBeCalled\n    assertFalse(NUMBER_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(NUMBER_TYPE, NO_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, NO_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, STRING_OBJECT_TYPE);\n    assertCannotTestForEqualityWith(NUMBER_TYPE, functionType);\n    assertCannotTestForEqualityWith(NUMBER_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, ARRAY_TYPE);\n    assertCanTestForEqualityWith(NUMBER_TYPE, UNKNOWN_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(NUMBER_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertTrue(NUMBER_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(NUMBER_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(NUMBER_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(NUMBER_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(NUMBER_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // isNullable\n    assertFalse(NUMBER_TYPE.isNullable());\n\n    // getLeastSupertype\n    assertTypeEquals(ALL_TYPE,\n        NUMBER_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_TYPE, STRING_OBJECT_TYPE),\n        NUMBER_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_TYPE, functionType),\n        NUMBER_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(createUnionType(NUMBER_TYPE, OBJECT_TYPE),\n        NUMBER_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_TYPE, DATE_TYPE),\n        NUMBER_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(createUnionType(NUMBER_TYPE, REGEXP_TYPE),\n        NUMBER_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // matchesXxx\n    assertTrue(NUMBER_TYPE.matchesInt32Context());\n    assertTrue(NUMBER_TYPE.matchesNumberContext());\n    assertTrue(NUMBER_TYPE.matchesObjectContext());\n    assertTrue(NUMBER_TYPE.matchesStringContext());\n    assertTrue(NUMBER_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"number\", NUMBER_TYPE.toString());\n    assertTrue(NUMBER_TYPE.hasDisplayName());\n    assertEquals(\"number\", NUMBER_TYPE.getDisplayName());\n\n    Asserts.assertResolvesToSame(NUMBER_TYPE);\n    assertFalse(NUMBER_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 1486,
        "end_line": 1604,
        "comment": "\n   * Tests the behavior of the number value type.\n   ",
        "child_ranges": [
            "(line 1488,col 5)-(line 1488,col 43)",
            "(line 1489,col 5)-(line 1489,col 51)",
            "(line 1490,col 5)-(line 1490,col 50)",
            "(line 1491,col 5)-(line 1491,col 42)",
            "(line 1492,col 5)-(line 1492,col 49)",
            "(line 1493,col 5)-(line 1493,col 43)",
            "(line 1494,col 5)-(line 1494,col 42)",
            "(line 1495,col 5)-(line 1495,col 39)",
            "(line 1496,col 5)-(line 1496,col 50)",
            "(line 1497,col 5)-(line 1497,col 48)",
            "(line 1498,col 5)-(line 1498,col 55)",
            "(line 1499,col 5)-(line 1499,col 44)",
            "(line 1500,col 5)-(line 1500,col 40)",
            "(line 1501,col 5)-(line 1501,col 50)",
            "(line 1502,col 5)-(line 1502,col 49)",
            "(line 1503,col 5)-(line 1503,col 42)",
            "(line 1504,col 5)-(line 1504,col 43)",
            "(line 1505,col 5)-(line 1505,col 41)",
            "(line 1506,col 5)-(line 1506,col 42)",
            "(line 1507,col 5)-(line 1507,col 45)",
            "(line 1508,col 5)-(line 1508,col 46)",
            "(line 1511,col 5)-(line 1511,col 68)",
            "(line 1514,col 5)-(line 1514,col 50)",
            "(line 1515,col 5)-(line 1515,col 61)",
            "(line 1516,col 5)-(line 1516,col 53)",
            "(line 1517,col 5)-(line 1517,col 55)",
            "(line 1518,col 5)-(line 1518,col 52)",
            "(line 1519,col 5)-(line 1519,col 54)",
            "(line 1520,col 5)-(line 1520,col 52)",
            "(line 1521,col 5)-(line 1521,col 61)",
            "(line 1522,col 5)-(line 1522,col 55)",
            "(line 1523,col 5)-(line 1524,col 54)",
            "(line 1525,col 5)-(line 1525,col 54)",
            "(line 1528,col 5)-(line 1528,col 43)",
            "(line 1531,col 5)-(line 1531,col 55)",
            "(line 1532,col 5)-(line 1532,col 62)",
            "(line 1533,col 5)-(line 1533,col 56)",
            "(line 1534,col 5)-(line 1534,col 59)",
            "(line 1535,col 5)-(line 1535,col 66)",
            "(line 1536,col 5)-(line 1536,col 63)",
            "(line 1537,col 5)-(line 1537,col 60)",
            "(line 1538,col 5)-(line 1538,col 59)",
            "(line 1539,col 5)-(line 1539,col 57)",
            "(line 1540,col 5)-(line 1540,col 59)",
            "(line 1541,col 5)-(line 1541,col 58)",
            "(line 1542,col 5)-(line 1542,col 60)",
            "(line 1545,col 5)-(line 1545,col 67)",
            "(line 1546,col 5)-(line 1546,col 75)",
            "(line 1547,col 5)-(line 1547,col 71)",
            "(line 1548,col 5)-(line 1548,col 73)",
            "(line 1549,col 5)-(line 1549,col 80)",
            "(line 1550,col 5)-(line 1550,col 70)",
            "(line 1551,col 5)-(line 1551,col 71)",
            "(line 1552,col 5)-(line 1552,col 76)",
            "(line 1553,col 5)-(line 1553,col 73)",
            "(line 1554,col 5)-(line 1554,col 70)",
            "(line 1555,col 5)-(line 1555,col 71)",
            "(line 1556,col 5)-(line 1556,col 79)",
            "(line 1557,col 5)-(line 1557,col 72)",
            "(line 1558,col 5)-(line 1558,col 75)",
            "(line 1559,col 5)-(line 1559,col 77)",
            "(line 1560,col 5)-(line 1561,col 61)",
            "(line 1562,col 5)-(line 1562,col 72)",
            "(line 1563,col 5)-(line 1563,col 72)",
            "(line 1564,col 5)-(line 1564,col 79)",
            "(line 1565,col 5)-(line 1565,col 78)",
            "(line 1566,col 5)-(line 1566,col 76)",
            "(line 1567,col 5)-(line 1567,col 68)",
            "(line 1568,col 5)-(line 1568,col 70)",
            "(line 1569,col 5)-(line 1569,col 72)",
            "(line 1572,col 5)-(line 1572,col 42)",
            "(line 1575,col 5)-(line 1576,col 49)",
            "(line 1577,col 5)-(line 1578,col 59)",
            "(line 1579,col 5)-(line 1580,col 52)",
            "(line 1581,col 5)-(line 1582,col 53)",
            "(line 1583,col 5)-(line 1584,col 52)",
            "(line 1585,col 5)-(line 1586,col 50)",
            "(line 1587,col 5)-(line 1588,col 52)",
            "(line 1591,col 5)-(line 1591,col 50)",
            "(line 1592,col 5)-(line 1592,col 51)",
            "(line 1593,col 5)-(line 1593,col 51)",
            "(line 1594,col 5)-(line 1594,col 51)",
            "(line 1595,col 5)-(line 1595,col 51)",
            "(line 1598,col 5)-(line 1598,col 51)",
            "(line 1599,col 5)-(line 1599,col 45)",
            "(line 1600,col 5)-(line 1600,col 57)",
            "(line 1602,col 5)-(line 1602,col 46)",
            "(line 1603,col 5)-(line 1603,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNullType()",
        "snippet": "  public void testNullType() throws Exception {\n\n    // isXxx\n    assertFalse(NULL_TYPE.isArrayType());\n    assertFalse(NULL_TYPE.isBooleanValueType());\n    assertFalse(NULL_TYPE.isDateType());\n    assertFalse(NULL_TYPE.isEnumElementType());\n    assertFalse(NULL_TYPE.isNamedType());\n    assertTrue(NULL_TYPE.isNullType());\n    assertFalse(NULL_TYPE.isNumber());\n    assertFalse(NULL_TYPE.isNumberObjectType());\n    assertFalse(NULL_TYPE.isNumberValueType());\n    assertFalse(NULL_TYPE.isFunctionPrototypeType());\n    assertFalse(NULL_TYPE.isRegexpType());\n    assertFalse(NULL_TYPE.isString());\n    assertFalse(NULL_TYPE.isStringObjectType());\n    assertFalse(NULL_TYPE.isStringValueType());\n    assertFalse(NULL_TYPE.isEnumType());\n    assertFalse(NULL_TYPE.isUnionType());\n    assertFalse(NULL_TYPE.isAllType());\n    assertFalse(NULL_TYPE.isVoidType());\n    assertFalse(NULL_TYPE.isConstructor());\n    assertFalse(NULL_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertNull(NULL_TYPE.autoboxesTo());\n\n    // canAssignTo\n    assertFalse(NULL_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canAssignTo(NO_TYPE));\n    assertTrue(NULL_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(NULL_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(NULL_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(NULL_TYPE.canAssignTo(functionType));\n    assertFalse(NULL_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canAssignTo(DATE_TYPE));\n    assertFalse(NULL_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(NULL_TYPE.canAssignTo(ARRAY_TYPE));\n    assertTrue(NULL_TYPE.canAssignTo(UNKNOWN_TYPE));\n\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NO_OBJECT_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NO_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NULL_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(ALL_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(STRING_OBJECT_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(NUMBER_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(functionType)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(OBJECT_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(DATE_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(REGEXP_TYPE)));\n    assertTrue(NULL_TYPE.canAssignTo(createNullableType(ARRAY_TYPE)));\n\n    // canBeCalled\n    assertFalse(NULL_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(NULL_TYPE, NO_TYPE);\n    assertCanTestForEqualityWith(NULL_TYPE, NO_OBJECT_TYPE);\n    assertCanTestForEqualityWith(NULL_TYPE, ALL_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, ARRAY_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, BOOLEAN_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, BOOLEAN_OBJECT_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, DATE_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, ERROR_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, EVAL_ERROR_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, functionType);\n    assertCannotTestForEqualityWith(NULL_TYPE, NULL_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, NUMBER_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, NUMBER_OBJECT_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, OBJECT_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, URI_ERROR_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, RANGE_ERROR_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, REFERENCE_ERROR_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, REGEXP_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, STRING_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, STRING_OBJECT_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, SYNTAX_ERROR_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, TYPE_ERROR_TYPE);\n    assertCannotTestForEqualityWith(NULL_TYPE, VOID_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(NULL_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(NULL_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(functionType));\n    assertTrue(NULL_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(NULL_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(NULL_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(NULL_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(NULL_TYPE.canTestForShallowEqualityWith(\n            createNullableType(STRING_OBJECT_TYPE)));\n\n    // getLeastSupertype\n    assertTypeEquals(NULL_TYPE, NULL_TYPE.getLeastSupertype(NULL_TYPE));\n    assertTypeEquals(ALL_TYPE, NULL_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(createNullableType(STRING_OBJECT_TYPE),\n        NULL_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(createNullableType(NUMBER_TYPE),\n        NULL_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(createNullableType(functionType),\n        NULL_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(createNullableType(OBJECT_TYPE),\n        NULL_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(createNullableType(DATE_TYPE),\n        NULL_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(createNullableType(REGEXP_TYPE),\n        NULL_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // matchesXxx\n    assertTrue(NULL_TYPE.matchesInt32Context());\n    assertTrue(NULL_TYPE.matchesNumberContext());\n    assertFalse(NULL_TYPE.matchesObjectContext());\n    assertTrue(NULL_TYPE.matchesStringContext());\n    assertTrue(NULL_TYPE.matchesUint32Context());\n\n    // matchesObjectContext\n    assertFalse(NULL_TYPE.matchesObjectContext());\n\n    // toString\n    assertEquals(\"null\", NULL_TYPE.toString());\n    assertTrue(NULL_TYPE.hasDisplayName());\n    assertEquals(\"null\", NULL_TYPE.getDisplayName());\n\n    Asserts.assertResolvesToSame(NULL_TYPE);\n\n    // getGreatestSubtype\n    assertTrue(\n        NULL_TYPE.isSubtype(\n            createUnionType(forwardDeclaredNamedType, NULL_TYPE)));\n    assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getGreatestSubtype(\n            createUnionType(forwardDeclaredNamedType, NULL_TYPE)));\n    assertFalse(NULL_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 1609,
        "end_line": 1760,
        "comment": "\n   * Tests the behavior of the null type.\n   ",
        "child_ranges": [
            "(line 1612,col 5)-(line 1612,col 41)",
            "(line 1613,col 5)-(line 1613,col 48)",
            "(line 1614,col 5)-(line 1614,col 40)",
            "(line 1615,col 5)-(line 1615,col 47)",
            "(line 1616,col 5)-(line 1616,col 41)",
            "(line 1617,col 5)-(line 1617,col 39)",
            "(line 1618,col 5)-(line 1618,col 38)",
            "(line 1619,col 5)-(line 1619,col 48)",
            "(line 1620,col 5)-(line 1620,col 47)",
            "(line 1621,col 5)-(line 1621,col 53)",
            "(line 1622,col 5)-(line 1622,col 42)",
            "(line 1623,col 5)-(line 1623,col 38)",
            "(line 1624,col 5)-(line 1624,col 48)",
            "(line 1625,col 5)-(line 1625,col 47)",
            "(line 1626,col 5)-(line 1626,col 40)",
            "(line 1627,col 5)-(line 1627,col 41)",
            "(line 1628,col 5)-(line 1628,col 39)",
            "(line 1629,col 5)-(line 1629,col 40)",
            "(line 1630,col 5)-(line 1630,col 43)",
            "(line 1631,col 5)-(line 1631,col 44)",
            "(line 1634,col 5)-(line 1634,col 40)",
            "(line 1637,col 5)-(line 1637,col 55)",
            "(line 1638,col 5)-(line 1638,col 48)",
            "(line 1639,col 5)-(line 1639,col 49)",
            "(line 1640,col 5)-(line 1640,col 48)",
            "(line 1641,col 5)-(line 1641,col 59)",
            "(line 1642,col 5)-(line 1642,col 52)",
            "(line 1643,col 5)-(line 1643,col 53)",
            "(line 1644,col 5)-(line 1644,col 52)",
            "(line 1645,col 5)-(line 1645,col 50)",
            "(line 1646,col 5)-(line 1646,col 52)",
            "(line 1647,col 5)-(line 1647,col 51)",
            "(line 1648,col 5)-(line 1648,col 52)",
            "(line 1650,col 5)-(line 1650,col 74)",
            "(line 1651,col 5)-(line 1651,col 67)",
            "(line 1652,col 5)-(line 1652,col 69)",
            "(line 1653,col 5)-(line 1653,col 68)",
            "(line 1654,col 5)-(line 1654,col 78)",
            "(line 1655,col 5)-(line 1655,col 71)",
            "(line 1656,col 5)-(line 1656,col 72)",
            "(line 1657,col 5)-(line 1657,col 71)",
            "(line 1658,col 5)-(line 1658,col 69)",
            "(line 1659,col 5)-(line 1659,col 71)",
            "(line 1660,col 5)-(line 1660,col 70)",
            "(line 1663,col 5)-(line 1663,col 41)",
            "(line 1666,col 5)-(line 1666,col 53)",
            "(line 1667,col 5)-(line 1667,col 60)",
            "(line 1668,col 5)-(line 1668,col 54)",
            "(line 1669,col 5)-(line 1669,col 59)",
            "(line 1670,col 5)-(line 1670,col 61)",
            "(line 1671,col 5)-(line 1671,col 68)",
            "(line 1672,col 5)-(line 1672,col 58)",
            "(line 1673,col 5)-(line 1673,col 59)",
            "(line 1674,col 5)-(line 1674,col 64)",
            "(line 1675,col 5)-(line 1675,col 61)",
            "(line 1676,col 5)-(line 1676,col 58)",
            "(line 1677,col 5)-(line 1677,col 60)",
            "(line 1678,col 5)-(line 1678,col 67)",
            "(line 1679,col 5)-(line 1679,col 60)",
            "(line 1680,col 5)-(line 1680,col 63)",
            "(line 1681,col 5)-(line 1681,col 65)",
            "(line 1682,col 5)-(line 1682,col 69)",
            "(line 1683,col 5)-(line 1683,col 60)",
            "(line 1684,col 5)-(line 1684,col 60)",
            "(line 1685,col 5)-(line 1685,col 67)",
            "(line 1686,col 5)-(line 1686,col 66)",
            "(line 1687,col 5)-(line 1687,col 64)",
            "(line 1688,col 5)-(line 1688,col 58)",
            "(line 1691,col 5)-(line 1691,col 65)",
            "(line 1692,col 5)-(line 1692,col 73)",
            "(line 1693,col 5)-(line 1693,col 69)",
            "(line 1694,col 5)-(line 1694,col 71)",
            "(line 1695,col 5)-(line 1696,col 60)",
            "(line 1697,col 5)-(line 1697,col 68)",
            "(line 1698,col 5)-(line 1698,col 69)",
            "(line 1699,col 5)-(line 1699,col 74)",
            "(line 1700,col 5)-(line 1700,col 71)",
            "(line 1701,col 5)-(line 1701,col 67)",
            "(line 1702,col 5)-(line 1702,col 70)",
            "(line 1703,col 5)-(line 1703,col 77)",
            "(line 1704,col 5)-(line 1704,col 70)",
            "(line 1705,col 5)-(line 1705,col 73)",
            "(line 1706,col 5)-(line 1706,col 75)",
            "(line 1707,col 5)-(line 1708,col 61)",
            "(line 1709,col 5)-(line 1709,col 70)",
            "(line 1710,col 5)-(line 1710,col 70)",
            "(line 1711,col 5)-(line 1711,col 77)",
            "(line 1712,col 5)-(line 1712,col 76)",
            "(line 1713,col 5)-(line 1713,col 74)",
            "(line 1714,col 5)-(line 1714,col 66)",
            "(line 1715,col 5)-(line 1715,col 68)",
            "(line 1716,col 5)-(line 1717,col 53)",
            "(line 1720,col 5)-(line 1720,col 72)",
            "(line 1721,col 5)-(line 1721,col 70)",
            "(line 1722,col 5)-(line 1723,col 57)",
            "(line 1724,col 5)-(line 1725,col 50)",
            "(line 1726,col 5)-(line 1727,col 51)",
            "(line 1728,col 5)-(line 1729,col 50)",
            "(line 1730,col 5)-(line 1731,col 48)",
            "(line 1732,col 5)-(line 1733,col 50)",
            "(line 1736,col 5)-(line 1736,col 48)",
            "(line 1737,col 5)-(line 1737,col 49)",
            "(line 1738,col 5)-(line 1738,col 50)",
            "(line 1739,col 5)-(line 1739,col 49)",
            "(line 1740,col 5)-(line 1740,col 49)",
            "(line 1743,col 5)-(line 1743,col 50)",
            "(line 1746,col 5)-(line 1746,col 47)",
            "(line 1747,col 5)-(line 1747,col 43)",
            "(line 1748,col 5)-(line 1748,col 53)",
            "(line 1750,col 5)-(line 1750,col 44)",
            "(line 1753,col 5)-(line 1755,col 67)",
            "(line 1756,col 5)-(line 1758,col 67)",
            "(line 1759,col 5)-(line 1759,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testDateType()",
        "snippet": "  public void testDateType() throws Exception {\n    // isXxx\n    assertFalse(DATE_TYPE.isArrayType());\n    assertFalse(DATE_TYPE.isBooleanValueType());\n    assertTrue(DATE_TYPE.isDateType());\n    assertFalse(DATE_TYPE.isEnumElementType());\n    assertFalse(DATE_TYPE.isNamedType());\n    assertFalse(DATE_TYPE.isNullType());\n    assertFalse(DATE_TYPE.isNumberValueType());\n    assertFalse(DATE_TYPE.isFunctionPrototypeType());\n    assertTrue(DATE_TYPE.getImplicitPrototype().isFunctionPrototypeType());\n    assertFalse(DATE_TYPE.isRegexpType());\n    assertFalse(DATE_TYPE.isStringValueType());\n    assertFalse(DATE_TYPE.isEnumType());\n    assertFalse(DATE_TYPE.isUnionType());\n    assertFalse(DATE_TYPE.isAllType());\n    assertFalse(DATE_TYPE.isVoidType());\n    assertFalse(DATE_TYPE.isConstructor());\n    assertTrue(DATE_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertNull(DATE_TYPE.autoboxesTo());\n\n    // canAssignTo\n    assertFalse(DATE_TYPE.canAssignTo(NO_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(BOOLEAN_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n    assertTrue(DATE_TYPE.canAssignTo(DATE_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(ERROR_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(functionType));\n    assertFalse(DATE_TYPE.canAssignTo(NULL_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n    assertTrue(DATE_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(URI_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(STRING_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n    assertTrue(DATE_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(DATE_TYPE.canAssignTo(VOID_TYPE));\n\n    // canBeCalled\n    assertFalse(DATE_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(DATE_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(DATE_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(DATE_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(DATE_TYPE, functionType);\n    assertCannotTestForEqualityWith(DATE_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(DATE_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(DATE_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(DATE_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(DATE_TYPE, ARRAY_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(DATE_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(DATE_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(DATE_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertTrue(DATE_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(DATE_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(DATE_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(DATE_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(DATE_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(DATE_TYPE.isNullable());\n    assertTrue(createNullableType(DATE_TYPE).isNullable());\n\n    // getLeastSupertype\n    assertTypeEquals(ALL_TYPE,\n        DATE_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(createUnionType(DATE_TYPE, STRING_OBJECT_TYPE),\n        DATE_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(createUnionType(DATE_TYPE, NUMBER_TYPE),\n        DATE_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(createUnionType(DATE_TYPE, functionType),\n        DATE_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(OBJECT_TYPE, DATE_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(DATE_TYPE, DATE_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(createUnionType(DATE_TYPE, REGEXP_TYPE),\n        DATE_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // getPropertyType\n    assertEquals(46, DATE_TYPE.getImplicitPrototype().getPropertiesCount());\n    assertEquals(46, DATE_TYPE.getPropertiesCount());\n    assertReturnTypeEquals(DATE_TYPE, DATE_TYPE.getPropertyType(\"constructor\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toDateString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toTimeString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toLocaleString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toLocaleDateString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toLocaleTimeString\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"valueOf\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"getTime\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getFullYear\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getUTCFullYear\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"getMonth\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getUTCMonth\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"getDate\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getUTCDate\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"getDay\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"getUTCDay\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"getHours\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getUTCHours\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getMinutes\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getUTCMinutes\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getSeconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getUTCSeconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getMilliseconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getUTCMilliseconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"getTimezoneOffset\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"setTime\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setMilliseconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCMilliseconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setSeconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCSeconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCSeconds\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setMinutes\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCMinutes\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"setHours\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCHours\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"setDate\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCDate\"));\n    assertReturnTypeEquals(NUMBER_TYPE, DATE_TYPE.getPropertyType(\"setMonth\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCMonth\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setFullYear\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        DATE_TYPE.getPropertyType(\"setUTCFullYear\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toUTCString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        DATE_TYPE.getPropertyType(\"toGMTString\"));\n\n    // matchesXxx\n    assertTrue(DATE_TYPE.matchesInt32Context());\n    assertTrue(DATE_TYPE.matchesNumberContext());\n    assertTrue(DATE_TYPE.matchesObjectContext());\n    assertTrue(DATE_TYPE.matchesStringContext());\n    assertTrue(DATE_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"Date\", DATE_TYPE.toString());\n    assertTrue(DATE_TYPE.hasDisplayName());\n    assertEquals(\"Date\", DATE_TYPE.getDisplayName());\n\n    assertTrue(DATE_TYPE.isNativeObjectType());\n\n    Asserts.assertResolvesToSame(DATE_TYPE);\n    assertFalse(DATE_TYPE.isNominalConstructor());\n    assertTrue(DATE_TYPE.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 1765,
        "end_line": 1969,
        "comment": "\n   * Tests the behavior of the Date type.\n   ",
        "child_ranges": [
            "(line 1767,col 5)-(line 1767,col 41)",
            "(line 1768,col 5)-(line 1768,col 48)",
            "(line 1769,col 5)-(line 1769,col 39)",
            "(line 1770,col 5)-(line 1770,col 47)",
            "(line 1771,col 5)-(line 1771,col 41)",
            "(line 1772,col 5)-(line 1772,col 40)",
            "(line 1773,col 5)-(line 1773,col 47)",
            "(line 1774,col 5)-(line 1774,col 53)",
            "(line 1775,col 5)-(line 1775,col 75)",
            "(line 1776,col 5)-(line 1776,col 42)",
            "(line 1777,col 5)-(line 1777,col 47)",
            "(line 1778,col 5)-(line 1778,col 40)",
            "(line 1779,col 5)-(line 1779,col 41)",
            "(line 1780,col 5)-(line 1780,col 39)",
            "(line 1781,col 5)-(line 1781,col 40)",
            "(line 1782,col 5)-(line 1782,col 43)",
            "(line 1783,col 5)-(line 1783,col 43)",
            "(line 1786,col 5)-(line 1786,col 40)",
            "(line 1789,col 5)-(line 1789,col 48)",
            "(line 1790,col 5)-(line 1790,col 55)",
            "(line 1791,col 5)-(line 1791,col 49)",
            "(line 1792,col 5)-(line 1792,col 53)",
            "(line 1793,col 5)-(line 1793,col 60)",
            "(line 1794,col 5)-(line 1794,col 49)",
            "(line 1795,col 5)-(line 1795,col 51)",
            "(line 1796,col 5)-(line 1796,col 56)",
            "(line 1797,col 5)-(line 1797,col 53)",
            "(line 1798,col 5)-(line 1798,col 50)",
            "(line 1799,col 5)-(line 1799,col 52)",
            "(line 1800,col 5)-(line 1800,col 59)",
            "(line 1801,col 5)-(line 1801,col 51)",
            "(line 1802,col 5)-(line 1802,col 55)",
            "(line 1803,col 5)-(line 1803,col 57)",
            "(line 1804,col 5)-(line 1804,col 61)",
            "(line 1805,col 5)-(line 1805,col 52)",
            "(line 1806,col 5)-(line 1806,col 52)",
            "(line 1807,col 5)-(line 1807,col 59)",
            "(line 1808,col 5)-(line 1808,col 58)",
            "(line 1809,col 5)-(line 1809,col 56)",
            "(line 1810,col 5)-(line 1810,col 48)",
            "(line 1811,col 5)-(line 1811,col 50)",
            "(line 1814,col 5)-(line 1814,col 41)",
            "(line 1817,col 5)-(line 1817,col 54)",
            "(line 1818,col 5)-(line 1818,col 64)",
            "(line 1819,col 5)-(line 1819,col 57)",
            "(line 1820,col 5)-(line 1820,col 58)",
            "(line 1821,col 5)-(line 1821,col 58)",
            "(line 1822,col 5)-(line 1822,col 57)",
            "(line 1823,col 5)-(line 1823,col 55)",
            "(line 1824,col 5)-(line 1824,col 57)",
            "(line 1825,col 5)-(line 1825,col 56)",
            "(line 1828,col 5)-(line 1828,col 65)",
            "(line 1829,col 5)-(line 1829,col 72)",
            "(line 1830,col 5)-(line 1830,col 69)",
            "(line 1831,col 5)-(line 1831,col 71)",
            "(line 1832,col 5)-(line 1833,col 60)",
            "(line 1834,col 5)-(line 1834,col 67)",
            "(line 1835,col 5)-(line 1835,col 69)",
            "(line 1836,col 5)-(line 1836,col 74)",
            "(line 1837,col 5)-(line 1837,col 71)",
            "(line 1838,col 5)-(line 1838,col 68)",
            "(line 1839,col 5)-(line 1839,col 70)",
            "(line 1840,col 5)-(line 1840,col 77)",
            "(line 1841,col 5)-(line 1841,col 69)",
            "(line 1842,col 5)-(line 1842,col 73)",
            "(line 1843,col 5)-(line 1843,col 75)",
            "(line 1844,col 5)-(line 1845,col 61)",
            "(line 1846,col 5)-(line 1846,col 70)",
            "(line 1847,col 5)-(line 1847,col 70)",
            "(line 1848,col 5)-(line 1848,col 77)",
            "(line 1849,col 5)-(line 1849,col 76)",
            "(line 1850,col 5)-(line 1850,col 74)",
            "(line 1851,col 5)-(line 1851,col 66)",
            "(line 1852,col 5)-(line 1852,col 68)",
            "(line 1855,col 5)-(line 1855,col 40)",
            "(line 1856,col 5)-(line 1856,col 59)",
            "(line 1859,col 5)-(line 1860,col 47)",
            "(line 1861,col 5)-(line 1862,col 57)",
            "(line 1863,col 5)-(line 1864,col 50)",
            "(line 1865,col 5)-(line 1866,col 51)",
            "(line 1867,col 5)-(line 1867,col 76)",
            "(line 1868,col 5)-(line 1868,col 72)",
            "(line 1869,col 5)-(line 1870,col 50)",
            "(line 1873,col 5)-(line 1873,col 76)",
            "(line 1874,col 5)-(line 1874,col 53)",
            "(line 1875,col 5)-(line 1875,col 80)",
            "(line 1876,col 5)-(line 1877,col 47)",
            "(line 1878,col 5)-(line 1879,col 51)",
            "(line 1880,col 5)-(line 1881,col 51)",
            "(line 1882,col 5)-(line 1883,col 53)",
            "(line 1884,col 5)-(line 1885,col 57)",
            "(line 1886,col 5)-(line 1887,col 57)",
            "(line 1888,col 5)-(line 1888,col 78)",
            "(line 1889,col 5)-(line 1889,col 78)",
            "(line 1890,col 5)-(line 1891,col 50)",
            "(line 1892,col 5)-(line 1893,col 53)",
            "(line 1894,col 5)-(line 1894,col 79)",
            "(line 1895,col 5)-(line 1896,col 50)",
            "(line 1897,col 5)-(line 1897,col 78)",
            "(line 1898,col 5)-(line 1899,col 49)",
            "(line 1900,col 5)-(line 1900,col 77)",
            "(line 1901,col 5)-(line 1901,col 80)",
            "(line 1902,col 5)-(line 1902,col 79)",
            "(line 1903,col 5)-(line 1904,col 50)",
            "(line 1905,col 5)-(line 1906,col 49)",
            "(line 1907,col 5)-(line 1908,col 52)",
            "(line 1909,col 5)-(line 1910,col 49)",
            "(line 1911,col 5)-(line 1912,col 52)",
            "(line 1913,col 5)-(line 1914,col 54)",
            "(line 1915,col 5)-(line 1916,col 57)",
            "(line 1917,col 5)-(line 1918,col 56)",
            "(line 1919,col 5)-(line 1919,col 78)",
            "(line 1920,col 5)-(line 1921,col 54)",
            "(line 1922,col 5)-(line 1923,col 57)",
            "(line 1924,col 5)-(line 1925,col 49)",
            "(line 1926,col 5)-(line 1927,col 52)",
            "(line 1928,col 5)-(line 1929,col 52)",
            "(line 1930,col 5)-(line 1931,col 49)",
            "(line 1932,col 5)-(line 1933,col 52)",
            "(line 1934,col 5)-(line 1934,col 79)",
            "(line 1935,col 5)-(line 1936,col 50)",
            "(line 1937,col 5)-(line 1937,col 78)",
            "(line 1938,col 5)-(line 1939,col 49)",
            "(line 1940,col 5)-(line 1940,col 79)",
            "(line 1941,col 5)-(line 1942,col 50)",
            "(line 1943,col 5)-(line 1944,col 50)",
            "(line 1945,col 5)-(line 1946,col 53)",
            "(line 1947,col 5)-(line 1948,col 50)",
            "(line 1949,col 5)-(line 1950,col 50)",
            "(line 1953,col 5)-(line 1953,col 48)",
            "(line 1954,col 5)-(line 1954,col 49)",
            "(line 1955,col 5)-(line 1955,col 49)",
            "(line 1956,col 5)-(line 1956,col 49)",
            "(line 1957,col 5)-(line 1957,col 49)",
            "(line 1960,col 5)-(line 1960,col 47)",
            "(line 1961,col 5)-(line 1961,col 43)",
            "(line 1962,col 5)-(line 1962,col 53)",
            "(line 1964,col 5)-(line 1964,col 47)",
            "(line 1966,col 5)-(line 1966,col 44)",
            "(line 1967,col 5)-(line 1967,col 50)",
            "(line 1968,col 5)-(line 1968,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRegExpType()",
        "snippet": "  public void testRegExpType() throws Exception {\n    // isXxx\n    assertFalse(REGEXP_TYPE.isNoType());\n    assertFalse(REGEXP_TYPE.isNoObjectType());\n    assertFalse(REGEXP_TYPE.isArrayType());\n    assertFalse(REGEXP_TYPE.isBooleanValueType());\n    assertFalse(REGEXP_TYPE.isDateType());\n    assertFalse(REGEXP_TYPE.isEnumElementType());\n    assertFalse(REGEXP_TYPE.isNamedType());\n    assertFalse(REGEXP_TYPE.isNullType());\n    assertFalse(REGEXP_TYPE.isNumberValueType());\n    assertFalse(REGEXP_TYPE.isFunctionPrototypeType());\n    assertTrue(REGEXP_TYPE.getImplicitPrototype().isFunctionPrototypeType());\n    assertTrue(REGEXP_TYPE.isRegexpType());\n    assertFalse(REGEXP_TYPE.isStringValueType());\n    assertFalse(REGEXP_TYPE.isEnumType());\n    assertFalse(REGEXP_TYPE.isUnionType());\n    assertFalse(REGEXP_TYPE.isAllType());\n    assertFalse(REGEXP_TYPE.isVoidType());\n\n    // autoboxesTo\n    assertNull(REGEXP_TYPE.autoboxesTo());\n\n    // canAssignTo\n    assertFalse(REGEXP_TYPE.canAssignTo(NO_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(NO_OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(ARRAY_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(BOOLEAN_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(DATE_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(EVAL_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(functionType));\n    assertFalse(REGEXP_TYPE.canAssignTo(NULL_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));\n    assertTrue(REGEXP_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(URI_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(RANGE_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));\n    assertTrue(REGEXP_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(STRING_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(TYPE_ERROR_TYPE));\n    assertTrue(REGEXP_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(REGEXP_TYPE.canAssignTo(VOID_TYPE));\n\n    // canBeCalled\n    assertTrue(REGEXP_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(REGEXP_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(REGEXP_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(REGEXP_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(REGEXP_TYPE, functionType);\n    assertCannotTestForEqualityWith(REGEXP_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(REGEXP_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(REGEXP_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(REGEXP_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(REGEXP_TYPE, ARRAY_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(REGEXP_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(REGEXP_TYPE.isNullable());\n    assertTrue(createNullableType(REGEXP_TYPE).isNullable());\n\n    // getLeastSupertype\n    assertTypeEquals(ALL_TYPE,\n        REGEXP_TYPE.getLeastSupertype(ALL_TYPE));\n    assertTypeEquals(createUnionType(REGEXP_TYPE, STRING_OBJECT_TYPE),\n        REGEXP_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));\n    assertTypeEquals(createUnionType(REGEXP_TYPE, NUMBER_TYPE),\n        REGEXP_TYPE.getLeastSupertype(NUMBER_TYPE));\n    assertTypeEquals(createUnionType(REGEXP_TYPE, functionType),\n        REGEXP_TYPE.getLeastSupertype(functionType));\n    assertTypeEquals(OBJECT_TYPE, REGEXP_TYPE.getLeastSupertype(OBJECT_TYPE));\n    assertTypeEquals(createUnionType(DATE_TYPE, REGEXP_TYPE),\n        REGEXP_TYPE.getLeastSupertype(DATE_TYPE));\n    assertTypeEquals(REGEXP_TYPE,\n        REGEXP_TYPE.getLeastSupertype(REGEXP_TYPE));\n\n    // getPropertyType\n    assertEquals(9, REGEXP_TYPE.getImplicitPrototype().getPropertiesCount());\n    assertEquals(14, REGEXP_TYPE.getPropertiesCount());\n    assertReturnTypeEquals(REGEXP_TYPE,\n        REGEXP_TYPE.getPropertyType(\"constructor\"));\n    assertReturnTypeEquals(createNullableType(ARRAY_TYPE),\n        REGEXP_TYPE.getPropertyType(\"exec\"));\n    assertReturnTypeEquals(BOOLEAN_TYPE,\n        REGEXP_TYPE.getPropertyType(\"test\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        REGEXP_TYPE.getPropertyType(\"toString\"));\n    assertTypeEquals(STRING_TYPE, REGEXP_TYPE.getPropertyType(\"source\"));\n    assertTypeEquals(BOOLEAN_TYPE, REGEXP_TYPE.getPropertyType(\"global\"));\n    assertTypeEquals(BOOLEAN_TYPE, REGEXP_TYPE.getPropertyType(\"ignoreCase\"));\n    assertTypeEquals(BOOLEAN_TYPE, REGEXP_TYPE.getPropertyType(\"multiline\"));\n    assertTypeEquals(NUMBER_TYPE, REGEXP_TYPE.getPropertyType(\"lastIndex\"));\n\n    // matchesXxx\n    assertFalse(REGEXP_TYPE.matchesInt32Context());\n    assertFalse(REGEXP_TYPE.matchesNumberContext());\n    assertTrue(REGEXP_TYPE.matchesObjectContext());\n    assertTrue(REGEXP_TYPE.matchesStringContext());\n    assertFalse(REGEXP_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"RegExp\", REGEXP_TYPE.toString());\n    assertTrue(REGEXP_TYPE.hasDisplayName());\n    assertEquals(\"RegExp\", REGEXP_TYPE.getDisplayName());\n\n    assertTrue(REGEXP_TYPE.isNativeObjectType());\n\n    Asserts.assertResolvesToSame(REGEXP_TYPE);\n    assertFalse(REGEXP_TYPE.isNominalConstructor());\n    assertTrue(REGEXP_TYPE.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 1974,
        "end_line": 2116,
        "comment": "\n   * Tests the behavior of the RegExp type.\n   ",
        "child_ranges": [
            "(line 1976,col 5)-(line 1976,col 40)",
            "(line 1977,col 5)-(line 1977,col 46)",
            "(line 1978,col 5)-(line 1978,col 43)",
            "(line 1979,col 5)-(line 1979,col 50)",
            "(line 1980,col 5)-(line 1980,col 42)",
            "(line 1981,col 5)-(line 1981,col 49)",
            "(line 1982,col 5)-(line 1982,col 43)",
            "(line 1983,col 5)-(line 1983,col 42)",
            "(line 1984,col 5)-(line 1984,col 49)",
            "(line 1985,col 5)-(line 1985,col 55)",
            "(line 1986,col 5)-(line 1986,col 77)",
            "(line 1987,col 5)-(line 1987,col 43)",
            "(line 1988,col 5)-(line 1988,col 49)",
            "(line 1989,col 5)-(line 1989,col 42)",
            "(line 1990,col 5)-(line 1990,col 43)",
            "(line 1991,col 5)-(line 1991,col 41)",
            "(line 1992,col 5)-(line 1992,col 42)",
            "(line 1995,col 5)-(line 1995,col 42)",
            "(line 1998,col 5)-(line 1998,col 50)",
            "(line 1999,col 5)-(line 1999,col 57)",
            "(line 2000,col 5)-(line 2000,col 53)",
            "(line 2001,col 5)-(line 2001,col 55)",
            "(line 2002,col 5)-(line 2002,col 62)",
            "(line 2003,col 5)-(line 2003,col 52)",
            "(line 2004,col 5)-(line 2004,col 53)",
            "(line 2005,col 5)-(line 2005,col 58)",
            "(line 2006,col 5)-(line 2006,col 55)",
            "(line 2007,col 5)-(line 2007,col 52)",
            "(line 2008,col 5)-(line 2008,col 54)",
            "(line 2009,col 5)-(line 2009,col 61)",
            "(line 2010,col 5)-(line 2010,col 53)",
            "(line 2011,col 5)-(line 2011,col 57)",
            "(line 2012,col 5)-(line 2012,col 59)",
            "(line 2013,col 5)-(line 2013,col 63)",
            "(line 2014,col 5)-(line 2014,col 53)",
            "(line 2015,col 5)-(line 2015,col 54)",
            "(line 2016,col 5)-(line 2016,col 61)",
            "(line 2017,col 5)-(line 2017,col 60)",
            "(line 2018,col 5)-(line 2018,col 58)",
            "(line 2019,col 5)-(line 2019,col 50)",
            "(line 2020,col 5)-(line 2020,col 52)",
            "(line 2023,col 5)-(line 2023,col 42)",
            "(line 2026,col 5)-(line 2026,col 56)",
            "(line 2027,col 5)-(line 2027,col 66)",
            "(line 2028,col 5)-(line 2028,col 59)",
            "(line 2029,col 5)-(line 2029,col 60)",
            "(line 2030,col 5)-(line 2030,col 60)",
            "(line 2031,col 5)-(line 2031,col 59)",
            "(line 2032,col 5)-(line 2032,col 57)",
            "(line 2033,col 5)-(line 2033,col 59)",
            "(line 2034,col 5)-(line 2034,col 58)",
            "(line 2037,col 5)-(line 2037,col 67)",
            "(line 2038,col 5)-(line 2038,col 74)",
            "(line 2039,col 5)-(line 2039,col 71)",
            "(line 2040,col 5)-(line 2040,col 73)",
            "(line 2041,col 5)-(line 2042,col 60)",
            "(line 2043,col 5)-(line 2043,col 70)",
            "(line 2044,col 5)-(line 2044,col 71)",
            "(line 2045,col 5)-(line 2045,col 76)",
            "(line 2046,col 5)-(line 2046,col 73)",
            "(line 2047,col 5)-(line 2047,col 70)",
            "(line 2048,col 5)-(line 2048,col 72)",
            "(line 2049,col 5)-(line 2049,col 79)",
            "(line 2050,col 5)-(line 2050,col 71)",
            "(line 2051,col 5)-(line 2051,col 75)",
            "(line 2052,col 5)-(line 2052,col 77)",
            "(line 2053,col 5)-(line 2054,col 61)",
            "(line 2055,col 5)-(line 2055,col 71)",
            "(line 2056,col 5)-(line 2056,col 72)",
            "(line 2057,col 5)-(line 2057,col 79)",
            "(line 2058,col 5)-(line 2058,col 78)",
            "(line 2059,col 5)-(line 2059,col 76)",
            "(line 2060,col 5)-(line 2060,col 68)",
            "(line 2061,col 5)-(line 2061,col 70)",
            "(line 2064,col 5)-(line 2064,col 42)",
            "(line 2065,col 5)-(line 2065,col 61)",
            "(line 2068,col 5)-(line 2069,col 49)",
            "(line 2070,col 5)-(line 2071,col 59)",
            "(line 2072,col 5)-(line 2073,col 52)",
            "(line 2074,col 5)-(line 2075,col 53)",
            "(line 2076,col 5)-(line 2076,col 78)",
            "(line 2077,col 5)-(line 2078,col 50)",
            "(line 2079,col 5)-(line 2080,col 52)",
            "(line 2083,col 5)-(line 2083,col 77)",
            "(line 2084,col 5)-(line 2084,col 55)",
            "(line 2085,col 5)-(line 2086,col 52)",
            "(line 2087,col 5)-(line 2088,col 45)",
            "(line 2089,col 5)-(line 2090,col 45)",
            "(line 2091,col 5)-(line 2092,col 49)",
            "(line 2093,col 5)-(line 2093,col 73)",
            "(line 2094,col 5)-(line 2094,col 74)",
            "(line 2095,col 5)-(line 2095,col 78)",
            "(line 2096,col 5)-(line 2096,col 77)",
            "(line 2097,col 5)-(line 2097,col 76)",
            "(line 2100,col 5)-(line 2100,col 51)",
            "(line 2101,col 5)-(line 2101,col 52)",
            "(line 2102,col 5)-(line 2102,col 51)",
            "(line 2103,col 5)-(line 2103,col 51)",
            "(line 2104,col 5)-(line 2104,col 52)",
            "(line 2107,col 5)-(line 2107,col 51)",
            "(line 2108,col 5)-(line 2108,col 45)",
            "(line 2109,col 5)-(line 2109,col 57)",
            "(line 2111,col 5)-(line 2111,col 49)",
            "(line 2113,col 5)-(line 2113,col 46)",
            "(line 2114,col 5)-(line 2114,col 52)",
            "(line 2115,col 5)-(line 2115,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testStringObjectType()",
        "snippet": "  public void testStringObjectType() throws Exception {\n    // isXxx\n    assertFalse(STRING_OBJECT_TYPE.isArrayType());\n    assertFalse(STRING_OBJECT_TYPE.isBooleanObjectType());\n    assertFalse(STRING_OBJECT_TYPE.isBooleanValueType());\n    assertFalse(STRING_OBJECT_TYPE.isDateType());\n    assertFalse(STRING_OBJECT_TYPE.isEnumElementType());\n    assertFalse(STRING_OBJECT_TYPE.isNamedType());\n    assertFalse(STRING_OBJECT_TYPE.isNullType());\n    assertFalse(STRING_OBJECT_TYPE.isNumber());\n    assertFalse(STRING_OBJECT_TYPE.isNumberObjectType());\n    assertFalse(STRING_OBJECT_TYPE.isNumberValueType());\n    assertFalse(STRING_OBJECT_TYPE.isFunctionPrototypeType());\n    assertTrue(\n        STRING_OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());\n    assertFalse(STRING_OBJECT_TYPE.isRegexpType());\n    assertTrue(STRING_OBJECT_TYPE.isString());\n    assertTrue(STRING_OBJECT_TYPE.isStringObjectType());\n    assertFalse(STRING_OBJECT_TYPE.isStringValueType());\n    assertFalse(STRING_OBJECT_TYPE.isEnumType());\n    assertFalse(STRING_OBJECT_TYPE.isUnionType());\n    assertFalse(STRING_OBJECT_TYPE.isAllType());\n    assertFalse(STRING_OBJECT_TYPE.isVoidType());\n    assertFalse(STRING_OBJECT_TYPE.isConstructor());\n    assertTrue(STRING_OBJECT_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertTypeEquals(STRING_OBJECT_TYPE, STRING_TYPE.autoboxesTo());\n\n    // unboxesTo\n    assertTypeEquals(STRING_TYPE, STRING_OBJECT_TYPE.unboxesTo());\n\n    // canAssignTo\n    assertTrue(STRING_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n    assertTrue(STRING_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canAssignTo(STRING_TYPE));\n    assertTrue(STRING_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canAssignTo(ARRAY_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canAssignTo(STRING_TYPE));\n\n    // canBeCalled\n    assertFalse(STRING_OBJECT_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, STRING_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, functionType);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, BOOLEAN_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, ARRAY_TYPE);\n    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, UNKNOWN_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertTrue(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.\n        canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // properties (ECMA-262 page 98 - 106)\n    assertEquals(23, STRING_OBJECT_TYPE.getImplicitPrototype().\n        getPropertiesCount());\n    assertEquals(24, STRING_OBJECT_TYPE.getPropertiesCount());\n\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"toString\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"valueOf\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"charAt\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"charCodeAt\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"concat\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"indexOf\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"lastIndexOf\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"localeCompare\"));\n    assertReturnTypeEquals(createNullableType(ARRAY_TYPE),\n        STRING_OBJECT_TYPE.getPropertyType(\"match\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"replace\"));\n    assertReturnTypeEquals(NUMBER_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"search\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"slice\"));\n    assertReturnTypeEquals(ARRAY_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"split\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"substring\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"toLowerCase\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"toLocaleLowerCase\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"toUpperCase\"));\n    assertReturnTypeEquals(STRING_TYPE,\n        STRING_OBJECT_TYPE.getPropertyType(\"toLocaleUpperCase\"));\n    assertTypeEquals(NUMBER_TYPE, STRING_OBJECT_TYPE.getPropertyType(\"length\"));\n\n    // matchesXxx\n    assertTrue(STRING_OBJECT_TYPE.matchesInt32Context());\n    assertTrue(STRING_OBJECT_TYPE.matchesNumberContext());\n    assertTrue(STRING_OBJECT_TYPE.matchesObjectContext());\n    assertTrue(STRING_OBJECT_TYPE.matchesStringContext());\n    assertTrue(STRING_OBJECT_TYPE.matchesUint32Context());\n\n    // isNullable\n    assertFalse(STRING_OBJECT_TYPE.isNullable());\n    assertTrue(createNullableType(STRING_OBJECT_TYPE).isNullable());\n\n    assertTrue(STRING_OBJECT_TYPE.isNativeObjectType());\n\n    Asserts.assertResolvesToSame(STRING_OBJECT_TYPE);\n\n    assertTrue(STRING_OBJECT_TYPE.hasDisplayName());\n    assertEquals(\"String\", STRING_OBJECT_TYPE.getDisplayName());\n    assertFalse(STRING_OBJECT_TYPE.isNominalConstructor());\n    assertTrue(STRING_OBJECT_TYPE.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 2121,
        "end_line": 2279,
        "comment": "\n   * Tests the behavior of the string object type.\n   ",
        "child_ranges": [
            "(line 2123,col 5)-(line 2123,col 50)",
            "(line 2124,col 5)-(line 2124,col 58)",
            "(line 2125,col 5)-(line 2125,col 57)",
            "(line 2126,col 5)-(line 2126,col 49)",
            "(line 2127,col 5)-(line 2127,col 56)",
            "(line 2128,col 5)-(line 2128,col 50)",
            "(line 2129,col 5)-(line 2129,col 49)",
            "(line 2130,col 5)-(line 2130,col 47)",
            "(line 2131,col 5)-(line 2131,col 57)",
            "(line 2132,col 5)-(line 2132,col 56)",
            "(line 2133,col 5)-(line 2133,col 62)",
            "(line 2134,col 5)-(line 2135,col 77)",
            "(line 2136,col 5)-(line 2136,col 51)",
            "(line 2137,col 5)-(line 2137,col 46)",
            "(line 2138,col 5)-(line 2138,col 56)",
            "(line 2139,col 5)-(line 2139,col 56)",
            "(line 2140,col 5)-(line 2140,col 49)",
            "(line 2141,col 5)-(line 2141,col 50)",
            "(line 2142,col 5)-(line 2142,col 48)",
            "(line 2143,col 5)-(line 2143,col 49)",
            "(line 2144,col 5)-(line 2144,col 52)",
            "(line 2145,col 5)-(line 2145,col 52)",
            "(line 2148,col 5)-(line 2148,col 68)",
            "(line 2151,col 5)-(line 2151,col 66)",
            "(line 2154,col 5)-(line 2154,col 57)",
            "(line 2155,col 5)-(line 2155,col 67)",
            "(line 2156,col 5)-(line 2156,col 61)",
            "(line 2157,col 5)-(line 2157,col 60)",
            "(line 2158,col 5)-(line 2158,col 61)",
            "(line 2159,col 5)-(line 2159,col 59)",
            "(line 2160,col 5)-(line 2160,col 61)",
            "(line 2161,col 5)-(line 2161,col 60)",
            "(line 2162,col 5)-(line 2162,col 61)",
            "(line 2165,col 5)-(line 2165,col 50)",
            "(line 2168,col 5)-(line 2168,col 63)",
            "(line 2169,col 5)-(line 2169,col 73)",
            "(line 2170,col 5)-(line 2170,col 66)",
            "(line 2171,col 5)-(line 2171,col 67)",
            "(line 2172,col 5)-(line 2172,col 66)",
            "(line 2173,col 5)-(line 2173,col 66)",
            "(line 2174,col 5)-(line 2174,col 67)",
            "(line 2175,col 5)-(line 2175,col 74)",
            "(line 2176,col 5)-(line 2176,col 64)",
            "(line 2177,col 5)-(line 2177,col 66)",
            "(line 2178,col 5)-(line 2178,col 65)",
            "(line 2179,col 5)-(line 2179,col 67)",
            "(line 2182,col 5)-(line 2182,col 74)",
            "(line 2183,col 5)-(line 2184,col 55)",
            "(line 2185,col 5)-(line 2185,col 78)",
            "(line 2186,col 5)-(line 2186,col 80)",
            "(line 2187,col 5)-(line 2188,col 60)",
            "(line 2189,col 5)-(line 2189,col 77)",
            "(line 2190,col 5)-(line 2190,col 78)",
            "(line 2191,col 5)-(line 2192,col 56)",
            "(line 2193,col 5)-(line 2193,col 80)",
            "(line 2194,col 5)-(line 2194,col 77)",
            "(line 2195,col 5)-(line 2195,col 79)",
            "(line 2196,col 5)-(line 2197,col 59)",
            "(line 2198,col 5)-(line 2198,col 78)",
            "(line 2199,col 5)-(line 2200,col 55)",
            "(line 2201,col 5)-(line 2202,col 57)",
            "(line 2203,col 5)-(line 2204,col 61)",
            "(line 2205,col 5)-(line 2205,col 79)",
            "(line 2206,col 5)-(line 2206,col 79)",
            "(line 2207,col 5)-(line 2208,col 59)",
            "(line 2209,col 5)-(line 2210,col 58)",
            "(line 2211,col 5)-(line 2212,col 56)",
            "(line 2213,col 5)-(line 2213,col 75)",
            "(line 2214,col 5)-(line 2214,col 77)",
            "(line 2215,col 5)-(line 2215,col 79)",
            "(line 2218,col 5)-(line 2219,col 30)",
            "(line 2220,col 5)-(line 2220,col 62)",
            "(line 2222,col 5)-(line 2223,col 56)",
            "(line 2224,col 5)-(line 2225,col 55)",
            "(line 2226,col 5)-(line 2227,col 54)",
            "(line 2228,col 5)-(line 2229,col 58)",
            "(line 2230,col 5)-(line 2231,col 54)",
            "(line 2232,col 5)-(line 2233,col 55)",
            "(line 2234,col 5)-(line 2235,col 59)",
            "(line 2236,col 5)-(line 2237,col 61)",
            "(line 2238,col 5)-(line 2239,col 53)",
            "(line 2240,col 5)-(line 2241,col 55)",
            "(line 2242,col 5)-(line 2243,col 54)",
            "(line 2244,col 5)-(line 2245,col 53)",
            "(line 2246,col 5)-(line 2247,col 53)",
            "(line 2248,col 5)-(line 2249,col 57)",
            "(line 2250,col 5)-(line 2251,col 59)",
            "(line 2252,col 5)-(line 2253,col 65)",
            "(line 2254,col 5)-(line 2255,col 59)",
            "(line 2256,col 5)-(line 2257,col 65)",
            "(line 2258,col 5)-(line 2258,col 80)",
            "(line 2261,col 5)-(line 2261,col 57)",
            "(line 2262,col 5)-(line 2262,col 58)",
            "(line 2263,col 5)-(line 2263,col 58)",
            "(line 2264,col 5)-(line 2264,col 58)",
            "(line 2265,col 5)-(line 2265,col 58)",
            "(line 2268,col 5)-(line 2268,col 49)",
            "(line 2269,col 5)-(line 2269,col 68)",
            "(line 2271,col 5)-(line 2271,col 56)",
            "(line 2273,col 5)-(line 2273,col 53)",
            "(line 2275,col 5)-(line 2275,col 52)",
            "(line 2276,col 5)-(line 2276,col 64)",
            "(line 2277,col 5)-(line 2277,col 59)",
            "(line 2278,col 5)-(line 2278,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testStringValueType()",
        "snippet": "  public void testStringValueType() throws Exception {\n    // isXxx\n    assertFalse(STRING_TYPE.isArrayType());\n    assertFalse(STRING_TYPE.isBooleanObjectType());\n    assertFalse(STRING_TYPE.isBooleanValueType());\n    assertFalse(STRING_TYPE.isDateType());\n    assertFalse(STRING_TYPE.isEnumElementType());\n    assertFalse(STRING_TYPE.isNamedType());\n    assertFalse(STRING_TYPE.isNullType());\n    assertFalse(STRING_TYPE.isNumber());\n    assertFalse(STRING_TYPE.isNumberObjectType());\n    assertFalse(STRING_TYPE.isNumberValueType());\n    assertFalse(STRING_TYPE.isFunctionPrototypeType());\n    assertFalse(STRING_TYPE.isRegexpType());\n    assertTrue(STRING_TYPE.isString());\n    assertFalse(STRING_TYPE.isStringObjectType());\n    assertTrue(STRING_TYPE.isStringValueType());\n    assertFalse(STRING_TYPE.isEnumType());\n    assertFalse(STRING_TYPE.isUnionType());\n    assertFalse(STRING_TYPE.isAllType());\n    assertFalse(STRING_TYPE.isVoidType());\n    assertFalse(STRING_TYPE.isConstructor());\n    assertFalse(STRING_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertTypeEquals(STRING_OBJECT_TYPE, STRING_TYPE.autoboxesTo());\n\n    // unboxesTo\n    assertTypeEquals(STRING_TYPE, STRING_OBJECT_TYPE.unboxesTo());\n\n    // canAssignTo\n    assertTrue(STRING_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(STRING_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(STRING_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(STRING_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(STRING_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(STRING_TYPE.canAssignTo(DATE_TYPE));\n    assertFalse(STRING_TYPE.canAssignTo(REGEXP_TYPE));\n    assertFalse(STRING_TYPE.canAssignTo(ARRAY_TYPE));\n    assertTrue(STRING_TYPE.canAssignTo(STRING_TYPE));\n    assertTrue(STRING_TYPE.canAssignTo(UNKNOWN_TYPE));\n\n    // canBeCalled\n    assertFalse(STRING_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(STRING_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, STRING_OBJECT_TYPE);\n    assertCannotTestForEqualityWith(STRING_TYPE, functionType);\n    assertCanTestForEqualityWith(STRING_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, BOOLEAN_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, BOOLEAN_OBJECT_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, ARRAY_TYPE);\n    assertCanTestForEqualityWith(STRING_TYPE, UNKNOWN_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(STRING_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(STRING_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertTrue(STRING_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(STRING_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(STRING_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(STRING_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // matchesXxx\n    assertTrue(STRING_TYPE.matchesInt32Context());\n    assertTrue(STRING_TYPE.matchesNumberContext());\n    assertTrue(STRING_TYPE.matchesObjectContext());\n    assertTrue(STRING_TYPE.matchesStringContext());\n    assertTrue(STRING_TYPE.matchesUint32Context());\n\n    // isNullable\n    assertFalse(STRING_TYPE.isNullable());\n    assertTrue(createNullableType(STRING_TYPE).isNullable());\n\n    // toString\n    assertEquals(\"string\", STRING_TYPE.toString());\n    assertTrue(STRING_TYPE.hasDisplayName());\n    assertEquals(\"string\", STRING_TYPE.getDisplayName());\n\n    // findPropertyType\n    assertTypeEquals(NUMBER_TYPE, STRING_TYPE.findPropertyType(\"length\"));\n    assertEquals(null, STRING_TYPE.findPropertyType(\"unknownProperty\"));\n\n    Asserts.assertResolvesToSame(STRING_TYPE);\n    assertFalse(STRING_TYPE.isNominalConstructor());\n  }\n",
        "begin_line": 2284,
        "end_line": 2391,
        "comment": "\n   * Tests the behavior of the string value type.\n   ",
        "child_ranges": [
            "(line 2286,col 5)-(line 2286,col 43)",
            "(line 2287,col 5)-(line 2287,col 51)",
            "(line 2288,col 5)-(line 2288,col 50)",
            "(line 2289,col 5)-(line 2289,col 42)",
            "(line 2290,col 5)-(line 2290,col 49)",
            "(line 2291,col 5)-(line 2291,col 43)",
            "(line 2292,col 5)-(line 2292,col 42)",
            "(line 2293,col 5)-(line 2293,col 40)",
            "(line 2294,col 5)-(line 2294,col 50)",
            "(line 2295,col 5)-(line 2295,col 49)",
            "(line 2296,col 5)-(line 2296,col 55)",
            "(line 2297,col 5)-(line 2297,col 44)",
            "(line 2298,col 5)-(line 2298,col 39)",
            "(line 2299,col 5)-(line 2299,col 50)",
            "(line 2300,col 5)-(line 2300,col 48)",
            "(line 2301,col 5)-(line 2301,col 42)",
            "(line 2302,col 5)-(line 2302,col 43)",
            "(line 2303,col 5)-(line 2303,col 41)",
            "(line 2304,col 5)-(line 2304,col 42)",
            "(line 2305,col 5)-(line 2305,col 45)",
            "(line 2306,col 5)-(line 2306,col 46)",
            "(line 2309,col 5)-(line 2309,col 68)",
            "(line 2312,col 5)-(line 2312,col 66)",
            "(line 2315,col 5)-(line 2315,col 50)",
            "(line 2316,col 5)-(line 2316,col 61)",
            "(line 2317,col 5)-(line 2317,col 54)",
            "(line 2318,col 5)-(line 2318,col 54)",
            "(line 2319,col 5)-(line 2319,col 54)",
            "(line 2320,col 5)-(line 2320,col 52)",
            "(line 2321,col 5)-(line 2321,col 54)",
            "(line 2322,col 5)-(line 2322,col 53)",
            "(line 2323,col 5)-(line 2323,col 53)",
            "(line 2324,col 5)-(line 2324,col 54)",
            "(line 2327,col 5)-(line 2327,col 43)",
            "(line 2330,col 5)-(line 2330,col 56)",
            "(line 2331,col 5)-(line 2331,col 66)",
            "(line 2332,col 5)-(line 2332,col 63)",
            "(line 2333,col 5)-(line 2333,col 59)",
            "(line 2334,col 5)-(line 2334,col 59)",
            "(line 2335,col 5)-(line 2335,col 60)",
            "(line 2336,col 5)-(line 2336,col 67)",
            "(line 2337,col 5)-(line 2337,col 57)",
            "(line 2338,col 5)-(line 2338,col 59)",
            "(line 2339,col 5)-(line 2339,col 58)",
            "(line 2340,col 5)-(line 2340,col 60)",
            "(line 2343,col 5)-(line 2343,col 67)",
            "(line 2344,col 5)-(line 2344,col 75)",
            "(line 2345,col 5)-(line 2345,col 71)",
            "(line 2346,col 5)-(line 2346,col 73)",
            "(line 2347,col 5)-(line 2347,col 80)",
            "(line 2348,col 5)-(line 2348,col 70)",
            "(line 2349,col 5)-(line 2349,col 71)",
            "(line 2350,col 5)-(line 2350,col 76)",
            "(line 2351,col 5)-(line 2351,col 73)",
            "(line 2352,col 5)-(line 2352,col 70)",
            "(line 2353,col 5)-(line 2353,col 72)",
            "(line 2354,col 5)-(line 2354,col 79)",
            "(line 2355,col 5)-(line 2355,col 72)",
            "(line 2356,col 5)-(line 2356,col 75)",
            "(line 2357,col 5)-(line 2357,col 77)",
            "(line 2358,col 5)-(line 2359,col 61)",
            "(line 2360,col 5)-(line 2360,col 72)",
            "(line 2361,col 5)-(line 2361,col 71)",
            "(line 2362,col 5)-(line 2362,col 79)",
            "(line 2363,col 5)-(line 2363,col 78)",
            "(line 2364,col 5)-(line 2364,col 76)",
            "(line 2365,col 5)-(line 2365,col 68)",
            "(line 2366,col 5)-(line 2366,col 70)",
            "(line 2367,col 5)-(line 2367,col 72)",
            "(line 2370,col 5)-(line 2370,col 50)",
            "(line 2371,col 5)-(line 2371,col 51)",
            "(line 2372,col 5)-(line 2372,col 51)",
            "(line 2373,col 5)-(line 2373,col 51)",
            "(line 2374,col 5)-(line 2374,col 51)",
            "(line 2377,col 5)-(line 2377,col 42)",
            "(line 2378,col 5)-(line 2378,col 61)",
            "(line 2381,col 5)-(line 2381,col 51)",
            "(line 2382,col 5)-(line 2382,col 45)",
            "(line 2383,col 5)-(line 2383,col 57)",
            "(line 2386,col 5)-(line 2386,col 74)",
            "(line 2387,col 5)-(line 2387,col 72)",
            "(line 2389,col 5)-(line 2389,col 46)",
            "(line 2390,col 5)-(line 2390,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertPropertyTypeDeclared(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
        "snippet": "  private void assertPropertyTypeDeclared(ObjectType ownerType, String prop) {\n    assertTrue(ownerType.isPropertyTypeDeclared(prop));\n    assertFalse(ownerType.isPropertyTypeInferred(prop));\n  }\n",
        "begin_line": 2393,
        "end_line": 2396,
        "comment": "",
        "child_ranges": [
            "(line 2394,col 5)-(line 2394,col 55)",
            "(line 2395,col 5)-(line 2395,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertPropertyTypeInferred(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
        "snippet": "  private void assertPropertyTypeInferred(ObjectType ownerType, String prop) {\n    assertFalse(ownerType.isPropertyTypeDeclared(prop));\n    assertTrue(ownerType.isPropertyTypeInferred(prop));\n  }\n",
        "begin_line": 2398,
        "end_line": 2401,
        "comment": "",
        "child_ranges": [
            "(line 2399,col 5)-(line 2399,col 56)",
            "(line 2400,col 5)-(line 2400,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertPropertyTypeUnknown(com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
        "snippet": "  private void assertPropertyTypeUnknown(ObjectType ownerType, String prop) {\n    assertFalse(ownerType.isPropertyTypeDeclared(prop));\n    assertFalse(ownerType.isPropertyTypeInferred(prop));\n    assertTrue(ownerType.getPropertyType(prop).isUnknownType());\n  }\n",
        "begin_line": 2403,
        "end_line": 2407,
        "comment": "",
        "child_ranges": [
            "(line 2404,col 5)-(line 2404,col 56)",
            "(line 2405,col 5)-(line 2405,col 56)",
            "(line 2406,col 5)-(line 2406,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertReturnTypeEquals(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assertReturnTypeEquals(JSType expectedReturnType,\n      JSType function) {\n    assertTrue(function instanceof FunctionType);\n    assertTypeEquals(expectedReturnType,\n        ((FunctionType) function).getReturnType());\n  }\n",
        "begin_line": 2409,
        "end_line": 2414,
        "comment": "",
        "child_ranges": [
            "(line 2411,col 5)-(line 2411,col 49)",
            "(line 2412,col 5)-(line 2413,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordType()",
        "snippet": "  public void testRecordType() throws Exception {\n    // isXxx\n    assertTrue(recordType.isObject());\n    assertFalse(recordType.isFunctionPrototypeType());\n\n    // canAssignTo\n    assertTrue(recordType.canAssignTo(ALL_TYPE));\n    assertFalse(recordType.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(recordType.canAssignTo(NUMBER_TYPE));\n    assertFalse(recordType.canAssignTo(DATE_TYPE));\n    assertFalse(recordType.canAssignTo(REGEXP_TYPE));\n    assertTrue(recordType.canAssignTo(UNKNOWN_TYPE));\n    assertTrue(recordType.canAssignTo(OBJECT_TYPE));\n    assertFalse(recordType.canAssignTo(U2U_CONSTRUCTOR_TYPE));\n\n    // autoboxesTo\n    assertNull(recordType.autoboxesTo());\n\n    // canBeCalled\n    assertFalse(recordType.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(recordType, ALL_TYPE);\n    assertCanTestForEqualityWith(recordType, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(recordType, recordType);\n    assertCanTestForEqualityWith(recordType, functionType);\n    assertCanTestForEqualityWith(recordType, OBJECT_TYPE);\n    assertCanTestForEqualityWith(recordType, NUMBER_TYPE);\n    assertCanTestForEqualityWith(recordType, DATE_TYPE);\n    assertCanTestForEqualityWith(recordType, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(recordType.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(recordType.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(recordType.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(recordType.canTestForShallowEqualityWith(recordType));\n    assertFalse(recordType.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(recordType.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(recordType.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(recordType.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(recordType.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(recordType.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // matchesXxx\n    assertFalse(recordType.matchesInt32Context());\n    assertFalse(recordType.matchesNumberContext());\n    assertTrue(recordType.matchesObjectContext());\n    assertFalse(recordType.matchesStringContext());\n    assertFalse(recordType.matchesUint32Context());\n\n    Asserts.assertResolvesToSame(recordType);\n  }\n",
        "begin_line": 2420,
        "end_line": 2487,
        "comment": "\n   * Tests the behavior of record types.\n   ",
        "child_ranges": [
            "(line 2422,col 5)-(line 2422,col 38)",
            "(line 2423,col 5)-(line 2423,col 54)",
            "(line 2426,col 5)-(line 2426,col 49)",
            "(line 2427,col 5)-(line 2427,col 60)",
            "(line 2428,col 5)-(line 2428,col 53)",
            "(line 2429,col 5)-(line 2429,col 51)",
            "(line 2430,col 5)-(line 2430,col 53)",
            "(line 2431,col 5)-(line 2431,col 53)",
            "(line 2432,col 5)-(line 2432,col 52)",
            "(line 2433,col 5)-(line 2433,col 62)",
            "(line 2436,col 5)-(line 2436,col 41)",
            "(line 2439,col 5)-(line 2439,col 42)",
            "(line 2442,col 5)-(line 2442,col 55)",
            "(line 2443,col 5)-(line 2443,col 65)",
            "(line 2444,col 5)-(line 2444,col 57)",
            "(line 2445,col 5)-(line 2445,col 59)",
            "(line 2446,col 5)-(line 2446,col 58)",
            "(line 2447,col 5)-(line 2447,col 58)",
            "(line 2448,col 5)-(line 2448,col 56)",
            "(line 2449,col 5)-(line 2449,col 58)",
            "(line 2452,col 5)-(line 2452,col 66)",
            "(line 2453,col 5)-(line 2453,col 73)",
            "(line 2454,col 5)-(line 2454,col 70)",
            "(line 2455,col 5)-(line 2455,col 72)",
            "(line 2456,col 5)-(line 2457,col 60)",
            "(line 2458,col 5)-(line 2458,col 69)",
            "(line 2459,col 5)-(line 2459,col 70)",
            "(line 2460,col 5)-(line 2460,col 75)",
            "(line 2461,col 5)-(line 2461,col 69)",
            "(line 2462,col 5)-(line 2462,col 69)",
            "(line 2463,col 5)-(line 2463,col 71)",
            "(line 2464,col 5)-(line 2464,col 78)",
            "(line 2465,col 5)-(line 2465,col 70)",
            "(line 2466,col 5)-(line 2466,col 74)",
            "(line 2467,col 5)-(line 2467,col 76)",
            "(line 2468,col 5)-(line 2469,col 61)",
            "(line 2470,col 5)-(line 2470,col 71)",
            "(line 2471,col 5)-(line 2471,col 71)",
            "(line 2472,col 5)-(line 2472,col 78)",
            "(line 2473,col 5)-(line 2473,col 77)",
            "(line 2474,col 5)-(line 2474,col 75)",
            "(line 2475,col 5)-(line 2475,col 67)",
            "(line 2476,col 5)-(line 2476,col 69)",
            "(line 2477,col 5)-(line 2477,col 71)",
            "(line 2480,col 5)-(line 2480,col 50)",
            "(line 2481,col 5)-(line 2481,col 51)",
            "(line 2482,col 5)-(line 2482,col 50)",
            "(line 2483,col 5)-(line 2483,col 51)",
            "(line 2484,col 5)-(line 2484,col 51)",
            "(line 2486,col 5)-(line 2486,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionInstanceType()",
        "snippet": "  public void testFunctionInstanceType() throws Exception {\n    FunctionType functionInst = FUNCTION_INSTANCE_TYPE;\n\n    // isXxx\n    assertTrue(functionInst.isObject());\n    assertFalse(functionInst.isFunctionPrototypeType());\n    assertTrue(functionInst.getImplicitPrototype()\n        .isFunctionPrototypeType());\n\n    // canAssignTo\n    assertTrue(functionInst.canAssignTo(ALL_TYPE));\n    assertFalse(functionInst.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(functionInst.canAssignTo(NUMBER_TYPE));\n    assertFalse(functionInst.canAssignTo(DATE_TYPE));\n    assertFalse(functionInst.canAssignTo(REGEXP_TYPE));\n    assertTrue(functionInst.canAssignTo(UNKNOWN_TYPE));\n    assertTrue(functionInst.canAssignTo(U2U_CONSTRUCTOR_TYPE));\n\n    // autoboxesTo\n    assertNull(functionInst.autoboxesTo());\n\n    // canBeCalled\n    assertTrue(functionInst.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(functionInst, ALL_TYPE);\n    assertCanTestForEqualityWith(functionInst, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(functionInst, functionInst);\n    assertCanTestForEqualityWith(functionInst, OBJECT_TYPE);\n    assertCannotTestForEqualityWith(functionInst, NUMBER_TYPE);\n    assertCanTestForEqualityWith(functionInst, DATE_TYPE);\n    assertCanTestForEqualityWith(functionInst, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(functionInst.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(functionInst.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(functionInst.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(functionInst.canTestForShallowEqualityWith(functionInst));\n    assertFalse(functionInst.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(functionInst.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(functionInst.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(functionInst.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(functionInst.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(functionInst.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // matchesXxx\n    assertFalse(functionInst.matchesInt32Context());\n    assertFalse(functionInst.matchesNumberContext());\n    assertTrue(functionInst.matchesObjectContext());\n    assertFalse(functionInst.matchesStringContext());\n    assertFalse(functionInst.matchesUint32Context());\n\n    // hasProperty\n    assertTrue(functionInst.hasProperty(\"prototype\"));\n    assertPropertyTypeInferred(functionInst, \"prototype\");\n\n    // misc\n    assertTypeEquals(FUNCTION_FUNCTION_TYPE, functionInst.getConstructor());\n    assertTypeEquals(FUNCTION_PROTOTYPE, functionInst.getImplicitPrototype());\n    assertTypeEquals(functionInst, FUNCTION_FUNCTION_TYPE.getInstanceType());\n\n    Asserts.assertResolvesToSame(functionInst);\n  }\n",
        "begin_line": 2492,
        "end_line": 2570,
        "comment": "\n   * Tests the behavior of the instance of Function.\n   ",
        "child_ranges": [
            "(line 2493,col 5)-(line 2493,col 55)",
            "(line 2496,col 5)-(line 2496,col 40)",
            "(line 2497,col 5)-(line 2497,col 56)",
            "(line 2498,col 5)-(line 2499,col 36)",
            "(line 2502,col 5)-(line 2502,col 51)",
            "(line 2503,col 5)-(line 2503,col 62)",
            "(line 2504,col 5)-(line 2504,col 55)",
            "(line 2505,col 5)-(line 2505,col 53)",
            "(line 2506,col 5)-(line 2506,col 55)",
            "(line 2507,col 5)-(line 2507,col 55)",
            "(line 2508,col 5)-(line 2508,col 63)",
            "(line 2511,col 5)-(line 2511,col 43)",
            "(line 2514,col 5)-(line 2514,col 43)",
            "(line 2517,col 5)-(line 2517,col 57)",
            "(line 2518,col 5)-(line 2518,col 67)",
            "(line 2519,col 5)-(line 2519,col 61)",
            "(line 2520,col 5)-(line 2520,col 60)",
            "(line 2521,col 5)-(line 2521,col 63)",
            "(line 2522,col 5)-(line 2522,col 58)",
            "(line 2523,col 5)-(line 2523,col 60)",
            "(line 2526,col 5)-(line 2526,col 68)",
            "(line 2527,col 5)-(line 2527,col 75)",
            "(line 2528,col 5)-(line 2528,col 72)",
            "(line 2529,col 5)-(line 2529,col 74)",
            "(line 2530,col 5)-(line 2531,col 60)",
            "(line 2532,col 5)-(line 2532,col 71)",
            "(line 2533,col 5)-(line 2533,col 72)",
            "(line 2534,col 5)-(line 2534,col 77)",
            "(line 2535,col 5)-(line 2535,col 73)",
            "(line 2536,col 5)-(line 2536,col 71)",
            "(line 2537,col 5)-(line 2537,col 73)",
            "(line 2538,col 5)-(line 2538,col 80)",
            "(line 2539,col 5)-(line 2539,col 72)",
            "(line 2540,col 5)-(line 2540,col 76)",
            "(line 2541,col 5)-(line 2541,col 78)",
            "(line 2542,col 5)-(line 2543,col 61)",
            "(line 2544,col 5)-(line 2544,col 73)",
            "(line 2545,col 5)-(line 2545,col 73)",
            "(line 2546,col 5)-(line 2546,col 80)",
            "(line 2547,col 5)-(line 2547,col 79)",
            "(line 2548,col 5)-(line 2548,col 77)",
            "(line 2549,col 5)-(line 2549,col 69)",
            "(line 2550,col 5)-(line 2550,col 71)",
            "(line 2551,col 5)-(line 2551,col 73)",
            "(line 2554,col 5)-(line 2554,col 52)",
            "(line 2555,col 5)-(line 2555,col 53)",
            "(line 2556,col 5)-(line 2556,col 52)",
            "(line 2557,col 5)-(line 2557,col 53)",
            "(line 2558,col 5)-(line 2558,col 53)",
            "(line 2561,col 5)-(line 2561,col 54)",
            "(line 2562,col 5)-(line 2562,col 58)",
            "(line 2565,col 5)-(line 2565,col 76)",
            "(line 2566,col 5)-(line 2566,col 78)",
            "(line 2567,col 5)-(line 2567,col 77)",
            "(line 2569,col 5)-(line 2569,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionType()",
        "snippet": "  public void testFunctionType() throws Exception {\n    // isXxx\n    assertTrue(functionType.isObject());\n    assertFalse(functionType.isFunctionPrototypeType());\n    assertTrue(functionType.getImplicitPrototype().getImplicitPrototype()\n        .isFunctionPrototypeType());\n\n    // canAssignTo\n    assertTrue(functionType.canAssignTo(ALL_TYPE));\n    assertFalse(functionType.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(functionType.canAssignTo(NUMBER_TYPE));\n    assertFalse(functionType.canAssignTo(DATE_TYPE));\n    assertFalse(functionType.canAssignTo(REGEXP_TYPE));\n    assertTrue(functionType.canAssignTo(UNKNOWN_TYPE));\n    assertTrue(functionType.canAssignTo(U2U_CONSTRUCTOR_TYPE));\n\n    // autoboxesTo\n    assertNull(functionType.autoboxesTo());\n\n    // canBeCalled\n    assertTrue(functionType.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(functionType, ALL_TYPE);\n    assertCanTestForEqualityWith(functionType, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(functionType, functionType);\n    assertCanTestForEqualityWith(functionType, OBJECT_TYPE);\n    assertCannotTestForEqualityWith(functionType, NUMBER_TYPE);\n    assertCanTestForEqualityWith(functionType, DATE_TYPE);\n    assertCanTestForEqualityWith(functionType, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(functionType.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(functionType.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(functionType.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertTrue(functionType.canTestForShallowEqualityWith(functionType));\n    assertFalse(functionType.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(functionType.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(functionType.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(functionType.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(functionType.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(functionType.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // matchesXxx\n    assertFalse(functionType.matchesInt32Context());\n    assertFalse(functionType.matchesNumberContext());\n    assertTrue(functionType.matchesObjectContext());\n    assertFalse(functionType.matchesStringContext());\n    assertFalse(functionType.matchesUint32Context());\n\n    // hasProperty\n    assertTrue(functionType.hasProperty(\"prototype\"));\n    assertPropertyTypeInferred(functionType, \"prototype\");\n\n    Asserts.assertResolvesToSame(functionType);\n\n\n    assertEquals(\"aFunctionName\", new FunctionBuilder(registry).\n        withName(\"aFunctionName\").build().getDisplayName());\n  }\n",
        "begin_line": 2575,
        "end_line": 2650,
        "comment": "\n   * Tests the behavior of functional types.\n   ",
        "child_ranges": [
            "(line 2577,col 5)-(line 2577,col 40)",
            "(line 2578,col 5)-(line 2578,col 56)",
            "(line 2579,col 5)-(line 2580,col 36)",
            "(line 2583,col 5)-(line 2583,col 51)",
            "(line 2584,col 5)-(line 2584,col 62)",
            "(line 2585,col 5)-(line 2585,col 55)",
            "(line 2586,col 5)-(line 2586,col 53)",
            "(line 2587,col 5)-(line 2587,col 55)",
            "(line 2588,col 5)-(line 2588,col 55)",
            "(line 2589,col 5)-(line 2589,col 63)",
            "(line 2592,col 5)-(line 2592,col 43)",
            "(line 2595,col 5)-(line 2595,col 43)",
            "(line 2598,col 5)-(line 2598,col 57)",
            "(line 2599,col 5)-(line 2599,col 67)",
            "(line 2600,col 5)-(line 2600,col 61)",
            "(line 2601,col 5)-(line 2601,col 60)",
            "(line 2602,col 5)-(line 2602,col 63)",
            "(line 2603,col 5)-(line 2603,col 58)",
            "(line 2604,col 5)-(line 2604,col 60)",
            "(line 2607,col 5)-(line 2607,col 68)",
            "(line 2608,col 5)-(line 2608,col 75)",
            "(line 2609,col 5)-(line 2609,col 72)",
            "(line 2610,col 5)-(line 2610,col 74)",
            "(line 2611,col 5)-(line 2612,col 60)",
            "(line 2613,col 5)-(line 2613,col 71)",
            "(line 2614,col 5)-(line 2614,col 72)",
            "(line 2615,col 5)-(line 2615,col 77)",
            "(line 2616,col 5)-(line 2616,col 73)",
            "(line 2617,col 5)-(line 2617,col 71)",
            "(line 2618,col 5)-(line 2618,col 73)",
            "(line 2619,col 5)-(line 2619,col 80)",
            "(line 2620,col 5)-(line 2620,col 72)",
            "(line 2621,col 5)-(line 2621,col 76)",
            "(line 2622,col 5)-(line 2622,col 78)",
            "(line 2623,col 5)-(line 2624,col 61)",
            "(line 2625,col 5)-(line 2625,col 73)",
            "(line 2626,col 5)-(line 2626,col 73)",
            "(line 2627,col 5)-(line 2627,col 80)",
            "(line 2628,col 5)-(line 2628,col 79)",
            "(line 2629,col 5)-(line 2629,col 77)",
            "(line 2630,col 5)-(line 2630,col 69)",
            "(line 2631,col 5)-(line 2631,col 71)",
            "(line 2632,col 5)-(line 2632,col 73)",
            "(line 2635,col 5)-(line 2635,col 52)",
            "(line 2636,col 5)-(line 2636,col 53)",
            "(line 2637,col 5)-(line 2637,col 52)",
            "(line 2638,col 5)-(line 2638,col 53)",
            "(line 2639,col 5)-(line 2639,col 53)",
            "(line 2642,col 5)-(line 2642,col 54)",
            "(line 2643,col 5)-(line 2643,col 58)",
            "(line 2645,col 5)-(line 2645,col 47)",
            "(line 2648,col 5)-(line 2649,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeSubtyping()",
        "snippet": "  public void testRecordTypeSubtyping() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    builder.addProperty(\"c\", STRING_TYPE, null);\n    JSType subRecordType = builder.build();\n\n    assertTrue(subRecordType.isSubtype(recordType));\n    assertFalse(recordType.isSubtype(subRecordType));\n\n    builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", OBJECT_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    JSType differentRecordType = builder.build();\n\n    assertFalse(differentRecordType.isSubtype(recordType));\n    assertFalse(recordType.isSubtype(differentRecordType));\n  }\n",
        "begin_line": 2655,
        "end_line": 2672,
        "comment": "\n   * Tests the subtyping relation of record types.\n   ",
        "child_ranges": [
            "(line 2656,col 5)-(line 2656,col 64)",
            "(line 2657,col 5)-(line 2657,col 48)",
            "(line 2658,col 5)-(line 2658,col 48)",
            "(line 2659,col 5)-(line 2659,col 48)",
            "(line 2660,col 5)-(line 2660,col 43)",
            "(line 2662,col 5)-(line 2662,col 52)",
            "(line 2663,col 5)-(line 2663,col 53)",
            "(line 2665,col 5)-(line 2665,col 46)",
            "(line 2666,col 5)-(line 2666,col 48)",
            "(line 2667,col 5)-(line 2667,col 48)",
            "(line 2668,col 5)-(line 2668,col 49)",
            "(line 2670,col 5)-(line 2670,col 59)",
            "(line 2671,col 5)-(line 2671,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeSubtypingWithInferredProperties()",
        "snippet": "  public void testRecordTypeSubtypingWithInferredProperties() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", googSubBarInst, null);\n    JSType record = builder.build();\n\n    ObjectType subtypeProp = registry.createAnonymousObjectType();\n    subtypeProp.defineInferredProperty(\"a\", googSubSubBarInst, null);\n    assertTrue(subtypeProp.isSubtype(record));\n    assertFalse(record.isSubtype(subtypeProp));\n\n    ObjectType supertypeProp = registry.createAnonymousObjectType();\n    supertypeProp.defineInferredProperty(\"a\", googBarInst, null);\n    assertFalse(supertypeProp.isSubtype(record));\n    assertFalse(record.isSubtype(supertypeProp));\n\n    ObjectType declaredSubtypeProp = registry.createAnonymousObjectType();\n    declaredSubtypeProp.defineDeclaredProperty(\"a\", googSubSubBarInst,\n        null);\n    assertFalse(declaredSubtypeProp.isSubtype(record));\n    assertFalse(record.isSubtype(declaredSubtypeProp));\n  }\n",
        "begin_line": 2678,
        "end_line": 2698,
        "comment": "\n   * Tests the subtyping relation of record types when an object has\n   * an inferred property..\n   ",
        "child_ranges": [
            "(line 2679,col 5)-(line 2679,col 64)",
            "(line 2680,col 5)-(line 2680,col 51)",
            "(line 2681,col 5)-(line 2681,col 36)",
            "(line 2683,col 5)-(line 2683,col 66)",
            "(line 2684,col 5)-(line 2684,col 69)",
            "(line 2685,col 5)-(line 2685,col 46)",
            "(line 2686,col 5)-(line 2686,col 47)",
            "(line 2688,col 5)-(line 2688,col 68)",
            "(line 2689,col 5)-(line 2689,col 65)",
            "(line 2690,col 5)-(line 2690,col 49)",
            "(line 2691,col 5)-(line 2691,col 49)",
            "(line 2693,col 5)-(line 2693,col 74)",
            "(line 2694,col 5)-(line 2695,col 14)",
            "(line 2696,col 5)-(line 2696,col 55)",
            "(line 2697,col 5)-(line 2697,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeLeastSuperType1()",
        "snippet": "  public void testRecordTypeLeastSuperType1() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    builder.addProperty(\"c\", STRING_TYPE, null);\n    JSType subRecordType = builder.build();\n\n    JSType leastSupertype = recordType.getLeastSupertype(subRecordType);\n    assertTypeEquals(leastSupertype, recordType);\n  }\n",
        "begin_line": 2703,
        "end_line": 2712,
        "comment": "\n   * Tests the getLeastSupertype method for record types.\n   ",
        "child_ranges": [
            "(line 2704,col 5)-(line 2704,col 64)",
            "(line 2705,col 5)-(line 2705,col 48)",
            "(line 2706,col 5)-(line 2706,col 48)",
            "(line 2707,col 5)-(line 2707,col 48)",
            "(line 2708,col 5)-(line 2708,col 43)",
            "(line 2710,col 5)-(line 2710,col 72)",
            "(line 2711,col 5)-(line 2711,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeLeastSuperType2()",
        "snippet": "  public void testRecordTypeLeastSuperType2() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"e\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    builder.addProperty(\"c\", STRING_TYPE, null);\n    JSType otherRecordType = builder.build();\n\n    assertTypeEquals(\n        registry.createUnionType(recordType, otherRecordType),\n        recordType.getLeastSupertype(otherRecordType));\n  }\n",
        "begin_line": 2714,
        "end_line": 2724,
        "comment": "",
        "child_ranges": [
            "(line 2715,col 5)-(line 2715,col 64)",
            "(line 2716,col 5)-(line 2716,col 48)",
            "(line 2717,col 5)-(line 2717,col 48)",
            "(line 2718,col 5)-(line 2718,col 48)",
            "(line 2719,col 5)-(line 2719,col 45)",
            "(line 2721,col 5)-(line 2723,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeLeastSuperType3()",
        "snippet": "  public void testRecordTypeLeastSuperType3() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"d\", NUMBER_TYPE, null);\n    builder.addProperty(\"e\", STRING_TYPE, null);\n    builder.addProperty(\"f\", STRING_TYPE, null);\n    JSType otherRecordType = builder.build();\n\n    assertTypeEquals(\n        registry.createUnionType(recordType, otherRecordType),\n        recordType.getLeastSupertype(otherRecordType));\n  }\n",
        "begin_line": 2726,
        "end_line": 2736,
        "comment": "",
        "child_ranges": [
            "(line 2727,col 5)-(line 2727,col 64)",
            "(line 2728,col 5)-(line 2728,col 48)",
            "(line 2729,col 5)-(line 2729,col 48)",
            "(line 2730,col 5)-(line 2730,col 48)",
            "(line 2731,col 5)-(line 2731,col 45)",
            "(line 2733,col 5)-(line 2735,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeLeastSuperType4()",
        "snippet": "  public void testRecordTypeLeastSuperType4() {\n    JSType leastSupertype = recordType.getLeastSupertype(OBJECT_TYPE);\n    assertTypeEquals(leastSupertype, OBJECT_TYPE);\n  }\n",
        "begin_line": 2738,
        "end_line": 2741,
        "comment": "",
        "child_ranges": [
            "(line 2739,col 5)-(line 2739,col 70)",
            "(line 2740,col 5)-(line 2740,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType1()",
        "snippet": "  public void testRecordTypeGreatestSubType1() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"d\", NUMBER_TYPE, null);\n    builder.addProperty(\"e\", STRING_TYPE, null);\n    builder.addProperty(\"f\", STRING_TYPE, null);\n\n    JSType subRecordType = builder.build();\n\n    JSType subtype = recordType.getGreatestSubtype(subRecordType);\n\n    builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"d\", NUMBER_TYPE, null);\n    builder.addProperty(\"e\", STRING_TYPE, null);\n    builder.addProperty(\"f\", STRING_TYPE, null);\n    builder.addProperty(\"a\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n\n    assertTypeEquals(subtype, builder.build());\n  }\n",
        "begin_line": 2746,
        "end_line": 2764,
        "comment": "\n   * Tests the getGreastestSubtype method for record types.\n   ",
        "child_ranges": [
            "(line 2747,col 5)-(line 2747,col 64)",
            "(line 2748,col 5)-(line 2748,col 48)",
            "(line 2749,col 5)-(line 2749,col 48)",
            "(line 2750,col 5)-(line 2750,col 48)",
            "(line 2752,col 5)-(line 2752,col 43)",
            "(line 2754,col 5)-(line 2754,col 66)",
            "(line 2756,col 5)-(line 2756,col 46)",
            "(line 2757,col 5)-(line 2757,col 48)",
            "(line 2758,col 5)-(line 2758,col 48)",
            "(line 2759,col 5)-(line 2759,col 48)",
            "(line 2760,col 5)-(line 2760,col 48)",
            "(line 2761,col 5)-(line 2761,col 48)",
            "(line 2763,col 5)-(line 2763,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType2()",
        "snippet": "  public void testRecordTypeGreatestSubType2() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    JSType subRecordType = builder.build();\n\n    JSType subtype = recordType.getGreatestSubtype(subRecordType);\n\n    builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n\n    assertTypeEquals(subtype, builder.build());\n  }\n",
        "begin_line": 2766,
        "end_line": 2778,
        "comment": "",
        "child_ranges": [
            "(line 2767,col 5)-(line 2767,col 64)",
            "(line 2769,col 5)-(line 2769,col 43)",
            "(line 2771,col 5)-(line 2771,col 66)",
            "(line 2773,col 5)-(line 2773,col 46)",
            "(line 2774,col 5)-(line 2774,col 48)",
            "(line 2775,col 5)-(line 2775,col 48)",
            "(line 2777,col 5)-(line 2777,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType3()",
        "snippet": "  public void testRecordTypeGreatestSubType3() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    builder.addProperty(\"c\", STRING_TYPE, null);\n\n    JSType subRecordType = builder.build();\n\n    JSType subtype = recordType.getGreatestSubtype(subRecordType);\n\n    builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", NUMBER_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    builder.addProperty(\"c\", STRING_TYPE, null);\n\n    assertTypeEquals(subtype, builder.build());\n  }\n",
        "begin_line": 2780,
        "end_line": 2796,
        "comment": "",
        "child_ranges": [
            "(line 2781,col 5)-(line 2781,col 64)",
            "(line 2782,col 5)-(line 2782,col 48)",
            "(line 2783,col 5)-(line 2783,col 48)",
            "(line 2784,col 5)-(line 2784,col 48)",
            "(line 2786,col 5)-(line 2786,col 43)",
            "(line 2788,col 5)-(line 2788,col 66)",
            "(line 2790,col 5)-(line 2790,col 46)",
            "(line 2791,col 5)-(line 2791,col 48)",
            "(line 2792,col 5)-(line 2792,col 48)",
            "(line 2793,col 5)-(line 2793,col 48)",
            "(line 2795,col 5)-(line 2795,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType4()",
        "snippet": "  public void testRecordTypeGreatestSubType4() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", STRING_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    builder.addProperty(\"c\", STRING_TYPE, null);\n\n    JSType subRecordType = builder.build();\n\n    JSType subtype = recordType.getGreatestSubtype(subRecordType);\n    assertTypeEquals(subtype, NO_TYPE);\n  }\n",
        "begin_line": 2798,
        "end_line": 2808,
        "comment": "",
        "child_ranges": [
            "(line 2799,col 5)-(line 2799,col 64)",
            "(line 2800,col 5)-(line 2800,col 48)",
            "(line 2801,col 5)-(line 2801,col 48)",
            "(line 2802,col 5)-(line 2802,col 48)",
            "(line 2804,col 5)-(line 2804,col 43)",
            "(line 2806,col 5)-(line 2806,col 66)",
            "(line 2807,col 5)-(line 2807,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType5()",
        "snippet": "  public void testRecordTypeGreatestSubType5() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", STRING_TYPE, null);\n\n    JSType recordType = builder.build();\n\n    assertTypeEquals(NO_OBJECT_TYPE,\n                 recordType.getGreatestSubtype(U2U_CONSTRUCTOR_TYPE));\n\n    // if Function is given a property \"a\" of type \"string\", then it's\n    // a subtype of the record type {a: string}.\n    U2U_CONSTRUCTOR_TYPE.defineDeclaredProperty(\"a\", STRING_TYPE, null);\n    assertTypeEquals(U2U_CONSTRUCTOR_TYPE,\n                 recordType.getGreatestSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTypeEquals(U2U_CONSTRUCTOR_TYPE,\n                 U2U_CONSTRUCTOR_TYPE.getGreatestSubtype(recordType));\n  }\n",
        "begin_line": 2810,
        "end_line": 2826,
        "comment": "",
        "child_ranges": [
            "(line 2811,col 5)-(line 2811,col 64)",
            "(line 2812,col 5)-(line 2812,col 48)",
            "(line 2814,col 5)-(line 2814,col 40)",
            "(line 2816,col 5)-(line 2817,col 70)",
            "(line 2821,col 5)-(line 2821,col 72)",
            "(line 2822,col 5)-(line 2823,col 70)",
            "(line 2824,col 5)-(line 2825,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType6()",
        "snippet": "  public void testRecordTypeGreatestSubType6() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"x\", UNKNOWN_TYPE, null);\n\n    JSType recordType = builder.build();\n\n    assertTypeEquals(NO_OBJECT_TYPE,\n                 recordType.getGreatestSubtype(U2U_CONSTRUCTOR_TYPE));\n\n    // if Function is given a property \"x\" of type \"string\", then it's\n    // also a subtype of the record type {x: ?}.\n    U2U_CONSTRUCTOR_TYPE.defineDeclaredProperty(\"x\", STRING_TYPE, null);\n    assertTypeEquals(U2U_CONSTRUCTOR_TYPE,\n                 recordType.getGreatestSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTypeEquals(U2U_CONSTRUCTOR_TYPE,\n                 U2U_CONSTRUCTOR_TYPE.getGreatestSubtype(recordType));\n  }\n",
        "begin_line": 2828,
        "end_line": 2844,
        "comment": "",
        "child_ranges": [
            "(line 2829,col 5)-(line 2829,col 64)",
            "(line 2830,col 5)-(line 2830,col 49)",
            "(line 2832,col 5)-(line 2832,col 40)",
            "(line 2834,col 5)-(line 2835,col 70)",
            "(line 2839,col 5)-(line 2839,col 72)",
            "(line 2840,col 5)-(line 2841,col 70)",
            "(line 2842,col 5)-(line 2843,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType7()",
        "snippet": "  public void testRecordTypeGreatestSubType7() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"x\", NUMBER_TYPE, null);\n\n    JSType recordType = builder.build();\n\n    // if Function is given a property \"x\" of type \"string\", then it's\n    // not a subtype of the record type {x: number}.\n    U2U_CONSTRUCTOR_TYPE.defineDeclaredProperty(\"x\", STRING_TYPE, null);\n    assertTypeEquals(NO_OBJECT_TYPE,\n                 recordType.getGreatestSubtype(U2U_CONSTRUCTOR_TYPE));\n  }\n",
        "begin_line": 2846,
        "end_line": 2857,
        "comment": "",
        "child_ranges": [
            "(line 2847,col 5)-(line 2847,col 64)",
            "(line 2848,col 5)-(line 2848,col 48)",
            "(line 2850,col 5)-(line 2850,col 40)",
            "(line 2854,col 5)-(line 2854,col 72)",
            "(line 2855,col 5)-(line 2856,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordTypeGreatestSubType8()",
        "snippet": "  public void testRecordTypeGreatestSubType8() {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"xyz\", UNKNOWN_TYPE, null);\n\n    JSType recordType = builder.build();\n\n    assertTypeEquals(NO_OBJECT_TYPE,\n                 recordType.getGreatestSubtype(U2U_CONSTRUCTOR_TYPE));\n\n    // if goog.Bar is given a property \"xyz\" of type \"string\", then it's\n    // also a subtype of the record type {x: ?}.\n    googBar.defineDeclaredProperty(\"xyz\", STRING_TYPE, null);\n\n    assertTypeEquals(googBar,\n                 recordType.getGreatestSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTypeEquals(googBar,\n                 U2U_CONSTRUCTOR_TYPE.getGreatestSubtype(recordType));\n\n    ObjectType googBarInst = googBar.getInstanceType();\n    assertTypeEquals(NO_OBJECT_TYPE,\n                 recordType.getGreatestSubtype(googBarInst));\n    assertTypeEquals(NO_OBJECT_TYPE,\n                 googBarInst.getGreatestSubtype(recordType));\n  }\n",
        "begin_line": 2858,
        "end_line": 2881,
        "comment": "",
        "child_ranges": [
            "(line 2859,col 5)-(line 2859,col 64)",
            "(line 2860,col 5)-(line 2860,col 51)",
            "(line 2862,col 5)-(line 2862,col 40)",
            "(line 2864,col 5)-(line 2865,col 70)",
            "(line 2869,col 5)-(line 2869,col 61)",
            "(line 2871,col 5)-(line 2872,col 70)",
            "(line 2873,col 5)-(line 2874,col 70)",
            "(line 2876,col 5)-(line 2876,col 55)",
            "(line 2877,col 5)-(line 2878,col 61)",
            "(line 2879,col 5)-(line 2880,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testApplyOfDateMethod()",
        "snippet": "  public void testApplyOfDateMethod() {\n    JSType applyType = dateMethod.getPropertyType(\"apply\");\n    assertTrue(\"apply should be a function\",\n        applyType instanceof FunctionType);\n\n    FunctionType applyFn = (FunctionType) applyType;\n    assertTypeEquals(\"apply should have the same return type as its function\",\n        NUMBER_TYPE, applyFn.getReturnType());\n\n    Node params = applyFn.getParametersNode();\n    assertEquals(\"apply takes two args\",\n        2, params.getChildCount());\n    assertTypeEquals(\"apply's first arg is the @this type\",\n        registry.createOptionalNullableType(DATE_TYPE),\n        params.getFirstChild().getJSType());\n    assertTypeEquals(\"apply's second arg is an Array\",\n        registry.createOptionalNullableType(OBJECT_TYPE),\n        params.getLastChild().getJSType());\n    assertTrue(\"apply's args must be optional\",\n        params.getFirstChild().isOptionalArg());\n    assertTrue(\"apply's args must be optional\",\n        params.getLastChild().isOptionalArg());\n  }\n",
        "begin_line": 2886,
        "end_line": 2908,
        "comment": "\n   * Tests the \"apply\" method on the function type.\n   ",
        "child_ranges": [
            "(line 2887,col 5)-(line 2887,col 59)",
            "(line 2888,col 5)-(line 2889,col 43)",
            "(line 2891,col 5)-(line 2891,col 52)",
            "(line 2892,col 5)-(line 2893,col 46)",
            "(line 2895,col 5)-(line 2895,col 46)",
            "(line 2896,col 5)-(line 2897,col 35)",
            "(line 2898,col 5)-(line 2900,col 44)",
            "(line 2901,col 5)-(line 2903,col 43)",
            "(line 2904,col 5)-(line 2905,col 48)",
            "(line 2906,col 5)-(line 2907,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testCallOfDateMethod()",
        "snippet": "  public void testCallOfDateMethod() {\n    JSType callType = dateMethod.getPropertyType(\"call\");\n    assertTrue(\"call should be a function\",\n        callType instanceof FunctionType);\n\n    FunctionType callFn = (FunctionType) callType;\n    assertTypeEquals(\"call should have the same return type as its function\",\n        NUMBER_TYPE, callFn.getReturnType());\n\n    Node params = callFn.getParametersNode();\n    assertEquals(\"call takes one argument in this case\",\n        1, params.getChildCount());\n    assertTypeEquals(\"call's first arg is the @this type\",\n        registry.createOptionalNullableType(DATE_TYPE),\n        params.getFirstChild().getJSType());\n    assertTrue(\"call's args must be optional\",\n        params.getFirstChild().isOptionalArg());\n  }\n",
        "begin_line": 2913,
        "end_line": 2930,
        "comment": "\n   * Tests the \"call\" method on the function type.\n   ",
        "child_ranges": [
            "(line 2914,col 5)-(line 2914,col 57)",
            "(line 2915,col 5)-(line 2916,col 42)",
            "(line 2918,col 5)-(line 2918,col 50)",
            "(line 2919,col 5)-(line 2920,col 45)",
            "(line 2922,col 5)-(line 2922,col 45)",
            "(line 2923,col 5)-(line 2924,col 35)",
            "(line 2925,col 5)-(line 2927,col 44)",
            "(line 2928,col 5)-(line 2929,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionTypeRepresentation()",
        "snippet": "  public void testFunctionTypeRepresentation() {\n    assertEquals(\"function (number, string): boolean\",\n        registry.createFunctionType(BOOLEAN_TYPE, false, NUMBER_TYPE,\n            STRING_TYPE).toString());\n\n    assertEquals(\"function (new:Array, ...[*]): Array\",\n        ARRAY_FUNCTION_TYPE.toString());\n\n    assertEquals(\"function (new:Boolean, *): boolean\",\n        BOOLEAN_OBJECT_FUNCTION_TYPE.toString());\n\n    assertEquals(\"function (new:Number, *): number\",\n        NUMBER_OBJECT_FUNCTION_TYPE.toString());\n\n    assertEquals(\"function (new:String, *): string\",\n        STRING_OBJECT_FUNCTION_TYPE.toString());\n\n    assertEquals(\"function (...[number]): boolean\",\n        registry.createFunctionType(BOOLEAN_TYPE, true, NUMBER_TYPE)\n        .toString());\n\n    assertEquals(\"function (number, ...[string]): boolean\",\n        registry.createFunctionType(BOOLEAN_TYPE, true, NUMBER_TYPE,\n            STRING_TYPE).toString());\n\n    assertEquals(\"function (this:Date, number): (boolean|number|string)\",\n        new FunctionBuilder(registry)\n            .withParamsNode(registry.createParameters(NUMBER_TYPE))\n            .withReturnType(NUMBER_STRING_BOOLEAN)\n            .withTypeOfThis(DATE_TYPE)\n            .build().toString());\n  }\n",
        "begin_line": 2935,
        "end_line": 2966,
        "comment": "\n   * Tests the representation of function types.\n   ",
        "child_ranges": [
            "(line 2936,col 5)-(line 2938,col 37)",
            "(line 2940,col 5)-(line 2941,col 40)",
            "(line 2943,col 5)-(line 2944,col 49)",
            "(line 2946,col 5)-(line 2947,col 48)",
            "(line 2949,col 5)-(line 2950,col 48)",
            "(line 2952,col 5)-(line 2954,col 21)",
            "(line 2956,col 5)-(line 2958,col 37)",
            "(line 2960,col 5)-(line 2965,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionTypeRelationships()",
        "snippet": "  public void testFunctionTypeRelationships() {\n    FunctionType dateMethodEmpty = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters())\n        .withTypeOfThis(DATE_TYPE).build();\n    FunctionType dateMethodWithParam = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withTypeOfThis(DATE_TYPE).build();\n    FunctionType dateMethodWithReturn = new FunctionBuilder(registry)\n        .withReturnType(NUMBER_TYPE)\n        .withTypeOfThis(DATE_TYPE).build();\n    FunctionType stringMethodEmpty = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters())\n        .withTypeOfThis(STRING_OBJECT_TYPE).build();\n    FunctionType stringMethodWithParam = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withTypeOfThis(STRING_OBJECT_TYPE).build();\n    FunctionType stringMethodWithReturn = new FunctionBuilder(registry)\n        .withReturnType(NUMBER_TYPE)\n        .withTypeOfThis(STRING_OBJECT_TYPE).build();\n\n    // One-off tests.\n    assertFalse(stringMethodEmpty.isSubtype(dateMethodEmpty));\n\n    // Systemic tests.\n    List<FunctionType> allFunctions = Lists.newArrayList(\n        dateMethodEmpty, dateMethodWithParam, dateMethodWithReturn,\n        stringMethodEmpty, stringMethodWithParam, stringMethodWithReturn);\n    for (int i = 0; i < allFunctions.size(); i++) {\n      for (int j = 0; j < allFunctions.size(); j++) {\n        FunctionType typeA = allFunctions.get(i);\n        FunctionType typeB = allFunctions.get(j);\n        assertEquals(String.format(\"equals(%s, %s)\", typeA, typeB),\n            i == j, typeA.isEquivalentTo(typeB));\n\n        // For this particular set of functions, the functions are subtypes\n        // of each other iff they have the same \"this\" type.\n        assertEquals(String.format(\"isSubtype(%s, %s)\", typeA, typeB),\n            typeA.getTypeOfThis().isEquivalentTo(typeB.getTypeOfThis()),\n            typeA.isSubtype(typeB));\n\n        if (i == j) {\n          assertTypeEquals(typeA, typeA.getLeastSupertype(typeB));\n          assertTypeEquals(typeA, typeA.getGreatestSubtype(typeB));\n        } else {\n          assertTypeEquals(String.format(\"sup(%s, %s)\", typeA, typeB),\n              U2U_CONSTRUCTOR_TYPE, typeA.getLeastSupertype(typeB));\n          assertTypeEquals(String.format(\"inf(%s, %s)\", typeA, typeB),\n              LEAST_FUNCTION_TYPE, typeA.getGreatestSubtype(typeB));\n        }\n      }\n    }\n  }\n",
        "begin_line": 2971,
        "end_line": 3022,
        "comment": "\n   * Tests relationships between structural function types.\n   ",
        "child_ranges": [
            "(line 2972,col 5)-(line 2974,col 43)",
            "(line 2975,col 5)-(line 2977,col 43)",
            "(line 2978,col 5)-(line 2980,col 43)",
            "(line 2981,col 5)-(line 2983,col 52)",
            "(line 2984,col 5)-(line 2986,col 52)",
            "(line 2987,col 5)-(line 2989,col 52)",
            "(line 2992,col 5)-(line 2992,col 62)",
            "(line 2995,col 5)-(line 2997,col 74)",
            "(line 2998,col 5)-(line 3021,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testProxiedFunctionTypeRelationships()",
        "snippet": "  public void testProxiedFunctionTypeRelationships() {\n    FunctionType dateMethodEmpty = new FunctionBuilder(registry)\n      .withParamsNode(registry.createParameters())\n      .withTypeOfThis(DATE_TYPE).build().toMaybeFunctionType();\n    FunctionType dateMethodWithParam = new FunctionBuilder(registry)\n      .withParamsNode(registry.createParameters(NUMBER_TYPE))\n      .withTypeOfThis(DATE_TYPE).build().toMaybeFunctionType();\n    ProxyObjectType proxyDateMethodEmpty =\n        new ProxyObjectType(registry, dateMethodEmpty);\n    ProxyObjectType proxyDateMethodWithParam =\n        new ProxyObjectType(registry, dateMethodWithParam);\n\n    assertTypeEquals(U2U_CONSTRUCTOR_TYPE,\n        proxyDateMethodEmpty.getLeastSupertype(proxyDateMethodWithParam));\n    assertTypeEquals(LEAST_FUNCTION_TYPE,\n        proxyDateMethodEmpty.getGreatestSubtype(proxyDateMethodWithParam));\n  }\n",
        "begin_line": 3024,
        "end_line": 3040,
        "comment": "",
        "child_ranges": [
            "(line 3025,col 5)-(line 3027,col 63)",
            "(line 3028,col 5)-(line 3030,col 63)",
            "(line 3031,col 5)-(line 3032,col 55)",
            "(line 3033,col 5)-(line 3034,col 59)",
            "(line 3036,col 5)-(line 3037,col 74)",
            "(line 3038,col 5)-(line 3039,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionSubTypeRelationships()",
        "snippet": "  public void testFunctionSubTypeRelationships() {\n    FunctionType googBarMethod = new FunctionBuilder(registry)\n        .withTypeOfThis(googBar).build();\n    FunctionType googBarParamFn = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(googBar)).build();\n    FunctionType googBarReturnFn = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters())\n        .withReturnType(googBar).build();\n    FunctionType googSubBarMethod = new FunctionBuilder(registry)\n        .withTypeOfThis(googSubBar).build();\n    FunctionType googSubBarParamFn = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(googSubBar)).build();\n    FunctionType googSubBarReturnFn = new FunctionBuilder(registry)\n        .withReturnType(googSubBar).build();\n\n    assertTrue(googBarMethod.isSubtype(googSubBarMethod));\n    assertTrue(googBarReturnFn.isSubtype(googSubBarReturnFn));\n\n    List<FunctionType> allFunctions = Lists.newArrayList(\n        googBarMethod, googBarParamFn, googBarReturnFn,\n        googSubBarMethod, googSubBarParamFn, googSubBarReturnFn);\n    for (int i = 0; i < allFunctions.size(); i++) {\n      for (int j = 0; j < allFunctions.size(); j++) {\n        FunctionType typeA = allFunctions.get(i);\n        FunctionType typeB = allFunctions.get(j);\n        assertEquals(String.format(\"equals(%s, %s)\", typeA, typeB),\n            i == j, typeA.isEquivalentTo(typeB));\n\n        // TODO(nicksantos): This formulation of least subtype and greatest\n        // supertype is a bit loose. We might want to tighten it up later.\n        if (i == j) {\n          assertTypeEquals(typeA, typeA.getLeastSupertype(typeB));\n          assertTypeEquals(typeA, typeA.getGreatestSubtype(typeB));\n        } else {\n          assertTypeEquals(String.format(\"sup(%s, %s)\", typeA, typeB),\n              U2U_CONSTRUCTOR_TYPE, typeA.getLeastSupertype(typeB));\n          assertTypeEquals(String.format(\"inf(%s, %s)\", typeA, typeB),\n              LEAST_FUNCTION_TYPE, typeA.getGreatestSubtype(typeB));\n        }\n      }\n    }\n  }\n",
        "begin_line": 3045,
        "end_line": 3086,
        "comment": "\n   * Tests relationships between structural function types.\n   ",
        "child_ranges": [
            "(line 3046,col 5)-(line 3047,col 41)",
            "(line 3048,col 5)-(line 3049,col 68)",
            "(line 3050,col 5)-(line 3052,col 41)",
            "(line 3053,col 5)-(line 3054,col 44)",
            "(line 3055,col 5)-(line 3056,col 71)",
            "(line 3057,col 5)-(line 3058,col 44)",
            "(line 3060,col 5)-(line 3060,col 58)",
            "(line 3061,col 5)-(line 3061,col 62)",
            "(line 3063,col 5)-(line 3065,col 65)",
            "(line 3066,col 5)-(line 3085,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionPrototypeAndImplicitPrototype1()",
        "snippet": "  public void testFunctionPrototypeAndImplicitPrototype1() {\n    FunctionType constructor =\n        registry.createConstructorType(null, null, null, null);\n    ObjectType instance = constructor.getInstanceType();\n\n    // adding one property on the prototype\n    ObjectType prototype =\n        (ObjectType) constructor.getPropertyType(\"prototype\");\n    prototype.defineDeclaredProperty(\"foo\", DATE_TYPE, null);\n\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, instance.getPropertiesCount());\n  }\n",
        "begin_line": 3092,
        "end_line": 3103,
        "comment": "\n   * Tests that defining a property of a function's {@code prototype} adds the\n   * property to it instance type.\n   ",
        "child_ranges": [
            "(line 3093,col 5)-(line 3094,col 63)",
            "(line 3095,col 5)-(line 3095,col 56)",
            "(line 3098,col 5)-(line 3099,col 62)",
            "(line 3100,col 5)-(line 3100,col 61)",
            "(line 3102,col 5)-(line 3102,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionPrototypeAndImplicitPrototype2()",
        "snippet": "  public void testFunctionPrototypeAndImplicitPrototype2() {\n    FunctionType constructor =\n        registry.createConstructorType(null, null, null, null);\n    ObjectType instance = constructor.getInstanceType();\n\n    // replacing the prototype\n    ObjectType prototype = registry.createAnonymousObjectType();\n    prototype.defineDeclaredProperty(\"foo\", DATE_TYPE, null);\n    constructor.defineDeclaredProperty(\"prototype\", prototype, null);\n\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, instance.getPropertiesCount());\n  }\n",
        "begin_line": 3109,
        "end_line": 3120,
        "comment": "\n   * Tests that replacing a function's {@code prototype} changes the visible\n   * properties of its instance type.\n   ",
        "child_ranges": [
            "(line 3110,col 5)-(line 3111,col 63)",
            "(line 3112,col 5)-(line 3112,col 56)",
            "(line 3115,col 5)-(line 3115,col 64)",
            "(line 3116,col 5)-(line 3116,col 61)",
            "(line 3117,col 5)-(line 3117,col 69)",
            "(line 3119,col 5)-(line 3119,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testJSDocOnPrototypeProperty()",
        "snippet": "  public void testJSDocOnPrototypeProperty() throws Exception {\n    subclassCtor.setPropertyJSDocInfo(\"prototype\", new JSDocInfo());\n    assertNull(subclassCtor.getOwnPropertyJSDocInfo(\"prototype\"));\n  }\n",
        "begin_line": 3123,
        "end_line": 3126,
        "comment": " Tests assigning jsdoc on a prototype property. ",
        "child_ranges": [
            "(line 3124,col 5)-(line 3124,col 68)",
            "(line 3125,col 5)-(line 3125,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testVoidType()",
        "snippet": "  public void testVoidType() throws Exception {\n    // canAssignTo\n    assertTrue(VOID_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(VOID_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(VOID_TYPE.canAssignTo(REGEXP_TYPE));\n\n    // autoboxesTo\n    assertNull(VOID_TYPE.autoboxesTo());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(VOID_TYPE, ALL_TYPE);\n    assertCannotTestForEqualityWith(VOID_TYPE, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(VOID_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(VOID_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(VOID_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertTrue(VOID_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(VOID_TYPE.canTestForShallowEqualityWith(\n            createUnionType(NUMBER_TYPE, VOID_TYPE)));\n\n    // matchesXxx\n    assertFalse(VOID_TYPE.matchesInt32Context());\n    assertFalse(VOID_TYPE.matchesNumberContext());\n    assertFalse(VOID_TYPE.matchesObjectContext());\n    assertTrue(VOID_TYPE.matchesStringContext());\n    assertFalse(VOID_TYPE.matchesUint32Context());\n\n    Asserts.assertResolvesToSame(VOID_TYPE);\n  }\n",
        "begin_line": 3131,
        "end_line": 3179,
        "comment": "\n   * Tests the behavior of the void type.\n   ",
        "child_ranges": [
            "(line 3133,col 5)-(line 3133,col 48)",
            "(line 3134,col 5)-(line 3134,col 59)",
            "(line 3135,col 5)-(line 3135,col 52)",
            "(line 3138,col 5)-(line 3138,col 40)",
            "(line 3141,col 5)-(line 3141,col 54)",
            "(line 3142,col 5)-(line 3142,col 60)",
            "(line 3145,col 5)-(line 3145,col 65)",
            "(line 3146,col 5)-(line 3146,col 73)",
            "(line 3147,col 5)-(line 3147,col 69)",
            "(line 3148,col 5)-(line 3148,col 71)",
            "(line 3149,col 5)-(line 3149,col 78)",
            "(line 3150,col 5)-(line 3150,col 68)",
            "(line 3151,col 5)-(line 3151,col 69)",
            "(line 3152,col 5)-(line 3152,col 74)",
            "(line 3153,col 5)-(line 3153,col 71)",
            "(line 3154,col 5)-(line 3154,col 68)",
            "(line 3155,col 5)-(line 3155,col 70)",
            "(line 3156,col 5)-(line 3156,col 77)",
            "(line 3157,col 5)-(line 3157,col 70)",
            "(line 3158,col 5)-(line 3158,col 73)",
            "(line 3159,col 5)-(line 3159,col 75)",
            "(line 3160,col 5)-(line 3160,col 79)",
            "(line 3161,col 5)-(line 3161,col 70)",
            "(line 3162,col 5)-(line 3162,col 70)",
            "(line 3163,col 5)-(line 3163,col 77)",
            "(line 3164,col 5)-(line 3164,col 76)",
            "(line 3165,col 5)-(line 3165,col 74)",
            "(line 3166,col 5)-(line 3166,col 66)",
            "(line 3167,col 5)-(line 3167,col 67)",
            "(line 3168,col 5)-(line 3169,col 54)",
            "(line 3172,col 5)-(line 3172,col 49)",
            "(line 3173,col 5)-(line 3173,col 50)",
            "(line 3174,col 5)-(line 3174,col 50)",
            "(line 3175,col 5)-(line 3175,col 49)",
            "(line 3176,col 5)-(line 3176,col 50)",
            "(line 3178,col 5)-(line 3178,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testBooleanValueType()",
        "snippet": "  public void testBooleanValueType() throws Exception {\n    // isXxx\n    assertFalse(BOOLEAN_TYPE.isArrayType());\n    assertFalse(BOOLEAN_TYPE.isBooleanObjectType());\n    assertTrue(BOOLEAN_TYPE.isBooleanValueType());\n    assertFalse(BOOLEAN_TYPE.isDateType());\n    assertFalse(BOOLEAN_TYPE.isEnumElementType());\n    assertFalse(BOOLEAN_TYPE.isNamedType());\n    assertFalse(BOOLEAN_TYPE.isNullType());\n    assertFalse(BOOLEAN_TYPE.isNumberObjectType());\n    assertFalse(BOOLEAN_TYPE.isNumberValueType());\n    assertFalse(BOOLEAN_TYPE.isFunctionPrototypeType());\n    assertFalse(BOOLEAN_TYPE.isRegexpType());\n    assertFalse(BOOLEAN_TYPE.isStringObjectType());\n    assertFalse(BOOLEAN_TYPE.isStringValueType());\n    assertFalse(BOOLEAN_TYPE.isEnumType());\n    assertFalse(BOOLEAN_TYPE.isUnionType());\n    assertFalse(BOOLEAN_TYPE.isAllType());\n    assertFalse(BOOLEAN_TYPE.isVoidType());\n    assertFalse(BOOLEAN_TYPE.isConstructor());\n    assertFalse(BOOLEAN_TYPE.isInstanceType());\n\n    // autoboxesTo\n    assertTypeEquals(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE.autoboxesTo());\n\n    // unboxesTo\n    assertTypeEquals(BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE.unboxesTo());\n\n    // canAssignTo\n    assertTrue(BOOLEAN_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(functionType));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(NULL_TYPE));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(BOOLEAN_TYPE.canAssignTo(unresolvedNamedType));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(namedGoogBar));\n    assertFalse(BOOLEAN_TYPE.canAssignTo(REGEXP_TYPE));\n\n    // canBeCalled\n    assertFalse(BOOLEAN_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(BOOLEAN_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_TYPE, NUMBER_TYPE);\n    assertCannotTestForEqualityWith(BOOLEAN_TYPE, functionType);\n    assertCannotTestForEqualityWith(BOOLEAN_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_TYPE, REGEXP_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_TYPE, UNKNOWN_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(BOOLEAN_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertTrue(BOOLEAN_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertFalse(BOOLEAN_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(functionType));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(BOOLEAN_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(BOOLEAN_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n    assertTrue(BOOLEAN_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n\n    // isNullable\n    assertFalse(BOOLEAN_TYPE.isNullable());\n\n    // matchesXxx\n    assertTrue(BOOLEAN_TYPE.matchesInt32Context());\n    assertTrue(BOOLEAN_TYPE.matchesNumberContext());\n    assertTrue(BOOLEAN_TYPE.matchesObjectContext());\n    assertTrue(BOOLEAN_TYPE.matchesStringContext());\n    assertTrue(BOOLEAN_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"boolean\", BOOLEAN_TYPE.toString());\n    assertTrue(BOOLEAN_TYPE.hasDisplayName());\n    assertEquals(\"boolean\", BOOLEAN_TYPE.getDisplayName());\n\n    Asserts.assertResolvesToSame(BOOLEAN_TYPE);\n  }\n",
        "begin_line": 3184,
        "end_line": 3282,
        "comment": "\n   * Tests the behavior of the boolean type.\n   ",
        "child_ranges": [
            "(line 3186,col 5)-(line 3186,col 44)",
            "(line 3187,col 5)-(line 3187,col 52)",
            "(line 3188,col 5)-(line 3188,col 50)",
            "(line 3189,col 5)-(line 3189,col 43)",
            "(line 3190,col 5)-(line 3190,col 50)",
            "(line 3191,col 5)-(line 3191,col 44)",
            "(line 3192,col 5)-(line 3192,col 43)",
            "(line 3193,col 5)-(line 3193,col 51)",
            "(line 3194,col 5)-(line 3194,col 50)",
            "(line 3195,col 5)-(line 3195,col 56)",
            "(line 3196,col 5)-(line 3196,col 45)",
            "(line 3197,col 5)-(line 3197,col 51)",
            "(line 3198,col 5)-(line 3198,col 50)",
            "(line 3199,col 5)-(line 3199,col 43)",
            "(line 3200,col 5)-(line 3200,col 44)",
            "(line 3201,col 5)-(line 3201,col 42)",
            "(line 3202,col 5)-(line 3202,col 43)",
            "(line 3203,col 5)-(line 3203,col 46)",
            "(line 3204,col 5)-(line 3204,col 47)",
            "(line 3207,col 5)-(line 3207,col 70)",
            "(line 3210,col 5)-(line 3210,col 68)",
            "(line 3213,col 5)-(line 3213,col 51)",
            "(line 3214,col 5)-(line 3214,col 62)",
            "(line 3215,col 5)-(line 3215,col 55)",
            "(line 3216,col 5)-(line 3216,col 56)",
            "(line 3217,col 5)-(line 3217,col 53)",
            "(line 3218,col 5)-(line 3218,col 55)",
            "(line 3219,col 5)-(line 3219,col 53)",
            "(line 3220,col 5)-(line 3220,col 62)",
            "(line 3221,col 5)-(line 3221,col 56)",
            "(line 3222,col 5)-(line 3222,col 55)",
            "(line 3225,col 5)-(line 3225,col 44)",
            "(line 3228,col 5)-(line 3228,col 57)",
            "(line 3229,col 5)-(line 3229,col 67)",
            "(line 3230,col 5)-(line 3230,col 60)",
            "(line 3231,col 5)-(line 3231,col 64)",
            "(line 3232,col 5)-(line 3232,col 61)",
            "(line 3233,col 5)-(line 3233,col 60)",
            "(line 3234,col 5)-(line 3234,col 58)",
            "(line 3235,col 5)-(line 3235,col 60)",
            "(line 3236,col 5)-(line 3236,col 61)",
            "(line 3239,col 5)-(line 3239,col 68)",
            "(line 3240,col 5)-(line 3240,col 76)",
            "(line 3241,col 5)-(line 3241,col 72)",
            "(line 3242,col 5)-(line 3242,col 73)",
            "(line 3243,col 5)-(line 3244,col 60)",
            "(line 3245,col 5)-(line 3245,col 71)",
            "(line 3246,col 5)-(line 3246,col 72)",
            "(line 3247,col 5)-(line 3247,col 77)",
            "(line 3248,col 5)-(line 3248,col 74)",
            "(line 3249,col 5)-(line 3249,col 71)",
            "(line 3250,col 5)-(line 3250,col 73)",
            "(line 3251,col 5)-(line 3251,col 80)",
            "(line 3252,col 5)-(line 3252,col 73)",
            "(line 3253,col 5)-(line 3253,col 76)",
            "(line 3254,col 5)-(line 3254,col 78)",
            "(line 3255,col 5)-(line 3256,col 61)",
            "(line 3257,col 5)-(line 3257,col 73)",
            "(line 3258,col 5)-(line 3258,col 73)",
            "(line 3259,col 5)-(line 3259,col 80)",
            "(line 3260,col 5)-(line 3260,col 79)",
            "(line 3261,col 5)-(line 3261,col 77)",
            "(line 3262,col 5)-(line 3262,col 69)",
            "(line 3263,col 5)-(line 3263,col 71)",
            "(line 3264,col 5)-(line 3264,col 73)",
            "(line 3267,col 5)-(line 3267,col 43)",
            "(line 3270,col 5)-(line 3270,col 51)",
            "(line 3271,col 5)-(line 3271,col 52)",
            "(line 3272,col 5)-(line 3272,col 52)",
            "(line 3273,col 5)-(line 3273,col 52)",
            "(line 3274,col 5)-(line 3274,col 52)",
            "(line 3277,col 5)-(line 3277,col 53)",
            "(line 3278,col 5)-(line 3278,col 46)",
            "(line 3279,col 5)-(line 3279,col 59)",
            "(line 3281,col 5)-(line 3281,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testBooleanObjectType()",
        "snippet": "  public void testBooleanObjectType() throws Exception {\n    // isXxx\n    assertFalse(BOOLEAN_OBJECT_TYPE.isArrayType());\n    assertTrue(BOOLEAN_OBJECT_TYPE.isBooleanObjectType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isBooleanValueType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isDateType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isEnumElementType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isNamedType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isNullType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isNumberObjectType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isNumberValueType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isFunctionPrototypeType());\n    assertTrue(\n        BOOLEAN_OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isRegexpType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isStringObjectType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isStringValueType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isEnumType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isUnionType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isAllType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isVoidType());\n    assertFalse(BOOLEAN_OBJECT_TYPE.isConstructor());\n    assertTrue(BOOLEAN_OBJECT_TYPE.isInstanceType());\n\n    // canAssignTo\n    assertTrue(BOOLEAN_OBJECT_TYPE.canAssignTo(ALL_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(functionType));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(NULL_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(DATE_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.canAssignTo(unresolvedNamedType));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(namedGoogBar));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));\n    // canBeCalled\n    assertFalse(BOOLEAN_OBJECT_TYPE.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, ALL_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, NUMBER_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, functionType);\n    assertCannotTestForEqualityWith(BOOLEAN_OBJECT_TYPE, VOID_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, OBJECT_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, DATE_TYPE);\n    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(functionType));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.\n        canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(BOOLEAN_OBJECT_TYPE.isNullable());\n\n    // matchesXxx\n    assertTrue(BOOLEAN_OBJECT_TYPE.matchesInt32Context());\n    assertTrue(BOOLEAN_OBJECT_TYPE.matchesNumberContext());\n    assertTrue(BOOLEAN_OBJECT_TYPE.matchesObjectContext());\n    assertTrue(BOOLEAN_OBJECT_TYPE.matchesStringContext());\n    assertTrue(BOOLEAN_OBJECT_TYPE.matchesUint32Context());\n\n    // toString\n    assertEquals(\"Boolean\", BOOLEAN_OBJECT_TYPE.toString());\n    assertTrue(BOOLEAN_OBJECT_TYPE.hasDisplayName());\n    assertEquals(\"Boolean\", BOOLEAN_OBJECT_TYPE.getDisplayName());\n\n    assertTrue(BOOLEAN_OBJECT_TYPE.isNativeObjectType());\n\n    Asserts.assertResolvesToSame(BOOLEAN_OBJECT_TYPE);\n  }\n",
        "begin_line": 3287,
        "end_line": 3390,
        "comment": "\n   * Tests the behavior of the Boolean type.\n   ",
        "child_ranges": [
            "(line 3289,col 5)-(line 3289,col 51)",
            "(line 3290,col 5)-(line 3290,col 58)",
            "(line 3291,col 5)-(line 3291,col 58)",
            "(line 3292,col 5)-(line 3292,col 50)",
            "(line 3293,col 5)-(line 3293,col 57)",
            "(line 3294,col 5)-(line 3294,col 51)",
            "(line 3295,col 5)-(line 3295,col 50)",
            "(line 3296,col 5)-(line 3296,col 58)",
            "(line 3297,col 5)-(line 3297,col 57)",
            "(line 3298,col 5)-(line 3298,col 63)",
            "(line 3299,col 5)-(line 3300,col 78)",
            "(line 3301,col 5)-(line 3301,col 52)",
            "(line 3302,col 5)-(line 3302,col 58)",
            "(line 3303,col 5)-(line 3303,col 57)",
            "(line 3304,col 5)-(line 3304,col 50)",
            "(line 3305,col 5)-(line 3305,col 51)",
            "(line 3306,col 5)-(line 3306,col 49)",
            "(line 3307,col 5)-(line 3307,col 50)",
            "(line 3308,col 5)-(line 3308,col 53)",
            "(line 3309,col 5)-(line 3309,col 53)",
            "(line 3312,col 5)-(line 3312,col 58)",
            "(line 3313,col 5)-(line 3313,col 69)",
            "(line 3314,col 5)-(line 3314,col 62)",
            "(line 3315,col 5)-(line 3315,col 63)",
            "(line 3316,col 5)-(line 3316,col 60)",
            "(line 3317,col 5)-(line 3317,col 61)",
            "(line 3318,col 5)-(line 3318,col 60)",
            "(line 3319,col 5)-(line 3319,col 69)",
            "(line 3320,col 5)-(line 3320,col 63)",
            "(line 3321,col 5)-(line 3321,col 62)",
            "(line 3323,col 5)-(line 3323,col 51)",
            "(line 3326,col 5)-(line 3326,col 64)",
            "(line 3327,col 5)-(line 3327,col 74)",
            "(line 3328,col 5)-(line 3328,col 67)",
            "(line 3329,col 5)-(line 3329,col 68)",
            "(line 3330,col 5)-(line 3330,col 68)",
            "(line 3331,col 5)-(line 3331,col 67)",
            "(line 3332,col 5)-(line 3332,col 65)",
            "(line 3333,col 5)-(line 3333,col 67)",
            "(line 3336,col 5)-(line 3336,col 75)",
            "(line 3337,col 5)-(line 3338,col 55)",
            "(line 3339,col 5)-(line 3339,col 79)",
            "(line 3340,col 5)-(line 3341,col 53)",
            "(line 3342,col 5)-(line 3343,col 60)",
            "(line 3344,col 5)-(line 3344,col 78)",
            "(line 3345,col 5)-(line 3345,col 79)",
            "(line 3346,col 5)-(line 3347,col 56)",
            "(line 3348,col 5)-(line 3349,col 53)",
            "(line 3350,col 5)-(line 3350,col 78)",
            "(line 3351,col 5)-(line 3351,col 80)",
            "(line 3352,col 5)-(line 3353,col 59)",
            "(line 3354,col 5)-(line 3354,col 79)",
            "(line 3355,col 5)-(line 3356,col 55)",
            "(line 3357,col 5)-(line 3358,col 57)",
            "(line 3359,col 5)-(line 3360,col 61)",
            "(line 3361,col 5)-(line 3361,col 80)",
            "(line 3362,col 5)-(line 3362,col 80)",
            "(line 3363,col 5)-(line 3364,col 59)",
            "(line 3365,col 5)-(line 3366,col 58)",
            "(line 3367,col 5)-(line 3368,col 56)",
            "(line 3369,col 5)-(line 3369,col 76)",
            "(line 3370,col 5)-(line 3370,col 78)",
            "(line 3373,col 5)-(line 3373,col 50)",
            "(line 3376,col 5)-(line 3376,col 58)",
            "(line 3377,col 5)-(line 3377,col 59)",
            "(line 3378,col 5)-(line 3378,col 59)",
            "(line 3379,col 5)-(line 3379,col 59)",
            "(line 3380,col 5)-(line 3380,col 59)",
            "(line 3383,col 5)-(line 3383,col 60)",
            "(line 3384,col 5)-(line 3384,col 53)",
            "(line 3385,col 5)-(line 3385,col 66)",
            "(line 3387,col 5)-(line 3387,col 57)",
            "(line 3389,col 5)-(line 3389,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testEnumType()",
        "snippet": "  public void testEnumType() throws Exception {\n    EnumType enumType = new EnumType(registry, \"Enum\", null, NUMBER_TYPE);\n\n    // isXxx\n    assertFalse(enumType.isArrayType());\n    assertFalse(enumType.isBooleanObjectType());\n    assertFalse(enumType.isBooleanValueType());\n    assertFalse(enumType.isDateType());\n    assertFalse(enumType.isEnumElementType());\n    assertFalse(enumType.isNamedType());\n    assertFalse(enumType.isNullType());\n    assertFalse(enumType.isNumberObjectType());\n    assertFalse(enumType.isNumberValueType());\n    assertFalse(enumType.isFunctionPrototypeType());\n    assertFalse(enumType.isRegexpType());\n    assertFalse(enumType.isStringObjectType());\n    assertFalse(enumType.isStringValueType());\n    assertTrue(enumType.isEnumType());\n    assertFalse(enumType.isUnionType());\n    assertFalse(enumType.isAllType());\n    assertFalse(enumType.isVoidType());\n    assertFalse(enumType.isConstructor());\n    assertFalse(enumType.isInstanceType());\n\n    // canAssignTo\n    assertTrue(enumType.canAssignTo(ALL_TYPE));\n    assertFalse(enumType.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(enumType.canAssignTo(NUMBER_TYPE));\n    assertFalse(enumType.canAssignTo(functionType));\n    assertFalse(enumType.canAssignTo(NULL_TYPE));\n    assertTrue(enumType.canAssignTo(OBJECT_TYPE));\n    assertFalse(enumType.canAssignTo(DATE_TYPE));\n    assertTrue(enumType.canAssignTo(unresolvedNamedType));\n    assertFalse(enumType.canAssignTo(namedGoogBar));\n    assertFalse(enumType.canAssignTo(REGEXP_TYPE));\n\n    // canBeCalled\n    assertFalse(enumType.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(enumType, ALL_TYPE);\n    assertCanTestForEqualityWith(enumType, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(enumType, NUMBER_TYPE);\n    assertCanTestForEqualityWith(enumType, functionType);\n    assertCannotTestForEqualityWith(enumType, VOID_TYPE);\n    assertCanTestForEqualityWith(enumType, OBJECT_TYPE);\n    assertCanTestForEqualityWith(enumType, DATE_TYPE);\n    assertCanTestForEqualityWith(enumType, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(enumType.canTestForShallowEqualityWith(NO_TYPE));\n    assertTrue(enumType.\n        canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(enumType.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(enumType.\n        canTestForShallowEqualityWith(enumType));\n    assertFalse(enumType.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(enumType.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(functionType));\n    assertFalse(enumType.canTestForShallowEqualityWith(NULL_TYPE));\n    assertFalse(enumType.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertTrue(enumType.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(enumType.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(enumType.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(enumType.\n        canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(enumType.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(enumType.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(enumType.isNullable());\n\n    // matchesXxx\n    assertFalse(enumType.matchesInt32Context());\n    assertFalse(enumType.matchesNumberContext());\n    assertTrue(enumType.matchesObjectContext());\n    assertTrue(enumType.matchesStringContext());\n    assertFalse(enumType.matchesUint32Context());\n\n    // toString\n    assertEquals(\"enum{Enum}\", enumType.toString());\n    assertTrue(enumType.hasDisplayName());\n    assertEquals(\"Enum\", enumType.getDisplayName());\n\n    assertEquals(\"AnotherEnum\", new EnumType(registry, \"AnotherEnum\",\n        null, NUMBER_TYPE).getDisplayName());\n    assertFalse(\n        new EnumType(registry, null, null, NUMBER_TYPE).hasDisplayName());\n\n    Asserts.assertResolvesToSame(enumType);\n  }\n",
        "begin_line": 3395,
        "end_line": 3502,
        "comment": "\n   * Tests the behavior of the enum type.\n   ",
        "child_ranges": [
            "(line 3396,col 5)-(line 3396,col 74)",
            "(line 3399,col 5)-(line 3399,col 40)",
            "(line 3400,col 5)-(line 3400,col 48)",
            "(line 3401,col 5)-(line 3401,col 47)",
            "(line 3402,col 5)-(line 3402,col 39)",
            "(line 3403,col 5)-(line 3403,col 46)",
            "(line 3404,col 5)-(line 3404,col 40)",
            "(line 3405,col 5)-(line 3405,col 39)",
            "(line 3406,col 5)-(line 3406,col 47)",
            "(line 3407,col 5)-(line 3407,col 46)",
            "(line 3408,col 5)-(line 3408,col 52)",
            "(line 3409,col 5)-(line 3409,col 41)",
            "(line 3410,col 5)-(line 3410,col 47)",
            "(line 3411,col 5)-(line 3411,col 46)",
            "(line 3412,col 5)-(line 3412,col 38)",
            "(line 3413,col 5)-(line 3413,col 40)",
            "(line 3414,col 5)-(line 3414,col 38)",
            "(line 3415,col 5)-(line 3415,col 39)",
            "(line 3416,col 5)-(line 3416,col 42)",
            "(line 3417,col 5)-(line 3417,col 43)",
            "(line 3420,col 5)-(line 3420,col 47)",
            "(line 3421,col 5)-(line 3421,col 58)",
            "(line 3422,col 5)-(line 3422,col 51)",
            "(line 3423,col 5)-(line 3423,col 52)",
            "(line 3424,col 5)-(line 3424,col 49)",
            "(line 3425,col 5)-(line 3425,col 50)",
            "(line 3426,col 5)-(line 3426,col 49)",
            "(line 3427,col 5)-(line 3427,col 58)",
            "(line 3428,col 5)-(line 3428,col 52)",
            "(line 3429,col 5)-(line 3429,col 51)",
            "(line 3432,col 5)-(line 3432,col 40)",
            "(line 3435,col 5)-(line 3435,col 53)",
            "(line 3436,col 5)-(line 3436,col 63)",
            "(line 3437,col 5)-(line 3437,col 56)",
            "(line 3438,col 5)-(line 3438,col 57)",
            "(line 3439,col 5)-(line 3439,col 57)",
            "(line 3440,col 5)-(line 3440,col 56)",
            "(line 3441,col 5)-(line 3441,col 54)",
            "(line 3442,col 5)-(line 3442,col 56)",
            "(line 3445,col 5)-(line 3445,col 64)",
            "(line 3446,col 5)-(line 3447,col 55)",
            "(line 3448,col 5)-(line 3448,col 68)",
            "(line 3449,col 5)-(line 3450,col 53)",
            "(line 3451,col 5)-(line 3452,col 49)",
            "(line 3453,col 5)-(line 3453,col 67)",
            "(line 3454,col 5)-(line 3454,col 68)",
            "(line 3455,col 5)-(line 3456,col 56)",
            "(line 3457,col 5)-(line 3458,col 53)",
            "(line 3459,col 5)-(line 3459,col 67)",
            "(line 3460,col 5)-(line 3460,col 69)",
            "(line 3461,col 5)-(line 3462,col 59)",
            "(line 3463,col 5)-(line 3463,col 68)",
            "(line 3464,col 5)-(line 3465,col 55)",
            "(line 3466,col 5)-(line 3467,col 57)",
            "(line 3468,col 5)-(line 3469,col 61)",
            "(line 3470,col 5)-(line 3470,col 69)",
            "(line 3471,col 5)-(line 3471,col 69)",
            "(line 3472,col 5)-(line 3473,col 59)",
            "(line 3474,col 5)-(line 3475,col 58)",
            "(line 3476,col 5)-(line 3477,col 56)",
            "(line 3478,col 5)-(line 3478,col 65)",
            "(line 3479,col 5)-(line 3479,col 67)",
            "(line 3482,col 5)-(line 3482,col 39)",
            "(line 3485,col 5)-(line 3485,col 48)",
            "(line 3486,col 5)-(line 3486,col 49)",
            "(line 3487,col 5)-(line 3487,col 48)",
            "(line 3488,col 5)-(line 3488,col 48)",
            "(line 3489,col 5)-(line 3489,col 49)",
            "(line 3492,col 5)-(line 3492,col 52)",
            "(line 3493,col 5)-(line 3493,col 42)",
            "(line 3494,col 5)-(line 3494,col 52)",
            "(line 3496,col 5)-(line 3497,col 45)",
            "(line 3498,col 5)-(line 3499,col 74)",
            "(line 3501,col 5)-(line 3501,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testEnumElementType()",
        "snippet": "  public void testEnumElementType() throws Exception {\n    // isXxx\n    assertFalse(elementsType.isArrayType());\n    assertFalse(elementsType.isBooleanObjectType());\n    assertFalse(elementsType.isBooleanValueType());\n    assertFalse(elementsType.isDateType());\n    assertTrue(elementsType.isEnumElementType());\n    assertFalse(elementsType.isNamedType());\n    assertFalse(elementsType.isNullType());\n    assertFalse(elementsType.isNumberObjectType());\n    assertFalse(elementsType.isNumberValueType());\n    assertFalse(elementsType.isFunctionPrototypeType());\n    assertFalse(elementsType.isRegexpType());\n    assertFalse(elementsType.isStringObjectType());\n    assertFalse(elementsType.isStringValueType());\n    assertFalse(elementsType.isEnumType());\n    assertFalse(elementsType.isUnionType());\n    assertFalse(elementsType.isAllType());\n    assertFalse(elementsType.isVoidType());\n    assertFalse(elementsType.isConstructor());\n    assertFalse(elementsType.isInstanceType());\n\n    // canAssignTo\n    assertTrue(elementsType.canAssignTo(ALL_TYPE));\n    assertFalse(elementsType.canAssignTo(STRING_OBJECT_TYPE));\n    assertTrue(elementsType.canAssignTo(NUMBER_TYPE));\n    assertFalse(elementsType.canAssignTo(functionType));\n    assertFalse(elementsType.canAssignTo(NULL_TYPE));\n    assertFalse(elementsType.canAssignTo(OBJECT_TYPE)); // no more autoboxing\n    assertFalse(elementsType.canAssignTo(DATE_TYPE));\n    assertTrue(elementsType.canAssignTo(unresolvedNamedType));\n    assertFalse(elementsType.canAssignTo(namedGoogBar));\n    assertFalse(elementsType.canAssignTo(REGEXP_TYPE));\n\n    // canBeCalled\n    assertFalse(elementsType.canBeCalled());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(elementsType, ALL_TYPE);\n    assertCanTestForEqualityWith(elementsType, STRING_OBJECT_TYPE);\n    assertCanTestForEqualityWith(elementsType, NUMBER_TYPE);\n    assertCanTestForEqualityWith(elementsType, NUMBER_OBJECT_TYPE);\n    assertCanTestForEqualityWith(elementsType, elementsType);\n    assertCannotTestForEqualityWith(elementsType, functionType);\n    assertCannotTestForEqualityWith(elementsType, VOID_TYPE);\n    assertCanTestForEqualityWith(elementsType, OBJECT_TYPE);\n    assertCanTestForEqualityWith(elementsType, DATE_TYPE);\n    assertCanTestForEqualityWith(elementsType, REGEXP_TYPE);\n\n    // canTestForShallowEqualityWith\n    assertTrue(elementsType.canTestForShallowEqualityWith(NO_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(NO_OBJECT_TYPE));\n    assertFalse(elementsType.canTestForShallowEqualityWith(ARRAY_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(BOOLEAN_TYPE));\n    assertTrue(elementsType.\n        canTestForShallowEqualityWith(elementsType));\n    assertFalse(elementsType.canTestForShallowEqualityWith(DATE_TYPE));\n    assertFalse(elementsType.canTestForShallowEqualityWith(ERROR_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(EVAL_ERROR_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(functionType));\n    assertFalse(elementsType.canTestForShallowEqualityWith(NULL_TYPE));\n    assertTrue(elementsType.canTestForShallowEqualityWith(NUMBER_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));\n    assertFalse(elementsType.canTestForShallowEqualityWith(OBJECT_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(URI_ERROR_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(RANGE_ERROR_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));\n    assertFalse(elementsType.canTestForShallowEqualityWith(REGEXP_TYPE));\n    assertFalse(elementsType.canTestForShallowEqualityWith(STRING_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(STRING_OBJECT_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));\n    assertFalse(elementsType.\n        canTestForShallowEqualityWith(TYPE_ERROR_TYPE));\n    assertTrue(elementsType.canTestForShallowEqualityWith(ALL_TYPE));\n    assertFalse(elementsType.canTestForShallowEqualityWith(VOID_TYPE));\n\n    // isNullable\n    assertFalse(elementsType.isNullable());\n\n    // matchesXxx\n    assertTrue(elementsType.matchesInt32Context());\n    assertTrue(elementsType.matchesNumberContext());\n    assertTrue(elementsType.matchesObjectContext());\n    assertTrue(elementsType.matchesStringContext());\n    assertTrue(elementsType.matchesUint32Context());\n\n    // toString\n    assertEquals(\"Enum.<number>\", elementsType.toString());\n    assertTrue(elementsType.hasDisplayName());\n    assertEquals(\"Enum\", elementsType.getDisplayName());\n\n    Asserts.assertResolvesToSame(elementsType);\n  }\n",
        "begin_line": 3507,
        "end_line": 3609,
        "comment": "\n   * Tests the behavior of the enum element type.\n   ",
        "child_ranges": [
            "(line 3509,col 5)-(line 3509,col 44)",
            "(line 3510,col 5)-(line 3510,col 52)",
            "(line 3511,col 5)-(line 3511,col 51)",
            "(line 3512,col 5)-(line 3512,col 43)",
            "(line 3513,col 5)-(line 3513,col 49)",
            "(line 3514,col 5)-(line 3514,col 44)",
            "(line 3515,col 5)-(line 3515,col 43)",
            "(line 3516,col 5)-(line 3516,col 51)",
            "(line 3517,col 5)-(line 3517,col 50)",
            "(line 3518,col 5)-(line 3518,col 56)",
            "(line 3519,col 5)-(line 3519,col 45)",
            "(line 3520,col 5)-(line 3520,col 51)",
            "(line 3521,col 5)-(line 3521,col 50)",
            "(line 3522,col 5)-(line 3522,col 43)",
            "(line 3523,col 5)-(line 3523,col 44)",
            "(line 3524,col 5)-(line 3524,col 42)",
            "(line 3525,col 5)-(line 3525,col 43)",
            "(line 3526,col 5)-(line 3526,col 46)",
            "(line 3527,col 5)-(line 3527,col 47)",
            "(line 3530,col 5)-(line 3530,col 51)",
            "(line 3531,col 5)-(line 3531,col 62)",
            "(line 3532,col 5)-(line 3532,col 54)",
            "(line 3533,col 5)-(line 3533,col 56)",
            "(line 3534,col 5)-(line 3534,col 53)",
            "(line 3535,col 5)-(line 3535,col 55)",
            "(line 3536,col 5)-(line 3536,col 53)",
            "(line 3537,col 5)-(line 3537,col 62)",
            "(line 3538,col 5)-(line 3538,col 56)",
            "(line 3539,col 5)-(line 3539,col 55)",
            "(line 3542,col 5)-(line 3542,col 44)",
            "(line 3545,col 5)-(line 3545,col 57)",
            "(line 3546,col 5)-(line 3546,col 67)",
            "(line 3547,col 5)-(line 3547,col 60)",
            "(line 3548,col 5)-(line 3548,col 67)",
            "(line 3549,col 5)-(line 3549,col 61)",
            "(line 3550,col 5)-(line 3550,col 64)",
            "(line 3551,col 5)-(line 3551,col 61)",
            "(line 3552,col 5)-(line 3552,col 60)",
            "(line 3553,col 5)-(line 3553,col 58)",
            "(line 3554,col 5)-(line 3554,col 60)",
            "(line 3557,col 5)-(line 3557,col 68)",
            "(line 3558,col 5)-(line 3559,col 55)",
            "(line 3560,col 5)-(line 3560,col 72)",
            "(line 3561,col 5)-(line 3562,col 53)",
            "(line 3563,col 5)-(line 3564,col 53)",
            "(line 3565,col 5)-(line 3565,col 71)",
            "(line 3566,col 5)-(line 3566,col 72)",
            "(line 3567,col 5)-(line 3568,col 56)",
            "(line 3569,col 5)-(line 3570,col 53)",
            "(line 3571,col 5)-(line 3571,col 71)",
            "(line 3572,col 5)-(line 3572,col 72)",
            "(line 3573,col 5)-(line 3574,col 59)",
            "(line 3575,col 5)-(line 3575,col 73)",
            "(line 3576,col 5)-(line 3577,col 55)",
            "(line 3578,col 5)-(line 3579,col 57)",
            "(line 3580,col 5)-(line 3581,col 61)",
            "(line 3582,col 5)-(line 3582,col 73)",
            "(line 3583,col 5)-(line 3583,col 73)",
            "(line 3584,col 5)-(line 3585,col 59)",
            "(line 3586,col 5)-(line 3587,col 58)",
            "(line 3588,col 5)-(line 3589,col 56)",
            "(line 3590,col 5)-(line 3590,col 69)",
            "(line 3591,col 5)-(line 3591,col 71)",
            "(line 3594,col 5)-(line 3594,col 43)",
            "(line 3597,col 5)-(line 3597,col 51)",
            "(line 3598,col 5)-(line 3598,col 52)",
            "(line 3599,col 5)-(line 3599,col 52)",
            "(line 3600,col 5)-(line 3600,col 52)",
            "(line 3601,col 5)-(line 3601,col 52)",
            "(line 3604,col 5)-(line 3604,col 59)",
            "(line 3605,col 5)-(line 3605,col 46)",
            "(line 3606,col 5)-(line 3606,col 56)",
            "(line 3608,col 5)-(line 3608,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testStringEnumType()",
        "snippet": "  public void testStringEnumType() throws Exception {\n    EnumElementType stringEnum =\n        new EnumType(registry, \"Enum\", null, STRING_TYPE).getElementsType();\n\n    assertTypeEquals(UNKNOWN_TYPE, stringEnum.getPropertyType(\"length\"));\n    assertTypeEquals(NUMBER_TYPE, stringEnum.findPropertyType(\"length\"));\n    assertEquals(false, stringEnum.hasProperty(\"length\"));\n    assertTypeEquals(STRING_OBJECT_TYPE, stringEnum.autoboxesTo());\n    assertNull(stringEnum.getConstructor());\n\n    Asserts.assertResolvesToSame(stringEnum);\n  }\n",
        "begin_line": 3611,
        "end_line": 3622,
        "comment": "",
        "child_ranges": [
            "(line 3612,col 5)-(line 3613,col 76)",
            "(line 3615,col 5)-(line 3615,col 73)",
            "(line 3616,col 5)-(line 3616,col 73)",
            "(line 3617,col 5)-(line 3617,col 58)",
            "(line 3618,col 5)-(line 3618,col 67)",
            "(line 3619,col 5)-(line 3619,col 44)",
            "(line 3621,col 5)-(line 3621,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testStringObjectEnumType()",
        "snippet": "  public void testStringObjectEnumType() throws Exception {\n    EnumElementType stringEnum =\n        new EnumType(registry, \"Enum\", null, STRING_OBJECT_TYPE)\n        .getElementsType();\n\n    assertTypeEquals(NUMBER_TYPE, stringEnum.getPropertyType(\"length\"));\n    assertTypeEquals(NUMBER_TYPE, stringEnum.findPropertyType(\"length\"));\n    assertEquals(true, stringEnum.hasProperty(\"length\"));\n    assertTypeEquals(STRING_OBJECT_FUNCTION_TYPE, stringEnum.getConstructor());\n  }\n",
        "begin_line": 3624,
        "end_line": 3633,
        "comment": "",
        "child_ranges": [
            "(line 3625,col 5)-(line 3627,col 27)",
            "(line 3629,col 5)-(line 3629,col 72)",
            "(line 3630,col 5)-(line 3630,col 73)",
            "(line 3631,col 5)-(line 3631,col 57)",
            "(line 3632,col 5)-(line 3632,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testObjectType()",
        "snippet": "  public void testObjectType() throws Exception {\n    PrototypeObjectType objectType =\n        new PrototypeObjectType(registry, null, null);\n\n    // isXxx\n    assertFalse(objectType.isAllType());\n    assertFalse(objectType.isArrayType());\n    assertFalse(objectType.isDateType());\n    assertFalse(objectType.isFunctionPrototypeType());\n    assertTrue(objectType.getImplicitPrototype() == OBJECT_TYPE);\n\n    // canAssignTo\n    assertTrue(objectType.canAssignTo(ALL_TYPE));\n    assertFalse(objectType.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(objectType.canAssignTo(NUMBER_TYPE));\n    assertFalse(objectType.canAssignTo(functionType));\n    assertFalse(objectType.canAssignTo(NULL_TYPE));\n    assertFalse(objectType.canAssignTo(DATE_TYPE));\n    assertTrue(objectType.canAssignTo(OBJECT_TYPE));\n    assertTrue(objectType.canAssignTo(unresolvedNamedType));\n    assertFalse(objectType.canAssignTo(namedGoogBar));\n    assertFalse(objectType.canAssignTo(REGEXP_TYPE));\n\n    // autoboxesTo\n    assertNull(objectType.autoboxesTo());\n\n    // canTestForEqualityWith\n    assertCanTestForEqualityWith(objectType, NUMBER_TYPE);\n\n    // matchesXxxContext\n    assertFalse(objectType.matchesInt32Context());\n    assertFalse(objectType.matchesNumberContext());\n    assertTrue(objectType.matchesObjectContext());\n    assertFalse(objectType.matchesStringContext());\n    assertFalse(objectType.matchesUint32Context());\n\n    // isNullable\n    assertFalse(objectType.isNullable());\n    assertTrue(createNullableType(objectType).isNullable());\n\n    // toString\n    assertEquals(\"{...}\", objectType.toString());\n    assertEquals(null, objectType.getDisplayName());\n    assertFalse(objectType.hasReferenceName());\n    assertEquals(\"anObject\", new PrototypeObjectType(registry, \"anObject\",\n        null).getDisplayName());\n\n    Asserts.assertResolvesToSame(objectType);\n  }\n",
        "begin_line": 3639,
        "end_line": 3687,
        "comment": "\n   * Tests object types.\n   ",
        "child_ranges": [
            "(line 3640,col 5)-(line 3641,col 54)",
            "(line 3644,col 5)-(line 3644,col 40)",
            "(line 3645,col 5)-(line 3645,col 42)",
            "(line 3646,col 5)-(line 3646,col 41)",
            "(line 3647,col 5)-(line 3647,col 54)",
            "(line 3648,col 5)-(line 3648,col 65)",
            "(line 3651,col 5)-(line 3651,col 49)",
            "(line 3652,col 5)-(line 3652,col 60)",
            "(line 3653,col 5)-(line 3653,col 53)",
            "(line 3654,col 5)-(line 3654,col 54)",
            "(line 3655,col 5)-(line 3655,col 51)",
            "(line 3656,col 5)-(line 3656,col 51)",
            "(line 3657,col 5)-(line 3657,col 52)",
            "(line 3658,col 5)-(line 3658,col 60)",
            "(line 3659,col 5)-(line 3659,col 54)",
            "(line 3660,col 5)-(line 3660,col 53)",
            "(line 3663,col 5)-(line 3663,col 41)",
            "(line 3666,col 5)-(line 3666,col 58)",
            "(line 3669,col 5)-(line 3669,col 50)",
            "(line 3670,col 5)-(line 3670,col 51)",
            "(line 3671,col 5)-(line 3671,col 50)",
            "(line 3672,col 5)-(line 3672,col 51)",
            "(line 3673,col 5)-(line 3673,col 51)",
            "(line 3676,col 5)-(line 3676,col 41)",
            "(line 3677,col 5)-(line 3677,col 60)",
            "(line 3680,col 5)-(line 3680,col 49)",
            "(line 3681,col 5)-(line 3681,col 52)",
            "(line 3682,col 5)-(line 3682,col 47)",
            "(line 3683,col 5)-(line 3684,col 32)",
            "(line 3686,col 5)-(line 3686,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGoogBar()",
        "snippet": "  public void testGoogBar() throws Exception {\n    assertTrue(namedGoogBar.isInstanceType());\n    assertFalse(googBar.isInstanceType());\n    assertFalse(namedGoogBar.isConstructor());\n    assertTrue(googBar.isConstructor());\n    assertTrue(googBar.getInstanceType().isInstanceType());\n    assertTrue(namedGoogBar.getConstructor().isConstructor());\n    assertTrue(namedGoogBar.getImplicitPrototype().isFunctionPrototypeType());\n\n    // canAssignTo\n    assertTypeCanAssignToItself(googBar);\n    assertTypeCanAssignToItself(namedGoogBar);\n    googBar.canAssignTo(namedGoogBar);\n    namedGoogBar.canAssignTo(googBar);\n    assertTypeEquals(googBar, googBar);\n    assertTypeNotEquals(googBar, googSubBar);\n\n    Asserts.assertResolvesToSame(googBar);\n    Asserts.assertResolvesToSame(googSubBar);\n  }\n",
        "begin_line": 3692,
        "end_line": 3711,
        "comment": "\n   * Tests the goog.Bar type.\n   ",
        "child_ranges": [
            "(line 3693,col 5)-(line 3693,col 46)",
            "(line 3694,col 5)-(line 3694,col 42)",
            "(line 3695,col 5)-(line 3695,col 46)",
            "(line 3696,col 5)-(line 3696,col 40)",
            "(line 3697,col 5)-(line 3697,col 59)",
            "(line 3698,col 5)-(line 3698,col 62)",
            "(line 3699,col 5)-(line 3699,col 78)",
            "(line 3702,col 5)-(line 3702,col 41)",
            "(line 3703,col 5)-(line 3703,col 46)",
            "(line 3704,col 5)-(line 3704,col 38)",
            "(line 3705,col 5)-(line 3705,col 38)",
            "(line 3706,col 5)-(line 3706,col 39)",
            "(line 3707,col 5)-(line 3707,col 45)",
            "(line 3709,col 5)-(line 3709,col 42)",
            "(line 3710,col 5)-(line 3710,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testObjectTypePropertiesCount()",
        "snippet": "  public void testObjectTypePropertiesCount() throws Exception {\n    ObjectType sup = registry.createAnonymousObjectType();\n    int nativeProperties = sup.getPropertiesCount();\n\n    sup.defineDeclaredProperty(\"a\", DATE_TYPE, null);\n    assertEquals(nativeProperties + 1, sup.getPropertiesCount());\n\n    sup.defineDeclaredProperty(\"b\", DATE_TYPE, null);\n    assertEquals(nativeProperties + 2, sup.getPropertiesCount());\n\n    ObjectType sub = registry.createObjectType(sup);\n    assertEquals(nativeProperties + 2, sub.getPropertiesCount());\n  }\n",
        "begin_line": 3716,
        "end_line": 3728,
        "comment": "\n   * Tests how properties are counted for object types.\n   ",
        "child_ranges": [
            "(line 3717,col 5)-(line 3717,col 58)",
            "(line 3718,col 5)-(line 3718,col 52)",
            "(line 3720,col 5)-(line 3720,col 53)",
            "(line 3721,col 5)-(line 3721,col 65)",
            "(line 3723,col 5)-(line 3723,col 53)",
            "(line 3724,col 5)-(line 3724,col 65)",
            "(line 3726,col 5)-(line 3726,col 52)",
            "(line 3727,col 5)-(line 3727,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testDefineProperties()",
        "snippet": "  public void testDefineProperties() {\n    ObjectType prototype = googBar.getPrototype();\n    ObjectType instance = googBar.getInstanceType();\n\n    assertTypeEquals(instance.getImplicitPrototype(), prototype);\n\n    // Test declarations.\n    assertTrue(\n        prototype.defineDeclaredProperty(\"declared\", NUMBER_TYPE, null));\n    assertFalse(\n        prototype.defineDeclaredProperty(\"declared\", NUMBER_TYPE, null));\n    assertFalse(\n        instance.defineDeclaredProperty(\"declared\", NUMBER_TYPE, null));\n    assertTypeEquals(NUMBER_TYPE, instance.getPropertyType(\"declared\"));\n\n    // Test inferring different types.\n    assertTrue(prototype.defineInferredProperty(\"inferred1\", STRING_TYPE,\n        null));\n    assertTrue(prototype.defineInferredProperty(\"inferred1\", NUMBER_TYPE,\n        null));\n    assertTypeEquals(\n        createUnionType(NUMBER_TYPE, STRING_TYPE),\n        instance.getPropertyType(\"inferred1\"));\n\n    // Test inferring different types on different objects.\n    assertTrue(prototype.defineInferredProperty(\"inferred2\", STRING_TYPE,\n        null));\n    assertTrue(instance.defineInferredProperty(\"inferred2\", NUMBER_TYPE,\n        null));\n    assertTypeEquals(\n        createUnionType(NUMBER_TYPE, STRING_TYPE),\n        instance.getPropertyType(\"inferred2\"));\n\n    // Test inferring on the supertype and declaring on the subtype.\n    assertTrue(\n        prototype.defineInferredProperty(\"prop\", STRING_TYPE, null));\n    assertTrue(\n        instance.defineDeclaredProperty(\"prop\", NUMBER_TYPE, null));\n    assertTypeEquals(NUMBER_TYPE, instance.getPropertyType(\"prop\"));\n    assertTypeEquals(STRING_TYPE, prototype.getPropertyType(\"prop\"));\n  }\n",
        "begin_line": 3733,
        "end_line": 3773,
        "comment": "\n   * Tests how properties are defined.\n   ",
        "child_ranges": [
            "(line 3734,col 5)-(line 3734,col 50)",
            "(line 3735,col 5)-(line 3735,col 52)",
            "(line 3737,col 5)-(line 3737,col 65)",
            "(line 3740,col 5)-(line 3741,col 73)",
            "(line 3742,col 5)-(line 3743,col 73)",
            "(line 3744,col 5)-(line 3745,col 72)",
            "(line 3746,col 5)-(line 3746,col 72)",
            "(line 3749,col 5)-(line 3750,col 15)",
            "(line 3751,col 5)-(line 3752,col 15)",
            "(line 3753,col 5)-(line 3755,col 47)",
            "(line 3758,col 5)-(line 3759,col 15)",
            "(line 3760,col 5)-(line 3761,col 15)",
            "(line 3762,col 5)-(line 3764,col 47)",
            "(line 3767,col 5)-(line 3768,col 69)",
            "(line 3769,col 5)-(line 3770,col 68)",
            "(line 3771,col 5)-(line 3771,col 68)",
            "(line 3772,col 5)-(line 3772,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testObjectTypePropertiesCountWithShadowing()",
        "snippet": "  public void testObjectTypePropertiesCountWithShadowing() {\n    ObjectType sup = registry.createAnonymousObjectType();\n    int nativeProperties = sup.getPropertiesCount();\n\n    sup.defineDeclaredProperty(\"a\", OBJECT_TYPE, null);\n    assertEquals(nativeProperties + 1, sup.getPropertiesCount());\n\n    ObjectType sub = registry.createObjectType(sup);\n    sub.defineDeclaredProperty(\"a\", OBJECT_TYPE, null);\n    assertEquals(nativeProperties + 1, sub.getPropertiesCount());\n  }\n",
        "begin_line": 3778,
        "end_line": 3788,
        "comment": "\n   * Tests that properties are correctly counted even when shadowing occurs.\n   ",
        "child_ranges": [
            "(line 3779,col 5)-(line 3779,col 58)",
            "(line 3780,col 5)-(line 3780,col 52)",
            "(line 3782,col 5)-(line 3782,col 55)",
            "(line 3783,col 5)-(line 3783,col 65)",
            "(line 3785,col 5)-(line 3785,col 52)",
            "(line 3786,col 5)-(line 3786,col 55)",
            "(line 3787,col 5)-(line 3787,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNamedGoogBar()",
        "snippet": "  public void testNamedGoogBar() throws Exception {\n    // isXxx\n    assertFalse(namedGoogBar.isFunctionPrototypeType());\n    assertTrue(namedGoogBar.getImplicitPrototype().isFunctionPrototypeType());\n\n    // canAssignTo\n    assertTrue(namedGoogBar.canAssignTo(ALL_TYPE));\n    assertFalse(namedGoogBar.canAssignTo(STRING_OBJECT_TYPE));\n    assertFalse(namedGoogBar.canAssignTo(NUMBER_TYPE));\n    assertFalse(namedGoogBar.canAssignTo(functionType));\n    assertFalse(namedGoogBar.canAssignTo(NULL_TYPE));\n    assertTrue(namedGoogBar.canAssignTo(OBJECT_TYPE));\n    assertFalse(namedGoogBar.canAssignTo(DATE_TYPE));\n    assertTrue(namedGoogBar.canAssignTo(namedGoogBar));\n    assertTrue(namedGoogBar.canAssignTo(unresolvedNamedType));\n    assertFalse(namedGoogBar.canAssignTo(REGEXP_TYPE));\n    assertFalse(namedGoogBar.canAssignTo(ARRAY_TYPE));\n\n    // autoboxesTo\n    assertNull(namedGoogBar.autoboxesTo());\n\n    // properties\n    assertTypeEquals(DATE_TYPE, namedGoogBar.getPropertyType(\"date\"));\n\n    assertFalse(namedGoogBar.isNativeObjectType());\n    assertFalse(namedGoogBar.getImplicitPrototype().isNativeObjectType());\n\n    JSType resolvedNamedGoogBar = Asserts.assertValidResolve(namedGoogBar);\n    assertNotSame(resolvedNamedGoogBar, namedGoogBar);\n    assertSame(resolvedNamedGoogBar, googBar.getInstanceType());\n  }\n",
        "begin_line": 3793,
        "end_line": 3823,
        "comment": "\n   * Tests the named type goog.Bar.\n   ",
        "child_ranges": [
            "(line 3795,col 5)-(line 3795,col 56)",
            "(line 3796,col 5)-(line 3796,col 78)",
            "(line 3799,col 5)-(line 3799,col 51)",
            "(line 3800,col 5)-(line 3800,col 62)",
            "(line 3801,col 5)-(line 3801,col 55)",
            "(line 3802,col 5)-(line 3802,col 56)",
            "(line 3803,col 5)-(line 3803,col 53)",
            "(line 3804,col 5)-(line 3804,col 54)",
            "(line 3805,col 5)-(line 3805,col 53)",
            "(line 3806,col 5)-(line 3806,col 55)",
            "(line 3807,col 5)-(line 3807,col 62)",
            "(line 3808,col 5)-(line 3808,col 55)",
            "(line 3809,col 5)-(line 3809,col 54)",
            "(line 3812,col 5)-(line 3812,col 43)",
            "(line 3815,col 5)-(line 3815,col 70)",
            "(line 3817,col 5)-(line 3817,col 51)",
            "(line 3818,col 5)-(line 3818,col 74)",
            "(line 3820,col 5)-(line 3820,col 75)",
            "(line 3821,col 5)-(line 3821,col 54)",
            "(line 3822,col 5)-(line 3822,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testPrototypeChaining()",
        "snippet": "  public void testPrototypeChaining() throws Exception {\n    // equals\n    assertTypeEquals(\n        ARRAY_TYPE.getImplicitPrototype().getImplicitPrototype(),\n        OBJECT_TYPE);\n    assertTypeEquals(\n        BOOLEAN_OBJECT_TYPE.getImplicitPrototype().\n        getImplicitPrototype(), OBJECT_TYPE);\n    assertTypeEquals(\n        DATE_TYPE.getImplicitPrototype().getImplicitPrototype(),\n        OBJECT_TYPE);\n    assertTypeEquals(\n        ERROR_TYPE.getImplicitPrototype().getImplicitPrototype(),\n        OBJECT_TYPE);\n    assertTypeEquals(\n        EVAL_ERROR_TYPE.getImplicitPrototype().getImplicitPrototype(),\n        ERROR_TYPE);\n    assertTypeEquals(\n        NUMBER_OBJECT_TYPE.getImplicitPrototype().\n        getImplicitPrototype(), OBJECT_TYPE);\n    assertTypeEquals(\n        URI_ERROR_TYPE.getImplicitPrototype().getImplicitPrototype(),\n        ERROR_TYPE);\n    assertTypeEquals(\n        RANGE_ERROR_TYPE.getImplicitPrototype().getImplicitPrototype(),\n        ERROR_TYPE);\n    assertTypeEquals(\n        REFERENCE_ERROR_TYPE.getImplicitPrototype().\n        getImplicitPrototype(), ERROR_TYPE);\n    assertTypeEquals(\n        STRING_OBJECT_TYPE.getImplicitPrototype().\n        getImplicitPrototype(), OBJECT_TYPE);\n    assertTypeEquals(\n        REGEXP_TYPE.getImplicitPrototype().getImplicitPrototype(),\n        OBJECT_TYPE);\n    assertTypeEquals(\n        SYNTAX_ERROR_TYPE.getImplicitPrototype().\n        getImplicitPrototype(), ERROR_TYPE);\n    assertTypeEquals(\n        TYPE_ERROR_TYPE.getImplicitPrototype().\n        getImplicitPrototype(), ERROR_TYPE);\n\n    // not same\n    assertNotSame(EVAL_ERROR_TYPE.getImplicitPrototype(),\n        URI_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(EVAL_ERROR_TYPE.getImplicitPrototype(),\n        RANGE_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(EVAL_ERROR_TYPE.getImplicitPrototype(),\n        REFERENCE_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(EVAL_ERROR_TYPE.getImplicitPrototype(),\n        SYNTAX_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(EVAL_ERROR_TYPE.getImplicitPrototype(),\n        TYPE_ERROR_TYPE.getImplicitPrototype());\n\n    assertNotSame(URI_ERROR_TYPE.getImplicitPrototype(),\n        RANGE_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(URI_ERROR_TYPE.getImplicitPrototype(),\n        REFERENCE_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(URI_ERROR_TYPE.getImplicitPrototype(),\n        SYNTAX_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(URI_ERROR_TYPE.getImplicitPrototype(),\n        TYPE_ERROR_TYPE.getImplicitPrototype());\n\n    assertNotSame(RANGE_ERROR_TYPE.getImplicitPrototype(),\n        REFERENCE_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(RANGE_ERROR_TYPE.getImplicitPrototype(),\n        SYNTAX_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(RANGE_ERROR_TYPE.getImplicitPrototype(),\n        TYPE_ERROR_TYPE.getImplicitPrototype());\n\n    assertNotSame(REFERENCE_ERROR_TYPE.getImplicitPrototype(),\n        SYNTAX_ERROR_TYPE.getImplicitPrototype());\n    assertNotSame(REFERENCE_ERROR_TYPE.getImplicitPrototype(),\n        TYPE_ERROR_TYPE.getImplicitPrototype());\n\n    assertNotSame(SYNTAX_ERROR_TYPE.getImplicitPrototype(),\n        TYPE_ERROR_TYPE.getImplicitPrototype());\n  }\n",
        "begin_line": 3828,
        "end_line": 3905,
        "comment": "\n   * Tests the prototype chaining of native objects.\n   ",
        "child_ranges": [
            "(line 3830,col 5)-(line 3832,col 21)",
            "(line 3833,col 5)-(line 3835,col 45)",
            "(line 3836,col 5)-(line 3838,col 21)",
            "(line 3839,col 5)-(line 3841,col 21)",
            "(line 3842,col 5)-(line 3844,col 20)",
            "(line 3845,col 5)-(line 3847,col 45)",
            "(line 3848,col 5)-(line 3850,col 20)",
            "(line 3851,col 5)-(line 3853,col 20)",
            "(line 3854,col 5)-(line 3856,col 44)",
            "(line 3857,col 5)-(line 3859,col 45)",
            "(line 3860,col 5)-(line 3862,col 21)",
            "(line 3863,col 5)-(line 3865,col 44)",
            "(line 3866,col 5)-(line 3868,col 44)",
            "(line 3871,col 5)-(line 3872,col 47)",
            "(line 3873,col 5)-(line 3874,col 49)",
            "(line 3875,col 5)-(line 3876,col 53)",
            "(line 3877,col 5)-(line 3878,col 50)",
            "(line 3879,col 5)-(line 3880,col 48)",
            "(line 3882,col 5)-(line 3883,col 49)",
            "(line 3884,col 5)-(line 3885,col 53)",
            "(line 3886,col 5)-(line 3887,col 50)",
            "(line 3888,col 5)-(line 3889,col 48)",
            "(line 3891,col 5)-(line 3892,col 53)",
            "(line 3893,col 5)-(line 3894,col 50)",
            "(line 3895,col 5)-(line 3896,col 48)",
            "(line 3898,col 5)-(line 3899,col 50)",
            "(line 3900,col 5)-(line 3901,col 48)",
            "(line 3903,col 5)-(line 3904,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testInstanceFunctionChaining()",
        "snippet": "  public void testInstanceFunctionChaining() throws Exception {\n    // Array\n    assertTypeEquals(\n        ARRAY_FUNCTION_TYPE, ARRAY_TYPE.getConstructor());\n\n    // Boolean\n    assertTypeEquals(\n        BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_TYPE.getConstructor());\n\n    // Date\n    assertTypeEquals(\n        DATE_FUNCTION_TYPE, DATE_TYPE.getConstructor());\n\n    // Error\n    assertTypeEquals(\n        ERROR_FUNCTION_TYPE, ERROR_TYPE.getConstructor());\n\n    // EvalError\n    assertTypeEquals(\n        EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_TYPE.getConstructor());\n\n    // Number\n    assertTypeEquals(\n        NUMBER_OBJECT_FUNCTION_TYPE,\n        NUMBER_OBJECT_TYPE.getConstructor());\n\n    // Object\n    assertTypeEquals(\n        OBJECT_FUNCTION_TYPE, OBJECT_TYPE.getConstructor());\n\n    // RangeError\n    assertTypeEquals(\n        RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_TYPE.getConstructor());\n\n    // ReferenceError\n    assertTypeEquals(\n        REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_TYPE.getConstructor());\n\n    // RegExp\n    assertTypeEquals(REGEXP_FUNCTION_TYPE, REGEXP_TYPE.getConstructor());\n\n    // String\n    assertTypeEquals(\n        STRING_OBJECT_FUNCTION_TYPE,\n        STRING_OBJECT_TYPE.getConstructor());\n\n    // SyntaxError\n    assertTypeEquals(\n        SYNTAX_ERROR_FUNCTION_TYPE,\n        SYNTAX_ERROR_TYPE.getConstructor());\n\n    // TypeError\n    assertTypeEquals(\n        TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_TYPE.getConstructor());\n\n    // URIError\n    assertTypeEquals(\n        URI_ERROR_FUNCTION_TYPE, URI_ERROR_TYPE.getConstructor());\n  }\n",
        "begin_line": 3911,
        "end_line": 3971,
        "comment": "\n   * Tests that function instances have their constructor pointer back at the\n   * function that created them.\n   ",
        "child_ranges": [
            "(line 3913,col 5)-(line 3914,col 58)",
            "(line 3917,col 5)-(line 3919,col 46)",
            "(line 3922,col 5)-(line 3923,col 56)",
            "(line 3926,col 5)-(line 3927,col 58)",
            "(line 3930,col 5)-(line 3931,col 68)",
            "(line 3934,col 5)-(line 3936,col 45)",
            "(line 3939,col 5)-(line 3940,col 60)",
            "(line 3943,col 5)-(line 3944,col 70)",
            "(line 3947,col 5)-(line 3949,col 47)",
            "(line 3952,col 5)-(line 3952,col 73)",
            "(line 3955,col 5)-(line 3957,col 45)",
            "(line 3960,col 5)-(line 3962,col 44)",
            "(line 3965,col 5)-(line 3966,col 68)",
            "(line 3969,col 5)-(line 3970,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testCanTestForEqualityWithCornerCases()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testCanTestForEqualityWithCornerCases() {\n    // null == undefined is always true\n    assertCannotTestForEqualityWith(NULL_TYPE, VOID_TYPE);\n\n    // (Object,null) == undefined could be true or false\n    UnionType nullableObject =\n        (UnionType) createUnionType(OBJECT_TYPE, NULL_TYPE);\n    assertCanTestForEqualityWith(nullableObject, VOID_TYPE);\n    assertCanTestForEqualityWith(VOID_TYPE, nullableObject);\n  }\n",
        "begin_line": 3977,
        "end_line": 3987,
        "comment": "\n   * Tests that the method {@link JSType#canTestForEqualityWith(JSType)} handles\n   * special corner cases.\n   ",
        "child_ranges": [
            "(line 3980,col 5)-(line 3980,col 58)",
            "(line 3983,col 5)-(line 3984,col 60)",
            "(line 3985,col 5)-(line 3985,col 60)",
            "(line 3986,col 5)-(line 3986,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testTestForEquality()",
        "snippet": "  public void testTestForEquality() {\n    compare(TRUE, NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    compare(UNKNOWN, ALL_TYPE, ALL_TYPE);\n    compare(TRUE, NO_TYPE, NO_TYPE);\n    compare(UNKNOWN, NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n    compare(UNKNOWN, NO_OBJECT_TYPE, NUMBER_TYPE);\n    compare(UNKNOWN, ALL_TYPE, NUMBER_TYPE);\n    compare(UNKNOWN, NO_TYPE, NUMBER_TYPE);\n\n    compare(FALSE, NULL_TYPE, BOOLEAN_TYPE);\n    compare(TRUE, NULL_TYPE, NULL_TYPE);\n    compare(FALSE, NULL_TYPE, NUMBER_TYPE);\n    compare(FALSE, NULL_TYPE, OBJECT_TYPE);\n    compare(FALSE, NULL_TYPE, STRING_TYPE);\n    compare(TRUE, NULL_TYPE, VOID_TYPE);\n    compare(UNKNOWN, NULL_TYPE, createUnionType(UNKNOWN_TYPE, VOID_TYPE));\n    compare(UNKNOWN, NULL_TYPE, createUnionType(OBJECT_TYPE, VOID_TYPE));\n    compare(UNKNOWN, NULL_TYPE, unresolvedNamedType);\n    compare(UNKNOWN,\n        NULL_TYPE, createUnionType(unresolvedNamedType, DATE_TYPE));\n\n    compare(FALSE, VOID_TYPE, REGEXP_TYPE);\n    compare(TRUE, VOID_TYPE, VOID_TYPE);\n    compare(UNKNOWN, VOID_TYPE, createUnionType(REGEXP_TYPE, VOID_TYPE));\n\n    compare(UNKNOWN, NUMBER_TYPE, BOOLEAN_TYPE);\n    compare(UNKNOWN, NUMBER_TYPE, NUMBER_TYPE);\n    compare(UNKNOWN, NUMBER_TYPE, OBJECT_TYPE);\n\n    compare(UNKNOWN, ARRAY_TYPE, BOOLEAN_TYPE);\n    compare(UNKNOWN, OBJECT_TYPE, BOOLEAN_TYPE);\n    compare(UNKNOWN, OBJECT_TYPE, STRING_TYPE);\n\n    compare(UNKNOWN, STRING_TYPE, STRING_TYPE);\n\n    compare(UNKNOWN, STRING_TYPE, BOOLEAN_TYPE);\n    compare(UNKNOWN, STRING_TYPE, NUMBER_TYPE);\n    compare(FALSE, STRING_TYPE, VOID_TYPE);\n    compare(FALSE, STRING_TYPE, NULL_TYPE);\n    compare(FALSE, STRING_TYPE, createUnionType(NULL_TYPE, VOID_TYPE));\n\n    compare(UNKNOWN, UNKNOWN_TYPE, BOOLEAN_TYPE);\n    compare(UNKNOWN, UNKNOWN_TYPE, NULL_TYPE);\n    compare(UNKNOWN, UNKNOWN_TYPE, VOID_TYPE);\n\n    compare(FALSE, U2U_CONSTRUCTOR_TYPE, BOOLEAN_TYPE);\n    compare(FALSE, U2U_CONSTRUCTOR_TYPE, NUMBER_TYPE);\n    compare(FALSE, U2U_CONSTRUCTOR_TYPE, STRING_TYPE);\n    compare(FALSE, U2U_CONSTRUCTOR_TYPE, VOID_TYPE);\n    compare(FALSE, U2U_CONSTRUCTOR_TYPE, NULL_TYPE);\n    compare(UNKNOWN, U2U_CONSTRUCTOR_TYPE, OBJECT_TYPE);\n    compare(UNKNOWN, U2U_CONSTRUCTOR_TYPE, ALL_TYPE);\n\n    compare(UNKNOWN, NULL_TYPE, subclassOfUnresolvedNamedType);\n\n    JSType functionAndNull = createUnionType(NULL_TYPE, dateMethod);\n    compare(UNKNOWN, functionAndNull, dateMethod);\n\n    compare(UNKNOWN, NULL_TYPE, NO_TYPE);\n    compare(UNKNOWN, VOID_TYPE, NO_TYPE);\n    compare(UNKNOWN, NULL_TYPE, unresolvedNamedType);\n    compare(UNKNOWN, VOID_TYPE, unresolvedNamedType);\n    compare(TRUE, NO_TYPE, NO_TYPE);\n  }\n",
        "begin_line": 3992,
        "end_line": 4055,
        "comment": "\n   * Tests the {@link JSType#testForEquality(JSType)} method.\n   ",
        "child_ranges": [
            "(line 3993,col 5)-(line 3993,col 50)",
            "(line 3994,col 5)-(line 3994,col 41)",
            "(line 3995,col 5)-(line 3995,col 36)",
            "(line 3996,col 5)-(line 3996,col 57)",
            "(line 3997,col 5)-(line 3997,col 50)",
            "(line 3998,col 5)-(line 3998,col 44)",
            "(line 3999,col 5)-(line 3999,col 43)",
            "(line 4001,col 5)-(line 4001,col 44)",
            "(line 4002,col 5)-(line 4002,col 40)",
            "(line 4003,col 5)-(line 4003,col 43)",
            "(line 4004,col 5)-(line 4004,col 43)",
            "(line 4005,col 5)-(line 4005,col 43)",
            "(line 4006,col 5)-(line 4006,col 40)",
            "(line 4007,col 5)-(line 4007,col 74)",
            "(line 4008,col 5)-(line 4008,col 73)",
            "(line 4009,col 5)-(line 4009,col 53)",
            "(line 4010,col 5)-(line 4011,col 68)",
            "(line 4013,col 5)-(line 4013,col 43)",
            "(line 4014,col 5)-(line 4014,col 40)",
            "(line 4015,col 5)-(line 4015,col 73)",
            "(line 4017,col 5)-(line 4017,col 48)",
            "(line 4018,col 5)-(line 4018,col 47)",
            "(line 4019,col 5)-(line 4019,col 47)",
            "(line 4021,col 5)-(line 4021,col 47)",
            "(line 4022,col 5)-(line 4022,col 48)",
            "(line 4023,col 5)-(line 4023,col 47)",
            "(line 4025,col 5)-(line 4025,col 47)",
            "(line 4027,col 5)-(line 4027,col 48)",
            "(line 4028,col 5)-(line 4028,col 47)",
            "(line 4029,col 5)-(line 4029,col 43)",
            "(line 4030,col 5)-(line 4030,col 43)",
            "(line 4031,col 5)-(line 4031,col 71)",
            "(line 4033,col 5)-(line 4033,col 49)",
            "(line 4034,col 5)-(line 4034,col 46)",
            "(line 4035,col 5)-(line 4035,col 46)",
            "(line 4037,col 5)-(line 4037,col 55)",
            "(line 4038,col 5)-(line 4038,col 54)",
            "(line 4039,col 5)-(line 4039,col 54)",
            "(line 4040,col 5)-(line 4040,col 52)",
            "(line 4041,col 5)-(line 4041,col 52)",
            "(line 4042,col 5)-(line 4042,col 56)",
            "(line 4043,col 5)-(line 4043,col 53)",
            "(line 4045,col 5)-(line 4045,col 63)",
            "(line 4047,col 5)-(line 4047,col 68)",
            "(line 4048,col 5)-(line 4048,col 50)",
            "(line 4050,col 5)-(line 4050,col 41)",
            "(line 4051,col 5)-(line 4051,col 41)",
            "(line 4052,col 5)-(line 4052,col 53)",
            "(line 4053,col 5)-(line 4053,col 53)",
            "(line 4054,col 5)-(line 4054,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.compare(com.google.javascript.rhino.jstype.TernaryValue, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void compare(TernaryValue r, JSType t1, JSType t2) {\n    assertEquals(r, t1.testForEquality(t2));\n    assertEquals(r, t2.testForEquality(t1));\n  }\n",
        "begin_line": 4057,
        "end_line": 4060,
        "comment": "",
        "child_ranges": [
            "(line 4058,col 5)-(line 4058,col 44)",
            "(line 4059,col 5)-(line 4059,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertCanTestForEqualityWith(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assertCanTestForEqualityWith(JSType t1, JSType t2) {\n    assertTrue(t1.canTestForEqualityWith(t2));\n    assertTrue(t2.canTestForEqualityWith(t1));\n  }\n",
        "begin_line": 4062,
        "end_line": 4065,
        "comment": "",
        "child_ranges": [
            "(line 4063,col 5)-(line 4063,col 46)",
            "(line 4064,col 5)-(line 4064,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertCannotTestForEqualityWith(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assertCannotTestForEqualityWith(JSType t1, JSType t2) {\n    assertFalse(t1.canTestForEqualityWith(t2));\n    assertFalse(t2.canTestForEqualityWith(t1));\n  }\n",
        "begin_line": 4067,
        "end_line": 4070,
        "comment": "",
        "child_ranges": [
            "(line 4068,col 5)-(line 4068,col 47)",
            "(line 4069,col 5)-(line 4069,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingSimpleTypes()",
        "snippet": "  public void testSubtypingSimpleTypes() throws Exception {\n    // Any\n    assertTrue(NO_TYPE.isSubtype(NO_TYPE));\n    assertTrue(NO_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertTrue(NO_TYPE.isSubtype(ARRAY_TYPE));\n    assertTrue(NO_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertTrue(NO_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_TYPE.isSubtype(DATE_TYPE));\n    assertTrue(NO_TYPE.isSubtype(ERROR_TYPE));\n    assertTrue(NO_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertTrue(NO_TYPE.isSubtype(functionType));\n    assertTrue(NO_TYPE.isSubtype(NULL_TYPE));\n    assertTrue(NO_TYPE.isSubtype(NUMBER_TYPE));\n    assertTrue(NO_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_TYPE.isSubtype(OBJECT_TYPE));\n    assertTrue(NO_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertTrue(NO_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertTrue(NO_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_TYPE.isSubtype(REGEXP_TYPE));\n    assertTrue(NO_TYPE.isSubtype(STRING_TYPE));\n    assertTrue(NO_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertTrue(NO_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(NO_TYPE.isSubtype(ALL_TYPE));\n    assertTrue(NO_TYPE.isSubtype(VOID_TYPE));\n\n    // AnyObject\n    assertFalse(NO_OBJECT_TYPE.isSubtype(NO_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(NO_OBJECT_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(DATE_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(functionType));\n    assertFalse(NO_OBJECT_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(NO_OBJECT_TYPE.isSubtype(NUMBER_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(NO_OBJECT_TYPE.isSubtype(STRING_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(NO_OBJECT_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(NO_OBJECT_TYPE.isSubtype(VOID_TYPE));\n\n    // Array\n    assertFalse(ARRAY_TYPE.isSubtype(NO_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertTrue(ARRAY_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(DATE_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(functionType));\n    assertFalse(ARRAY_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(NUMBER_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertTrue(ARRAY_TYPE.isSubtype(OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(STRING_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(ARRAY_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(ARRAY_TYPE.isSubtype(VOID_TYPE));\n\n    // boolean\n    assertFalse(BOOLEAN_TYPE.isSubtype(NO_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(ARRAY_TYPE));\n    assertTrue(BOOLEAN_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(DATE_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(functionType));\n    assertFalse(BOOLEAN_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(NUMBER_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(STRING_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(BOOLEAN_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(BOOLEAN_TYPE.isSubtype(VOID_TYPE));\n\n    // Boolean\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NO_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(DATE_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(functionType));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NUMBER_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(STRING_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(VOID_TYPE));\n\n    // Date\n    assertFalse(DATE_TYPE.isSubtype(NO_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertTrue(DATE_TYPE.isSubtype(DATE_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(ERROR_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(functionType));\n    assertFalse(DATE_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(NUMBER_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertTrue(DATE_TYPE.isSubtype(OBJECT_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(STRING_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(DATE_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(DATE_TYPE.isSubtype(VOID_TYPE));\n\n    // Error\n    assertFalse(ERROR_TYPE.isSubtype(NO_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(DATE_TYPE));\n    assertTrue(ERROR_TYPE.isSubtype(ERROR_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(functionType));\n    assertFalse(ERROR_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(NUMBER_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertTrue(ERROR_TYPE.isSubtype(OBJECT_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(STRING_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(ERROR_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(VOID_TYPE));\n\n    // EvalError\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(NO_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(DATE_TYPE));\n    assertTrue(EVAL_ERROR_TYPE.isSubtype(ERROR_TYPE));\n    assertTrue(EVAL_ERROR_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(functionType));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(NUMBER_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertTrue(EVAL_ERROR_TYPE.isSubtype(OBJECT_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(STRING_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(EVAL_ERROR_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(EVAL_ERROR_TYPE.isSubtype(VOID_TYPE));\n\n    // RangeError\n    assertTrue(RANGE_ERROR_TYPE.isSubtype(ERROR_TYPE));\n\n    // ReferenceError\n    assertTrue(REFERENCE_ERROR_TYPE.isSubtype(ERROR_TYPE));\n\n    // TypeError\n    assertTrue(TYPE_ERROR_TYPE.isSubtype(ERROR_TYPE));\n\n    // UriError\n    assertTrue(URI_ERROR_TYPE.isSubtype(ERROR_TYPE));\n\n    // Unknown\n    assertFalse(ALL_TYPE.isSubtype(NO_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(NO_OBJECT_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(ARRAY_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(BOOLEAN_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));\n    assertFalse(ERROR_TYPE.isSubtype(DATE_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(ERROR_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(EVAL_ERROR_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(functionType));\n    assertFalse(ALL_TYPE.isSubtype(NULL_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(NUMBER_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(NUMBER_OBJECT_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(OBJECT_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(URI_ERROR_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(RANGE_ERROR_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(REFERENCE_ERROR_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(REGEXP_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(STRING_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(STRING_OBJECT_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(SYNTAX_ERROR_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(TYPE_ERROR_TYPE));\n    assertTrue(ALL_TYPE.isSubtype(ALL_TYPE));\n    assertFalse(ALL_TYPE.isSubtype(VOID_TYPE));\n  }\n",
        "begin_line": 4075,
        "end_line": 4312,
        "comment": "\n   * Tests the subtyping relationships among simple types.\n   ",
        "child_ranges": [
            "(line 4077,col 5)-(line 4077,col 43)",
            "(line 4078,col 5)-(line 4078,col 50)",
            "(line 4079,col 5)-(line 4079,col 46)",
            "(line 4080,col 5)-(line 4080,col 48)",
            "(line 4081,col 5)-(line 4081,col 55)",
            "(line 4082,col 5)-(line 4082,col 45)",
            "(line 4083,col 5)-(line 4083,col 46)",
            "(line 4084,col 5)-(line 4084,col 51)",
            "(line 4085,col 5)-(line 4085,col 48)",
            "(line 4086,col 5)-(line 4086,col 45)",
            "(line 4087,col 5)-(line 4087,col 47)",
            "(line 4088,col 5)-(line 4088,col 54)",
            "(line 4089,col 5)-(line 4089,col 47)",
            "(line 4090,col 5)-(line 4090,col 50)",
            "(line 4091,col 5)-(line 4091,col 52)",
            "(line 4092,col 5)-(line 4092,col 56)",
            "(line 4093,col 5)-(line 4093,col 47)",
            "(line 4094,col 5)-(line 4094,col 47)",
            "(line 4095,col 5)-(line 4095,col 54)",
            "(line 4096,col 5)-(line 4096,col 53)",
            "(line 4097,col 5)-(line 4097,col 51)",
            "(line 4098,col 5)-(line 4098,col 44)",
            "(line 4099,col 5)-(line 4099,col 45)",
            "(line 4102,col 5)-(line 4102,col 51)",
            "(line 4103,col 5)-(line 4103,col 57)",
            "(line 4104,col 5)-(line 4104,col 53)",
            "(line 4105,col 5)-(line 4105,col 56)",
            "(line 4106,col 5)-(line 4106,col 62)",
            "(line 4107,col 5)-(line 4107,col 52)",
            "(line 4108,col 5)-(line 4108,col 53)",
            "(line 4109,col 5)-(line 4109,col 58)",
            "(line 4110,col 5)-(line 4110,col 55)",
            "(line 4111,col 5)-(line 4111,col 53)",
            "(line 4112,col 5)-(line 4112,col 55)",
            "(line 4113,col 5)-(line 4113,col 61)",
            "(line 4114,col 5)-(line 4114,col 54)",
            "(line 4115,col 5)-(line 4115,col 57)",
            "(line 4116,col 5)-(line 4116,col 59)",
            "(line 4117,col 5)-(line 4117,col 63)",
            "(line 4118,col 5)-(line 4118,col 54)",
            "(line 4119,col 5)-(line 4119,col 55)",
            "(line 4120,col 5)-(line 4120,col 61)",
            "(line 4121,col 5)-(line 4121,col 60)",
            "(line 4122,col 5)-(line 4122,col 58)",
            "(line 4123,col 5)-(line 4123,col 51)",
            "(line 4124,col 5)-(line 4124,col 53)",
            "(line 4127,col 5)-(line 4127,col 47)",
            "(line 4128,col 5)-(line 4128,col 54)",
            "(line 4129,col 5)-(line 4129,col 49)",
            "(line 4130,col 5)-(line 4130,col 52)",
            "(line 4131,col 5)-(line 4131,col 59)",
            "(line 4132,col 5)-(line 4132,col 49)",
            "(line 4133,col 5)-(line 4133,col 50)",
            "(line 4134,col 5)-(line 4134,col 55)",
            "(line 4135,col 5)-(line 4135,col 52)",
            "(line 4136,col 5)-(line 4136,col 49)",
            "(line 4137,col 5)-(line 4137,col 51)",
            "(line 4138,col 5)-(line 4138,col 58)",
            "(line 4139,col 5)-(line 4139,col 50)",
            "(line 4140,col 5)-(line 4140,col 54)",
            "(line 4141,col 5)-(line 4141,col 56)",
            "(line 4142,col 5)-(line 4142,col 60)",
            "(line 4143,col 5)-(line 4143,col 51)",
            "(line 4144,col 5)-(line 4144,col 51)",
            "(line 4145,col 5)-(line 4145,col 58)",
            "(line 4146,col 5)-(line 4146,col 57)",
            "(line 4147,col 5)-(line 4147,col 55)",
            "(line 4148,col 5)-(line 4148,col 47)",
            "(line 4149,col 5)-(line 4149,col 49)",
            "(line 4152,col 5)-(line 4152,col 49)",
            "(line 4153,col 5)-(line 4153,col 56)",
            "(line 4154,col 5)-(line 4154,col 52)",
            "(line 4155,col 5)-(line 4155,col 53)",
            "(line 4156,col 5)-(line 4156,col 61)",
            "(line 4157,col 5)-(line 4157,col 51)",
            "(line 4158,col 5)-(line 4158,col 52)",
            "(line 4159,col 5)-(line 4159,col 57)",
            "(line 4160,col 5)-(line 4160,col 54)",
            "(line 4161,col 5)-(line 4161,col 51)",
            "(line 4162,col 5)-(line 4162,col 53)",
            "(line 4163,col 5)-(line 4163,col 60)",
            "(line 4164,col 5)-(line 4164,col 53)",
            "(line 4165,col 5)-(line 4165,col 56)",
            "(line 4166,col 5)-(line 4166,col 58)",
            "(line 4167,col 5)-(line 4167,col 62)",
            "(line 4168,col 5)-(line 4168,col 53)",
            "(line 4169,col 5)-(line 4169,col 53)",
            "(line 4170,col 5)-(line 4170,col 60)",
            "(line 4171,col 5)-(line 4171,col 59)",
            "(line 4172,col 5)-(line 4172,col 57)",
            "(line 4173,col 5)-(line 4173,col 49)",
            "(line 4174,col 5)-(line 4174,col 51)",
            "(line 4177,col 5)-(line 4177,col 56)",
            "(line 4178,col 5)-(line 4178,col 63)",
            "(line 4179,col 5)-(line 4179,col 59)",
            "(line 4180,col 5)-(line 4180,col 61)",
            "(line 4181,col 5)-(line 4181,col 67)",
            "(line 4182,col 5)-(line 4182,col 58)",
            "(line 4183,col 5)-(line 4183,col 59)",
            "(line 4184,col 5)-(line 4184,col 64)",
            "(line 4185,col 5)-(line 4185,col 61)",
            "(line 4186,col 5)-(line 4186,col 58)",
            "(line 4187,col 5)-(line 4187,col 60)",
            "(line 4188,col 5)-(line 4188,col 67)",
            "(line 4189,col 5)-(line 4189,col 59)",
            "(line 4190,col 5)-(line 4190,col 63)",
            "(line 4191,col 5)-(line 4191,col 65)",
            "(line 4192,col 5)-(line 4192,col 69)",
            "(line 4193,col 5)-(line 4193,col 60)",
            "(line 4194,col 5)-(line 4194,col 60)",
            "(line 4195,col 5)-(line 4195,col 67)",
            "(line 4196,col 5)-(line 4196,col 66)",
            "(line 4197,col 5)-(line 4197,col 64)",
            "(line 4198,col 5)-(line 4198,col 56)",
            "(line 4199,col 5)-(line 4199,col 58)",
            "(line 4202,col 5)-(line 4202,col 46)",
            "(line 4203,col 5)-(line 4203,col 53)",
            "(line 4204,col 5)-(line 4204,col 49)",
            "(line 4205,col 5)-(line 4205,col 51)",
            "(line 4206,col 5)-(line 4206,col 58)",
            "(line 4207,col 5)-(line 4207,col 47)",
            "(line 4208,col 5)-(line 4208,col 49)",
            "(line 4209,col 5)-(line 4209,col 54)",
            "(line 4210,col 5)-(line 4210,col 51)",
            "(line 4211,col 5)-(line 4211,col 48)",
            "(line 4212,col 5)-(line 4212,col 50)",
            "(line 4213,col 5)-(line 4213,col 57)",
            "(line 4214,col 5)-(line 4214,col 49)",
            "(line 4215,col 5)-(line 4215,col 53)",
            "(line 4216,col 5)-(line 4216,col 55)",
            "(line 4217,col 5)-(line 4217,col 59)",
            "(line 4218,col 5)-(line 4218,col 50)",
            "(line 4219,col 5)-(line 4219,col 50)",
            "(line 4220,col 5)-(line 4220,col 57)",
            "(line 4221,col 5)-(line 4221,col 56)",
            "(line 4222,col 5)-(line 4222,col 54)",
            "(line 4223,col 5)-(line 4223,col 46)",
            "(line 4224,col 5)-(line 4224,col 48)",
            "(line 4227,col 5)-(line 4227,col 47)",
            "(line 4228,col 5)-(line 4228,col 54)",
            "(line 4229,col 5)-(line 4229,col 50)",
            "(line 4230,col 5)-(line 4230,col 52)",
            "(line 4231,col 5)-(line 4231,col 59)",
            "(line 4232,col 5)-(line 4232,col 49)",
            "(line 4233,col 5)-(line 4233,col 49)",
            "(line 4234,col 5)-(line 4234,col 55)",
            "(line 4235,col 5)-(line 4235,col 52)",
            "(line 4236,col 5)-(line 4236,col 49)",
            "(line 4237,col 5)-(line 4237,col 51)",
            "(line 4238,col 5)-(line 4238,col 58)",
            "(line 4239,col 5)-(line 4239,col 50)",
            "(line 4240,col 5)-(line 4240,col 54)",
            "(line 4241,col 5)-(line 4241,col 56)",
            "(line 4242,col 5)-(line 4242,col 60)",
            "(line 4243,col 5)-(line 4243,col 51)",
            "(line 4244,col 5)-(line 4244,col 51)",
            "(line 4245,col 5)-(line 4245,col 58)",
            "(line 4246,col 5)-(line 4246,col 57)",
            "(line 4247,col 5)-(line 4247,col 55)",
            "(line 4248,col 5)-(line 4248,col 47)",
            "(line 4249,col 5)-(line 4249,col 49)",
            "(line 4252,col 5)-(line 4252,col 52)",
            "(line 4253,col 5)-(line 4253,col 59)",
            "(line 4254,col 5)-(line 4254,col 55)",
            "(line 4255,col 5)-(line 4255,col 57)",
            "(line 4256,col 5)-(line 4256,col 64)",
            "(line 4257,col 5)-(line 4257,col 49)",
            "(line 4258,col 5)-(line 4258,col 54)",
            "(line 4259,col 5)-(line 4259,col 59)",
            "(line 4260,col 5)-(line 4260,col 57)",
            "(line 4261,col 5)-(line 4261,col 54)",
            "(line 4262,col 5)-(line 4262,col 56)",
            "(line 4263,col 5)-(line 4263,col 63)",
            "(line 4264,col 5)-(line 4264,col 55)",
            "(line 4265,col 5)-(line 4265,col 59)",
            "(line 4266,col 5)-(line 4266,col 61)",
            "(line 4267,col 5)-(line 4267,col 65)",
            "(line 4268,col 5)-(line 4268,col 56)",
            "(line 4269,col 5)-(line 4269,col 56)",
            "(line 4270,col 5)-(line 4270,col 63)",
            "(line 4271,col 5)-(line 4271,col 62)",
            "(line 4272,col 5)-(line 4272,col 60)",
            "(line 4273,col 5)-(line 4273,col 52)",
            "(line 4274,col 5)-(line 4274,col 54)",
            "(line 4277,col 5)-(line 4277,col 55)",
            "(line 4280,col 5)-(line 4280,col 59)",
            "(line 4283,col 5)-(line 4283,col 54)",
            "(line 4286,col 5)-(line 4286,col 53)",
            "(line 4289,col 5)-(line 4289,col 45)",
            "(line 4290,col 5)-(line 4290,col 52)",
            "(line 4291,col 5)-(line 4291,col 48)",
            "(line 4292,col 5)-(line 4292,col 50)",
            "(line 4293,col 5)-(line 4293,col 57)",
            "(line 4294,col 5)-(line 4294,col 49)",
            "(line 4295,col 5)-(line 4295,col 48)",
            "(line 4296,col 5)-(line 4296,col 53)",
            "(line 4297,col 5)-(line 4297,col 50)",
            "(line 4298,col 5)-(line 4298,col 47)",
            "(line 4299,col 5)-(line 4299,col 49)",
            "(line 4300,col 5)-(line 4300,col 56)",
            "(line 4301,col 5)-(line 4301,col 49)",
            "(line 4302,col 5)-(line 4302,col 52)",
            "(line 4303,col 5)-(line 4303,col 54)",
            "(line 4304,col 5)-(line 4304,col 58)",
            "(line 4305,col 5)-(line 4305,col 49)",
            "(line 4306,col 5)-(line 4306,col 49)",
            "(line 4307,col 5)-(line 4307,col 56)",
            "(line 4308,col 5)-(line 4308,col 55)",
            "(line 4309,col 5)-(line 4309,col 53)",
            "(line 4310,col 5)-(line 4310,col 45)",
            "(line 4311,col 5)-(line 4311,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingObjectTopOfObjects()",
        "snippet": "  public void testSubtypingObjectTopOfObjects() throws Exception {\n    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_TYPE));\n    assertTrue(createUnionType(DATE_TYPE, REGEXP_TYPE).isSubtype(OBJECT_TYPE));\n    assertTrue(createUnionType(OBJECT_TYPE, NO_OBJECT_TYPE).\n        isSubtype(OBJECT_TYPE));\n    assertTrue(functionType.isSubtype(OBJECT_TYPE));\n  }\n",
        "begin_line": 4318,
        "end_line": 4324,
        "comment": "\n   * Tests that the Object type is the greatest element (top) of the object\n   * hierarchy.\n   ",
        "child_ranges": [
            "(line 4319,col 5)-(line 4319,col 51)",
            "(line 4320,col 5)-(line 4320,col 79)",
            "(line 4321,col 5)-(line 4322,col 32)",
            "(line 4323,col 5)-(line 4323,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingFunctionPrototypeType()",
        "snippet": "  public void testSubtypingFunctionPrototypeType() throws Exception {\n    FunctionType sub1 = registry.createConstructorType(null, null, null, null);\n    sub1.setPrototypeBasedOn(googBar);\n    FunctionType sub2 = registry.createConstructorType(null, null, null, null);\n    sub2.setPrototypeBasedOn(googBar);\n\n    ObjectType o1 = sub1.getInstanceType();\n    ObjectType o2 = sub2.getInstanceType();\n\n    assertFalse(o1.isSubtype(o2));\n    assertFalse(o1.getImplicitPrototype().isSubtype(o2.getImplicitPrototype()));\n    assertTrue(o1.getImplicitPrototype().isSubtype(googBar));\n    assertTrue(o2.getImplicitPrototype().isSubtype(googBar));\n  }\n",
        "begin_line": 4326,
        "end_line": 4339,
        "comment": "",
        "child_ranges": [
            "(line 4327,col 5)-(line 4327,col 79)",
            "(line 4328,col 5)-(line 4328,col 38)",
            "(line 4329,col 5)-(line 4329,col 79)",
            "(line 4330,col 5)-(line 4330,col 38)",
            "(line 4332,col 5)-(line 4332,col 43)",
            "(line 4333,col 5)-(line 4333,col 43)",
            "(line 4335,col 5)-(line 4335,col 34)",
            "(line 4336,col 5)-(line 4336,col 80)",
            "(line 4337,col 5)-(line 4337,col 61)",
            "(line 4338,col 5)-(line 4338,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingFunctionFixedArgs()",
        "snippet": "  public void testSubtypingFunctionFixedArgs() throws Exception {\n    FunctionType f1 = registry.createFunctionType(OBJECT_TYPE,\n        false, BOOLEAN_TYPE);\n    FunctionType f2 = registry.createFunctionType(STRING_OBJECT_TYPE,\n        false, BOOLEAN_TYPE);\n\n    assertTrue(f1.isSubtype(f1));\n    assertFalse(f1.isSubtype(f2));\n    assertTrue(f2.isSubtype(f1));\n    assertTrue(f2.isSubtype(f2));\n\n    assertTrue(f1.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(f2.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f1));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f2));\n  }\n",
        "begin_line": 4341,
        "end_line": 4356,
        "comment": "",
        "child_ranges": [
            "(line 4342,col 5)-(line 4343,col 29)",
            "(line 4344,col 5)-(line 4345,col 29)",
            "(line 4347,col 5)-(line 4347,col 33)",
            "(line 4348,col 5)-(line 4348,col 34)",
            "(line 4349,col 5)-(line 4349,col 33)",
            "(line 4350,col 5)-(line 4350,col 33)",
            "(line 4352,col 5)-(line 4352,col 51)",
            "(line 4353,col 5)-(line 4353,col 51)",
            "(line 4354,col 5)-(line 4354,col 51)",
            "(line 4355,col 5)-(line 4355,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingFunctionMultipleFixedArgs()",
        "snippet": "  public void testSubtypingFunctionMultipleFixedArgs() throws Exception {\n    FunctionType f1 = registry.createFunctionType(OBJECT_TYPE,\n        false, EVAL_ERROR_TYPE, STRING_TYPE);\n    FunctionType f2 = registry.createFunctionType(STRING_OBJECT_TYPE,\n        false, ERROR_TYPE, ALL_TYPE);\n\n    assertTrue(f1.isSubtype(f1));\n    assertFalse(f1.isSubtype(f2));\n    assertTrue(f2.isSubtype(f1));\n    assertTrue(f2.isSubtype(f2));\n\n    assertTrue(f1.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(f2.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f1));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f2));\n  }\n",
        "begin_line": 4358,
        "end_line": 4373,
        "comment": "",
        "child_ranges": [
            "(line 4359,col 5)-(line 4360,col 45)",
            "(line 4361,col 5)-(line 4362,col 37)",
            "(line 4364,col 5)-(line 4364,col 33)",
            "(line 4365,col 5)-(line 4365,col 34)",
            "(line 4366,col 5)-(line 4366,col 33)",
            "(line 4367,col 5)-(line 4367,col 33)",
            "(line 4369,col 5)-(line 4369,col 51)",
            "(line 4370,col 5)-(line 4370,col 51)",
            "(line 4371,col 5)-(line 4371,col 51)",
            "(line 4372,col 5)-(line 4372,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingFunctionFixedArgsNotMatching()",
        "snippet": "  public void testSubtypingFunctionFixedArgsNotMatching() throws Exception {\n    FunctionType f1 = registry.createFunctionType(OBJECT_TYPE,\n        false, EVAL_ERROR_TYPE);\n    FunctionType f2 = registry.createFunctionType(STRING_OBJECT_TYPE,\n        false, ERROR_TYPE, ALL_TYPE);\n\n    assertTrue(f1.isSubtype(f1));\n    assertFalse(f1.isSubtype(f2));\n    assertTrue(f2.isSubtype(f1));\n    assertTrue(f2.isSubtype(f2));\n\n    assertTrue(f1.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(f2.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f1));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f2));\n  }\n",
        "begin_line": 4375,
        "end_line": 4390,
        "comment": "",
        "child_ranges": [
            "(line 4376,col 5)-(line 4377,col 32)",
            "(line 4378,col 5)-(line 4379,col 37)",
            "(line 4381,col 5)-(line 4381,col 33)",
            "(line 4382,col 5)-(line 4382,col 34)",
            "(line 4383,col 5)-(line 4383,col 33)",
            "(line 4384,col 5)-(line 4384,col 33)",
            "(line 4386,col 5)-(line 4386,col 51)",
            "(line 4387,col 5)-(line 4387,col 51)",
            "(line 4388,col 5)-(line 4388,col 51)",
            "(line 4389,col 5)-(line 4389,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingFunctionVariableArgsOneOnly()",
        "snippet": "  public void testSubtypingFunctionVariableArgsOneOnly() throws Exception {\n    // f1 = (EvalError...) -> Object\n    FunctionType f1 = registry.createFunctionType(OBJECT_TYPE,\n        true, EVAL_ERROR_TYPE);\n    // f2 = (Error, Object) -> String\n    FunctionType f2 = registry.createFunctionType(STRING_OBJECT_TYPE,\n        false, ERROR_TYPE, OBJECT_TYPE);\n\n    assertTrue(f1.isSubtype(f1));\n    assertFalse(f1.isSubtype(f2));\n    assertFalse(f2.isSubtype(f1));\n    assertTrue(f2.isSubtype(f2));\n\n    assertTrue(f1.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(f2.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f1));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f2));\n  }\n",
        "begin_line": 4392,
        "end_line": 4409,
        "comment": "",
        "child_ranges": [
            "(line 4394,col 5)-(line 4395,col 31)",
            "(line 4397,col 5)-(line 4398,col 40)",
            "(line 4400,col 5)-(line 4400,col 33)",
            "(line 4401,col 5)-(line 4401,col 34)",
            "(line 4402,col 5)-(line 4402,col 34)",
            "(line 4403,col 5)-(line 4403,col 33)",
            "(line 4405,col 5)-(line 4405,col 51)",
            "(line 4406,col 5)-(line 4406,col 51)",
            "(line 4407,col 5)-(line 4407,col 51)",
            "(line 4408,col 5)-(line 4408,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingFunctionVariableArgsBoth()",
        "snippet": "  public void testSubtypingFunctionVariableArgsBoth() throws Exception {\n    // f1 = (UriError, EvalError, EvalError...) -> Object\n    FunctionType f1 = registry.createFunctionType(OBJECT_TYPE,\n        true,  URI_ERROR_TYPE, EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    // f2 = (Error, Object, EvalError...) -> String\n    FunctionType f2 = registry.createFunctionType(STRING_OBJECT_TYPE,\n        true, ERROR_TYPE, OBJECT_TYPE, EVAL_ERROR_TYPE);\n\n    assertTrue(f1.isSubtype(f1));\n    assertFalse(f1.isSubtype(f2));\n    assertTrue(f2.isSubtype(f1));\n    assertTrue(f2.isSubtype(f2));\n\n    assertTrue(f1.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(f2.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f1));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(f2));\n  }\n",
        "begin_line": 4411,
        "end_line": 4428,
        "comment": "",
        "child_ranges": [
            "(line 4413,col 5)-(line 4414,col 65)",
            "(line 4416,col 5)-(line 4417,col 56)",
            "(line 4419,col 5)-(line 4419,col 33)",
            "(line 4420,col 5)-(line 4420,col 34)",
            "(line 4421,col 5)-(line 4421,col 33)",
            "(line 4422,col 5)-(line 4422,col 33)",
            "(line 4424,col 5)-(line 4424,col 51)",
            "(line 4425,col 5)-(line 4425,col 51)",
            "(line 4426,col 5)-(line 4426,col 51)",
            "(line 4427,col 5)-(line 4427,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingMostGeneralFunction()",
        "snippet": "  public void testSubtypingMostGeneralFunction() throws Exception {\n    // (EvalError, String) -> Object\n    FunctionType f1 = registry.createFunctionType(OBJECT_TYPE,\n        false, EVAL_ERROR_TYPE, STRING_TYPE);\n    // (string, void) -> number\n    FunctionType f2 = registry.createFunctionType(NUMBER_TYPE,\n        false, STRING_TYPE, VOID_TYPE);\n    // (Date, string, number) -> AnyObject\n    FunctionType f3 = registry.createFunctionType(NO_OBJECT_TYPE,\n        false, DATE_TYPE, STRING_TYPE, NUMBER_TYPE);\n    // (Number) -> Any\n    FunctionType f4 = registry.createFunctionType(NO_TYPE,\n        false, NUMBER_OBJECT_TYPE);\n    // f1 = (EvalError...) -> Object\n    FunctionType f5 = registry.createFunctionType(OBJECT_TYPE,\n        true, EVAL_ERROR_TYPE);\n    // f2 = (Error, Object) -> String\n    FunctionType f6 = registry.createFunctionType(STRING_OBJECT_TYPE,\n        false, ERROR_TYPE, OBJECT_TYPE);\n    // f1 = (UriError, EvalError...) -> Object\n    FunctionType f7 = registry.createFunctionType(OBJECT_TYPE,\n        true,  URI_ERROR_TYPE, EVAL_ERROR_TYPE);\n    // f2 = (Error, Object, EvalError...) -> String\n    FunctionType f8 = registry.createFunctionType(STRING_OBJECT_TYPE,\n        true, ERROR_TYPE, OBJECT_TYPE, EVAL_ERROR_TYPE);\n\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(LEAST_FUNCTION_TYPE));\n\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(LEAST_FUNCTION_TYPE));\n    assertTrue(GREATEST_FUNCTION_TYPE.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(GREATEST_FUNCTION_TYPE));\n\n    assertTrue(f1.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(f2.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(f3.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(f4.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(f5.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(f6.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(f7.isSubtype(GREATEST_FUNCTION_TYPE));\n    assertTrue(f8.isSubtype(GREATEST_FUNCTION_TYPE));\n\n    assertFalse(f1.isSubtype(LEAST_FUNCTION_TYPE));\n    assertFalse(f2.isSubtype(LEAST_FUNCTION_TYPE));\n    assertFalse(f3.isSubtype(LEAST_FUNCTION_TYPE));\n    assertFalse(f4.isSubtype(LEAST_FUNCTION_TYPE));\n    assertFalse(f5.isSubtype(LEAST_FUNCTION_TYPE));\n    assertFalse(f6.isSubtype(LEAST_FUNCTION_TYPE));\n    assertFalse(f7.isSubtype(LEAST_FUNCTION_TYPE));\n    assertFalse(f8.isSubtype(LEAST_FUNCTION_TYPE));\n\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f1));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f2));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f3));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f4));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f5));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f6));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f7));\n    assertTrue(LEAST_FUNCTION_TYPE.isSubtype(f8));\n\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f1));\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f2));\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f3));\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f4));\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f5));\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f6));\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f7));\n    assertFalse(GREATEST_FUNCTION_TYPE.isSubtype(f8));\n  }\n",
        "begin_line": 4430,
        "end_line": 4499,
        "comment": "",
        "child_ranges": [
            "(line 4432,col 5)-(line 4433,col 45)",
            "(line 4435,col 5)-(line 4436,col 39)",
            "(line 4438,col 5)-(line 4439,col 52)",
            "(line 4441,col 5)-(line 4442,col 35)",
            "(line 4444,col 5)-(line 4445,col 31)",
            "(line 4447,col 5)-(line 4448,col 40)",
            "(line 4450,col 5)-(line 4451,col 48)",
            "(line 4453,col 5)-(line 4454,col 56)",
            "(line 4456,col 5)-(line 4456,col 70)",
            "(line 4457,col 5)-(line 4457,col 68)",
            "(line 4458,col 5)-(line 4458,col 68)",
            "(line 4460,col 5)-(line 4460,col 71)",
            "(line 4461,col 5)-(line 4461,col 71)",
            "(line 4462,col 5)-(line 4462,col 71)",
            "(line 4464,col 5)-(line 4464,col 53)",
            "(line 4465,col 5)-(line 4465,col 53)",
            "(line 4466,col 5)-(line 4466,col 53)",
            "(line 4467,col 5)-(line 4467,col 53)",
            "(line 4468,col 5)-(line 4468,col 53)",
            "(line 4469,col 5)-(line 4469,col 53)",
            "(line 4470,col 5)-(line 4470,col 53)",
            "(line 4471,col 5)-(line 4471,col 53)",
            "(line 4473,col 5)-(line 4473,col 51)",
            "(line 4474,col 5)-(line 4474,col 51)",
            "(line 4475,col 5)-(line 4475,col 51)",
            "(line 4476,col 5)-(line 4476,col 51)",
            "(line 4477,col 5)-(line 4477,col 51)",
            "(line 4478,col 5)-(line 4478,col 51)",
            "(line 4479,col 5)-(line 4479,col 51)",
            "(line 4480,col 5)-(line 4480,col 51)",
            "(line 4482,col 5)-(line 4482,col 50)",
            "(line 4483,col 5)-(line 4483,col 50)",
            "(line 4484,col 5)-(line 4484,col 50)",
            "(line 4485,col 5)-(line 4485,col 50)",
            "(line 4486,col 5)-(line 4486,col 50)",
            "(line 4487,col 5)-(line 4487,col 50)",
            "(line 4488,col 5)-(line 4488,col 50)",
            "(line 4489,col 5)-(line 4489,col 50)",
            "(line 4491,col 5)-(line 4491,col 54)",
            "(line 4492,col 5)-(line 4492,col 54)",
            "(line 4493,col 5)-(line 4493,col 54)",
            "(line 4494,col 5)-(line 4494,col 54)",
            "(line 4495,col 5)-(line 4495,col 54)",
            "(line 4496,col 5)-(line 4496,col 54)",
            "(line 4497,col 5)-(line 4497,col 54)",
            "(line 4498,col 5)-(line 4498,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.getTypesToTestForSymmetry()",
        "snippet": "  private List<JSType> getTypesToTestForSymmetry() {\n    return Lists.newArrayList(\n        UNKNOWN_TYPE,\n        NULL_TYPE,\n        VOID_TYPE,\n        NUMBER_TYPE,\n        STRING_TYPE,\n        BOOLEAN_TYPE,\n        OBJECT_TYPE,\n        U2U_CONSTRUCTOR_TYPE,\n        LEAST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE,\n        ALL_TYPE,\n        NO_TYPE,\n        NO_OBJECT_TYPE,\n        NO_RESOLVED_TYPE,\n        createUnionType(BOOLEAN_TYPE, STRING_TYPE),\n        createUnionType(NUMBER_TYPE, STRING_TYPE),\n        createUnionType(NULL_TYPE, dateMethod),\n        createUnionType(UNKNOWN_TYPE, dateMethod),\n        createUnionType(namedGoogBar, dateMethod),\n        createUnionType(NULL_TYPE, unresolvedNamedType),\n        enumType,\n        elementsType,\n        dateMethod,\n        functionType,\n        unresolvedNamedType,\n        googBar,\n        namedGoogBar,\n        googBar.getInstanceType(),\n        namedGoogBar,\n        subclassOfUnresolvedNamedType,\n        subclassCtor,\n        recordType,\n        forwardDeclaredNamedType,\n        createUnionType(forwardDeclaredNamedType, NULL_TYPE));\n  }\n",
        "begin_line": 4504,
        "end_line": 4540,
        "comment": "\n   * Types to test for symmetrical relationships.\n   ",
        "child_ranges": [
            "(line 4505,col 5)-(line 4539,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSymmetryOfTestForEquality()",
        "snippet": "  public void testSymmetryOfTestForEquality() {\n    List<JSType> listA = getTypesToTestForSymmetry();\n    List<JSType> listB = getTypesToTestForSymmetry();\n    for (JSType typeA : listA) {\n      for (JSType typeB : listB) {\n        TernaryValue aOnB = typeA.testForEquality(typeB);\n        TernaryValue bOnA = typeB.testForEquality(typeA);\n        assertTrue(\n            String.format(\"testForEquality not symmetrical:\\n\" +\n                \"typeA: %s\\ntypeB: %s\\n\" +\n                \"a.testForEquality(b): %s\\n\" +\n                \"b.testForEquality(a): %s\\n\",\n                typeA, typeB, aOnB, bOnA),\n            aOnB == bOnA);\n      }\n    }\n  }\n",
        "begin_line": 4542,
        "end_line": 4558,
        "comment": "",
        "child_ranges": [
            "(line 4543,col 5)-(line 4543,col 53)",
            "(line 4544,col 5)-(line 4544,col 53)",
            "(line 4545,col 5)-(line 4557,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSymmetryOfLeastSupertype()",
        "snippet": "  public void testSymmetryOfLeastSupertype() {\n    List<JSType> listA = getTypesToTestForSymmetry();\n    List<JSType> listB = getTypesToTestForSymmetry();\n    for (JSType typeA : listA) {\n      for (JSType typeB : listB) {\n        JSType aOnB = typeA.getLeastSupertype(typeB);\n        JSType bOnA = typeB.getLeastSupertype(typeA);\n\n        // Use a custom assert message instead of the normal assertTypeEquals,\n        // to make it more helpful.\n        assertTrue(\n            String.format(\"getLeastSupertype not symmetrical:\\n\" +\n                \"typeA: %s\\ntypeB: %s\\n\" +\n                \"a.getLeastSupertype(b): %s\\n\" +\n                \"b.getLeastSupertype(a): %s\\n\",\n                typeA, typeB, aOnB, bOnA),\n            aOnB.isEquivalentTo(bOnA));\n      }\n    }\n  }\n",
        "begin_line": 4563,
        "end_line": 4582,
        "comment": "\n   * Tests that getLeastSupertype is a symmetric relation.\n   ",
        "child_ranges": [
            "(line 4564,col 5)-(line 4564,col 53)",
            "(line 4565,col 5)-(line 4565,col 53)",
            "(line 4566,col 5)-(line 4581,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testWeirdBug()",
        "snippet": "  public void testWeirdBug() {\n    assertTypeNotEquals(googBar, googBar.getInstanceType());\n    assertFalse(googBar.isSubtype(googBar.getInstanceType()));\n    assertFalse(googBar.getInstanceType().isSubtype(googBar));\n  }\n",
        "begin_line": 4584,
        "end_line": 4588,
        "comment": "",
        "child_ranges": [
            "(line 4585,col 5)-(line 4585,col 60)",
            "(line 4586,col 5)-(line 4586,col 62)",
            "(line 4587,col 5)-(line 4587,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSymmetryOfGreatestSubtype()",
        "snippet": "  public void testSymmetryOfGreatestSubtype() {\n    List<JSType> listA = getTypesToTestForSymmetry();\n    List<JSType> listB = getTypesToTestForSymmetry();\n    for (JSType typeA : listA) {\n      for (JSType typeB : listB) {\n        JSType aOnB = typeA.getGreatestSubtype(typeB);\n        JSType bOnA = typeB.getGreatestSubtype(typeA);\n\n        // Use a custom assert message instead of the normal assertTypeEquals,\n        // to make it more helpful.\n        assertTrue(\n            String.format(\"getGreatestSubtype not symmetrical:\\n\" +\n                \"typeA: %s\\ntypeB: %s\\n\" +\n                \"a.getGreatestSubtype(b): %s\\n\" +\n                \"b.getGreatestSubtype(a): %s\\n\",\n                typeA, typeB, aOnB, bOnA),\n            aOnB.isEquivalentTo(bOnA));\n      }\n    }\n  }\n",
        "begin_line": 4593,
        "end_line": 4612,
        "comment": "\n   * Tests that getGreatestSubtype is a symmetric relation.\n   ",
        "child_ranges": [
            "(line 4594,col 5)-(line 4594,col 53)",
            "(line 4595,col 5)-(line 4595,col 53)",
            "(line 4596,col 5)-(line 4611,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testReflexivityOfLeastSupertype()",
        "snippet": "  public void testReflexivityOfLeastSupertype() {\n    List<JSType> list = getTypesToTestForSymmetry();\n    for (JSType type : list) {\n      assertTypeEquals(\"getLeastSupertype not reflexive\",\n          type, type.getLeastSupertype(type));\n    }\n  }\n",
        "begin_line": 4617,
        "end_line": 4623,
        "comment": "\n   * Tests that getLeastSupertype is a reflexive relation.\n   ",
        "child_ranges": [
            "(line 4618,col 5)-(line 4618,col 52)",
            "(line 4619,col 5)-(line 4622,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testReflexivityOfGreatestSubtype()",
        "snippet": "  public void testReflexivityOfGreatestSubtype() {\n    List<JSType> list = getTypesToTestForSymmetry();\n    for (JSType type : list) {\n      assertTypeEquals(\"getGreatestSubtype not reflexive\",\n          type, type.getGreatestSubtype(type));\n    }\n  }\n",
        "begin_line": 4628,
        "end_line": 4634,
        "comment": "\n   * Tests that getGreatestSubtype is a reflexive relation.\n   ",
        "child_ranges": [
            "(line 4629,col 5)-(line 4629,col 52)",
            "(line 4630,col 5)-(line 4633,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testLeastSupertypeUnresolvedNamedType()",
        "snippet": "  public void testLeastSupertypeUnresolvedNamedType() {\n    // (undefined,function(?):?) and ? unresolved named type\n    JSType expected = registry.createUnionType(\n        unresolvedNamedType, U2U_FUNCTION_TYPE);\n    assertTypeEquals(expected,\n        unresolvedNamedType.getLeastSupertype(U2U_FUNCTION_TYPE));\n    assertTypeEquals(expected,\n        U2U_FUNCTION_TYPE.getLeastSupertype(unresolvedNamedType));\n    assertEquals(\"(function (...[?]): ?|not.resolved.named.type)\",\n        expected.toString());\n  }\n",
        "begin_line": 4639,
        "end_line": 4649,
        "comment": "\n   * Tests {@link JSType#getLeastSupertype(JSType)} for unresolved named types.\n   ",
        "child_ranges": [
            "(line 4641,col 5)-(line 4642,col 48)",
            "(line 4643,col 5)-(line 4644,col 66)",
            "(line 4645,col 5)-(line 4646,col 66)",
            "(line 4647,col 5)-(line 4648,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testLeastSupertypeUnresolvedNamedType2()",
        "snippet": "  public void testLeastSupertypeUnresolvedNamedType2() {\n    JSType expected = registry.createUnionType(\n        unresolvedNamedType, UNKNOWN_TYPE);\n    assertTypeEquals(expected,\n        unresolvedNamedType.getLeastSupertype(UNKNOWN_TYPE));\n    assertTypeEquals(expected,\n        UNKNOWN_TYPE.getLeastSupertype(unresolvedNamedType));\n    assertTypeEquals(UNKNOWN_TYPE, expected);\n  }\n",
        "begin_line": 4651,
        "end_line": 4659,
        "comment": "",
        "child_ranges": [
            "(line 4652,col 5)-(line 4653,col 43)",
            "(line 4654,col 5)-(line 4655,col 61)",
            "(line 4656,col 5)-(line 4657,col 61)",
            "(line 4658,col 5)-(line 4658,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testLeastSupertypeUnresolvedNamedType3()",
        "snippet": "  public void testLeastSupertypeUnresolvedNamedType3() {\n    JSType expected = registry.createUnionType(\n        unresolvedNamedType, CHECKED_UNKNOWN_TYPE);\n    assertTypeEquals(expected,\n        unresolvedNamedType.getLeastSupertype(CHECKED_UNKNOWN_TYPE));\n    assertTypeEquals(expected,\n        CHECKED_UNKNOWN_TYPE.getLeastSupertype(unresolvedNamedType));\n    assertTypeEquals(CHECKED_UNKNOWN_TYPE, expected);\n  }\n",
        "begin_line": 4661,
        "end_line": 4669,
        "comment": "",
        "child_ranges": [
            "(line 4662,col 5)-(line 4663,col 51)",
            "(line 4664,col 5)-(line 4665,col 69)",
            "(line 4666,col 5)-(line 4667,col 69)",
            "(line 4668,col 5)-(line 4668,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubclassOfUnresolvedNamedType()",
        "snippet": "  public void testSubclassOfUnresolvedNamedType() {\n    assertTrue(subclassOfUnresolvedNamedType.isUnknownType());\n  }\n",
        "begin_line": 4672,
        "end_line": 4674,
        "comment": " Tests the subclass of an unresolve named type ",
        "child_ranges": [
            "(line 4673,col 5)-(line 4673,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSupertypeOfProxiedFunctionTypes()",
        "snippet": "  public void testSupertypeOfProxiedFunctionTypes() {\n    ObjectType fn1 =\n        new FunctionBuilder(registry)\n        .withParamsNode(new Node(Token.PARAM_LIST))\n        .withReturnType(NUMBER_TYPE)\n        .build();\n    ObjectType fn2 =\n        new FunctionBuilder(registry)\n        .withParamsNode(new Node(Token.PARAM_LIST))\n        .withReturnType(STRING_TYPE)\n        .build();\n    ObjectType p1 = new ProxyObjectType(registry, fn1);\n    ObjectType p2 = new ProxyObjectType(registry, fn2);\n    ObjectType supremum =\n        new FunctionBuilder(registry)\n        .withParamsNode(new Node(Token.PARAM_LIST))\n        .withReturnType(registry.createUnionType(STRING_TYPE, NUMBER_TYPE))\n        .build();\n\n    assertTypeEquals(fn1.getLeastSupertype(fn2), p1.getLeastSupertype(p2));\n    assertTypeEquals(supremum, fn1.getLeastSupertype(fn2));\n    assertTypeEquals(supremum, fn1.getLeastSupertype(p2));\n    assertTypeEquals(supremum, p1.getLeastSupertype(fn2));\n    assertTypeEquals(supremum, p1.getLeastSupertype(p2));\n  }\n",
        "begin_line": 4680,
        "end_line": 4704,
        "comment": "\n   * Tests that Proxied FunctionTypes behave the same over getLeastSupertype and\n   * getGreatestSubtype as non proxied FunctionTypes\n   ",
        "child_ranges": [
            "(line 4681,col 5)-(line 4685,col 17)",
            "(line 4686,col 5)-(line 4690,col 17)",
            "(line 4691,col 5)-(line 4691,col 55)",
            "(line 4692,col 5)-(line 4692,col 55)",
            "(line 4693,col 5)-(line 4697,col 17)",
            "(line 4699,col 5)-(line 4699,col 75)",
            "(line 4700,col 5)-(line 4700,col 59)",
            "(line 4701,col 5)-(line 4701,col 58)",
            "(line 4702,col 5)-(line 4702,col 58)",
            "(line 4703,col 5)-(line 4703,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testTypeOfThisIsProxied()",
        "snippet": "  public void testTypeOfThisIsProxied() {\n    ObjectType fnType = new FunctionBuilder(registry)\n        .withReturnType(NUMBER_TYPE).withTypeOfThis(OBJECT_TYPE).build();\n    ObjectType proxyType = new ProxyObjectType(registry, fnType);\n    assertTypeEquals(fnType.getTypeOfThis(), proxyType.getTypeOfThis());\n  }\n",
        "begin_line": 4706,
        "end_line": 4711,
        "comment": "",
        "child_ranges": [
            "(line 4707,col 5)-(line 4708,col 73)",
            "(line 4709,col 5)-(line 4709,col 65)",
            "(line 4710,col 5)-(line 4710,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNamedTypeEquals()",
        "snippet": "  public void testNamedTypeEquals() {\n    JSTypeRegistry jst = new JSTypeRegistry(null);\n\n    // test == if references are equal\n    NamedType a = new NamedType(jst, \"type1\", \"source\", 1, 0);\n    NamedType b = new NamedType(jst, \"type1\", \"source\", 1, 0);\n    assertTrue(a.isEquivalentTo(b));\n\n    // test == instance of referenced type\n    assertTrue(namedGoogBar.isEquivalentTo(googBar.getInstanceType()));\n    assertTrue(googBar.getInstanceType().isEquivalentTo(namedGoogBar));\n  }\n",
        "begin_line": 4716,
        "end_line": 4727,
        "comment": "\n   * Tests the {@link NamedType#equals} function, which had a bug in it.\n   ",
        "child_ranges": [
            "(line 4717,col 5)-(line 4717,col 50)",
            "(line 4720,col 5)-(line 4720,col 62)",
            "(line 4721,col 5)-(line 4721,col 62)",
            "(line 4722,col 5)-(line 4722,col 36)",
            "(line 4725,col 5)-(line 4725,col 71)",
            "(line 4726,col 5)-(line 4726,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNamedTypeEquals2()",
        "snippet": "  public void testNamedTypeEquals2() {\n    // test == if references are equal\n    NamedType a = new NamedType(registry, \"typeA\", \"source\", 1, 0);\n    NamedType b = new NamedType(registry, \"typeB\", \"source\", 1, 0);\n\n    ObjectType realA = registry.createConstructorType(\n        \"typeA\", null, null, null).getInstanceType();\n    ObjectType realB = registry.createEnumType(\n        \"typeB\", null, NUMBER_TYPE).getElementsType();\n    registry.declareType(\"typeA\", realA);\n    registry.declareType(\"typeB\", realB);\n\n    assertEquals(a.hashCode(), realA.hashCode());\n    assertTypeEquals(a, realA);\n    assertEquals(b.hashCode(), realB.hashCode());\n    assertTypeEquals(b, realB);\n\n    a.resolve(null, null);\n    b.resolve(null, null);\n\n    assertTrue(a.isResolved());\n    assertTrue(b.isResolved());\n    assertEquals(a.hashCode(), realA.hashCode());\n    assertTypeEquals(a, realA);\n    assertEquals(b.hashCode(), realB.hashCode());\n    assertTypeEquals(b, realB);\n\n    JSType resolvedA = Asserts.assertValidResolve(a);\n    assertNotSame(resolvedA, a);\n    assertSame(resolvedA, realA);\n\n    JSType resolvedB = Asserts.assertValidResolve(b);\n    assertNotSame(resolvedB, b);\n    assertSame(resolvedB, realB);\n  }\n",
        "begin_line": 4732,
        "end_line": 4766,
        "comment": "\n   * Tests the {@link NamedType#equals} function against other types.\n   ",
        "child_ranges": [
            "(line 4734,col 5)-(line 4734,col 67)",
            "(line 4735,col 5)-(line 4735,col 67)",
            "(line 4737,col 5)-(line 4738,col 53)",
            "(line 4739,col 5)-(line 4740,col 54)",
            "(line 4741,col 5)-(line 4741,col 41)",
            "(line 4742,col 5)-(line 4742,col 41)",
            "(line 4744,col 5)-(line 4744,col 49)",
            "(line 4745,col 5)-(line 4745,col 31)",
            "(line 4746,col 5)-(line 4746,col 49)",
            "(line 4747,col 5)-(line 4747,col 31)",
            "(line 4749,col 5)-(line 4749,col 26)",
            "(line 4750,col 5)-(line 4750,col 26)",
            "(line 4752,col 5)-(line 4752,col 31)",
            "(line 4753,col 5)-(line 4753,col 31)",
            "(line 4754,col 5)-(line 4754,col 49)",
            "(line 4755,col 5)-(line 4755,col 31)",
            "(line 4756,col 5)-(line 4756,col 49)",
            "(line 4757,col 5)-(line 4757,col 31)",
            "(line 4759,col 5)-(line 4759,col 53)",
            "(line 4760,col 5)-(line 4760,col 32)",
            "(line 4761,col 5)-(line 4761,col 33)",
            "(line 4763,col 5)-(line 4763,col 53)",
            "(line 4764,col 5)-(line 4764,col 32)",
            "(line 4765,col 5)-(line 4765,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testForwardDeclaredNamedTypeEquals()",
        "snippet": "  public void testForwardDeclaredNamedTypeEquals() {\n    // test == if references are equal\n    NamedType a = new NamedType(registry, \"typeA\", \"source\", 1, 0);\n    NamedType b = new NamedType(registry, \"typeA\", \"source\", 1, 0);\n    registry.forwardDeclareType(\"typeA\");\n\n    assertEquals(a.hashCode(), b.hashCode());\n    assertTypeEquals(a, b);\n\n    a.resolve(null, EMPTY_SCOPE);\n\n    assertTrue(a.isResolved());\n    assertFalse(b.isResolved());\n\n    assertEquals(a.hashCode(), b.hashCode());\n    assertTypeEquals(a, b);\n\n    assertFalse(a.isEquivalentTo(UNKNOWN_TYPE));\n    assertFalse(b.isEquivalentTo(UNKNOWN_TYPE));\n    assertTrue(a.isEmptyType());\n    assertFalse(a.isNoType());\n    assertTrue(a.isNoResolvedType());\n  }\n",
        "begin_line": 4772,
        "end_line": 4794,
        "comment": "\n   * Tests the {@link NamedType#equals} function against other types\n   * when it's forward-declared.\n   ",
        "child_ranges": [
            "(line 4774,col 5)-(line 4774,col 67)",
            "(line 4775,col 5)-(line 4775,col 67)",
            "(line 4776,col 5)-(line 4776,col 41)",
            "(line 4778,col 5)-(line 4778,col 45)",
            "(line 4779,col 5)-(line 4779,col 27)",
            "(line 4781,col 5)-(line 4781,col 33)",
            "(line 4783,col 5)-(line 4783,col 31)",
            "(line 4784,col 5)-(line 4784,col 32)",
            "(line 4786,col 5)-(line 4786,col 45)",
            "(line 4787,col 5)-(line 4787,col 27)",
            "(line 4789,col 5)-(line 4789,col 48)",
            "(line 4790,col 5)-(line 4790,col 48)",
            "(line 4791,col 5)-(line 4791,col 32)",
            "(line 4792,col 5)-(line 4792,col 30)",
            "(line 4793,col 5)-(line 4793,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testForwardDeclaredNamedType()",
        "snippet": "  public void testForwardDeclaredNamedType() {\n    NamedType a = new NamedType(registry, \"typeA\", \"source\", 1, 0);\n    registry.forwardDeclareType(\"typeA\");\n\n    assertTypeEquals(UNKNOWN_TYPE, a.getLeastSupertype(UNKNOWN_TYPE));\n    assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        a.getLeastSupertype(CHECKED_UNKNOWN_TYPE));\n    assertTypeEquals(UNKNOWN_TYPE, UNKNOWN_TYPE.getLeastSupertype(a));\n    assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        CHECKED_UNKNOWN_TYPE.getLeastSupertype(a));\n  }\n",
        "begin_line": 4796,
        "end_line": 4806,
        "comment": "",
        "child_ranges": [
            "(line 4797,col 5)-(line 4797,col 67)",
            "(line 4798,col 5)-(line 4798,col 41)",
            "(line 4800,col 5)-(line 4800,col 70)",
            "(line 4801,col 5)-(line 4802,col 51)",
            "(line 4803,col 5)-(line 4803,col 70)",
            "(line 4804,col 5)-(line 4805,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGreatestSubtypeSimpleTypes()",
        "snippet": "  public void testGreatestSubtypeSimpleTypes() {\n    assertTypeEquals(ARRAY_TYPE,\n        ARRAY_TYPE.getGreatestSubtype(ALL_TYPE));\n    assertTypeEquals(ARRAY_TYPE,\n        ALL_TYPE.getGreatestSubtype(ARRAY_TYPE));\n    assertTypeEquals(NO_OBJECT_TYPE,\n        REGEXP_TYPE.getGreatestSubtype(NO_OBJECT_TYPE));\n    assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getGreatestSubtype(REGEXP_TYPE));\n    assertTypeEquals(NO_OBJECT_TYPE,\n        ARRAY_TYPE.getGreatestSubtype(STRING_OBJECT_TYPE));\n    assertTypeEquals(NO_TYPE, ARRAY_TYPE.getGreatestSubtype(NUMBER_TYPE));\n    assertTypeEquals(NO_OBJECT_TYPE,\n        ARRAY_TYPE.getGreatestSubtype(functionType));\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getGreatestSubtype(OBJECT_TYPE));\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        OBJECT_TYPE.getGreatestSubtype(STRING_OBJECT_TYPE));\n    assertTypeEquals(NO_OBJECT_TYPE,\n        ARRAY_TYPE.getGreatestSubtype(DATE_TYPE));\n    assertTypeEquals(NO_OBJECT_TYPE,\n        ARRAY_TYPE.getGreatestSubtype(REGEXP_TYPE));\n    assertTypeEquals(EVAL_ERROR_TYPE,\n        ERROR_TYPE.getGreatestSubtype(EVAL_ERROR_TYPE));\n    assertTypeEquals(EVAL_ERROR_TYPE,\n        EVAL_ERROR_TYPE.getGreatestSubtype(ERROR_TYPE));\n    assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getGreatestSubtype(ERROR_TYPE));\n    assertTypeEquals(UNKNOWN_TYPE,\n        NUMBER_TYPE.getGreatestSubtype(UNKNOWN_TYPE));\n\n    assertTypeEquals(NO_RESOLVED_TYPE,\n        NO_OBJECT_TYPE.getGreatestSubtype(forwardDeclaredNamedType));\n    assertTypeEquals(NO_RESOLVED_TYPE,\n        forwardDeclaredNamedType.getGreatestSubtype(NO_OBJECT_TYPE));\n\n  }\n",
        "begin_line": 4811,
        "end_line": 4847,
        "comment": "\n   * Tests {@link JSType#getGreatestSubtype(JSType)} on simple types.\n   ",
        "child_ranges": [
            "(line 4812,col 5)-(line 4813,col 49)",
            "(line 4814,col 5)-(line 4815,col 49)",
            "(line 4816,col 5)-(line 4817,col 56)",
            "(line 4818,col 5)-(line 4819,col 56)",
            "(line 4820,col 5)-(line 4821,col 59)",
            "(line 4822,col 5)-(line 4822,col 74)",
            "(line 4823,col 5)-(line 4824,col 53)",
            "(line 4825,col 5)-(line 4826,col 60)",
            "(line 4827,col 5)-(line 4828,col 60)",
            "(line 4829,col 5)-(line 4830,col 50)",
            "(line 4831,col 5)-(line 4832,col 52)",
            "(line 4833,col 5)-(line 4834,col 56)",
            "(line 4835,col 5)-(line 4836,col 56)",
            "(line 4837,col 5)-(line 4838,col 50)",
            "(line 4839,col 5)-(line 4840,col 54)",
            "(line 4842,col 5)-(line 4843,col 69)",
            "(line 4844,col 5)-(line 4845,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testSubtypingDerivedExtendsNamedBaseType()",
        "snippet": "  public void testSubtypingDerivedExtendsNamedBaseType() throws Exception {\n    ObjectType derived =\n        registry.createObjectType(registry.createObjectType(namedGoogBar));\n\n    assertTrue(derived.isSubtype(googBar.getInstanceType()));\n  }\n",
        "begin_line": 4853,
        "end_line": 4858,
        "comment": "\n   * Tests that a derived class extending a type via a named type is a subtype\n   * of it.\n   ",
        "child_ranges": [
            "(line 4854,col 5)-(line 4855,col 75)",
            "(line 4857,col 5)-(line 4857,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNamedSubtypeChain()",
        "snippet": "  public void testNamedSubtypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.ALL_TYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n        googBar.getPrototype(),\n        googBar.getInstanceType(),\n        googSubBar.getPrototype(),\n        googSubBar.getInstanceType(),\n        googSubSubBar.getPrototype(),\n        googSubSubBar.getInstanceType(),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_RESOLVED_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4860,
        "end_line": 4875,
        "comment": "",
        "child_ranges": [
            "(line 4861,col 5)-(line 4873,col 54)",
            "(line 4874,col 5)-(line 4874,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordSubtypeChain()",
        "snippet": "  public void testRecordSubtypeChain() throws Exception {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", STRING_TYPE, null);\n    JSType aType = builder.build();\n\n    builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", STRING_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    JSType abType = builder.build();\n\n    builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", STRING_TYPE, null);\n    builder.addProperty(\"c\", STRING_TYPE, null);\n    JSType acType = builder.build();\n    JSType abOrAcType = registry.createUnionType(abType, acType);\n\n    builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"a\", STRING_TYPE, null);\n    builder.addProperty(\"b\", STRING_TYPE, null);\n    builder.addProperty(\"c\", NUMBER_TYPE, null);\n    JSType abcType = builder.build();\n\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.ALL_TYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n        aType,\n        abOrAcType,\n        abType,\n        abcType,\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4877,
        "end_line": 4910,
        "comment": "",
        "child_ranges": [
            "(line 4878,col 5)-(line 4878,col 64)",
            "(line 4879,col 5)-(line 4879,col 48)",
            "(line 4880,col 5)-(line 4880,col 35)",
            "(line 4882,col 5)-(line 4882,col 46)",
            "(line 4883,col 5)-(line 4883,col 48)",
            "(line 4884,col 5)-(line 4884,col 48)",
            "(line 4885,col 5)-(line 4885,col 36)",
            "(line 4887,col 5)-(line 4887,col 46)",
            "(line 4888,col 5)-(line 4888,col 48)",
            "(line 4889,col 5)-(line 4889,col 48)",
            "(line 4890,col 5)-(line 4890,col 36)",
            "(line 4891,col 5)-(line 4891,col 65)",
            "(line 4893,col 5)-(line 4893,col 46)",
            "(line 4894,col 5)-(line 4894,col 48)",
            "(line 4895,col 5)-(line 4895,col 48)",
            "(line 4896,col 5)-(line 4896,col 48)",
            "(line 4897,col 5)-(line 4897,col 37)",
            "(line 4899,col 5)-(line 4908,col 54)",
            "(line 4909,col 5)-(line 4909,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordAndObjectChain2()",
        "snippet": "  public void testRecordAndObjectChain2() throws Exception {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"date\", DATE_TYPE, null);\n    JSType hasDateProperty = builder.build();\n\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n        hasDateProperty,\n        googBar.getInstanceType(),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4912,
        "end_line": 4924,
        "comment": "",
        "child_ranges": [
            "(line 4913,col 5)-(line 4913,col 64)",
            "(line 4914,col 5)-(line 4914,col 49)",
            "(line 4915,col 5)-(line 4915,col 45)",
            "(line 4917,col 5)-(line 4922,col 54)",
            "(line 4923,col 5)-(line 4923,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRecordAndObjectChain3()",
        "snippet": "  public void testRecordAndObjectChain3() throws Exception {\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    builder.addProperty(\"date\", UNKNOWN_TYPE, null);\n    JSType hasUnknownDateProperty = builder.build();\n\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n        hasUnknownDateProperty,\n        googBar.getInstanceType(),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4926,
        "end_line": 4938,
        "comment": "",
        "child_ranges": [
            "(line 4927,col 5)-(line 4927,col 64)",
            "(line 4928,col 5)-(line 4928,col 52)",
            "(line 4929,col 5)-(line 4929,col 52)",
            "(line 4931,col 5)-(line 4936,col 54)",
            "(line 4937,col 5)-(line 4937,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNullableNamedTypeChain()",
        "snippet": "  public void testNullableNamedTypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.ALL_TYPE),\n        registry.createOptionalNullableType(\n            registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE)),\n        registry.createOptionalNullableType(\n            registry.getNativeType(JSTypeNative.OBJECT_TYPE)),\n        registry.createOptionalNullableType(googBar.getPrototype()),\n        registry.createOptionalNullableType(googBar.getInstanceType()),\n        registry.createNullableType(googSubBar.getPrototype()),\n        registry.createNullableType(googSubBar.getInstanceType()),\n        googSubSubBar.getPrototype(),\n        googSubSubBar.getInstanceType(),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4940,
        "end_line": 4956,
        "comment": "",
        "child_ranges": [
            "(line 4941,col 5)-(line 4954,col 54)",
            "(line 4955,col 5)-(line 4955,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testEnumTypeChain()",
        "snippet": "  public void testEnumTypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.ALL_TYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n        enumType,\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4958,
        "end_line": 4967,
        "comment": "",
        "child_ranges": [
            "(line 4959,col 5)-(line 4965,col 54)",
            "(line 4966,col 5)-(line 4966,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionSubtypeChain()",
        "snippet": "  public void testFunctionSubtypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.ALL_TYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n        registry.getNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE),\n        dateMethod,\n        registry.getNativeType(JSTypeNative.LEAST_FUNCTION_TYPE),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4969,
        "end_line": 4981,
        "comment": "",
        "child_ranges": [
            "(line 4970,col 5)-(line 4979,col 54)",
            "(line 4980,col 5)-(line 4980,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testFunctionUnionSubtypeChain()",
        "snippet": "  public void testFunctionUnionSubtypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        createUnionType(\n            OBJECT_TYPE,\n            STRING_TYPE),\n        createUnionType(\n            GREATEST_FUNCTION_TYPE,\n            googBarInst,\n            STRING_TYPE),\n        createUnionType(\n            STRING_TYPE,\n            registry.createFunctionType(\n                createUnionType(STRING_TYPE, NUMBER_TYPE)),\n            googBarInst),\n        createUnionType(\n            registry.createFunctionType(NUMBER_TYPE),\n            googSubBarInst),\n        LEAST_FUNCTION_TYPE,\n        NO_OBJECT_TYPE,\n        NO_TYPE);\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 4983,
        "end_line": 5004,
        "comment": "",
        "child_ranges": [
            "(line 4984,col 5)-(line 5002,col 17)",
            "(line 5003,col 5)-(line 5003,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testConstructorSubtypeChain()",
        "snippet": "  public void testConstructorSubtypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.ALL_TYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n        registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 5006,
        "end_line": 5016,
        "comment": "",
        "child_ranges": [
            "(line 5007,col 5)-(line 5014,col 54)",
            "(line 5015,col 5)-(line 5015,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGoogBarSubtypeChain()",
        "snippet": "  public void testGoogBarSubtypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        googBar,\n        googSubBar,\n        googSubSubBar,\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE));\n    verifySubtypeChain(typeChain, false);\n  }\n",
        "begin_line": 5018,
        "end_line": 5026,
        "comment": "",
        "child_ranges": [
            "(line 5019,col 5)-(line 5024,col 61)",
            "(line 5025,col 5)-(line 5025,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testConstructorWithArgSubtypeChain()",
        "snippet": "  public void testConstructorWithArgSubtypeChain() throws Exception {\n    FunctionType googBarArgConstructor = registry.createConstructorType(\n        \"barArg\", null, registry.createParameters(googBar), null);\n    FunctionType googSubBarArgConstructor = registry.createConstructorType(\n        \"subBarArg\", null, registry.createParameters(googSubBar), null);\n\n    List<JSType> typeChain = Lists.newArrayList(\n        registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        googBarArgConstructor,\n        googSubBarArgConstructor,\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE));\n    verifySubtypeChain(typeChain, false);\n  }\n",
        "begin_line": 5028,
        "end_line": 5040,
        "comment": "",
        "child_ranges": [
            "(line 5029,col 5)-(line 5030,col 66)",
            "(line 5031,col 5)-(line 5032,col 72)",
            "(line 5034,col 5)-(line 5038,col 61)",
            "(line 5039,col 5)-(line 5039,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testInterfaceInstanceSubtypeChain()",
        "snippet": "  public void testInterfaceInstanceSubtypeChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        ALL_TYPE,\n        OBJECT_TYPE,\n        interfaceInstType,\n        googBar.getPrototype(),\n        googBarInst,\n        googSubBar.getPrototype(),\n        googSubBarInst,\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 5042,
        "end_line": 5054,
        "comment": "",
        "child_ranges": [
            "(line 5043,col 5)-(line 5052,col 54)",
            "(line 5053,col 5)-(line 5053,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testInterfaceInheritanceSubtypeChain()",
        "snippet": "  public void testInterfaceInheritanceSubtypeChain() throws Exception {\n    FunctionType tempType =\n      registry.createConstructorType(\"goog.TempType\", null, null, null);\n    tempType.setImplementedInterfaces(\n        Lists.<ObjectType>newArrayList(subInterfaceInstType));\n    List<JSType> typeChain = Lists.newArrayList(\n        ALL_TYPE,\n        OBJECT_TYPE,\n        interfaceInstType,\n        subInterfaceInstType,\n        tempType.getPrototype(),\n        tempType.getInstanceType(),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 5056,
        "end_line": 5071,
        "comment": "",
        "child_ranges": [
            "(line 5057,col 5)-(line 5058,col 72)",
            "(line 5059,col 5)-(line 5060,col 62)",
            "(line 5061,col 5)-(line 5069,col 54)",
            "(line 5070,col 5)-(line 5070,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testAnonymousObjectChain()",
        "snippet": "  public void testAnonymousObjectChain() throws Exception {\n    List<JSType> typeChain = Lists.newArrayList(\n        ALL_TYPE,\n        createNullableType(OBJECT_TYPE),\n        OBJECT_TYPE,\n        registry.createAnonymousObjectType(),\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 5073,
        "end_line": 5082,
        "comment": "",
        "child_ranges": [
            "(line 5074,col 5)-(line 5080,col 54)",
            "(line 5081,col 5)-(line 5081,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testAnonymousEnumElementChain()",
        "snippet": "  public void testAnonymousEnumElementChain() throws Exception {\n    ObjectType enumElemType = registry.createEnumType(\n        \"typeB\", null, registry.createAnonymousObjectType()).getElementsType();\n    List<JSType> typeChain = Lists.newArrayList(\n        ALL_TYPE,\n        createNullableType(OBJECT_TYPE),\n        OBJECT_TYPE,\n        enumElemType,\n        registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n        registry.getNativeType(JSTypeNative.NO_TYPE));\n    verifySubtypeChain(typeChain);\n  }\n",
        "begin_line": 5084,
        "end_line": 5095,
        "comment": "",
        "child_ranges": [
            "(line 5085,col 5)-(line 5086,col 79)",
            "(line 5087,col 5)-(line 5093,col 54)",
            "(line 5094,col 5)-(line 5094,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.verifySubtypeChain(java.util.List<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  public void verifySubtypeChain(List<JSType> typeChain) throws Exception {\n    verifySubtypeChain(typeChain, true);\n  }\n",
        "begin_line": 5106,
        "end_line": 5108,
        "comment": "\n   * Tests that the given chain of types has a total ordering defined\n   * by the subtype relationship, with types at the top of the lattice\n   * listed first.\n   *\n   * Also verifies that the infimum of any two types on the chain\n   * is the lower type, and the supremum of any two types on the chain\n   * is the higher type.\n   ",
        "child_ranges": [
            "(line 5107,col 5)-(line 5107,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.verifySubtypeChain(java.util.List<com.google.javascript.rhino.jstype.JSType>, boolean)",
        "snippet": "  public void verifySubtypeChain(List<JSType> typeChain,\n                                 boolean checkSubtyping) throws Exception {\n    // Ugh. This wouldn't require so much copy-and-paste if we had a functional\n    // programming language.\n    for (int i = 0; i < typeChain.size(); i++) {\n      for (int j = 0; j < typeChain.size(); j++) {\n        JSType typeI = typeChain.get(i);\n        JSType typeJ = typeChain.get(j);\n\n        JSType namedTypeI = getNamedWrapper(\"TypeI\", typeI);\n        JSType namedTypeJ = getNamedWrapper(\"TypeJ\", typeJ);\n        JSType proxyTypeI = new ProxyObjectType(registry, typeI);\n        JSType proxyTypeJ = new ProxyObjectType(registry, typeJ);\n\n        if (i == j) {\n          assertTrue(typeI + \" should equal itself\",\n              typeI.isEquivalentTo(typeI));\n          assertTrue(\"Named \" + typeI + \" should equal itself\",\n              namedTypeI.isEquivalentTo(namedTypeI));\n          assertTrue(\"Proxy \" + typeI + \" should equal itself\",\n              proxyTypeI.isEquivalentTo(proxyTypeI));\n        } else {\n          assertFalse(typeI + \" should not equal \" + typeJ,\n              typeI.isEquivalentTo(typeJ));\n          assertFalse(\"Named \" + typeI + \" should not equal \" + typeJ,\n              namedTypeI.isEquivalentTo(namedTypeJ));\n          assertFalse(\"Proxy \" + typeI + \" should not equal \" + typeJ,\n              proxyTypeI.isEquivalentTo(proxyTypeJ));\n        }\n\n        if (checkSubtyping) {\n          if (i <= j) {\n            assertTrue(typeJ + \" should be a subtype of \" + typeI,\n                typeJ.isSubtype(typeI));\n            assertTrue(\n                \"Named \" + typeJ + \" should be a subtype of Named \" + typeI,\n                namedTypeJ.isSubtype(namedTypeI));\n            assertTrue(\n                \"Proxy \" + typeJ + \" should be a subtype of Proxy \" + typeI,\n                proxyTypeJ.isSubtype(proxyTypeI));\n          } else {\n            assertFalse(typeJ + \" should not be a subtype of \" + typeI,\n                typeJ.isSubtype(typeI));\n            assertFalse(\n                \"Named \" + typeJ + \" should not be a subtype of Named \" + typeI,\n                namedTypeJ.isSubtype(namedTypeI));\n            assertFalse(\n                \"Named \" + typeJ + \" should not be a subtype of Named \" + typeI,\n                proxyTypeJ.isSubtype(proxyTypeI));\n          }\n\n          JSType expectedSupremum = i < j ? typeI : typeJ;\n          JSType expectedInfimum = i > j ? typeI : typeJ;\n\n          assertTypeEquals(\n              expectedSupremum + \" should be the least supertype of \" + typeI +\n              \" and \" + typeJ,\n              expectedSupremum, typeI.getLeastSupertype(typeJ));\n\n          // TODO(nicksantos): Should these tests pass?\n          //assertTypeEquals(\n          //    expectedSupremum + \" should be the least supertype of Named \" +\n          //    typeI + \" and Named \" + typeJ,\n          //    expectedSupremum, namedTypeI.getLeastSupertype(namedTypeJ));\n          //assertTypeEquals(\n          //    expectedSupremum + \" should be the least supertype of Proxy \" +\n          //    typeI + \" and Proxy \" + typeJ,\n          //    expectedSupremum, proxyTypeI.getLeastSupertype(proxyTypeJ));\n\n          assertTypeEquals(\n              expectedInfimum + \" should be the greatest subtype of \" + typeI +\n              \" and \" + typeJ,\n              expectedInfimum, typeI.getGreatestSubtype(typeJ));\n\n          // TODO(nicksantos): Should these tests pass?\n          //assertTypeEquals(\n          //    expectedInfimum + \" should be the greatest subtype of Named \" +\n          //    typeI + \" and Named \" + typeJ,\n          //    expectedInfimum, namedTypeI.getGreatestSubtype(namedTypeJ));\n          //assertTypeEquals(\n          //    expectedInfimum + \" should be the greatest subtype of Proxy \" +\n          //    typeI + \" and Proxy \" + typeJ,\n          //    expectedInfimum, proxyTypeI.getGreatestSubtype(proxyTypeJ));\n        }\n      }\n    }\n  }\n",
        "begin_line": 5110,
        "end_line": 5196,
        "comment": "",
        "child_ranges": [
            "(line 5114,col 5)-(line 5195,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.getNamedWrapper(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  JSType getNamedWrapper(String name, JSType jstype) {\n    // Normally, there is no way to create a Named NoType alias so\n    // avoid confusing things by doing it here..\n    if (!jstype.isNoType()) {\n      NamedType namedWrapper = new NamedType(\n          registry, name, \"[testcode]\", -1, -1);\n      namedWrapper.setReferencedType(jstype);\n      return namedWrapper;\n    } else {\n      return jstype;\n    }\n  }\n",
        "begin_line": 5198,
        "end_line": 5209,
        "comment": "",
        "child_ranges": [
            "(line 5201,col 5)-(line 5208,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRestrictedTypeGivenToBoolean()",
        "snippet": "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean() {\n    // simple cases\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));\n    assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));\n  }\n",
        "begin_line": 5215,
        "end_line": 5282,
        "comment": "\n   * Tests the behavior of\n   * {@link JSType#getRestrictedTypeGivenToBooleanOutcome(boolean)}.\n   ",
        "child_ranges": [
            "(line 5218,col 5)-(line 5219,col 67)",
            "(line 5220,col 5)-(line 5221,col 68)",
            "(line 5223,col 5)-(line 5224,col 64)",
            "(line 5225,col 5)-(line 5226,col 65)",
            "(line 5228,col 5)-(line 5229,col 66)",
            "(line 5230,col 5)-(line 5231,col 67)",
            "(line 5233,col 5)-(line 5234,col 66)",
            "(line 5235,col 5)-(line 5236,col 67)",
            "(line 5238,col 5)-(line 5239,col 73)",
            "(line 5240,col 5)-(line 5241,col 74)",
            "(line 5243,col 5)-(line 5244,col 64)",
            "(line 5245,col 5)-(line 5246,col 65)",
            "(line 5248,col 5)-(line 5249,col 69)",
            "(line 5250,col 5)-(line 5251,col 70)",
            "(line 5253,col 5)-(line 5254,col 62)",
            "(line 5255,col 5)-(line 5256,col 63)",
            "(line 5258,col 5)-(line 5259,col 63)",
            "(line 5260,col 5)-(line 5261,col 64)",
            "(line 5263,col 5)-(line 5264,col 67)",
            "(line 5265,col 5)-(line 5266,col 68)",
            "(line 5269,col 5)-(line 5270,col 52)",
            "(line 5271,col 5)-(line 5272,col 74)",
            "(line 5273,col 5)-(line 5274,col 75)",
            "(line 5276,col 5)-(line 5277,col 59)",
            "(line 5278,col 5)-(line 5279,col 75)",
            "(line 5280,col 5)-(line 5281,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRegisterProperty()",
        "snippet": "  public void testRegisterProperty() {\n    int i = 0;\n    List<JSType> allObjects = Lists.newArrayList();\n    for (JSType type : types) {\n      String propName = \"ALF\" + i++;\n      if (type instanceof ObjectType) {\n\n        ObjectType objType = (ObjectType) type;\n        objType.defineDeclaredProperty(propName, UNKNOWN_TYPE, null);\n        objType.defineDeclaredProperty(\"allHaz\", UNKNOWN_TYPE, null);\n\n        assertTypeEquals(type,\n            registry.getGreatestSubtypeWithProperty(type, propName));\n\n        List<JSType> typesWithProp =\n            Lists.newArrayList(registry.getTypesWithProperty(propName));\n        String message = type.toString();\n        assertEquals(message, 1, typesWithProp.size());\n        assertTypeEquals(type, typesWithProp.get(0));\n\n        assertTypeEquals(NO_TYPE,\n            registry.getGreatestSubtypeWithProperty(type, \"GRRR\"));\n        allObjects.add(type);\n      }\n    }\n    assertTypeListEquals(registry.getTypesWithProperty(\"GRRR\"),\n        Lists.newArrayList(NO_TYPE));\n    assertTypeListEquals(allObjects,\n        registry.getTypesWithProperty(\"allHaz\"));\n  }\n",
        "begin_line": 5284,
        "end_line": 5313,
        "comment": "",
        "child_ranges": [
            "(line 5285,col 5)-(line 5285,col 14)",
            "(line 5286,col 5)-(line 5286,col 51)",
            "(line 5287,col 5)-(line 5308,col 5)",
            "(line 5309,col 5)-(line 5310,col 37)",
            "(line 5311,col 5)-(line 5312,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testRegisterPropertyMemoization()",
        "snippet": "  public void testRegisterPropertyMemoization() {\n    ObjectType derived1 = registry.createObjectType(\"d1\", null, namedGoogBar);\n    ObjectType derived2 = registry.createObjectType(\"d2\", null, namedGoogBar);\n\n    derived1.defineDeclaredProperty(\"propz\", UNKNOWN_TYPE, null);\n\n    assertTypeEquals(derived1,\n        registry.getGreatestSubtypeWithProperty(derived1, \"propz\"));\n    assertTypeEquals(NO_OBJECT_TYPE,\n        registry.getGreatestSubtypeWithProperty(derived2, \"propz\"));\n\n    derived2.defineDeclaredProperty(\"propz\", UNKNOWN_TYPE, null);\n\n    assertTypeEquals(derived1,\n        registry.getGreatestSubtypeWithProperty(derived1, \"propz\"));\n    assertTypeEquals(derived2,\n        registry.getGreatestSubtypeWithProperty(derived2, \"propz\"));\n  }\n",
        "begin_line": 5315,
        "end_line": 5332,
        "comment": "",
        "child_ranges": [
            "(line 5316,col 5)-(line 5316,col 78)",
            "(line 5317,col 5)-(line 5317,col 78)",
            "(line 5319,col 5)-(line 5319,col 65)",
            "(line 5321,col 5)-(line 5322,col 68)",
            "(line 5323,col 5)-(line 5324,col 68)",
            "(line 5326,col 5)-(line 5326,col 65)",
            "(line 5328,col 5)-(line 5329,col 68)",
            "(line 5330,col 5)-(line 5331,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGreatestSubtypeWithProperty()",
        "snippet": "  public void testGreatestSubtypeWithProperty() {\n    ObjectType foo = registry.createObjectType(\"foo\", null, OBJECT_TYPE);\n    ObjectType bar = registry.createObjectType(\"bar\", null, namedGoogBar);\n\n    foo.defineDeclaredProperty(\"propz\", UNKNOWN_TYPE, null);\n    bar.defineDeclaredProperty(\"propz\", UNKNOWN_TYPE, null);\n\n    assertTypeEquals(bar,\n        registry.getGreatestSubtypeWithProperty(namedGoogBar, \"propz\"));\n  }\n",
        "begin_line": 5338,
        "end_line": 5347,
        "comment": "\n   * Tests\n   * {@link JSTypeRegistry#getGreatestSubtypeWithProperty(JSType, String)}.\n   ",
        "child_ranges": [
            "(line 5339,col 5)-(line 5339,col 73)",
            "(line 5340,col 5)-(line 5340,col 74)",
            "(line 5342,col 5)-(line 5342,col 60)",
            "(line 5343,col 5)-(line 5343,col 60)",
            "(line 5345,col 5)-(line 5346,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGoodSetPrototypeBasedOn()",
        "snippet": "  public void testGoodSetPrototypeBasedOn() {\n    FunctionType fun = registry.createConstructorType(\"fun\", null, null, null);\n    fun.setPrototypeBasedOn(unresolvedNamedType);\n    assertTrue(fun.getInstanceType().isUnknownType());\n  }\n",
        "begin_line": 5349,
        "end_line": 5353,
        "comment": "",
        "child_ranges": [
            "(line 5350,col 5)-(line 5350,col 79)",
            "(line 5351,col 5)-(line 5351,col 49)",
            "(line 5352,col 5)-(line 5352,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testLateSetPrototypeBasedOn()",
        "snippet": "  public void testLateSetPrototypeBasedOn() {\n    FunctionType fun = registry.createConstructorType(\"fun\", null, null, null);\n    assertFalse(fun.getInstanceType().isUnknownType());\n\n    fun.setPrototypeBasedOn(unresolvedNamedType);\n    assertTrue(fun.getInstanceType().isUnknownType());\n  }\n",
        "begin_line": 5355,
        "end_line": 5361,
        "comment": "",
        "child_ranges": [
            "(line 5356,col 5)-(line 5356,col 79)",
            "(line 5357,col 5)-(line 5357,col 55)",
            "(line 5359,col 5)-(line 5359,col 49)",
            "(line 5360,col 5)-(line 5360,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypeUnderEquality1()",
        "snippet": "  public void testGetTypeUnderEquality1() {\n    for (JSType type : types) {\n      testGetTypeUnderEquality(type, type, type, type);\n    }\n  }\n",
        "begin_line": 5363,
        "end_line": 5367,
        "comment": "",
        "child_ranges": [
            "(line 5364,col 5)-(line 5366,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderEquality2()",
        "snippet": "  public void testGetTypesUnderEquality2() {\n    // objects can be equal to numbers\n    testGetTypeUnderEquality(\n        NUMBER_TYPE, OBJECT_TYPE,\n        NUMBER_TYPE, OBJECT_TYPE);\n  }\n",
        "begin_line": 5369,
        "end_line": 5374,
        "comment": "",
        "child_ranges": [
            "(line 5371,col 5)-(line 5373,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderEquality3()",
        "snippet": "  public void testGetTypesUnderEquality3() {\n    // null == undefined\n    testGetTypeUnderEquality(\n        NULL_TYPE, VOID_TYPE,\n        NULL_TYPE, VOID_TYPE);\n  }\n",
        "begin_line": 5376,
        "end_line": 5381,
        "comment": "",
        "child_ranges": [
            "(line 5378,col 5)-(line 5380,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderEquality4()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testGetTypesUnderEquality4() {\n    // (number,string) and number/string\n    UnionType stringNumber =\n        (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);\n    testGetTypeUnderEquality(\n        stringNumber, STRING_TYPE,\n        stringNumber, STRING_TYPE);\n    testGetTypeUnderEquality(\n        stringNumber, NUMBER_TYPE,\n        stringNumber, NUMBER_TYPE);\n  }\n",
        "begin_line": 5383,
        "end_line": 5394,
        "comment": "",
        "child_ranges": [
            "(line 5386,col 5)-(line 5387,col 62)",
            "(line 5388,col 5)-(line 5390,col 35)",
            "(line 5391,col 5)-(line 5393,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderEquality5()",
        "snippet": "  public void testGetTypesUnderEquality5() {\n    // (number,null) and undefined\n    JSType nullUndefined = createUnionType(VOID_TYPE, NULL_TYPE);\n    testGetTypeUnderEquality(\n        nullUndefined, NULL_TYPE,\n        nullUndefined, NULL_TYPE);\n    testGetTypeUnderEquality(\n        nullUndefined, VOID_TYPE,\n        nullUndefined, VOID_TYPE);\n  }\n",
        "begin_line": 5396,
        "end_line": 5405,
        "comment": "",
        "child_ranges": [
            "(line 5398,col 5)-(line 5398,col 65)",
            "(line 5399,col 5)-(line 5401,col 34)",
            "(line 5402,col 5)-(line 5404,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderEquality6()",
        "snippet": "  public void testGetTypesUnderEquality6() {\n    // (number,undefined,null) == null\n    JSType optNullNumber = createUnionType(VOID_TYPE, NULL_TYPE, NUMBER_TYPE);\n    testGetTypeUnderEquality(\n        optNullNumber, NULL_TYPE,\n        createUnionType(NULL_TYPE, VOID_TYPE), NULL_TYPE);\n  }\n",
        "begin_line": 5407,
        "end_line": 5413,
        "comment": "",
        "child_ranges": [
            "(line 5409,col 5)-(line 5409,col 78)",
            "(line 5410,col 5)-(line 5412,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypeUnderEquality(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void testGetTypeUnderEquality(\n      JSType t1, JSType t2, JSType t1Eq, JSType t2Eq) {\n    // creating the pairs\n    TypePair p12 = t1.getTypesUnderEquality(t2);\n    TypePair p21 = t2.getTypesUnderEquality(t1);\n\n    // t1Eq\n    assertTypeEquals(t1Eq, p12.typeA);\n    assertTypeEquals(t1Eq, p21.typeB);\n\n    // t2Eq\n    assertTypeEquals(t2Eq, p12.typeB);\n    assertTypeEquals(t2Eq, p21.typeA);\n  }\n",
        "begin_line": 5415,
        "end_line": 5428,
        "comment": "",
        "child_ranges": [
            "(line 5418,col 5)-(line 5418,col 48)",
            "(line 5419,col 5)-(line 5419,col 48)",
            "(line 5422,col 5)-(line 5422,col 38)",
            "(line 5423,col 5)-(line 5423,col 38)",
            "(line 5426,col 5)-(line 5426,col 38)",
            "(line 5427,col 5)-(line 5427,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderInequality1()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testGetTypesUnderInequality1() {\n    // objects can be not equal to numbers\n    UnionType numberObject =\n        (UnionType) createUnionType(NUMBER_TYPE, OBJECT_TYPE);\n    testGetTypesUnderInequality(\n        numberObject, NUMBER_TYPE,\n        numberObject, NUMBER_TYPE);\n    testGetTypesUnderInequality(\n        numberObject, OBJECT_TYPE,\n        numberObject, OBJECT_TYPE);\n  }\n",
        "begin_line": 5430,
        "end_line": 5441,
        "comment": "",
        "child_ranges": [
            "(line 5433,col 5)-(line 5434,col 62)",
            "(line 5435,col 5)-(line 5437,col 35)",
            "(line 5438,col 5)-(line 5440,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderInequality2()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testGetTypesUnderInequality2() {\n    // null == undefined\n    UnionType nullUndefined =\n        (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);\n    testGetTypesUnderInequality(\n        nullUndefined, NULL_TYPE,\n        NO_TYPE, NO_TYPE);\n    testGetTypesUnderInequality(\n        nullUndefined, VOID_TYPE,\n        NO_TYPE, NO_TYPE);\n  }\n",
        "begin_line": 5443,
        "end_line": 5454,
        "comment": "",
        "child_ranges": [
            "(line 5446,col 5)-(line 5447,col 58)",
            "(line 5448,col 5)-(line 5450,col 26)",
            "(line 5451,col 5)-(line 5453,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderInequality3()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testGetTypesUnderInequality3() {\n    // (number,string)\n    UnionType stringNumber =\n        (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);\n    testGetTypesUnderInequality(\n        stringNumber, NUMBER_TYPE,\n        stringNumber, NUMBER_TYPE);\n    testGetTypesUnderInequality(\n        stringNumber, STRING_TYPE,\n        stringNumber, STRING_TYPE);\n  }\n",
        "begin_line": 5456,
        "end_line": 5467,
        "comment": "",
        "child_ranges": [
            "(line 5459,col 5)-(line 5460,col 62)",
            "(line 5461,col 5)-(line 5463,col 35)",
            "(line 5464,col 5)-(line 5466,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderInequality4()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testGetTypesUnderInequality4() throws Exception {\n    // (number,undefined,null) and null\n    UnionType nullableOptionalNumber =\n        (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);\n    testGetTypesUnderInequality(\n        nullableOptionalNumber, NULL_TYPE,\n        NUMBER_TYPE, NULL_TYPE);\n  }\n",
        "begin_line": 5469,
        "end_line": 5477,
        "comment": "",
        "child_ranges": [
            "(line 5472,col 5)-(line 5473,col 71)",
            "(line 5474,col 5)-(line 5476,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetTypesUnderInequality(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void testGetTypesUnderInequality(\n      JSType t1, JSType t2, JSType t1Eq, JSType t2Eq) {\n    // creating the pairs\n    TypePair p12 = t1.getTypesUnderInequality(t2);\n    TypePair p21 = t2.getTypesUnderInequality(t1);\n\n    // t1Eq\n    assertTypeEquals(t1Eq, p12.typeA);\n    assertTypeEquals(t1Eq, p21.typeB);\n\n    // t2Eq\n    assertTypeEquals(t2Eq, p12.typeB);\n    assertTypeEquals(t2Eq, p21.typeA);\n  }\n",
        "begin_line": 5479,
        "end_line": 5492,
        "comment": "",
        "child_ranges": [
            "(line 5482,col 5)-(line 5482,col 50)",
            "(line 5483,col 5)-(line 5483,col 50)",
            "(line 5486,col 5)-(line 5486,col 38)",
            "(line 5487,col 5)-(line 5487,col 38)",
            "(line 5490,col 5)-(line 5490,col 38)",
            "(line 5491,col 5)-(line 5491,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testCreateRecordType()",
        "snippet": "  public void testCreateRecordType() throws Exception {\n    Map<String, RecordProperty> properties =\n        new HashMap<String, RecordProperty>();\n    properties.put(\"hello\", new RecordProperty(NUMBER_TYPE, null));\n\n    JSType recordType = registry.createRecordType(properties);\n    assertEquals(\"{hello: number}\", recordType.toString());\n  }\n",
        "begin_line": 5499,
        "end_line": 5506,
        "comment": "\n   * Tests the factory method\n   * {@link JSTypeRegistry#createRecordType}.\n   ",
        "child_ranges": [
            "(line 5500,col 5)-(line 5501,col 46)",
            "(line 5502,col 5)-(line 5502,col 67)",
            "(line 5504,col 5)-(line 5504,col 62)",
            "(line 5505,col 5)-(line 5505,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testCreateOptionalType()",
        "snippet": "  public void testCreateOptionalType() throws Exception {\n    // number\n    UnionType optNumber = (UnionType) registry.createOptionalType(NUMBER_TYPE);\n    assertUnionContains(optNumber, NUMBER_TYPE);\n    assertUnionContains(optNumber, VOID_TYPE);\n\n    // union\n    UnionType optUnion =\n        (UnionType) registry.createOptionalType(\n            createUnionType(STRING_OBJECT_TYPE, DATE_TYPE));\n    assertUnionContains(optUnion, DATE_TYPE);\n    assertUnionContains(optUnion, STRING_OBJECT_TYPE);\n    assertUnionContains(optUnion, VOID_TYPE);\n  }\n",
        "begin_line": 5511,
        "end_line": 5524,
        "comment": "\n   * Tests the factory method {@link JSTypeRegistry#createOptionalType(JSType)}.\n   ",
        "child_ranges": [
            "(line 5513,col 5)-(line 5513,col 79)",
            "(line 5514,col 5)-(line 5514,col 48)",
            "(line 5515,col 5)-(line 5515,col 46)",
            "(line 5518,col 5)-(line 5520,col 60)",
            "(line 5521,col 5)-(line 5521,col 45)",
            "(line 5522,col 5)-(line 5522,col 54)",
            "(line 5523,col 5)-(line 5523,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertUnionContains(com.google.javascript.rhino.jstype.UnionType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void assertUnionContains(UnionType union, JSType type) {\n    assertTrue(union + \" should contain \" + type, union.contains(type));\n  }\n",
        "begin_line": 5526,
        "end_line": 5528,
        "comment": "",
        "child_ranges": [
            "(line 5527,col 5)-(line 5527,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testCreateAnonymousObjectType()",
        "snippet": "  public void testCreateAnonymousObjectType() throws Exception {\n    // anonymous\n    ObjectType anonymous = registry.createAnonymousObjectType();\n    assertTypeEquals(OBJECT_TYPE, anonymous.getImplicitPrototype());\n    assertNull(anonymous.getReferenceName());\n    assertEquals(\"{}\", anonymous.toString());\n  }\n",
        "begin_line": 5534,
        "end_line": 5540,
        "comment": "\n   * Tests the factory method\n   * {@link JSTypeRegistry#createAnonymousObjectType()}}.\n   ",
        "child_ranges": [
            "(line 5536,col 5)-(line 5536,col 64)",
            "(line 5537,col 5)-(line 5537,col 68)",
            "(line 5538,col 5)-(line 5538,col 45)",
            "(line 5539,col 5)-(line 5539,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testCreateAnonymousObjectType2()",
        "snippet": "  public void testCreateAnonymousObjectType2() throws Exception {\n    // anonymous\n    ObjectType anonymous = registry.createAnonymousObjectType();\n    anonymous.defineDeclaredProperty(\n        \"a\", NUMBER_TYPE, null);\n    anonymous.defineDeclaredProperty(\n        \"b\", NUMBER_TYPE, null);\n    anonymous.defineDeclaredProperty(\n        \"c\", NUMBER_TYPE, null);\n    anonymous.defineDeclaredProperty(\n        \"d\", NUMBER_TYPE, null);\n    anonymous.defineDeclaredProperty(\n        \"e\", NUMBER_TYPE, null);\n    anonymous.defineDeclaredProperty(\n        \"f\", NUMBER_TYPE, null);\n    assertEquals(\"{a: number, b: number, c: number, d: number, ...}\",\n        anonymous.toString());\n  }\n",
        "begin_line": 5547,
        "end_line": 5564,
        "comment": "\n   * Tests the factory method\n   * {@link JSTypeRegistry#createAnonymousObjectType()}} and adds\n   * some properties to it.\n   ",
        "child_ranges": [
            "(line 5549,col 5)-(line 5549,col 64)",
            "(line 5550,col 5)-(line 5551,col 32)",
            "(line 5552,col 5)-(line 5553,col 32)",
            "(line 5554,col 5)-(line 5555,col 32)",
            "(line 5556,col 5)-(line 5557,col 32)",
            "(line 5558,col 5)-(line 5559,col 32)",
            "(line 5560,col 5)-(line 5561,col 32)",
            "(line 5562,col 5)-(line 5563,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testCreateObjectType()",
        "snippet": "  public void testCreateObjectType() throws Exception {\n    // simple\n    ObjectType subDate =\n        registry.createObjectType(DATE_TYPE.getImplicitPrototype());\n    assertTypeEquals(DATE_TYPE.getImplicitPrototype(),\n        subDate.getImplicitPrototype());\n    assertNull(subDate.getReferenceName());\n    assertEquals(\"{...}\", subDate.toString());\n\n    // name, node, prototype\n    ObjectType subError = registry.createObjectType(\"Foo\", null,\n        ERROR_TYPE.getImplicitPrototype());\n    assertTypeEquals(ERROR_TYPE.getImplicitPrototype(),\n        subError.getImplicitPrototype());\n    assertEquals(\"Foo\", subError.getReferenceName());\n  }\n",
        "begin_line": 5571,
        "end_line": 5586,
        "comment": "\n   * Tests the factory methods\n   * {@link JSTypeRegistry#createObjectType(ObjectType)}} and\n   * {@link JSTypeRegistry#createObjectType(String, Node, ObjectType)}}.\n   ",
        "child_ranges": [
            "(line 5573,col 5)-(line 5574,col 68)",
            "(line 5575,col 5)-(line 5576,col 40)",
            "(line 5577,col 5)-(line 5577,col 43)",
            "(line 5578,col 5)-(line 5578,col 46)",
            "(line 5581,col 5)-(line 5582,col 43)",
            "(line 5583,col 5)-(line 5584,col 41)",
            "(line 5585,col 5)-(line 5585,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testBug903110()",
        "snippet": "  @SuppressWarnings(\"checked\")\n  public void testBug903110() throws Exception {\n    UnionType union =\n        (UnionType) createUnionType(U2U_CONSTRUCTOR_TYPE, VOID_TYPE);\n    assertTrue(VOID_TYPE.isSubtype(union));\n    assertTrue(U2U_CONSTRUCTOR_TYPE.isSubtype(union));\n    assertTrue(union.isSubtype(union));\n  }\n",
        "begin_line": 5591,
        "end_line": 5598,
        "comment": "\n   * Tests {@code (U2U_CONSTRUCTOR,undefined) <: (U2U_CONSTRUCTOR,undefined)}.\n   ",
        "child_ranges": [
            "(line 5593,col 5)-(line 5594,col 69)",
            "(line 5595,col 5)-(line 5595,col 43)",
            "(line 5596,col 5)-(line 5596,col 54)",
            "(line 5597,col 5)-(line 5597,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testBug904123()",
        "snippet": "  public void testBug904123() throws Exception {\n    assertTrue(U2U_FUNCTION_TYPE.isSubtype(U2U_CONSTRUCTOR_TYPE));\n    assertTrue(U2U_FUNCTION_TYPE.\n        isSubtype(createOptionalType(U2U_CONSTRUCTOR_TYPE)));\n  }\n",
        "begin_line": 5604,
        "end_line": 5608,
        "comment": "\n   * Tests {@code U2U_FUNCTION_TYPE <: U2U_CONSTRUCTOR} and\n   * {@code U2U_FUNCTION_TYPE <: (U2U_CONSTRUCTOR,undefined)}.\n   ",
        "child_ranges": [
            "(line 5605,col 5)-(line 5605,col 66)",
            "(line 5606,col 5)-(line 5607,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertTypeCanAssignToItself(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void assertTypeCanAssignToItself(JSType type) {\n    assertTrue(type.canAssignTo(type));\n  }\n",
        "begin_line": 5613,
        "end_line": 5615,
        "comment": "\n   * Assert that a type can assign to itself.\n   ",
        "child_ranges": [
            "(line 5614,col 5)-(line 5614,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testHasOwnProperty()",
        "snippet": "  public void testHasOwnProperty() throws Exception {\n    ObjectType sup =\n        registry.createObjectType(registry.createAnonymousObjectType());\n    ObjectType sub = registry.createObjectType(sup);\n\n    sup.defineProperty(\"base\", null, false, null);\n    sub.defineProperty(\"sub\", null, false, null);\n\n    assertTrue(sup.hasProperty(\"base\"));\n    assertFalse(sup.hasProperty(\"sub\"));\n    assertTrue(sup.hasOwnProperty(\"base\"));\n    assertFalse(sup.hasOwnProperty(\"sub\"));\n    assertFalse(sup.hasOwnProperty(\"none\"));\n\n    assertTrue(sub.hasProperty(\"base\"));\n    assertTrue(sub.hasProperty(\"sub\"));\n    assertFalse(sub.hasOwnProperty(\"base\"));\n    assertTrue(sub.hasOwnProperty(\"sub\"));\n    assertFalse(sub.hasOwnProperty(\"none\"));\n  }\n",
        "begin_line": 5622,
        "end_line": 5641,
        "comment": "\n   * Tests that hasOwnProperty returns true when a property is defined directly\n   * on a class and false if the property is defined on the supertype or not at\n   * all.\n   ",
        "child_ranges": [
            "(line 5623,col 5)-(line 5624,col 72)",
            "(line 5625,col 5)-(line 5625,col 52)",
            "(line 5627,col 5)-(line 5627,col 50)",
            "(line 5628,col 5)-(line 5628,col 49)",
            "(line 5630,col 5)-(line 5630,col 40)",
            "(line 5631,col 5)-(line 5631,col 40)",
            "(line 5632,col 5)-(line 5632,col 43)",
            "(line 5633,col 5)-(line 5633,col 43)",
            "(line 5634,col 5)-(line 5634,col 44)",
            "(line 5636,col 5)-(line 5636,col 40)",
            "(line 5637,col 5)-(line 5637,col 39)",
            "(line 5638,col 5)-(line 5638,col 44)",
            "(line 5639,col 5)-(line 5639,col 42)",
            "(line 5640,col 5)-(line 5640,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testNamedTypeHasOwnProperty()",
        "snippet": "  public void testNamedTypeHasOwnProperty() throws Exception {\n    namedGoogBar.getImplicitPrototype().defineProperty(\"base\", null, false,\n        null);\n    namedGoogBar.defineProperty(\"sub\", null, false, null);\n\n    assertFalse(namedGoogBar.hasOwnProperty(\"base\"));\n    assertTrue(namedGoogBar.hasProperty(\"base\"));\n    assertTrue(namedGoogBar.hasOwnProperty(\"sub\"));\n    assertTrue(namedGoogBar.hasProperty(\"sub\"));\n  }\n",
        "begin_line": 5643,
        "end_line": 5652,
        "comment": "",
        "child_ranges": [
            "(line 5644,col 5)-(line 5645,col 14)",
            "(line 5646,col 5)-(line 5646,col 58)",
            "(line 5648,col 5)-(line 5648,col 53)",
            "(line 5649,col 5)-(line 5649,col 49)",
            "(line 5650,col 5)-(line 5650,col 51)",
            "(line 5651,col 5)-(line 5651,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testInterfaceHasOwnProperty()",
        "snippet": "  public void testInterfaceHasOwnProperty() throws Exception {\n    interfaceInstType.defineProperty(\"base\", null, false, null);\n    subInterfaceInstType.defineProperty(\"sub\", null, false, null);\n\n    assertTrue(interfaceInstType.hasProperty(\"base\"));\n    assertFalse(interfaceInstType.hasProperty(\"sub\"));\n    assertTrue(interfaceInstType.hasOwnProperty(\"base\"));\n    assertFalse(interfaceInstType.hasOwnProperty(\"sub\"));\n    assertFalse(interfaceInstType.hasOwnProperty(\"none\"));\n\n    assertTrue(subInterfaceInstType.hasProperty(\"base\"));\n    assertTrue(subInterfaceInstType.hasProperty(\"sub\"));\n    assertFalse(subInterfaceInstType.hasOwnProperty(\"base\"));\n    assertTrue(subInterfaceInstType.hasOwnProperty(\"sub\"));\n    assertFalse(subInterfaceInstType.hasOwnProperty(\"none\"));\n  }\n",
        "begin_line": 5654,
        "end_line": 5669,
        "comment": "",
        "child_ranges": [
            "(line 5655,col 5)-(line 5655,col 64)",
            "(line 5656,col 5)-(line 5656,col 66)",
            "(line 5658,col 5)-(line 5658,col 54)",
            "(line 5659,col 5)-(line 5659,col 54)",
            "(line 5660,col 5)-(line 5660,col 57)",
            "(line 5661,col 5)-(line 5661,col 57)",
            "(line 5662,col 5)-(line 5662,col 58)",
            "(line 5664,col 5)-(line 5664,col 57)",
            "(line 5665,col 5)-(line 5665,col 56)",
            "(line 5666,col 5)-(line 5666,col 61)",
            "(line 5667,col 5)-(line 5667,col 59)",
            "(line 5668,col 5)-(line 5668,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetPropertyNames()",
        "snippet": "  public void testGetPropertyNames() throws Exception {\n    ObjectType sup =\n        registry.createObjectType(registry.createAnonymousObjectType());\n    ObjectType sub = registry.createObjectType(sup);\n\n    sup.defineProperty(\"base\", null, false, null);\n    sub.defineProperty(\"sub\", null, false, null);\n\n    assertEquals(Sets.newHashSet(\"isPrototypeOf\", \"toLocaleString\",\n          \"propertyIsEnumerable\", \"toString\", \"valueOf\", \"hasOwnProperty\",\n          \"constructor\", \"base\", \"sub\"), sub.getPropertyNames());\n    assertEquals(Sets.newHashSet(\"isPrototypeOf\", \"toLocaleString\",\n          \"propertyIsEnumerable\", \"toString\", \"valueOf\", \"hasOwnProperty\",\n          \"constructor\", \"base\"), sup.getPropertyNames());\n\n    assertEquals(Sets.newHashSet(), NO_OBJECT_TYPE.getPropertyNames());\n  }\n",
        "begin_line": 5671,
        "end_line": 5687,
        "comment": "",
        "child_ranges": [
            "(line 5672,col 5)-(line 5673,col 72)",
            "(line 5674,col 5)-(line 5674,col 52)",
            "(line 5676,col 5)-(line 5676,col 50)",
            "(line 5677,col 5)-(line 5677,col 49)",
            "(line 5679,col 5)-(line 5681,col 65)",
            "(line 5682,col 5)-(line 5684,col 58)",
            "(line 5686,col 5)-(line 5686,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetAndSetJSDocInfoWithNamedType()",
        "snippet": "  public void testGetAndSetJSDocInfoWithNamedType() throws Exception {\n    JSDocInfo info = new JSDocInfo();\n    info.setDeprecated(true);\n\n    assertNull(namedGoogBar.getOwnPropertyJSDocInfo(\"X\"));\n    namedGoogBar.setPropertyJSDocInfo(\"X\", info);\n    assertTrue(namedGoogBar.getOwnPropertyJSDocInfo(\"X\").isDeprecated());\n    assertPropertyTypeInferred(namedGoogBar, \"X\");\n    assertTypeEquals(UNKNOWN_TYPE, namedGoogBar.getPropertyType(\"X\"));\n  }\n",
        "begin_line": 5689,
        "end_line": 5698,
        "comment": "",
        "child_ranges": [
            "(line 5690,col 5)-(line 5690,col 37)",
            "(line 5691,col 5)-(line 5691,col 29)",
            "(line 5693,col 5)-(line 5693,col 58)",
            "(line 5694,col 5)-(line 5694,col 49)",
            "(line 5695,col 5)-(line 5695,col 73)",
            "(line 5696,col 5)-(line 5696,col 50)",
            "(line 5697,col 5)-(line 5697,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetAndSetJSDocInfoWithObjectTypes()",
        "snippet": "  public void testGetAndSetJSDocInfoWithObjectTypes() throws Exception {\n    ObjectType sup =\n        registry.createObjectType(registry.createAnonymousObjectType());\n    ObjectType sub = registry.createObjectType(sup);\n\n    JSDocInfo deprecated = new JSDocInfo();\n    deprecated.setDeprecated(true);\n\n    JSDocInfo privateInfo = new JSDocInfo();\n    privateInfo.setVisibility(Visibility.PRIVATE);\n\n    sup.defineProperty(\"X\", NUMBER_TYPE, false, null);\n    sup.setPropertyJSDocInfo(\"X\", privateInfo);\n\n    sub.setPropertyJSDocInfo(\"X\", deprecated);\n\n    assertFalse(sup.getOwnPropertyJSDocInfo(\"X\").isDeprecated());\n    assertEquals(Visibility.PRIVATE,\n        sup.getOwnPropertyJSDocInfo(\"X\").getVisibility());\n    assertTypeEquals(NUMBER_TYPE, sup.getPropertyType(\"X\"));\n    assertTrue(sub.getOwnPropertyJSDocInfo(\"X\").isDeprecated());\n    assertNull(sub.getOwnPropertyJSDocInfo(\"X\").getVisibility());\n    assertTypeEquals(NUMBER_TYPE, sub.getPropertyType(\"X\"));\n  }\n",
        "begin_line": 5700,
        "end_line": 5723,
        "comment": "",
        "child_ranges": [
            "(line 5701,col 5)-(line 5702,col 72)",
            "(line 5703,col 5)-(line 5703,col 52)",
            "(line 5705,col 5)-(line 5705,col 43)",
            "(line 5706,col 5)-(line 5706,col 35)",
            "(line 5708,col 5)-(line 5708,col 44)",
            "(line 5709,col 5)-(line 5709,col 50)",
            "(line 5711,col 5)-(line 5711,col 54)",
            "(line 5712,col 5)-(line 5712,col 47)",
            "(line 5714,col 5)-(line 5714,col 46)",
            "(line 5716,col 5)-(line 5716,col 65)",
            "(line 5717,col 5)-(line 5718,col 58)",
            "(line 5719,col 5)-(line 5719,col 60)",
            "(line 5720,col 5)-(line 5720,col 64)",
            "(line 5721,col 5)-(line 5721,col 65)",
            "(line 5722,col 5)-(line 5722,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testGetAndSetJSDocInfoWithNoType()",
        "snippet": "  public void testGetAndSetJSDocInfoWithNoType() throws Exception {\n    JSDocInfo deprecated = new JSDocInfo();\n    deprecated.setDeprecated(true);\n\n    NO_TYPE.setPropertyJSDocInfo(\"X\", deprecated);\n    assertNull(NO_TYPE.getOwnPropertyJSDocInfo(\"X\"));\n  }\n",
        "begin_line": 5725,
        "end_line": 5731,
        "comment": "",
        "child_ranges": [
            "(line 5726,col 5)-(line 5726,col 43)",
            "(line 5727,col 5)-(line 5727,col 35)",
            "(line 5729,col 5)-(line 5729,col 50)",
            "(line 5730,col 5)-(line 5730,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testObjectGetSubTypes()",
        "snippet": "  public void testObjectGetSubTypes() throws Exception {\n    assertTrue(\n        containsType(\n            OBJECT_FUNCTION_TYPE.getSubTypes(), googBar));\n    assertTrue(\n        containsType(\n            googBar.getSubTypes(), googSubBar));\n    assertFalse(\n        containsType(\n            googBar.getSubTypes(), googSubSubBar));\n    assertFalse(\n        containsType(\n            googSubBar.getSubTypes(), googSubBar));\n    assertTrue(\n        containsType(\n            googSubBar.getSubTypes(), googSubSubBar));\n  }\n",
        "begin_line": 5733,
        "end_line": 5749,
        "comment": "",
        "child_ranges": [
            "(line 5734,col 5)-(line 5736,col 58)",
            "(line 5737,col 5)-(line 5739,col 48)",
            "(line 5740,col 5)-(line 5742,col 51)",
            "(line 5743,col 5)-(line 5745,col 51)",
            "(line 5746,col 5)-(line 5748,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.testImplementingType()",
        "snippet": "  public void testImplementingType() throws Exception {\n    assertTrue(\n        containsType(\n            registry.getDirectImplementors(\n                interfaceType.getInstanceType()),\n            googBar));\n  }\n",
        "begin_line": 5751,
        "end_line": 5757,
        "comment": "",
        "child_ranges": [
            "(line 5752,col 5)-(line 5756,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.containsType(java.lang.Iterable<? extends com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private static boolean containsType(\n      Iterable<? extends JSType> types, JSType type) {\n    for (JSType alt : types) {\n      if (alt.isEquivalentTo(type)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 5759,
        "end_line": 5767,
        "comment": "",
        "child_ranges": [
            "(line 5761,col 5)-(line 5765,col 5)",
            "(line 5766,col 5)-(line 5766,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.assertTypeListEquals(java.lang.Iterable<? extends com.google.javascript.rhino.jstype.JSType>, java.lang.Iterable<? extends com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  private static boolean assertTypeListEquals(\n      Iterable<? extends JSType> typeListA,\n      Iterable<? extends JSType> typeListB) {\n    for (JSType alt : typeListA) {\n      assertTrue(\n          \"List : \" + typeListA + \"\\n\" +\n          \"does not contain: \" + alt,\n          containsType(typeListA, alt));\n    }\n    for (JSType alt : typeListB) {\n      assertTrue(\n          \"List : \" + typeListB + \"\\n\" +\n          \"does not contain: \" + alt,\n          containsType(typeListB, alt));\n    }\n    return false;\n  }\n",
        "begin_line": 5769,
        "end_line": 5785,
        "comment": "",
        "child_ranges": [
            "(line 5772,col 5)-(line 5777,col 5)",
            "(line 5778,col 5)-(line 5783,col 5)",
            "(line 5784,col 5)-(line 5784,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeTest.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  private ArrowType createArrowType(Node params) {\n    return registry.createArrowType(params);\n  }\n",
        "begin_line": 5787,
        "end_line": 5789,
        "comment": "",
        "child_ranges": [
            "(line 5788,col 5)-(line 5788,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeTest.testRecursiveRecord()",
        "snippet": "  public void testRecursiveRecord() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());\n\n    loop.setReferencedType(record);\n    assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());\n\n    Asserts.assertEquivalenceOperations(record, loop);\n  }\n",
        "begin_line": 46,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 70)",
            "(line 48,col 5)-(line 52,col 17)",
            "(line 53,col 5)-(line 54,col 27)",
            "(line 56,col 5)-(line 56,col 35)",
            "(line 57,col 5)-(line 58,col 27)",
            "(line 60,col 5)-(line 60,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeTest.testLongToString()",
        "snippet": "  public void testLongToString() {\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"a1\", NUMBER_TYPE, null)\n        .addProperty(\"a2\", NUMBER_TYPE, null)\n        .addProperty(\"a3\", NUMBER_TYPE, null)\n        .addProperty(\"a4\", NUMBER_TYPE, null)\n        .addProperty(\"a5\", NUMBER_TYPE, null)\n        .addProperty(\"a6\", NUMBER_TYPE, null)\n        .build();\n    assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n        record.toString());\n  }\n",
        "begin_line": 63,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 71,col 17)",
            "(line 72,col 5)-(line 73,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.RecordTypeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "signature": "com.google.javascript.rhino.jstype.RecordTypeTest.testSupAndInf()",
        "snippet": "  public void testSupAndInf() {\n    JSType recordA = new RecordTypeBuilder(registry)\n        .addProperty(\"a\", NUMBER_TYPE, null)\n        .addProperty(\"b\", NUMBER_TYPE, null)\n        .build();\n    JSType recordC = new RecordTypeBuilder(registry)\n        .addProperty(\"b\", NUMBER_TYPE, null)\n        .addProperty(\"c\", NUMBER_TYPE, null)\n        .build();\n    ProxyObjectType proxyRecordA = new ProxyObjectType(registry, recordA);\n    ProxyObjectType proxyRecordC = new ProxyObjectType(registry, recordC);\n\n    JSType aInfC = new RecordTypeBuilder(registry)\n        .addProperty(\"a\", NUMBER_TYPE, null)\n        .addProperty(\"b\", NUMBER_TYPE, null)\n        .addProperty(\"c\", NUMBER_TYPE, null)\n        .build();\n\n    JSType aSupC = registry.createUnionType(recordA, recordC);\n\n    Asserts.assertTypeEquals(\n        aInfC, recordA.getGreatestSubtype(recordC));\n    Asserts.assertTypeEquals(\n        aSupC, recordA.getLeastSupertype(recordC));\n\n    Asserts.assertTypeEquals(\n        aInfC, proxyRecordA.getGreatestSubtype(proxyRecordC));\n    Asserts.assertTypeEquals(\n        aSupC, proxyRecordA.getLeastSupertype(proxyRecordC));\n  }\n",
        "begin_line": 76,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 80,col 17)",
            "(line 81,col 5)-(line 84,col 17)",
            "(line 85,col 5)-(line 85,col 74)",
            "(line 86,col 5)-(line 86,col 74)",
            "(line 88,col 5)-(line 92,col 17)",
            "(line 94,col 5)-(line 94,col 62)",
            "(line 96,col 5)-(line 97,col 52)",
            "(line 98,col 5)-(line 99,col 51)",
            "(line 101,col 5)-(line 102,col 62)",
            "(line 103,col 5)-(line 104,col 61)"
        ]
    }
]