[
    {
        "name": "Node.propToString#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "  private static final String propToString(int propType) {\n      switch (propType) {\n        case BRACELESS_TYPE:     return \"braceless_type\";\n        case VAR_ARGS_NAME:      return \"var_args_name\";\n        case SOURCENAME_PROP:    return \"sourcename\";\n\n        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n        case INCRDECR_PROP:      return \"incrdecr\";\n        case PARENTHESIZED_PROP: return \"parenthesized\";\n        case QUOTED_PROP:        return \"quoted\";\n        case OPT_ARG_NAME:       return \"opt_arg\";\n\n        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n        case EMPTY_BLOCK:        return \"empty_block\";\n        case ORIGINALNAME_PROP:  return \"originalname\";\n        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n        case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n        case IS_VAR_ARGS_PARAM:  return \"is_var_args_param\";\n        case IS_NAMESPACE:       return \"is_namespace\";\n        case IS_DISPATCHER:      return \"is_dispatcher\";\n        case DIRECTIVES:         return \"directives\";\n        case DIRECT_EVAL:        return \"direct_eval\";\n        case FREE_CALL:          return \"free_call\";\n        case STATIC_SOURCE_FILE:    return \"source_file\";\n        case INPUT_ID:  return \"input_id\";\n        case LENGTH:    return \"length\";\n        case SLASH_V:   return \"slash_v\";\n        default:\n          throw new IllegalStateException(\"unexpect prop id \" + propType);\n      }\n  }\n",
        "begin_line": 116,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9258
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.SuffixVarsCallback#252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.SuffixVarsCallback.SuffixVarsCallback(java.lang.String)",
        "snippet": "    SuffixVarsCallback(String suffix) {\n      this.suffix = suffix;\n    }\n",
        "begin_line": 252,
        "end_line": 254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.visit#256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.SuffixVarsCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        String name = n.getString();\n        if (suffix.equals(name)) {\n          return;\n        }\n        if (EXPORTS.equals(name)) {\n          n.setString(suffix);\n          n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);\n        } else {\n          Scope.Var var = t.getScope().getVar(name);\n          if (var != null && var.isGlobal()) {\n            n.setString(name + \"$$\" + suffix);\n            n.putProp(Node.ORIGINALNAME_PROP, name);\n          }\n        }\n      }\n    }\n",
        "begin_line": 256,
        "end_line": 274,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.visit#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString()) {\n        visitRequireCall(t, n, parent);\n      }\n\n      if (n.isScript()) {\n        scriptNodeCount++;\n        visitScript(t, n);\n      }\n\n      if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName())) {\n        visitModuleExports(n);\n      }\n    }\n",
        "begin_line": 129,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.visitScript#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.visitScript(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "    private void visitScript(NodeTraversal t, Node script) {\n      Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");\n      String moduleName = guessCJSModuleName(normalizeSourceName(script\n          .getSourceFileName()));\n      script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));\n      if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n      }\n      script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));\n\n      emitOptionalModuleExportsOverride(script, moduleName);\n\n      // Rename vars to not conflict in global scope.\n      NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));\n\n      compiler.reportCodeChange();\n    }\n",
        "begin_line": 172,
        "end_line": 198,
        "comment": "\n     * Emit goog.provide and add suffix to all global vars to avoid conflicts\n     * with other modules.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.emitOptionalModuleExportsOverride#205",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.emitOptionalModuleExportsOverride(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    private void emitOptionalModuleExportsOverride(Node script,\n        String moduleName) {\n\n      Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));\n      script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));\n    }\n",
        "begin_line": 205,
        "end_line": 215,
        "comment": "\n     * Emit <code>if (moduleName.module$exports) {\n     *    moduleName = moduleName.module$export;\n     * }</code> at end of file.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.process#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());\n  }\n",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.ProcessCommonJSModules#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJSModules(com.google.javascript.jscomp.AbstractCompiler, java.lang.String, boolean)",
        "snippet": "  ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix,\n      boolean reportDependencies) {\n    this.compiler = compiler;\n    this.filenamePrefix = filenamePrefix.endsWith(File.separator) ?\n        filenamePrefix : filenamePrefix + File.separator;\n    this.reportDependencies = reportDependencies;\n  }\n",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8367
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.guessCJSModuleName#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.guessCJSModuleName(java.lang.String)",
        "snippet": "  String guessCJSModuleName(String filename) {\n    return toModuleName(normalizeSourceName(filename));\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8367
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.toModuleName#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName(java.lang.String)",
        "snippet": "  public static String toModuleName(String filename) {\n    return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\")\n            .replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");\n  }\n",
        "begin_line": 86,
        "end_line": 91,
        "comment": "\n   * Turns a filename into a JS identifier that is used for moduleNames in\n   * rewritten code. Removes leading ./, replaces / with $, removes trailing .js\n   * and replaces - with _. All moduleNames get a \"module$\" prefix.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8367
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.normalizeSourceName#114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.normalizeSourceName(java.lang.String)",
        "snippet": "  private String normalizeSourceName(String filename) {\n    if (filename.indexOf(filenamePrefix) == 0) {\n      filename = filename.substring(filenamePrefix.length());\n    }\n    return filename;\n  }\n",
        "begin_line": 114,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8367
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.NodeMismatch#2145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NodeMismatch.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    NodeMismatch(Node nodeA, Node nodeB) {\n      this.nodeA = nodeA;\n      this.nodeB = nodeB;\n    }\n",
        "begin_line": 2145,
        "end_line": 2148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7338
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.checkTreeEquals#1427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "  public String checkTreeEquals(Node node2) {\n      NodeMismatch diff = checkTreeEqualsImpl(node2);\n      if (diff != null) {\n        return \"Node tree inequality:\" +\n            \"\\nTree1:\\n\" + toStringTree() +\n            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n      }\n      return null;\n  }\n",
        "begin_line": 1427,
        "end_line": 1437,
        "comment": "\n   * Checks if the subtree under this node is the same as another subtree.\n   * Returns null if it's equal, or a message describing the differences.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7338
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.checkTreeEqualsImpl#1444",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "  NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res = null;\n    Node n, n2;\n    for (n = first, n2 = node2.first;\n         res == null && n != null;\n         n = n.next, n2 = n2.next) {\n      if (node2 == null) {\n        throw new IllegalStateException();\n      }\n      res = n.checkTreeEqualsImpl(n2);\n      if (res != null) {\n        return res;\n      }\n    }\n    return res;\n  }\n",
        "begin_line": 1444,
        "end_line": 1463,
        "comment": "\n   * Compare this node to node2 recursively and return the first pair of nodes\n   * that differs doing a preorder depth-first traversal. Package private for\n   * testing. Returns null if the nodes are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7338
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.visitRequireCall#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.visitRequireCall(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void visitRequireCall(NodeTraversal t, Node require, Node parent) {\n      String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));\n      Node moduleRef = IR.name(moduleName).srcref(require);\n      parent.replaceChild(require, moduleRef);\n      Node script = getCurrentScriptNode(parent);\n      if (reportDependencies) {\n        t.getInput().addRequire(moduleName);\n      }\n      // Rewrite require(\"name\").\n      script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));\n      compiler.reportCodeChange();\n    }\n",
        "begin_line": 152,
        "end_line": 166,
        "comment": "\n     * Visit require calls. Emit corresponding goog.require and rewrite require\n     * to be a direct reference to name of require module.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessCommonJSModules.getCurrentScriptNode#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.getCurrentScriptNode(com.google.javascript.rhino.Node)",
        "snippet": "    private Node getCurrentScriptNode(Node n) {\n      while (true) {\n        if (n.isScript()) {\n          return n;\n        }\n        n = n.getParent();\n      }\n    }\n",
        "begin_line": 233,
        "end_line": 240,
        "comment": "\n     * Returns next script node in parents.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 4
    },
    {
        "name": "ProcessCommonJSModules.toModuleName#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName(java.lang.String, java.lang.String)",
        "snippet": "  public static String toModuleName(String requiredFilename,\n      String currentFilename) {\n    requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");\n    currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");\n\n    if (requiredFilename.startsWith(\".\" + File.separator) ||\n        requiredFilename.startsWith(\"..\" + File.separator)) {\n      try {\n        requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();\n      } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return toModuleName(requiredFilename);\n  }\n",
        "begin_line": 97,
        "end_line": 112,
        "comment": "\n   * Turn a filename into a moduleName with support for relative addressing\n   * with ./ and ../ based on currentFilename;\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6172
        },
        "num_failing_tests": 4
    },
    {
        "name": "IR.ifNode#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.ifNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public static Node ifNode(Node cond, Node then) {\n    Preconditions.checkState(mayBeExpression(cond));\n    Preconditions.checkState(then.isBlock());\n    return new Node(Token.IF, cond, then);\n  }\n",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5916
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeFoldConstants.tryFoldAssign#458",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldAssign(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryFoldAssign(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.isAssign());\n\n    if (!late) {\n      return n;\n    }\n\n    // Tries to convert x = x + y -> x += y;\n    if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild()) {\n      // RHS must have two children.\n      return n;\n    }\n\n    if (mayHaveSideEffects(left)) {\n      return n;\n    }\n\n    Node newRight;\n    if (areNodesEqualForInlining(left, right.getFirstChild())) {\n      newRight = right.getLastChild();\n    } else if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild())) {\n      newRight = right.getFirstChild();\n    } else {\n      return n;\n    }\n\n    int newType = -1;\n    switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }\n\n    Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());\n    n.getParent().replaceChild(n, newNode);\n\n    reportCodeChange();\n\n    return newNode;\n  }\n",
        "begin_line": 458,
        "end_line": 532,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.initConfigFromFlags#650",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.initConfigFromFlags(java.lang.String[], java.io.PrintStream)",
        "snippet": "  private void initConfigFromFlags(String[] args, PrintStream err) {\n\n    List<String> processedArgs = processArgs(args);\n\n    CmdLineParser parser = new CmdLineParser(flags);\n    Flags.warningGuardSpec.clear();\n    isConfigValid = true;\n    try {\n      parser.parseArgument(processedArgs.toArray(new String[] {}));\n      // For contains --flagfile flag\n      if (!flags.flag_file.equals(\"\")) {\n        processFlagFile(err);\n      }\n    } catch (CmdLineException e) {\n      err.println(e.getMessage());\n      isConfigValid = false;\n    } catch (IOException ioErr) {\n      err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n      isConfigValid = false;\n    }\n\n    if (flags.version) {\n      ResourceBundle config = ResourceBundle.getBundle(configResource);\n      err.println(\n          \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n          \"Version: \" + config.getString(\"compiler.version\") + \"\\n\" +\n          \"Built on: \" + config.getString(\"compiler.date\"));\n      err.flush();\n    }\n\n    if (flags.process_common_js_modules) {\n      flags.process_closure_primitives = true;\n      flags.manage_closure_dependencies = true;\n      if (flags.common_js_entry_module == null) {\n        err.println(\"Please specify --common_js_entry_module.\");\n        err.flush();\n        isConfigValid = false;\n      }\n      flags.closure_entry_point = Lists.newArrayList(\n          ProcessCommonJSModules.toModuleName(flags.common_js_entry_module));\n    }\n\n    if (!isConfigValid || flags.display_help) {\n      isConfigValid = false;\n      parser.printUsage(err);\n    } else {\n      CodingConvention conv;\n      if (flags.third_party) {\n        conv = CodingConventions.getDefault();\n      } else if (flags.process_jquery_primitives) {\n        conv = new JqueryCodingConvention();\n      } else {\n        conv = new ClosureCodingConvention();\n      }\n\n      getCommandLineConfig()\n          .setPrintTree(flags.print_tree)\n          .setPrintAst(flags.print_ast)\n          .setPrintPassGraph(flags.print_pass_graph)\n          .setJscompDevMode(flags.jscomp_dev_mode)\n          .setLoggingLevel(flags.logging_level)\n          .setExterns(flags.externs)\n          .setJs(flags.getJsFiles())\n          .setJsOutputFile(flags.js_output_file)\n          .setModule(flags.module)\n          .setVariableMapInputFile(flags.variable_map_input_file)\n          .setPropertyMapInputFile(flags.property_map_input_file)\n          .setVariableMapOutputFile(flags.variable_map_output_file)\n          .setCreateNameMapFiles(flags.create_name_map_files)\n          .setPropertyMapOutputFile(flags.property_map_output_file)\n          .setCodingConvention(conv)\n          .setSummaryDetailLevel(flags.summary_detail_level)\n          .setOutputWrapper(flags.output_wrapper)\n          .setModuleWrapper(flags.module_wrapper)\n          .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n          .setCreateSourceMap(flags.create_source_map)\n          .setSourceMapFormat(flags.source_map_format)\n          .setWarningGuardSpec(Flags.warningGuardSpec)\n          .setDefine(flags.define)\n          .setCharset(flags.charset)\n          .setManageClosureDependencies(flags.manage_closure_dependencies)\n          .setOnlyClosureDependencies(flags.only_closure_dependencies)\n          .setClosureEntryPoints(flags.closure_entry_point)\n          .setOutputManifest(ImmutableList.of(flags.output_manifest))\n          .setAcceptConstKeyword(flags.accept_const_keyword)\n          .setLanguageIn(flags.language_in)\n          .setProcessCommonJSModules(flags.process_common_js_modules)\n          .setCommonJSModulePathPrefix(flags.common_js_path_prefix)\n          .setTransformAMDToCJSModules(flags.transform_amd_modules);\n    }\n  }\n",
        "begin_line": 650,
        "end_line": 740,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.var#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.var(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public static Node var(Node name, Node value) {\n    Preconditions.checkState(name.isName() && !name.hasChildren());\n    Preconditions.checkState(mayBeExpression(value));\n    name.addChildToFront(value);\n    return var(name);\n  }\n",
        "begin_line": 125,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5189
        },
        "num_failing_tests": 7
    },
    {
        "name": "InputId.toString#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"InputId: \" + getIdName();\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5092
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.toString#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return String.valueOf(intValue);\n    }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.toStringTree#1010",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "  public String toStringTree() {\n    return toStringTreeImpl();\n  }\n",
        "begin_line": 1010,
        "end_line": 1012,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4606
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.toStringTreeImpl#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "  private String toStringTreeImpl() {\n    try {\n      StringBuilder s = new StringBuilder();\n      appendStringTree(s);\n      return s.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Should not happen\\n\" + e);\n    }\n  }\n",
        "begin_line": 1014,
        "end_line": 1022,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4606
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.appendStringTree#1024",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "  public void appendStringTree(Appendable appendable) throws IOException {\n    toStringTreeHelper(this, 0, appendable);\n  }\n",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4606
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.toStringTreeHelper#1028",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "  private static void toStringTreeHelper(Node n, int level, Appendable sb)\n      throws IOException {\n    for (int i = 0; i != level; ++i) {\n      sb.append(\"    \");\n    }\n    sb.append(n.toString());\n    sb.append('\\n');\n    for (Node cursor = n.getFirstChild();\n         cursor != null;\n         cursor = cursor.getNext()) {\n      toStringTreeHelper(cursor, level + 1, sb);\n    }\n  }\n",
        "begin_line": 1028,
        "end_line": 1040,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4606
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryMinimizeIf#627",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryMinimizeIf(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryMinimizeIf(Node n) {\n\n    Node parent = n.getParent();\n\n    Node cond = n.getFirstChild();\n\n    /* If the condition is a literal, we'll let other\n     * optimizations try to remove useless code.\n     */\n    if (NodeUtil.isLiteralValue(cond, true)) {\n      return n;\n    }\n\n    Node thenBranch = cond.getNext();\n    Node elseBranch = thenBranch.getNext();\n\n    if (elseBranch == null) {\n      if (isFoldableExpressBlock(thenBranch)) {\n        Node expr = getBlockExpression(thenBranch);\n        if (!late && isPropertyAssignmentInExpression(expr)) {\n          // Keep opportunities for CollapseProperties such as\n          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;\n          // until CollapseProperties has been run.\n          return n;\n        }\n\n        if (cond.isNot()) {\n          // if(!x)bar(); -> x||bar();\n          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE)) {\n            // It's not okay to add two sets of parentheses.\n            return n;\n          }\n\n          Node or = IR.or(\n              cond.removeFirstChild(),\n              expr.removeFirstChild()).srcref(n);\n          Node newExpr = NodeUtil.newExpr(or);\n          parent.replaceChild(n, newExpr);\n          reportCodeChange();\n\n          return newExpr;\n        }\n\n        // if(x)foo(); -> x&&foo();\n        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE)) {\n          // One additional set of parentheses is worth the change even if\n          // there is no immediate code size win. However, two extra pair of\n          // {}, we would have to think twice. (unless we know for sure the\n          // we can further optimize its parent.\n          return n;\n        }\n\n        n.removeChild(cond);\n        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);\n        Node newExpr = NodeUtil.newExpr(and);\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n\n        return newExpr;\n      } else {\n\n        // Try to combine two IF-ELSE\n        if (NodeUtil.isStatementBlock(thenBranch) &&\n            thenBranch.hasOneChild()) {\n          Node innerIf = thenBranch.getFirstChild();\n\n          if (innerIf.isIf()) {\n            Node innerCond = innerIf.getFirstChild();\n            Node innerThenBranch = innerCond.getNext();\n            Node innerElseBranch = innerThenBranch.getNext();\n\n            if (innerElseBranch == null &&\n                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n              n.detachChildren();\n              n.addChildToBack(\n                  IR.and(\n                      cond,\n                      innerCond.detachFromParent())\n                      .srcref(cond));\n              n.addChildrenToBack(innerThenBranch.detachFromParent());\n              reportCodeChange();\n              // Not worth trying to fold the current IF-ELSE into && because\n              // the inner IF-ELSE wasn't able to be folded into && anyways.\n              return n;\n            }\n          }\n        }\n      }\n\n      return n;\n    }\n\n    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a\n     * peephole optimization. This should probably get moved to another pass.\n     */\n    tryRemoveRepeatedStatements(n);\n\n    // if(!x)foo();else bar(); -> if(x)bar();else foo();\n    // An additional set of curly braces isn't worth it.\n    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n      n.replaceChild(cond, cond.removeFirstChild());\n      n.removeChild(thenBranch);\n      n.addChildToBack(thenBranch);\n      reportCodeChange();\n      return n;\n    }\n\n    // if(x)return 1;else return 2; -> return x?1:2;\n    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n      Node thenExpr = getBlockReturnExpression(thenBranch);\n      Node elseExpr = getBlockReturnExpression(elseBranch);\n      n.removeChild(cond);\n      thenExpr.detachFromParent();\n      elseExpr.detachFromParent();\n\n      // note - we ignore any cases with \"return;\", technically this\n      // can be converted to \"return undefined;\" or some variant, but\n      // that does not help code size.\n      Node returnNode = IR.returnNode(\n                            IR.hook(cond, thenExpr, elseExpr)\n                                .srcref(n));\n      parent.replaceChild(n, returnNode);\n      reportCodeChange();\n      return returnNode;\n    }\n\n    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n\n    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n      Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n      Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n      if (thenOp.getType() == elseOp.getType()) {\n        // if(x)a=1;else a=2; -> a=x?1:2;\n        if (NodeUtil.isAssignmentOp(thenOp)) {\n          Node lhs = thenOp.getFirstChild();\n          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              !mayEffectMutableState(lhs)) {\n\n            n.removeChild(cond);\n            Node assignName = thenOp.removeFirstChild();\n            Node thenExpr = thenOp.removeFirstChild();\n            Node elseExpr = elseOp.getLastChild();\n            elseOp.removeChild(elseExpr);\n\n            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);\n            Node expr = NodeUtil.newExpr(assign);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n\n            return expr;\n          }\n        }\n      }\n      // if(x)foo();else bar(); -> x?foo():bar()\n      n.removeChild(cond);\n      thenOp.detachFromParent();\n      elseOp.detachFromParent();\n      Node expr = IR.exprResult(\n          IR.hook(cond, thenOp, elseOp).srcref(n));\n      parent.replaceChild(n, expr);\n      reportCodeChange();\n      return expr;\n    }\n\n    boolean thenBranchIsVar = isVarBlock(thenBranch);\n    boolean elseBranchIsVar = isVarBlock(elseBranch);\n\n    // if(x)var y=1;else y=2  ->  var y=x?1:2\n    if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n\n      Node var = getBlockVar(thenBranch);\n      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = elseAssign.getFirstChild();\n\n      if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString())) {\n        Node thenExpr = name1.removeChildren();\n        Node elseExpr = elseAssign.getLastChild().detachFromParent();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name1.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n        return var;\n      }\n\n    // if(x)y=1;else var y=2  ->  var y=x?1:2\n    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n\n      Node var = getBlockVar(elseBranch);\n      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n\n      Node maybeName1 = thenAssign.getFirstChild();\n      Node name2 = var.getFirstChild();\n\n      if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString())) {\n        Node thenExpr = thenAssign.getLastChild().detachFromParent();\n        Node elseExpr = name2.removeChildren();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name2.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n\n        return var;\n      }\n    }\n\n    return n;\n  }\n",
        "begin_line": 627,
        "end_line": 859,
        "comment": "\n   * Try turning IF nodes into smaller HOOKs\n   *\n   * Returns the replacement for n or the original if no replacement was\n   * necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4364
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.getConditionalStatementCondition#602",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.getConditionalStatementCondition(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getConditionalStatementCondition(Node n) {\n    if (n.isIf()) {\n      return NodeUtil.getConditionExpression(n);\n    } else {\n      Preconditions.checkState(isExprConditional(n));\n      return n.getFirstChild().getFirstChild();\n    }\n  }\n",
        "begin_line": 602,
        "end_line": 609,
        "comment": "\n   * @return The condition of a conditional statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4364
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.toString#318",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return objectValue == null ? \"null\" : objectValue.toString();\n    }\n",
        "begin_line": 318,
        "end_line": 321,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4237
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getSortedPropTypes#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "  private int[] getSortedPropTypes() {\n    int count = 0;\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count++;\n    }\n\n    int[] keys = new int[count];\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count--;\n      keys[count] = x.getType();\n    }\n\n    Arrays.sort(keys);\n    return keys;\n  }\n",
        "begin_line": 878,
        "end_line": 892,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4237
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.toString#948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "  private void toString(\n      StringBuilder sb,\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    sb.append(Token.name(type));\n    if (this instanceof StringNode) {\n      sb.append(' ');\n      sb.append(getString());\n    } else if (type == Token.FUNCTION) {\n      sb.append(' ');\n      // In the case of JsDoc trees, the first child is often not a string\n      // which causes exceptions to be thrown when calling toString or\n      // toStringTree.\n      if (first == null || first.getType() != Token.NAME) {\n        sb.append(\"<invalid>\");\n      } else {\n        sb.append(first.getString());\n      }\n    } else if (type == Token.NUMBER) {\n      sb.append(' ');\n      sb.append(getDouble());\n    }\n    if (printSource) {\n      int lineno = getLineno();\n      if (lineno != -1) {\n        sb.append(' ');\n        sb.append(lineno);\n      }\n    }\n\n    if (printAnnotations) {\n      int[] keys = getSortedPropTypes();\n      for (int i = 0; i < keys.length; i++) {\n        int type = keys[i];\n        PropListItem x = lookupProperty(type);\n        sb.append(\" [\");\n        sb.append(propToString(type));\n        sb.append(\": \");\n        String value;\n        switch (type) {\n          default:\n            value = x.toString();\n            break;\n        }\n        sb.append(value);\n        sb.append(']');\n      }\n    }\n\n    if (printType) {\n      if (jsType != null) {\n        String jsTypeString = jsType.toString();\n        if (jsTypeString != null) {\n          sb.append(\" : \");\n          sb.append(jsTypeString);\n        }\n      }\n    }\n  }\n",
        "begin_line": 948,
        "end_line": 1007,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4237
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.toString#301",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return fileName;\n  }\n",
        "begin_line": 301,
        "end_line": 304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4237
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.toString#934",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toString(true, true, true);\n  }\n",
        "begin_line": 934,
        "end_line": 937,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4183
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.getModule#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.getModule()",
        "snippet": "  JSModule getModule() {\n    return module;\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n   * For every file that is being processed this returns the module that\n   * created for it.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.addAndOverrideModule#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.addAndOverrideModule(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  void addAndOverrideModule(CompilerInput input) {\n    inputs.add(input);\n    input.overrideModule(this);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "\n   * Adds a source code input to this module. Call only if the input might\n   * already be associated with a module. Otherwise, use\n   * add(CompilerInput input).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.addProvide#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.addProvide(java.lang.String)",
        "snippet": "  void addProvide(String provide) {\n    getProvides();\n    provides.add(provide);\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": " there is better support for discovering non-closure dependencies.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.overrideModule#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.overrideModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  void overrideModule(JSModule module) {\n    this.module = module;\n  }\n",
        "begin_line": 332,
        "end_line": 334,
        "comment": " Overrides the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.processAMDAndCommonJSModules#1438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.processAMDAndCommonJSModules()",
        "snippet": "  void processAMDAndCommonJSModules() {\n    Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();\n    Map<CompilerInput, JSModule> modulesByInput = Maps.newLinkedHashMap();\n    // TODO(nicksantos): Refactor module dependency resolution to work nicely\n    // with multiple ways to express dependencies. Directly support JSModules\n    // that are equivalent to a signal file and which express their deps\n    // directly in the source.\n    for (CompilerInput input : inputs) {\n      input.setCompiler(this);\n      Node root = input.getAstRoot(this);\n      if (root == null) {\n        continue;\n      }\n      if (options.transformAMDToCJSModules) {\n        new TransformAMDToCJSModule(this).process(null, root);\n      }\n      if (options.processCommonJSModules) {\n        ProcessCommonJSModules cjs = new ProcessCommonJSModules(this,\n            options.commonJSModulePathPrefix);\n        cjs.process(null, root);\n        JSModule m = cjs.getModule();\n        if (m != null) {\n          modulesByName.put(m.getName(), m);\n          modulesByInput.put(input, m);\n        }\n      }\n    }\n    if (options.processCommonJSModules) {\n      List<JSModule> modules = Lists.newArrayList(modulesByName.values());\n      if (!modules.isEmpty()) {\n        this.modules = modules;\n        this.moduleGraph = new JSModuleGraph(this.modules);\n      }\n      for (JSModule module : modules) {\n        for (CompilerInput input : module.getInputs()) {\n          for (String require : input.getRequires()) {\n            JSModule dependency = modulesByName.get(require);\n            if (dependency == null) {\n              report(JSError.make(MISSING_ENTRY_ERROR, require));\n            } else {\n              module.addDependency(dependency);\n            }\n          }\n        }\n      }\n      try {\n        modules = Lists.newArrayList();\n        for (CompilerInput input : this.moduleGraph.manageDependencies(\n            options.dependencyOptions, inputs)) {\n          modules.add(modulesByInput.get(input));\n        }\n        this.modules = modules;\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (Exception e) {\n        Throwables.propagate(e);\n      }\n    }\n  }\n",
        "begin_line": 1438,
        "end_line": 1495,
        "comment": "\n   * Transforms AMD and CJS modules to something closure compiler can\n   * process and creates JSModules and the corresponding dependency tree\n   * on the way.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckAccidentalSemicolon.visit#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "class_name": "com.google.javascript.jscomp.CheckAccidentalSemicolon",
        "signature": "com.google.javascript.jscomp.CheckAccidentalSemicolon.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    Node child;\n    switch (n.getType()) {\n      case Token.IF:\n        child = n.getFirstChild().getNext();  // skip the condition child\n        break;\n\n      case Token.WHILE:\n      case Token.FOR:\n        child = NodeUtil.getLoopCodeBlock(n);\n        break;\n\n      default:\n        return;  // don't check other types\n    }\n\n    // semicolons cause VOID children. Empty blocks are allowed because\n    // that's usually intentional, especially with loops.\n    for (; child != null; child = child.getNext()) {\n      if ((child.isBlock()) && (!child.hasChildren())) {\n        // Only warn on empty blocks that replaced EMPTY nodes.  BLOCKs with no\n        // children are considered OK.\n        if (child.wasEmptyNode()) {\n          t.getCompiler().report(\n              t.makeError(n, level, SUSPICIOUS_SEMICOLON));\n        }\n      }\n    }\n  }\n",
        "begin_line": 44,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.block#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node block(Node stmt) {\n    Preconditions.checkState(mayBeStatement(stmt));\n    Node block = new Node(Token.BLOCK, stmt);\n    return block;\n  }\n",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3742
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.toString#939",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "  public String toString(\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    StringBuilder sb = new StringBuilder();\n    toString(sb, printSource, printAnnotations, printType);\n    return sb.toString();\n  }\n",
        "begin_line": 939,
        "end_line": 946,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessCommonJSModules.ProcessCommonJSModules#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModules",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJSModules(com.google.javascript.jscomp.AbstractCompiler, java.lang.String)",
        "snippet": "  ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix) {\n    this(compiler, filenamePrefix, true);\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3381
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.tryOptimizeConditionalAfterAssign#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.tryOptimizeConditionalAfterAssign(com.google.javascript.rhino.Node)",
        "snippet": "  private void tryOptimizeConditionalAfterAssign(Node n) {\n    Node next = n.getNext();\n\n    // Look for patterns like the following and replace the if-condition with\n    // a constant value so it can later be folded:\n    //   var a = /a/;\n    //   if (a) {foo(a)}\n    // or\n    //   a = 0;\n    //   a ? foo(a) : c;\n    // or\n    //   a = 0;\n    //   a || foo(a);\n    // or\n    //   a = 0;\n    //   a && foo(a)\n    //\n    // TODO(johnlenz): This would be better handled by control-flow sensitive\n    // constant propagation. As the other case that I want to handle is:\n    //   i=0; for(;i<0;i++){}\n    // as right now nothing facilitates removing a loop like that.\n    // This is here simply to remove the cruft left behind goog.userAgent and\n    // similar cases.\n\n    if (isSimpleAssignment(n) && isConditionalStatement(next)) {\n      Node lhsAssign = getSimpleAssignmentName(n);\n\n      Node condition = getConditionalStatementCondition(next);\n      if (lhsAssign.isName() && condition.isName()\n          && lhsAssign.getString().equals(condition.getString())) {\n        Node rhsAssign = getSimpleAssignmentValue(n);\n        TernaryValue value = NodeUtil.getImpureBooleanValue(rhsAssign);\n        if (value != TernaryValue.UNKNOWN) {\n          Node replacementConditionNode =\n              NodeUtil.booleanNode(value.toBoolean(true));\n          condition.getParent().replaceChild(condition,\n              replacementConditionNode);\n          reportCodeChange();\n        }\n      }\n    }\n  }\n",
        "begin_line": 493,
        "end_line": 534,
        "comment": "\n   * Attempt to replace the condition of if or hook immediately that is a\n   * reference to a name that is assigned immediately before.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3381
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.getSimpleAssignmentName#557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.getSimpleAssignmentName(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getSimpleAssignmentName(Node n) {\n    Preconditions.checkState(isSimpleAssignment(n));\n    if (NodeUtil.isExprAssign(n)) {\n      return n.getFirstChild().getFirstChild();\n    } else {\n      // A var declaration.\n      return n.getFirstChild();\n    }\n  }\n",
        "begin_line": 557,
        "end_line": 565,
        "comment": "\n   * @return The name being assigned to.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3381
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.parseInputs#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main JS sources.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      hoistExterns(externsRoot);\n\n      // Check if the sources need to be re-ordered.\n      boolean staleInputs = false;\n      if (options.dependencyOptions.needsManagement() &&\n          options.closurePass) {\n        for (CompilerInput input : inputs) {\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n          staleInputs = true;\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n\n          // If in IDE mode, we ignore the error and keep going.\n          if (hasErrors()) {\n            return null;\n          }\n        }\n      }\n\n      hoistNoCompileFiles();\n\n      if (staleInputs) {\n        repartitionInputs();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }\n",
        "begin_line": 1236,
        "end_line": 1359,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3381
        },
        "num_failing_tests": 7
    },
    {
        "name": "IR.call#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.call(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node call(Node target, Node ... args) {\n    Node call = new Node(Token.CALL, target);\n    for (Node arg : args) {\n      Preconditions.checkState(mayBeExpression(arg));\n      call.addChildToBack(arg);\n    }\n    return call;\n  }\n",
        "begin_line": 277,
        "end_line": 284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2977
        },
        "num_failing_tests": 7
    },
    {
        "name": "ConvertToDottedProperties.visit#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "class_name": "com.google.javascript.jscomp.ConvertToDottedProperties",
        "signature": "com.google.javascript.jscomp.ConvertToDottedProperties.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n      case Token.STRING_KEY:\n        if (NodeUtil.isValidPropertyName(n.getString())) {\n          n.putBooleanProp(Node.QUOTED_PROP, false);\n          compiler.reportCodeChange();\n        }\n        break;\n\n      case Token.GETELEM:\n        Node left = n.getFirstChild();\n        Node right = left.getNext();\n        if (right.isString() &&\n            NodeUtil.isValidPropertyName(right.getString())) {\n          n.removeChild(left);\n          n.removeChild(right);\n          parent.replaceChild(n, IR.getprop(left, right));\n          compiler.reportCodeChange();\n        }\n        break;\n    }\n  }\n",
        "begin_line": 44,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 2
    },
    {
        "name": "CollapseVariableDeclarations.applyCollapses#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.applyCollapses()",
        "snippet": "  private void applyCollapses() {\n    for (Collapse collapse : collapses) {\n\n      Node var = new Node(Token.VAR);\n      var.copyInformationFrom(collapse.startNode);\n      collapse.parent.addChildBefore(var, collapse.startNode);\n\n      boolean redeclaration = false;\n      for (Node n = collapse.startNode; n != collapse.endNode;) {\n        Node next = n.getNext();\n\n        Preconditions.checkState(var.getNext() == n);\n        collapse.parent.removeChildAfter(var);\n\n        if (n.isVar()) {\n          while(n.hasChildren()) {\n            var.addChildToBack(n.removeFirstChild());\n          }\n        } else {\n          Node assign = n.getFirstChild();\n          Node lhs = assign.getFirstChild();\n          Preconditions.checkState(lhs.isName());\n          Node rhs = assign.getLastChild();\n          lhs.addChildToBack(rhs.detachFromParent());\n          var.addChildToBack(lhs.detachFromParent());\n          redeclaration = true;\n        }\n        n = next;\n      }\n\n      if (redeclaration) {\n        JSDocInfo info = new JSDocInfo();\n        info.addSuppression(\"duplicate\");\n        var.setJSDocInfo(info);\n      }\n    }\n  }\n",
        "begin_line": 207,
        "end_line": 243,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.updateMinimumModule#869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.updateMinimumModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "    private void updateMinimumModule(JSModule newModule) {\n      if (minimumModule == null) {\n        minimumModule = newModule;\n      } else if (moduleGraph != null) {\n        minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(\n            minimumModule, newModule);\n      } else {\n        // If there is no module graph, then there must be exactly one\n        // module in the program.\n        Preconditions.checkState(newModule == minimumModule,\n                                 \"Missing module graph\");\n      }\n    }\n",
        "begin_line": 869,
        "end_line": 881,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2279
        },
        "num_failing_tests": 2
    },
    {
        "name": "CollapseVariableDeclarations.canBeRedeclared#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.GatherCollapses.canBeRedeclared(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private boolean canBeRedeclared(Node n, Scope s) {\n      if (!NodeUtil.isExprAssign(n)) {\n        return false;\n      }\n      Node assign = n.getFirstChild();\n      Node lhs = assign.getFirstChild();\n\n      if (!lhs.isName()) {\n        return false;\n      }\n\n      Var var = s.getVar(lhs.getString());\n      return var != null &&\n          var.getScope() == s && !blacklistedVars.contains(var);\n    }\n",
        "begin_line": 190,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2279
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortedDependencies.getInputProviding#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.getInputProviding(java.lang.String)",
        "snippet": "  public INPUT getInputProviding(String symbol)\n      throws MissingProvideException {\n    if (provideMap.containsKey(symbol)) {\n      return provideMap.get(symbol);\n    }\n    throw new MissingProvideException(symbol);\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "\n   * Return the input that gives us the given symbol.\n   * @throws MissingProvideException An exception if there is no\n   *     input for this symbol.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.isPropertyAssignmentInExpression#1092",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.isPropertyAssignmentInExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isPropertyAssignmentInExpression(Node n) {\n    Predicate<Node> isPropertyAssignmentInExpressionPredicate =\n        new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return (input.isGetProp() &&\n            input.getParent().isAssign());\n      }\n    };\n\n    return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);\n  }\n",
        "begin_line": 1092,
        "end_line": 1104,
        "comment": "\n   * Does the expression contain a property assignment?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.apply#1095",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.Anonymous-928e2c01-664d-43d6-8ecc-65338aeb12d4.apply(com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public boolean apply(Node input) {\n        return (input.isGetProp() &&\n            input.getParent().isAssign());\n      }\n",
        "begin_line": 1095,
        "end_line": 1099,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModuleGraph.manageDependencies#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.manageDependencies(com.google.javascript.jscomp.DependencyOptions, java.util.List<com.google.javascript.jscomp.CompilerInput>)",
        "snippet": "  public List<CompilerInput> manageDependencies(\n      DependencyOptions depOptions,\n      List<CompilerInput> inputs)\n      throws CircularDependencyException, MissingProvideException {\n\n    SortedDependencies<CompilerInput> sorter =\n        new SortedDependencies<CompilerInput>(inputs);\n    Set<CompilerInput> entryPointInputs = Sets.newLinkedHashSet();\n    if (depOptions.shouldPruneDependencies()) {\n      if (!depOptions.shouldDropMoochers()) {\n        entryPointInputs.addAll(sorter.getInputsWithoutProvides());\n      }\n\n      for (String entryPoint : depOptions.getEntryPoints()) {\n        entryPointInputs.add(sorter.getInputProviding(entryPoint));\n      }\n\n      CompilerInput baseJs = sorter.maybeGetInputProviding(\"goog\");\n      if (baseJs != null) {\n        entryPointInputs.add(baseJs);\n      }\n    } else {\n      entryPointInputs.addAll(inputs);\n    }\n\n    // The order of inputs, sorted independently of modules.\n    List<CompilerInput> absoluteOrder =\n        sorter.getDependenciesOf(inputs, depOptions.shouldSortDependencies());\n\n    // Figure out which sources *must* be in each module.\n    ListMultimap<JSModule, CompilerInput> entryPointInputsPerModule =\n        LinkedListMultimap.create();\n    for (CompilerInput input : entryPointInputs) {\n      JSModule module = input.getModule();\n      Preconditions.checkNotNull(module);\n      entryPointInputsPerModule.put(module, input);\n    }\n\n    // Clear the modules of their inputs. This also nulls out\n    // the input's reference to its module.\n    for (JSModule module : getAllModules()) {\n      module.removeAll();\n    }\n\n    // Figure out which sources *must* be in each module, or in one\n    // of that module's dependencies.\n    for (JSModule module : entryPointInputsPerModule.keySet()) {\n      List<CompilerInput> transitiveClosure =\n          sorter.getDependenciesOf(\n              entryPointInputsPerModule.get(module),\n              depOptions.shouldSortDependencies());\n      for (CompilerInput input : transitiveClosure) {\n        JSModule oldModule = input.getModule();\n        if (oldModule == null) {\n          input.setModule(module);\n        } else {\n          input.setModule(null);\n          input.setModule(\n              getDeepestCommonDependencyInclusive(oldModule, module));\n        }\n      }\n    }\n\n    // All the inputs are pointing to the modules that own them. Yeah!\n    // Update the modules to reflect this.\n    for (CompilerInput input : absoluteOrder) {\n      JSModule module = input.getModule();\n      if (module != null) {\n        module.add(input);\n      }\n    }\n\n    // Now, generate the sorted result.\n    List<CompilerInput> result = Lists.newArrayList();\n    for (JSModule module : getAllModules()) {\n      result.addAll(module.getInputs());\n    }\n\n    return result;\n  }\n",
        "begin_line": 311,
        "end_line": 390,
        "comment": "\n   * Apply the dependency options to the list of sources, returning a new\n   * source list re-ordering and dropping files as necessary.\n   * This module graph will be updated to reflect the new list.\n   *\n   * @param inputs The original list of sources. Used to ensure that the sort\n   *     is stable.\n   * @throws CircularDependencyException if there is a circular dependency\n   *     between the provides and requires.\n   * @throws MissingProvideException if an entry point was not provided\n   *     by any of the inputs.\n   * @see DependencyOptions for more info on how this works.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 2
    },
    {
        "name": "TransformAMDToCJSModule.visit#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.TransformAMDModulesCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() && n.getFirstChild() != null &&\n          n.getFirstChild().isName() &&\n          \"define\".equals(n.getFirstChild().getString())) {\n        Scope.Var define = t.getScope().getVar(n.getFirstChild().\n            getString());\n        if (define != null && !define.isGlobal()) {\n          // Ignore non-global define.\n          return;\n        }\n        if (!(parent.isExprResult() && parent.getParent().isScript())) {\n          t.report(n, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR);\n          return;\n        }\n        Node script = parent.getParent();\n        Node requiresNode = null;\n        Node callback = null;\n        int defineArity = n.getChildCount() - 1;\n        if (defineArity == 0) {\n          unsupportedDefineError(t, n);\n          return;\n        } else if (defineArity == 1) {\n          callback = n.getChildAtIndex(1);\n          if (callback.isObjectLit()) {\n            handleDefineObjectLiteral(parent, callback, script);\n            return;\n          }\n        } else if (defineArity == 2) {\n          requiresNode = n.getChildAtIndex(1);\n          callback = n.getChildAtIndex(2);\n        } else if (defineArity >= 3) {\n          unsupportedDefineError(t, n);\n          return;\n        }\n\n        if (!callback.isFunction() ||\n            (requiresNode != null && !requiresNode.isArrayLit())) {\n          unsupportedDefineError(t, n);\n          return;\n        }\n\n        handleRequiresAndParamList(t, n, script, requiresNode, callback);\n\n        Node callbackBlock = callback.getChildAtIndex(2);\n        NodeTraversal.traverse(compiler, callbackBlock,\n            new DefineCallbackReturnCallback());\n\n        moveCallbackContentToTopLevel(parent, script, callbackBlock);\n        compiler.reportCodeChange();\n      }\n    }\n",
        "begin_line": 82,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "TransformAMDToCJSModule.handleDefineObjectLiteral#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.TransformAMDModulesCallback.handleDefineObjectLiteral(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void handleDefineObjectLiteral(Node parent, Node onlyExport,\n        Node script) {\n      onlyExport.getParent().removeChild(onlyExport);\n      script.replaceChild(parent,\n          IR.exprResult(IR.assign(IR.name(\"exports\"), onlyExport))\n              .copyInformationFromForTree(onlyExport));\n      compiler.reportCodeChange();\n    }\n",
        "begin_line": 139,
        "end_line": 146,
        "comment": "\n     * When define is called with an object literal, assign it to exports and\n     * we're done.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeRemoveDeadCode.isExprConditional#587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.isExprConditional(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isExprConditional(Node n) {\n    if (n.isExprResult()) {\n      switch (n.getFirstChild().getType()) {\n        case Token.HOOK:\n        case Token.AND:\n        case Token.OR:\n          return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 587,
        "end_line": 597,
        "comment": "\n   * @return Whether the node is a rooted with a HOOK, AND, or OR node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.objectlit#377",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.objectlit(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node objectlit(Node ... propdefs) {\n    Node objectlit = new Node(Token.OBJECTLIT);\n    for (Node propdef : propdefs) {\n      Preconditions.checkState(\n          propdef.isStringKey() ||\n          propdef.isGetterDef() || propdef.isSetterDef());\n      Preconditions.checkState(propdef.hasOneChild());\n      objectlit.addChildToBack(propdef);\n    }\n    return objectlit;\n  }\n",
        "begin_line": 377,
        "end_line": 387,
        "comment": " literals",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 7
    },
    {
        "name": "GlobalNamespace.handleGet#643",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleGet(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    void handleGet(NodeTraversal t, Node n, Node parent, String name) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Ref.Type type = Ref.Type.DIRECT_GET;\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.IF:\n          case Token.TYPEOF:\n          case Token.VOID:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.POS:\n          case Token.NEG:\n            break;\n          case Token.CALL:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.CALL_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.NEW:\n            type = n == parent.getFirstChild()\n                   ? Ref.Type.DIRECT_GET\n                   : Ref.Type.ALIASING_GET;\n            break;\n          case Token.OR:\n          case Token.AND:\n            // This node is x or y in (x||y) or (x&&y). We only know that an\n            // alias is not getting created for this name if the result is used\n            // in a boolean context or assigned to the same name\n            // (e.g. var a = a || {}).\n            type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            break;\n          case Token.HOOK:\n            if (n != parent.getFirstChild()) {\n              // This node is y or z in (x?y:z). We only know that an alias is\n              // not getting created for this name if the result is assigned to\n              // the same name (e.g. var a = a ? a : {}).\n              type = determineGetTypeForHookOrBooleanExpr(t, parent, name);\n            }\n            break;\n          case Token.DELPROP:\n            type = Ref.Type.DELETE_PROP;\n            break;\n          default:\n            type = Ref.Type.ALIASING_GET;\n            break;\n        }\n      }\n\n      handleGet(t, n, parent, name, type);\n    }\n",
        "begin_line": 643,
        "end_line": 693,
        "comment": "\n     * Updates our representation of the global namespace to reflect a read\n     * of a global name.\n     *\n     * @param t The traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckUnreachableCode.apply#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.ReachablePredicate.apply(com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    public boolean apply(EdgeTuple<Node, Branch> input) {\n      Branch branch = input.edge;\n      if (!branch.isConditional()) {\n        return true;\n      }\n      Node predecessor = input.sourceNode;\n      Node condition = NodeUtil.getConditionExpression(predecessor);\n\n      // TODO(user): Handle more complicated expression like true == true,\n      // etc....\n      if (condition != null) {\n        TernaryValue val = NodeUtil.getImpureBooleanValue(condition);\n        if (val != TernaryValue.UNKNOWN) {\n          return val.toBoolean(true) == (branch == Branch.ON_TRUE);\n        }\n      }\n      return true;\n    }\n",
        "begin_line": 93,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2097
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setRunOptions#214",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.setRunOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected void setRunOptions(CompilerOptions options)\n      throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n\n    if (config.warningGuards != null) {\n      for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n      }\n    }\n\n    createDefineOrTweakReplacements(config.define, options, false);\n\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n\n    // Dependency options\n    if (config.onlyClosureDependencies) {\n      if (config.closureEntryPoints.isEmpty()) {\n        throw new FlagUsageException(\"When only_closure_dependencies is \"\n          + \"on, you must specify at least one closure_entry_point\");\n      }\n\n      options.setDependencyOptions(new DependencyOptions()\n          .setDependencyPruning(true)\n          .setDependencySorting(true)\n          .setMoocherDropping(true)\n          .setEntryPoints(config.closureEntryPoints));\n    } else if (config.manageClosureDependencies ||\n        config.closureEntryPoints.size() > 0) {\n      options.setDependencyOptions(new DependencyOptions()\n          .setDependencyPruning(true)\n          .setDependencySorting(true)\n          .setMoocherDropping(false)\n          .setEntryPoints(config.closureEntryPoints));\n    }\n\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n\n    legacyOutputCharset = options.outputCharset = getLegacyOutputCharset();\n    outputCharset2 = getOutputCharset2();\n    inputCharset = getInputCharset();\n\n    if (config.jsOutputFile.length() > 0) {\n      if (config.skipNormalOutputs) {\n        throw new FlagUsageException(\"skip_normal_outputs and js_output_file\"\n            + \" cannot be used together.\");\n      }\n    }\n\n    if (config.skipNormalOutputs && config.printAst) {\n      throw new FlagUsageException(\"skip_normal_outputs and print_ast cannot\"\n          + \" be used together.\");\n    }\n\n    if (config.skipNormalOutputs && config.printTree) {\n      throw new FlagUsageException(\"skip_normal_outputs and print_tree cannot\"\n          + \" be used together.\");\n    }\n\n    if (config.createSourceMap.length() > 0) {\n      options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n\n    if (!config.variableMapInputFile.equals(\"\")) {\n      options.inputVariableMapSerialized =\n          VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n\n    if (!config.propertyMapInputFile.equals(\"\")) {\n      options.inputPropertyMapSerialized =\n          VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n\n    if (config.languageIn.length() > 0) {\n      if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") ||\n          config.languageIn.equals(\"ES5_STRICT\")) {\n        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n      } else if (config.languageIn.equals(\"ECMASCRIPT5\") ||\n          config.languageIn.equals(\"ES5\")) {\n        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n      } else if (config.languageIn.equals(\"ECMASCRIPT3\") ||\n                 config.languageIn.equals(\"ES3\")) {\n        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n      } else {\n        throw new FlagUsageException(\"Unknown language `\" + config.languageIn +\n                                     \"' specified.\");\n      }\n    }\n\n    if (!config.outputManifests.isEmpty()) {\n      Set<String> uniqueNames = Sets.newHashSet();\n      for (String filename : config.outputManifests) {\n        if (!uniqueNames.add(filename)) {\n          throw new FlagUsageException(\"output_manifest flags specify \" +\n              \"duplicate file names: \" + filename);\n        }\n      }\n    }\n\n    if (!config.outputBundles.isEmpty()) {\n      Set<String> uniqueNames = Sets.newHashSet();\n      for (String filename : config.outputBundles) {\n        if (!uniqueNames.add(filename)) {\n          throw new FlagUsageException(\"output_bundle flags specify \" +\n              \"duplicate file names: \" + filename);\n        }\n      }\n    }\n\n    options.acceptConstKeyword = config.acceptConstKeyword;\n    options.transformAMDToCJSModules = config.transformAMDToCJSModules;\n    options.processCommonJSModules = config.processCommonJSModules;\n    options.commonJSModulePathPrefix = config.commonJSModulePathPrefix;\n  }\n",
        "begin_line": 214,
        "end_line": 331,
        "comment": "\n   * Sets options based on the configurations set flags API.\n   * Called during the run() run() method.\n   * If you want to ignore the flags API, or interpret flags your own way,\n   * then you should override this method.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.202
        },
        "num_failing_tests": 2
    },
    {
        "name": "ExploitAssigns.isCollapsibleValue#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExploitAssigns.java",
        "class_name": "com.google.javascript.jscomp.ExploitAssigns",
        "signature": "com.google.javascript.jscomp.ExploitAssigns.isCollapsibleValue(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private boolean isCollapsibleValue(Node value, boolean isLValue) {\n    switch (value.getType()) {\n      case Token.GETPROP:\n        // Do not collapse GETPROPs on arbitrary objects, because\n        // they may be implemented setter functions, and oftentimes\n        // setter functions fail on native objects. This is OK for \"THIS\"\n        // objects, because we assume that they are non-native.\n        return !isLValue || value.getFirstChild().isThis();\n\n      case Token.NAME:\n        return true;\n\n      default:\n        return NodeUtil.isImmutableValue(value);\n    }\n  }\n",
        "begin_line": 76,
        "end_line": 91,
        "comment": "\n   * Determines whether we know enough about the given value to be able\n   * to collapse it into subsequent expressions.\n   *\n   * For example, we can collapse booleans and variable names:\n   * <code>\n   * x = 3; y = x; // y = x = 3;\n   * a = true; b = true; // b = a = true;\n   * <code>\n   * But we won't try to collapse complex expressions.\n   *\n   * @param value The value node.\n   * @param isLValue Whether it's on the left-hand side of an expr.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1952
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortedDependencies.getInputsWithoutProvides#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.getInputsWithoutProvides()",
        "snippet": "  public List<INPUT> getInputsWithoutProvides() {\n    return Collections.<INPUT>unmodifiableList(noProvides);\n  }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "TokenStream.isKeyword#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "class_name": "com.google.javascript.rhino.TokenStream",
        "signature": "com.google.javascript.rhino.TokenStream.isKeyword(java.lang.String)",
        "snippet": "    public static boolean isKeyword(String name) {\n        boolean id = false;\n        String s = name;\n        complete: {\n            String X = null;\n            int c;\n            partial: switch (s.length()) {\n            case 2: c=s.charAt(1);\n                if (c=='f') {\n                  if (s.charAt(0)=='i') {id=true; break complete;}\n                } else if (c=='n') {\n                  if (s.charAt(0)=='i') {id=true; break complete;}\n                } else if (c=='o') {\n                  if (s.charAt(0)=='d') {id=true; break complete;}\n                }\n                break partial;\n            case 3: switch (s.charAt(0)) {\n                case 'f':\n                  if (s.charAt(2)=='r' && s.charAt(1)=='o') {\n                    id=true; break complete;\n                  } break partial;\n                case 'i':\n                  if (s.charAt(2)=='t' && s.charAt(1)=='n') {\n                    id=true; break complete;\n                  } break partial;\n                case 'n':\n                  if (s.charAt(2)=='w' && s.charAt(1)=='e') {\n                    id=true; break complete;\n                  } break partial;\n                case 't':\n                  if (s.charAt(2)=='y' && s.charAt(1)=='r') {\n                    id=true; break complete;\n                  } break partial;\n                case 'v':\n                  if (s.charAt(2)=='r' && s.charAt(1)=='a') {\n                    id=true; break complete;\n                  } break partial;\n                } break partial;\n            case 4: switch (s.charAt(0)) {\n                case 'b': X=\"byte\";id=true; break partial;\n                case 'c': c=s.charAt(3);\n                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='a') {\n                            id=true; break complete;} }\n                    else if (c=='r') {\n                      if (s.charAt(2)=='a' && s.charAt(1)=='h') {\n                        id=true; break complete;\n                      }\n                    }\n                    break partial;\n                case 'e': c=s.charAt(3);\n                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='l') {\n                            id=true; break complete;} }\n                    else if (c=='m') {\n                      if (s.charAt(2)=='u' && s.charAt(1)=='n') {\n                            id=true; break complete;} }\n                    break partial;\n                case 'g': X=\"goto\";id=true; break partial;\n                case 'l': X=\"long\";id=true; break partial;\n                case 'n': X=\"null\";id=true; break partial;\n                case 't': c=s.charAt(3);\n                    if (c=='e') { if (s.charAt(2)=='u' && s.charAt(1)=='r') {\n                            id=true; break complete;} }\n                    else if (c=='s') {\n                      if (s.charAt(2)=='i' && s.charAt(1)=='h') {\n                            id=true; break complete;} }\n                    break partial;\n                case 'v': X=\"void\";id=true; break partial;\n                case 'w': X=\"with\";id=true; break partial;\n                } break partial;\n            case 5: switch (s.charAt(2)) {\n                case 'a': X=\"class\";id=true; break partial;\n                case 'e': X=\"break\";id=true; break partial;\n                case 'i': X=\"while\";id=true; break partial;\n                case 'l': X=\"false\";id=true; break partial;\n                case 'n': c=s.charAt(0);\n                    if (c=='c') { X=\"const\";id=true; }\n                    else if (c=='f') { X=\"final\";id=true; }\n                    break partial;\n                case 'o': c=s.charAt(0);\n                    if (c=='f') { X=\"float\";id=true; }\n                    else if (c=='s') { X=\"short\";id=true; }\n                    break partial;\n                case 'p': X=\"super\";id=true; break partial;\n                case 'r': X=\"throw\";id=true; break partial;\n                case 't': X=\"catch\";id=true; break partial;\n                } break partial;\n            case 6: switch (s.charAt(1)) {\n                case 'a': X=\"native\";id=true; break partial;\n                case 'e': c=s.charAt(0);\n                    if (c=='d') { X=\"delete\";id=true; }\n                    else if (c=='r') { X=\"return\";id=true; }\n                    break partial;\n                case 'h': X=\"throws\";id=true; break partial;\n                case 'm': X=\"import\";id=true; break partial;\n                case 'o': X=\"double\";id=true; break partial;\n                case 't': X=\"static\";id=true; break partial;\n                case 'u': X=\"public\";id=true; break partial;\n                case 'w': X=\"switch\";id=true; break partial;\n                case 'x': X=\"export\";id=true; break partial;\n                case 'y': X=\"typeof\";id=true; break partial;\n                } break partial;\n            case 7: switch (s.charAt(1)) {\n                case 'a': X=\"package\";id=true; break partial;\n                case 'e': X=\"default\";id=true; break partial;\n                case 'i': X=\"finally\";id=true; break partial;\n                case 'o': X=\"boolean\";id=true; break partial;\n                case 'r': X=\"private\";id=true; break partial;\n                case 'x': X=\"extends\";id=true; break partial;\n                } break partial;\n            case 8: switch (s.charAt(0)) {\n                case 'a': X=\"abstract\";id=true; break partial;\n                case 'c': X=\"continue\";id=true; break partial;\n                case 'd': X=\"debugger\";id=true; break partial;\n                case 'f': X=\"function\";id=true; break partial;\n                case 'v': X=\"volatile\";id=true; break partial;\n                } break partial;\n            case 9: c=s.charAt(0);\n                if (c=='i') { X=\"interface\";id=true; }\n                else if (c=='p') { X=\"protected\";id=true; }\n                else if (c=='t') { X=\"transient\";id=true; }\n                break partial;\n            case 10: c=s.charAt(1);\n                if (c=='m') { X=\"implements\";id=true; }\n                else if (c=='n') { X=\"instanceof\";id=true; }\n                break partial;\n            case 12: X=\"synchronized\";id=true; break partial;\n            }\n            // patial match validate the entire string the one possiblity\n            if (X!=null && X!=s && !X.equals(s)) return false;\n        }\n        return id;\n    }\n",
        "begin_line": 57,
        "end_line": 188,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.JSDocInfo#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo()",
        "snippet": "  public JSDocInfo() {}\n",
        "begin_line": 338,
        "end_line": 338,
        "comment": " Visible for testing.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.toString#1211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"JSDocInfo\";\n  }\n",
        "begin_line": 1211,
        "end_line": 1214,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.getprop#299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.getprop(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public static Node getprop(Node target, Node prop) {\n    Preconditions.checkState(mayBeExpression(target));\n    Preconditions.checkState(prop.isString());\n    return new Node(Token.GETPROP, target, prop);\n  }\n",
        "begin_line": 299,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1848
        },
        "num_failing_tests": 7
    },
    {
        "name": "IR.and#328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.and(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public static Node and(Node expr1, Node expr2) {\n    return binaryOp(Token.AND, expr1, expr2);\n  }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1833
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setDependencyOptions#1309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setDependencyOptions(com.google.javascript.jscomp.DependencyOptions)",
        "snippet": "  public void setDependencyOptions(DependencyOptions options) {\n    Preconditions.checkNotNull(options);\n    this.dependencyOptions = options;\n  }\n",
        "begin_line": 1309,
        "end_line": 1312,
        "comment": "\n   * Sets dependency options. See the DependencyOptions class for more info.\n   * This supersedes manageClosureDependencies.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1833
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortedDependencies.maybeGetInputProviding#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.maybeGetInputProviding(java.lang.String)",
        "snippet": "  public INPUT maybeGetInputProviding(String symbol) {\n    return provideMap.get(symbol);\n  }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n   * Return the input that gives us the given symbol, or null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1782
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.assign#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public static Node assign(Node target, Node expr) {\n    Preconditions.checkState(isAssignmentTarget(target));\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(Token.ASSIGN, target, expr);\n  }\n",
        "begin_line": 311,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.178
        },
        "num_failing_tests": 7
    },
    {
        "name": "IR.isAssignmentTarget#464",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.isAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean isAssignmentTarget(Node n) {\n    return n.isName() || n.isGetProp() || n.isGetElem();\n  }\n",
        "begin_line": 464,
        "end_line": 466,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.178
        },
        "num_failing_tests": 7
    },
    {
        "name": "DependencyOptions.shouldDropMoochers#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.shouldDropMoochers()",
        "snippet": "  boolean shouldDropMoochers() {\n    return pruneDependencies && dropMoochers;\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1734
        },
        "num_failing_tests": 2
    },
    {
        "name": "DependencyOptions.getEntryPoints#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.getEntryPoints()",
        "snippet": "  Collection<String> getEntryPoints() {\n    return entryPoints;\n  }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1734
        },
        "num_failing_tests": 2
    },
    {
        "name": "ExploitAssigns.collapseAssignEqualTo#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExploitAssigns.java",
        "class_name": "com.google.javascript.jscomp.ExploitAssigns",
        "signature": "com.google.javascript.jscomp.ExploitAssigns.collapseAssignEqualTo(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean collapseAssignEqualTo(Node expr, Node exprParent,\n      Node value) {\n    Node assign = expr.getFirstChild();\n    Node parent = exprParent;\n    Node next = expr.getNext();\n    while (next != null) {\n      switch (next.getType()) {\n        case Token.AND:\n        case Token.OR:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.RETURN:\n        case Token.EXPR_RESULT:\n          // Dive down the left side\n          parent = next;\n          next = next.getFirstChild();\n          break;\n\n        case Token.VAR:\n          if (next.getFirstChild().hasChildren()) {\n            parent = next.getFirstChild();\n            next = parent.getFirstChild();\n            break;\n          }\n          return false;\n\n        case Token.GETPROP:\n        case Token.NAME:\n          if (next.isQualifiedName()) {\n            String nextName = next.getQualifiedName();\n            if (value.isQualifiedName() &&\n                nextName.equals(value.getQualifiedName())) {\n              // If the previous expression evaluates to value of a\n              // qualified name, and that qualified name is used again\n              // shortly, then we can exploit the assign here.\n\n              // Verify the assignment doesn't change its own value.\n              if (!isSafeReplacement(next, assign)) {\n                return false;\n              }\n\n              exprParent.removeChild(expr);\n              expr.removeChild(assign);\n              parent.replaceChild(next, assign);\n              return true;\n            }\n          }\n          return false;\n\n        case Token.ASSIGN:\n          // Assigns are really tricky. In lots of cases, we want to inline\n          // into the right side of the assign. But the left side of the\n          // assign is evaluated first, and it may have convoluted logic:\n          //   a = null;\n          //   (a = b).c = null;\n          // We don't want to exploit the first assign. Similarly:\n          //   a.b = null;\n          //   a.b.c = null;\n          // We don't want to exploit the first assign either.\n          //\n          // To protect against this, we simply only inline when the left side\n          // is guaranteed to evaluate to the same L-value no matter what.\n          Node leftSide = next.getFirstChild();\n          if (leftSide.isName() ||\n              leftSide.isGetProp() &&\n              leftSide.getFirstChild().isThis()) {\n            // Dive down the right side of the assign.\n            parent = next;\n            next = leftSide.getNext();\n            break;\n          } else {\n            return false;\n          }\n\n        default:\n          if (NodeUtil.isImmutableValue(next)\n              && next.isEquivalentTo(value)) {\n            // If the r-value of the expr assign is an immutable value,\n            // and the value is used again shortly, then we can exploit\n            // the assign here.\n            exprParent.removeChild(expr);\n            expr.removeChild(assign);\n            parent.replaceChild(next, assign);\n            return true;\n          }\n          // Return without inlining a thing\n          return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 108,
        "end_line": 199,
        "comment": "\n   * Collapse the given assign expression into the expression directly\n   * following it, if possible.\n   *\n   * @param expr The expression that may be moved.\n   * @param exprParent The parent of {@code expr}.\n   * @param value The value of this expression, expressed as a node. Each\n   *     expression may have multiple values, so this function may be called\n   *     multiple times for the same expression. For example,\n   *     <code>\n   *     a = true;\n   *     </code>\n   *     is equal to the name \"a\" and the boolean \"true\".\n   * @return Whether the expression was collapsed successfully.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "DependencyOptions.setMoocherDropping#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.setMoocherDropping(boolean)",
        "snippet": "  public DependencyOptions setMoocherDropping(boolean enabled) {\n    this.dropMoochers = enabled;\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n   * Enables or disables moocher dropping mode.\n   *\n   * A 'moocher' is a file that does not provide any symbols (though they\n   * may require symbols). This is usually because they don't want to\n   * tie themselves to a particular dependency system (e.g., Closure's\n   * goog.provide, CommonJS modules). So they rely on other people to\n   * manage dependencies on them.\n   *\n   * If true, we drop these files when we prune dependencies.\n   * If false, we always keep these files an anything they depend on.\n   * The default is false.\n   *\n   * Notice that this option only makes sense if dependency pruning is on,\n   * and a set of entry points is specified.\n   *\n   * @return this for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.apply#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.Anonymous-9cd5a1fa-2e9b-401b-bd32-32fbdacda309.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node input) {\n      return !input.isFunction();\n    }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.165
        },
        "num_failing_tests": 2
    },
    {
        "name": "DependencyOptions.setEntryPoints#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.setEntryPoints(java.util.Collection<java.lang.String>)",
        "snippet": "  public DependencyOptions setEntryPoints(Collection<String> symbols) {\n    entryPoints.clear();\n    entryPoints.addAll(symbols);\n    return this;\n  }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "\n   * Adds a collection of symbols to always keep.\n   *\n   * In dependency pruning mode, we will automatically keep all the\n   * transitive dependencies of these symbols.\n   *\n   * The syntactic form of a symbol depends on the type of dependency\n   * primitives we're using. For example, goog.provide('foo.bar')\n   * provides the symbol 'foo.bar'.\n   *\n   * @return this for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.165
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.isLowerPrecedenceInExpression#1063",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.isLowerPrecedenceInExpression(com.google.javascript.rhino.Node, int)",
        "snippet": "  private boolean isLowerPrecedenceInExpression(Node n,\n      final int precedence) {\n    Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n    };\n\n    return NodeUtil.has(n, isLowerPrecedencePredicate,\n        DONT_TRAVERSE_FUNCTIONS_PREDICATE);\n  }\n",
        "begin_line": 1063,
        "end_line": 1074,
        "comment": "\n   * Does the expression contain an operator with lower precedence than\n   * the argument?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1612
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.apply#1066",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.Anonymous-1ee03881-29fe-4bc0-8306-9c772a33e029.apply(com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public boolean apply(Node input) {\n        return NodeUtil.precedence(input.getType()) < precedence;\n      }\n",
        "begin_line": 1066,
        "end_line": 1069,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1612
        },
        "num_failing_tests": 2
    },
    {
        "name": "DependencyOptions.setDependencyPruning#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.setDependencyPruning(boolean)",
        "snippet": "  public DependencyOptions setDependencyPruning(boolean enabled) {\n    this.pruneDependencies = enabled;\n    return this;\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\n   * Enables or disables dependency pruning mode.\n   *\n   * In dependency pruning mode, we will look for all files that provide a\n   * symbol. Unless that file is a transitive dependency of a file that\n   * we're using, we will remove it from the compilation job.\n   *\n   * This does not affect how we handle files that do not provide symbols.\n   * See setMoocherDropping for information on how these are handled.\n   *\n   * @return this for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1612
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeCollectPropertyAssignments.collectProperty#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java",
        "class_name": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
        "signature": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments.collectProperty(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean collectProperty(\n      Node propertyCandidate, String name, Node value) {\n    if (!isPropertyAssignmentToName(propertyCandidate)) {\n      return false;\n    }\n\n    Node lhs = propertyCandidate.getFirstChild().getFirstChild();\n    // Must be an assignment to the recent variable...\n    if (!name.equals(lhs.getFirstChild().getString())) {\n      return false;\n    }\n\n    Node rhs = lhs.getNext();\n    // with a value that cannot change the values of the variables,\n    if (NodeUtil.mayHaveSideEffects(rhs)\n        || NodeUtil.canBeSideEffected(rhs)) {\n      return false;\n    }\n    // and does not have a reference to a variable initialized after it.\n    if (!NodeUtil.isLiteralValue(rhs, true)\n        && mightContainForwardReference(rhs, name)) {\n      return false;\n    }\n\n    switch (value.getType()) {\n      case Token.ARRAYLIT:\n        if (!collectArrayProperty(value, propertyCandidate)) {\n          return false;\n        }\n        break;\n      case Token.OBJECTLIT:\n        if (!collectObjectProperty(value, propertyCandidate)) {\n          return false;\n        }\n        break;\n      default:\n        throw new IllegalStateException();\n    }\n    return true;\n  }\n",
        "begin_line": 130,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.getBlockExpression#953",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.getBlockExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getBlockExpression(Node n) {\n    Preconditions.checkState(isFoldableExpressBlock(n));\n    return n.getFirstChild();\n  }\n",
        "begin_line": 953,
        "end_line": 956,
        "comment": "\n   * @return The expression node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1455
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.isSimpleAssignment#540",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.isSimpleAssignment(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isSimpleAssignment(Node n) {\n    // For our purposes we define a simple assignment to be a assignment\n    // to a NAME node, or a VAR declaration with one child and a initializer.\n    if (NodeUtil.isExprAssign(n)\n        && n.getFirstChild().getFirstChild().isName()) {\n      return true;\n    } else if (n.isVar() && n.hasOneChild() &&\n        n.getFirstChild().getFirstChild() != null) {\n      return true;\n    }\n\n    return false;\n  }\n",
        "begin_line": 540,
        "end_line": 552,
        "comment": "\n   * @return whether the node is a assignment to a simple name, or simple var\n   * declaration with initialization.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1455
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.tryFoldIf#615",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.tryFoldIf(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryFoldIf(Node n) {\n    Preconditions.checkState(n.isIf());\n    Node parent = n.getParent();\n    Preconditions.checkNotNull(parent);\n    int type = n.getType();\n    Node cond = n.getFirstChild();\n    Node thenBody = cond.getNext();\n    Node elseBody = thenBody.getNext();\n\n    // if (x) { .. } else { } --> if (x) { ... }\n    if (elseBody != null && !mayHaveSideEffects(elseBody)) {\n      n.removeChild(elseBody);\n      elseBody = null;\n      reportCodeChange();\n    }\n\n    // if (x) { } else { ... } --> if (!x) { ... }\n    if (!mayHaveSideEffects(thenBody) && elseBody != null) {\n      n.removeChild(elseBody);\n      n.replaceChild(thenBody, elseBody);\n      Node notCond = new Node(Token.NOT);\n      n.replaceChild(cond, notCond);\n      notCond.addChildToFront(cond);\n      cond = notCond;\n      thenBody = cond.getNext();\n      elseBody = null;\n      reportCodeChange();\n    }\n\n    // if (x()) { }\n    if (!mayHaveSideEffects(thenBody) && elseBody == null) {\n      if (mayHaveSideEffects(cond)) {\n        // x() has side effects, just leave the condition on its own.\n        n.removeChild(cond);\n        Node replacement = NodeUtil.newExpr(cond);\n        parent.replaceChild(n, replacement);\n        reportCodeChange();\n        return replacement;\n      } else {\n        // x() has no side effects, the whole tree is useless now.\n        NodeUtil.removeChild(parent, n);\n        reportCodeChange();\n        return null;\n      }\n    }\n\n    // Try transforms that apply to both IF and HOOK.\n    TernaryValue condValue = NodeUtil.getImpureBooleanValue(cond);\n    if (condValue == TernaryValue.UNKNOWN) {\n      return n;  // We can't remove branches otherwise!\n    }\n\n    if (mayHaveSideEffects(cond)) {\n      // Transform \"if (a = 2) {x =2}\" into \"if (true) {a=2;x=2}\"\n      boolean newConditionValue = condValue == TernaryValue.TRUE;\n      // Add an elseBody if it is needed.\n      if (!newConditionValue && elseBody == null) {\n        elseBody = IR.block().srcref(n);\n        n.addChildToBack(elseBody);\n      }\n      Node newCond = NodeUtil.booleanNode(newConditionValue);\n      n.replaceChild(cond, newCond);\n      Node branchToKeep = newConditionValue ? thenBody : elseBody;\n      branchToKeep.addChildToFront(IR.exprResult(cond).srcref(cond));\n      reportCodeChange();\n      cond = newCond;\n    }\n\n    boolean condTrue = condValue.toBoolean(true);\n    if (n.getChildCount() == 2) {\n      Preconditions.checkState(type == Token.IF);\n\n      if (condTrue) {\n        // Replace \"if (true) { X }\" with \"X\".\n        Node thenStmt = n.getFirstChild().getNext();\n        n.removeChild(thenStmt);\n        parent.replaceChild(n, thenStmt);\n        reportCodeChange();\n        return thenStmt;\n      } else {\n        // Remove \"if (false) { X }\" completely.\n        NodeUtil.redeclareVarsInsideBranch(n);\n        NodeUtil.removeChild(parent, n);\n        reportCodeChange();\n        return null;\n      }\n    } else {\n      // Replace \"if (true) { X } else { Y }\" with X, or\n      // replace \"if (false) { X } else { Y }\" with Y.\n      Node trueBranch = n.getFirstChild().getNext();\n      Node falseBranch = trueBranch.getNext();\n      Node branchToKeep = condTrue ? trueBranch : falseBranch;\n      Node branchToRemove = condTrue ? falseBranch : trueBranch;\n      NodeUtil.redeclareVarsInsideBranch(branchToRemove);\n      n.removeChild(branchToKeep);\n      parent.replaceChild(n, branchToKeep);\n      reportCodeChange();\n      return branchToKeep;\n    }\n  }\n",
        "begin_line": 615,
        "end_line": 714,
        "comment": "\n   * Try folding IF nodes by removing dead branches.\n   * @return the replacement node, if changed, or the original if not\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1455
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortedDependencies.SortedDependencies#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.SortedDependencies(java.util.List<INPUT>)",
        "snippet": "  public SortedDependencies(List<INPUT> inputs)\n      throws CircularDependencyException {\n    this.inputs = Lists.newArrayList(inputs);\n    noProvides = Lists.newArrayList();\n\n    // Collect all symbols provided in these files.\n    for (INPUT input : inputs) {\n      Collection<String> currentProvides = input.getProvides();\n      if (currentProvides.isEmpty()) {\n        noProvides.add(input);\n      }\n\n      for (String provide : currentProvides) {\n        provideMap.put(provide, input);\n      }\n    }\n\n    // Get the direct dependencies.\n    final Multimap<INPUT, INPUT> deps = HashMultimap.create();\n    for (INPUT input : inputs) {\n      for (String req : input.getRequires()) {\n        INPUT dep = provideMap.get(req);\n        if (dep != null && dep != input) {\n          deps.put(input, dep);\n        }\n      }\n    }\n\n    // Sort the inputs by sucking in 0-in-degree nodes until we're done.\n    sortedList = topologicalStableSort(inputs, deps);\n\n    // The dependency graph of inputs has a cycle iff sortedList is a proper\n    // subset of inputs. Also, it has a cycle iff the subgraph\n    // (inputs - sortedList) has a cycle. It's fairly easy to prove this\n    // by the lemma that a graph has a cycle iff it has a subgraph where\n    // no nodes have out-degree 0. I'll leave the proof of this as an exercise\n    // to the reader.\n    if (sortedList.size() < inputs.size()) {\n      List<INPUT> subGraph = Lists.newArrayList(inputs);\n      subGraph.removeAll(sortedList);\n\n      throw new CircularDependencyException(\n          cycleToString(findCycle(subGraph, deps)));\n    }\n  }\n",
        "begin_line": 64,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.138
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.exprResult#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.exprResult(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node exprResult(Node expr) {\n    Preconditions.checkState(mayBeExpression(expr));\n    return new Node(Token.EXPR_RESULT, expr);\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.137
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeFoldConstants.tryFoldAndOr#562",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldAndOr(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryFoldAndOr(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    Node result = null;\n\n    int type = n.getType();\n\n    TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left);\n\n    if (leftVal != TernaryValue.UNKNOWN) {\n      boolean lval = leftVal.toBoolean(true);\n\n      // (TRUE || x) => TRUE (also, (3 || x) => 3)\n      // (FALSE && x) => FALSE\n      if (lval && type == Token.OR ||\n          !lval && type == Token.AND) {\n        result = left;\n\n      } else if (!mayHaveSideEffects(left)) {\n        // (FALSE || x) => x\n        // (TRUE && x) => x\n        result = right;\n      }\n    }\n\n    // Note: Right hand side folding is handled by\n    // PeepholeSubstituteAlternateSyntax#tryMinimizeCondition\n\n    if (result != null) {\n      // Fold it!\n      n.removeChild(result);\n      parent.replaceChild(n, result);\n      reportCodeChange();\n\n      return result;\n    } else {\n      return n;\n    }\n  }\n",
        "begin_line": 562,
        "end_line": 600,
        "comment": "\n   * Try to fold a AND/OR node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1358
        },
        "num_failing_tests": 2
    },
    {
        "name": "ExploitAssigns.optimizeSubtree#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExploitAssigns.java",
        "class_name": "com.google.javascript.jscomp.ExploitAssigns",
        "signature": "com.google.javascript.jscomp.ExploitAssigns.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  Node optimizeSubtree(Node subtree) {\n    for (Node child = subtree.getFirstChild(); child != null;) {\n      Node next = child.getNext();\n      if (NodeUtil.isExprAssign(child)) {\n        collapseAssign(child.getFirstChild(), child, subtree);\n      }\n      child = next;\n    }\n    return subtree;\n  }\n",
        "begin_line": 31,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1358
        },
        "num_failing_tests": 2
    },
    {
        "name": "ExploitAssigns.collapseAssign#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExploitAssigns.java",
        "class_name": "com.google.javascript.jscomp.ExploitAssigns",
        "signature": "com.google.javascript.jscomp.ExploitAssigns.collapseAssign(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void collapseAssign(Node assign, Node expr,\n      Node exprParent) {\n    Node leftValue = assign.getFirstChild();\n    Node rightValue = leftValue.getNext();\n    if (isCollapsibleValue(leftValue, true) &&\n        collapseAssignEqualTo(expr, exprParent, leftValue)) {\n      reportCodeChange();\n    } else if (isCollapsibleValue(rightValue, false) &&\n        collapseAssignEqualTo(expr, exprParent, rightValue)) {\n      reportCodeChange();\n    } else if (rightValue.isAssign()) {\n      // Recursively deal with nested assigns.\n      collapseAssign(rightValue, expr, exprParent);\n    }\n  }\n",
        "begin_line": 46,
        "end_line": 60,
        "comment": "\n   * Try to collapse the given assign into subsequent expressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1358
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryMinimizeCondition#1120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryMinimizeCondition(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryMinimizeCondition(Node n) {\n    Node parent = n.getParent();\n\n    switch (n.getType()) {\n      case Token.NOT:\n        Node first = n.getFirstChild();\n        switch (first.getType()) {\n          case Token.NOT: {\n              Node newRoot = first.removeFirstChild();\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // NOT children are handled below.\n              return newRoot;\n            }\n          case Token.AND:\n          case Token.OR: {\n              // !(!x && !y) --> x || y\n              // !(!x || !y) --> x && y\n              // !(!x && y) --> x || !y\n              // !(!x || y) --> x && !y\n              // !(x && !y) --> !x || y\n              // !(x || !y) --> !x && y\n              // !(x && y) --> !x || !y\n              // !(x || y) --> !x && !y\n              Node leftParent = first.getFirstChild();\n              Node rightParent = first.getLastChild();\n              Node left, right;\n\n              // Check special case when such transformation cannot reduce\n              // due to the added ()\n              // It only occurs when both of expressions are not NOT expressions\n              if (!leftParent.isNot()\n                  && !rightParent.isNot()) {\n                // If an expression has higher precedence than && or ||,\n                // but lower precedence than NOT, an additional () is needed\n                // Thus we do not preceed\n                int op_precedence = NodeUtil.precedence(first.getType());\n                if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(leftParent, op_precedence))\n                    || (isLowerPrecedence(rightParent, NOT_PRECEDENCE)\n                    && isHigherPrecedence(rightParent, op_precedence))) {\n                  return n;\n                }\n              }\n\n              if (leftParent.isNot()) {\n                left = leftParent.removeFirstChild();\n              } else {\n                leftParent.detachFromParent();\n                left = IR.not(leftParent).srcref(leftParent);\n              }\n              if (rightParent.isNot()) {\n                right = rightParent.removeFirstChild();\n              } else {\n                rightParent.detachFromParent();\n                right = IR.not(rightParent).srcref(rightParent);\n              }\n\n              int newOp = (first.isAnd()) ? Token.OR : Token.AND;\n              Node newRoot = new Node(newOp, left, right);\n              parent.replaceChild(n, newRoot);\n              reportCodeChange();\n              // No need to traverse, tryMinimizeCondition is called on the\n              // AND and OR children below.\n              return newRoot;\n            }\n\n           default:\n             TernaryValue nVal = NodeUtil.getPureBooleanValue(first);\n             if (nVal != TernaryValue.UNKNOWN) {\n               boolean result = nVal.not().toBoolean(true);\n               int equivalentResult = result ? 1 : 0;\n               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n             }\n        }\n        // No need to traverse, tryMinimizeCondition is called on the NOT\n        // children in the general case in the main post-order traversal.\n        return n;\n\n      case Token.OR:\n      case Token.AND: {\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the children, this can't be done in the general case.\n        left = tryMinimizeCondition(left);\n        right = tryMinimizeCondition(right);\n\n        // Remove useless conditionals\n        // Handle four cases:\n        //   x || false --> x\n        //   x || true  --> true\n        //   x && true --> x\n        //   x && false  --> false\n        TernaryValue rightVal = NodeUtil.getPureBooleanValue(right);\n        if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {\n          int type = n.getType();\n          Node replacement = null;\n          boolean rval = rightVal.toBoolean(true);\n\n          // (x || FALSE) => x\n          // (x && TRUE) => x\n          if (type == Token.OR && !rval ||\n              type == Token.AND && rval) {\n            replacement = left;\n          } else if (!mayHaveSideEffects(left)) {\n            replacement = right;\n          }\n\n          if (replacement != null) {\n            n.detachChildren();\n            parent.replaceChild(n, replacement);\n            reportCodeChange();\n            return replacement;\n          }\n        }\n        return n;\n      }\n\n      case Token.HOOK: {\n        Node condition = n.getFirstChild();\n        Node trueNode = n.getFirstChild().getNext();\n        Node falseNode = n.getLastChild();\n\n        // Because the expression is in a boolean context minimize\n        // the result children, this can't be done in the general case.\n        // The condition is handled in the general case in #optimizeSubtree\n        trueNode = tryMinimizeCondition(trueNode);\n        falseNode = tryMinimizeCondition(falseNode);\n\n        // Handle four cases:\n        //   x ? true : false --> x\n        //   x ? false : true --> !x\n        //   x ? true : y     --> x || y\n        //   x ? y : false    --> x && y\n        Node replacement = null;\n        TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);\n        TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);\n        if (trueNodeVal == TernaryValue.TRUE\n            && falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = condition;\n        } else if (trueNodeVal == TernaryValue.FALSE\n            && falseNodeVal == TernaryValue.TRUE) {\n          // Remove useless conditionals, keep the condition\n          condition.detachFromParent();\n          replacement = IR.not(condition);\n        } else if (trueNodeVal == TernaryValue.TRUE) {\n          // Remove useless true case.\n          n.detachChildren();\n          replacement = IR.or(condition, falseNode);\n        } else if (falseNodeVal == TernaryValue.FALSE) {\n          // Remove useless false case\n          n.detachChildren();\n          replacement = IR.and(condition, trueNode);\n        }\n\n        if (replacement != null) {\n          parent.replaceChild(n, replacement);\n          n = replacement;\n          reportCodeChange();\n        }\n\n        return n;\n      }\n\n      default:\n        // while(true) --> while(1)\n        TernaryValue nVal = NodeUtil.getPureBooleanValue(n);\n        if (nVal != TernaryValue.UNKNOWN) {\n          boolean result = nVal.toBoolean(true);\n          int equivalentResult = result ? 1 : 0;\n          return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n        }\n        // We can't do anything else currently.\n        return n;\n    }\n  }\n",
        "begin_line": 1120,
        "end_line": 1300,
        "comment": "\n   * Try to minimize conditions expressions, as there are additional\n   * assumptions that can be made when it is known that the final result\n   * is a boolean.\n   *\n   * The following transformations are done recursively:\n   *   !(x||y) --> !x&&!y\n   *   !(x&&y) --> !x||!y\n   *   !!x     --> x\n   * Thus:\n   *   !(x&&!y) --> !x||!!y --> !x||y\n   *\n   *   Returns the replacement for n, or the original if no change was made\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1336
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.isFoldableExpressBlock#917",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.isFoldableExpressBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.isBlock()) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.isExprResult()) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n          if (maybeExpr.getFirstChild().isCall()) {\n            Node calledFn = maybeExpr.getFirstChild().getFirstChild();\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n            if (calledFn.isGetElem()) {\n              return false;\n            } else if (calledFn.isGetProp() &&\n                       calledFn.getLastChild().getString().startsWith(\"on\")) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 917,
        "end_line": 948,
        "comment": "\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeFoldConstants.tryFoldBinaryOperator#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldBinaryOperator(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryFoldBinaryOperator(Node subtree) {\n    Node left = subtree.getFirstChild();\n\n    if (left == null) {\n      return subtree;\n    }\n\n    Node right = left.getNext();\n\n    if (right == null) {\n      return subtree;\n    }\n\n    // If we've reached here, node is truly a binary operator.\n    switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return tryUnfoldAssignOp(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }\n  }\n",
        "begin_line": 99,
        "end_line": 179,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 2
    },
    {
        "name": "TransformAMDToCJSModule.TransformAMDToCJSModule#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.TransformAMDToCJSModule(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  TransformAMDToCJSModule(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 1
    },
    {
        "name": "TransformAMDToCJSModule.process#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TransformAMDToCJSModule.java",
        "class_name": "com.google.javascript.jscomp.TransformAMDToCJSModule",
        "signature": "com.google.javascript.jscomp.TransformAMDToCJSModule.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, new TransformAMDModulesCallback());\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeRemoveDeadCode.optimizeSubtree#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  Node optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n      case Token.ASSIGN:\n        return tryFoldAssignment(subtree);\n      case Token.COMMA:\n        return tryFoldComma(subtree);\n      case Token.SCRIPT:\n      case Token.BLOCK:\n        return tryOptimizeBlock(subtree);\n      case Token.EXPR_RESULT:\n        subtree = tryFoldExpr(subtree);\n        return subtree;\n      case Token.HOOK:\n        return tryFoldHook(subtree);\n      case Token.SWITCH:\n        return tryOptimizeSwitch(subtree);\n      case Token.IF:\n        return tryFoldIf(subtree);\n      case Token.WHILE:\n        return tryFoldWhile(subtree);\n       case Token.FOR: {\n          Node condition = NodeUtil.getConditionExpression(subtree);\n          if (condition != null) {\n            tryFoldForCondition(condition);\n          }\n        }\n        return tryFoldFor(subtree);\n      case Token.DO:\n        return tryFoldDo(subtree);\n      case Token.TRY:\n        return tryFoldTry(subtree);\n      default:\n          return subtree;\n    }\n  }\n",
        "begin_line": 40,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.121
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.add#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 85,
        "end_line": 732,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1198
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeCollectPropertyAssignments.isPropertyAssignmentToName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java",
        "class_name": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
        "signature": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments.isPropertyAssignmentToName(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isPropertyAssignmentToName(Node propertyCandidate) {\n    if (propertyCandidate == null) { return false; }\n    // Must be an assignment...\n    if (!NodeUtil.isExprAssign(propertyCandidate)) {\n      return false;\n    }\n\n    Node expr = propertyCandidate.getFirstChild();\n\n    // to a property...\n    Node lhs = expr.getFirstChild();\n    if (!NodeUtil.isGet(lhs)) {\n      return false;\n    }\n\n    // of a variable.\n    Node obj = lhs.getFirstChild();\n    if (!obj.isName()) {\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 106,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1195
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.trySimplifyUnusedResult#170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.trySimplifyUnusedResult(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private Node trySimplifyUnusedResult(Node n, boolean removeUnused) {\n    Node result = n;\n\n    // Simplify the results of conditional expressions\n    switch (n.getType()) {\n      case Token.HOOK:\n        Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());\n        Node falseNode = trySimplifyUnusedResult(n.getLastChild());\n        // If one or more of the conditional children were removed,\n        // transform the HOOK to an equivalent operation:\n        //    x() ? foo() : 1 --> x() && foo()\n        //    x() ? 1 : foo() --> x() || foo()\n        //    x() ? 1 : 1 --> x()\n        //    x ? 1 : 1 --> null\n        if (trueNode == null && falseNode != null) {\n          n.setType(Token.OR);\n          Preconditions.checkState(n.getChildCount() == 2);\n        } else if (trueNode != null && falseNode == null) {\n          n.setType(Token.AND);\n          Preconditions.checkState(n.getChildCount() == 2);\n        } else if (trueNode == null && falseNode == null) {\n          result = trySimplifyUnusedResult(n.getFirstChild());\n        } else {\n          // The structure didn't change.\n          result = n;\n        }\n        break;\n      case Token.AND:\n      case Token.OR:\n        // Try to remove the second operand from a AND or OR operations:\n        //    x() || f --> x()\n        //    x() && f --> x()\n        Node conditionalResultNode = trySimplifyUnusedResult(\n            n.getLastChild());\n        if (conditionalResultNode == null) {\n          Preconditions.checkState(n.hasOneChild());\n          // The conditionally executed code was removed, so\n          // replace the AND/OR with its LHS or remove it if it isn't useful.\n          result = trySimplifyUnusedResult(n.getFirstChild());\n        }\n        break;\n      case Token.FUNCTION:\n        // A function expression isn't useful if it isn't used, remove it and\n        // don't bother to look at its children.\n        result = null;\n        break;\n      case Token.COMMA:\n        // We rewrite other operations as COMMA expressions (which will later\n        // get split into individual EXPR_RESULT statement, if possible), so\n        // we special case COMMA (we don't want to rewrite COMMAs as new COMMAs\n        // nodes.\n        Node left = trySimplifyUnusedResult(n.getFirstChild());\n        Node right = trySimplifyUnusedResult(n.getLastChild());\n        if (left == null && right == null) {\n          result = null;\n        } else if (left == null) {\n          result = right;\n        } else if (right == null){\n          result = left;\n        } else {\n          // The structure didn't change.\n          result = n;\n        }\n        break;\n      default:\n        if (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {\n          // This is the meat of this function. The node itself doesn't generate\n          // any side-effects but preserve any side-effects in the children.\n          Node resultList = null;\n          for (Node next, c = n.getFirstChild(); c != null; c = next) {\n            next = c.getNext();\n            c = trySimplifyUnusedResult(c);\n            if (c != null) {\n              c.detachFromParent();\n              if (resultList == null)  {\n                // The first side-effect can be used stand-alone.\n                resultList = c;\n              } else {\n                // Leave the side-effects in-place, simplifying it to a COMMA\n                // expression.\n                resultList = IR.comma(resultList, c).srcref(c);\n              }\n            }\n          }\n          result = resultList;\n        }\n    }\n\n    // Fix up the AST, replace or remove the an unused node (if requested).\n    if (n != result) {\n      Node parent = n.getParent();\n      if (result == null) {\n        if (removeUnused) {\n          parent.removeChild(n);\n        } else {\n          result = IR.empty().srcref(n);\n          parent.replaceChild(n, result);\n        }\n      } else {\n        // A new COMMA expression may not have an existing parent.\n        if (result.getParent() != null) {\n          result.detachFromParent();\n        }\n        n.getParent().replaceChild(n, result);\n      }\n      reportCodeChange();\n    }\n\n    return result;\n  }\n",
        "begin_line": 170,
        "end_line": 279,
        "comment": "\n   * General cascading unused operation node removal.\n   * @param n The root of the expression to simplify.\n   * @param removeUnused If true, the node is removed from the AST if\n   *     it is not useful, otherwise it replaced with an EMPTY node.\n   * @return The replacement node, or null if the node was is not useful.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1181
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isControlStructure#1620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1620,
        "end_line": 1637,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1175
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isNot#2308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNot()",
        "snippet": "  public boolean isNot() {\n    return this.getType() == Token.NOT;\n  }\n",
        "begin_line": 2308,
        "end_line": 2310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1127
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.replace#890",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.replace()",
        "snippet": "    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (candidateDefinition.isExprResult() &&\n            !candidateDefinition.getFirstChild().isQualifiedName()) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.isName()) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = IR.var(nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.lastIndexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);\n          }\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }\n",
        "begin_line": 890,
        "end_line": 953,
        "comment": "\n     * Replace the provide statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1115
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModuleGraph.getDeepestCommonDependencyInclusive#184",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.getDeepestCommonDependencyInclusive(com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.JSModule)",
        "snippet": "  public JSModule getDeepestCommonDependencyInclusive(\n      JSModule m1, JSModule m2) {\n    if (m2 == m1 || dependsOn(m2, m1)) {\n      return m1;\n    } else if (dependsOn(m1, m2)) {\n      return m2;\n    }\n\n    return getDeepestCommonDependency(m1, m2);\n  }\n",
        "begin_line": 184,
        "end_line": 193,
        "comment": "\n   * Finds the deepest common dependency of two modules, including the\n   * modules themselves.\n   *\n   * @param m1 A module in this graph\n   * @param m2 A module in this graph\n   * @return The deepest common dep of {@code m1} and {@code m2}, or null if\n   *     they have no common dependencies\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1115
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.copyInformationFromForTree#1751",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFromForTree(com.google.javascript.rhino.Node)",
        "snippet": "  public Node copyInformationFromForTree(Node other) {\n    copyInformationFrom(other);\n    for (Node child = getFirstChild();\n         child != null; child = child.getNext()) {\n      child.copyInformationFromForTree(other);\n    }\n\n    return this;\n  }\n",
        "begin_line": 1751,
        "end_line": 1759,
        "comment": " TODO(nicksantos): The semantics of this method are ill-defined. Delete it.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1104
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.forwardDeclareType#843",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclareType(java.lang.String)",
        "snippet": "  public void forwardDeclareType(String name) {\n    forwardDeclaredTypes.add(name);\n  }\n",
        "begin_line": 843,
        "end_line": 845,
        "comment": "\n   * Records a forward-declared type name. We will not emit errors if this\n   * type name never resolves to anything.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeCollectPropertyAssignments.collectObjectProperty#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java",
        "class_name": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
        "signature": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments.collectObjectProperty(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean collectObjectProperty(\n      Node objectLiteral, Node propertyCandidate) {\n    Node assignment = propertyCandidate.getFirstChild();\n    Node lhs = assignment.getFirstChild(), rhs = lhs.getNext();\n    Node obj = lhs.getFirstChild();\n    Node property = obj.getNext();\n\n    // The property must be statically known.\n    if (lhs.isGetElem()\n        && (!property.isString()\n            && !property.isNumber())) {\n      return false;\n    }\n\n    String propertyName;\n    if (property.isNumber()) {\n      propertyName = NodeUtil.getStringValue(property);\n    } else {\n      propertyName = property.getString();\n    }\n\n    Node newProperty = IR.stringKey(propertyName)\n        .copyInformationFrom(property);\n    // Preserve the quotedness of a property reference\n    if (lhs.isGetElem()) {\n      newProperty.setQuotedString();\n    }\n    Node newValue = rhs.detachFromParent();\n    newProperty.addChildToBack(newValue);\n    objectLiteral.addChildToBack(newProperty);\n\n    propertyCandidate.detachFromParent();\n    return true;\n  }\n",
        "begin_line": 228,
        "end_line": 261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addNonEmptyStatement#799",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addNonEmptyStatement(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context, boolean)",
        "snippet": "  private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild) {\n    Node nodeToProcess = n;\n\n    if (!allowNonBlockChild && !n.isBlock()) {\n      throw new Error(\"Missing BLOCK child.\");\n    }\n\n    // Strip unneeded blocks, that is blocks with <2 children unless\n    // the CodePrinter specifically wants to keep them.\n    if (n.isBlock()) {\n      int count = getNonEmptyChildCount(n, 2);\n      if (count == 0) {\n        if (cc.shouldPreserveExtraBlocks()) {\n          cc.beginBlock();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        } else {\n          cc.endStatement(true);\n        }\n        return;\n      }\n\n      if (count == 1) {\n        // Hack around a couple of browser bugs:\n        //   Safari needs a block around function declarations.\n        //   IE6/7 needs a block around DOs.\n        Node firstAndOnlyChild = getFirstNonEmptyChild(n);\n        boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();\n        if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {\n          cc.beginBlock();\n          add(firstAndOnlyChild, Context.STATEMENT);\n          cc.maybeLineBreak();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n          return;\n        } else {\n          // Continue with the only child.\n          nodeToProcess = firstAndOnlyChild;\n        }\n      }\n\n      if (count > 1) {\n        context = Context.PRESERVE_BLOCK;\n      }\n    }\n\n    if (nodeToProcess.isEmpty()) {\n      cc.endStatement(true);\n    } else {\n      add(nodeToProcess, context);\n\n      // VAR doesn't include ';' since it gets used in expressions - so any\n      // VAR in a statement context needs a call to endStatement() here.\n      if (nodeToProcess.isVar()) {\n        cc.endStatement();\n      }\n    }\n  }\n",
        "begin_line": 799,
        "end_line": 855,
        "comment": "\n   * Adds a block or expression, substituting a VOID with an empty statement.\n   * This is used for \"for (...);\" and \"if (...);\" type statements.\n   *\n   * @param n The node to print.\n   * @param context The context to determine how the node should be printed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1079
        },
        "num_failing_tests": 5
    },
    {
        "name": "PeepholeFoldConstants.tryFoldGetProp#1372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldGetProp(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryFoldGetProp(Node n, Node left, Node right) {\n    Preconditions.checkArgument(n.isGetProp());\n\n    if (left.isObjectLit()) {\n      return tryFoldObjectPropAccess(n, left, right);\n    }\n\n    if (right.isString() &&\n        right.getString().equals(\"length\")) {\n      int knownLength = -1;\n      switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }\n\n      Preconditions.checkState(knownLength != -1);\n      Node lengthNode = IR.number(knownLength);\n      n.getParent().replaceChild(n, lengthNode);\n      reportCodeChange();\n\n      return lengthNode;\n    }\n\n    return n;\n  }\n",
        "begin_line": 1372,
        "end_line": 1407,
        "comment": "\n   * Try to fold array-length. e.g [1, 2, 3].length ==> 3, [x, y].length ==> 2\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "CollapseVariableDeclarations.visit#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.GatherCollapses.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isVar()) {\n        blacklistStubVars(t, n);\n      }\n\n      // Only care about var nodes\n      if (!n.isVar() && !canBeRedeclared(n, t.getScope())) return;\n\n      // If we've already looked at this node, skip it\n      if (nodesToCollapse.contains(n)) return;\n\n      // Adjacent VAR children of an IF node are the if and else parts and can't\n      // be collapsed\n      if (parent.isIf()) return;\n\n      Node varNode = n;\n\n      boolean hasVar = n.isVar();\n\n      // Find variable declarations that follow this one (if any)\n      n = n.getNext();\n\n      boolean hasNodesToCollapse = false;\n\n      while (n != null &&\n          (n.isVar() || canBeRedeclared(n, t.getScope()))) {\n\n        if (n.isVar()) {\n          blacklistStubVars(t, n);\n          hasVar = true;\n        }\n\n        nodesToCollapse.add(n);\n        hasNodesToCollapse = true;\n\n        n = n.getNext();\n      }\n\n      if (hasNodesToCollapse && hasVar) {\n        nodesToCollapse.add(varNode);\n        collapses.add(new Collapse(varNode, n, parent));\n      }\n    }\n",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "CollapseVariableDeclarations.blacklistStubVars#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.GatherCollapses.blacklistStubVars(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "    private void blacklistStubVars(NodeTraversal t, Node varNode) {\n      for (Node child = varNode.getFirstChild();\n           child != null; child = child.getNext()) {\n        if (child.getFirstChild() == null) {\n          blacklistedVars.add(t.getScope().getVar(child.getString()));\n        }\n      }\n    }\n",
        "begin_line": 181,
        "end_line": 188,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1069
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.isOneExactlyFunctionOrDo#861",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.isLabel()) {\n      Node labeledStatement = n.getLastChild();\n      if (!labeledStatement.isBlock()) {\n        return isOneExactlyFunctionOrDo(labeledStatement);\n      } else {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs\n        // are skipped.\n        if (getNonEmptyChildCount(n, 2) == 1) {\n          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));\n        } else {\n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n          return false;\n        }\n      }\n    } else {\n      return (n.isFunction() || n.isDo());\n    }\n  }\n",
        "begin_line": 861,
        "end_line": 881,
        "comment": "\n   * @return Whether the Node is a DO or FUNCTION (with or without\n   * labels).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 5
    },
    {
        "name": "CodeGenerator.getFirstNonEmptyChild#1145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(com.google.javascript.rhino.Node)",
        "snippet": "  private static Node getFirstNonEmptyChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.isBlock()) {\n        Node result = getFirstNonEmptyChild(c);\n        if (result != null) {\n          return result;\n        }\n      } else if (!c.isEmpty()) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 1145,
        "end_line": 1157,
        "comment": " Gets the first non-empty child of the given node. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1061
        },
        "num_failing_tests": 5
    },
    {
        "name": "AbstractPeepholeOptimization.areNodesEqualForInlining#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  protected boolean areNodesEqualForInlining(Node n1, Node n2) {\n    /* Our implementation delegates to the compiler. We provide this\n     * method because we don't want to expose Compiler to PeepholeOptimizations.\n     */\n    Preconditions.checkNotNull(compiler);\n    return compiler.areNodesEqualForInlining(n1, n2);\n  }\n",
        "begin_line": 70,
        "end_line": 76,
        "comment": "\n   * Are the nodes equal for the purpose of inlining?\n   * If type aware optimizations are on, type equality is checked.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1059
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateStatement#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateStatement(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateStatement(Node n) {\n    switch (n.getType()) {\n      case Token.LABEL:\n        validateLabel(n);\n        return;\n      case Token.BLOCK:\n        validateBlock(n);\n        return;\n      case Token.FUNCTION:\n        validateFunctionStatement(n);\n        return;\n      case Token.WITH:\n        validateWith(n);\n        return;\n      case Token.FOR:\n        validateFor(n);\n        return;\n      case Token.WHILE:\n        validateWhile(n);\n        return;\n      case Token.DO:\n        validateDo(n);\n        return;\n      case Token.SWITCH:\n        validateSwitch(n);\n        return;\n      case Token.IF:\n        validateIf(n);\n        return;\n      case Token.VAR:\n        validateVar(n);\n        return;\n      case Token.EXPR_RESULT:\n        validateExprStmt(n);\n        return;\n      case Token.RETURN:\n        validateReturn(n);\n        return;\n      case Token.THROW:\n        validateThrow(n);\n        return;\n      case Token.TRY:\n        validateTry(n);\n        return;\n      case Token.BREAK:\n        validateBreak(n);\n        return;\n      case Token.CONTINUE:\n        validateContinue(n);\n        return;\n      case Token.EMPTY:\n        validateChildless(n);\n        return;\n      case Token.DEBUGGER:\n        validateChildless(n);\n        return;\n      default:\n        violation(\"Expected statement but was \"\n            + Token.name(n.getType()) + \".\", n);\n    }\n  }\n",
        "begin_line": 93,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1056
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateIf#462",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIf(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIf(Node n) {\n    validateNodeType(Token.IF, n);\n    validateMinimumChildCount(n, 2);\n    validateMaximumChildCount(n, 3);\n    validateExpression(n.getFirstChild());\n    validateBlock(n.getChildAtIndex(1));\n    if (n.getChildCount() == 3) {\n      validateBlock(n.getLastChild());\n    }\n  }\n",
        "begin_line": 462,
        "end_line": 471,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1056
        },
        "num_failing_tests": 5
    },
    {
        "name": "RemoveUnusedVars.markReferencedVar#770",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.markReferencedVar(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "  private boolean markReferencedVar(Var var) {\n    if (referenced.add(var)) {\n      for (Continuation c : continuations.get(var)) {\n        c.apply();\n      }\n      return true;\n    }\n    return false;\n  }\n",
        "begin_line": 770,
        "end_line": 778,
        "comment": "\n   * Marks a var as referenced, recursing into any values of this var\n   * that we skipped.\n   * @return True if this variable had not been referenced before.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.addSuppression#680",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.addSuppression(java.lang.String)",
        "snippet": "  public void addSuppression(String suppression) {\n    lazyInitInfo();\n\n    if (info.suppressions == null) {\n      info.suppressions = Sets.newHashSet();\n    }\n    info.suppressions.add(suppression);\n  }\n",
        "begin_line": 680,
        "end_line": 687,
        "comment": "\n   * Add a suppressed warning.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureCodeRemoval.visit#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.FindAbstractMethods.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n        Node valueNode = n.getLastChild();\n\n        if (nameNode.isQualifiedName() &&\n            valueNode.isQualifiedName() &&\n            ABSTRACT_METHOD_NAME.equals(valueNode.getQualifiedName())) {\n          abstractMethodAssignmentNodes.add(new RemovableAssignment(\n              n.getFirstChild(), n, t));\n        }\n      }\n    }\n",
        "begin_line": 139,
        "end_line": 152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1038
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.getName#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return name;\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": " Gets the module name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1029
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.binaryOp#449",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.binaryOp(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private static Node binaryOp(int token, Node expr1, Node expr2) {\n    Preconditions.checkState(mayBeExpression(expr1));\n    Preconditions.checkState(mayBeExpression(expr2));\n    return new Node(token, expr1, expr2);\n  }\n",
        "begin_line": 449,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1001
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.getNonEmptyChildCount#1131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private static int getNonEmptyChildCount(Node n, int maxCount) {\n    int i = 0;\n    Node c = n.getFirstChild();\n    for (; c != null && i < maxCount; c = c.getNext()) {\n      if (c.isBlock()) {\n        i += getNonEmptyChildCount(c, maxCount-i);\n      } else if (!c.isEmpty()) {\n        i++;\n      }\n    }\n    return i;\n  }\n",
        "begin_line": 1131,
        "end_line": 1142,
        "comment": "\n   * @param maxCount The maximum number of children to look for.\n   * @return The number of children of this node that are non empty up to\n   * maxCount.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0977
        },
        "num_failing_tests": 5
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.optimizeSubtree#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  @SuppressWarnings(\"fallthrough\")\n  public Node optimizeSubtree(Node node) {\n    switch(node.getType()) {\n      case Token.RETURN: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        result = tryReplaceExitWithBreak(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReduceReturn(node);\n      }\n\n      case Token.THROW: {\n        Node result = tryRemoveRedundantExit(node);\n        if (result != node) {\n          return result;\n        }\n        return tryReplaceExitWithBreak(node);\n      }\n\n      // TODO(johnlenz): Maybe remove redundant BREAK and CONTINUE. Overlaps\n      // with MinimizeExitPoints.\n\n      case Token.NOT:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeNot(node);\n\n      case Token.IF:\n        tryMinimizeCondition(node.getFirstChild());\n        return tryMinimizeIf(node);\n\n      case Token.EXPR_RESULT:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.HOOK:\n        tryMinimizeCondition(node.getFirstChild());\n        return node;\n\n      case Token.WHILE:\n      case Token.DO:\n        tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        return node;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(node)) {\n          tryJoinForCondition(node);\n          tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n        }\n        return node;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        return reduceTrueFalse(node);\n\n      case Token.NEW:\n        node = tryFoldStandardConstructors(node);\n        if (!node.isCall()) {\n          return node;\n        }\n        // Fall through on purpose because tryFoldStandardConstructors() may\n        // convert a NEW node into a CALL node\n      case Token.CALL:\n        Node result =  tryFoldLiteralConstructor(node);\n        if (result == node) {\n          result = tryFoldSimpleFunctionCall(node);\n          if (result == node) {\n            result = tryFoldImmediateCallToBoundFunction(node);\n          }\n        }\n        return result;\n\n      case Token.COMMA:\n        return trySplitComma(node);\n\n      case Token.NAME:\n        return tryReplaceUndefined(node);\n\n      case Token.BLOCK:\n        return tryReplaceIf(node);\n\n      case Token.ARRAYLIT:\n        return tryMinimizeArrayLiteral(node);\n\n      default:\n        return node; //Nothing changed\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 166,
        "comment": "\n   * Tries apply our various peephole minimizations on the passed in node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.areNodesEqualForInlining#979",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean areNodesEqualForInlining(Node n1, Node n2) {\n    if (options.ambiguateProperties ||\n        options.disambiguateProperties) {\n      // The type based optimizations require that type information is preserved\n      // during other optimizations.\n      return n1.isEquivalentToTyped(n2);\n    } else {\n      return n1.isEquivalentTo(n2);\n    }\n  }\n",
        "begin_line": 979,
        "end_line": 989,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateMinimumChildCount#790",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMinimumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMinimumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = n.hasChildren();\n    } else if (i == 2) {\n      valid = n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() >= i;\n    }\n\n    if (!valid) {\n      violation(\n          \"Expected at least \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 790,
        "end_line": 805,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0973
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeRemoveDeadCode.tryFoldAssignment#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.tryFoldAssignment(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryFoldAssignment(Node subtree) {\n    Preconditions.checkState(subtree.isAssign());\n    Node left = subtree.getFirstChild();\n    Node right = subtree.getLastChild();\n    // Only names\n    if (left.isName()\n        && right.isName()\n        && left.getString().equals(right.getString())) {\n      subtree.getParent().replaceChild(subtree, right.detachFromParent());\n      reportCodeChange();\n      return right;\n    }\n    return subtree;\n  }\n",
        "begin_line": 118,
        "end_line": 131,
        "comment": "\n   * Try removing identity assignments\n   * @return the replacement node, if changed, or the original if not\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0968
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.mayBeExpression#512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeExpression(Node n) {\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // FUNCTION is used both in expression and statement\n        // contexts.\n        return true;\n\n      case Token.ADD:\n      case Token.AND:\n      case Token.ARRAYLIT:\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITNOT:\n      case Token.BITXOR:\n      case Token.CALL:\n      case Token.COMMA:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.FALSE:\n      case Token.GE:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.GT:\n      case Token.HOOK:\n      case Token.IN:\n      case Token.INC:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NAME:\n      case Token.NE:\n      case Token.NEG:\n      case Token.NEW:\n      case Token.NOT:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.OR:\n      case Token.POS:\n      case Token.REGEXP:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.STRING:\n      case Token.SUB:\n      case Token.THIS:\n      case Token.TYPEOF:\n      case Token.TRUE:\n      case Token.URSH:\n      case Token.VOID:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 512,
        "end_line": 584,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.096
        },
        "num_failing_tests": 7
    },
    {
        "name": "RemoveUnusedVars.traverseNode#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.traverseNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  private void traverseNode(Node n, Node parent, Scope scope) {\n    int type = n.getType();\n    Var var = null;\n    switch (type) {\n      case Token.FUNCTION:\n        // If this function is a removable var, then create a continuation\n        // for it instead of traversing immediately.\n        if (NodeUtil.isFunctionDeclaration(n)) {\n          var = scope.getVar(n.getFirstChild().getString());\n        }\n\n        if (var != null && isRemovableVar(var)) {\n          continuations.put(var, new Continuation(n, scope));\n        } else {\n          traverseFunction(n, scope);\n        }\n        return;\n\n      case Token.ASSIGN:\n        Assign maybeAssign = Assign.maybeCreateAssign(n);\n        if (maybeAssign != null) {\n          // Put this in the assign map. It might count as a reference,\n          // but we won't know that until we have an index of all assigns.\n          var = scope.getVar(maybeAssign.nameNode.getString());\n          if (var != null) {\n            assignsByVar.put(var, maybeAssign);\n            assignsByNode.put(maybeAssign.nameNode, maybeAssign);\n\n            if (isRemovableVar(var) &&\n                !maybeAssign.mayHaveSecondarySideEffects) {\n              // If the var is unreferenced and performing this assign has\n              // no secondary side effects, then we can create a continuation\n              // for it instead of traversing immediately.\n              continuations.put(var, new Continuation(n, scope));\n              return;\n            }\n          }\n        }\n        break;\n\n      case Token.CALL:\n        // Look for calls to inheritance-defining calls (such as goog.inherits).\n        SubclassRelationship subclassRelationship =\n            codingConvention.getClassesDefinedByCall(n);\n        if (subclassRelationship != null) {\n          Var subclassVar = scope.getVar(subclassRelationship.subclassName);\n          // Don't try to track the inheritance calls for non-globals. It would\n          // be more correct to only not track when the subclass does not\n          // reference a constructor, but checking that it is a global is\n          // easier and mostly the same.\n          if (subclassVar != null && subclassVar.isGlobal()\n              && !referenced.contains(subclassVar)) {\n            // Save a reference to the EXPR node.\n            inheritsCalls.put(subclassVar, parent);\n            continuations.put(subclassVar, new Continuation(n, scope));\n            return;\n          }\n        }\n        break;\n\n      case Token.NAME:\n        var = scope.getVar(n.getString());\n        if (parent.isVar()) {\n          Node value = n.getFirstChild();\n          if (value != null && var != null && isRemovableVar(var) &&\n              !NodeUtil.mayHaveSideEffects(value)) {\n            // If the var is unreferenced and creating its value has no side\n            // effects, then we can create a continuation for it instead\n            // of traversing immediately.\n            continuations.put(var, new Continuation(n, scope));\n            return;\n          }\n        } else {\n\n          // If arguments is escaped, we just assume the worst and continue\n          // on all the parameters.\n          if (\"arguments\".equals(n.getString()) && scope.isLocal()) {\n            Node lp = scope.getRootNode().getFirstChild().getNext();\n            for (Node a = lp.getFirstChild(); a != null; a = a.getNext()) {\n              markReferencedVar(scope.getVar(a.getString()));\n            }\n          }\n\n          // All name references that aren't declarations or assigns\n          // are references to other vars.\n          if (var != null) {\n            // If that var hasn't already been marked referenced, then\n            // start tracking it.  If this is an assign, do nothing\n            // for now.\n            if (isRemovableVar(var)) {\n              if (!assignsByNode.containsKey(n)) {\n                markReferencedVar(var);\n              }\n            } else {\n              markReferencedVar(var);\n            }\n          }\n        }\n        break;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      traverseNode(c, n, scope);\n    }\n  }\n",
        "begin_line": 192,
        "end_line": 296,
        "comment": "\n   * Traverses everything in the current scope and marks variables that\n   * are referenced.\n   *\n   * During traversal, we identify subtrees that will only be\n   * referenced if their enclosing variables are referenced. Instead of\n   * traversing those subtrees, we create a continuation for them,\n   * and traverse them lazily.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.isBlockBoundary#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean isBlockBoundary(Node n, Node parent) {\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.DO:\n        case Token.FOR:\n        case Token.TRY:\n        case Token.WHILE:\n        case Token.WITH:\n          // NOTE: TRY has up to 3 child blocks:\n          // TRY\n          //   BLOCK\n          //   BLOCK\n          //     CATCH\n          //   BLOCK\n          // Note that there is an explicit CATCH token but no explicit\n          // FINALLY token. For simplicity, we consider each BLOCK\n          // a separate basic BLOCK.\n          return true;\n        case Token.AND:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.OR:\n          // The first child of a conditional is not a boundary,\n          // but all the rest of the children are.\n          return n != parent.getFirstChild();\n\n      }\n    }\n\n    return n.isCase();\n  }\n",
        "begin_line": 207,
        "end_line": 237,
        "comment": "\n   * @return true if this node marks the start of a new basic block\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 2
    },
    {
        "name": "CollapseVariableDeclarations.Collapse#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.Collapse.Collapse(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    Collapse(Node startNode, Node endNode, Node parent) {\n      this.startNode = startNode;\n      this.endNode = endNode;\n      this.parent = parent;\n    }\n",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CollapseVariableDeclarations.process#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    collapses.clear();\n    nodesToCollapse.clear();\n\n    NodeTraversal.traverse(compiler, root, new GatherCollapses());\n\n    if (!collapses.isEmpty()) {\n      applyCollapses();\n      compiler.reportCodeChange();\n    }\n  }\n",
        "begin_line": 108,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isGlobal#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isGlobal()",
        "snippet": "    public boolean isGlobal() {\n      return scope.isGlobal();\n    }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n     * Returns whether this is a global variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0934
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.shouldPreserveExtraBlocks#291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.shouldPreserveExtraBlocks()",
        "snippet": "  boolean shouldPreserveExtraBlocks() {\n    return false;\n  }\n",
        "begin_line": 291,
        "end_line": 293,
        "comment": "\n   * If the body of a for loop or the then clause of an if statement has\n   * a single statement, should it be wrapped in a block?  Doing so can\n   * help when pretty-printing the code, and permits putting a debugging\n   * breakpoint on the statement inside the condition.\n   *\n   * @return {@boolean true} if such expressions should be wrapped\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 5
    },
    {
        "name": "RemoveUnusedVars.isRemovableVar#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.isRemovableVar(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "  private boolean isRemovableVar(Var var) {\n    // Global variables are off-limits if the user might be using them.\n    if (!removeGlobals && var.isGlobal()) {\n      return false;\n    }\n\n    // Referenced variables are off-limits.\n    if (referenced.contains(var)) {\n      return false;\n    }\n\n    // Exported variables are off-limits.\n    if (codingConvention.isExported(var.getName())) {\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 298,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0917
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.name#295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.name(java.lang.String)",
        "snippet": "  public static Node name(String name) {\n    return Node.newString(Token.NAME, name);\n  }\n",
        "begin_line": 295,
        "end_line": 297,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0912
        },
        "num_failing_tests": 7
    },
    {
        "name": "IR.var#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.var(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node var(Node name) {\n    Preconditions.checkState(name.isName());\n    return new Node(Token.VAR, name);\n  }\n",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0905
        },
        "num_failing_tests": 7
    },
    {
        "name": "CommandLineRunner.CommandLineRunner#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.CommandLineRunner(java.lang.String[])",
        "snippet": "  protected CommandLineRunner(String[] args) {\n    super();\n    initConfigFromFlags(args, System.err);\n  }\n",
        "begin_line": 567,
        "end_line": 570,
        "comment": "\n   * Create a new command-line runner. You should only need to call\n   * the constructor if you're extending this class. Otherwise, the main\n   * method should instantiate it.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.AbstractCommandLineRunner#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.AbstractCommandLineRunner()",
        "snippet": "  AbstractCommandLineRunner() {\n    this(System.out, System.err);\n  }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.stringKey#423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.stringKey(java.lang.String)",
        "snippet": "  public static Node stringKey(String s) {\n    return Node.newString(Token.STRING_KEY, s);\n  }\n",
        "begin_line": 423,
        "end_line": 425,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setString#225",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.setString(java.lang.String)",
        "snippet": "    @Override\n    public void setString(String str) {\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 225,
        "end_line": 231,
        "comment": "\n     * sets the string content.\n     * @param str the new value.  Non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.089
        },
        "num_failing_tests": 7
    },
    {
        "name": "RemoveUnusedVars.Assign#902",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.Assign.Assign(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, boolean)",
        "snippet": "    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {\n      Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));\n      this.assignNode = assignNode;\n      this.nameNode = nameNode;\n      this.isPropertyAssign = isPropertyAssign;\n\n      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);\n      this.mayHaveSecondarySideEffects =\n          maybeAliased ||\n          NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n          NodeUtil.mayHaveSideEffects(assignNode.getLastChild());\n    }\n",
        "begin_line": 902,
        "end_line": 913,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0885
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemoveUnusedVars.maybeCreateAssign#919",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.Assign.maybeCreateAssign(com.google.javascript.rhino.Node)",
        "snippet": "    static Assign maybeCreateAssign(Node assignNode) {\n      Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));\n\n      // Skip one level of GETPROPs or GETELEMs.\n      //\n      // Don't skip more than one level, because then we get into\n      // situations where assigns to properties of properties will always\n      // trigger side-effects, and the variable they're on cannot be removed.\n      boolean isPropAssign = false;\n      Node current = assignNode.getFirstChild();\n      if (NodeUtil.isGet(current)) {\n        current = current.getFirstChild();\n        isPropAssign = true;\n\n        if (current.isGetProp() &&\n            current.getLastChild().getString().equals(\"prototype\")) {\n          // Prototype properties sets should be considered like normal\n          // property sets.\n          current = current.getFirstChild();\n        }\n      }\n\n      if (current.isName()) {\n        return new Assign(assignNode, current, isPropAssign);\n      }\n      return null;\n    }\n",
        "begin_line": 919,
        "end_line": 945,
        "comment": "\n     * If this is an assign to a variable or its property, return it.\n     * Otherwise, return null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0885
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1570",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-842fd84e-def5-4462-b049-855557df5d78.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      if (isInliningForbidden()) {\n        // In old renaming schemes, inlining a variable can change whether\n        // or not a property is renamed. This is bad, and those old renaming\n        // schemes need to die.\n        return new ErrorPass(compiler, CANNOT_USE_PROTOTYPE_AND_VAR);\n      } else {\n        InlineVariables.Mode mode;\n        if (options.inlineVariables) {\n          mode = InlineVariables.Mode.ALL;\n        } else if (options.inlineLocalVariables) {\n          mode = InlineVariables.Mode.LOCALS_ONLY;\n        } else {\n          throw new IllegalStateException(\"No variable inlining option set.\");\n        }\n\n        return new InlineVariables(compiler, mode, true);\n      }\n    }\n",
        "begin_line": 1570,
        "end_line": 1589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0885
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineVariables.apply#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.IdentifyLocals.apply(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "    @Override\n    public boolean apply(Var var) {\n      return var.scope.isLocal();\n    }\n",
        "begin_line": 121,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0873
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineVariables.getFilterForMode#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.getFilterForMode()",
        "snippet": "  private Predicate<Var> getFilterForMode() {\n    switch (mode) {\n      case ALL:\n        return Predicates.<Var>alwaysTrue();\n      case LOCALS_ONLY:\n        return new IdentifyLocals();\n      case CONSTANTS_ONLY:\n        return new IdentifyConstants();\n      default:\n        throw new IllegalStateException();\n    }\n  }\n",
        "begin_line": 89,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0873
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.outputSourceMap#1169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputSourceMap(B, java.lang.String)",
        "snippet": "  private void outputSourceMap(B options, String associatedName)\n      throws IOException {\n    if (Strings.isNullOrEmpty(options.sourceMapOutputPath)) {\n      return;\n    }\n\n    String outName = expandSourceMapPath(options, null);\n    Writer out = fileNameToOutputWriter2(outName);\n    compiler.getSourceMap().appendTo(out, associatedName);\n    out.close();\n  }\n",
        "begin_line": 1169,
        "end_line": 1179,
        "comment": "\n   * Outputs the source map found in the compiler to the proper path if one\n   * exists.\n   *\n   * @param options The options to the Compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0861
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.processArgs#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.processArgs(java.lang.String[])",
        "snippet": "  private List<String> processArgs(String[] args) {\n    // Args4j has a different format that the old command-line parser.\n    // So we use some voodoo to get the args into the format that args4j\n    // expects.\n    Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n    Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n    List<String> processedArgs = Lists.newArrayList();\n\n    for (String arg : args) {\n      Matcher matcher = argPattern.matcher(arg);\n      if (matcher.matches()) {\n        processedArgs.add(matcher.group(1));\n\n        String value = matcher.group(2);\n        Matcher quotesMatcher = quotesPattern.matcher(value);\n        if (quotesMatcher.matches()) {\n          processedArgs.add(quotesMatcher.group(1));\n        } else {\n          processedArgs.add(value);\n        }\n      } else {\n        processedArgs.add(arg);\n      }\n    }\n\n    return processedArgs;\n  }\n",
        "begin_line": 601,
        "end_line": 627,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0856
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.processResults#756",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.processResults(com.google.javascript.jscomp.Result, java.util.List<com.google.javascript.jscomp.JSModule>, B)",
        "snippet": "  int processResults(Result result, List<JSModule> modules, B options)\n       throws FlagUsageException, IOException {\n    if (config.computePhaseOrdering) {\n      return 0;\n    }\n\n    if (config.printPassGraph) {\n      if (compiler.getRoot() == null) {\n        return 1;\n      } else {\n        jsOutput.append(\n            DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n        jsOutput.append('\\n');\n        return 0;\n      }\n    }\n\n    if (config.printAst) {\n      if (compiler.getRoot() == null) {\n        return 1;\n      } else {\n        ControlFlowGraph<Node> cfg = compiler.computeCFG();\n        DotFormatter.appendDot(\n            compiler.getRoot().getLastChild(), cfg, jsOutput);\n        jsOutput.append('\\n');\n        return 0;\n      }\n    }\n\n    if (config.printTree) {\n      if (compiler.getRoot() == null) {\n        jsOutput.append(\"Code contains errors; no tree was generated.\\n\");\n        return 1;\n      } else {\n        compiler.getRoot().appendStringTree(jsOutput);\n        jsOutput.append(\"\\n\");\n        return 0;\n      }\n    }\n\n    rootRelativePathsMap = constructRootRelativePathsMap();\n\n    if (config.skipNormalOutputs) {\n      // Output the manifest and bundle files if requested.\n      outputManifest();\n      outputBundle();\n      return 0;\n    } else if (result.success) {\n      if (modules == null) {\n        writeOutput(\n            jsOutput, compiler, compiler.toSource(), config.outputWrapper,\n            OUTPUT_WRAPPER_MARKER);\n\n        // Output the source map if requested.\n        outputSourceMap(options, config.jsOutputFile);\n      } else {\n        parsedModuleWrappers = parseModuleWrappers(\n            config.moduleWrapper, modules);\n        maybeCreateDirsForPath(config.moduleOutputPathPrefix);\n\n        // If the source map path is in fact a pattern for each\n        // module, create a stream per-module. Otherwise, create\n        // a single source map.\n        Writer mapOut = null;\n\n        if (!shouldGenerateMapPerModule(options)) {\n          mapOut = fileNameToOutputWriter2(expandSourceMapPath(options, null));\n        }\n\n        for (JSModule m : modules) {\n          if (shouldGenerateMapPerModule(options)) {\n            mapOut = fileNameToOutputWriter2(expandSourceMapPath(options, m));\n          }\n\n          Writer writer =\n              fileNameToLegacyOutputWriter(getModuleOutputFileName(m));\n\n          if (options.sourceMapOutputPath != null) {\n            compiler.getSourceMap().reset();\n          }\n\n          writeModuleOutput(writer, m);\n\n          if (options.sourceMapOutputPath != null) {\n            compiler.getSourceMap().appendTo(mapOut, m.getName());\n          }\n\n          writer.close();\n\n          if (shouldGenerateMapPerModule(options) && mapOut != null) {\n            mapOut.close();\n            mapOut = null;\n          }\n        }\n\n        if (mapOut != null) {\n          mapOut.close();\n        }\n      }\n\n      // Output the externs if required.\n      if (options.externExportsPath != null) {\n        Writer eeOut =\n            openExternExportsStream(options, config.jsOutputFile);\n        eeOut.append(result.externExport);\n        eeOut.close();\n      }\n\n      // Output the variable and property name maps if requested.\n      outputNameMaps(options);\n\n      // Output the manifest and bundle files if requested.\n      outputManifest();\n      outputBundle();\n\n      if (options.tracer.isOn()) {\n        outputTracerReport();\n      }\n    }\n\n    // return 0 if no errors, the error count otherwise\n    return Math.min(result.errors.length, 0x7f);\n  }\n",
        "begin_line": 756,
        "end_line": 878,
        "comment": "\n   * Processes the results of the compile job, and returns an error code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0856
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateMaximumChildCount#807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMaximumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMaximumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = !n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() <= i;\n    }\n    if (!valid) {\n      violation(\n          \"Expected no more than \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 807,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0847
        },
        "num_failing_tests": 7
    },
    {
        "name": "WarningLevel.setOptionsForWarningLevel#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningLevel.java",
        "class_name": "com.google.javascript.jscomp.WarningLevel",
        "signature": "com.google.javascript.jscomp.WarningLevel.setOptionsForWarningLevel(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void setOptionsForWarningLevel(CompilerOptions options) {\n    switch (this) {\n      case QUIET:\n        silenceAllWarnings(options);\n        break;\n      case DEFAULT:\n        addDefaultWarnings(options);\n        break;\n      case VERBOSE:\n        addVerboseWarnings(options);\n        break;\n      default:\n        throw new RuntimeException(\"Unknown warning level.\");\n    }\n  }\n",
        "begin_line": 33,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0845
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.visit#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isName()) {\n      Var v;\n      if (n.getString().equals(\"arguments\")) {\n        v = t.getScope().getArgumentsVar();\n      } else {\n        v = t.getScope().getVar(n.getString());\n      }\n      if (v != null && varFilter.apply(v)) {\n        addReference(t, v, new Reference(n, t, blockStack.peek()));\n      }\n    }\n\n    if (isBlockBoundary(n, parent)) {\n      blockStack.pop();\n    }\n  }\n",
        "begin_line": 147,
        "end_line": 164,
        "comment": "\n   * For each node, update the block stack and reference collection\n   * as appropriate.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.084
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.shouldTraverse#194",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n      Node parent) {\n    // If node is a new basic block, put on basic block stack\n    if (isBlockBoundary(n, parent)) {\n      blockStack.push(new BasicBlock(blockStack.peek(), n));\n    }\n    return true;\n  }\n",
        "begin_line": 194,
        "end_line": 202,
        "comment": "\n   * Updates block stack.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.084
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.getMainOptimizationLoop#676",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getMainOptimizationLoop()",
        "snippet": "  private List<PassFactory> getMainOptimizationLoop() {\n    List<PassFactory> passes = Lists.newArrayList();\n    if (options.inlineGetters) {\n      passes.add(inlineSimpleMethods);\n    }\n\n    passes.addAll(getCodeRemovingPasses());\n\n    if (options.inlineFunctions || options.inlineLocalFunctions) {\n      passes.add(inlineFunctions);\n    }\n\n    if (options.inlineProperties) {\n      passes.add(inlineProperties);\n    }\n\n    boolean runOptimizeCalls = options.optimizeCalls\n        || options.optimizeParameters\n        || options.optimizeReturns;\n\n    if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n      if (options.deadAssignmentElimination) {\n        passes.add(deadAssignmentsElimination);\n      }\n      if (!runOptimizeCalls) {\n        passes.add(removeUnusedVars);\n      }\n    }\n    if (runOptimizeCalls) {\n      passes.add(optimizeCallsAndRemoveUnusedVars);\n    }\n    assertAllLoopablePasses(passes);\n    return passes;\n  }\n",
        "begin_line": 676,
        "end_line": 709,
        "comment": " Creates the passes for the main optimization loop. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0835
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.collect#302",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.collect(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void collect(NodeTraversal t, Node n, Node parent) {\n      if (nodeFilter != null && !nodeFilter.apply(n)) {\n        return;\n      }\n\n      // If we are traversing the externs, then we save a pointer to the scope\n      // generated by them, so that we can do lookups in it later.\n      if (externsRoot != null && n == externsRoot) {\n        externsScope = t.getScope();\n      }\n\n      String name;\n      boolean isSet = false;\n      Name.Type type = Name.Type.OTHER;\n      boolean isPropAssign = false;\n\n      switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) return;\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null ||\n                    NodeUtil.isFunctionExpression(parent)) return;\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) return;\n          break;\n        default:\n          return;\n      }\n\n      // We are only interested in global names.\n      Scope scope = t.getScope();\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(t, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(t, n, parent, name);\n        }\n      } else {\n        handleGet(t, n, parent, name);\n      }\n    }\n",
        "begin_line": 302,
        "end_line": 430,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.writeOutput#651",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.writeOutput(java.lang.Appendable, com.google.javascript.jscomp.Compiler, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  static void writeOutput(Appendable out, Compiler compiler, String code,\n      String wrapper, String codePlaceholder) throws IOException {\n    int pos = wrapper.indexOf(codePlaceholder);\n    if (pos != -1) {\n      String prefix = \"\";\n\n      if (pos > 0) {\n        prefix = wrapper.substring(0, pos);\n        out.append(prefix);\n      }\n\n      out.append(code);\n\n      int suffixStart = pos + codePlaceholder.length();\n      if (suffixStart != wrapper.length()) {\n        // Something after placeholder?\n        out.append(wrapper.substring(suffixStart));\n      }\n      // Make sure we always end output with a line feed.\n      out.append('\\n');\n\n      // If we have a source map, adjust its offsets to match\n      // the code WITHIN the wrapper.\n      if (compiler != null && compiler.getSourceMap() != null) {\n        compiler.getSourceMap().setWrapperPrefix(prefix);\n      }\n\n    } else {\n      out.append(code);\n      out.append('\\n');\n    }\n  }\n",
        "begin_line": 651,
        "end_line": 682,
        "comment": "\n   * Writes code to an output stream, optionally wrapping it in an arbitrary\n   * wrapper that contains a placeholder where the code should be inserted.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.outputNameMaps#1220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputNameMaps(B)",
        "snippet": "  private void outputNameMaps(B options) throws FlagUsageException,\n      IOException {\n\n    String propertyMapOutputPath = null;\n    String variableMapOutputPath = null;\n    String functionInformationMapOutputPath = null;\n\n    // Check the create_name_map_files FLAG.\n    if (config.createNameMapFiles) {\n      String basePath = getMapPath(config.jsOutputFile);\n\n      propertyMapOutputPath = basePath + \"_props_map.out\";\n      variableMapOutputPath = basePath + \"_vars_map.out\";\n      functionInformationMapOutputPath = basePath + \"_functions_map.out\";\n    }\n\n    // Check the individual FLAGS.\n    if (!config.variableMapOutputFile.equals(\"\")) {\n      if (variableMapOutputPath != null) {\n        throw new FlagUsageException(\"The flags variable_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");\n      }\n\n      variableMapOutputPath = config.variableMapOutputFile;\n    }\n\n    if (!config.propertyMapOutputFile.equals(\"\")) {\n      if (propertyMapOutputPath != null) {\n        throw new FlagUsageException(\"The flags property_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");\n      }\n\n      propertyMapOutputPath = config.propertyMapOutputFile;\n    }\n\n    // Output the maps.\n    if (variableMapOutputPath != null) {\n      if (compiler.getVariableMap() != null) {\n        compiler.getVariableMap().save(variableMapOutputPath);\n      }\n    }\n\n    if (propertyMapOutputPath != null) {\n      if (compiler.getPropertyMap() != null) {\n        compiler.getPropertyMap().save(propertyMapOutputPath);\n      }\n    }\n\n    if (functionInformationMapOutputPath != null) {\n      if (compiler.getFunctionalInformationMap() != null) {\n        OutputStream file =\n            filenameToOutputStream(functionInformationMapOutputPath);\n        CodedOutputStream outputStream = CodedOutputStream.newInstance(file);\n        compiler.getFunctionalInformationMap().writeTo(outputStream);\n        outputStream.flush();\n        file.flush();\n        file.close();\n      }\n    }\n  }\n",
        "begin_line": 1220,
        "end_line": 1279,
        "comment": "\n   * Outputs the variable and property name maps for the specified compiler if\n   * the proper FLAGS are set.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.outputManifest#1359",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputManifest()",
        "snippet": "  private void outputManifest() throws IOException {\n    outputManifestOrBundle(config.outputManifests, true);\n  }\n",
        "begin_line": 1359,
        "end_line": 1361,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.outputBundle#1363",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputBundle()",
        "snippet": "  private void outputBundle() throws IOException {\n    outputManifestOrBundle(config.outputBundles, false);\n  }\n",
        "begin_line": 1363,
        "end_line": 1365,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.outputManifestOrBundle#1371",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputManifestOrBundle(java.util.List<java.lang.String>, boolean)",
        "snippet": "  private void outputManifestOrBundle(List<String> outputFiles,\n      boolean isManifest) throws IOException {\n    if (outputFiles.isEmpty()) {\n      return;\n    }\n\n    for (String output : outputFiles) {\n      if (output.isEmpty()) {\n        continue;\n      }\n\n      if (shouldGenerateOutputPerModule(output)) {\n        // Generate per-module manifests or bundles\n        JSModuleGraph graph = compiler.getDegenerateModuleGraph();\n        Iterable<JSModule> modules = graph.getAllModules();\n        for (JSModule module : modules) {\n          Writer out = fileNameToOutputWriter2(\n              expandCommandLinePath(output, module));\n          if (isManifest) {\n            printManifestTo(module.getInputs(), out);\n          } else {\n            printBundleTo(module.getInputs(), out);\n          }\n          out.close();\n        }\n      } else {\n        // Generate a single file manifest or bundle.\n        Writer out = fileNameToOutputWriter2(\n            expandCommandLinePath(output, null));\n        if (config.module.isEmpty()) {\n          if (isManifest) {\n            printManifestTo(compiler.getInputsInOrder(), out);\n          } else {\n            printBundleTo(compiler.getInputsInOrder(), out);\n          }\n        } else {\n          printModuleGraphManifestOrBundleTo(\n              compiler.getDegenerateModuleGraph(), out, isManifest);\n        }\n        out.close();\n      }\n    }\n  }\n",
        "begin_line": 1371,
        "end_line": 1413,
        "comment": "\n   * Writes the manifest or bundle of all compiler input files that survived\n   * manage_closure_dependencies, if requested.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.083
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.addProvide#838",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.addProvide(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, boolean)",
        "snippet": "    void addProvide(Node node, JSModule module, boolean explicit) {\n      if (explicit) {\n        Preconditions.checkState(explicitNode == null);\n        Preconditions.checkArgument(node.isExprResult());\n        explicitNode = node;\n        explicitModule = module;\n      }\n      updateMinimumModule(module);\n    }\n",
        "begin_line": 838,
        "end_line": 846,
        "comment": "\n     * Add an implicit or explicit provide.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.082
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.processProvideCall#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.processProvideCall(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyProvide(t, left, arg)) {\n      String ns = arg.getString();\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      if (providedNames.containsKey(ns)) {\n        ProvidedName previouslyProvided = providedNames.get(ns);\n        if (!previouslyProvided.isExplicitlyProvided()) {\n          previouslyProvided.addProvide(parent, t.getModule(), true);\n        } else {\n          compiler.report(\n              t.makeError(n, DUPLICATE_NAMESPACE_ERROR, ns));\n        }\n      } else {\n        registerAnyProvidedPrefixes(ns, parent, t.getModule());\n        providedNames.put(\n            ns, new ProvidedName(ns, parent, t.getModule(), true));\n      }\n    }\n  }\n",
        "begin_line": 316,
        "end_line": 339,
        "comment": "\n   * Handles a goog.provide call.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.082
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.verifyProvide#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.verifyProvide(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean verifyProvide(NodeTraversal t, Node methodName, Node arg) {\n    if (!verifyArgument(t, methodName, arg)) {\n      return false;\n    }\n\n    for (String part : arg.getString().split(\"\\\\.\")) {\n      if (!NodeUtil.isValidPropertyName(part)) {\n        compiler.report(t.makeError(arg, INVALID_PROVIDE_ERROR, part));\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 692,
        "end_line": 704,
        "comment": "\n   * Verifies that a provide method call has exactly one argument,\n   * and that it's a string literal and that the contents of the string are\n   * valid JS tokens. Reports a compile error if it doesn't.\n   *\n   * @return Whether the argument checked out okay\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.082
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.registerAnyProvidedPrefixes#779",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.registerAnyProvidedPrefixes(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule)",
        "snippet": "  private void registerAnyProvidedPrefixes(\n      String ns, Node node, JSModule module) {\n    int pos = ns.indexOf('.');\n    while (pos != -1) {\n      String prefixNs = ns.substring(0, pos);\n      pos = ns.indexOf('.', pos + 1);\n      if (providedNames.containsKey(prefixNs)) {\n        providedNames.get(prefixNs).addProvide(\n            node, module, false /* implicit */);\n      } else {\n        providedNames.put(\n            prefixNs,\n            new ProvidedName(prefixNs, node, module, false /* implicit */));\n      }\n    }\n  }\n",
        "begin_line": 779,
        "end_line": 794,
        "comment": "\n   * Registers ProvidedNames for prefix namespaces if they haven't\n   * already been defined. The prefix namespaces must be registered in\n   * order from shortest to longest.\n   *\n   * @param ns The namespace whose prefixes may need to be provided.\n   * @param node The EXPR of the provide call.\n   * @param module The current module.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.082
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.visit#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.CALL:\n        boolean isExpr = parent.isExprResult();\n        Node left = n.getFirstChild();\n        if (left.isGetProp()) {\n          Node name = left.getFirstChild();\n          if (name.isName() &&\n              GOOG.equals(name.getString())) {\n            // For the sake of simplicity, we report code changes\n            // when we see a provides/requires, and don't worry about\n            // reporting the change when we actually do the replacement.\n            String methodName = name.getNext().getString();\n            if (\"base\".equals(methodName)) {\n              processBaseClassCall(t, n);\n            } else if (!isExpr) {\n              // All other methods must be called in an EXPR.\n              break;\n            } else if (\"require\".equals(methodName)) {\n              processRequireCall(t, n, parent);\n            } else if (\"provide\".equals(methodName)) {\n              processProvideCall(t, n, parent);\n            } else if (\"exportSymbol\".equals(methodName)) {\n              Node arg = left.getNext();\n              if (arg.isString()) {\n                int dot = arg.getString().indexOf('.');\n                if (dot == -1) {\n                  exportedVariables.add(arg.getString());\n                } else {\n                  exportedVariables.add(arg.getString().substring(0, dot));\n                }\n              }\n            } else if (\"addDependency\".equals(methodName)) {\n              CodingConvention convention = compiler.getCodingConvention();\n              List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);\n              if (typeDecls != null) {\n                for (String typeDecl : typeDecls) {\n                  compiler.getTypeRegistry().forwardDeclareType(typeDecl);\n                }\n              }\n\n              // We can't modify parent, so just create a node that will\n              // get compiled out.\n              parent.replaceChild(n, IR.number(0));\n              compiler.reportCodeChange();\n            } else if (\"setCssNameMapping\".equals(methodName)) {\n              processSetCssNameMapping(t, n, parent);\n            }\n          }\n        }\n        break;\n\n      case Token.ASSIGN:\n      case Token.NAME:\n        // If this is an assignment to a provided name, remove the provided\n        // object.\n        handleCandidateProvideDefinition(t, n, parent);\n        break;\n\n      case Token.EXPR_RESULT:\n        handleTypedefDefinition(t, n, parent);\n        break;\n\n      case Token.FUNCTION:\n        // If this is a declaration of a provided named function, this is an\n        // error. Hoisted functions will explode if they're provided.\n        if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n)) {\n          String name = n.getFirstChild().getString();\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));\n          }\n        }\n        break;\n\n      case Token.NEW:\n        trySimplifyNewDate(t, n, parent);\n        break;\n\n      case Token.GETPROP:\n        if (n.getFirstChild().isName() &&\n            !parent.isCall() &&\n            !parent.isAssign() &&\n            \"goog.base\".equals(n.getQualifiedName())) {\n          reportBadBaseClassUse(t, n, \"May only be called directly.\");\n        }\n        break;\n    }\n  }\n",
        "begin_line": 175,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0815
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.maybeAddStringNodeToSymbolTable#1097",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.maybeAddStringNodeToSymbolTable(com.google.javascript.rhino.Node)",
        "snippet": "  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (preprocessorSymbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    Node syntheticRef = NodeUtil.newQualifiedNameNode(\n        compiler.getCodingConvention(), name,\n        n /* real source offsets will be filled in below */,\n        name);\n\n    // Offsets to add to source. Named for documentation purposes.\n    final int FOR_QUOTE = 1;\n    final int FOR_DOT = 1;\n\n    Node current = null;\n    for (current = syntheticRef;\n         current.isGetProp();\n         current = current.getFirstChild()) {\n      int fullLen = current.getQualifiedName().length();\n      int namespaceLen = current.getFirstChild().getQualifiedName().length();\n\n      current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n      current.setLength(fullLen);\n\n      current.getLastChild().setSourceEncodedPosition(\n          n.getSourcePosition() + namespaceLen + FOR_QUOTE + FOR_DOT);\n      current.getLastChild().setLength(\n          current.getLastChild().getString().length());\n    }\n\n    current.setSourceEncodedPosition(n.getSourcePosition() + FOR_QUOTE);\n    current.setLength(current.getString().length());\n\n    maybeAddToSymbolTable(syntheticRef);\n  }\n",
        "begin_line": 1097,
        "end_line": 1132,
        "comment": "\n   * The string in {@code n} is a reference name. Create a synthetic\n   * node for it with all the proper source info, and add it to the symbol\n   * table.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0815
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.checkForStateChangeHelper#785",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.PARAM_LIST:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (assignTarget.isName()) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 785,
        "end_line": 929,
        "comment": "\n   * Returns true if some node in n's subtree changes application state.\n   * If {@code checkForNewObjects} is true, we assume that newly created\n   * mutable objects (like object literals) change state. Otherwise, we assume\n   * that they have no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.081
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isExpressionResultUsed#3090",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExpressionResultUsed(Node expr) {\n    // TODO(johnlenz): consider sharing some code with trySimpleUnusedResult.\n    Node parent = expr.getParent();\n    switch (parent.getType()) {\n      case Token.EXPR_RESULT:\n        return false;\n      case Token.HOOK:\n      case Token.AND:\n      case Token.OR:\n        return (expr == parent.getFirstChild())\n            ? true : isExpressionResultUsed(parent);\n      case Token.COMMA:\n        return (expr == parent.getFirstChild())\n            ? false : isExpressionResultUsed(parent);\n      case Token.FOR:\n        if (!NodeUtil.isForIn(parent)) {\n          // Only an expression whose result is in the condition part of the\n          // expression is used.\n          return (parent.getChildAtIndex(1) == expr);\n        }\n        break;\n    }\n    return true;\n  }\n",
        "begin_line": 3090,
        "end_line": 3113,
        "comment": "\n   * @returns false iff the result of the expression is not consumed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.081
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.jsString#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.jsString(java.lang.String, boolean)",
        "snippet": "  private String jsString(String s, boolean useSlashV) {\n    int singleq = 0, doubleq = 0;\n\n    // could count the quotes and pick the optimal quote character\n    for (int i = 0; i < s.length(); i++) {\n      switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }\n    }\n\n    String doublequote, singlequote;\n    char quote;\n    if (singleq < doubleq) {\n      // more double quotes so escape the single quotes\n      quote = '\\'';\n      doublequote = \"\\\"\";\n      singlequote = \"\\\\\\'\";\n    } else {\n      // more single quotes so escape the doubles\n      quote = '\\\"';\n      doublequote = \"\\\\\\\"\";\n      singlequote = \"\\'\";\n    }\n\n    return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV);\n  }\n",
        "begin_line": 967,
        "end_line": 994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0807
        },
        "num_failing_tests": 5
    },
    {
        "name": "ProcessClosurePrimitives.maybeAddToSymbolTable#1137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.maybeAddToSymbolTable(com.google.javascript.rhino.Node)",
        "snippet": "  private void maybeAddToSymbolTable(Node n) {\n    if (preprocessorSymbolTable != null) {\n      preprocessorSymbolTable.addReference(n);\n    }\n  }\n",
        "begin_line": 1137,
        "end_line": 1141,
        "comment": "\n   * Add the given qualified name node to the symbol table.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeCollectPropertyAssignments.getName#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java",
        "class_name": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
        "signature": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments.getName(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getName(Node n) {\n    if (n.isVar()) {\n      return n.getFirstChild();\n    } else if (NodeUtil.isExprAssign(n)) {\n      return n.getFirstChild().getFirstChild();\n    }\n    throw new IllegalStateException();\n  }\n",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 1
    },
    {
        "name": "PeepholeCollectPropertyAssignments.getValue#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java",
        "class_name": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
        "signature": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments.getValue(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getValue(Node n) {\n    if (n.isVar()) {\n      return n.getFirstChild().getFirstChild();\n    } else if (NodeUtil.isExprAssign(n)) {\n      return n.getFirstChild().getLastChild();\n    }\n    throw new IllegalStateException();\n  }\n",
        "begin_line": 93,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.verifyArgument#722",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.verifyArgument(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int)",
        "snippet": "  private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg,\n      int desiredType) {\n    DiagnosticType diagnostic = null;\n    if (arg == null) {\n      diagnostic = NULL_ARGUMENT_ERROR;\n    } else if (arg.getType() != desiredType) {\n      diagnostic = INVALID_ARGUMENT_ERROR;\n    } else if (arg.getNext() != null) {\n      diagnostic = TOO_MANY_ARGUMENTS_ERROR;\n    }\n    if (diagnostic != null) {\n      compiler.report(\n          t.makeError(methodName,\n              diagnostic, methodName.getQualifiedName()));\n      return false;\n    }\n    return true;\n  }\n",
        "begin_line": 722,
        "end_line": 739,
        "comment": "\n   * Verifies that a method call has exactly one argument, and that it is of the\n   * desired type. Reports a compile error if it doesn't.\n   *\n   * @return Whether the argument checked out okay\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.verifyArgument#712",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.verifyArgument(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg) {\n    return verifyArgument(t, methodName, arg, Token.STRING);\n  }\n",
        "begin_line": 712,
        "end_line": 714,
        "comment": "\n   * Verifies that a method call has exactly one argument, and that it's a\n   * string literal. Reports a compile error if it doesn't.\n   *\n   * @return Whether the argument checked out okay\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0797
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameVars.visit#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.ProcessVars.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (!n.isName()) {\n        return;\n      }\n\n      String name = n.getString();\n\n      // Ignore anonymous functions\n      if (name.length() == 0) {\n        return;\n      }\n\n      // Is this local or Global?\n      // Bleeding functions should be treated as part of their outer\n      // scope, because IE has bugs in how it handles bleeding\n      // functions.\n      Scope.Var var = t.getScope().getVar(name);\n      boolean local = (var != null) && var.isLocal() &&\n          (!var.scope.getParent().isGlobal() ||\n           !var.isBleedingFunction());\n\n      // Are we renaming global variables?\n      if (!local && localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n      }\n\n      // Are we renaming function expression names?\n      if (preserveFunctionExpressionNames && var != null\n          && NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n      }\n\n      // Check if we can rename this.\n      if (!okToRenameVar(name, local)) {\n        if (local) {\n          // Blindly de-uniquify for the Prototype library for issue 103.\n          String newName = MakeDeclaredNamesUnique.ContextualRenameInverter\n              .getOrginalName(name);\n          if (!newName.equals(name)) {\n            n.setString(newName);\n          }\n        }\n        return;\n      }\n\n      if (isExternsPass_) {\n        // Keep track of extern globals.\n        if (!local) {\n          externNames.add(name);\n        }\n        return;\n      }\n\n      if (pseudoNameMap != null) {\n        recordPseudoName(n);\n      }\n\n      if (local) {\n        // Local var: assign a new name\n        String tempName = LOCAL_VAR_PREFIX + getLocalVarIndex(var);\n        incCount(tempName);\n        localNameNodes.add(n);\n        n.setString(tempName);\n      } else if (var != null) { // Not an extern\n        // If it's global, increment global count\n        incCount(name);\n        globalNameNodes.add(n);\n      }\n    }\n",
        "begin_line": 211,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0792
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addJsString#952",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addJsString(com.google.javascript.rhino.Node)",
        "snippet": "  private void addJsString(Node n) {\n    String s = n.getString();\n    boolean useSlashV = n.getBooleanProp(Node.SLASH_V);\n    if (useSlashV) {\n      add(jsString(n.getString(), useSlashV));\n    } else {\n      String cached = ESCAPED_JS_STRINGS.get(s);\n      if (cached == null) {\n        cached = jsString(n.getString(), useSlashV);\n        ESCAPED_JS_STRINGS.put(s, cached);\n      }\n      add(cached);\n    }\n  }\n",
        "begin_line": 952,
        "end_line": 965,
        "comment": " Outputs a JS string, using the optimal (single/double) quote character ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0789
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.addChildToFront#597",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToFront(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToFront(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = first;\n    first = child;\n    if (last == null) {\n      last = child;\n    }\n  }\n",
        "begin_line": 597,
        "end_line": 606,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeRemoveDeadCode.isConditionalStatement#578",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.isConditionalStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isConditionalStatement(Node n) {\n    // We defined a conditional statement to be a IF or EXPR_RESULT rooted with\n    // a HOOK, AND, or OR node.\n    return n != null && (n.isIf() || isExprConditional(n));\n  }\n",
        "begin_line": 578,
        "end_line": 582,
        "comment": "\n   * @return Whether the node is a conditional statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.getOptimizations#340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getOptimizations()",
        "snippet": "  @Override\n  protected List<PassFactory> getOptimizations() {\n    List<PassFactory> passes = Lists.newArrayList();\n    passes.add(garbageCollectChecks);\n\n    // TODO(nicksantos): The order of these passes makes no sense, and needs\n    // to be re-arranged.\n\n    if (options.runtimeTypeCheck) {\n      passes.add(runtimeTypeCheck);\n    }\n\n    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n\n    if (options.replaceIdGenerators) {\n      passes.add(replaceIdGenerators);\n    }\n\n    // Optimizes references to the arguments variable.\n    if (options.optimizeArgumentsArray) {\n      passes.add(optimizeArgumentsArray);\n    }\n\n    // Abstract method removal works best on minimally modified code, and also\n    // only needs to run once.\n    if (options.closurePass &&\n        (options.removeAbstractMethods || options.removeClosureAsserts)) {\n      passes.add(closureCodeRemoval);\n    }\n\n    // Collapsing properties can undo constant inlining, so we do this before\n    // the main optimization loop.\n    if (options.collapseProperties) {\n      passes.add(collapseProperties);\n    }\n\n    // ReplaceStrings runs after CollapseProperties in order to simplify\n    // pulling in values of constants defined in enums structures.\n    if (!options.replaceStringsFunctionDescriptions.isEmpty()) {\n      passes.add(replaceStrings);\n    }\n\n    // Tighten types based on actual usage.\n    if (options.tightenTypes) {\n      passes.add(tightenTypesBuilder);\n    }\n\n    // Property disambiguation should only run once and needs to be done\n    // soon after type checking, both so that it can make use of type\n    // information and so that other passes can take advantage of the renamed\n    // properties.\n    if (options.disambiguateProperties) {\n      passes.add(disambiguateProperties);\n    }\n\n    if (options.computeFunctionSideEffects) {\n      passes.add(markPureFunctions);\n    } else if (options.markNoSideEffectCalls) {\n      // TODO(user) The properties that this pass adds to CALL and NEW\n      // AST nodes increase the AST's in-memory size.  Given that we are\n      // already running close to our memory limits, we could run into\n      // trouble if we end up using the @nosideeffects annotation a lot\n      // or compute @nosideeffects annotations by looking at function\n      // bodies.  It should be easy to propagate @nosideeffects\n      // annotations as part of passes that depend on this property and\n      // store the result outside the AST (which would allow garbage\n      // collection once the pass is done).\n      passes.add(markNoSideEffectCalls);\n    }\n\n    if (options.chainCalls) {\n      passes.add(chainCalls);\n    }\n\n    // Constant checking must be done after property collapsing because\n    // property collapsing can introduce new constants (e.g. enum values).\n    if (options.inlineConstantVars) {\n      passes.add(checkConsts);\n    }\n\n    // The Caja library adds properties to Object.prototype, which breaks\n    // most for-in loops.  This adds a check to each loop that skips\n    // any property matching /___$/.\n    if (options.ignoreCajaProperties) {\n      passes.add(ignoreCajaProperties);\n    }\n\n    assertAllOneTimePasses(passes);\n\n    if (options.smartNameRemoval || options.reportPath != null) {\n      passes.addAll(getCodeRemovingPasses());\n      passes.add(smartNamePass);\n    }\n\n    // This needs to come after the inline constants pass, which is run within\n    // the code removing passes.\n    if (options.closurePass) {\n      passes.add(closureOptimizePrimitives);\n    }\n\n    // TODO(user): This forces a first crack at crossModuleCodeMotion\n    // before devirtualization. Once certain functions are devirtualized,\n    // it confuses crossModuleCodeMotion ability to recognized that\n    // it is recursive.\n\n    // TODO(user): This is meant for a temporary quick win.\n    // In the future, we might want to improve our analysis in\n    // CrossModuleCodeMotion so we don't need to do this.\n    if (options.crossModuleCodeMotion) {\n      passes.add(crossModuleCodeMotion);\n    }\n\n    // Method devirtualization benefits from property disambiguation so\n    // it should run after that pass but before passes that do\n    // optimizations based on global names (like cross module code motion\n    // and inline functions).  Smart Name Removal does better if run before\n    // this pass.\n    if (options.devirtualizePrototypeMethods) {\n      passes.add(devirtualizePrototypeMethods);\n    }\n\n    if (options.customPasses != null) {\n      passes.add(getCustomPasses(\n          CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n    }\n\n    passes.add(createEmptyPass(\"beforeMainOptimizations\"));\n\n    if (options.specializeInitialModule) {\n      // When specializing the initial module, we want our fixups to be\n      // as lean as possible, so we run the entire optimization loop to a\n      // fixed point before specializing, then specialize, and then run the\n      // main optimization loop again.\n\n      passes.addAll(getMainOptimizationLoop());\n\n      if (options.crossModuleCodeMotion) {\n        passes.add(crossModuleCodeMotion);\n      }\n\n      if (options.crossModuleMethodMotion) {\n        passes.add(crossModuleMethodMotion);\n      }\n\n      passes.add(specializeInitialModule.makeOneTimePass());\n    }\n\n    passes.addAll(getMainOptimizationLoop());\n\n    passes.add(createEmptyPass(\"beforeModuleMotion\"));\n\n    if (options.crossModuleCodeMotion) {\n      passes.add(crossModuleCodeMotion);\n    }\n\n    if (options.crossModuleMethodMotion) {\n      passes.add(crossModuleMethodMotion);\n    }\n\n    passes.add(createEmptyPass(\"afterModuleMotion\"));\n\n    // Some optimizations belong outside the loop because running them more\n    // than once would either have no benefit or be incorrect.\n    if (options.customPasses != null) {\n      passes.add(getCustomPasses(\n          CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));\n    }\n\n    if (options.flowSensitiveInlineVariables) {\n      passes.add(flowSensitiveInlineVariables);\n\n      // After inlining some of the variable uses, some variables are unused.\n      // Re-run remove unused vars to clean it up.\n      if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n        passes.add(removeUnusedVars);\n      }\n    }\n\n    // Running this pass again is required to have goog.events compile down to\n    // nothing when compiled on its own.\n    if (options.smartNameRemoval) {\n      passes.add(smartNamePass2);\n    }\n\n    if (options.collapseAnonymousFunctions) {\n      passes.add(collapseAnonymousFunctions);\n    }\n\n    // Move functions before extracting prototype member declarations.\n    if (options.moveFunctionDeclarations ||\n        // renamePrefixNamescape relies on moveFunctionDeclarations\n        // to preserve semantics.\n        options.renamePrefixNamespace != null) {\n      passes.add(moveFunctionDeclarations);\n    }\n\n    if (options.anonymousFunctionNaming ==\n        AnonymousFunctionNamingPolicy.MAPPED) {\n      passes.add(nameMappedAnonymousFunctions);\n    }\n\n    // The mapped name anonymous function pass makes use of information that\n    // the extract prototype member declarations pass removes so the former\n    // happens before the latter.\n    //\n    // Extracting prototype properties screws up the heuristic renaming\n    // policies, so never run it when those policies are requested.\n    if (options.extractPrototypeMemberDeclarations &&\n        (options.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&\n         options.propertyRenaming !=\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n      passes.add(extractPrototypeMemberDeclarations);\n    }\n\n    if (options.ambiguateProperties &&\n        (options.propertyRenaming == PropertyRenamingPolicy.ALL_UNQUOTED)) {\n      passes.add(ambiguateProperties);\n    }\n\n    if (options.propertyRenaming != PropertyRenamingPolicy.OFF) {\n      passes.add(renameProperties);\n    }\n\n    // Reserve global names added to the \"windows\" object.\n    if (options.reserveRawExports) {\n      passes.add(gatherRawExports);\n    }\n\n    // This comes after property renaming because quoted property names must\n    // not be renamed.\n    if (options.convertToDottedProperties) {\n      passes.add(convertToDottedProperties);\n    }\n\n    // Property renaming must happen before this pass runs since this\n    // pass may convert dotted properties into quoted properties.  It\n    // is beneficial to run before alias strings, alias keywords and\n    // variable renaming.\n    if (options.rewriteFunctionExpressions) {\n      passes.add(rewriteFunctionExpressions);\n    }\n\n    // This comes after converting quoted property accesses to dotted property\n    // accesses in order to avoid aliasing property names.\n    if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {\n      passes.add(aliasStrings);\n    }\n\n    if (options.aliasExternals) {\n      passes.add(aliasExternals);\n    }\n\n    if (options.aliasKeywords) {\n      passes.add(aliasKeywords);\n    }\n\n    // Passes after this point can no longer depend on normalized AST\n    // assumptions.\n    passes.add(markUnnormalized);\n\n    if (options.coalesceVariableNames) {\n      passes.add(coalesceVariableNames);\n\n      // coalesceVariables creates identity assignments and more redundant code\n      // that can be removed, rerun the peephole optimizations to clean them\n      // up.\n      if (options.foldConstants) {\n        passes.add(peepholeOptimizations);\n      }\n    }\n\n    if (options.collapseVariableDeclarations) {\n      passes.add(exploitAssign);\n      passes.add(collapseVariableDeclarations);\n    }\n\n    // This pass works best after collapseVariableDeclarations.\n    passes.add(denormalize);\n\n    if (options.instrumentationTemplate != null) {\n      passes.add(instrumentFunctions);\n    }\n\n    if (options.variableRenaming != VariableRenamingPolicy.ALL) {\n      // If we're leaving some (or all) variables with their old names,\n      // then we need to undo any of the markers we added for distinguishing\n      // local variables (\"$$1\").\n      passes.add(invertContextualRenaming);\n    }\n\n    if (options.variableRenaming != VariableRenamingPolicy.OFF) {\n      passes.add(renameVars);\n    }\n\n    if (options.groupVariableDeclarations) {\n      passes.add(groupVariableDeclarations);\n    }\n\n    // This pass should run after names stop changing.\n    if (options.processObjectPropertyString) {\n      passes.add(objectPropertyStringPostprocess);\n    }\n\n    if (options.labelRenaming) {\n      passes.add(renameLabels);\n    }\n\n    if (options.foldConstants) {\n      passes.add(latePeepholeOptimizations);\n    }\n\n    if (options.anonymousFunctionNaming ==\n        AnonymousFunctionNamingPolicy.UNMAPPED) {\n      passes.add(nameUnmappedAnonymousFunctions);\n    }\n\n    if (options.renamePrefixNamespace != null) {\n      if (!GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(\n          options.renamePrefixNamespace).matches()) {\n        throw new IllegalArgumentException(\n            \"Illegal character in renamePrefixNamespace name: \"\n            + options.renamePrefixNamespace);\n      }\n      passes.add(rescopeGlobalSymbols);\n    }\n\n    passes.add(stripSideEffectProtection);\n\n    // Safety checks\n    passes.add(sanityCheckAst);\n    passes.add(sanityCheckVars);\n\n    return passes;\n  }\n",
        "begin_line": 340,
        "end_line": 673,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.createSourceInputs#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.createSourceInputs(java.util.List<java.lang.String>)",
        "snippet": "  private List<SourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException {\n    if (isInTestMode()) {\n      return inputsSupplierForTesting.get();\n    }\n    if (files.isEmpty()) {\n      files = Collections.singletonList(\"-\");\n    }\n    try {\n      return createInputs(files, true);\n    } catch (FlagUsageException e) {\n      throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());\n    }\n  }\n",
        "begin_line": 445,
        "end_line": 458,
        "comment": "\n   * Creates JS source code inputs from a list of files.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.doRun#705",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun()",
        "snippet": "  protected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n\n    List<SourceFile> externs = createExterns();\n\n    compiler = createCompiler();\n    B options = createOptions();\n\n    List<JSModule> modules = null;\n    Result result = null;\n\n    setRunOptions(options);\n\n    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n      jsOutput = fileNameToLegacyOutputWriter(config.jsOutputFile);\n    } else if (jsOutput instanceof OutputStream) {\n      jsOutput = streamToLegacyOutputWriter((OutputStream) jsOutput);\n    }\n\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n      modules = createJsModules(moduleSpecs, jsFiles);\n      if (config.skipNormalOutputs) {\n        compiler.initModules(externs, modules, options);\n      } else {\n        result = compiler.compileModules(externs, modules, options);\n      }\n    } else {\n      List<SourceFile> inputs = createSourceInputs(jsFiles);\n      if (config.skipNormalOutputs) {\n        compiler.init(externs, inputs, options);\n      } else {\n        result = compiler.compile(externs, inputs, options);\n      }\n    }\n\n    int errCode = processResults(result, modules, options);\n    // Flush the output if we are writing to a file.\n    // We can't close yet, because we may need to write phase ordering\n    // info to it later.\n    if (jsOutput instanceof Flushable) {\n      ((Flushable) jsOutput).flush();\n    }\n    return errCode;\n  }\n",
        "begin_line": 705,
        "end_line": 751,
        "comment": "\n   * Parses command-line arguments and runs the compiler.\n   *\n   * @return system exit status\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.hasDuplicateDeclarationSuppression#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.hasDuplicateDeclarationSuppression(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope.Var)",
        "snippet": "  static boolean hasDuplicateDeclarationSuppression(Node n, Scope.Var origVar) {\n    Preconditions.checkState(n.isName());\n    Node parent = n.getParent();\n    Node origParent = origVar.getParentNode();\n\n    JSDocInfo info = n.getJSDocInfo();\n    if (info == null) {\n      info = parent.getJSDocInfo();\n    }\n    if (info != null && info.getSuppressions().contains(\"duplicate\")) {\n      return true;\n    }\n\n    info = origVar.nameNode.getJSDocInfo();\n    if (info == null) {\n      info = origParent.getJSDocInfo();\n    }\n    return (info != null && info.getSuppressions().contains(\"duplicate\"));\n  }\n",
        "begin_line": 254,
        "end_line": 272,
        "comment": "\n   * @param n The name node to check.\n   * @param origVar The associated Var.\n   * @return Whether duplicated declarations warnings should be suppressed\n   *     for the given node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0788
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.strEscape#1016",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.strEscape(java.lang.String, char, java.lang.String, java.lang.String, java.lang.String, java.nio.charset.CharsetEncoder, boolean)",
        "snippet": "  private static String strEscape(\n      String s, char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }\n    }\n    sb.append(quote);\n    return sb.toString();\n  }\n",
        "begin_line": 1016,
        "end_line": 1103,
        "comment": " Helper to escape JavaScript string as well as regular expression ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0787
        },
        "num_failing_tests": 5
    },
    {
        "name": "AstValidator.validateExpression#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExpression(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateExpression(Node n) {\n    switch (n.getType()) {\n      // Childless expressions\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        validateChildless(n);\n        return;\n\n      // General unary ops\n      case Token.DELPROP:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.INC:\n      case Token.DEC:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.BITNOT:\n        validateUnaryOp(n);\n        return;\n\n      // General binary ops\n      case Token.COMMA:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n        validateBinaryOp(n);\n        return;\n\n      // Assignments\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        validateAssignmentExpression(n);\n        return;\n\n      case Token.HOOK:\n        validateTrinaryOp(n);\n        return;\n\n      // Node types that require special handling\n      case Token.STRING:\n        validateString(n);\n        return;\n\n      case Token.NUMBER:\n        validateNumber(n);\n        return;\n\n      case Token.NAME:\n        validateName(n);\n        return;\n\n      case Token.GETELEM:\n        validateBinaryOp(n);\n        return;\n\n      case Token.GETPROP:\n        validateGetProp(n);\n        return;\n\n      case Token.ARRAYLIT:\n        validateArrayLit(n);\n        return;\n\n      case Token.OBJECTLIT:\n        validateObjectLit(n);\n        return;\n\n      case Token.REGEXP:\n        validateRegExpLit(n);\n        return;\n\n      case Token.CALL:\n        validateCall(n);\n        return;\n\n      case Token.NEW:\n        validateNew(n);\n        return;\n\n      case Token.FUNCTION:\n        validateFunctionExpression(n);\n        return;\n\n      default:\n        violation(\"Expected expression but was \"\n            + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 155,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0787
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateObjectLit#667",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateObjectLit(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateObjectLit(Node n) {\n    validateNodeType(Token.OBJECTLIT, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateObjectLitKey(c);\n    }\n  }\n",
        "begin_line": 667,
        "end_line": 672,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0787
        },
        "num_failing_tests": 7
    },
    {
        "name": "OptimizeArgumentsArray.OptimizeArgumentsArray#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.OptimizeArgumentsArray(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  OptimizeArgumentsArray(AbstractCompiler compiler) {\n    this(compiler, PARAMETER_PREFIX);\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n   * Construct this pass and use {@link #PARAMETER_PREFIX} as the prefix for\n   * all parameter names that it introduces.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#2122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-2599d7fa-dc17-425a-83ed-04122cab66f5.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ConvertToDottedProperties(compiler);\n    }\n",
        "begin_line": 2122,
        "end_line": 2125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#2113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-185531ec-f69f-4a31-a5a2-79c564700de1.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RenameLabels(compiler);\n    }\n",
        "begin_line": 2113,
        "end_line": 2116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1836",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-f80a9e47-c622-4632-957e-0538f3f2cbd2.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CollapseVariableDeclarations(compiler);\n    }\n",
        "begin_line": 1836,
        "end_line": 1839,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1823",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-032e7f84-92b0-4058-9bf5-9e010f2b0b96.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new PeepholeOptimizationsPass(compiler,\n          new ExploitAssigns());\n    }\n",
        "begin_line": 1823,
        "end_line": 1827,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1802",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-0a6ec339-6b9c-432f-a92e-45b9758225f4.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new FlowSensitiveInlineVariables(compiler);\n    }\n",
        "begin_line": 1802,
        "end_line": 1805,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1720",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-c76b7326-e7c9-49f2-aec3-ee15b65e6271.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      boolean enableBlockInlining = !isInliningForbidden();\n      return new InlineFunctions(\n          compiler,\n          compiler.getUniqueNameIdSupplier(),\n          options.inlineFunctions,\n          options.inlineLocalFunctions,\n          enableBlockInlining,\n          options.assumeStrictThis()\n              || options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT,\n          options.assumeClosuresOnlyCaptureReferences);\n    }\n",
        "begin_line": 1720,
        "end_line": 1732,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1400",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-1fedc629-797f-4fca-971f-7b686d2a1952.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new OptimizeArgumentsArray(compiler);\n    }\n",
        "begin_line": 1400,
        "end_line": 1403,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.assumeStrictThis#1465",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeStrictThis()",
        "snippet": "  public boolean assumeStrictThis() {\n    return assumeStrictThis;\n  }\n",
        "begin_line": 1465,
        "end_line": 1467,
        "comment": "\n   * @return Whether assumeStrictThis is set.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0784
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getImpureBooleanValue#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(com.google.javascript.rhino.Node)",
        "snippet": "  static TernaryValue getImpureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      default:\n        return getPureBooleanValue(n);\n    }\n  }\n",
        "begin_line": 76,
        "end_line": 116,
        "comment": "\n   * Gets the boolean value of a node that represents a expression. This method\n   * effectively emulates the <code>Boolean()</code> JavaScript cast function.\n   * Note: unlike getBooleanValue this function does not return UNKNOWN\n   * for expressions with side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1811",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-32c2ee84-109c-4d07-ba8e-0a3574a107b8.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CoalesceVariableNames(compiler, options.generatePseudoNames);\n    }\n",
        "begin_line": 1811,
        "end_line": 1814,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1711",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-b681e925-22a3-4f34-b73f-06520addde80.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new DeadAssignmentsElimination(compiler);\n    }\n",
        "begin_line": 1711,
        "end_line": 1714,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1448",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-a0ca5e34-c141-4507-ac93-9bfcb57b9351.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new InlineObjectLiterals(\n          compiler, compiler.getUniqueNameIdSupplier());\n    }\n",
        "begin_line": 1448,
        "end_line": 1452,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.getCodeRemovingPasses#712",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getCodeRemovingPasses()",
        "snippet": "  private List<PassFactory> getCodeRemovingPasses() {\n    List<PassFactory> passes = Lists.newArrayList();\n    if (options.collapseObjectLiterals && !isInliningForbidden()) {\n      passes.add(collapseObjectLiterals);\n    }\n\n    if (options.inlineVariables || options.inlineLocalVariables) {\n      passes.add(inlineVariables);\n    } else if (options.inlineConstantVars) {\n      passes.add(inlineConstants);\n    }\n\n    if (options.foldConstants) {\n      // These used to be one pass.\n      passes.add(minimizeExitPoints);\n      passes.add(peepholeOptimizations);\n    }\n\n    if (options.removeDeadCode) {\n      passes.add(removeUnreachableCode);\n    }\n\n    if (options.removeUnusedPrototypeProperties) {\n      passes.add(removeUnusedPrototypeProperties);\n    }\n\n    if (options.removeUnusedClassProperties) {\n      passes.add(removeUnusedClassProperties);\n    }\n\n    assertAllLoopablePasses(passes);\n    return passes;\n  }\n",
        "begin_line": 712,
        "end_line": 744,
        "comment": " Creates several passes aimed at removing code. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "DeadAssignmentsElimination.process#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkNotNull(externs);\n    Preconditions.checkNotNull(root);\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 63,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "CoalesceVariableNames.process#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.078
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.streamToLegacyOutputWriter#1139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.streamToLegacyOutputWriter(java.io.OutputStream)",
        "snippet": "  private Writer streamToLegacyOutputWriter(OutputStream stream)\n      throws IOException {\n    if (legacyOutputCharset == null) {\n      return new BufferedWriter(\n          new OutputStreamWriter(stream));\n    } else {\n      return new BufferedWriter(\n          new OutputStreamWriter(stream, legacyOutputCharset));\n    }\n  }\n",
        "begin_line": 1139,
        "end_line": 1148,
        "comment": "\n   * Create a writer with the legacy output charset.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0776
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.copyInformationFrom#1729",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node copyInformationFrom(Node other) {\n    if (getProp(ORIGINALNAME_PROP) == null) {\n      putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    }\n\n    if (getProp(STATIC_SOURCE_FILE) == null) {\n      putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n      sourcePosition = other.sourcePosition;\n    } else if (getProp(SOURCENAME_PROP) == null) {\n      putProp(SOURCENAME_PROP, other.getProp(SOURCENAME_PROP));\n      sourcePosition = other.sourcePosition;\n    }\n\n    return this;\n  }\n",
        "begin_line": 1729,
        "end_line": 1743,
        "comment": " TODO(nicksantos): The semantics of this method are ill-defined. Delete it.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0773
        },
        "num_failing_tests": 7
    },
    {
        "name": "RenameVars.RenameVars#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.RenameVars(com.google.javascript.jscomp.AbstractCompiler, java.lang.String, boolean, boolean, boolean, boolean, com.google.javascript.jscomp.VariableMap, char[], java.util.Set<java.lang.String>)",
        "snippet": "  RenameVars(AbstractCompiler compiler, String prefix,\n      boolean localRenamingOnly, boolean preserveFunctionExpressionNames,\n      boolean generatePseudoNames, boolean shouldShadow,\n      VariableMap prevUsedRenameMap,\n      @Nullable char[] reservedCharacters,\n      @Nullable Set<String> reservedNames) {\n    this.compiler = compiler;\n    this.prefix = prefix == null ? \"\" : prefix;\n    this.localRenamingOnly = localRenamingOnly;\n    this.preserveFunctionExpressionNames = preserveFunctionExpressionNames;\n    if (generatePseudoNames) {\n      this.pseudoNameMap = Maps.newHashMap();\n    } else {\n      this.pseudoNameMap = null;\n    }\n    this.prevUsedRenameMap = prevUsedRenameMap;\n    this.reservedCharacters = reservedCharacters;\n    this.shouldShadow = shouldShadow;\n    if (reservedNames == null) {\n      this.reservedNames = Sets.newHashSet();\n    } else {\n      this.reservedNames = Sets.newHashSet(reservedNames);\n    }\n  }\n",
        "begin_line": 137,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameLabels.RenameLabels#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.RenameLabels(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  RenameLabels(AbstractCompiler compiler) {\n    this(compiler, new DefaultNameSupplier(), true);\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1618",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-4640f92b-6d49-4d45-b579-db4538716e72.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new UnreachableCodeElimination(compiler, true);\n    }\n",
        "begin_line": 1618,
        "end_line": 1621,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.constructRootRelativePathsMap#1501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.constructRootRelativePathsMap()",
        "snippet": "  private Map<String, String> constructRootRelativePathsMap() {\n    Map<String, String> rootRelativePathsMap = Maps.newLinkedHashMap();\n    for (String mapString : config.manifestMaps) {\n      int colonIndex = mapString.indexOf(':');\n      Preconditions.checkState(colonIndex > 0);\n      String execPath = mapString.substring(0, colonIndex);\n      String rootRelativePath = mapString.substring(colonIndex + 1);\n      Preconditions.checkState(rootRelativePath.indexOf(':') == -1);\n      rootRelativePathsMap.put(execPath, rootRelativePath);\n    }\n    return rootRelativePathsMap;\n  }\n",
        "begin_line": 1501,
        "end_line": 1512,
        "comment": "\n   * Construct and return the input root path map. The key is the exec path of\n   * each input file, and the value is the corresponding root relative path.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrintStreamErrorManager.printSummary#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.printSummary()",
        "snippet": "  @Override\n  public void printSummary() {\n    if (summaryDetailLevel >= 3 ||\n        (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n        (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n      if (getTypedPercent() > 0.0) {\n        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n            getErrorCount(), getWarningCount(), getTypedPercent());\n      } else {\n        stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n            getWarningCount());\n      }\n    }\n  }\n",
        "begin_line": 65,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.getLoopsRun#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.getLoopsRun()",
        "snippet": "  static List<List<String>> getLoopsRun() {\n    return loopsRun;\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n   * Get the phase ordering of loops during this run.\n   * Returns an empty list when the loops are not randomized.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.clearLoopsRun#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.clearLoopsRun()",
        "snippet": "  static void clearLoopsRun() {\n    loopsRun.clear();\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n   * Clears the phase ordering of loops during this run.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "ConvertToDottedProperties.ConvertToDottedProperties#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "class_name": "com.google.javascript.jscomp.ConvertToDottedProperties",
        "signature": "com.google.javascript.jscomp.ConvertToDottedProperties.ConvertToDottedProperties(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  ConvertToDottedProperties(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "ConvertToDottedProperties.process#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "class_name": "com.google.javascript.jscomp.ConvertToDottedProperties",
        "signature": "com.google.javascript.jscomp.ConvertToDottedProperties.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.traverse#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback>)",
        "snippet": "  static void traverse(AbstractCompiler compiler, Node root,\n      List<Callback> callbacks) {\n    if (callbacks.size() == 1) {\n      NodeTraversal.traverse(compiler, root, callbacks.get(0));\n    } else {\n      (new CombinedCompilerPass(compiler, callbacks)).process(null, root);\n    }\n  }\n",
        "begin_line": 73,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.recordStartRun#1523",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.RunTimeStats.recordStartRun()",
        "snippet": "    private void recordStartRun() {\n      lastStartTime = System.currentTimeMillis();\n      PhaseOptimizer.clearLoopsRun();\n    }\n",
        "begin_line": 1523,
        "end_line": 1526,
        "comment": "\n     * Record the start of a run.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.recordEndRun#1531",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.RunTimeStats.recordEndRun()",
        "snippet": "    private void recordEndRun() {\n      long endTime = System.currentTimeMillis();\n      long length = endTime - lastStartTime;\n      worstRunTime = Math.max(length, worstRunTime);\n      if (length < bestRunTime) {\n        loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();\n        bestRunTime = length;\n      }\n    }\n",
        "begin_line": 1531,
        "end_line": 1539,
        "comment": "\n     * Record the end of a run.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.enableTestMode#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.enableTestMode(com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>>, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>>, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSModule>>, com.google.common.base.Function<java.lang.Integer, java.lang.Boolean>)",
        "snippet": "  @VisibleForTesting\n  void enableTestMode(\n      Supplier<List<SourceFile>> externsSupplier,\n      Supplier<List<SourceFile>> inputsSupplier,\n      Supplier<List<JSModule>> modulesSupplier,\n      Function<Integer, Boolean> exitCodeReceiver) {\n    Preconditions.checkArgument(\n        inputsSupplier == null ^ modulesSupplier == null);\n    testMode = true;\n    this.externsSupplierForTesting = externsSupplier;\n    this.inputsSupplierForTesting = inputsSupplier;\n    this.modulesSupplierForTesting = modulesSupplier;\n    this.exitCodeReceiverForTesting = exitCodeReceiver;\n  }\n",
        "begin_line": 152,
        "end_line": 165,
        "comment": "\n   * Put the command line runner into test mode. In test mode,\n   * all outputs will be blackholed.\n   * @param externsSupplier A provider for externs.\n   * @param inputsSupplier A provider for source inputs.\n   * @param modulesSupplier A provider for modules. Only one of inputsSupplier\n   *     and modulesSupplier may be non-null.\n   * @param exitCodeReceiver A receiver for the status code that would\n   *     have been passed to System.exit in non-test mode.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.getCompiler#333",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getCompiler()",
        "snippet": "  final protected A getCompiler() {\n    return compiler;\n  }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.run#341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.run()",
        "snippet": "  final public void run() {\n    int result = 0;\n    int runs = 1;\n    if (config.computePhaseOrdering) {\n      runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;\n      PhaseOptimizer.randomizeLoops();\n    }\n    try {\n      for (int i = 0; i < runs && result == 0; i++) {\n        runTimeStats.recordStartRun();\n        result = doRun();\n        runTimeStats.recordEndRun();\n      }\n    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n      System.err.println(e.getMessage());\n      result = -1;\n    } catch (Throwable t) {\n      t.printStackTrace();\n      result = -2;\n    }\n\n    if (config.computePhaseOrdering) {\n      runTimeStats.outputBestPhaseOrdering();\n    }\n\n    try {\n      if (jsOutput instanceof Closeable) {\n        ((Closeable) jsOutput).close();\n      }\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n\n    if (testMode) {\n      exitCodeReceiverForTesting.apply(result);\n    } else {\n      System.exit(result);\n    }\n  }\n",
        "begin_line": 341,
        "end_line": 379,
        "comment": "\n   * Runs the Compiler and calls System.exit() with the exit status of the\n   * compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0768
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isDo#2232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isDo()",
        "snippet": "  public boolean isDo() {\n    return this.getType() == Token.DO;\n  }\n",
        "begin_line": 2232,
        "end_line": 2234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0767
        },
        "num_failing_tests": 5
    },
    {
        "name": "ShadowVariables.visit#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "signature": "com.google.javascript.jscomp.ShadowVariables.GatherReferenceInfo.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Skipping over non-name nodes and empty function names.\n      if (!NodeUtil.isReferenceName(n)) {\n        return;\n      }\n\n      // We focus on shadowing local variables as their name occurs much more\n      // than global names.\n      // TODO(user): Alternatively, we could experiment with using a local\n      // name to shadow a global variable.\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      Var var = t.getScope().getVar(n.getString());\n      if (var == null) {\n        // extern name or undefined name.\n        return;\n      }\n\n      if (var.getScope().isGlobal()) {\n        // We will not shadow a global variable name.\n        return;\n      }\n\n      // Using the definition of upward referencing, fill in the map.\n      if (var.getScope() != t.getScope()) {\n        for (Scope s = t.getScope();\n            s != var.getScope() && s.isLocal(); s = s.getParent()) {\n          scopeUpRefMap.put(s.getRootNode(), var.name);\n        }\n      }\n\n      if (var.getScope() == t.getScope()) {\n        scopeUpRefMap.put(t.getScopeRoot(), var.name);\n      }\n\n      // Find in the usage map that tracks a var and all of its usage.\n      varToNameUsage.put(var, n);\n    }\n",
        "begin_line": 129,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrintStreamErrorManager.PrintStreamErrorManager#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.PrintStreamErrorManager(com.google.javascript.jscomp.MessageFormatter, java.io.PrintStream)",
        "snippet": "  public PrintStreamErrorManager(MessageFormatter formatter,\n                                 PrintStream stream) {\n    this.formatter = formatter;\n    this.stream = stream;\n  }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "\n   * Creates an error manager.\n   * @param formatter the message formatter used to format the messages\n   * @param stream the stream on which the errors and warnings should be\n   *     printed. This class does not close the stream\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrintStreamErrorManager.setSummaryDetailLevel#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.setSummaryDetailLevel(int)",
        "snippet": "  public void setSummaryDetailLevel(int summaryDetailLevel) {\n    this.summaryDetailLevel = summaryDetailLevel;\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#2067",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-6a5197b9-03f1-4bfc-a433-46b616502604.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      VariableMap map = null;\n      if (options.inputVariableMapSerialized != null) {\n        try {\n          map = VariableMap.fromBytes(options.inputVariableMapSerialized);\n        } catch (ParseException e) {\n          return new ErrorPass(compiler,\n              JSError.make(INPUT_MAP_VAR_PARSE, e.getMessage()));\n        }\n      }\n\n      final VariableMap prevVariableMap = map;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          variableMap = runVariableRenaming(\n              compiler, prevVariableMap, externs, root);\n        }\n      };\n    }\n",
        "begin_line": 2067,
        "end_line": 2086,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.process#2081",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-0e15a80b-bb04-42bb-8279-ad61969c3ef8.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override public void process(Node externs, Node root) {\n          variableMap = runVariableRenaming(\n              compiler, prevVariableMap, externs, root);\n        }\n",
        "begin_line": 2081,
        "end_line": 2084,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.runVariableRenaming#2089",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.VariableMap, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private VariableMap runVariableRenaming(\n      AbstractCompiler compiler, VariableMap prevVariableMap,\n      Node externs, Node root) {\n    char[] reservedChars =\n        options.anonymousFunctionNaming.getReservedCharacters();\n    boolean preserveAnonymousFunctionNames =\n        options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n    RenameVars rn = new RenameVars(\n        compiler,\n        options.renamePrefix,\n        options.variableRenaming == VariableRenamingPolicy.LOCAL,\n        preserveAnonymousFunctionNames,\n        options.generatePseudoNames,\n        options.shadowVariables,\n        prevVariableMap,\n        reservedChars,\n        exportedNames);\n    rn.process(externs, root);\n    return rn.getVariableMap();\n  }\n",
        "begin_line": 2089,
        "end_line": 2108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setSummaryDetailLevel#1349",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setSummaryDetailLevel(int)",
        "snippet": "  public void setSummaryDetailLevel(int summaryDetailLevel) {\n    this.summaryDetailLevel = summaryDetailLevel;\n  }\n",
        "begin_line": 1349,
        "end_line": 1351,
        "comment": "\n   * Controls how detailed the compilation summary is. Values:\n   *  0 (never print summary), 1 (print summary only if there are\n   * errors or warnings), 2 (print summary if type checking is on,\n   * see --check_types), 3 (always print summary). The default level\n   * is 1\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initOptions#242",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = composedGuards;\n  }\n",
        "begin_line": 242,
        "end_line": 305,
        "comment": "\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 7
    },
    {
        "name": "CommandLineRunner.shouldRunCompiler#907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.shouldRunCompiler()",
        "snippet": "  public boolean shouldRunCompiler() {\n    return this.isConfigValid;\n  }\n",
        "begin_line": 907,
        "end_line": 909,
        "comment": "\n   * @return Whether the configuration is valid.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "CollapseVariableDeclarations.CollapseVariableDeclarations#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.CollapseVariableDeclarations(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  CollapseVariableDeclarations(AbstractCompiler compiler) {\n    Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());\n    this.compiler = compiler;\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.getInputCharset#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getInputCharset()",
        "snippet": "  private Charset getInputCharset() throws FlagUsageException {\n    if (!config.charset.isEmpty()) {\n      if (!Charset.isSupported(config.charset)) {\n        throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");\n      }\n      return Charset.forName(config.charset);\n    }\n    return Charsets.UTF_8;\n  }\n",
        "begin_line": 967,
        "end_line": 976,
        "comment": "\n   * Query the flag for the input charset, and return a Charset object\n   * representing the selection.\n   *\n   * @return Charset to use when reading inputs\n   * @throws FlagUsageException if flag is not a valid Charset name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.getLegacyOutputCharset#990",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getLegacyOutputCharset()",
        "snippet": "  private String getLegacyOutputCharset() throws FlagUsageException {\n    if (!config.charset.isEmpty()) {\n      if (!Charset.isSupported(config.charset)) {\n        throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");\n      }\n      return config.charset;\n    }\n    return \"US-ASCII\";\n  }\n",
        "begin_line": 990,
        "end_line": 999,
        "comment": "\n   * Query the flag for the output charset.\n   *\n   * Let the outputCharset be the same as the input charset... except if\n   * we're reading in UTF-8 by default.  By tradition, we've always\n   * output ASCII to avoid various hiccups with different browsers,\n   * proxies and firewalls.\n   *\n   * @return Name of the charset to use when writing outputs. Guaranteed to\n   *    be a supported charset.\n   * @throws FlagUsageException if flag is not a valid Charset name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.getOutputCharset2#1005",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getOutputCharset2()",
        "snippet": "  private Charset getOutputCharset2() throws FlagUsageException {\n    if (!config.charset.isEmpty()) {\n      if (!Charset.isSupported(config.charset)) {\n        throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");\n      }\n      return Charset.forName(config.charset);\n    }\n    return Charsets.UTF_8;\n  }\n",
        "begin_line": 1005,
        "end_line": 1014,
        "comment": "\n   * Query the flag for the output charset. Defaults to UTF-8.\n   * @throws FlagUsageException if flag is not a valid Charset name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0764
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setTweakProcessing#1379",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing)",
        "snippet": "  public void setTweakProcessing(TweakProcessing tweakProcessing) {\n    this.tweakProcessing = tweakProcessing;\n  }\n",
        "begin_line": 1379,
        "end_line": 1381,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.setLoggingLevel#2186",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setLoggingLevel(java.util.logging.Level)",
        "snippet": "  public static void setLoggingLevel(Level level) {\n    logger.setLevel(level);\n  }\n",
        "begin_line": 2186,
        "end_line": 2188,
        "comment": "\n   * Sets the logging level for the com.google.javascript.jscomp package.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.getJsFiles#426",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.getJsFiles()",
        "snippet": "    List<String> getJsFiles() {\n      List<String> allJsInputs = Lists.newArrayListWithCapacity(\n          js.size() + arguments.size());\n      allJsInputs.addAll(js);\n      allJsInputs.addAll(arguments);\n      return allJsInputs;\n    }\n",
        "begin_line": 426,
        "end_line": 432,
        "comment": "\n     * Users may specify JS inputs via the legacy {@code --js} option, as well\n     * as via additional arguments to the Closure Compiler. For example, it is\n     * convenient to leverage the additional arguments feature when using the\n     * Closure Compiler in combination with {@code find} and {@code xargs}:\n     * <pre>\n     * find MY_JS_SRC_DIR -name '*.js' \\\n     *     | xargs java -jar compiler.jar --manage_closure_dependencies\n     * </pre>\n     * The {@code find} command will produce a list of '*.js' source files in\n     * the {@code MY_JS_SRC_DIR} directory while {@code xargs} will convert them\n     * to a single, space-delimited set of arguments that are appended to the\n     * {@code java} command to run the Compiler.\n     * <p>\n     * Note that it is important to use the\n     * {@code --manage_closure_dependencies} option in this case because the\n     * order produced by {@code find} is unlikely to be sorted correctly with\n     * respect to {@code goog.provide()} and {@code goog.requires()}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.createOptions#742",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.createOptions()",
        "snippet": "  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.process_jquery_primitives) {\n      options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n      options.setCodingConvention(new ClosureCodingConvention());\n    }\n\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.use_types_for_optimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n\n    if (flags.generate_exports) {\n      options.setGenerateExports(flags.generate_exports);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.process_closure_primitives;\n\n    options.jqueryPass = flags.process_jquery_primitives &&\n        CompilationLevel.ADVANCED_OPTIMIZATIONS == level;\n\n    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n      // translations file, they might reasonably try to write their own\n      // implementation of goog.getMsg that makes the substitution at\n      // run-time.\n      //\n      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n      // so we might as well inline it.\n      options.messageBundle = new EmptyMessageBundle();\n    }\n\n    return options;\n  }\n",
        "begin_line": 742,
        "end_line": 797,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.createCompiler#799",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.createCompiler()",
        "snippet": "  @Override\n  protected Compiler createCompiler() {\n    return new Compiler(getErrorPrintStream());\n  }\n",
        "begin_line": 799,
        "end_line": 802,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.createExterns#804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.createExterns()",
        "snippet": "  @Override\n  protected List<SourceFile> createExterns() throws FlagUsageException,\n      IOException {\n    List<SourceFile> externs = super.createExterns();\n    if (flags.use_only_custom_externs || isInTestMode()) {\n      return externs;\n    } else {\n      List<SourceFile> defaultExterns = getDefaultExterns();\n      defaultExterns.addAll(externs);\n      return defaultExterns;\n    }\n  }\n",
        "begin_line": 804,
        "end_line": 815,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setPrintTree#1573",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPrintTree(boolean)",
        "snippet": "    CommandLineConfig setPrintTree(boolean printTree) {\n      this.printTree = printTree;\n      return this;\n    }\n",
        "begin_line": 1573,
        "end_line": 1576,
        "comment": " Prints out the parse tree and exits ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setPrintAst#1595",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPrintAst(boolean)",
        "snippet": "    CommandLineConfig setPrintAst(boolean printAst) {\n      this.printAst = printAst;\n      return this;\n    }\n",
        "begin_line": 1595,
        "end_line": 1598,
        "comment": "\n     * Prints a dot file describing the internal abstract syntax tree\n     * and exits\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setPrintPassGraph#1603",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPrintPassGraph(boolean)",
        "snippet": "    CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n      this.printPassGraph = printPassGraph;\n      return this;\n    }\n",
        "begin_line": 1603,
        "end_line": 1606,
        "comment": " Prints a dot file describing the passes that will get run and exits ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setJscompDevMode#1611",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode)",
        "snippet": "    CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode) {\n      this.jscompDevMode = jscompDevMode;\n      return this;\n    }\n",
        "begin_line": 1611,
        "end_line": 1614,
        "comment": " Turns on extra sanity checks ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setLoggingLevel#1623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setLoggingLevel(java.lang.String)",
        "snippet": "    CommandLineConfig setLoggingLevel(String loggingLevel) {\n      this.loggingLevel = loggingLevel;\n      return this;\n    }\n",
        "begin_line": 1623,
        "end_line": 1626,
        "comment": "\n     * The logging level (standard java.util.logging.Level\n     * values) for Compiler progress. Does not control errors or\n     * warnings for the JavaScript code under compilation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setExterns#1633",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setExterns(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setExterns(List<String> externs) {\n      this.externs.clear();\n      this.externs.addAll(externs);\n      return this;\n    }\n",
        "begin_line": 1633,
        "end_line": 1637,
        "comment": "\n     * The file containing JavaScript externs. You may specify multiple.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setJs#1644",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJs(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setJs(List<String> js) {\n      this.js.clear();\n      this.js.addAll(js);\n      return this;\n    }\n",
        "begin_line": 1644,
        "end_line": 1648,
        "comment": "\n     * The JavaScript filename. You may specify multiple.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setJsOutputFile#1655",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJsOutputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setJsOutputFile(String jsOutputFile) {\n      this.jsOutputFile = jsOutputFile;\n      return this;\n    }\n",
        "begin_line": 1655,
        "end_line": 1658,
        "comment": "\n     * Primary output filename. If not specified, output is written to stdout\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setModule#1670",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setModule(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setModule(List<String> module) {\n      this.module.clear();\n      this.module.addAll(module);\n      return this;\n    }\n",
        "begin_line": 1670,
        "end_line": 1674,
        "comment": "\n     * A JavaScript module specification. The format is\n     * <name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be\n     * unique. Each dep is the name of a module that this module\n     * depends on. Modules must be listed in dependency order, and JS\n     * source files must be listed in the corresponding order. Where\n     * --module flags occur in relation to --js flags is unimportant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setVariableMapInputFile#1682",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setVariableMapInputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setVariableMapInputFile(String variableMapInputFile) {\n      this.variableMapInputFile = variableMapInputFile;\n      return this;\n    }\n",
        "begin_line": 1682,
        "end_line": 1685,
        "comment": "\n     * File containing the serialized version of the variable renaming\n     * map produced by a previous compilation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setPropertyMapInputFile#1693",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPropertyMapInputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile) {\n      this.propertyMapInputFile = propertyMapInputFile;\n      return this;\n    }\n",
        "begin_line": 1693,
        "end_line": 1696,
        "comment": "\n     * File containing the serialized version of the property renaming\n     * map produced by a previous compilation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setVariableMapOutputFile#1704",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setVariableMapOutputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile) {\n      this.variableMapOutputFile = variableMapOutputFile;\n      return this;\n    }\n",
        "begin_line": 1704,
        "end_line": 1707,
        "comment": "\n     * File where the serialized version of the variable renaming map\n     * produced should be saved\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setCreateNameMapFiles#1718",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCreateNameMapFiles(boolean)",
        "snippet": "    CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n      this.createNameMapFiles = createNameMapFiles;\n      return this;\n    }\n",
        "begin_line": 1718,
        "end_line": 1721,
        "comment": "\n     * If true, variable renaming and property renaming map\n     * files will be produced as {binary name}_vars_map.out and\n     * {binary name}_props_map.out. Note that this flag cannot be used\n     * in conjunction with either variable_map_output_file or\n     * property_map_output_file\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setPropertyMapOutputFile#1729",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPropertyMapOutputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile) {\n      this.propertyMapOutputFile = propertyMapOutputFile;\n      return this;\n    }\n",
        "begin_line": 1729,
        "end_line": 1732,
        "comment": "\n     * File where the serialized version of the property renaming map\n     * produced should be saved\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setCodingConvention#1739",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    CommandLineConfig setCodingConvention(CodingConvention codingConvention) {\n      this.codingConvention = codingConvention;\n      return this;\n    }\n",
        "begin_line": 1739,
        "end_line": 1742,
        "comment": "\n     * Sets rules and conventions to enforce.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setSummaryDetailLevel#1753",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setSummaryDetailLevel(int)",
        "snippet": "    CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n      this.summaryDetailLevel = summaryDetailLevel;\n      return this;\n    }\n",
        "begin_line": 1753,
        "end_line": 1756,
        "comment": "\n     * Controls how detailed the compilation summary is. Values:\n     *  0 (never print summary), 1 (print summary only if there are\n     * errors or warnings), 2 (print summary if type checking is on,\n     * see --check_types), 3 (always print summary). The default level\n     * is 1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setOutputWrapper#1764",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setOutputWrapper(java.lang.String)",
        "snippet": "    CommandLineConfig setOutputWrapper(String outputWrapper) {\n      this.outputWrapper = outputWrapper;\n      return this;\n    }\n",
        "begin_line": 1764,
        "end_line": 1767,
        "comment": "\n     * Interpolate output into this string at the place denoted\n     *  by the marker token %output%. See --output_wrapper_marker\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setModuleWrapper#1775",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setModuleWrapper(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setModuleWrapper(List<String> moduleWrapper) {\n      this.moduleWrapper.clear();\n      this.moduleWrapper.addAll(moduleWrapper);\n      return this;\n    }\n",
        "begin_line": 1775,
        "end_line": 1779,
        "comment": "\n     * An output wrapper for a JavaScript module (optional). See the flag\n     * description for formatting requirements.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setModuleOutputPathPrefix#1788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setModuleOutputPathPrefix(java.lang.String)",
        "snippet": "    CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix) {\n      this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n      return this;\n    }\n",
        "begin_line": 1788,
        "end_line": 1791,
        "comment": "\n     * Prefix for filenames of compiled JS modules.\n     * <module-name>.js will be appended to this prefix. Directories\n     * will be created as needed. Use with --module\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setCreateSourceMap#1802",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCreateSourceMap(java.lang.String)",
        "snippet": "    CommandLineConfig setCreateSourceMap(String createSourceMap) {\n      this.createSourceMap = createSourceMap;\n      return this;\n    }\n",
        "begin_line": 1802,
        "end_line": 1805,
        "comment": "\n     * If specified, a source map file mapping the generated\n     * source files back to the original source file will be\n     * output to the specified path. The %outname% placeholder will\n     * expand to the name of the output file that the source map\n     * corresponds to.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setSourceMapFormat#1824",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format)",
        "snippet": "    CommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n      this.sourceMapFormat = format;\n      return this;\n    }\n",
        "begin_line": 1824,
        "end_line": 1827,
        "comment": "\n     * The detail supplied in the source map file, if generated.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setWarningGuardSpec#1834",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec)",
        "snippet": "    CommandLineConfig setWarningGuardSpec(WarningGuardSpec spec) {\n      this.warningGuards = spec;\n      return this;\n    }\n",
        "begin_line": 1834,
        "end_line": 1837,
        "comment": "\n     * Add warning guards.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setDefine#1848",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setDefine(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setDefine(List<String> define) {\n      this.define.clear();\n      this.define.addAll(define);\n      return this;\n    }\n",
        "begin_line": 1848,
        "end_line": 1852,
        "comment": "\n     * Override the value of a variable annotated @define.\n     * The format is <name>[=<val>], where <name> is the name of a @define\n     * variable and <val> is a boolean, number, or a single-quoted string\n     * that contains no single quotes. If [=<val>] is omitted,\n     * the variable is marked true\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setCharset#1883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCharset(java.lang.String)",
        "snippet": "    CommandLineConfig setCharset(String charset) {\n      this.charset = charset;\n      return this;\n    }\n",
        "begin_line": 1883,
        "end_line": 1886,
        "comment": "\n     * Input charset for all files.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setManageClosureDependencies#1894",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setManageClosureDependencies(boolean)",
        "snippet": "    CommandLineConfig setManageClosureDependencies(boolean newVal) {\n      this.manageClosureDependencies = newVal;\n      return this;\n    }\n",
        "begin_line": 1894,
        "end_line": 1897,
        "comment": "\n     * Sets whether to sort files by their goog.provide/require deps,\n     * and prune inputs that are not required.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setOnlyClosureDependencies#1906",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setOnlyClosureDependencies(boolean)",
        "snippet": "    CommandLineConfig setOnlyClosureDependencies(boolean newVal) {\n      this.onlyClosureDependencies = newVal;\n      return this;\n    }\n",
        "begin_line": 1906,
        "end_line": 1909,
        "comment": "\n     * Sets whether to sort files by their goog.provide/require deps,\n     * and prune inputs that are not required, and drop all non-closure\n     * files.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setClosureEntryPoints#1917",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setClosureEntryPoints(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setClosureEntryPoints(List<String> entryPoints) {\n      Preconditions.checkNotNull(entryPoints);\n      this.closureEntryPoints = entryPoints;\n      return this;\n    }\n",
        "begin_line": 1917,
        "end_line": 1921,
        "comment": "\n     * Set closure entry points, which makes the compiler only include\n     * those files and sort them in dependency order.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setOutputManifest#1929",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setOutputManifest(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setOutputManifest(List<String> outputManifests) {\n      this.outputManifests = Lists.newArrayList();\n      for (String manifestName : outputManifests) {\n        if (!manifestName.isEmpty()) {\n          this.outputManifests.add(manifestName);\n        }\n      }\n      this.outputManifests = ImmutableList.copyOf(this.outputManifests);\n      return this;\n    }\n",
        "begin_line": 1929,
        "end_line": 1938,
        "comment": "\n     * Sets whether to print output manifest files.\n     * Filter out empty file names.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setAcceptConstKeyword#1955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setAcceptConstKeyword(boolean)",
        "snippet": "    CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n      this.acceptConstKeyword = acceptConstKeyword;\n      return this;\n    }\n",
        "begin_line": 1955,
        "end_line": 1958,
        "comment": "\n     * Sets whether to accept usage of 'const' keyword.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setLanguageIn#1966",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setLanguageIn(java.lang.String)",
        "snippet": "    CommandLineConfig setLanguageIn(String languageIn) {\n      this.languageIn = languageIn;\n      return this;\n    }\n",
        "begin_line": 1966,
        "end_line": 1969,
        "comment": "\n     * Sets whether to accept input files as ECMAScript5 compliant.\n     * Otherwise, input files are treated as ECMAScript3 compliant.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setTransformAMDToCJSModules#1997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setTransformAMDToCJSModules(boolean)",
        "snippet": "    CommandLineConfig setTransformAMDToCJSModules(\n        boolean transformAMDToCJSModules) {\n      this.transformAMDToCJSModules = transformAMDToCJSModules;\n      return this;\n    }\n",
        "begin_line": 1997,
        "end_line": 2001,
        "comment": "\n     * Set whether to transform AMD to CommonJS modules.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setProcessCommonJSModules#2008",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setProcessCommonJSModules(boolean)",
        "snippet": "    CommandLineConfig setProcessCommonJSModules(\n        boolean processCommonJSModules) {\n      this.processCommonJSModules = processCommonJSModules;\n      return this;\n    }\n",
        "begin_line": 2008,
        "end_line": 2012,
        "comment": "\n     * Sets whether to process CommonJS modules.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.setCommonJSModulePathPrefix#2021",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCommonJSModulePathPrefix(java.lang.String)",
        "snippet": "    CommandLineConfig setCommonJSModulePathPrefix(\n        String commonJSModulePathPrefix) {\n      this.commonJSModulePathPrefix = commonJSModulePathPrefix;\n      return this;\n    }\n",
        "begin_line": 2021,
        "end_line": 2025,
        "comment": "\n     * Sets the CommonJS module path prefix.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.isInTestMode#170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.isInTestMode()",
        "snippet": "  protected boolean isInTestMode() {\n    return testMode;\n  }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "\n   * Returns whether we're in test mode.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.getCommandLineConfig#177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getCommandLineConfig()",
        "snippet": "  protected CommandLineConfig getCommandLineConfig() {\n    return config;\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n   * Get the command line config, so that it can be initialized.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.getDiagnosticGroups#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    if (compiler == null) {\n      return new DiagnosticGroups();\n    }\n    return compiler.getDiagnosticGroups();\n  }\n",
        "begin_line": 197,
        "end_line": 202,
        "comment": "\n   * The warning classes that are available from the command-line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.getErrorPrintStream#385",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getErrorPrintStream()",
        "snippet": "  protected PrintStream getErrorPrintStream() {\n    return err;\n  }\n",
        "begin_line": 385,
        "end_line": 387,
        "comment": "\n   * Returns the PrintStream for writing errors associated with this\n   * AbstractCommandLineRunner.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.createExterns#1016",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.createExterns()",
        "snippet": "  protected List<SourceFile> createExterns() throws FlagUsageException,\n      IOException {\n    return isInTestMode() ? externsSupplierForTesting.get() :\n        createExternInputs(config.externs);\n  }\n",
        "begin_line": 1016,
        "end_line": 1020,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.createDefineOrTweakReplacements#1289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(java.util.List<java.lang.String>, com.google.javascript.jscomp.CompilerOptions, boolean)",
        "snippet": "  @VisibleForTesting\n  static void createDefineOrTweakReplacements(List<String> definitions,\n      CompilerOptions options, boolean tweaks) {\n    // Parse the definitions\n    for (String override : definitions) {\n      String[] assignment = override.split(\"=\", 2);\n      String defName = assignment[0];\n\n      if (defName.length() > 0) {\n        String defValue = assignment.length == 1 ? \"true\" : assignment[1];\n\n        boolean isTrue = defValue.equals(\"true\");\n        boolean isFalse = defValue.equals(\"false\");\n        if (isTrue || isFalse) {\n          if (tweaks) {\n            options.setTweakToBooleanLiteral(defName, isTrue);\n          } else {\n            options.setDefineToBooleanLiteral(defName, isTrue);\n          }\n          continue;\n        } else if (defValue.length() > 1\n            && ((defValue.charAt(0) == '\\'' &&\n                defValue.charAt(defValue.length() - 1) == '\\'')\n                || (defValue.charAt(0) == '\\\"' &&\n                    defValue.charAt(defValue.length() - 1) == '\\\"'))) {\n          // If the value starts and ends with a single quote,\n          // we assume that it's a string.\n          String maybeStringVal =\n              defValue.substring(1, defValue.length() - 1);\n          if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n            if (tweaks) {\n              options.setTweakToStringLiteral(defName, maybeStringVal);\n            } else {\n              options.setDefineToStringLiteral(defName, maybeStringVal);\n            }\n            continue;\n          }\n        } else {\n          try {\n            double value = Double.parseDouble(defValue);\n            if (tweaks) {\n              options.setTweakToDoubleLiteral(defName, value);\n            } else {\n              options.setDefineToDoubleLiteral(defName, value);\n            }\n            continue;\n          } catch (NumberFormatException e) {\n            // do nothing, it will be caught at the end\n          }\n        }\n      }\n\n      if (tweaks) {\n        throw new RuntimeException(\n            \"--tweak flag syntax invalid: \" + override);\n      }\n      throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);\n    }\n  }\n",
        "begin_line": 1289,
        "end_line": 1348,
        "comment": "\n   * Create a map of constant names to constant values from a textual\n   * description of the map.\n   *\n   * @param definitions A list of overriding definitions for defines in\n   *     the form <name>[=<val>], where <val> is a number, boolean, or\n   *     single-quoted string without single quotes.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1747",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-cc23fcbf-2d9f-426f-8bf5-318aeb17a61c.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      boolean removeOnlyLocals = options.removeUnusedLocalVars\n          && !options.removeUnusedVars;\n      boolean preserveAnonymousFunctionNames =\n          options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n      return new RemoveUnusedVars(\n          compiler,\n          !removeOnlyLocals,\n          preserveAnonymousFunctionNames,\n          false);\n    }\n",
        "begin_line": 1747,
        "end_line": 1758,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.WarningGuardWarningOptionHandler#491",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.String>)",
        "snippet": "      public WarningGuardWarningOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super String> setter) {\n        super(parser, option,\n            new WarningGuardSetter(setter, CheckLevel.WARNING));\n      }\n",
        "begin_line": 491,
        "end_line": 496,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.WarningGuardSetter#512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter.WarningGuardSetter(org.kohsuke.args4j.spi.Setter<? super java.lang.String>, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "      private WarningGuardSetter(\n          Setter<? super String> proxy, CheckLevel level) {\n        this.proxy = proxy;\n        this.level = level;\n      }\n",
        "begin_line": 512,
        "end_line": 516,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.WarningGuardOffOptionHandler#501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.String>)",
        "snippet": "      public WarningGuardOffOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super String> setter) {\n        super(parser, option, new WarningGuardSetter(setter, CheckLevel.OFF));\n      }\n",
        "begin_line": 501,
        "end_line": 505,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.WarningGuardErrorOptionHandler#482",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.String>)",
        "snippet": "      public WarningGuardErrorOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super String> setter) {\n        super(parser, option, new WarningGuardSetter(setter, CheckLevel.ERROR));\n      }\n",
        "begin_line": 482,
        "end_line": 486,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.BooleanOptionHandler#442",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean>)",
        "snippet": "      public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter) {\n        super(parser, option, setter);\n      }\n",
        "begin_line": 442,
        "end_line": 446,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "CommandLineRunner.CommandLineRunner#572",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.CommandLineRunner(java.lang.String[], java.io.PrintStream, java.io.PrintStream)",
        "snippet": "  protected CommandLineRunner(String[] args, PrintStream out, PrintStream err) {\n    super(out, err);\n    initConfigFromFlags(args, err);\n  }\n",
        "begin_line": 572,
        "end_line": 575,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.clear#2051",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.clear()",
        "snippet": "    protected void clear() {\n      entries.clear();\n    }\n",
        "begin_line": 2051,
        "end_line": 2053,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCommandLineRunner.AbstractCommandLineRunner#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.AbstractCommandLineRunner(java.io.PrintStream, java.io.PrintStream)",
        "snippet": "  AbstractCommandLineRunner(PrintStream out, PrintStream err) {\n    this.config = new CommandLineConfig();\n    this.jsOutput = Preconditions.checkNotNull(out);\n    this.err = Preconditions.checkNotNull(err);\n  }\n",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeCollectPropertyAssignments.optimizeSubtree#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java",
        "class_name": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
        "signature": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  Node optimizeSubtree(Node subtree) {\n    if (!subtree.isScript() && !subtree.isBlock()) {\n      return subtree;\n    }\n\n    boolean codeChanged = false;\n\n    // Look for variable declarations or simple assignments\n    // and start processing there.\n    for (Node child = subtree.getFirstChild();\n         child != null; child = child.getNext()) {\n      if (!child.isVar() && !NodeUtil.isExprAssign(child)) {\n        continue;\n      }\n      if (!isPropertyAssignmentToName(child.getNext())) {\n        // Quick check to see if there's anything to collapse.\n        continue;\n      }\n\n      Preconditions.checkState(child.hasOneChild());\n      Node name = getName(child);\n      if (!name.isName()) {\n        // The assignment target is not a simple name.\n        continue;\n      }\n      Node value = getValue(child);\n      if (value == null || !isInterestingValue(value)) {\n        // No initializer or not an Object or Array literal.\n        continue;\n      }\n\n      Node propertyCandidate;\n      while ((propertyCandidate = child.getNext()) != null) {\n        // This does not infinitely loop because collectProperty always\n        // removes propertyCandidate from its parent when it returns true.\n        if (!collectProperty(propertyCandidate, name.getString(), value)) {\n          break;\n        }\n        codeChanged = true;\n      }\n    }\n\n    if (codeChanged) {\n      reportCodeChange();\n    }\n    return subtree;\n  }\n",
        "begin_line": 35,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0756
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isValidSimpleName#2416",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isValidSimpleName(java.lang.String)",
        "snippet": "  public static boolean isValidSimpleName(String name) {\n    return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, Unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);\n  }\n",
        "begin_line": 2416,
        "end_line": 2426,
        "comment": "\n   * Determines whether the given name is a valid variable name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0752
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isValidPropertyName#2450",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isValidPropertyName(java.lang.String)",
        "snippet": "  static boolean isValidPropertyName(String name) {\n    return isValidSimpleName(name);\n  }\n",
        "begin_line": 2450,
        "end_line": 2452,
        "comment": "\n   * Determines whether the given name can appear on the right side of\n   * the dot operator. Many properties (like reserved words) cannot.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0752
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckSideEffects.process#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    // Code with hidden side-effect code is common, for example\n    // accessing \"el.offsetWidth\" forces a reflow in browsers, to allow this\n    // will still allowing local dead code removal in general,\n    // protect the \"side-effect free\" code in the source.\n    //\n    if (protectSideEffectFreeCode) {\n      protectSideEffects();\n    }\n  }\n",
        "begin_line": 64,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0748
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckSideEffects.protectSideEffects#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.protectSideEffects()",
        "snippet": "  private void protectSideEffects() {\n    if (!problemNodes.isEmpty()) {\n      addExtern();\n      for (Node n : problemNodes) {\n        Node name = IR.name(PROTECTOR_FN).srcref(n);\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        Node replacement = IR.call(name).srcref(n);\n        replacement.putBooleanProp(Node.FREE_CALL, true);\n        n.getParent().replaceChild(n, replacement);\n        replacement.addChildToBack(n);\n      }\n      compiler.reportCodeChange();\n    }\n  }\n",
        "begin_line": 173,
        "end_line": 186,
        "comment": "\n   * Protect side-effect free nodes by making them parameters\n   * to a extern function call.  This call will be removed\n   * after all the optimizations passes have run.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0748
        },
        "num_failing_tests": 2
    },
    {
        "name": "AnonymousFunctionNamingPolicy.getReservedCharacters#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.getReservedCharacters()",
        "snippet": "  public char[] getReservedCharacters() {\n    // TODO(user) - for MAPPED, only the first character is reserved which\n    // can be used to further optimize\n    return reservedCharacters;\n  }\n",
        "begin_line": 56,
        "end_line": 60,
        "comment": "\n   * Gets characters that are reserved for use in anonymous function names and\n   * can't be used in variable or property names.\n   * @return reserved characters or null if no characters are reserved\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0748
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.srcref#1772",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.srcref(com.google.javascript.rhino.Node)",
        "snippet": "  public Node srcref(Node other) {\n    return useSourceInfoFrom(other);\n  }\n",
        "begin_line": 1772,
        "end_line": 1774,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 6
    },
    {
        "name": "StatementFusion.canFuseIntoOneStatement#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/StatementFusion.java",
        "class_name": "com.google.javascript.jscomp.StatementFusion",
        "signature": "com.google.javascript.jscomp.StatementFusion.canFuseIntoOneStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean canFuseIntoOneStatement(Node block) {\n    // Fold only statement block. NOT scripts block.\n    if (!block.isBlock()) {\n      return false;\n    }\n\n    // Nothing to do here.\n    if (!block.hasChildren() || block.hasOneChild()) {\n      return false;\n    }\n\n    Node last = block.getLastChild();\n\n    for (Node c = block.getFirstChild(); c != null; c = c.getNext()) {\n      if (!c.isExprResult() && c != last) {\n        return false;\n      }\n    }\n\n    // TODO(user): Support more control statement for fusion.\n    // FOR\n    switch(last.getType()) {\n      case Token.IF:\n      case Token.THROW:\n      case Token.SWITCH:\n      case Token.EXPR_RESULT:\n        return true;\n      case Token.RETURN:\n        // We don't want to add a new return value.\n        return last.hasChildren();\n      case Token.FOR:\n        return NodeUtil.isForIn(last) &&\n            // Avoid cases where we have for(var x = foo() in a) { ....\n            !NodeUtil.mayHaveSideEffects(last.getFirstChild());\n    }\n\n    return false;\n  }\n",
        "begin_line": 46,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0741
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.useSourceInfoFrom#1765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.useSourceInfoFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node useSourceInfoFrom(Node other) {\n    putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n    sourcePosition = other.sourcePosition;\n    return this;\n  }\n",
        "begin_line": 1765,
        "end_line": 1770,
        "comment": "\n   * Overwrite all the source information in this node with\n   * that of {@code other}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0736
        },
        "num_failing_tests": 6
    },
    {
        "name": "Denormalize.maybeCollapseIntoForStatements#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.maybeCollapseIntoForStatements(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void maybeCollapseIntoForStatements(Node n, Node parent) {\n    // Only SCRIPT, BLOCK, and LABELs can have FORs that can be collapsed into.\n    // LABELs are not supported here.\n    if (parent == null || !NodeUtil.isStatementBlock(parent)) {\n      return;\n    }\n\n    // Is the current node something that can be in a for loop initializer?\n    if (!n.isExprResult() && !n.isVar()) {\n      return;\n    }\n\n    // Is the next statement a valid FOR?\n    Node nextSibling = n.getNext();\n    if (nextSibling == null) {\n      return;\n    } else if (NodeUtil.isForIn(nextSibling)) {\n      Node forNode = nextSibling;\n      Node forVar = forNode.getFirstChild();\n      if (forVar.isName()\n          && n.isVar() && n.hasOneChild()) {\n        Node name = n.getFirstChild();\n        if (!name.hasChildren()\n            && forVar.getString().equals(name.getString())) {\n          // OK, the names match, and the var declaration does not have an\n          // initializer. Move it into the loop.\n          parent.removeChild(n);\n          forNode.replaceChild(forVar, n);\n          compiler.reportCodeChange();\n        }\n      }\n    } else if (nextSibling.isFor()\n        && nextSibling.getFirstChild().isEmpty()) {\n\n      // Does the current node contain an in operator?  If so, embedding\n      // the expression in a for loop can cause some JavaScript parsers (such\n      // as the PlayStation 3's browser based on Access's NetFront\n      // browser) to fail to parse the code.\n      // See bug 1778863 for details.\n      if (NodeUtil.containsType(n, Token.IN)) {\n        return;\n      }\n\n      // Move the current node into the FOR loop initializer.\n      Node forNode = nextSibling;\n      Node oldInitializer = forNode.getFirstChild();\n      parent.removeChild(n);\n\n      Node newInitializer;\n      if (n.isVar()) {\n        newInitializer = n;\n      } else {\n        // Extract the expression from EXPR_RESULT node.\n        Preconditions.checkState(n.hasOneChild());\n        newInitializer = n.getFirstChild();\n        n.removeChild(newInitializer);\n      }\n\n      forNode.replaceChild(oldInitializer, newInitializer);\n\n      compiler.reportCodeChange();\n    }\n  }\n",
        "begin_line": 65,
        "end_line": 127,
        "comment": "\n   * Collapse VARs and EXPR_RESULT node into FOR loop initializers where\n   * possible.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0731
        },
        "num_failing_tests": 2
    },
    {
        "name": "ShadowVariables.enterScope#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "signature": "com.google.javascript.jscomp.ShadowVariables.DoShadowVariables.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      Scope s = t.getScope();\n      if (!s.isLocal()) {\n        return;\n      }\n\n      // Since we don't shadow global, there is nothing to be done in the\n      // first immediate local scope as well.\n      if (s.getParent().isGlobal()) {\n        return;\n      }\n\n      for (Iterator<Var> vars = s.getVars(); vars.hasNext();) {\n        Var var = vars.next();\n\n        // Don't shadow variables that is bleed-out to fix an IE bug.\n        if (var.isBleedingFunction()) {\n          continue;\n        }\n\n        // Don't shadow an exported local.\n        if (compiler.getCodingConvention().isExported(var.name, s.isLocal())) {\n          continue;\n        }\n\n        // Try to look for the best shadow for the current candidate.\n        Assignment bestShadow = findBestShadow(s, var);\n        if (bestShadow == null) {\n          continue;\n        }\n\n        // The name assignment being shadowed.\n        Assignment localAssignment = assignments.get(var.getName());\n\n        // Only shadow if this increases the number of occurrences of the\n        // shadowed variable.\n        if (bestShadow.count < localAssignment.count) {\n          continue; // Hope the next local variable would have a smaller count.\n        }\n\n        doShadow(localAssignment, bestShadow, var);\n\n        if (oldPseudoNameMap != null) {\n          String targetPseudoName =\n            oldPseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);\n          for (Node use : varToNameUsage.get(var)) {\n            deltaPseudoNameMap.put(use, targetPseudoName);\n          }\n        }\n      }\n    }\n",
        "begin_line": 175,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "ShadowVariables.exitScope#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "signature": "com.google.javascript.jscomp.ShadowVariables.DoShadowVariables.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {}\n",
        "begin_line": 228,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "ShadowVariables.visit#231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "signature": "com.google.javascript.jscomp.ShadowVariables.DoShadowVariables.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {}\n",
        "begin_line": 231,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "ShadowVariables.ShadowVariables#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "signature": "com.google.javascript.jscomp.ShadowVariables.ShadowVariables(com.google.javascript.jscomp.AbstractCompiler, java.util.SortedMap<java.lang.String, com.google.javascript.jscomp.RenameVars.Assignment>, java.util.SortedSet<com.google.javascript.jscomp.RenameVars.Assignment>, java.util.Map<com.google.javascript.rhino.Node, java.lang.String>)",
        "snippet": "  ShadowVariables(\n      AbstractCompiler compiler,\n      SortedMap<String, Assignment> assignments,\n      SortedSet<Assignment> varsByFrequency,\n      Map<Node, String> pseudoNameMap) {\n    this.compiler = compiler;\n    this.assignments = assignments;\n    this.varsByFrequency = varsByFrequency;\n    this.oldPseudoNameMap = pseudoNameMap;\n    this.deltaPseudoNameMap = Maps.newLinkedHashMap();\n  }\n",
        "begin_line": 97,
        "end_line": 107,
        "comment": "\n   * @param assignments Map of old variable names to its assignment Objects.\n   * @param varsByFrequency Sorted variable assignments by Frequency.\n   * @param pseudoNameMap The current pseudo name map so this pass can update\n   *     it accordingly.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "ShadowVariables.process#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "signature": "com.google.javascript.jscomp.ShadowVariables.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n\n    // The algorithm is divided into two stages:\n    //\n    // 1. Information gathering (variable usage, upward referencing)\n    //\n    // 2. Tries to find shadows for each variables, updates the\n    //    variable usage frequency map.\n    //\n    // 3. Updates the pseudo naming map if needed.\n    NodeTraversal.traverse(compiler, root, new GatherReferenceInfo());\n    NodeTraversal.traverse(compiler, root, new DoShadowVariables());\n\n    if (oldPseudoNameMap != null) {\n      oldPseudoNameMap.putAll(deltaPseudoNameMap);\n    }\n  }\n",
        "begin_line": 109,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameVars.process#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    assignmentLog = new StringBuilder();\n\n    // Do variable reference counting.\n    NodeTraversal.traverse(compiler, externs, new ProcessVars(true));\n    NodeTraversal.traverse(compiler, root, new ProcessVars(false));\n\n    // Make sure that new names don't overlap with extern names.\n    reservedNames.addAll(externNames);\n\n    // Rename vars, sorted by frequency of occurrence to minimize code size.\n    SortedSet<Assignment> varsByFrequency =\n        new TreeSet<Assignment>(FREQUENCY_COMPARATOR);\n    varsByFrequency.addAll(assignments.values());\n\n    if (shouldShadow) {\n      new ShadowVariables(\n          compiler, assignments, varsByFrequency, pseudoNameMap).process(\n              externs, root);\n    }\n\n    // First try to reuse names from an earlier compilation.\n    if (prevUsedRenameMap != null) {\n      reusePreviouslyUsedVariableMap();\n    }\n\n    // Assign names, sorted by descending frequency to minimize code size.\n    assignNames(varsByFrequency);\n\n    boolean changed = false;\n\n    // Rename the globals!\n    for (Node n : globalNameNodes) {\n      String newName = getNewGlobalName(n);\n      // Note: if newName is null, then oldName is an extern.\n      if (newName != null) {\n        n.setString(newName);\n        changed = true;\n      }\n    }\n\n    // Rename the locals!\n    int count = 0;\n    for (Node n : localNameNodes) {\n      String newName = getNewLocalName(n);\n      if (newName != null) {\n        n.setString(newName);\n        changed = true;\n      }\n      count++;\n    }\n\n    if (changed) {\n      compiler.reportCodeChange();\n    }\n\n    // Lastly, write the name assignments to the debug log.\n    compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);\n    assignmentLog = null;\n  }\n",
        "begin_line": 324,
        "end_line": 384,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1607",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-b427acbc-706f-4e34-9621-168a2334abb8.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MinimizeExitPoints(compiler);\n    }\n",
        "begin_line": 1607,
        "end_line": 1610,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1046",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-be248f4f-f865-468a-b6b1-42ffaf8bb121.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      final boolean late = true;\n      return new PeepholeOptimizationsPass(compiler,\n            new StatementFusion(),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeSubstituteAlternateSyntax(late),\n            new PeepholeReplaceKnownMethods(late),\n            new PeepholeFoldConstants(late),\n            new ReorderConstantExpression());\n    }\n",
        "begin_line": 1046,
        "end_line": 1056,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1031",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-634157f4-93bd-41bc-bd01-f8d585a2e570.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      final boolean late = false;\n      return new PeepholeOptimizationsPass(compiler,\n            new PeepholeSubstituteAlternateSyntax(late),\n            new PeepholeReplaceKnownMethods(late),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeFoldConstants(late),\n            new PeepholeCollectPropertyAssignments());\n    }\n",
        "begin_line": 1031,
        "end_line": 1040,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseParamTypeExpressionAnnotation#1569",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseParamTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n    Preconditions.checkArgument(token == JsDocToken.LC);\n\n    skipEOLs();\n\n    boolean restArg = false;\n    token = next();\n    if (token == JsDocToken.ELLIPSIS) {\n      token = next();\n      if (token == JsDocToken.RC) {\n        // EMPTY represents the UNKNOWN type in the Type AST.\n        return wrapNode(Token.ELLIPSIS, IR.empty());\n      }\n      restArg = true;\n    }\n\n    Node typeNode = parseTopLevelTypeExpression(token);\n    if (typeNode != null) {\n      skipEOLs();\n      if (restArg) {\n        typeNode = wrapNode(Token.ELLIPSIS, typeNode);\n      } else if (match(JsDocToken.EQUALS)) {\n        next();\n        skipEOLs();\n        typeNode = wrapNode(Token.EQUALS, typeNode);\n      }\n\n      if (!match(JsDocToken.RC)) {\n        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n      } else {\n        next();\n      }\n    }\n\n    return typeNode;\n  }\n",
        "begin_line": 1569,
        "end_line": 1604,
        "comment": "\n   * ParamTypeExpressionAnnotation :=\n   *     '{' OptionalParameterType '}' |\n   *     '{' TopLevelTypeExpression '}' |\n   *     '{' '...' TopLevelTypeExpression '}'\n   *\n   * OptionalParameterType :=\n   *     TopLevelTypeExpression '='\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0724
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReorderConstantExpression.optimizeSubtree#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReorderConstantExpression.java",
        "class_name": "com.google.javascript.jscomp.ReorderConstantExpression",
        "signature": "com.google.javascript.jscomp.ReorderConstantExpression.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  Node optimizeSubtree(Node subtree) {\n    // if the operator is symmetric\n    if (NodeUtil.isSymmetricOperation(subtree)\n        || NodeUtil.isRelationalOperation(subtree)) {\n      // right value is immutable and left is not\n      if (NodeUtil.isImmutableValue(subtree.getLastChild())\n          && !NodeUtil.isImmutableValue(subtree.getFirstChild())) {\n\n        // if relational, get the inverse operator.\n        if (NodeUtil.isRelationalOperation(subtree)){\n          int inverseOperator = NodeUtil.getInverseOperator(subtree.getType());\n          subtree.setType(inverseOperator);\n        }\n\n        // swap them\n        Node firstNode = subtree.getFirstChild().detachFromParent();\n        Node lastNode = subtree.getLastChild().detachFromParent();\n\n        subtree.addChildrenToFront(lastNode);\n        subtree.addChildrenToBack(firstNode);\n        reportCodeChange();\n      }\n    }\n    return subtree;\n  }\n",
        "begin_line": 32,
        "end_line": 57,
        "comment": " to follow our naming convention.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0721
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isSymmetricOperation#518",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean isSymmetricOperation(Node n) {\n    switch (n.getType()) {\n      case Token.EQ: // equal\n      case Token.NE: // not equal\n      case Token.SHEQ: // exactly equal\n      case Token.SHNE: // exactly not equal\n      case Token.MUL: // multiply, unlike add it only works on numbers\n                      // or results NaN if any of the operators is not a number\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 518,
        "end_line": 529,
        "comment": "\n   * Returns true if the operator on this node is symmetric\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0721
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isRelationalOperation#535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isRelationalOperation(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean isRelationalOperation(Node n) {\n    switch (n.getType()) {\n      case Token.GT: // equal\n      case Token.GE: // not equal\n      case Token.LT: // exactly equal\n      case Token.LE: // exactly not equal\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 535,
        "end_line": 544,
        "comment": "\n   * Returns true if the operator on this node is relational.\n   * the returned set does not include the equalities.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0721
        },
        "num_failing_tests": 2
    },
    {
        "name": "OptimizeArgumentsArray.OptimizeArgumentsArray#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.OptimizeArgumentsArray(com.google.javascript.jscomp.AbstractCompiler, java.lang.String)",
        "snippet": "  OptimizeArgumentsArray(AbstractCompiler compiler, String paramPrefix) {\n    this.compiler = Preconditions.checkNotNull(compiler);\n    this.paramPredix = Preconditions.checkNotNull(paramPrefix);\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\n   * @param paramPrefix the prefix to use for all parameter names that this\n   *     pass introduces\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "OptimizeArgumentsArray.process#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, Preconditions.checkNotNull(root), this);\n  }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "OptimizeArgumentsArray.enterScope#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal traversal) {\n    Preconditions.checkNotNull(traversal);\n\n    // This optimization is valid only within a function so we are going to\n    // skip over the initial entry to the global scope.\n    Node function = traversal.getScopeRoot();\n    if (!function.isFunction()) {\n      return;\n    }\n\n    // Introduces a new access list and stores the access list of the outer\n    // scope in the stack if necessary.\n    if (currentArgumentsAccess != null) {\n      argumentsAccessStack.push(currentArgumentsAccess);\n    }\n    currentArgumentsAccess = Lists.newLinkedList();\n  }\n",
        "begin_line": 93,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "OptimizeArgumentsArray.exitScope#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal traversal) {\n    Preconditions.checkNotNull(traversal);\n\n    // This is the case when we are exiting the global scope where we had never\n    // collected argument access list. Since we do not perform this optimization\n    // for the global scope, we will skip this exit point.\n    if (currentArgumentsAccess == null) {\n      return;\n    }\n\n    // Attempt to replace the argument access and if the AST has been change,\n    // report back to the compiler.\n    if (tryReplaceArguments(traversal.getScope())) {\n      traversal.getCompiler().reportCodeChange();\n    }\n\n    // After the attempt to replace the arguments. The currentArgumentsAccess\n    // is stale and as we exit the Scope, no longer holds all the access to the\n    // current scope anymore. We'll pop the access list from the outer scope\n    // and set it as currentArgumentsAcess if the outer scope is not the global\n    // scope.\n    if (!argumentsAccessStack.isEmpty()) {\n      currentArgumentsAccess = argumentsAccessStack.pop();\n    } else {\n      currentArgumentsAccess = null;\n    }\n  }\n",
        "begin_line": 112,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "OptimizeArgumentsArray.shouldTraverse#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node node, Node parent) {\n    // We will continuously recurse down the AST regardless of the node types.\n    return true;\n  }\n",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "OptimizeArgumentsArray.visit#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal traversal, Node node, Node parent) {\n    Preconditions.checkNotNull(traversal);\n    Preconditions.checkNotNull(node);\n\n\n    // Searches for all the references to the arguments array.\n\n    // We don't have an arguments list set up for this scope. This implies we\n    // are currently in the global scope so we will not record any arguments\n    // array access.\n    if (currentArgumentsAccess == null) {\n      return;\n    }\n\n    // Otherwise, we are in a function scope and we should record if the current\n    // name is referring to the implicit arguments array.\n    if (node.isName() && ARGUMENTS.equals(node.getString())) {\n      currentArgumentsAccess.add(node);\n    }\n  }\n",
        "begin_line": 148,
        "end_line": 168,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1419",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-f8c5c301-40d9-4174-b541-c3c4e279968e.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new ClosureOptimizePrimitives(compiler);\n    }\n",
        "begin_line": 1419,
        "end_line": 1422,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0717
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.tryOptimizeBlock#459",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.tryOptimizeBlock(com.google.javascript.rhino.Node)",
        "snippet": "  Node tryOptimizeBlock(Node n) {\n    // Remove any useless children\n    for (Node c = n.getFirstChild(); c != null; ) {\n      Node next = c.getNext();  // save c.next, since 'c' may be removed\n      if (!mayHaveSideEffects(c) && !c.isSyntheticBlock()) {\n        // TODO(johnlenz): determine what this is actually removing. Candidates\n        //    include: EMPTY nodes, control structures without children\n        //    (removing infinite loops), empty try blocks.  What else?\n        n.removeChild(c);  // lazy kids\n        reportCodeChange();\n      } else {\n        tryOptimizeConditionalAfterAssign(c);\n      }\n      c = next;\n    }\n\n    if (n.isSyntheticBlock() ||  n.getParent() == null) {\n      return n;\n    }\n\n    // Try to remove the block.\n    if (NodeUtil.tryMergeBlock(n)) {\n      reportCodeChange();\n      return null;\n    }\n\n    return n;\n  }\n",
        "begin_line": 459,
        "end_line": 486,
        "comment": "\n   * Try removing unneeded block nodes and their useless children\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.opToStr#2125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 2125,
        "end_line": 2170,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 7
    },
    {
        "name": "RenameVars.getVariableMap#529",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.getVariableMap()",
        "snippet": "  VariableMap getVariableMap() {\n    return new VariableMap(renameMap);\n  }\n",
        "begin_line": 529,
        "end_line": 531,
        "comment": "\n   * Gets the variable map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-3edaccdc-c7f8-49d1-a34d-6344ded5f155.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new ClosureCodeRemoval(compiler, options.removeAbstractMethods,\n          options.removeClosureAsserts);\n    }\n",
        "begin_line": 1409,
        "end_line": 1413,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnreachableCodeElimination.visit#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (parent == null) {\n      return;\n    }\n    if (n.isFunction() || n.isScript()) {\n      return;\n    }\n\n    DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);\n    if (gNode == null) { // Not in CFG.\n      return;\n    }\n    if (gNode.getAnnotation() != GraphReachability.REACHABLE ||\n        (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) {\n      removeDeadExprStatementSafely(n);\n      return;\n    }\n\n    tryRemoveUnconditionalBranching(n);\n  }\n",
        "begin_line": 90,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0708
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnreachableCodeElimination.tryRemoveUnconditionalBranching#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.tryRemoveUnconditionalBranching(com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private Node tryRemoveUnconditionalBranching(Node n) {\n    /*\n     * For each of the unconditional branching control flow node, check to see\n     * if the ControlFlowAnalysis.computeFollowNode of that node is same as\n     * the branching target. If it is, the branch node is safe to be removed.\n     *\n     * This is not as clever as MinimizeExitPoints because it doesn't do any\n     * if-else conversion but it handles more complicated switch statements\n     * much nicer.\n     */\n\n    // If n is null the target is the end of the function, nothing to do.\n    if (n == null) {\n       return n;\n    }\n\n    DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);\n\n    if (gNode == null) {\n      return n;\n    }\n\n    switch (n.getType()) {\n      case Token.RETURN:\n        if (n.hasChildren()) {\n          break;\n        }\n      case Token.BREAK:\n      case Token.CONTINUE:\n\n        // We are looking for a control flow changing statement that always\n        // branches to the same node. If removing it the control flow still\n        // branches to that same node. It is safe to remove it.\n        List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n        if (outEdges.size() == 1 &&\n            // If there is a next node, there is no chance this jump is useless.\n            (n.getNext() == null || n.getNext().isFunction())) {\n\n          Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n          Node fallThrough = computeFollowing(n);\n          Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n          if (nextCfgNode == fallThrough) {\n            removeDeadExprStatementSafely(n);\n            return fallThrough;\n          }\n        }\n    }\n    return n;\n  }\n",
        "begin_line": 130,
        "end_line": 179,
        "comment": "\n   * Tries to remove n if an unconditional branch node (break, continue or\n   * return) if the target of n is the same as the the follow of n. That is, if\n   * we remove n, the control flow remains the same. Also if n targets to\n   * another unconditional branch, this function will recursively try to remove\n   * the target branch as well. The reason why we want to cascade this removal\n   * is because we only run this pass once. If we have code such as\n   *\n   * break -> break -> break\n   *\n   * where all 3 break's are useless. The order of removal matters. When we\n   * first look at the first break, we see that it branches to the 2nd break.\n   * However, if we remove the last break, the 2nd break becomes useless and\n   * finally the first break becomes useless as well.\n   *\n   * @return The target of this jump. If the target is also useless jump,\n   *     the target of that useless jump recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0708
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.tryMergeBlock#1820",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.tryMergeBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean tryMergeBlock(Node block) {\n    Preconditions.checkState(block.isBlock());\n    Node parent = block.getParent();\n    // Try to remove the block if its parent is a block/script or if its\n    // parent is label and it has exactly one child.\n    if (isStatementBlock(parent)) {\n      Node previous = block;\n      while (block.hasChildren()) {\n        Node child = block.removeFirstChild();\n        parent.addChildAfter(child, previous);\n        previous = child;\n      }\n      parent.removeChild(block);\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 1820,
        "end_line": 1837,
        "comment": "\n   * Merge a block with its parent block.\n   * @return Whether the block was removed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.isInliningForbidden#2200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.isInliningForbidden()",
        "snippet": "  private boolean isInliningForbidden() {\n    return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||\n        options.propertyRenaming ==\n            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n  }\n",
        "begin_line": 2200,
        "end_line": 2204,
        "comment": "\n   * All inlining is forbidden in heuristic renaming mode, because inlining\n   * will ruin the invariants that it depends on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.string#419",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.string(java.lang.String)",
        "snippet": "  public static Node string(String s) {\n    return Node.newString(s);\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.newString#512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String)",
        "snippet": "  public static Node newString(String str) {\n    return new StringNode(Token.STRING, str);\n  }\n",
        "begin_line": 512,
        "end_line": 514,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0703
        },
        "num_failing_tests": 7
    },
    {
        "name": "GlobalNamespace.addRef#943",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addRef(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    void addRef(Ref ref) {\n      addRefInternal(ref);\n      switch (ref.type) {\n        case SET_FROM_GLOBAL:\n          if (declaration == null) {\n            declaration = ref;\n            docInfo = getDocInfoForDeclaration(ref);\n          }\n          globalSets++;\n          break;\n        case SET_FROM_LOCAL:\n          localSets++;\n          break;\n        case PROTOTYPE_GET:\n        case DIRECT_GET:\n          totalGets++;\n          break;\n        case ALIASING_GET:\n          aliasingGets++;\n          totalGets++;\n          break;\n        case CALL_GET:\n          callGets++;\n          totalGets++;\n          break;\n        case DELETE_PROP:\n          deleteProps++;\n          break;\n        default:\n          throw new IllegalStateException();\n      }\n    }\n",
        "begin_line": 943,
        "end_line": 974,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0702
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateString#637",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateString(Node n) {\n    validateNodeType(Token.STRING, n);\n    validateChildCount(n, 0);\n    try {\n      // Validate that getString doesn't throw\n      n.getString();\n    } catch (UnsupportedOperationException e) {\n      violation(\"Invalid STRING node.\", n);\n    }\n  }\n",
        "begin_line": 637,
        "end_line": 646,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0698
        },
        "num_failing_tests": 5
    },
    {
        "name": "ClosureOptimizePrimitives.visit#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ClosureOptimizePrimitives",
        "signature": "com.google.javascript.jscomp.ClosureOptimizePrimitives.FindObjectCreateCalls.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall()) {\n        String fnName = n.getFirstChild().getQualifiedName();\n        if (\"goog$object$create\".equals(fnName) ||\n            \"goog.object.create\".equals(fnName)) {\n          callNodes.add(n);\n        }\n      }\n    }\n",
        "begin_line": 45,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0696
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureOptimizePrimitives.ClosureOptimizePrimitives#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ClosureOptimizePrimitives",
        "signature": "com.google.javascript.jscomp.ClosureOptimizePrimitives.ClosureOptimizePrimitives(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  ClosureOptimizePrimitives(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n   * @param compiler The AbstractCompiler\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0696
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureOptimizePrimitives.process#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ClosureOptimizePrimitives",
        "signature": "com.google.javascript.jscomp.ClosureOptimizePrimitives.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    FindObjectCreateCalls pass = new FindObjectCreateCalls();\n    NodeTraversal.traverse(compiler, root, pass);\n    processObjectCreateCalls(pass.callNodes);\n  }\n",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0696
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureOptimizePrimitives.processObjectCreateCalls#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ClosureOptimizePrimitives",
        "signature": "com.google.javascript.jscomp.ClosureOptimizePrimitives.processObjectCreateCalls(java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "  private void processObjectCreateCalls(List<Node> callNodes) {\n    for (Node callNode : callNodes) {\n      Node curParam = callNode.getFirstChild().getNext();\n      if (canOptimizeObjectCreate(curParam)) {\n        Node objNode = IR.objectlit().srcref(callNode);\n        while (curParam != null) {\n          Node keyNode = curParam;\n          Node valueNode = curParam.getNext();\n          curParam = valueNode.getNext();\n\n          callNode.removeChild(keyNode);\n          callNode.removeChild(valueNode);\n\n          if (!keyNode.isString()) {\n            keyNode = IR.string(NodeUtil.getStringValue(keyNode))\n                .srcref(keyNode);\n          }\n          keyNode.setType(Token.STRING_KEY);\n          keyNode.setQuotedString();\n          objNode.addChildToBack(IR.propdef(keyNode, valueNode));\n        }\n        callNode.getParent().replaceChild(callNode, objNode);\n        compiler.reportCodeChange();\n      }\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 100,
        "comment": "\n   * Converts all of the given call nodes to object literals that are safe to\n   * do so.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0696
        },
        "num_failing_tests": 2
    },
    {
        "name": "StatementFusion.optimizeSubtree#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/StatementFusion.java",
        "class_name": "com.google.javascript.jscomp.StatementFusion",
        "signature": "com.google.javascript.jscomp.StatementFusion.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  Node optimizeSubtree(Node n) {\n    // The block of a function body always need { }.\n    if (!n.getParent().isFunction() && canFuseIntoOneStatement(n)) {\n      fuseIntoOneStatement(n);\n      reportCodeChange();\n    }\n    return n;\n  }\n",
        "begin_line": 36,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0693
        },
        "num_failing_tests": 2
    },
    {
        "name": "MinimizeExitPoints.process#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "class_name": "com.google.javascript.jscomp.MinimizeExitPoints",
        "signature": "com.google.javascript.jscomp.MinimizeExitPoints.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineVariables.doInlinesForScope#194",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.InliningBehavior.doInlinesForScope(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap)",
        "snippet": "    private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) {\n\n      boolean maybeModifiedArguments =\n          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n\n        ReferenceCollection referenceInfo = referenceMap.getReferences(v);\n\n        // referenceInfo will be null if we're in constants-only mode\n        // and the variable is not a constant.\n        if (referenceInfo == null || isVarInlineForbidden(v)) {\n          // Never try to inline exported variables or variables that\n          // were not collected or variables that have already been inlined.\n          continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n          Reference init = referenceInfo.getInitializingReferenceForConstants();\n          Node value = init.getAssignedValue();\n          inlineDeclaredConstant(v, value, referenceInfo.references);\n          staleVars.add(v);\n        } else if (mode == Mode.CONSTANTS_ONLY) {\n          // If we're in constants-only mode, don't run more aggressive\n          // inlining heuristics. See InlineConstantsTest.\n          continue;\n        } else {\n          inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n        }\n      }\n    }\n",
        "begin_line": 194,
        "end_line": 222,
        "comment": "\n     * For all variables in this scope, see if they are only used once.\n     * If it looks safe to do so, inline them.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 2
    },
    {
        "name": "CoalesceVariableNames.CoalesceVariableNames#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.CoalesceVariableNames(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  CoalesceVariableNames(AbstractCompiler compiler, boolean usePseudoNames) {\n    Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());\n\n    this.compiler = compiler;\n    colorings = Lists.newLinkedList();\n    this.usePseudoNames = usePseudoNames;\n  }\n",
        "begin_line": 78,
        "end_line": 84,
        "comment": "\n   * @param usePseudoNames For debug purposes, when merging variable foo and bar\n   * to foo, rename both variable to foo_bar.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 2
    },
    {
        "name": "CoalesceVariableNames.shouldOptimizeScope#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.shouldOptimizeScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  private static boolean shouldOptimizeScope(Scope scope) {\n    // TODO(user): We CAN do this in the global scope, just need to be\n    // careful when something is exported. Liveness uses bit-vector for live\n    // sets so I don't see compilation time will be a problem for running this\n    // pass in the global scope.\n    if (scope.isGlobal()) {\n      return false;\n    }\n\n    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n        scope.getVarCount()) {\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 91,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 2
    },
    {
        "name": "CoalesceVariableNames.enterScope#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    if (!shouldOptimizeScope(scope)) {\n      return;\n    }\n\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    LiveVariablesAnalysis liveness =\n        new LiveVariablesAnalysis(cfg, scope, compiler);\n    // If the function has exactly 2 params, mark them as escaped. This is\n    // a work-around for an IE bug where it throws an exception if you\n    // write to the parameters of the callback in a sort(). See:\n    // http://code.google.com/p/closure-compiler/issues/detail?id=58\n    if (scope.getRootNode().getFirstChild().getNext().getChildCount() == 2) {\n      liveness.markAllParametersEscaped();\n    }\n    liveness.analyze();\n\n    UndiGraph<Var, Void> interferenceGraph =\n        computeVariableNamesInterferenceGraph(\n            t, cfg, liveness.getEscapedLocals());\n\n    GraphColoring<Var, Void> coloring =\n        new GreedyGraphColoring<Var, Void>(interferenceGraph,\n            coloringTieBreaker);\n\n    coloring.color();\n    colorings.push(coloring);\n  }\n",
        "begin_line": 108,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 2
    },
    {
        "name": "CoalesceVariableNames.exitScope#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    if (!shouldOptimizeScope(t.getScope())) {\n      return;\n    }\n    colorings.pop();\n  }\n",
        "begin_line": 139,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 2
    },
    {
        "name": "CoalesceVariableNames.visit#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (colorings.isEmpty() || !n.isName() ||\n        parent.isFunction()) {\n      // Don't rename named functions.\n      return;\n    }\n    Var var = t.getScope().getVar(n.getString());\n    GraphNode<Var, ?> vNode = colorings.peek().getGraph().getNode(var);\n    if (vNode == null) {\n      // This is not a local.\n      return;\n    }\n    Var coalescedVar = colorings.peek().getPartitionSuperNode(var);\n\n    if (!usePseudoNames) {\n      if (vNode.getValue().equals(coalescedVar)) {\n        // The coalesced name is itself, nothing to do.\n        return;\n      }\n\n      // Rename.\n      n.setString(coalescedVar.name);\n      compiler.reportCodeChange();\n\n      if (parent.isVar()) {\n        removeVarDeclaration(n);\n      }\n    } else {\n      // This code block is slow but since usePseudoName is for debugging,\n      // we should not sacrifice performance for non-debugging compilation to\n      // make this fast.\n      String pseudoName = null;\n      Set<String> allMergedNames = Sets.newTreeSet();\n      for (Iterator<Var> i = t.getScope().getVars(); i.hasNext();) {\n        Var iVar = i.next();\n\n        // Look for all the variables that can be merged (in the graph by now)\n        // and it is merged with the current coalescedVar.\n        if (colorings.peek().getGraph().getNode(iVar) != null &&\n            coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {\n          allMergedNames.add(iVar.name);\n        }\n      }\n\n      // Keep its original name.\n      if (allMergedNames.size() == 1) {\n        return;\n      }\n\n      pseudoName = Joiner.on(\"_\").join(allMergedNames);\n\n      while (t.getScope().isDeclared(pseudoName, true)) {\n        pseudoName += \"$\";\n      }\n\n      n.setString(pseudoName);\n      compiler.reportCodeChange();\n\n      if (!vNode.getValue().equals(coalescedVar) && parent.isVar()) {\n        removeVarDeclaration(n);\n      }\n    }\n  }\n",
        "begin_line": 147,
        "end_line": 210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0687
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.call#1676",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-9e202eb3-0381-43e9-b7a1-137ea02b22e4.call()",
        "snippet": "      @Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter = options.inputDelimiter;\n\n          String inputName = root.getInputId().getIdName();\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n",
        "begin_line": 1676,
        "end_line": 1732,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0684
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeReplaceKnownMethods.optimizeSubtree#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  Node optimizeSubtree(Node subtree) {\n    if (subtree.isCall() ){\n      return tryFoldKnownMethods(subtree);\n    }\n    return subtree;\n  }\n",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0682
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodeRemoval.ClosureCodeRemoval#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.ClosureCodeRemoval(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean)",
        "snippet": "  ClosureCodeRemoval(AbstractCompiler compiler, boolean removeAbstractMethods,\n                     boolean removeAssertionCalls) {\n    this.compiler = compiler;\n    this.removeAbstractMethods = removeAbstractMethods;\n    this.removeAssertionCalls = removeAssertionCalls;\n  }\n",
        "begin_line": 189,
        "end_line": 194,
        "comment": "\n   * Creates a Closure code remover.\n   *\n   * @param compiler The AbstractCompiler\n   * @param removeAbstractMethods Remove declarations of abstract methods.\n   * @param removeAssertionCalls Remove calls to goog.assert functions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0682
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodeRemoval.process#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    List<Callback> passes = Lists.newArrayList();\n    if (removeAbstractMethods) {\n      passes.add(new FindAbstractMethods());\n    }\n    if (removeAssertionCalls) {\n      passes.add(new FindAssertionCalls());\n    }\n    CombinedCompilerPass.traverse(compiler, root, passes);\n\n    for (RemovableAssignment assignment : abstractMethodAssignmentNodes) {\n      assignment.remove();\n    }\n\n    for (Node call : assertionCalls) {\n      // If the assertion is an expression, just strip the whole thing.\n      Node parent = call.getParent();\n      if (parent.isExprResult()) {\n        parent.getParent().removeChild(parent);\n      } else {\n        // Otherwise, replace the assertion with its first argument,\n        // which is the return value of the assertion.\n        Node firstArg = call.getFirstChild().getNext();\n        if (firstArg == null) {\n          parent.replaceChild(call, NodeUtil.newUndefinedNode(call));\n        } else {\n          parent.replaceChild(call, firstArg.detachFromParent());\n        }\n      }\n      compiler.reportCodeChange();\n    }\n  }\n",
        "begin_line": 196,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0682
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnreachableCodeElimination.UnreachableCodeElimination#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.UnreachableCodeElimination(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  UnreachableCodeElimination(AbstractCompiler compiler,\n      boolean removeNoOpStatements) {\n    this.compiler = compiler;\n    this.removeNoOpStatements = removeNoOpStatements;\n  }\n",
        "begin_line": 60,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnreachableCodeElimination.enterScope#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n\n    // Computes the control flow graph.\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false);\n    cfa.process(null, scope.getRootNode());\n    cfgStack.push(curCfg);\n    curCfg = cfa.getCfg();\n\n    new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)\n        .compute(curCfg.getEntry().getValue());\n  }\n",
        "begin_line": 66,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnreachableCodeElimination.exitScope#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    curCfg = cfgStack.pop();\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnreachableCodeElimination.process#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineObjectLiterals.afterExitScope#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.afterExitScope(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap)",
        "snippet": "    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n\n        if (isVarInlineForbidden(v)) {\n          continue;\n        }\n\n        ReferenceCollection referenceInfo = referenceMap.getReferences(v);\n\n        if (isInlinableObject(referenceInfo.references)) {\n          // Blacklist the object itself, as well as any other values\n          // that it refers to, since they will have been moved around.\n          staleVars.add(v);\n\n          Reference declaration = referenceInfo.references.get(0);\n          Reference init = referenceInfo.getInitializingReference();\n\n          // Split up the object into individual variables if the object\n          // is never referenced directly in full.\n          splitObject(v, declaration, init, referenceInfo);\n        }\n      }\n    }\n",
        "begin_line": 83,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineObjectLiterals.isVarInlineForbidden#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "    private boolean isVarInlineForbidden(Var var) {\n      // A variable may not be inlined if:\n      // 1) The variable is defined in the externs\n      // 2) The variable is exported,\n      // 3) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME\n      // 4) A reference to the variable has been inlined. We're downstream\n      //    of the mechanism that creates variable references, so we don't\n      //    have a good way to update the reference. Just punt on it.\n\n      // Additionally, exclude global variables for now.\n\n      return var.isGlobal()\n          || var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);\n    }\n",
        "begin_line": 129,
        "end_line": 145,
        "comment": "\n     * Whether the given variable is forbidden from being inlined.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineObjectLiterals.InlineObjectLiterals#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>)",
        "snippet": "  InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier) {\n    this.compiler = compiler;\n    this.safeNameIdSupplier = safeNameIdSupplier;\n  }\n",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineObjectLiterals.process#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior());\n    callback.process(externs, root);\n  }\n",
        "begin_line": 63,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processObjectLiteral#804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral)",
        "snippet": "    @Override\n    Node processObjectLiteral(ObjectLiteral literalNode) {\n      if (literalNode.isDestructuring()) {\n        reportDestructuringAssign(literalNode);\n      }\n\n      Node node = newNode(Token.OBJECTLIT);\n      for (ObjectProperty el : literalNode.getElements()) {\n        if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n          if (el.isGetter()) {\n            reportGetter(el);\n            continue;\n          } else if (el.isSetter()) {\n            reportSetter(el);\n            continue;\n          }\n        }\n\n        Node key = transformAsString(el.getLeft());\n        key.setType(Token.STRING_KEY);\n\n        Node value = transform(el.getRight());\n        if (el.isGetter()) {\n          key.setType(Token.GETTER_DEF);\n          Preconditions.checkState(value.isFunction());\n          if (getFnParamNode(value).hasChildren()) {\n            reportGetterParam(el.getLeft());\n          }\n        } else if (el.isSetter()) {\n          key.setType(Token.SETTER_DEF);\n          Preconditions.checkState(value.isFunction());\n          if (!getFnParamNode(value).hasOneChild()) {\n            reportSetterParam(el.getLeft());\n          }\n        }\n        key.addChildToFront(value);\n        node.addChildToBack(key);\n      }\n      return node;\n    }\n",
        "begin_line": 804,
        "end_line": 843,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0679
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessClosurePrimitives.handleCandidateProvideDefinition#362",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.handleCandidateProvideDefinition(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void handleCandidateProvideDefinition(\n      NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n      String name = null;\n      if (n.isName() && parent.isVar()) {\n        name = n.getString();\n      } else if (n.isAssign() &&\n          parent.isExprResult()) {\n        name = n.getFirstChild().getQualifiedName();\n      }\n\n      if (name != null) {\n        if (parent.getBooleanProp(Node.IS_NAMESPACE)) {\n          processProvideFromPreviousPass(t, name, parent);\n        } else {\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            pn.addDefinition(parent, t.getModule());\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 362,
        "end_line": 384,
        "comment": "\n   * Handles a candidate definition for a goog.provided name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0676
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeReplaceKnownMethods.PeepholeReplaceKnownMethods#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods.PeepholeReplaceKnownMethods(boolean)",
        "snippet": "  PeepholeReplaceKnownMethods(boolean late) {\n    this.late = late;\n  }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n   * @param late When late is true, this mean we are currently running after\n   * most of the other optimizations. In this case we avoid changes that make\n   * the code larger (but otherwise easier to analyze - such as using string\n   * splitting).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0676
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.recordThisType#550",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordThisType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordThisType(JSTypeExpression type) {\n    if (type != null && !hasAnySingletonTypeTags() &&\n        !currentInfo.hasThisType()) {\n      currentInfo.setThisType(type);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 550,
        "end_line": 559,
        "comment": "\n   * Records a type for {@code @this} annotation.\n   *\n   * @return {@code true} if the type was recorded and\n   *     {@code false} if it is invalid or if it collided with {@code @enum} or\n   *     {@code @type} annotations\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0673
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setThisType#1119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setThisType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setThisType(JSTypeExpression type) {\n    this.thisType = type;\n  }\n",
        "begin_line": 1119,
        "end_line": 1121,
        "comment": "\n   * Sets the type specified by the {@code @this} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0673
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parse#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parse()",
        "snippet": "  boolean parse() {\n    int lineno;\n    int charno;\n\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n\n    state = State.SEARCHING_ANNOTATION;\n    skipEOLs();\n\n    JsDocToken token = next();\n\n    List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();\n\n    // Always record that we have a comment.\n    if (jsdocBuilder.shouldParseDocumentation()) {\n      ExtractionInfo blockInfo = extractBlockComment(token);\n      token = blockInfo.token;\n      if (!blockInfo.string.isEmpty()) {\n        jsdocBuilder.recordBlockDescription(blockInfo.string);\n      }\n    } else {\n      if (token != JsDocToken.ANNOTATION &&\n          token != JsDocToken.EOC) {\n        // Mark that there was a description, but don't bother marking\n        // what it was.\n        jsdocBuilder.recordBlockDescription(\"\");\n      }\n    }\n\n    // Parse the actual JsDoc.\n    retry: for (;;) {\n      switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            String annotationName = stream.getString();\n            Annotation annotation = annotationNames.get(annotationName);\n            if (annotation == null) {\n              parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              // Mark the beginning of the annotation.\n              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n              switch (annotation) {\n                case AUTHOR:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo authorInfo = extractSingleLineBlock();\n                    String author = authorInfo.string;\n\n                    if (author.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addAuthor(author);\n                    }\n                    token = authorInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case CONSISTENTIDGENERATOR:\n                  if (!jsdocBuilder.recordConsistentIdGenerator()) {\n                    parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n                      stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTANT:\n                  if (!jsdocBuilder.recordConstancy()) {\n                    parser.addParserWarning(\"msg.jsdoc.const\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTRUCTOR:\n                  if (!jsdocBuilder.recordConstructor()) {\n                    if (jsdocBuilder.isInterfaceRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DEPRECATED:\n                  if (!jsdocBuilder.recordDeprecated()) {\n                    parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  // Find the reason/description, if any.\n                  ExtractionInfo reasonInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String reason = reasonInfo.string;\n\n                  if (reason.length() > 0) {\n                    jsdocBuilder.recordDeprecationReason(reason);\n                  }\n\n                  token = reasonInfo.token;\n                  continue retry;\n\n                case INTERFACE:\n                  if (!jsdocBuilder.recordInterface()) {\n                    if (jsdocBuilder.isConstructorRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DESC:\n                  if (jsdocBuilder.isDescriptionRecorded()) {\n                    parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                        stream.getLineno(), stream.getCharno());\n                    token = eatTokensUntilEOL();\n                    continue retry;\n                  } else {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    jsdocBuilder.recordDescription(description);\n                    token = descriptionInfo.token;\n                    continue retry;\n                  }\n\n                case FILE_OVERVIEW:\n                  String fileOverview = \"\";\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo fileOverviewInfo =\n                        extractMultilineTextualBlock(token,\n                            WhitespaceOption.TRIM);\n\n                    fileOverview = fileOverviewInfo.string;\n\n                    token = fileOverviewInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n\n                  if (!jsdocBuilder.recordFileOverview(fileOverview)) {\n                    parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case LICENSE:\n                case PRESERVE:\n                  ExtractionInfo preserveInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.PRESERVE);\n\n                  String preserve = preserveInfo.string;\n\n                  if (preserve.length() > 0) {\n                    if (fileLevelJsDocBuilder != null) {\n                      fileLevelJsDocBuilder.append(preserve);\n                    }\n                  }\n\n                  token = preserveInfo.token;\n                  continue retry;\n\n                case ENUM:\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  type = null;\n                  if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n                  }\n\n                  if (type == null) {\n                    type = createJSTypeExpression(newStringNode(\"number\"));\n                  }\n                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n                    parser.addTypeWarning(\n                        \"msg.jsdoc.incompat.type\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case EXPORT:\n                  if (!jsdocBuilder.recordExport()) {\n                    parser.addParserWarning(\"msg.jsdoc.export\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXPOSE:\n                  if (!jsdocBuilder.recordExpose()) {\n                    parser.addParserWarning(\"msg.jsdoc.expose\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTERNS:\n                  if (!jsdocBuilder.recordExterns()) {\n                    parser.addParserWarning(\"msg.jsdoc.externs\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case JAVA_DISPATCH:\n                  if (!jsdocBuilder.recordJavaDispatch()) {\n                    parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTENDS:\n                case IMPLEMENTS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  boolean matchingRc = false;\n\n                  if (token == JsDocToken.LC) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (token == JsDocToken.STRING) {\n                    Node typeNode = parseAndRecordTypeNameNode(\n                        token, lineno, charno, matchingRc);\n\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && !matchingRc) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                    type = createJSTypeExpression(typeNode);\n\n                    if (annotation == Annotation.EXTENDS) {\n                      // record the extended type, check later\n                      extendedTypes.add(new ExtendedTypeInfo(\n                          type, stream.getLineno(), stream.getCharno()));\n                    } else {\n                      Preconditions.checkState(\n                          annotation == Annotation.IMPLEMENTS);\n                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n                        parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                            lineno, charno);\n                      }\n                    }\n                    token = next();\n                    if (matchingRc) {\n                      if (token != JsDocToken.RC) {\n                        parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                            stream.getLineno(), stream.getCharno());\n                      }\n                    } else if (token != JsDocToken.EOL &&\n                        token != JsDocToken.EOF && token != JsDocToken.EOC) {\n                      parser.addTypeWarning(\"msg.end.annotation.expected\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case HIDDEN:\n                  if (!jsdocBuilder.recordHiddenness()) {\n                    parser.addParserWarning(\"msg.jsdoc.hidden\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case LENDS:\n                  skipEOLs();\n\n                  matchingRc = false;\n                  if (match(JsDocToken.LC)) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (match(JsDocToken.STRING)) {\n                    token = next();\n                    if (!jsdocBuilder.recordLends(stream.getString())) {\n                      parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  if (matchingRc && !match(JsDocToken.RC)) {\n                    parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MEANING:\n                  ExtractionInfo meaningInfo =\n                      extractMultilineTextualBlock(token);\n                  String meaning = meaningInfo.string;\n                  token = meaningInfo.token;\n                  if (!jsdocBuilder.recordMeaning(meaning)) {\n                    parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case NO_ALIAS:\n                  if (!jsdocBuilder.recordNoAlias()) {\n                    parser.addParserWarning(\"msg.jsdoc.noalias\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_COMPILE:\n                  if (!jsdocBuilder.recordNoCompile()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_TYPE_CHECK:\n                  if (!jsdocBuilder.recordNoTypeCheck()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NOT_IMPLEMENTED:\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case INHERIT_DOC:\n                case OVERRIDE:\n                  if (!jsdocBuilder.recordOverride()) {\n                    parser.addTypeWarning(\"msg.jsdoc.override\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case THROWS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                  }\n\n                  // *Update* the token to that after the type annotation.\n                  token = current();\n\n                  // Save the throw type.\n                  jsdocBuilder.recordThrowType(type);\n\n                  // Find the throw's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    if (description.length() > 0) {\n                      jsdocBuilder.recordThrowDescription(type, description);\n                    }\n\n                    token = descriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PARAM:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordParamTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                    skipEOLs();\n                    token = next();\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n                  }\n\n                  String name = null;\n                  boolean isBracketedParam = JsDocToken.LB == token;\n                  if (isBracketedParam) {\n                    token = next();\n                  }\n\n                  if (JsDocToken.STRING != token) {\n                    parser.addTypeWarning(\"msg.missing.variable.name\",\n                        lineno, charno);\n                  } else {\n                    name = stream.getString();\n\n                    if (isBracketedParam) {\n                      token = next();\n\n                      // Throw out JsDocToolkit's \"default\" parameter\n                      // annotation.  It makes no sense under our type\n                      // system.\n                      if (JsDocToken.EQUALS == token) {\n                        token = next();\n                        if (JsDocToken.STRING == token) {\n                          token = next();\n                        }\n                      }\n\n                      if (JsDocToken.RB != token) {\n                        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n                      } else if (type != null) {\n                        // Make the type expression optional, if it isn't\n                        // already.\n                        type = JSTypeExpression.makeOptionalArg(type);\n                      }\n                    }\n\n                    // If the param name has a DOT in it, just throw it out\n                    // quietly. We do not handle the JsDocToolkit method\n                    // for handling properties of params.\n                    if (name.indexOf('.') > -1) {\n                      name = null;\n                    } else if (!jsdocBuilder.recordParameter(name, type)) {\n                      if (jsdocBuilder.hasParameter(name)) {\n                        parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                            lineno, charno);\n                      } else {\n                        parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                            lineno, charno);\n                      }\n                    }\n                  }\n\n                  if (name == null) {\n                    token = eatTokensUntilEOL(token);\n                    continue retry;\n                  }\n\n                  jsdocBuilder.markName(name, sourceFile, lineno, charno);\n\n                  // Find the parameter's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo paramDescriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String paramDescription = paramDescriptionInfo.string;\n\n                    if (paramDescription.length() > 0) {\n                      jsdocBuilder.recordParameterDescription(name,\n                          paramDescription);\n                    }\n\n                    token = paramDescriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PRESERVE_TRY:\n                  if (!jsdocBuilder.recordPreserveTry()) {\n                    parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PRIVATE:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.private\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PROTECTED:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.protected\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PUBLIC:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.public\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SHADOW:\n                  if (!jsdocBuilder.recordNoShadow()) {\n                    parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SIDE_EFFECTS:\n                  if (!jsdocBuilder.recordNoSideEffects()) {\n                    parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MODIFIES:\n                  token = parseModifiesTag(next());\n                  continue retry;\n\n                case IMPLICIT_CAST:\n                  if (!jsdocBuilder.recordImplicitCast()) {\n                    parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case SEE:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo referenceInfo = extractSingleLineBlock();\n                    String reference = referenceInfo.string;\n\n                    if (reference.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addReference(reference);\n                    }\n\n                    token = referenceInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case SUPPRESS:\n                  token = parseSuppressTag(next());\n                  continue retry;\n\n                case TEMPLATE:\n                  ExtractionInfo templateInfo = extractSingleLineBlock();\n                  String templateTypeName = templateInfo.string;\n\n                  if (templateTypeName.length() == 0) {\n                    parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else if (!jsdocBuilder.recordTemplateTypeName(\n                      templateTypeName)) {\n                    parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  token = templateInfo.token;\n                  continue retry;\n\n                case IDGENERATOR:\n                  if (!jsdocBuilder.recordIdGenerator()) {\n                    parser.addParserWarning(\"msg.jsdoc.idgen\",\n                      stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case VERSION:\n                  ExtractionInfo versionInfo = extractSingleLineBlock();\n                  String version = versionInfo.string;\n\n                  if (version.length() == 0) {\n                    parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    if (!jsdocBuilder.recordVersion(version)) {\n                       parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n\n                  token = versionInfo.token;\n                  continue retry;\n\n                case DEFINE:\n                case RETURN:\n                case THIS:\n                case TYPE:\n                case TYPEDEF:\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  Node typeNode = null;\n                  if (!lookAheadForTypeAnnotation() &&\n                      annotation == Annotation.RETURN) {\n                    // If RETURN doesn't have a type annotation, record\n                    // it as the unknown type.\n                    typeNode = newNode(Token.QMARK);\n                  } else {\n                    skipEOLs();\n                    token = next();\n                    typeNode = parseAndRecordTypeNode(token);\n                  }\n\n                  if (annotation == Annotation.THIS) {\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && token != JsDocToken.LC) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                  }\n                  type = createJSTypeExpression(typeNode);\n\n                  if (type == null) {\n                    // error reported during recursive descent\n                    // recovering parsing\n                  } else {\n                    switch (annotation) {\n                      case DEFINE:\n                        if (!jsdocBuilder.recordDefineType(type)) {\n                          parser.addParserWarning(\"msg.jsdoc.define\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case RETURN:\n                        if (!jsdocBuilder.recordReturnType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                          break;\n                        }\n\n                        // Find the return's description (if applicable).\n                        if (jsdocBuilder.shouldParseDocumentation()) {\n                          ExtractionInfo returnDescriptionInfo =\n                              extractMultilineTextualBlock(token);\n\n                          String returnDescription =\n                              returnDescriptionInfo.string;\n\n                          if (returnDescription.length() > 0) {\n                            jsdocBuilder.recordReturnDescription(\n                                returnDescription);\n                          }\n\n                          token = returnDescriptionInfo.token;\n                        } else {\n                          token = eatTokensUntilEOL(token);\n                        }\n                        continue retry;\n\n                      case THIS:\n                        if (!jsdocBuilder.recordThisType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPE:\n                        if (!jsdocBuilder.recordType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPEDEF:\n                        if (!jsdocBuilder.recordTypedef(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n                    }\n                  }\n\n                  token = eatTokensUntilEOL();\n                  continue retry;\n              }\n            }\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          continue retry;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n            continue retry;\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n            continue retry;\n          }\n      }\n\n      // next token\n      token = next();\n    }\n  }\n",
        "begin_line": 181,
        "end_line": 948,
        "comment": "\n   * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n   * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n   * {@link JsDocToken#EOC} is returned.\n   *\n   * @return {@code true} if JSDoc information was correctly parsed,\n   *     {@code false} otherwise\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0673
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.nodeTypeMayHaveSideEffects#1074",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    if (isAssignmentOp(n)) {\n      return true;\n    }\n\n    switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1074,
        "end_line": 1095,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0673
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.replaceChild#713",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void replaceChild(Node child, Node newChild) {\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n\n    // Copy over important information.\n    newChild.copyInformationFrom(child);\n\n    newChild.next = child.next;\n    newChild.parent = this;\n    if (child == first) {\n        first = newChild;\n    } else {\n        Node prev = getChildBefore(child);\n        prev.next = newChild;\n    }\n    if (child == last)\n        last = newChild;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 713,
        "end_line": 734,
        "comment": "\n   * Detaches child from Node and replaces it with newChild.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0672
        },
        "num_failing_tests": 6
    },
    {
        "name": "ProcessClosurePrimitives.addDefinition#858",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.addDefinition(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule)",
        "snippet": "    void addDefinition(Node node, JSModule module) {\n      Preconditions.checkArgument(node.isExprResult() || // assign\n                                  node.isFunction() ||\n                                  node.isVar());\n      Preconditions.checkArgument(explicitNode != node);\n      if ((candidateDefinition == null) || !node.isExprResult()) {\n        candidateDefinition = node;\n        updateMinimumModule(module);\n      }\n    }\n",
        "begin_line": 858,
        "end_line": 867,
        "comment": "\n     * Record function declaration, variable declaration or assignment that\n     * refers to the same name as the provide statement.  Give preference to\n     * declarations; if no declaration exists, record a reference to an\n     * assignment so it repurposed later.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0671
        },
        "num_failing_tests": 2
    },
    {
        "name": "MinimizeExitPoints.MinimizeExitPoints#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "class_name": "com.google.javascript.jscomp.MinimizeExitPoints",
        "signature": "com.google.javascript.jscomp.MinimizeExitPoints.MinimizeExitPoints(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  MinimizeExitPoints(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0671
        },
        "num_failing_tests": 2
    },
    {
        "name": "MinimizeExitPoints.visit#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "class_name": "com.google.javascript.jscomp.MinimizeExitPoints",
        "signature": "com.google.javascript.jscomp.MinimizeExitPoints.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.LABEL:\n        tryMinimizeExits(\n            n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n        break;\n\n      case Token.FOR:\n      case Token.WHILE:\n        tryMinimizeExits(\n            NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n        break;\n\n      case Token.DO:\n        tryMinimizeExits(\n            NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n\n        Node cond = NodeUtil.getConditionExpression(n);\n        if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE) {\n          // Normally, we wouldn't be able to optimize BREAKs inside a loop\n          // but as we know the condition will always false, we can treat them\n          // as we would a CONTINUE.\n          tryMinimizeExits(\n              n.getFirstChild(), Token.BREAK, null);\n        }\n        break;\n\n      case Token.FUNCTION:\n        tryMinimizeExits(\n            n.getLastChild(), Token.RETURN, null);\n        break;\n    }\n  }\n",
        "begin_line": 51,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0671
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.append#1782",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.CodeBuilder.append(java.lang.String)",
        "snippet": "    CodeBuilder append(String str) {\n      sb.append(str);\n\n      // Adjust the line and column information for the new text.\n      int index = -1;\n      int lastIndex = index;\n      while ((index = str.indexOf('\\n', index + 1)) >= 0) {\n        ++lineCount;\n        lastIndex = index;\n      }\n\n      if (lastIndex == -1) {\n        // No new lines, append the new characters added.\n        colCount += str.length();\n      } else {\n        colCount = str.length() - (lastIndex + 1);\n      }\n\n      return this;\n    }\n",
        "begin_line": 1782,
        "end_line": 1801,
        "comment": " Appends the given string to the text buffer. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0671
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getJsDocToken#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getJsDocToken()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  final JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop = 0;\n    for (;;) {\n      // eat white spaces\n      for (;;) {\n        charno = -1;\n        c = getChar();\n        if (c == EOF_CHAR) {\n          return JsDocToken.EOF;\n        } else if (c == '\\n') {\n          return JsDocToken.EOL;\n        } else if (!isJSSpace(c)) {\n          break;\n        }\n      }\n\n      switch (c) {\n        // annotation, e.g. @type or @constructor\n        case '@':\n          do {\n            c = getChar();\n            if (isAlpha(c)) {\n              addToString(c);\n            } else {\n              ungetChar(c);\n              this.string = getStringFromBuffer();\n              stringBufferTop = 0;\n              return JsDocToken.ANNOTATION;\n            }\n          } while (true);\n\n        case '*':\n          if (matchChar('/')) {\n            return JsDocToken.EOC;\n          } else {\n            return JsDocToken.STAR;\n          }\n\n        case ',':\n          return JsDocToken.COMMA;\n\n        case '>':\n          return JsDocToken.GT;\n\n        case '(':\n          return JsDocToken.LP;\n\n        case ')':\n          return JsDocToken.RP;\n\n        case '{':\n          return JsDocToken.LC;\n\n        case '}':\n          return JsDocToken.RC;\n\n        case '[':\n          return JsDocToken.LB;\n\n        case ']':\n          return JsDocToken.RB;\n\n        case '?':\n          return JsDocToken.QMARK;\n\n        case '!':\n          return JsDocToken.BANG;\n\n        case ':':\n          return JsDocToken.COLON;\n\n        case '=':\n          return JsDocToken.EQUALS;\n\n        case '|':\n          matchChar('|');\n          return JsDocToken.PIPE;\n\n        case '.':\n          c = getChar();\n          if (c == '<') {\n            return JsDocToken.LT;\n          } else {\n            if (c == '.') {\n              c = getChar();\n              if (c == '.') {\n                return JsDocToken.ELLIPSIS;\n              } else {\n                addToString('.');\n              }\n            }\n            // we may backtrack across line boundary\n            ungetBuffer[ungetCursor++] = c;\n            c = '.';\n          }\n          // fall through\n\n        default: {\n          // recognize a JsDoc string but discard last . if it is followed by\n          // a non-JsDoc comment char, e.g. Array.<\n          int c1 = c;\n          addToString(c);\n          int c2 = getChar();\n          if (!isJSDocString(c2)) {\n            ungetChar(c2);\n            this.string = getStringFromBuffer();\n            stringBufferTop = 0;\n            return JsDocToken.STRING;\n          } else {\n            do {\n              c1 = c2;\n              c2 = getChar();\n              if (c1 == '.' && c2 == '<') {\n                ungetChar(c2);\n                ungetChar(c1);\n                this.string = getStringFromBuffer();\n                stringBufferTop = 0;\n                return JsDocToken.STRING;\n              } else {\n                if (isJSDocString(c2)) {\n                  addToString(c1);\n                } else {\n                  ungetChar(c2);\n                  addToString(c1);\n                  this.string = getStringFromBuffer();\n                  stringBufferTop = 0;\n                  return JsDocToken.STRING;\n                }\n              }\n            } while (true);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 58,
        "end_line": 194,
        "comment": "\n   * Tokenizes JSDoc comments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0666
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.optimizePasses#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.LoopInternal.optimizePasses()",
        "snippet": "    private void optimizePasses() {\n      // It's important that this ordering is deterministic, so that\n      // multiple compiles with the same input produce exactly the same\n      // results.\n      //\n      // To do this, grab any passes we recognize, and move them to the end\n      // in an \"optimal\" order.\n      List<NamedPass> optimalPasses = Lists.newArrayList();\n      for (String passName : OPTIMAL_ORDER) {\n        for (NamedPass pass : myPasses) {\n          if (pass.name.equals(passName)) {\n            optimalPasses.add(pass);\n            break;\n          }\n        }\n      }\n\n      myPasses.removeAll(optimalPasses);\n      myPasses.addAll(optimalPasses);\n    }\n",
        "begin_line": 387,
        "end_line": 406,
        "comment": " Re-arrange the passes in an optimal order. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0666
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-1d5905fe-41ce-432b-a880-eff2622ab417.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      List<Callback> callbacks = Lists.newArrayList();\n      if (options.checkUnreachableCode.isOn()) {\n        callbacks.add(\n            new CheckUnreachableCode(compiler, options.checkUnreachableCode));\n      }\n      if (options.checkMissingReturn.isOn() && options.checkTypes) {\n        callbacks.add(\n            new CheckMissingReturn(compiler, options.checkMissingReturn));\n      }\n      return combineChecks(compiler, callbacks);\n    }\n",
        "begin_line": 1187,
        "end_line": 1199,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0666
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isEquivalentTo#1508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "  boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n    if (type != node.getType()\n        || getChildCount() != node.getChildCount()\n        || this.getClass() != node.getClass()) {\n      return false;\n    }\n\n    if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n      return false;\n    }\n\n    if (type == Token.INC || type == Token.DEC) {\n      int post1 = this.getIntProp(INCRDECR_PROP);\n      int post2 = node.getIntProp(INCRDECR_PROP);\n      if (post1 != post2) {\n        return false;\n      }\n    } else if (type == Token.STRING || type == Token.STRING_KEY) {\n      if (type == Token.STRING_KEY) {\n        int quoted1 = this.getIntProp(QUOTED_PROP);\n        int quoted2 = node.getIntProp(QUOTED_PROP);\n        if (quoted1 != quoted2) {\n          return false;\n        }\n      }\n\n      int slashV1 = this.getIntProp(SLASH_V);\n      int slashV2 = node.getIntProp(SLASH_V);\n      if (slashV1 != slashV2) {\n        return false;\n      }\n    } else if (type == Token.CALL) {\n      if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n        return false;\n      }\n    }\n\n    if (recurse) {\n      Node n, n2;\n      for (n = first, n2 = node.first;\n           n != null;\n           n = n.next, n2 = n2.next) {\n        if (!n.isEquivalentTo(n2, compareJsType, true)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 1508,
        "end_line": 1557,
        "comment": "\n   * @param compareJsType Whether to compare the JSTypes of the nodes.\n   * @param recurse Whether to compare the children of the current node, if\n   *    not only the the count of the children are compared.\n   * @return Whether this node is equivalent semantically to the provided node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getProp#809",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "  public Object getProp(int propType) {\n    if (propType == SOURCENAME_PROP) {\n      return getSourceFileName();\n    }\n\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return null;\n    }\n    return item.getObjectValue();\n  }\n",
        "begin_line": 809,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0661
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.toSource#1558",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource()",
        "snippet": "  public String toSource() {\n    return runInCompilerThread(new Callable<String>() {\n      @Override\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n    });\n  }\n",
        "begin_line": 1558,
        "end_line": 1579,
        "comment": "\n   * Converts the main parse tree back to JS code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.066
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.call#1560",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-530fcc3b-d7c8-456c-a4ac-3e5f8cae4e75.call()",
        "snippet": "      @Override\n      public String call() throws Exception {\n        Tracer tracer = newTracer(\"toSource\");\n        try {\n          CodeBuilder cb = new CodeBuilder();\n          if (jsRoot != null) {\n            int i = 0;\n            for (Node scriptNode = jsRoot.getFirstChild();\n                 scriptNode != null;\n                 scriptNode = scriptNode.getNext()) {\n              toSource(cb, i++, scriptNode);\n            }\n          }\n          return cb.toString();\n        } finally {\n          stopTracer(tracer, \"toSource\");\n        }\n      }\n",
        "begin_line": 1560,
        "end_line": 1577,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.066
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isNumber#2316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNumber()",
        "snippet": "  public boolean isNumber() {\n    return this.getType() == Token.NUMBER;\n  }\n",
        "begin_line": 2316,
        "end_line": 2318,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0657
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeUtil.precedence#1163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Token.name(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 1163,
        "end_line": 1236,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0655
        },
        "num_failing_tests": 7
    },
    {
        "name": "JsFileParser.parseLine#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.parseLine(java.lang.String)",
        "snippet": "  @Override\n  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\n    if (line.indexOf(\"provide\") != -1 ||\n        line.indexOf(\"require\") != -1 ||\n        line.indexOf(\"addDependency\") != -1) {\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }\n",
        "begin_line": 137,
        "end_line": 188,
        "comment": "\n   * Parses a line of JavaScript, extracting goog.provide and goog.require\n   * information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0653
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#824",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-813153cb-ebe1-4641-8537-253962197a6d.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new ControlStructureCheck(compiler);\n    }\n",
        "begin_line": 824,
        "end_line": 827,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0653
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.getChecks#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getChecks()",
        "snippet": "  @Override\n  protected List<PassFactory> getChecks() {\n    List<PassFactory> checks = Lists.newArrayList();\n\n    if (options.closurePass) {\n      checks.add(closureGoogScopeAliases);\n    }\n\n    if (options.nameAnonymousFunctionsOnly) {\n      if (options.anonymousFunctionNaming ==\n          AnonymousFunctionNamingPolicy.MAPPED) {\n        checks.add(nameMappedAnonymousFunctions);\n      } else if (options.anonymousFunctionNaming ==\n          AnonymousFunctionNamingPolicy.UNMAPPED) {\n        checks.add(nameUnmappedAnonymousFunctions);\n      }\n      return checks;\n    }\n\n    if (options.jqueryPass) {\n      checks.add(jqueryAliases.makeOneTimePass());\n    }\n\n    checks.add(checkSideEffects);\n\n    if (options.checkSuspiciousCode ||\n        options.enables(DiagnosticGroups.GLOBAL_THIS) ||\n        options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n      checks.add(suspiciousCode);\n    }\n\n    if (options.checkControlStructures\n        || options.enables(DiagnosticGroups.ES5_STRICT))  {\n      checks.add(checkControlStructures);\n    }\n\n    if (options.checkRequires.isOn()) {\n      checks.add(checkRequires);\n    }\n\n    if (options.checkProvides.isOn()) {\n      checks.add(checkProvides);\n    }\n\n    // The following passes are more like \"preprocessor\" passes.\n    // It's important that they run before most checking passes.\n    // Perhaps this method should be renamed?\n    if (options.generateExports) {\n      checks.add(generateExports);\n    }\n\n    if (options.exportTestFunctions) {\n      checks.add(exportTestFunctions);\n    }\n\n    if (options.closurePass) {\n      checks.add(closurePrimitives.makeOneTimePass());\n    }\n\n    if (options.closurePass && options.checkMissingGetCssNameLevel.isOn()) {\n      checks.add(closureCheckGetCssName);\n    }\n\n    if (options.syntheticBlockStartMarker != null) {\n      // This pass must run before the first fold constants pass.\n      checks.add(createSyntheticBlocks);\n    }\n\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n      checks.add(checkRegExp);\n    }\n\n    if (options.aggressiveVarCheck.isOn()) {\n      checks.add(checkVariableReferences);\n    }\n\n    // This pass should run before types are assigned.\n    if (options.processObjectPropertyString) {\n      checks.add(objectPropertyStringPreprocess);\n    }\n\n    if (options.checkTypes || options.inferTypes) {\n      checks.add(resolveTypes.makeOneTimePass());\n      checks.add(inferTypes.makeOneTimePass());\n      if (options.checkTypes) {\n        checks.add(checkTypes.makeOneTimePass());\n      } else {\n        checks.add(inferJsDocInfo.makeOneTimePass());\n      }\n    }\n\n    if (options.checkUnreachableCode.isOn() ||\n        (options.checkTypes && options.checkMissingReturn.isOn())) {\n      checks.add(checkControlFlow);\n    }\n\n    // CheckAccessControls only works if check types is on.\n    if (options.checkTypes &&\n        (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n         || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n      checks.add(checkAccessControls);\n    }\n\n    if (options.checkGlobalNamesLevel.isOn()) {\n      checks.add(checkGlobalNames);\n    }\n\n    if (options.enables(DiagnosticGroups.ES5_STRICT) || options.checkCaja) {\n      checks.add(checkStrictMode);\n    }\n\n    // Replace 'goog.getCssName' before processing defines but after the\n    // other checks have been done.\n    if (options.closurePass) {\n      checks.add(closureReplaceGetCssName);\n    }\n\n    // i18n\n    // If you want to customize the compiler to use a different i18n pass,\n    // you can create a PassConfig that calls replacePassFactory\n    // to replace this.\n    checks.add(options.messageBundle != null ?\n        replaceMessages : createEmptyPass(\"replaceMessages\"));\n\n    if (options.getTweakProcessing().isOn()) {\n      checks.add(processTweaks);\n    }\n\n    // Defines in code always need to be processed.\n    checks.add(processDefines);\n\n    if (options.instrumentationTemplate != null ||\n        options.recordFunctionInformation) {\n      checks.add(computeFunctionNames);\n    }\n\n    if (options.nameReferenceGraphPath != null &&\n        !options.nameReferenceGraphPath.isEmpty()) {\n      checks.add(printNameReferenceGraph);\n    }\n\n    if (options.nameReferenceReportPath != null &&\n        !options.nameReferenceReportPath.isEmpty()) {\n      checks.add(printNameReferenceReport);\n    }\n\n    assertAllOneTimePasses(checks);\n    return checks;\n  }\n",
        "begin_line": 189,
        "end_line": 338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0653
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#786",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-b3e89110-5108-47dc-baeb-b38a18261f04.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      List<Callback> sharedCallbacks = Lists.newArrayList();\n      if (options.checkSuspiciousCode) {\n        sharedCallbacks.add(new CheckAccidentalSemicolon(CheckLevel.WARNING));\n      }\n\n      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        sharedCallbacks.add(new CheckGlobalThis(compiler));\n      }\n\n      if (options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n        sharedCallbacks.add(new CheckDebuggerStatement(compiler));\n      }\n\n      return combineChecks(compiler, sharedCallbacks);\n    }\n",
        "begin_line": 786,
        "end_line": 803,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0651
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckAccidentalSemicolon.CheckAccidentalSemicolon#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "class_name": "com.google.javascript.jscomp.CheckAccidentalSemicolon",
        "signature": "com.google.javascript.jscomp.CheckAccidentalSemicolon.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  CheckAccidentalSemicolon(CheckLevel level) {\n    this.level = level;\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0648
        },
        "num_failing_tests": 2
    },
    {
        "name": "GraphReachability.GraphReachability#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.GraphReachability(com.google.javascript.jscomp.graph.DiGraph<N, E>)",
        "snippet": "  public GraphReachability(DiGraph<N, E> graph) {\n    this(graph, null);\n  }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0646
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setInlineFunctions#1149",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineFunctions(com.google.javascript.jscomp.CompilerOptions.Reach)",
        "snippet": "  public void setInlineFunctions(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.inlineFunctions = true;\n        this.inlineLocalFunctions = true;\n        break;\n      case LOCAL_ONLY:\n        this.inlineFunctions = false;\n        this.inlineLocalFunctions = true;\n        break;\n      case NONE:\n        this.inlineFunctions = false;\n        this.inlineLocalFunctions = false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }\n",
        "begin_line": 1149,
        "end_line": 1166,
        "comment": "\n   * Set the function inlining policy for the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0646
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilationLevel.setOptionsForCompilationLevel#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilationLevel.java",
        "class_name": "com.google.javascript.jscomp.CompilationLevel",
        "signature": "com.google.javascript.jscomp.CompilationLevel.setOptionsForCompilationLevel(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void setOptionsForCompilationLevel(CompilerOptions options) {\n    switch (this) {\n      case WHITESPACE_ONLY:\n        applyBasicCompilationOptions(options);\n        break;\n      case SIMPLE_OPTIMIZATIONS:\n        applySafeCompilationOptions(options);\n        break;\n      case ADVANCED_OPTIMIZATIONS:\n        applyFullCompilationOptions(options);\n        break;\n      default:\n        throw new RuntimeException(\"Unknown compilation level.\");\n    }\n  }\n",
        "begin_line": 53,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0646
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilationLevel.applySafeCompilationOptions#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilationLevel.java",
        "class_name": "com.google.javascript.jscomp.CompilationLevel",
        "signature": "com.google.javascript.jscomp.CompilationLevel.applySafeCompilationOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  private static void applySafeCompilationOptions(CompilerOptions options) {\n    // ReplaceIdGenerators is on by default, but should run in simple mode.\n    options.replaceIdGenerators = false;\n\n    // Does not call applyBasicCompilationOptions(options) because the call to\n    // skipAllCompilerPasses() cannot be easily undone.\n    options.dependencyOptions.setDependencySorting(true);\n    options.closurePass = true;\n    options.setRenamingPolicy(\n        VariableRenamingPolicy.LOCAL, PropertyRenamingPolicy.OFF);\n    options.shadowVariables = true;\n    options.setInlineVariables(Reach.LOCAL_ONLY);\n    options.flowSensitiveInlineVariables = true;\n    options.setInlineFunctions(Reach.LOCAL_ONLY);\n    options.setAssumeClosuresOnlyCaptureReferences(true);\n    options.checkGlobalThisLevel = CheckLevel.OFF;\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n    options.deadAssignmentElimination = true;\n    options.collapseVariableDeclarations = true;\n    options.convertToDottedProperties = true;\n    options.labelRenaming = true;\n    options.removeDeadCode = true;\n    options.optimizeArgumentsArray = true;\n    options.setRemoveUnusedVariables(Reach.LOCAL_ONLY);\n    options.collapseObjectLiterals = true;\n    options.protectHiddenSideEffects = true;\n\n    // Allows annotations that are not standard.\n    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n        CheckLevel.OFF);\n  }\n",
        "begin_line": 95,
        "end_line": 126,
        "comment": "\n   * Add options that are safe. Safe means options that won't break the\n   * JavaScript code even if no symbols are exported and no coding convention\n   * is used.\n   * @param options The CompilerOptions object to set the options on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0646
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setInlineVariables#1171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineVariables(com.google.javascript.jscomp.CompilerOptions.Reach)",
        "snippet": "  public void setInlineVariables(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.inlineVariables = true;\n        this.inlineLocalVariables = true;\n        break;\n      case LOCAL_ONLY:\n        this.inlineVariables = false;\n        this.inlineLocalVariables = true;\n        break;\n      case NONE:\n        this.inlineVariables = false;\n        this.inlineLocalVariables = false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }\n",
        "begin_line": 1171,
        "end_line": 1188,
        "comment": "\n   * Set the variable inlining policy for the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0643
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setRemoveUnusedVariables#1208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedVariables(com.google.javascript.jscomp.CompilerOptions.Reach)",
        "snippet": "  public void setRemoveUnusedVariables(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.removeUnusedVars = true;\n        this.removeUnusedLocalVars = true;\n        break;\n      case LOCAL_ONLY:\n        this.removeUnusedVars = false;\n        this.removeUnusedLocalVars = true;\n        break;\n      case NONE:\n        this.removeUnusedVars = false;\n        this.removeUnusedLocalVars = false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }\n",
        "begin_line": 1208,
        "end_line": 1225,
        "comment": "\n   * Set the variable removal policy for the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0643
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.assertAllLoopablePasses#815",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  private void assertAllLoopablePasses(List<PassFactory> passes) {\n    for (PassFactory pass : passes) {\n      Preconditions.checkState(!pass.isOneTimePass());\n    }\n  }\n",
        "begin_line": 815,
        "end_line": 819,
        "comment": " Verify that all the passes are multi-run passes. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.toSource#1672",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.jscomp.Compiler.CodeBuilder, int, com.google.javascript.rhino.Node)",
        "snippet": "  public void toSource(final CodeBuilder cb,\n                       final int inputSeqNum,\n                       final Node root) {\n    runInCompilerThread(new Callable<Void>() {\n      @Override\n      public Void call() throws Exception {\n        if (options.printInputDelimiter) {\n          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {\n            cb.append(\"\\n\");  // Make sure that the label starts on a new line\n          }\n          Preconditions.checkState(root.isScript());\n\n          String delimiter = options.inputDelimiter;\n\n          String inputName = root.getInputId().getIdName();\n          String sourceName = root.getSourceFileName();\n          Preconditions.checkState(sourceName != null);\n          Preconditions.checkState(!sourceName.isEmpty());\n\n          delimiter = delimiter\n              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))\n              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));\n\n          cb.append(delimiter)\n            .append(\"\\n\");\n        }\n        if (root.getJSDocInfo() != null &&\n            root.getJSDocInfo().getLicense() != null) {\n          cb.append(\"/*\\n\")\n            .append(root.getJSDocInfo().getLicense())\n            .append(\"*/\\n\");\n        }\n\n        // If there is a valid source map, then indicate to it that the current\n        // root node's mappings are offset by the given string builder buffer.\n        if (options.sourceMapOutputPath != null) {\n          sourceMap.setStartingPosition(\n              cb.getLineIndex(), cb.getColumnIndex());\n        }\n\n        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n        // for the first input file\n        String code = toSource(root, sourceMap, inputSeqNum == 0);\n        if (!code.isEmpty()) {\n          cb.append(code);\n\n          // In order to avoid parse ambiguity when files are concatenated\n          // together, all files should end in a semi-colon. Do a quick\n          // heuristic check if there's an obvious semi-colon already there.\n          int length = code.length();\n          char lastChar = code.charAt(length - 1);\n          char secondLastChar = length >= 2 ?\n              code.charAt(length - 2) : '\\0';\n          boolean hasSemiColon = lastChar == ';' ||\n              (lastChar == '\\n' && secondLastChar == ';');\n          if (!hasSemiColon) {\n            cb.append(\";\");\n          }\n        }\n        return null;\n      }\n    });\n  }\n",
        "begin_line": 1672,
        "end_line": 1734,
        "comment": "\n   * Writes out JS code from a root node. If printing input delimiters, this\n   * method will attach a comment to the start of the text indicating which\n   * input the output derived from. If there were any preserve annotations\n   * within the root's source, they will also be printed in a block comment\n   * at the beginning of the output.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0641
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.toString#1804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.CodeBuilder.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return sb.toString();\n    }\n",
        "begin_line": 1804,
        "end_line": 1807,
        "comment": " Returns all text in the text buffer. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.onRedeclaration#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.DefaultRedeclarationHandler.onRedeclaration(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "    @Override\n    public void onRedeclaration(\n        Scope s, String name, Node n, CompilerInput input) {\n      Node parent = n.getParent();\n\n      // Don't allow multiple variables to be declared at the top-level scope\n      if (scope.isGlobal()) {\n        Scope.Var origVar = scope.getVar(name);\n        Node origParent = origVar.getParentNode();\n        if (origParent.isCatch() &&\n            parent.isCatch()) {\n          // Okay, both are 'catch(x)' variables.\n          return;\n        }\n\n        boolean allowDupe = hasDuplicateDeclarationSuppression(n, origVar);\n\n        if (!allowDupe) {\n          compiler.report(\n              JSError.make(NodeUtil.getSourceName(n), n,\n                           VAR_MULTIPLY_DECLARED_ERROR,\n                           name,\n                           (origVar.input != null\n                            ? origVar.input.getName()\n                            : \"??\")));\n        }\n      } else if (name.equals(ARGUMENTS) && !NodeUtil.isVarDeclaration(n)) {\n        // Disallow shadowing \"arguments\" as we can't handle with our current\n        // scope modeling.\n        compiler.report(\n            JSError.make(NodeUtil.getSourceName(n), n,\n                VAR_ARGUMENTS_SHADOWED_ERROR));\n      }\n    }\n",
        "begin_line": 192,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0639
        },
        "num_failing_tests": 1
    },
    {
        "name": "DeadAssignmentsElimination.DeadAssignmentsElimination#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.DeadAssignmentsElimination(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public DeadAssignmentsElimination(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0637
        },
        "num_failing_tests": 2
    },
    {
        "name": "DeadAssignmentsElimination.enterScope#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n        t.getScope().getVarCount()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }\n",
        "begin_line": 70,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0637
        },
        "num_failing_tests": 2
    },
    {
        "name": "DeadAssignmentsElimination.exitScope#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0637
        },
        "num_failing_tests": 2
    },
    {
        "name": "DeadAssignmentsElimination.visit#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n  }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0637
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.shouldTraverse#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isObjectLit()) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }\n",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrepareAst.normalizeObjectLiteralAnnotations#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.normalizeObjectLiteralAnnotations(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeObjectLiteralAnnotations(Node objlit) {\n      Preconditions.checkState(objlit.isObjectLit());\n      for (Node key = objlit.getFirstChild();\n           key != null; key = key.getNext()) {\n        Node value = key.getFirstChild();\n        normalizeObjectLiteralKeyAnnotations(objlit, key, value);\n      }\n    }\n",
        "begin_line": 151,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 7
    },
    {
        "name": "TypeSafeDispatcher.process#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return (node instanceof EmptyExpression) ?\n            processEmptyExpression((EmptyExpression) node) :\n            processEmptyStatement((EmptyStatement) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 120,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0636
        },
        "num_failing_tests": 7
    },
    {
        "name": "ControlStructureCheck.ControlStructureCheck#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.ControlStructureCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  ControlStructureCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0634
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlStructureCheck.process#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    check(root);\n  }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0634
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlStructureCheck.check#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.check(com.google.javascript.rhino.Node)",
        "snippet": "  private void check(Node node) {\n    switch (node.getType()) {\n      case Token.WITH:\n        JSDocInfo info = node.getJSDocInfo();\n        boolean allowWith =\n            info != null && info.getSuppressions().contains(\"with\");\n        if (!allowWith) {\n          report(node, USE_OF_WITH);\n        }\n        break;\n    }\n\n    for (Node bChild = node.getFirstChild(); bChild != null;) {\n      Node next = bChild.getNext();\n      check(bChild);\n      bChild = next;\n    }\n  }\n",
        "begin_line": 54,
        "end_line": 71,
        "comment": "\n   * Reports errors for any invalid use of control structures.\n   *\n   * @param node Current node to check.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0634
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.consume#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.consume(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  void consume(List<PassFactory> factories) {\n    Loop currentLoop = new LoopInternal();\n    boolean isCurrentLoopPopulated = false;\n    for (PassFactory factory : factories) {\n      if (factory.isOneTimePass()) {\n        if (isCurrentLoopPopulated) {\n          passes.add(currentLoop);\n\n          currentLoop = new LoopInternal();\n          isCurrentLoopPopulated = false;\n        }\n        addOneTimePass(factory);\n      } else {\n        currentLoop.addLoopedPass(factory);\n        isCurrentLoopPopulated = true;\n      }\n    }\n\n    if (isCurrentLoopPopulated) {\n      passes.add(currentLoop);\n    }\n  }\n",
        "begin_line": 125,
        "end_line": 146,
        "comment": "\n   * Add the passes generated by the given factories to the compile sequence.\n   *\n   * Automatically pulls multi-run passes into fixed point loops. If there\n   * are 2 or more multi-run passes in a row, they will run together in\n   * the same fixed point loop. If A and B are in the same fixed point loop,\n   * the loop will continue to run both A and B until both are finished\n   * making changes.\n   *\n   * Other than that, the PhaseOptimizer is free to tweak the order and\n   * frequency of multi-run passes in a fixed-point loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.063
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isUndefined#1356",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isUndefined(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isUndefined(Node n) {\n    switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }\n    return false;\n  }\n",
        "begin_line": 1356,
        "end_line": 1364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.combineChecks#1212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.combineChecks(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback>)",
        "snippet": "  private static HotSwapCompilerPass combineChecks(AbstractCompiler compiler,\n      List<Callback> callbacks) {\n    Preconditions.checkArgument(callbacks.size() > 0);\n    Callback[] array = callbacks.toArray(new Callback[callbacks.size()]);\n    return new CombinedCompilerPass(compiler, array);\n  }\n",
        "begin_line": 1212,
        "end_line": 1217,
        "comment": " Executes the given callbacks with a {@link CombinedCompilerPass}. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0628
        },
        "num_failing_tests": 2
    },
    {
        "name": "WarningLevel.addDefaultWarnings#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningLevel.java",
        "class_name": "com.google.javascript.jscomp.WarningLevel",
        "signature": "com.google.javascript.jscomp.WarningLevel.addDefaultWarnings(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  private static void addDefaultWarnings(CompilerOptions options) {\n    options.checkSuspiciousCode = true;\n    options.checkUnreachableCode = CheckLevel.WARNING;\n    options.checkControlStructures = true;\n  }\n",
        "begin_line": 83,
        "end_line": 87,
        "comment": "\n   * Add the default checking pass to the compilation options.\n   * @param options The CompilerOptions object to set the options on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.collectDefines#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.collectDefines(com.google.javascript.rhino.Node, com.google.javascript.jscomp.GlobalNamespace)",
        "snippet": "  private Map<String, DefineInfo> collectDefines(Node root,\n      GlobalNamespace namespace) {\n    // Find all the global names with a @define annotation\n    List<Name> allDefines = Lists.newArrayList();\n    for (Name name : namespace.getNameIndex().values()) {\n      Ref decl = name.getDeclaration();\n      if (name.docInfo != null && name.docInfo.isDefine()) {\n        // Process defines should not depend on check types being enabled,\n        // so we look for the JSDoc instead of the inferred type.\n        if (isValidDefineType(name.docInfo.getType())) {\n          allDefines.add(name);\n        } else {\n          JSError error = JSError.make(\n              decl.getSourceName(),\n              decl.node, INVALID_DEFINE_TYPE_ERROR);\n          compiler.report(error);\n        }\n      } else {\n        for (Ref ref : name.getRefs()) {\n          if (ref == decl) {\n            // Declarations were handled above.\n            continue;\n          }\n\n          Node n = ref.node;\n          Node parent = ref.node.getParent();\n          JSDocInfo info = n.getJSDocInfo();\n          if (info == null &&\n              parent.isVar() && parent.hasOneChild()) {\n            info = parent.getJSDocInfo();\n          }\n\n          if (info != null && info.isDefine()) {\n            allDefines.add(name);\n            break;\n          }\n        }\n      }\n    }\n\n    CollectDefines pass = new CollectDefines(compiler, allDefines);\n    NodeTraversal.traverse(compiler, root, pass);\n    return pass.getAllDefines();\n  }\n",
        "begin_line": 172,
        "end_line": 215,
        "comment": "\n   * Finds all defines, and creates a {@link DefineInfo} data structure for\n   * each one.\n   * @return A map of {@link DefineInfo} structures, keyed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.has#2659",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred) {\n    if (pred.apply(node)) {\n      return true;\n    }\n\n    if (!traverseChildrenPred.apply(node)) {\n      return false;\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      if (has(c, pred, traverseChildrenPred)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 2659,
        "end_line": 2677,
        "comment": "\n   * @return Whether the predicate is true for the node or any of its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 2
    },
    {
        "name": "GraphReachability.EdgeTuple#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple.EdgeTuple(N, E, N)",
        "snippet": "    public EdgeTuple(N sourceNode, E edge, N destNode) {\n      this.sourceNode = sourceNode;\n      this.edge = edge;\n      this.destNode = destNode;\n    }\n",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.process#337",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.LoopInternal.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      Preconditions.checkState(!loopMutex, \"Nested loops are forbidden\");\n      loopMutex = true;\n      if (randomizeLoops) {\n        randomizePasses();\n      } else {\n        optimizePasses();\n      }\n\n      try {\n        // TODO(nicksantos): Use a smarter algorithm that dynamically adjusts\n        // the order that passes are run in.\n        int count = 0;\n        out: do {\n          if (count++ > MAX_LOOPS) {\n            compiler.throwInternalError(OPTIMIZE_LOOP_ERROR, null);\n          }\n\n          recentChange.reset();  // reset before this round of optimizations\n\n          for (CompilerPass pass : myPasses) {\n            pass.process(externs, root);\n            if (hasHaltingErrors()) {\n              break out;\n            }\n          }\n\n        } while (recentChange.hasCodeChanged() && !hasHaltingErrors());\n\n        if (randomizeLoops) {\n          loopsRun.add(getPassOrder());\n        }\n      } finally {\n        loopMutex = false;\n      }\n    }\n",
        "begin_line": 337,
        "end_line": 373,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckUnreachableCode.CheckUnreachableCode#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.CheckUnreachableCode(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  CheckUnreachableCode(AbstractCompiler compiler, CheckLevel level) {\n    this.compiler = compiler;\n    this.level = level;\n  }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckUnreachableCode.enterScope#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    initScope(t.getControlFlowGraph());\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckUnreachableCode.shouldTraverse#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    GraphNode<Node, Branch> gNode = t.getControlFlowGraph().getNode(n);\n    if (gNode != null && gNode.getAnnotation() != GraphReachability.REACHABLE) {\n\n      // Only report error when there are some line number informations.\n      // There are synthetic nodes with no line number informations, nodes\n      // introduce by other passes (although not likely since this pass should\n      // be executed early) or some rhino bug.\n      if (n.getLineno() != -1 &&\n          // Allow spurious semi-colons and spurious breaks.\n          !n.isEmpty() && !n.isBreak()) {\n        compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n        // From now on, we are going to assume the user fixed the error and not\n        // give more warning related to code section reachable from this node.\n        new GraphReachability<Node, ControlFlowGraph.Branch>(\n            t.getControlFlowGraph()).recompute(n);\n\n        // Saves time by not traversing children.\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 51,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckUnreachableCode.initScope#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.initScope(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>)",
        "snippet": "  private void initScope(ControlFlowGraph<Node> controlFlowGraph) {\n    new GraphReachability<Node, ControlFlowGraph.Branch>(\n        controlFlowGraph, new ReachablePredicate()).compute(\n            controlFlowGraph.getEntry().getValue());\n  }\n",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckUnreachableCode.exitScope#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckUnreachableCode.visit#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0619
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.hasRegExpGlobalReferences#2302",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences()",
        "snippet": "  @Override\n  boolean hasRegExpGlobalReferences() {\n    return hasRegExpGlobalReferences;\n  }\n",
        "begin_line": 2302,
        "end_line": 2305,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.maybeLineBreak#463",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeLineBreak()",
        "snippet": "    @Override\n    void maybeLineBreak() {\n      if (lineBreak) {\n        if (sawFunction) {\n          startNewLine();\n          sawFunction = false;\n        }\n      }\n\n      // Since we are at a legal line break, can we upgrade the\n      // preferred break position?  We prefer to break after a\n      // semicolon rather than before it.\n      int len = code.length();\n      if (preferredBreakPosition == len - 1) {\n        char ch = code.charAt(len - 1);\n        if (ch == ';') {\n          preferredBreakPosition = len;\n        }\n      }\n      maybeCutLine();\n    }\n",
        "begin_line": 463,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0614
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.rebuildInputsFromModules#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.rebuildInputsFromModules()",
        "snippet": "  public void rebuildInputsFromModules() {\n    inputs = getAllInputsFromModules(modules);\n    initInputsByIdMap();\n  }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "\n   * Rebuilds the internal list of inputs by iterating over all modules.\n   * This is necessary if inputs have been added to or removed from a module\n   * after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0611
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.repartitionInputs#1428",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.repartitionInputs()",
        "snippet": "  private void repartitionInputs() {\n    fillEmptyModules(modules);\n    rebuildInputsFromModules();\n  }\n",
        "begin_line": 1428,
        "end_line": 1431,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0611
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isAssignmentOp#1439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1439,
        "end_line": 1456,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.061
        },
        "num_failing_tests": 7
    },
    {
        "name": "JsFileLineParser.doParse#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.doParse(java.lang.String, java.io.Reader)",
        "snippet": "  void doParse(String filePath, Reader fileContents) {\n    this.filePath = filePath;\n    parseSucceeded = true;\n\n    BufferedReader lineBuffer = new BufferedReader(fileContents);\n\n    // Parse all lines.\n    String line = null;\n    lineNum = 0;\n    boolean inMultilineComment = false;\n\n    try {\n      while (null != (line = lineBuffer.readLine())) {\n        ++lineNum;\n        try {\n          String revisedLine = line;\n          if (inMultilineComment) {\n            int endOfComment = revisedLine.indexOf(\"*/\");\n            if (endOfComment != -1) {\n              revisedLine = revisedLine.substring(endOfComment + 2);\n              inMultilineComment = false;\n            } else {\n              revisedLine = \"\";\n            }\n          }\n\n          if (!inMultilineComment) {\n            while (true) {\n              int startOfLineComment = revisedLine.indexOf(\"//\");\n              int startOfMultilineComment = revisedLine.indexOf(\"/*\");\n              if (startOfLineComment != -1 &&\n                  (startOfMultilineComment == -1 ||\n                   startOfLineComment < startOfMultilineComment)) {\n                revisedLine = revisedLine.substring(0, startOfLineComment);\n                break;\n              } else if (startOfMultilineComment != -1) {\n                int endOfMultilineComment = revisedLine.indexOf(\"*/\",\n                    startOfMultilineComment + 2);\n                if (endOfMultilineComment == -1) {\n                  revisedLine = revisedLine.substring(\n                      0, startOfMultilineComment);\n                  inMultilineComment = true;\n                  break;\n                } else {\n                  revisedLine =\n                      revisedLine.substring(0, startOfMultilineComment) +\n                      revisedLine.substring(endOfMultilineComment + 2);\n                }\n              } else {\n                break;\n              }\n            }\n          }\n\n          if (!revisedLine.isEmpty()) {\n            // This check for shortcut mode should be redundant, but\n            // it's done for safety reasons.\n            if (!parseLine(revisedLine) && shortcutMode) {\n              break;\n            }\n          }\n        } catch (ParseException e) {\n          // Inform the error handler of the exception.\n          errorManager.report(\n              e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING,\n              JSError.make(filePath, lineNum, 0 /* char offset */,\n                  e.isFatal() ? PARSE_ERROR : PARSE_WARNING,\n                  e.getMessage(), line));\n          parseSucceeded = parseSucceeded && !e.isFatal();\n        }\n      }\n    } catch (IOException e) {\n      errorManager.report(CheckLevel.ERROR,\n          JSError.make(filePath, 0, 0 /* char offset */,\n              PARSE_ERROR, \"Error reading file: \" + filePath));\n      parseSucceeded = false;\n    }\n  }\n",
        "begin_line": 119,
        "end_line": 196,
        "comment": "\n   * Performs the line-by-line parsing of the given fileContents. This method\n   * strips out JavaScript comments and then uses the abstract parseLine()\n   * method to do the line parsing.\n   *\n   * @param filePath The path to the file being parsed. Used for reporting parse\n   *     exceptions.\n   * @param fileContents A reader for the contents of the file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.addLoopedPass#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.LoopInternal.addLoopedPass(com.google.javascript.jscomp.PassFactory)",
        "snippet": "    @Override\n    void addLoopedPass(PassFactory factory) {\n      String name = factory.getName();\n      Preconditions.checkArgument(!myNames.contains(name),\n          \"Already a pass with name '%s' in this loop\", name);\n      myNames.add(factory.getName());\n      myPasses.add(new PassFactoryDelegate(compiler, factory));\n    }\n",
        "begin_line": 317,
        "end_line": 324,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isConstantKey#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isConstantKey(java.lang.String)",
        "snippet": "    @Override public boolean isConstantKey(String keyName) {\n      return nextConvention.isConstantKey(keyName);\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isConstantKey#252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.isConstantKey(java.lang.String)",
        "snippet": "    @Override\n    public boolean isConstantKey(String variableName) {\n      return false;\n    }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isBleedingFunction#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isBleedingFunction()",
        "snippet": "    public boolean isBleedingFunction() {\n      return NodeUtil.isFunctionExpression(getParentNode());\n    }\n",
        "begin_line": 190,
        "end_line": 192,
        "comment": "\n     * Whether this is a bleeding function (an anonymous named function\n     * that bleeds into the inner scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0607
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameVars.enterScope#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.ProcessVars.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      if (t.inGlobalScope()) return;\n\n      Iterator<Var> it = t.getScope().getVars();\n      while (it.hasNext()) {\n        Var current = it.next();\n        if (current.isBleedingFunction()) {\n          localBleedingFunctions.add(current);\n          localBleedingFunctionsPerScope.put(\n              t.getScope().getParent(), current);\n        }\n      }\n    }\n",
        "begin_line": 193,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0607
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setRenamingPolicy#1101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setRenamingPolicy(com.google.javascript.jscomp.VariableRenamingPolicy, com.google.javascript.jscomp.PropertyRenamingPolicy)",
        "snippet": "  public void setRenamingPolicy(VariableRenamingPolicy newVariablePolicy,\n      PropertyRenamingPolicy newPropertyPolicy) {\n    this.variableRenaming = newVariablePolicy;\n    this.propertyRenaming = newPropertyPolicy;\n  }\n",
        "begin_line": 1101,
        "end_line": 1105,
        "comment": "\n   * Sets the variable and property renaming policies for the compiler,\n   * in a way that clears warnings about the renaming policy being\n   * uninitialized from flags.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0607
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setAssumeClosuresOnlyCaptureReferences#1487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setAssumeClosuresOnlyCaptureReferences(boolean)",
        "snippet": "  public void setAssumeClosuresOnlyCaptureReferences(boolean enable) {\n    this.assumeClosuresOnlyCaptureReferences = enable;\n  }\n",
        "begin_line": 1487,
        "end_line": 1489,
        "comment": "\n   * Whether to assume closures capture only what they reference. This allows\n   * more aggressive function inlining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0607
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowSensitiveInlineVariables.visit#177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.GatherCandiates.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode(n);\n      if (graphNode == null) {\n        // Not a CFG node.\n        return;\n      }\n      FlowState<MustDef> state = graphNode.getAnnotation();\n      final MustDef defs = state.getIn();\n      final Node cfgNode = n;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName()) {\n\n            // n.getParent() isn't null. This just the case where n is the root\n            // node that gatherCb started at.\n            if (parent == null) {\n              return;\n            }\n\n            // Make sure that the name node is purely a read.\n            if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n                || parent.isVar() || parent.isInc() || parent.isDec() ||\n                parent.isParamList() || parent.isCatch()) {\n              return;\n            }\n\n            String name = n.getString();\n            if (compiler.getCodingConvention().isExported(name)) {\n              return;\n            }\n\n            Node defNode = reachingDef.getDef(name, cfgNode);\n            // TODO(nicksantos): We need to add some notion of @const outer\n            // scope vars. We can inline those just fine.\n            if (defNode != null &&\n                !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {\n              candidates.add(new Candidate(name, defNode, n, cfgNode));\n            }\n          }\n        }\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }\n",
        "begin_line": 177,
        "end_line": 224,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0605
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowSensitiveInlineVariables.visit#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.GatherCandiates.Anonymous-d4dcd7aa-d999-4c33-8d49-df9c9261e491.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName()) {\n\n            // n.getParent() isn't null. This just the case where n is the root\n            // node that gatherCb started at.\n            if (parent == null) {\n              return;\n            }\n\n            // Make sure that the name node is purely a read.\n            if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n                || parent.isVar() || parent.isInc() || parent.isDec() ||\n                parent.isParamList() || parent.isCatch()) {\n              return;\n            }\n\n            String name = n.getString();\n            if (compiler.getCodingConvention().isExported(name)) {\n              return;\n            }\n\n            Node defNode = reachingDef.getDef(name, cfgNode);\n            // TODO(nicksantos): We need to add some notion of @const outer\n            // scope vars. We can inline those just fine.\n            if (defNode != null &&\n                !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {\n              candidates.add(new Candidate(name, defNode, n, cfgNode));\n            }\n          }\n        }\n",
        "begin_line": 190,
        "end_line": 220,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0605
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowSensitiveInlineVariables.enterScope#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n\n    if (t.inGlobalScope()) {\n      return; // Don't even brother. All global variables are likely escaped.\n    }\n\n    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n        t.getScope().getVarCount()) {\n      return;\n    }\n\n    // Compute the forward reaching definition.\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);\n    // Process the body of the function.\n    Preconditions.checkState(t.getScopeRoot().isFunction());\n    cfa.process(null, t.getScopeRoot().getLastChild());\n    cfg = cfa.getCfg();\n    reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);\n    reachingDef.analyze();\n    candidates = Lists.newLinkedList();\n\n    // Using the forward reaching definition search to find all the inline\n    // candidates\n    new NodeTraversal(compiler, new GatherCandiates()).traverse(\n        t.getScopeRoot().getLastChild());\n\n    // Compute the backward reaching use. The CFG can be reused.\n    reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n    reachingUses.analyze();\n    for (Candidate c : candidates) {\n      if (c.canInline()) {\n        c.inlineVariable();\n      }\n    }\n  }\n",
        "begin_line": 115,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0605
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowGraph.isConditional#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.Branch.isConditional()",
        "snippet": "    public boolean isConditional() {\n      return this == ON_TRUE || this == ON_FALSE;\n    }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0605
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.hoistExterns#1364",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistExterns(com.google.javascript.rhino.Node)",
        "snippet": "  private void hoistExterns(Node externsRoot) {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      if (options.dependencyOptions.needsManagement() &&\n          options.closurePass) {\n        // If we're doing scanning dependency info anyway, use that\n        // information to skip sources that obviously aren't externs.\n        if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty()) {\n          continue;\n        }\n      }\n\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isExterns()) {\n        // If the input file is explicitly marked as an externs file, then\n        // assume the programmer made a mistake and throw it into\n        // the externs pile anyways.\n        externsRoot.addChildToBack(n);\n        input.setIsExtern(true);\n\n        input.getModule().remove(input);\n\n        externs.add(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1364,
        "end_line": 1401,
        "comment": "\n   * Hoists inputs with the @externs annotation into the externs list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0605
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeCollectPropertyAssignments.isInterestingValue#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java",
        "class_name": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
        "signature": "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments.isInterestingValue(com.google.javascript.rhino.Node)",
        "snippet": "  boolean isInterestingValue(Node n) {\n    return n.isObjectLit() || n.isArrayLit();\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0605
        },
        "num_failing_tests": 1
    },
    {
        "name": "SortedDependencies.getDependenciesOf#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.getDependenciesOf(java.util.List<INPUT>, boolean)",
        "snippet": "  public List<INPUT> getDependenciesOf(List<INPUT> roots, boolean sorted) {\n    Preconditions.checkArgument(inputs.containsAll(roots));\n    Set<INPUT> included = Sets.newHashSet();\n    Deque<INPUT> worklist = new ArrayDeque<INPUT>(roots);\n    while (!worklist.isEmpty()) {\n      INPUT current = worklist.pop();\n      if (included.add(current)) {\n        for (String req : current.getRequires()) {\n          INPUT dep = provideMap.get(req);\n          if (dep != null) {\n            worklist.add(dep);\n          }\n        }\n      }\n    }\n\n    ImmutableList.Builder<INPUT> builder = ImmutableList.builder();\n    for (INPUT current : (sorted ? sortedList : inputs)) {\n      if (included.contains(current)) {\n        builder.add(current);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 210,
        "end_line": 233,
        "comment": "\n   * Gets all the dependencies of the given roots. The inputs must be returned\n   * in a stable order. In other words, if A comes before B, and A does not\n   * transitively depend on B, then A must also come before B in the returned\n   * list.\n   *\n   * @param sorted If true, get them in topologically sorted order. If false,\n   *     get them in the original order they were passed to the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.removeAll#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.removeAll()",
        "snippet": "  public void removeAll() {\n    for (CompilerInput input : inputs) {\n      input.setModule(null);\n    }\n    inputs.clear();\n  }\n",
        "begin_line": 145,
        "end_line": 150,
        "comment": " Removes all of the inputs from this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowSensitiveInlineVariables.FlowSensitiveInlineVariables#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.FlowSensitiveInlineVariables(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public FlowSensitiveInlineVariables(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowSensitiveInlineVariables.exitScope#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {}\n",
        "begin_line": 152,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowSensitiveInlineVariables.process#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    (new NodeTraversal(compiler, this)).traverseRoots(externs, root);\n  }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "FlowSensitiveInlineVariables.visit#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // TODO(user): While the helpers do a subtree traversal on the AST, the\n    // compiler pass itself only traverse the AST to look for function\n    // declarations to perform dataflow analysis on. We could combine\n    // the traversal in DataFlowAnalysis's computeEscaped later to save some\n    // time.\n  }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.CallbackWrapper#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.CallbackWrapper(com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "    private CallbackWrapper(Callback callback) {\n      this.callback = callback;\n      if (callback instanceof ScopedCallback) {\n        scopedCallback = (ScopedCallback) callback;\n      } else {\n        scopedCallback = null;\n      }\n    }\n",
        "begin_line": 108,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.enterScopeIfActive#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.enterScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void enterScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.enterScope(t);\n      }\n    }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.exitScopeIfActive#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.exitScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void exitScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.exitScope(t);\n      }\n    }\n",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0603
        },
        "num_failing_tests": 2
    },
    {
        "name": "DependencyOptions.shouldSortDependencies#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.shouldSortDependencies()",
        "snippet": "  boolean shouldSortDependencies() {\n    return sortDependencies;\n  }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0601
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.unrollBinaryOperator#741",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.unrollBinaryOperator(com.google.javascript.rhino.Node, int, java.lang.String, com.google.javascript.jscomp.CodeGenerator.Context, com.google.javascript.jscomp.CodeGenerator.Context, int, int)",
        "snippet": "  private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence) {\n    Node firstNonOperator = n.getFirstChild();\n    while (firstNonOperator.getType() == op) {\n      firstNonOperator = firstNonOperator.getFirstChild();\n    }\n\n    addExpr(firstNonOperator, leftPrecedence, context);\n\n    Node current = firstNonOperator;\n    do {\n      current = current.getParent();\n      cc.addOp(opStr, true);\n      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n    } while (current != n);\n  }\n",
        "begin_line": 741,
        "end_line": 757,
        "comment": "\n   * We could use addList recursively here, but sometimes we produce\n   * very deeply nested operators and run out of stack space, so we\n   * just unroll the recursion when possible.\n   *\n   * We assume nodes are left-recursive.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0601
        },
        "num_failing_tests": 7
    },
    {
        "name": "DependencyOptions.shouldPruneDependencies#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.shouldPruneDependencies()",
        "snippet": "  boolean shouldPruneDependencies() {\n    return pruneDependencies;\n  }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0599
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilationLevel.CompilationLevel#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilationLevel.java",
        "class_name": "com.google.javascript.jscomp.CompilationLevel",
        "signature": "com.google.javascript.jscomp.CompilationLevel.CompilationLevel()",
        "snippet": "  private CompilationLevel() {}\n",
        "begin_line": 51,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0599
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortedDependencies.topologicalStableSort#239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.topologicalStableSort(java.util.List<T>, com.google.common.collect.Multimap<T, T>)",
        "snippet": "  private static <T> List<T> topologicalStableSort(\n      List<T> items, Multimap<T, T> deps) {\n    if (items.size() == 0) {\n      // Priority queue blows up if we give it a size of 0. Since we need\n      // to special case this either way, just bail out.\n      return Lists.newArrayList();\n    }\n\n    final Map<T, Integer> originalIndex = Maps.newHashMap();\n    for (int i = 0; i < items.size(); i++) {\n      originalIndex.put(items.get(i), i);\n    }\n\n    PriorityQueue<T> inDegreeZero = new PriorityQueue<T>(items.size(),\n        new Comparator<T>() {\n      @Override\n      public int compare(T a, T b) {\n        return originalIndex.get(a).intValue() -\n            originalIndex.get(b).intValue();\n      }\n    });\n    List<T> result = Lists.newArrayList();\n\n    Multiset<T> inDegree = HashMultiset.create();\n    Multimap<T, T> reverseDeps = ArrayListMultimap.create();\n    Multimaps.invertFrom(deps, reverseDeps);\n\n    // First, add all the inputs with in-degree 0.\n    for (T item : items) {\n      Collection<T> itemDeps = deps.get(item);\n      inDegree.add(item, itemDeps.size());\n      if (itemDeps.isEmpty()) {\n        inDegreeZero.add(item);\n      }\n    }\n\n    // Then, iterate to a fixed point over the reverse dependency graph.\n    while (!inDegreeZero.isEmpty()) {\n      T item = inDegreeZero.remove();\n      result.add(item);\n      for (T inWaiting : reverseDeps.get(item)) {\n        inDegree.remove(inWaiting, 1);\n        if (inDegree.count(inWaiting) == 0) {\n          inDegreeZero.add(inWaiting);\n        }\n      }\n    }\n\n    return result;\n  }\n",
        "begin_line": 239,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleDependencyInfo.SimpleDependencyInfo#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.SimpleDependencyInfo(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.util.List<java.lang.String>)",
        "snippet": "  public SimpleDependencyInfo(\n      String srcPathRelativeToClosure, String pathOfDefiningFile,\n      List<String> provides, List<String> requires) {\n    this.srcPathRelativeToClosure = srcPathRelativeToClosure;\n    this.pathOfDefiningFile = pathOfDefiningFile;\n    this.provides = provides;\n    this.requires = requires;\n  }\n",
        "begin_line": 55,
        "end_line": 62,
        "comment": "\n   * Constructs a DependencyInfo object with the given list of provides &\n   * requires. This does *not* copy the given lists, but uses them directly.\n   *\n   * @param srcPathRelativeToClosure The closure-relative path of the file\n   *     associated with this DependencyInfo.\n   * @param pathOfDefiningFile The path to the file from which this dependency\n   *     information was extracted.\n   * @param provides List of provided symbols.\n   * @param requires List of required symbols.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleDependencyInfo.getProvides#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.getProvides()",
        "snippet": "  @Override\n  public Collection<String> getProvides() {\n    return Collections.<String>unmodifiableList(provides);\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleDependencyInfo.getRequires#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.getRequires()",
        "snippet": "  @Override\n  public Collection<String> getRequires() {\n    return Collections.<String>unmodifiableList(requires);\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleDependencyInfo.toString#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return String.format(\"DependencyInfo(relativePath='%1$s', path='%2$s', \"\n        + \"provides=%3$s, requires=%4$s)\", srcPathRelativeToClosure,\n        pathOfDefiningFile, provides, requires);\n  }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsFileParser.JsFileParser#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.JsFileParser(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public JsFileParser(ErrorManager errorManager) {\n    super(errorManager);\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n   * Constructor\n   *\n   * @param errorManager Handles parse errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsFileParser.setIncludeGoogBase#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.setIncludeGoogBase(boolean)",
        "snippet": "  public JsFileParser setIncludeGoogBase(boolean include) {\n    includeGoogBase = include;\n    return this;\n  }\n",
        "begin_line": 82,
        "end_line": 85,
        "comment": "\n   * Sets whether we should create implicit provides and requires of the\n   * root namespace.\n   *\n   * When generating deps files, you do not want this behavior. Deps files\n   * need base.js to run anyway, so they don't need information about it.\n   *\n   * When generating abstract build graphs, you probably do want this behavior.\n   * It will create an implicit dependency of all files with provides/requires\n   * on base.js.\n   *\n   * @return this for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsFileParser.parseFile#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.parseFile(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  public DependencyInfo parseFile(String filePath, String closureRelativePath,\n      String fileContents) {\n    return parseReader(filePath, closureRelativePath,\n        new StringReader(fileContents));\n  }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "\n   * Parses the given file and returns the dependency information that it\n   * contained.\n   *\n   * @param filePath Path to the file to parse.\n   * @param closureRelativePath Path of the file relative to closure.\n   * @param fileContents The contents to parse.\n   * @return A DependencyInfo containing all provides/requires found in the\n   *     file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsFileParser.parseReader#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.parseReader(java.lang.String, java.lang.String, java.io.Reader)",
        "snippet": "  private DependencyInfo parseReader(String filePath,\n      String closureRelativePath, Reader fileContents) {\n    provides = Lists.newArrayList();\n    requires = Lists.newArrayList();\n    fileHasProvidesOrRequires = false;\n\n    logger.fine(\"Parsing Source: \" + filePath);\n    doParse(filePath, fileContents);\n\n    DependencyInfo dependencyInfo = new SimpleDependencyInfo(\n        closureRelativePath, filePath, provides, requires);\n    logger.fine(\"DepInfo: \" + dependencyInfo);\n    return dependencyInfo;\n  }\n",
        "begin_line": 118,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsFileLineParser.JsFileLineParser#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.JsFileLineParser(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public JsFileLineParser(ErrorManager errorManager) {\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n   * Constructor.\n   *\n   * @param errorManager Parse error handler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-8433bde6-86c5-406e-b1f1-43ff180d2a23.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          (new ReplaceCssNames(compiler, newCssNames)).process(\n              externs, jsRoot);\n          cssNames = newCssNames;\n        }\n      };\n    }\n",
        "begin_line": 997,
        "end_line": 1011,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.process#1000",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-573a520b-7778-4e3a-b3ca-d456634c9417.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          (new ReplaceCssNames(compiler, newCssNames)).process(\n              externs, jsRoot);\n          cssNames = newCssNames;\n        }\n",
        "begin_line": 1000,
        "end_line": 1009,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.getAdditionalReplacements#2223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  @VisibleForTesting\n  static Map<String, Node> getAdditionalReplacements(\n      CompilerOptions options) {\n    Map<String, Node> additionalReplacements = Maps.newHashMap();\n\n    if (options.markAsCompiled || options.closurePass) {\n      additionalReplacements.put(COMPILED_CONSTANT_NAME, IR.trueNode());\n    }\n\n    if (options.closurePass && options.locale != null) {\n      additionalReplacements.put(CLOSURE_LOCALE_CONSTANT_NAME,\n          IR.string(options.locale));\n    }\n\n    return additionalReplacements;\n  }\n",
        "begin_line": 2223,
        "end_line": 2238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.checkErrorManager#150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.checkErrorManager()",
        "snippet": "  private void checkErrorManager() {\n    Preconditions.checkNotNull(compiler,\n        \"Expected setCompiler to be called first: \" + this);\n    Preconditions.checkNotNull(compiler.getErrorManager(),\n        \"Expected compiler to call an error manager: \" + this);\n  }\n",
        "begin_line": 150,
        "end_line": 155,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getRequires#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getRequires()",
        "snippet": "  @Override\n  public Collection<String> getRequires() {\n    checkErrorManager();\n    try {\n      regenerateDependencyInfoIfNecessary();\n      return Collections.<String>unmodifiableSet(requires);\n    } catch (IOException e) {\n      compiler.getErrorManager().report(CheckLevel.ERROR,\n          JSError.make(AbstractCompiler.READ_ERROR, getName()));\n      return ImmutableList.<String>of();\n    }\n  }\n",
        "begin_line": 158,
        "end_line": 169,
        "comment": " Gets a list of types depended on by this input. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getProvides#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getProvides()",
        "snippet": "  @Override\n  public Collection<String> getProvides() {\n    checkErrorManager();\n    try {\n      regenerateDependencyInfoIfNecessary();\n      return Collections.<String>unmodifiableSet(provides);\n    } catch (IOException e) {\n      compiler.getErrorManager().report(CheckLevel.ERROR,\n          JSError.make(AbstractCompiler.READ_ERROR, getName()));\n      return ImmutableList.<String>of();\n    }\n  }\n",
        "begin_line": 172,
        "end_line": 183,
        "comment": " Gets a list of types provided by this input. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.regenerateDependencyInfoIfNecessary#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.regenerateDependencyInfoIfNecessary()",
        "snippet": "  private void regenerateDependencyInfoIfNecessary() throws IOException {\n    // If the code is NOT a JsAst, then it was not originally JS code.\n    // Look at the Ast for dependency info.\n    if (!(ast instanceof JsAst)) {\n      Preconditions.checkNotNull(compiler,\n          \"Expected setCompiler to be called first\");\n      DepsFinder finder = new DepsFinder();\n      Node root = getAstRoot(compiler);\n      if (root == null) {\n        return;\n      }\n\n      finder.visitTree(getAstRoot(compiler));\n\n      // TODO(nicksantos|user): This caching behavior is a bit\n      // odd, and only works if you assume the exact call flow that\n      // clients are currently using.  In that flow, they call\n      // getProvides(), then remove the goog.provide calls from the\n      // AST, and then call getProvides() again.\n      //\n      // This won't work for any other call flow, or any sort of incremental\n      // compilation scheme. The API needs to be fixed so callers aren't\n      // doing weird things like this, and then we should get rid of the\n      // multiple-scan strategy.\n\n      provides.addAll(finder.provides);\n      requires.addAll(finder.requires);\n    } else {\n      // Otherwise, look at the source code.\n      if (!generatedDependencyInfoFromSource) {\n        // Note: it's OK to use getName() instead of\n        // getPathRelativeToClosureBase() here because we're not using\n        // this to generate deps files. (We're only using it for\n        // symbol dependencies.)\n        DependencyInfo info =\n            (new JsFileParser(compiler.getErrorManager()))\n            .setIncludeGoogBase(true)\n            .parseFile(getName(), getName(), getCode());\n\n        provides.addAll(info.getProvides());\n        requires.addAll(info.getRequires());\n\n        generatedDependencyInfoFromSource = true;\n      }\n    }\n  }\n",
        "begin_line": 205,
        "end_line": 250,
        "comment": "\n   * Regenerates the provides/requires if we need to do so.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getCode#314",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return getSourceFile().getCode();\n  }\n",
        "begin_line": 314,
        "end_line": 316,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.toString#359",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getName();\n  }\n",
        "begin_line": 359,
        "end_line": 362,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0596
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReplaceCssNames.getCssRenamingMap#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.getCssRenamingMap()",
        "snippet": "  @VisibleForTesting\n  protected CssRenamingMap getCssRenamingMap() {\n    return compiler.getCssRenamingMap();\n  }\n",
        "begin_line": 133,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0594
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getCssRenamingMap#1859",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCssRenamingMap()",
        "snippet": "  @Override\n  CssRenamingMap getCssRenamingMap() {\n    return options.cssRenamingMap;\n  }\n",
        "begin_line": 1859,
        "end_line": 1862,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.059
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.createEntryLattice#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.createEntryLattice()",
        "snippet": "  @Override\n  ReachingUses createEntryLattice() {\n    return new ReachingUses();\n  }\n",
        "begin_line": 135,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0588
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineVariables.maybeEscapedOrModifiedArguments#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.InliningBehavior.maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap)",
        "snippet": "    private boolean maybeEscapedOrModifiedArguments(\n        Scope scope, ReferenceMap referenceMap) {\n      if (scope.isLocal()) {\n        Var arguments = scope.getArgumentsVar();\n        ReferenceCollection refs = referenceMap.getReferences(arguments);\n        if (refs != null && !refs.references.isEmpty()) {\n          for (Reference ref : refs.references) {\n            Node refNode = ref.getNode();\n            Node refParent = ref.getParent();\n            // Any reference that is not a read of the arguments property\n            // consider a escape of the arguments object.\n            if (!(NodeUtil.isGet(refParent)\n                && refNode == ref.getParent().getFirstChild()\n                && !isLValue(refParent))) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }\n",
        "begin_line": 224,
        "end_line": 244,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0588
        },
        "num_failing_tests": 2
    },
    {
        "name": "DependencyOptions.setDependencySorting#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.setDependencySorting(boolean)",
        "snippet": "  public DependencyOptions setDependencySorting(boolean enabled) {\n    this.sortDependencies = enabled;\n    return this;\n  }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n   * Enables or disables dependency sorting mode.\n   *\n   * If true, we will sort the input files based on dependency information\n   * in them. Otherwise, we will use the order of files specified\n   * on the command-line.\n   * @return this for easy building.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0588
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isLabel#2288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isLabel()",
        "snippet": "  public boolean isLabel() {\n    return this.getType() == Token.LABEL;\n  }\n",
        "begin_line": 2288,
        "end_line": 2290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0588
        },
        "num_failing_tests": 7
    },
    {
        "name": "RenameVars.okToRenameVar#536",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.okToRenameVar(java.lang.String, boolean)",
        "snippet": "  private boolean okToRenameVar(String name, boolean isLocal) {\n    return !compiler.getCodingConvention().isExported(name, isLocal);\n  }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "\n   * Determines whether a variable name is okay to rename.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.ReachingUses#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.ReachingUses.ReachingUses()",
        "snippet": "    public ReachingUses() {\n      mayUseMap = HashMultimap.create();\n    }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.ReachingUses#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.ReachingUses.ReachingUses(com.google.javascript.jscomp.MaybeReachingVariableUse.ReachingUses)",
        "snippet": "    public ReachingUses(ReachingUses other) {\n      mayUseMap = HashMultimap.create(other.mayUseMap);\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * Copy constructor.\n     *\n     * @param other The constructed object is a replicated copy of this element.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.equals#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.ReachingUses.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object other) {\n      return (other instanceof ReachingUses) &&\n          ((ReachingUses) other).mayUseMap.equals(this.mayUseMap);\n    }\n",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.MaybeReachingVariableUse#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.MaybeReachingVariableUse(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  MaybeReachingVariableUse(\n      ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) {\n    super(cfg, new ReachingUsesJoinOp());\n    this.jsScope = jsScope;\n    this.escaped = Sets.newHashSet();\n\n    // TODO(user): May be comute it somewhere else and re-use the escape\n    // local set here.\n    computeEscaped(jsScope, escaped, compiler);\n  }\n",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.isForward#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.isForward()",
        "snippet": "  @Override\n  boolean isForward() {\n    return false;\n  }\n",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.createInitialEstimateLattice#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.createInitialEstimateLattice()",
        "snippet": "  @Override\n  ReachingUses createInitialEstimateLattice() {\n    return new ReachingUses();\n  }\n",
        "begin_line": 140,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.flowThrough#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.flowThrough(com.google.javascript.rhino.Node, com.google.javascript.jscomp.MaybeReachingVariableUse.ReachingUses)",
        "snippet": "  @Override\n  ReachingUses flowThrough(Node n, ReachingUses input) {\n    ReachingUses output = new ReachingUses(input);\n    computeMayUse(n, n, output, false);\n    return output;\n  }\n",
        "begin_line": 145,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "MaybeReachingVariableUse.computeMayUse#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
        "class_name": "com.google.javascript.jscomp.MaybeReachingVariableUse",
        "signature": "com.google.javascript.jscomp.MaybeReachingVariableUse.computeMayUse(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.MaybeReachingVariableUse.ReachingUses, boolean)",
        "snippet": "  private void computeMayUse(\n      Node n, Node cfgNode, ReachingUses output, boolean conditional) {\n    switch (n.getType()) {\n\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.NAME:\n        addToUseIfLocal(n.getString(), cfgNode, output);\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeMayUse(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeMayUse(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.isVar()) {\n            lhs = lhs.getLastChild(); // for(var x in y) {...}\n          }\n          if (lhs.isName() && !conditional) {\n            removeFromUseIfLocal(lhs.getString(), output);\n          }\n          computeMayUse(rhs, cfgNode, output, conditional);\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.HOOK:\n        computeMayUse(n.getLastChild(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild().getNext(), cfgNode, output, true);\n        computeMayUse(n.getFirstChild(), cfgNode, output, conditional);\n        return;\n\n      case Token.VAR:\n        Node varName = n.getFirstChild();\n        Preconditions.checkState(n.hasChildren(), \"AST should be normalized\");\n\n        if (varName.hasChildren()) {\n          computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);\n          if (!conditional) {\n            removeFromUseIfLocal(varName.getString(), output);\n          }\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {\n          Node name = n.getFirstChild();\n          if (!conditional) {\n            removeFromUseIfLocal(name.getString(), output);\n          }\n\n          // In case of a += \"Hello\". There is a read of a.\n          if (!n.isAssign()) {\n            addToUseIfLocal(name.getString(), cfgNode, output);\n          }\n\n          computeMayUse(name.getNext(), cfgNode, output, conditional);\n        } else {\n          /*\n           * We want to traverse in reverse order because we want the LAST\n           * definition in the sub-tree....\n           * But we have no better way to traverse in reverse other :'(\n           */\n          for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {\n            computeMayUse(c, cfgNode, output, conditional);\n          }\n        }\n    }\n  }\n",
        "begin_line": 152,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#912",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-f24f7592-d81d-41ff-adc0-bcdaff0e2f61.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      final ProcessClosurePrimitives pass = new ProcessClosurePrimitives(\n          compiler,\n          preprocessorSymbolTable,\n          options.brokenClosureRequiresLevel,\n          options.rewriteNewDateGoogNow);\n\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          pass.hotSwapScript(scriptRoot, originalRoot);\n        }\n      };\n    }\n",
        "begin_line": 912,
        "end_line": 932,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.process#922",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-57db2dd2-7d53-4cef-be00-7343dc6c1e2b.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n",
        "begin_line": 922,
        "end_line": 926,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0587
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-a38bc815-6444-4687-9a7a-22d039822055.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      return new ScopedAliases(\n          compiler,\n          preprocessorSymbolTable,\n          options.getAliasTransformationHandler());\n    }\n",
        "begin_line": 967,
        "end_line": 974,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0583
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.maybeInitializePreprocessorSymbolTable#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  void maybeInitializePreprocessorSymbolTable(AbstractCompiler compiler) {\n    if (options.ideMode) {\n      Node root = compiler.getRoot();\n      if (preprocessorSymbolTable == null ||\n          preprocessorSymbolTable.getRootNode() != root) {\n        preprocessorSymbolTable = new PreprocessorSymbolTable(root);\n      }\n    }\n  }\n",
        "begin_line": 179,
        "end_line": 187,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0583
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getAliasTransformationHandler#1426",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getAliasTransformationHandler()",
        "snippet": "  public AliasTransformationHandler getAliasTransformationHandler() {\n    return this.aliasHandler;\n  }\n",
        "begin_line": 1426,
        "end_line": 1428,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0583
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.hashCode#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Arguments.hashCode()",
        "snippet": "    @Override public int hashCode() {\n      return System.identityHashCode(this);\n    }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0581
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.getExportedVariableNames#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.getExportedVariableNames()",
        "snippet": "  Set<String> getExportedVariableNames() {\n    return exportedVariables;\n  }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0581
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameVars.ProcessVars#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.ProcessVars.ProcessVars(boolean)",
        "snippet": "    ProcessVars(boolean isExterns) {\n      isExternsPass_ = isExterns;\n    }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.058
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameVars.exitScope#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.ProcessVars.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {}\n",
        "begin_line": 208,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.058
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameVars.assignNames#441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "signature": "com.google.javascript.jscomp.RenameVars.assignNames(java.util.Set<com.google.javascript.jscomp.RenameVars.Assignment>)",
        "snippet": "  private void assignNames(Set<Assignment> varsToRename) {\n    NameGenerator globalNameGenerator =\n        new NameGenerator(reservedNames, prefix, reservedCharacters);\n\n    // Local variables never need a prefix.\n    NameGenerator localNameGenerator =\n        prefix.isEmpty() ? globalNameGenerator : new NameGenerator(\n            reservedNames, \"\", reservedCharacters);\n\n    // Generated names and the assignments for non-local vars.\n    List<Assignment> pendingAssignments = new ArrayList<Assignment>();\n    List<String> generatedNamesForAssignments = new ArrayList<String>();\n\n    for (Assignment a : varsToRename) {\n      if (a.newName != null) {\n        continue;\n      }\n\n      if (externNames.contains(a.oldName)) {\n        continue;\n      }\n\n      String newName;\n      if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {\n        // For local variable, we make the assignment right away.\n        newName = localNameGenerator.generateNextName();\n        finalizeNameAssignment(a, newName);\n      } else {\n        // For non-local variable, delay finalizing the name assignment\n        // until we know how many new names we'll have of length 2, 3, etc.\n        newName = globalNameGenerator.generateNextName();\n        pendingAssignments.add(a);\n        generatedNamesForAssignments.add(newName);\n      }\n      reservedNames.add(newName);\n    }\n\n    // Now that we have a list of generated names, and a list of variable\n    // Assignment objects, we assign the generated names to the vars as\n    // follows:\n    // 1) The most frequent vars get the shorter names.\n    // 2) If N number of vars are going to be assigned names of the same\n    //    length, we assign the N names based on the order at which the vars\n    //    first appear in the source. This makes the output somewhat less\n    //    random, because symbols declared close together are assigned names\n    //    that are quite similar. With this heuristic, the output is more\n    //    compressible.\n    //    For instance, the output may look like:\n    //    var da = \"..\", ea = \"..\";\n    //    function fa() { .. } function ga() { .. }\n\n    int numPendingAssignments = generatedNamesForAssignments.size();\n    for (int i = 0; i < numPendingAssignments;) {\n      SortedSet<Assignment> varsByOrderOfOccurrence =\n          new TreeSet<Assignment>(ORDER_OF_OCCURRENCE_COMPARATOR);\n\n      // Add k number of Assignment to the set, where k is the number of\n      // generated names of the same length.\n      int len = generatedNamesForAssignments.get(i).length();\n      for (int j = i; j < numPendingAssignments\n          && generatedNamesForAssignments.get(j).length() == len; j++) {\n        varsByOrderOfOccurrence.add(pendingAssignments.get(j));\n      }\n\n      // Now, make the assignments\n      for (Assignment a : varsByOrderOfOccurrence) {\n        finalizeNameAssignment(a, generatedNamesForAssignments.get(i));\n        ++i;\n      }\n    }\n  }\n",
        "begin_line": 441,
        "end_line": 511,
        "comment": "\n   * Determines which new names to substitute for the original names.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.058
        },
        "num_failing_tests": 2
    },
    {
        "name": "VariableMap.VariableMap#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "signature": "com.google.javascript.jscomp.VariableMap.VariableMap(java.util.Map<java.lang.String, java.lang.String>)",
        "snippet": "  VariableMap(Map<String, String> map) {\n    this.map = Collections.unmodifiableMap(map);\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0578
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.Arguments#356",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Arguments.Arguments(com.google.javascript.jscomp.Scope)",
        "snippet": "    Arguments(Scope scope) {\n      super(\n        false, // no inferred\n        \"arguments\", // always arguments\n        null,  // no declaration node\n        // TODO(johnlenz): provide the type of \"Arguments\".\n        null,  // no type info\n        scope,\n        -1,    // no variable index\n        null,  // input,\n        false, // not a define\n        null   // no jsdoc\n        );\n    }\n",
        "begin_line": 356,
        "end_line": 369,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getArgumentsVar#553",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getArgumentsVar()",
        "snippet": "  public Var getArgumentsVar() {\n    if (arguments == null) {\n      arguments = new Arguments(this);\n    }\n    return arguments;\n  }\n",
        "begin_line": 553,
        "end_line": 558,
        "comment": "\n   * Get a unique VAR object to represents \"arguments\" within this scope\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0575
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReplaceCssNames.visit#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.Traversal.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() &&\n          GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n        int count = n.getChildCount();\n        Node first = n.getFirstChild().getNext();\n        switch (count) {\n          case 2:\n            // Replace the function call with the processed argument.\n            if (first.isString()) {\n              processStringNode(t, first);\n              n.removeChild(first);\n              parent.replaceChild(n, first);\n              compiler.reportCodeChange();\n            } else {\n              compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR,\n                  Token.name(first.getType())));\n            }\n            break;\n\n          case 3:\n            // Replace function call with concatenation of two args.  It's\n            // assumed the first arg has already been processed.\n\n            Node second = first.getNext();\n\n            if (!second.isString()) {\n              compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR,\n                  Token.name(second.getType())));\n            } else if (first.isString()) {\n              compiler.report(t.makeError(\n                  n, UNEXPECTED_STRING_LITERAL_ERROR,\n                  first.getString(), second.getString()));\n            } else {\n              processStringNode(t, second);\n              n.removeChild(first);\n              Node replacement = IR.add(first,\n                  IR.string(\"-\" + second.getString())\n                      .copyInformationFrom(second))\n                  .copyInformationFrom(n);\n              replacement.setJSType(nativeStringType);\n              parent.replaceChild(n, replacement);\n              compiler.reportCodeChange();\n            }\n            break;\n\n          default:\n            compiler.report(t.makeError(\n                n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n        }\n      }\n    }\n",
        "begin_line": 140,
        "end_line": 191,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0573
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReplaceCssNames.ReplaceCssNames#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.ReplaceCssNames(com.google.javascript.jscomp.AbstractCompiler, java.util.Map<java.lang.String, java.lang.Integer>)",
        "snippet": "  ReplaceCssNames(AbstractCompiler compiler,\n      @Nullable Map<String, Integer> cssNames) {\n    this.compiler = compiler;\n    this.cssNames = cssNames;\n    this.nativeStringType =  compiler.getTypeRegistry()\n        .getNativeType(STRING_TYPE);\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0573
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReplaceCssNames.process#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    // The CssRenamingMap may not have been available from the compiler when\n    // this ReplaceCssNames pass was constructed, so getCssRenamingMap() should\n    // only be called before this pass is actually run.\n    symbolMap = getCssRenamingMap();\n\n    NodeTraversal.traverse(compiler, root, new Traversal());\n  }\n",
        "begin_line": 123,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0573
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.tryFoldExpr#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.tryFoldExpr(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryFoldExpr(Node subtree) {\n    Node result = trySimplifyUnusedResult(subtree.getFirstChild());\n    if (result == null) {\n      Node parent = subtree.getParent();\n      // If the EXPR_RESULT no longer has any children, remove it as well.\n      if (parent.isLabel()) {\n        Node replacement = IR.block().srcref(subtree);\n        parent.replaceChild(subtree, replacement);\n        subtree = replacement;\n      } else {\n        subtree.detachFromParent();\n        subtree = null;\n      }\n    }\n    return subtree;\n  }\n",
        "begin_line": 137,
        "end_line": 152,
        "comment": "\n   * Try folding EXPR_RESULT nodes by removing useless Ops and expressions.\n   * @return the replacement node, if changed, or the original if not\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0573
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeRemoveDeadCode.trySimplifyUnusedResult#159",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
        "class_name": "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
        "signature": "com.google.javascript.jscomp.PeepholeRemoveDeadCode.trySimplifyUnusedResult(com.google.javascript.rhino.Node)",
        "snippet": "  private Node trySimplifyUnusedResult(Node n) {\n    return trySimplifyUnusedResult(n, true);\n  }\n",
        "begin_line": 159,
        "end_line": 161,
        "comment": "\n   * General cascading unused operation node removal.\n   * @param n The root of the expression to simplify.\n   * @return The replacement node, or null if the node was is not useful.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0573
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.MustDef#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef.MustDef(java.util.Iterator<com.google.javascript.jscomp.Scope.Var>)",
        "snippet": "    public MustDef(Iterator<Var> vars) {\n      this();\n      while(vars.hasNext()) {\n        Var var = vars.next();\n        // Every variable in the scope is defined once in the beginning of the\n        // function: all the declared variables are undefined, all functions\n        // have been assigned and all arguments has its value from the caller.\n        reachingDef.put(var, new Definition(var.scope.getRootNode()));\n      }\n    }\n",
        "begin_line": 120,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0571
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.Definition#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.Definition.Definition(com.google.javascript.rhino.Node)",
        "snippet": "    Definition(Node node) {\n      this.node = node;\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0571
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.MustDef#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef.MustDef()",
        "snippet": "    public MustDef() {\n      reachingDef = Maps.newHashMap();\n    }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.MustDef#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef.MustDef(com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef)",
        "snippet": "    public MustDef(MustDef other) {\n      reachingDef = Maps.newHashMap(other.reachingDef);\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * Copy constructor.\n     *\n     * @param other The constructed object is a replicated copy of this element.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.equals#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef.equals(java.lang.Object)",
        "snippet": "    @Override\n    public boolean equals(Object other) {\n      return (other instanceof MustDef) &&\n          ((MustDef) other).reachingDef.equals(this.reachingDef);\n    }\n",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.MustBeReachingVariableDef#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.MustBeReachingVariableDef(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  MustBeReachingVariableDef(\n      ControlFlowGraph<Node> cfg, Scope jsScope, AbstractCompiler compiler) {\n    super(cfg, new MustDefJoin());\n    this.jsScope = jsScope;\n    this.compiler = compiler;\n    this.escaped = Sets.newHashSet();\n    computeEscaped(jsScope, escaped, compiler);\n  }\n",
        "begin_line": 53,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.isForward#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.isForward()",
        "snippet": "  @Override\n  boolean isForward() {\n    return true;\n  }\n",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.createEntryLattice#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.createEntryLattice()",
        "snippet": "  @Override\n  MustDef createEntryLattice() {\n    return new MustDef(jsScope.getVars());\n  }\n",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.createInitialEstimateLattice#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.createInitialEstimateLattice()",
        "snippet": "  @Override\n  MustDef createInitialEstimateLattice() {\n    return new MustDef();\n  }\n",
        "begin_line": 203,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.flowThrough#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.flowThrough(com.google.javascript.rhino.Node, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef)",
        "snippet": "  @Override\n  MustDef flowThrough(Node n, MustDef input) {\n    // TODO(user): We are doing a straight copy from input to output. There\n    // might be some opportunities to cut down overhead.\n    MustDef output = new MustDef(input);\n    // TODO(user): This must know about ON_EX edges but it should handle\n    // it better than what we did in liveness. Because we are in a forward mode,\n    // we can used the branched forward analysis.\n    computeMustDef(n, n, output, false);\n    return output;\n  }\n",
        "begin_line": 208,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "MustBeReachingVariableDef.computeMustDef#225",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "class_name": "com.google.javascript.jscomp.MustBeReachingVariableDef",
        "signature": "com.google.javascript.jscomp.MustBeReachingVariableDef.computeMustDef(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.MustBeReachingVariableDef.MustDef, boolean)",
        "snippet": "  private void computeMustDef(\n      Node n, Node cfgNode, MustDef output, boolean conditional) {\n    switch (n.getType()) {\n\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeMustDef(\n            NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeMustDef(\n              NodeUtil.getConditionExpression(n), cfgNode, output, conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (lhs.isVar()) {\n            lhs = lhs.getLastChild(); // for(var x in y) {...}\n          }\n          if (lhs.isName()) {\n            addToDefIfLocal(lhs.getString(), cfgNode, rhs, output);\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n        computeMustDef(n.getLastChild(), cfgNode, output, true);\n        return;\n\n      case Token.HOOK:\n        computeMustDef(n.getFirstChild(), cfgNode, output, conditional);\n        computeMustDef(n.getFirstChild().getNext(), cfgNode, output, true);\n        computeMustDef(n.getLastChild(), cfgNode, output, true);\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeMustDef(c.getFirstChild(), cfgNode, output, conditional);\n            addToDefIfLocal(c.getString(), conditional ? null : cfgNode,\n                c.getFirstChild(), output);\n          }\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n)) {\n          if (n.getFirstChild().isName()) {\n            Node name = n.getFirstChild();\n            computeMustDef(name.getNext(), cfgNode, output, conditional);\n            addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n              n.getLastChild(), output);\n            return;\n          } else if (NodeUtil.isGet(n.getFirstChild())) {\n            // Treat all assignments to arguments as redefining the\n            // parameters itself.\n            Node obj = n.getFirstChild().getFirstChild();\n            if (obj.isName() && \"arguments\".equals(obj.getString())) {\n              // TODO(user): More accuracy can be introduced\n              // ie: We know exactly what arguments[x] is if x is a constant\n              // number.\n              escapeParameters(output);\n            }\n          }\n        }\n\n        if (n.isName() && \"arguments\".equals(n.getString())) {\n          escapeParameters(output);\n        }\n\n        // DEC and INC actually defines the variable.\n        if (n.isDec() || n.isInc()) {\n          Node target = n.getFirstChild();\n          if (target.isName()) {\n            addToDefIfLocal(target.getString(),\n                conditional ? null : cfgNode, null, output);\n            return;\n          }\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeMustDef(c, cfgNode, output, conditional);\n        }\n    }\n  }\n",
        "begin_line": 225,
        "end_line": 318,
        "comment": "\n   * @param n The node in question.\n   * @param cfgNode The node to add\n   * @param conditional true if the definition is not always executed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.setIn#352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.setIn(L)",
        "snippet": "    void setIn(L in) {\n      Preconditions.checkNotNull(in);\n      this.in = in;\n    }\n",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.flow#267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  protected boolean flow(DiGraphNode<N, Branch> node) {\n    FlowState<L> state = node.getAnnotation();\n    if (isForward()) {\n      L outBefore = state.out;\n      state.out = flowThrough(node.getValue(), state.in);\n      return !outBefore.equals(state.out);\n    } else {\n      L inBefore = state.in;\n      state.in = flowThrough(node.getValue(), state.out);\n      return !inBefore.equals(state.in);\n    }\n  }\n",
        "begin_line": 267,
        "end_line": 278,
        "comment": "\n   * Performs a single flow through a node.\n   *\n   * @return {@code true} if the flow state differs from the previous state.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.joinInputs#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  protected void joinInputs(DiGraphNode<N, Branch> node) {\n    FlowState<L> state = node.getAnnotation();\n    if (isForward()) {\n      if (cfg.getEntry() == node) {\n        state.setIn(createEntryLattice());\n      } else {\n        List<DiGraphNode<N, Branch>> inNodes = cfg.getDirectedPredNodes(node);\n        if (inNodes.size() == 1) {\n          FlowState<L> inNodeState = inNodes.get(0).getAnnotation();\n          state.setIn(inNodeState.getOut());\n        } else if (inNodes.size() > 1) {\n          List<L> values = new ArrayList<L>(inNodes.size());\n          for (DiGraphNode<N, Branch> currentNode : inNodes) {\n            FlowState<L> currentNodeState = currentNode.getAnnotation();\n            values.add(currentNodeState.getOut());\n          }\n          state.setIn(joinOp.apply(values));\n        }\n      }\n    } else {\n      List<DiGraphNode<N, Branch>> inNodes = cfg.getDirectedSuccNodes(node);\n      if (inNodes.size() == 1) {\n        DiGraphNode<N, Branch> inNode = inNodes.get(0);\n        if (inNode == cfg.getImplicitReturn()) {\n          state.setOut(createEntryLattice());\n        } else {\n          FlowState<L> inNodeState = inNode.getAnnotation();\n          state.setOut(inNodeState.getIn());\n        }\n      } else if (inNodes.size() > 1) {\n        List<L> values = new ArrayList<L>(inNodes.size());\n        for (DiGraphNode<N, Branch> currentNode : inNodes) {\n          FlowState<L> currentNodeState = currentNode.getAnnotation();\n          values.add(currentNodeState.getIn());\n        }\n        state.setOut(joinOp.apply(values));\n      }\n    }\n  }\n",
        "begin_line": 286,
        "end_line": 324,
        "comment": "\n   * Computes the new flow state at a given node's entry by merging the\n   * output (input) lattice of the node's predecessor (successor).\n   *\n   * @param node Node to compute new join.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeChildAfter#1670",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChildAfter(com.google.javascript.rhino.Node)",
        "snippet": "  public Node removeChildAfter(Node prev) {\n    Preconditions.checkArgument(prev.parent == this,\n        \"prev is not a child of this node.\");\n    Preconditions.checkArgument(prev.next != null,\n        \"no next sibling.\");\n\n    Node child = prev.next;\n    prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n    return child;\n  }\n",
        "begin_line": 1670,
        "end_line": 1682,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 1
    },
    {
        "name": "RemoveUnusedVars.process#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    SimpleDefinitionFinder defFinder = null;\n\n    if (modifyCallSites) {\n      // For testing, allow the SimpleDefinitionFinder to be build now.\n      defFinder = new SimpleDefinitionFinder(compiler);\n      defFinder.process(externs, root);\n    }\n    process(externs, root, defFinder);\n  }\n",
        "begin_line": 139,
        "end_line": 150,
        "comment": "\n   * Traverses the root, removing all unused variables. Multiple traversals\n   * may occur to ensure all unused variables are removed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.056
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateAssignmentExpression#600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentExpression(Node n) {\n    validateChildCount(n, 2);\n    validateAssignmentTarget(n.getFirstChild());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0557
        },
        "num_failing_tests": 7
    },
    {
        "name": "RemoveUnusedVars.RemoveUnusedVars#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.RemoveUnusedVars(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean, boolean)",
        "snippet": "  RemoveUnusedVars(\n      AbstractCompiler compiler,\n      boolean removeGlobals,\n      boolean preserveFunctionExpressionNames,\n      boolean modifyCallSites) {\n    this.compiler = compiler;\n    this.codingConvention = compiler.getCodingConvention();\n    this.removeGlobals = removeGlobals;\n    this.preserveFunctionExpressionNames = preserveFunctionExpressionNames;\n    this.modifyCallSites = modifyCallSites;\n  }\n",
        "begin_line": 123,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemoveUnusedVars.process#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.SimpleDefinitionFinder)",
        "snippet": "  @Override\n  public void process(\n      Node externs, Node root, SimpleDefinitionFinder defFinder) {\n    if (modifyCallSites) {\n      Preconditions.checkNotNull(defFinder);\n      callSiteOptimizer = new CallSiteOptimizer(compiler, defFinder);\n    }\n    traverseAndRemoveUnusedReferences(root);\n    if (callSiteOptimizer != null) {\n      callSiteOptimizer.applyChanges();\n    }\n  }\n",
        "begin_line": 152,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemoveUnusedVars.traverseAndRemoveUnusedReferences#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.traverseAndRemoveUnusedReferences(com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseAndRemoveUnusedReferences(Node root) {\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null);\n    traverseNode(root, null, scope);\n\n    if (removeGlobals) {\n      collectMaybeUnreferencedVars(scope);\n    }\n\n    interpretAssigns();\n    removeUnreferencedVars();\n    for (Scope fnScope : allFunctionScopes) {\n      removeUnreferencedFunctionArgs(fnScope);\n    }\n  }\n",
        "begin_line": 168,
        "end_line": 181,
        "comment": "\n   * Traverses a node recursively. Call this once per pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemoveUnusedVars.interpretAssigns#704",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.interpretAssigns()",
        "snippet": "  private void interpretAssigns() {\n    boolean changes = false;\n    do {\n      changes = false;\n\n      // We can't use traditional iterators and iterables for this list,\n      // because our lazily-evaluated continuations will modify it while\n      // we traverse it.\n      for (int current = 0; current < maybeUnreferenced.size(); current++) {\n        Var var = maybeUnreferenced.get(current);\n        if (referenced.contains(var)) {\n          maybeUnreferenced.remove(current);\n          current--;\n        } else {\n          boolean assignedToUnknownValue = false;\n          boolean hasPropertyAssign = false;\n\n          if (var.getParentNode().isVar() &&\n              !NodeUtil.isForIn(var.getParentNode().getParent())) {\n            Node value = var.getInitialValue();\n            assignedToUnknownValue = value != null &&\n                !NodeUtil.isLiteralValue(value, true);\n          } else {\n            // This was initialized to a function arg or a catch param\n            // or a for...in variable.\n            assignedToUnknownValue = true;\n          }\n\n          boolean maybeEscaped = false;\n          for (Assign assign : assignsByVar.get(var)) {\n            if (assign.isPropertyAssign) {\n              hasPropertyAssign = true;\n            } else if (!NodeUtil.isLiteralValue(\n                assign.assignNode.getLastChild(), true)) {\n              assignedToUnknownValue = true;\n            }\n            if (assign.maybeAliased) {\n              maybeEscaped = true;\n            }\n          }\n\n          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {\n            changes = markReferencedVar(var) || changes;\n            maybeUnreferenced.remove(current);\n            current--;\n          }\n        }\n      }\n    } while (changes);\n  }\n",
        "begin_line": 704,
        "end_line": 753,
        "comment": "\n   * Look at all the property assigns to all variables.\n   * These may or may not count as references. For example,\n   *\n   * <code>\n   * var x = {};\n   * x.foo = 3; // not a reference.\n   * var y = foo();\n   * y.foo = 3; // is a reference.\n   * </code>\n   *\n   * Interpreting assignments could mark a variable as referenced that\n   * wasn't referenced before, in order to keep it alive. Because we find\n   * references by lazily traversing subtrees, marking a variable as\n   * referenced could trigger new traversals of new subtrees, which could\n   * find new references.\n   *\n   * Therefore, this interpretation needs to be run to a fixed point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 2
    },
    {
        "name": "RemoveUnusedVars.removeUnreferencedVars#784",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.removeUnreferencedVars()",
        "snippet": "  private void removeUnreferencedVars() {\n    CodingConvention convention = codingConvention;\n\n    for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) {\n      Var var = it.next();\n\n      // Remove calls to inheritance-defining functions where the unreferenced\n      // class is the subclass.\n      for (Node exprCallNode : inheritsCalls.get(var)) {\n        NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode);\n        compiler.reportCodeChange();\n      }\n\n      // Regardless of what happens to the original declaration,\n      // we need to remove all assigns, because they may contain references\n      // to other unreferenced variables.\n      removeAllAssigns(var);\n\n      compiler.addToDebugLog(\"Unreferenced var: \" + var.name);\n      Node nameNode = var.nameNode;\n      Node toRemove = nameNode.getParent();\n      Node parent = toRemove.getParent();\n\n      Preconditions.checkState(\n          toRemove.isVar() ||\n          toRemove.isFunction() ||\n          toRemove.isParamList() &&\n          parent.isFunction(),\n          \"We should only declare vars and functions and function args\");\n\n      if (toRemove.isParamList() &&\n          parent.isFunction()) {\n        // Don't remove function arguments here. That's a special case\n        // that's taken care of in removeUnreferencedFunctionArgs.\n      } else if (NodeUtil.isFunctionExpression(toRemove)) {\n        if (!preserveFunctionExpressionNames) {\n          toRemove.getFirstChild().setString(\"\");\n          compiler.reportCodeChange();\n        }\n        // Don't remove bleeding functions.\n      } else if (parent != null &&\n          parent.isFor() &&\n          parent.getChildCount() < 4) {\n        // foreach iterations have 3 children. Leave them alone.\n      } else if (toRemove.isVar() &&\n          nameNode.hasChildren() &&\n          NodeUtil.mayHaveSideEffects(nameNode.getFirstChild())) {\n        // If this is a single var declaration, we can at least remove the\n        // declaration itself and just leave the value, e.g.,\n        // var a = foo(); => foo();\n        if (toRemove.getChildCount() == 1) {\n          parent.replaceChild(toRemove,\n              IR.exprResult(nameNode.removeFirstChild()));\n          compiler.reportCodeChange();\n        }\n      } else if (toRemove.isVar() &&\n          toRemove.getChildCount() > 1) {\n        // For var declarations with multiple names (i.e. var a, b, c),\n        // only remove the unreferenced name\n        toRemove.removeChild(nameNode);\n        compiler.reportCodeChange();\n      } else if (parent != null) {\n        NodeUtil.removeChild(parent, toRemove);\n        compiler.reportCodeChange();\n      }\n    }\n  }\n",
        "begin_line": 784,
        "end_line": 850,
        "comment": "\n   * Removes any vars in the scope that were not referenced. Removes any\n   * assignments to those variables as well.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.functionCallHasSideEffects#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (!callNode.isCall()) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.isName()) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.isGetProp()) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Math.floor has no side-effects.\n      // TODO(nicksantos): This is a terrible terrible hack, until\n      // I create a definitionProvider that understands namespacing.\n      if (nameNode.getFirstChild().isName()) {\n        if (\"Math.floor\".equals(nameNode.getQualifiedName())) {\n          return false;\n        }\n      }\n\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().isRegExp()\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().isString()\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.isString() || param.isRegExp()))\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 989,
        "end_line": 1045,
        "comment": "\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateGetProp#619",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateGetProp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateGetProp(Node n) {\n    validateNodeType(Token.GETPROP, n);\n    validateChildCount(n, 2);\n    validateExpression(n.getFirstChild());\n    Node prop = n.getLastChild();\n    validateNodeType(Token.STRING, prop);\n    validateNonEmptyString(prop);\n  }\n",
        "begin_line": 619,
        "end_line": 626,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0556
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateAssignmentTarget#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentTarget(Node n) {\n    switch (n.getType()) {\n      case Token.NAME:\n      case Token.GETELEM:\n      case Token.GETPROP:\n        validateExpression(n);\n        return;\n      default:\n        violation(\"Expected assignment target expression but was \"\n            + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 606,
        "end_line": 617,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0555
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodingConventions.isConstant#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isConstant(java.lang.String)",
        "snippet": "    @Override\n    public boolean isConstant(String variableName) {\n      return nextConvention.isConstant(variableName);\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0554
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isConstant#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.isConstant(java.lang.String)",
        "snippet": "    @Override\n    public boolean isConstant(String variableName) {\n      return false;\n    }\n",
        "begin_line": 247,
        "end_line": 250,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0551
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.maybeEndStatement#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0547
        },
        "num_failing_tests": 7
    },
    {
        "name": "GraphReachability.traverseEdge#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.traverseEdge(N, E, N)",
        "snippet": "  @Override\n  public boolean traverseEdge(N source, E e, N destination) {\n    if (graph.getNode(source).getAnnotation() == REACHABLE &&\n        (edgePredicate == null ||\n            edgePredicate.apply(new EdgeTuple<N, E>(source, e, destination)))) {\n      GraphNode<N, E> destNode = graph.getNode(destination);\n      if (destNode.getAnnotation() != REACHABLE) {\n        destNode.setAnnotation(REACHABLE);\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 69,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0546
        },
        "num_failing_tests": 2
    },
    {
        "name": "GraphReachability.GraphReachability#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.GraphReachability(com.google.javascript.jscomp.graph.DiGraph<N, E>, com.google.common.base.Predicate<com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple<N, E>>)",
        "snippet": "  public GraphReachability(DiGraph<N, E> graph,\n                           Predicate<EdgeTuple<N, E>> edgePredicate) {\n    this.graph = graph;\n    this.edgePredicate = edgePredicate;\n  }\n",
        "begin_line": 48,
        "end_line": 52,
        "comment": "\n   * @param graph The graph.\n   * @param edgePredicate Given the predecessor P of the a node S and the edge\n   *      coming from P to S, this predicate should return true if S is\n   *      reachable from P using the edge.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0543
        },
        "num_failing_tests": 2
    },
    {
        "name": "GraphReachability.compute#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.compute(N)",
        "snippet": "  public void compute(N entry) {\n    graph.clearNodeAnnotations();\n    graph.getNode(entry).setAnnotation(REACHABLE);\n    FixedPointGraphTraversal.newTraversal(this)\n        .computeFixedPoint(graph, entry);\n  }\n",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0543
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>, N)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph, N entry) {\n    Set<N> entrySet = Sets.newHashSet();\n    entrySet.add(entry);\n    computeFixedPoint(graph, entrySet);\n  }\n",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n   * Compute a fixed point for the given graph, entering from the given node.\n   * @param graph The graph to traverse.\n   * @param entry The node to begin traversing from.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0543
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryReplaceUndefined#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryReplaceUndefined(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryReplaceUndefined(Node n) {\n    // TODO(johnlenz): consider doing this as a normalization.\n    if (isASTNormalized()\n        && NodeUtil.isUndefined(n)\n        && !NodeUtil.isLValue(n)) {\n      Node replacement = NodeUtil.newUndefinedNode(n);\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n    return n;\n  }\n",
        "begin_line": 391,
        "end_line": 402,
        "comment": "\n   * Use \"void 0\" in place of \"undefined\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0539
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModuleGraph.getAllModules#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.getAllModules()",
        "snippet": "  Iterable<JSModule> getAllModules() {\n    return modules;\n  }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n   * Gets an iterable over all modules in dependency order.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0539
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowGraph.shouldTraverse#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.AbstractCfgNodeTraversalCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      if (parent == null) {\n        return true;\n      }\n      return !isEnteringNewCfgNode(n);\n    }\n",
        "begin_line": 137,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0539
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.handleIf#357",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleIf(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleIf(Node node) {\n    Node thenBlock = node.getFirstChild().getNext();\n    Node elseBlock = thenBlock.getNext();\n    createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));\n\n    if (elseBlock == null) {\n      createEdge(node, Branch.ON_FALSE,\n          computeFollowNode(node, this)); // not taken branch\n    } else {\n      createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock));\n    }\n    connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));\n  }\n",
        "begin_line": 357,
        "end_line": 370,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0539
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.reportCodeChange#1941",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reportCodeChange()",
        "snippet": "  @Override\n  public void reportCodeChange() {\n    for (CodeChangeHandler handler : codeChangeHandlers) {\n      handler.reportChange();\n    }\n  }\n",
        "begin_line": 1941,
        "end_line": 1946,
        "comment": "\n   * All passes should call reportCodeChange() when they alter\n   * the JS tree structure. This is verified by CompilerTestCase.\n   * This allows us to optimize to a fixed point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeChangeHandler.reportChange#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reportChange()",
        "snippet": "    @Override\n    public void reportChange() {\n      hasChanged = true;\n    }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 7
    },
    {
        "name": "DefaultPassConfig.createInternal#2000",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-2343b468-9ef7-4875-b14d-d1401bbc2d1c.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n    }\n",
        "begin_line": 2000,
        "end_line": 2003,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getErrorManager#2201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorManager()",
        "snippet": "  @Override\n  public ErrorManager getErrorManager() {\n    if (options == null) {\n      initOptions(newCompilerOptions());\n    }\n    return errorManager;\n  }\n",
        "begin_line": 2201,
        "end_line": 2207,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0536
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.visit#170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.visit(com.google.javascript.rhino.Node)",
        "snippet": "  public void visit(Node n) {\n    Node currentVersionOfNode = n;\n    boolean somethingChanged = false;\n\n    do {\n      somethingChanged = false;\n      for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n        Node newVersionOfNode =\n            optimization.optimizeSubtree(currentVersionOfNode);\n\n        if (newVersionOfNode != currentVersionOfNode) {\n          somethingChanged = true;\n\n          currentVersionOfNode = newVersionOfNode;\n        }\n\n        if (currentVersionOfNode == null) {\n          return;\n        }\n      }\n    } while(somethingChanged);\n  }\n",
        "begin_line": 170,
        "end_line": 191,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 2
    },
    {
        "name": "PassFactory.createInternal#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.Anonymous-0993da5e-1c2f-4119-be2d-6841c8b80713.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "      @Override\n      protected CompilerPass createInternal(AbstractCompiler compiler) {\n        return self.createInternal(compiler);\n      }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": " one time pass ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0533
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getPureBooleanValue#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(com.google.javascript.rhino.Node)",
        "snippet": "  static TernaryValue getPureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n          return TernaryValue.FALSE;\n        }\n        break;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }\n\n    return TernaryValue.UNKNOWN;\n  }\n",
        "begin_line": 124,
        "end_line": 170,
        "comment": "\n   * Gets the boolean value of a node that represents a literal. This method\n   * effectively emulates the <code>Boolean()</code> JavaScript cast function\n   * except it return UNKNOWN for known values with side-effects, use\n   * getExpressionBooleanValue if you don't care about side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0533
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractPeepholeOptimization.isASTNormalized#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.isASTNormalized()",
        "snippet": "  protected boolean isASTNormalized() {\n    Preconditions.checkNotNull(compiler);\n\n    return compiler.getLifeCycleStage().isNormalized();\n  }\n",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n   *  Is the current AST normalized? (e.g. has the Normalize pass been run\n   *  and has the Denormalize pass not yet been run?)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0533
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateVar#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateVar(Node n) {\n    validateNodeType(Token.VAR, n);\n    this.validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      // Don't use the validateName here as the NAME is allowed to have\n      // a child.\n      validateNodeType(Token.NAME, c);\n      validateNonEmptyString(c);\n      validateMaximumChildCount(c, 1);\n      if (c.hasChildren()) {\n        validateExpression(c.getFirstChild());\n      }\n    }\n  }\n",
        "begin_line": 389,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0533
        },
        "num_failing_tests": 7
    },
    {
        "name": "SyntacticScopeCreator.scanVars#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void scanVars(Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x = 1, y, z;\n        for (Node child = n.getFirstChild();\n             child != null;) {\n          Node next = child.getNext();\n          declareVar(child);\n          child = next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n\n        String fnName = n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(n.getFirstChild());\n        return;   // should not examine function's children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 2);\n        Preconditions.checkState(n.getFirstChild().isName());\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var = n.getFirstChild();\n        final Node block = var.getNext();\n\n        declareVar(var);\n        scanVars(block, n);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        inputId = n.getInputId();\n        Preconditions.checkNotNull(inputId);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child = n.getFirstChild();\n           child != null;) {\n        Node next = child.getNext();\n        scanVars(child, n);\n        child = next;\n      }\n    }\n  }\n",
        "begin_line": 124,
        "end_line": 178,
        "comment": "\n   * Scans and gather variables declarations under a Node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0531
        },
        "num_failing_tests": 7
    },
    {
        "name": "PassFactory.makeOneTimePass#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.makeOneTimePass()",
        "snippet": "  PassFactory makeOneTimePass() {\n    if (isOneTimePass()) {\n      return this;\n    }\n\n    final PassFactory self = this;\n    return new PassFactory(name, true /* one time pass */) {\n      @Override\n      protected CompilerPass createInternal(AbstractCompiler compiler) {\n        return self.createInternal(compiler);\n      }\n      @Override\n      HotSwapCompilerPass getHotSwapPass(AbstractCompiler compiler) {\n        return self.getHotSwapPass(compiler);\n      }\n    };\n  }\n",
        "begin_line": 64,
        "end_line": 80,
        "comment": "\n   * Make a new pass factory that only creates one-time passes.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0531
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
        "snippet": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }\n",
        "begin_line": 692,
        "end_line": 789,
        "comment": "\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0529
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.getAliasDefinitionsInOrder#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.getAliasDefinitionsInOrder()",
        "snippet": "    Collection<Node> getAliasDefinitionsInOrder() {\n      return aliasDefinitionsInOrder;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0527
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.getAliasUsages#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.getAliasUsages()",
        "snippet": "    private List<AliasUsage> getAliasUsages() {\n      return aliasUsages;\n    }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0527
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.getScopeCalls#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.getScopeCalls()",
        "snippet": "    List<Node> getScopeCalls() {\n      return scopeCalls;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0527
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.hotSwapScript#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void hotSwapScript(Node root, Node originalRoot) {\n    Traversal traversal = new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n\n    if (!traversal.hasErrors()) {\n\n      // Apply the aliases.\n      for (AliasUsage aliasUsage : traversal.getAliasUsages()) {\n        aliasUsage.applyAlias();\n      }\n\n      // Remove the alias definitions.\n      for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {\n        if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild()) {\n          aliasDefinition.getParent().detachFromParent();\n        } else {\n          aliasDefinition.detachFromParent();\n        }\n      }\n\n      // Collapse the scopes.\n      for (Node scopeCall : traversal.getScopeCalls()) {\n        Node expressionWithScopeCall = scopeCall.getParent();\n        Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();\n        scopeClosureBlock.detachFromParent();\n        expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);\n        NodeUtil.tryMergeBlock(scopeClosureBlock);\n      }\n\n      if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0) {\n        compiler.reportCodeChange();\n      }\n    }\n  }\n",
        "begin_line": 103,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0527
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processStringLiteral#910",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral)",
        "snippet": "    @Override\n    Node processStringLiteral(StringLiteral literalNode) {\n      String value = literalNode.getValue();\n      Node n = newStringNode(value);\n      if (value.indexOf('\\u000B') != -1) {\n        // NOTE(nicksantos): In JavaScript, there are 3 ways to\n        // represent a vertical tab: \\v, \\x0B, \\u000B.\n        // The \\v notation was added later, and is not understood\n        // on IE. So we need to preserve it as-is. This is really\n        // obnoxious, because we do not have a good way to represent\n        // how the original string was encoded without making the\n        // representation of strings much more complicated.\n        //\n        // To handle this, we look at the original source test, and\n        // mark the string as \\v-encoded or not. If a string is\n        // \\v encoded, then all the vertical tabs in that string\n        // will be encoded with a \\v.\n        int start = literalNode.getAbsolutePosition();\n        int end = start + literalNode.getLength();\n        if (start < sourceString.length() &&\n            (sourceString.substring(\n                 start, Math.min(sourceString.length(), end))\n             .indexOf(\"\\\\v\") != -1)) {\n          n.putBooleanProp(Node.SLASH_V, true);\n        }\n      }\n      return n;\n    }\n",
        "begin_line": 910,
        "end_line": 937,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0527
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.isEmpty#2236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEmpty()",
        "snippet": "  public boolean isEmpty() {\n    return this.getType() == Token.EMPTY;\n  }\n",
        "begin_line": 2236,
        "end_line": 2238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0526
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.tryReplaceIf#297",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryReplaceIf(com.google.javascript.rhino.Node)",
        "snippet": "  private Node tryReplaceIf(Node n) {\n\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()){\n      if (child.isIf()){\n        Node cond = child.getFirstChild();\n        Node thenBranch = cond.getNext();\n        Node elseBranch = thenBranch.getNext();\n        Node nextNode = child.getNext();\n\n        if (nextNode != null && elseBranch == null\n            && isReturnBlock(thenBranch)\n            && nextNode.isIf()) {\n          Node nextCond = nextNode.getFirstChild();\n          Node nextThen = nextCond.getNext();\n          Node nextElse = nextThen.getNext();\n          if (thenBranch.isEquivalentToTyped(nextThen)) {\n            // Transform\n            //   if (x) return 1; if (y) return 1;\n            // to\n            //   if (x||y) return 1;\n            child.detachFromParent();\n            child.detachChildren();\n            Node newCond = new Node(Token.OR, cond);\n            nextNode.replaceChild(nextCond, newCond);\n            newCond.addChildToBack(nextCond);\n            reportCodeChange();\n          } else if (nextElse != null\n              && thenBranch.isEquivalentToTyped(nextElse)) {\n            // Transform\n            //   if (x) return 1; if (y) foo() else return 1;\n            // to\n            //   if (!x&&y) foo() else return 1;\n            child.detachFromParent();\n            child.detachChildren();\n            Node newCond = new Node(Token.AND,\n                IR.not(cond).srcref(cond));\n            nextNode.replaceChild(nextCond, newCond);\n            newCond.addChildToBack(nextCond);\n            reportCodeChange();\n          }\n        } else if (nextNode != null && elseBranch == null &&\n            isReturnBlock(thenBranch) && isReturnExpression(nextNode)) {\n          Node thenExpr = null;\n          // if(x)return; return 1 -> return x?void 0:1\n          if (isReturnExpressBlock(thenBranch)) {\n            thenExpr = getBlockReturnExpression(thenBranch);\n            thenExpr.detachFromParent();\n          } else {\n            thenExpr = NodeUtil.newUndefinedNode(child);\n          }\n\n          Node elseExpr = nextNode.getFirstChild();\n\n          cond.detachFromParent();\n          elseExpr.detachFromParent();\n\n          Node returnNode = IR.returnNode(\n                                IR.hook(cond, thenExpr, elseExpr)\n                                    .srcref(child));\n          n.replaceChild(child, returnNode);\n          n.removeChild(nextNode);\n          reportCodeChange();\n        } else if (elseBranch != null && statementMustExitParent(thenBranch)) {\n          child.removeChild(elseBranch);\n          n.addChildAfter(elseBranch, child);\n          reportCodeChange();\n        }\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 297,
        "end_line": 368,
        "comment": "\n   * Use \"return x?1:2;\" in place of \"if(x)return 1;return 2;\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0525
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeSubstituteAlternateSyntax.PeepholeSubstituteAlternateSyntax#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.PeepholeSubstituteAlternateSyntax(boolean)",
        "snippet": "  PeepholeSubstituteAlternateSyntax(boolean late) {\n    this.late = late;\n  }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n   * @param late When late is false, this mean we are currently running before\n   * most of the other optimizations. In this case we would avoid optimizations\n   * that would make the code harder to analyze (such as using string splitting,\n   * merging statements with commas, etc). When this is true, we would\n   * do anything to minimize for size.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0522
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.ReferenceCollectingCallback#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior)",
        "snippet": "  ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior) {\n    this(compiler, behavior, Predicates.<Var>alwaysTrue());\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n   * Constructor initializes block stack.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0519
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newStringNode#1347",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(java.lang.String)",
        "snippet": "  private Node newStringNode(String value) {\n    return IR.string(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1347,
        "end_line": 1349,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 5
    },
    {
        "name": "ScopedAliases.hasErrors#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.hasErrors()",
        "snippet": "    boolean hasErrors() {\n      return hasErrors;\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.isCallToScopeMethod#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.isCallToScopeMethod(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isCallToScopeMethod(Node n) {\n      return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());\n    }\n",
        "begin_line": 215,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.enterScope#220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      Node n = t.getCurrentNode().getParent();\n      if (n != null && isCallToScopeMethod(n)) {\n        transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));\n        findAliases(t);\n      }\n    }\n",
        "begin_line": 220,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.exitScope#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      if (t.getScopeDepth() == 2) {\n        aliases.clear();\n        transformation = null;\n      }\n    }\n",
        "begin_line": 230,
        "end_line": 236,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.shouldTraverse#238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction() && t.inGlobalScope()) {\n        // Do not traverse in to functions except for goog.scope functions.\n        if (parent == null || !isCallToScopeMethod(parent)) {\n          return false;\n        }\n      }\n      return true;\n    }\n",
        "begin_line": 238,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.visit#318",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (isCallToScopeMethod(n)) {\n        validateScopeCall(t, n, n.getParent());\n      }\n\n      if (t.getScopeDepth() < 2) {\n        return;\n      }\n\n      int type = n.getType();\n      Var aliasVar = null;\n      if (type == Token.NAME) {\n        String name = n.getString();\n        Var lexicalVar = t.getScope().getVar(n.getString());\n        if (lexicalVar != null && lexicalVar == aliases.get(name)) {\n          aliasVar = lexicalVar;\n        }\n      }\n\n      // Validate the top-level of the goog.scope block.\n      if (t.getScopeDepth() == 2) {\n        if (aliasVar != null && NodeUtil.isLValue(n)) {\n          if (aliasVar.getNode() == n) {\n            aliasDefinitionsInOrder.add(n);\n\n            // Return early, to ensure that we don't record a definition\n            // twice.\n            return;\n          } else {\n            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n          }\n        }\n\n        if (type == Token.RETURN) {\n          report(t, n, GOOG_SCOPE_USES_RETURN);\n        } else if (type == Token.THIS) {\n          report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        } else if (type == Token.THROW) {\n          report(t, n, GOOG_SCOPE_USES_THROW);\n        }\n      }\n\n      // Validate all descendent scopes of the goog.scope block.\n      if (t.getScopeDepth() >= 2) {\n        // Check if this name points to an alias.\n        if (aliasVar != null) {\n          // Note, to support the transitive case, it's important we don't\n          // clone aliasedNode here.  For example,\n          // var g = goog; var d = g.dom; d.createElement('DIV');\n          // The node in aliasedNode (which is \"g\") will be replaced in the\n          // changes pass above with \"goog\".  If we cloned here, we'd end up\n          // with <code>g.dom.createElement('DIV')</code>.\n          Node aliasedNode = aliasVar.getInitialValue();\n          aliasUsages.add(new AliasedNode(n, aliasedNode));\n        }\n\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null) {\n          for (Node node : info.getTypeNodes()) {\n            fixTypeNode(node);\n          }\n        }\n\n        // TODO(robbyw): Error for goog.scope not at root.\n      }\n    }\n",
        "begin_line": 318,
        "end_line": 384,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.ScopedAliases#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.ScopedAliases(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PreprocessorSymbolTable, com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler)",
        "snippet": "  ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler) {\n    this.compiler = compiler;\n    this.preprocessorSymbolTable = preprocessorSymbolTable;\n    this.transformationHandler = transformationHandler;\n  }\n",
        "begin_line": 90,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "ScopedAliases.process#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    hotSwapScript(root, null);\n  }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0518
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeFoldConstants.optimizeSubtree#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.optimizeSubtree(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  Node optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }\n  }\n",
        "begin_line": 74,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeFoldConstants.tryReduceOperandsForOp#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.tryReduceOperandsForOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void tryReduceOperandsForOp(Node n) {\n    switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }\n  }\n",
        "begin_line": 192,
        "end_line": 230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addExpr#883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.isIn()))){\n      add(\"(\");\n      add(n, clearContextForNoInOperator(context));\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 883,
        "end_line": 893,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeGenerator.clearContextForNoInOperator#1194",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context clearContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);\n  }\n",
        "begin_line": 1194,
        "end_line": 1197,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, (and thus can't permit in operators\n   * in the expression), but have added parentheses, the expressions within\n   * the parens have no limits.  Clear the context flag  Be safe and don't\n   * clear the flag if it held another value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.compile#530",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compile(java.util.List<T1>, java.util.List<T2>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T1 extends SourceFile, T2 extends SourceFile> Result compile(\n      List<T1> externs, List<T2> inputs, CompilerOptions options) {\n    // The compile method should only be called once.\n    Preconditions.checkState(jsRoot == null);\n\n    try {\n      init(externs, inputs, options);\n      if (hasErrors()) {\n        return getResult();\n      }\n      return compile();\n    } finally {\n      Tracer t = newTracer(\"generateReport\");\n      errorManager.generateReport();\n      stopTracer(t, \"generateReport\");\n    }\n  }\n",
        "begin_line": 530,
        "end_line": 546,
        "comment": "\n   * Compiles a list of inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0516
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeFoldConstants.PeepholeFoldConstants#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.PeepholeFoldConstants(boolean)",
        "snippet": "  PeepholeFoldConstants(boolean late) {\n    this.late = late;\n  }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n   * @param late When late is false, this mean we are currently running before\n   * most of the other optimizations. In this case we would avoid optimizations\n   * that would make the code harder to analyze. When this is true, we would\n   * do anything to minimize for size.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0514
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.trueNode#435",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.trueNode()",
        "snippet": "  public static Node trueNode() {\n    return new Node(Token.TRUE);\n  }\n",
        "begin_line": 435,
        "end_line": 437,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0512
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.addList#903",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext) {\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      boolean isFirst = n == firstInList;\n      if (isFirst) {\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n      } else {\n        cc.listSeparator();\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);\n      }\n    }\n  }\n",
        "begin_line": 903,
        "end_line": 914,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0511
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.optimize#1835",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.optimize()",
        "snippet": "  public void optimize() {\n    // Ideally, this pass should be the first pass run, however:\n    // 1) VariableReferenceCheck reports unexpected warnings if Normalize\n    // is done first.\n    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on\n    // unmodified local names.\n    normalize();\n\n    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker, null);\n    if (options.devMode == DevMode.EVERY_PASS) {\n      phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getOptimizations());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n      return;\n    }\n  }\n",
        "begin_line": 1835,
        "end_line": 1852,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0511
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#2140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-8878ff63-6112-42b1-8d01-3d27420494bf.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler, true);\n    }\n",
        "begin_line": 2140,
        "end_line": 2143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#2131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-1bcb5b2d-2170-4f7c-b151-b4b2ec42c324.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AstValidator();\n    }\n",
        "begin_line": 2131,
        "end_line": 2134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1991",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-b05962cf-2998-4760-b48a-17edb13ab46e.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new Denormalize(compiler);\n    }\n",
        "begin_line": 1991,
        "end_line": 1994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1978",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-702df9ad-815b-46b0-91c8-493a1cd66115.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          compiler.setLifeCycleStage(LifeCycleStage.RAW);\n        }\n      };\n    }\n",
        "begin_line": 1978,
        "end_line": 1985,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.process#1981",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-8ff712c1-9d8f-4665-802f-1d412e7e94d8.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override public void process(Node externs, Node root) {\n          compiler.setLifeCycleStage(LifeCycleStage.RAW);\n        }\n",
        "begin_line": 1981,
        "end_line": 1983,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#772",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-f4589bfd-1fce-4999-bbd9-f5bcc2dbd08e.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      return new CheckSideEffects.StripProtection(compiler);\n    }\n",
        "begin_line": 772,
        "end_line": 776,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckSideEffects.StripProtection#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.StripProtection.StripProtection(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    StripProtection(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckSideEffects.process#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.StripProtection.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      NodeTraversal.traverse(compiler, root, this);\n    }\n",
        "begin_line": 212,
        "end_line": 215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "CheckSideEffects.visit#217",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.StripProtection.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall()) {\n        Node target = n.getFirstChild();\n        // TODO(johnlenz): add this to the coding convention\n        // so we can remove goog.reflect.sinkValue as well.\n        if (target.isName() && target.getString().equals(PROTECTOR_FN)) {\n          Node expr = n.getLastChild();\n          n.detachChildren();\n          parent.replaceChild(n, expr);\n        }\n      }\n    }\n",
        "begin_line": 217,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "Graph.clearNodeAnnotations#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.clearNodeAnnotations()",
        "snippet": "  @Override\n  public final void clearNodeAnnotations() {\n    for (GraphNode<N, E> n : getNodes()) {\n      n.setAnnotation(null);\n    }\n  }\n",
        "begin_line": 227,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.process#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (externs != null) {\n      validateCodeRoot(externs);\n    }\n    if (root != null) {\n      validateCodeRoot(root);\n    }\n  }\n",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.addOp#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addOp(java.lang.String, boolean)",
        "snippet": "  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formatting around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }\n",
        "begin_line": 210,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0506
        },
        "num_failing_tests": 7
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenameInverter#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.ContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private ContextualRenameInverter(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.process#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node js) {\n      NodeTraversal.traverse(compiler, js, this);\n    }\n",
        "begin_line": 278,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.enterScope#299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      referenceStack.push(referencedNames);\n      referencedNames = Sets.newHashSet();\n    }\n",
        "begin_line": 299,
        "end_line": 307,
        "comment": "\n     * Prepare a set for the new scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.exitScope#313",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n        handleScopeVar(v);\n      }\n\n      // Merge any names that were referenced but not declared in the current\n      // scope.\n      Set<String> current = referencedNames;\n      referencedNames = referenceStack.pop();\n      // If there isn't anything left in the stack we will be going into the\n      // global scope: don't try to build a set of referenced names for the\n      // global scope.\n      if (!referenceStack.isEmpty()) {\n        referencedNames.addAll(current);\n      }\n    }\n",
        "begin_line": 313,
        "end_line": 334,
        "comment": "\n     * Rename vars for the current scope, and merge any referenced\n     * names into the parent scope reference set.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.shouldTraverse#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.visit#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node node, Node parent) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      if (NodeUtil.isReferenceName(node)) {\n        String name = node.getString();\n        // Add all referenced names to the set so it is possible to check for\n        // conflicts.\n        referencedNames.add(name);\n        // Store only references to candidate names in the node map.\n        if (containsSeparator(name)) {\n          addCandidateNameReference(name, node);\n        }\n      }\n    }\n",
        "begin_line": 391,
        "end_line": 407,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.getContextualRenameInverter#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static CompilerPass getContextualRenameInverter(AbstractCompiler compiler) {\n    return new ContextualRenameInverter(compiler);\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1307",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-8d237915-73fe-454e-b23e-04c966c5cee0.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Kill the global namespace so that it can be garbage collected\n          // after all passes are through with it.\n          namespaceForChecks = null;\n        }\n\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          process(null, null);\n        }\n      };\n    }\n",
        "begin_line": 1307,
        "end_line": 1322,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.process#1310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-f8ad962e-0662-424f-b1b4-bb1f15dd436c.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Kill the global namespace so that it can be garbage collected\n          // after all passes are through with it.\n          namespaceForChecks = null;\n        }\n",
        "begin_line": 1310,
        "end_line": 1315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.compileInternal#660",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compileInternal()",
        "snippet": "  private void compileInternal() {\n    setProgress(0.0);\n    parse();\n    // 15 percent of the work is assumed to be for parsing (based on some\n    // minimal analysis on big JS projects, of course this depends on options)\n    setProgress(0.15);\n    if (hasErrors()) {\n      return;\n    }\n\n    if (!precheck()) {\n      return;\n    }\n\n    if (options.nameAnonymousFunctionsOnly) {\n      // TODO(nicksantos): Move this into an instrument() phase maybe?\n      check();\n      return;\n    }\n\n    if (!options.skipAllPasses) {\n      check();\n      if (hasErrors()) {\n        return;\n      }\n\n      if (options.isExternExportsEnabled()\n          || options.externExportsPath != null) {\n        externExports();\n      }\n\n      // IDE-mode is defined to stop here, before the heavy rewriting begins.\n      if (!options.ideMode) {\n        optimize();\n      }\n    }\n\n    if (options.recordFunctionInformation) {\n      recordFunctionInformation();\n    }\n\n    if (options.devMode == DevMode.START_AND_END) {\n      runSanityCheck();\n    }\n    setProgress(1.0);\n  }\n",
        "begin_line": 660,
        "end_line": 705,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.normalize#1892",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.normalize()",
        "snippet": "  public void normalize() {\n    logger.fine(\"Normalizing\");\n    startPass(\"normalize\");\n    process(new Normalize(this, false));\n    endPass();\n  }\n",
        "begin_line": 1892,
        "end_line": 1897,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.appendOp#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendOp(java.lang.String, boolean)",
        "snippet": "  void appendOp(String op, boolean binOp) {\n    append(op);\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0505
        },
        "num_failing_tests": 7
    },
    {
        "name": "CombinedCompilerPass.CombinedCompilerPass#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CombinedCompilerPass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback...)",
        "snippet": "  CombinedCompilerPass(\n      AbstractCompiler compiler, Callback... callbacks) {\n    this(compiler, Lists.<Callback>newArrayList(callbacks));\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "\n   * Creates a combined compiler pass.\n   * @param compiler the compiler\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.05
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.getContextForNoInOperator#1183",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context getContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);\n  }\n",
        "begin_line": 1183,
        "end_line": 1186,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, we can't permit in operators in the\n   * expression.  Pass on the IN_FOR_INIT_CLAUSE flag through subexpressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0499
        },
        "num_failing_tests": 7
    },
    {
        "name": "InlineVariables.collectAliasCandidates#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.InliningBehavior.collectAliasCandidates(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap)",
        "snippet": "    private void collectAliasCandidates(NodeTraversal t,\n        ReferenceMap referenceMap) {\n      if (mode != Mode.CONSTANTS_ONLY) {\n        for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n          Var v = it.next();\n          ReferenceCollection referenceInfo = referenceMap.getReferences(v);\n\n          // NOTE(nicksantos): Don't handle variables that are never used.\n          // The tests are much easier to write if you don't, and there's\n          // another pass that handles unused variables much more elegantly.\n          if (referenceInfo != null && referenceInfo.references.size() >= 2 &&\n              referenceInfo.isWellDefined() &&\n              referenceInfo.isAssignedOnceInLifetime()) {\n            Reference init = referenceInfo.getInitializingReference();\n            Node value = init.getAssignedValue();\n            if (value != null && value.isName()) {\n              aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));\n            }\n          }\n        }\n      }\n    }\n",
        "begin_line": 167,
        "end_line": 188,
        "comment": "\n     * If any of the variables are well-defined and alias other variables,\n     * mark them as aliasing candidates.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0497
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processFunctionCall#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall)",
        "snippet": "    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      node.setLineno(node.getFirstChild().getLineno());\n      node.setCharno(node.getFirstChild().getCharno());\n      maybeSetLengthFrom(node, callNode);\n      return node;\n    }\n",
        "begin_line": 612,
        "end_line": 624,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0497
        },
        "num_failing_tests": 6
    },
    {
        "name": "SyntacticScopeCreator.declareVar#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void declareVar(Node n) {\n    Preconditions.checkState(n.isName());\n\n    CompilerInput input = compiler.getInput(inputId);\n    String name = n.getString();\n    if (scope.isDeclared(name, false)\n        || (scope.isLocal() && name.equals(ARGUMENTS))) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, input);\n    } else {\n      scope.declare(name, n, null, input);\n    }\n  }\n",
        "begin_line": 233,
        "end_line": 245,
        "comment": "\n   * Declares a variable.\n   *\n   * @param n The node corresponding to the variable name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0496
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeUtil.isReferenceName#1733",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isReferenceName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isReferenceName(Node n) {\n    return n.isName() && !n.getString().isEmpty();\n  }\n",
        "begin_line": 1733,
        "end_line": 1735,
        "comment": "\n   * @return Whether the name is a reference to a variable, function or\n   *       function parameter (not a label or a empty function expression name).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0495
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.newExpr#750",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.newExpr(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node newExpr(Node child) {\n    return IR.exprResult(child).srcref(child);\n  }\n",
        "begin_line": 750,
        "end_line": 752,
        "comment": "\n   * Creates an EXPR_RESULT.\n   *\n   * @param child The expression itself.\n   * @return Newly created EXPR node with the child as subexpression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0494
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineFunctions.process#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n\n    NodeTraversal.traverse(compiler, root, new FindCandidateFunctions());\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n    NodeTraversal.traverse(compiler, root,\n       new FindCandidatesReferences(fns, anonFns));\n    trimCanidatesNotMeetingMinimumRequirements();\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n\n    // Store the set of function names eligible for inlining and use this to\n    // prevent function names from being moved into temporaries during\n    // expression decomposition. If this movement were allowed it would prevent\n    // the Inline callback from finding the function calls.\n    //\n    // This pass already assumes these are constants, so this is safe for anyone\n    // using function inlining.\n    //\n    Set<String> fnNames = Sets.newHashSet(fns.keySet());\n    injector.setKnownConstants(fnNames);\n\n    trimCanidatesUsingOnCost();\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n    resolveInlineConflicts();\n    decomposeExpressions(fnNames);\n    NodeTraversal.traverse(compiler, root,\n        new CallVisitor(\n            fns, anonFns, new Inline(injector, specializationState)));\n\n    removeInlinedFunctions();\n  }\n",
        "begin_line": 112,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0494
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endLine#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endLine()",
        "snippet": "  void endLine() {\n  }\n",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0492
        },
        "num_failing_tests": 7
    },
    {
        "name": "Denormalize.process#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.049
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineVariables.isVarInlineForbidden#342",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.InliningBehavior.isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "    private boolean isVarInlineForbidden(Var var) {\n      // A variable may not be inlined if:\n      // 1) The variable is exported,\n      // 2) A reference to the variable has been inlined. We're downstream\n      //    of the mechanism that creates variable references, so we don't\n      //    have a good way to update the reference. Just punt on it.\n      // 3) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME\n      return var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);\n    }\n",
        "begin_line": 342,
        "end_line": 353,
        "comment": "\n     * Whether the given variable is forbidden from being inlined.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.updateAssignAllowedStack#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.updateAssignAllowedStack(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    private void updateAssignAllowedStack(Node n, boolean entering) {\n      switch (n.getType()) {\n        case Token.CASE:\n        case Token.FOR:\n        case Token.FUNCTION:\n        case Token.HOOK:\n        case Token.IF:\n        case Token.SWITCH:\n        case Token.WHILE:\n          if (entering) {\n            assignAllowed.push(0);\n          } else {\n            assignAllowed.remove();\n          }\n          break;\n      }\n    }\n",
        "begin_line": 380,
        "end_line": 396,
        "comment": "\n     * Determines whether assignment to a define should be allowed\n     * in the subtree of the given node, and if not, records that fact.\n     *\n     * @param n The node whose subtree we're about to enter or exit.\n     * @param entering True if we're entering the subtree, false otherwise.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "Denormalize.Denormalize#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.Denormalize(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Denormalize(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "Denormalize.shouldTraverse#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    return true;\n  }\n",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "Denormalize.visit#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "signature": "com.google.javascript.jscomp.Denormalize.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    maybeCollapseIntoForStatements(n, parent);\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.visitOrMaybeActivate#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.visitOrMaybeActivate(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void visitOrMaybeActivate(NodeTraversal t, Node n, Node parent) {\n      if (isActive()) {\n        callback.visit(t, n, parent);\n      } else if (waiting == n) {\n        waiting = null;\n      }\n    }\n",
        "begin_line": 121,
        "end_line": 127,
        "comment": "\n     * Visits the node unless the wrapped callback is inactive. Activates the\n     * callback if appropriate.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.shouldTraverseIfActive#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.shouldTraverseIfActive(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void shouldTraverseIfActive(NodeTraversal t, Node n, Node parent) {\n      if (isActive() && !callback.shouldTraverse(t, n, parent)) {\n        waiting = n;\n      }\n    }\n",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.isActive#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.isActive()",
        "snippet": "    boolean isActive() {\n      return waiting == null;\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.CombinedCompilerPass#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CombinedCompilerPass(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback>)",
        "snippet": "  CombinedCompilerPass(\n      AbstractCompiler compiler, List<Callback> callbacks) {\n    this.compiler = compiler;\n    this.callbacks = new CallbackWrapper[callbacks.size()];\n    for (int i = 0; i < callbacks.size(); i++) {\n      this.callbacks[i] = new CallbackWrapper(callbacks.get(i));\n    }\n  }\n",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.process#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public final void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.shouldTraverse#162",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.shouldTraverseIfActive(t, n, parent);\n    }\n    // Note that this method could return false if all callbacks are inactive.\n    // This apparent optimization would make this method more expensive\n    // in the typical case where not all nodes are inactive. It is\n    // very unlikely that many all callbacks would be inactive at the same\n    // time (indeed, there are several checking passes that never return false).\n    return true;\n  }\n",
        "begin_line": 162,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.visit#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.visitOrMaybeActivate(t, n, parent);\n    }\n  }\n",
        "begin_line": 175,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.enterScope#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.enterScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 182,
        "end_line": 187,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "CombinedCompilerPass.exitScope#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.exitScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 189,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0487
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.scanRoot#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  private void scanRoot(Node n, Scope parent) {\n    if (n.isFunction()) {\n      if (inputId == null) {\n        inputId = NodeUtil.getInputId(n);\n        // TODO(johnlenz): inputId maybe null if the FUNCTION node is detached\n        // from the AST.\n        // Is it meaningful to build a scope for detached FUNCTION node?\n      }\n\n      final Node fnNameNode = n.getFirstChild();\n      final Node args = fnNameNode.getNext();\n      final Node body = args.getNext();\n\n      // Bleed the function name into the scope, if it hasn't\n      // been declared in the outer scope.\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n        declareVar(fnNameNode);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.isParamList());\n      for (Node a = args.getFirstChild(); a != null;\n           a = a.getNext()) {\n        Preconditions.checkState(a.isName());\n        declareVar(a);\n      }\n\n      // Body\n      scanVars(body, n);\n    } else {\n      // It's the global block\n      Preconditions.checkState(scope.getParent() == null);\n      scanVars(n, null);\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0485
        },
        "num_failing_tests": 7
    },
    {
        "name": "SyntacticScopeCreator.createScope#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  @Override\n  public Scope createScope(Node n, Scope parent) {\n    inputId = null;\n    if (parent == null) {\n      scope = new Scope(n, compiler);\n    } else {\n      scope = new Scope(parent, n);\n    }\n\n    scanRoot(n, parent);\n\n    inputId = null;\n    Scope returnedScope = scope;\n    scope = null;\n    return returnedScope;\n  }\n",
        "begin_line": 67,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0483
        },
        "num_failing_tests": 7
    },
    {
        "name": "InlineVariables.afterExitScope#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.InliningBehavior.afterExitScope(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap)",
        "snippet": "    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {\n      collectAliasCandidates(t, referenceMap);\n      doInlinesForScope(t, referenceMap);\n    }\n",
        "begin_line": 157,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0483
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineVariables.InlineVariables#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.InlineVariables(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.InlineVariables.Mode, boolean)",
        "snippet": "  InlineVariables(\n      AbstractCompiler compiler,\n      Mode mode,\n      boolean inlineAllStrings) {\n    this.compiler = compiler;\n    this.mode = mode;\n    this.inlineAllStrings = inlineAllStrings;\n  }\n",
        "begin_line": 73,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0483
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineVariables.process#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "signature": "com.google.javascript.jscomp.InlineVariables.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior(), getFilterForMode());\n    callback.process(externs, root);\n  }\n",
        "begin_line": 82,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0483
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getControlFlowGraph#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getControlFlowGraph()",
        "snippet": "  public ControlFlowGraph<Node> getControlFlowGraph() {\n    if (cfgs.peek() == null) {\n      ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);\n      cfa.process(null, getScopeRoot());\n      cfgs.pop();\n      cfgs.push(cfa.getCfg());\n    }\n    return cfgs.peek();\n  }\n",
        "begin_line": 612,
        "end_line": 620,
        "comment": " Gets the control flow graph for the current JS scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0482
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.process#804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.process(com.google.javascript.jscomp.CompilerPass)",
        "snippet": "  @Override\n  void process(CompilerPass p) {\n    p.process(externsRoot, jsRoot);\n  }\n",
        "begin_line": 804,
        "end_line": 807,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0482
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.maybeSanityCheck#817",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.maybeSanityCheck()",
        "snippet": "  private void maybeSanityCheck() {\n    if (options.devMode == DevMode.EVERY_PASS) {\n      runSanityCheck();\n    }\n  }\n",
        "begin_line": 817,
        "end_line": 821,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0482
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.startPass#877",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.startPass(java.lang.String)",
        "snippet": "  void startPass(String passName) {\n    Preconditions.checkState(currentTracer == null);\n    currentPassName = passName;\n    currentTracer = newTracer(passName);\n  }\n",
        "begin_line": 877,
        "end_line": 881,
        "comment": "\n   * Marks the beginning of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0482
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.endPass#886",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.endPass()",
        "snippet": "  void endPass() {\n    Preconditions.checkState(currentTracer != null,\n        \"Tracer should not be null at the end of a pass.\");\n    stopTracer(currentTracer, currentPassName);\n    String passToCheck = currentPassName;\n    currentPassName = null;\n    currentTracer = null;\n\n    maybeSanityCheck();\n  }\n",
        "begin_line": 886,
        "end_line": 895,
        "comment": "\n   * Marks the end of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0482
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateBlock#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBlock(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 277,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0482
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isOnlyModifiesThisCall#2095",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isOnlyModifiesThisCall()",
        "snippet": "  public boolean isOnlyModifiesThisCall() {\n    return areBitFlagsSet(\n        getSideEffectFlags() & Node.NO_SIDE_EFFECTS,\n        Node.FLAG_GLOBAL_STATE_UNMODIFIED\n            | Node.FLAG_ARGUMENTS_UNMODIFIED\n            | Node.FLAG_NO_THROWS);\n  }\n",
        "begin_line": 2095,
        "end_line": 2101,
        "comment": "\n   * @return Whether the only side-effect is \"modifies this\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0479
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.annotateCalls#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateCalls(com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }\n",
        "begin_line": 164,
        "end_line": 180,
        "comment": "\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 6
    },
    {
        "name": "AbstractPeepholeOptimization.mayHaveSideEffects#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.mayHaveSideEffects(com.google.javascript.rhino.Node)",
        "snippet": "  boolean mayHaveSideEffects(Node n) {\n    return NodeUtil.mayHaveSideEffects(n, compiler);\n  }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "\n   * @return Whether the node may have side effects when executed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0474
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.visit#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.IF:\n        handleIf(n);\n        return;\n      case Token.WHILE:\n        handleWhile(n);\n        return;\n      case Token.DO:\n        handleDo(n);\n        return;\n      case Token.FOR:\n        handleFor(n);\n        return;\n      case Token.SWITCH:\n        handleSwitch(n);\n        return;\n      case Token.CASE:\n        handleCase(n);\n        return;\n      case Token.DEFAULT_CASE:\n        handleDefault(n);\n        return;\n      case Token.BLOCK:\n      case Token.SCRIPT:\n        handleStmtList(n);\n        return;\n      case Token.FUNCTION:\n        handleFunction(n);\n        return;\n      case Token.EXPR_RESULT:\n        handleExpr(n);\n        return;\n      case Token.THROW:\n        handleThrow(n);\n        return;\n      case Token.TRY:\n        handleTry(n);\n        return;\n      case Token.CATCH:\n        handleCatch(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n      case Token.RETURN:\n        handleReturn(n);\n        return;\n      case Token.WITH:\n        handleWith(n);\n        return;\n      case Token.LABEL:\n        return;\n      default:\n        handleStmt(n);\n        return;\n    }\n  }\n",
        "begin_line": 294,
        "end_line": 355,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.047
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.declare#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }\n",
        "begin_line": 484,
        "end_line": 486,
        "comment": "\n   * Declares a variable whose type is inferred.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 7
    },
    {
        "name": "GlobalNamespace.getNameForObjLitKey#448",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.getNameForObjLitKey(com.google.javascript.rhino.Node)",
        "snippet": "    String getNameForObjLitKey(Node n) {\n      Node parent = n.getParent();\n      Preconditions.checkState(parent.isObjectLit());\n\n      Node gramps = parent.getParent();\n      if (gramps == null) {\n        return null;\n      }\n\n      Node greatGramps = gramps.getParent();\n      String name;\n      switch (gramps.getType()) {\n        case Token.NAME:\n          // VAR\n          //   NAME (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps == null || !greatGramps.isVar()) {\n            return null;\n          }\n          name = gramps.getString();\n          break;\n        case Token.ASSIGN:\n          // ASSIGN (gramps)\n          //   NAME|GETPROP\n          //   OBJLIT (parent)\n          //     STRING (n)\n          Node lvalue = gramps.getFirstChild();\n          name = lvalue.getQualifiedName();\n          break;\n        case Token.STRING_KEY:\n          // OBJLIT\n          //   STRING (gramps)\n          //     OBJLIT (parent)\n          //       STRING (n)\n          if (greatGramps != null &&\n              greatGramps.isObjectLit()) {\n            name = getNameForObjLitKey(gramps);\n          } else {\n            return null;\n          }\n          break;\n        default:\n          return null;\n      }\n      if (name != null) {\n        String key = n.getString();\n        if (TokenStream.isJSIdentifier(key)) {\n          return name + '.' + key;\n        }\n      }\n      return null;\n    }\n",
        "begin_line": 448,
        "end_line": 500,
        "comment": "\n     * Gets the fully qualified name corresponding to an object literal key,\n     * as long as it and its prefix property names are valid JavaScript\n     * identifiers. The object literal may be nested inside of other object\n     * literals.\n     *\n     * For example, if called with node {@code n} representing \"z\" in any of\n     * the following expressions, the result would be \"w.x.y.z\":\n     * <code> var w = {x: {y: {z: 0}}}; </code>\n     * <code> w.x = {y: {z: 0}}; </code>\n     * <code> w.x.y = {'a': 0, 'z': 0}; </code>\n     *\n     * @param n A child of an OBJLIT node\n     * @return The global name, or null if {@code n} doesn't correspond to the\n     *   key of an object literal that can be named\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 1
    },
    {
        "name": "RenameLabels.ProcessLabels#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.ProcessLabels()",
        "snippet": "    ProcessLabels() {\n      // Create a entry for global scope.\n      namespaceStack.push(new LabelNamespace());\n    }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameLabels.enterScope#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal nodeTraversal) {\n      // Start a new namespace for label names.\n      namespaceStack.push(new LabelNamespace());\n    }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameLabels.exitScope#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal nodeTraversal) {\n      namespaceStack.pop();\n    }\n",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameLabels.shouldTraverse#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node,\n        Node parent) {\n      if (node.isLabel()) {\n        // Determine the new name for this label.\n        LabelNamespace current = namespaceStack.peek();\n        int currentDepth = current.renameMap.size() + 1;\n        String name = node.getFirstChild().getString();\n\n        // Store the context for this label name.\n        LabelInfo li = new LabelInfo(currentDepth);\n        Preconditions.checkState(!current.renameMap.containsKey(name));\n        current.renameMap.put(name, li);\n\n        // Create a new name, if needed, for this depth.\n        if (names.size() < currentDepth) {\n          names.add(nameSupplier.get());\n        }\n\n        String newName = getNameForId(currentDepth);\n        compiler.addToDebugLog(\"label renamed: \" + name + \" => \" + newName);\n      }\n\n      return true;\n    }\n",
        "begin_line": 136,
        "end_line": 160,
        "comment": "\n     * shouldTraverse is call when descending into the Node tree, so it is used\n     * here to build the context for label renames.\n     *\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "com.google.javascript.jscomp.NodeTraversal.ScopedCallback": null,
            "com.google.javascript.jscomp.CompilerPass": "\n   * Process the JS with root node root.\n   * Can modify the contents of each Node tree\n   * @param externs Top of external JS tree\n   * @param root Top of JS tree\n   "
        },
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameLabels.visit#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal nodeTraversal, Node node, Node parent) {\n      switch (node.getType()) {\n        case Token.LABEL:\n          visitLabel(node, parent);\n          break;\n\n        case Token.BREAK:\n        case Token.CONTINUE:\n          visitBreakOrContinue(node);\n          break;\n      }\n    }\n",
        "begin_line": 168,
        "end_line": 180,
        "comment": "\n     * Delegate the actual processing of the node to visitLabel and\n     * visitBreakOrContinue.\n     *\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "com.google.javascript.jscomp.NodeTraversal.ScopedCallback": null,
            "com.google.javascript.jscomp.CompilerPass": "\n   * Process the JS with root node root.\n   * Can modify the contents of each Node tree\n   * @param externs Top of external JS tree\n   * @param root Top of JS tree\n   "
        },
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameLabels.RenameLabels#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.RenameLabels(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean)",
        "snippet": "  RenameLabels(\n      AbstractCompiler compiler,\n      Supplier<String> supplier,\n      boolean removeUnused) {\n    this.compiler = compiler;\n    this.nameSupplier = supplier;\n    this.removeUnused = removeUnused;\n  }\n",
        "begin_line": 80,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "RenameLabels.process#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    // Do variable reference counting.\n    NodeTraversal.traverse(compiler, root, new ProcessLabels());\n  }\n",
        "begin_line": 257,
        "end_line": 261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.setOut#361",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.setOut(L)",
        "snippet": "    void setOut(L out) {\n      Preconditions.checkNotNull(out);\n      this.out = out;\n    }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.getOptionalNodeComparator#1021",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.getOptionalNodeComparator(boolean)",
        "snippet": "    @Override\n    /**\n     * Returns a node comparator based on the pre-order traversal of the AST.\n     * @param isForward x 'before' y in the pre-order traversal implies\n     * x 'less than' y (if true) and x 'greater than' y (if false).\n     */\n    public Comparator<DiGraphNode<Node, Branch>> getOptionalNodeComparator(\n        boolean isForward) {\n      if (isForward) {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n        };\n      } else {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };\n      }\n    }\n",
        "begin_line": 1021,
        "end_line": 1046,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.compare#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.Anonymous-739ec4e3-488c-4200-b394-f732426f7716.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n",
        "begin_line": 1039,
        "end_line": 1043,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0468
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getSourceFile#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return ast.getSourceFile();\n  }\n",
        "begin_line": 130,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.getReferences#262",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper.getReferences(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "    @Override\n    public ReferenceCollection getReferences(Var var) {\n      return referenceMap.get(var);\n    }\n",
        "begin_line": 262,
        "end_line": 265,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0466
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.getOut#357",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.getOut()",
        "snippet": "    L getOut() {\n      return out;\n    }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0466
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateExprStmt#473",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExprStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateExprStmt(Node n) {\n    validateNodeType(Token.EXPR_RESULT, n);\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 473,
        "end_line": 477,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0465
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.maybeCutLine#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          prevCutPosition = position;\n          reportLineCut(lineIndex, position - lineStartPosition, true);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 489,
        "end_line": 506,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0463
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isEquivalentTo#1490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n  }\n",
        "begin_line": 1490,
        "end_line": 1492,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0463
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.addNumber#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addNumber(double)",
        "snippet": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        addConstant(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        addConstant(Long.toString(value));\n      }\n    } else {\n      addConstant(String.valueOf(x));\n    }\n  }\n",
        "begin_line": 240,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0459
        },
        "num_failing_tests": 5
    },
    {
        "name": "CodeConsumer.isNegativeZero#273",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isNegativeZero(double)",
        "snippet": "  static boolean isNegativeZero(double x) {\n    return x == 0.0 && Math.copySign(1, x) == -1.0;\n  }\n",
        "begin_line": 273,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0459
        },
        "num_failing_tests": 5
    },
    {
        "name": "Compiler.getRoot#948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getRoot()",
        "snippet": "  @Override\n  public Node getRoot() {\n    return externAndJsRoot;\n  }\n",
        "begin_line": 948,
        "end_line": 951,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.detachFromParent#1622",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.detachFromParent()",
        "snippet": "  public Node detachFromParent() {\n    Preconditions.checkState(parent != null);\n    parent.removeChild(this);\n    return this;\n  }\n",
        "begin_line": 1622,
        "end_line": 1626,
        "comment": "\n   * Removes this node from its parent. Equivalent to:\n   * node.getParent().removeChild();\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0457
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateChildCount#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 0) {\n      valid = !n.hasChildren();\n    } else if (i == 1) {\n      valid = n.hasOneChild();\n    } else {\n      valid = (n.getChildCount() == i);\n    }\n    if (!valid) {\n      violation(\n          \"Expected \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 774,
        "end_line": 788,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0457
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.removeChild#699",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "  public void removeChild(Node child) {\n    Node prev = getChildBefore(child);\n    if (prev == null)\n        first = first.next;\n    else\n        prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 699,
        "end_line": 708,
        "comment": "\n   * Detach a child from its parent and siblings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0456
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getChildAtIndex#566",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildAtIndex(int)",
        "snippet": "  public Node getChildAtIndex(int i) {\n    Node n = first;\n    while (i > 0) {\n      n = n.next;\n      i--;\n    }\n    return n;\n  }\n",
        "begin_line": 566,
        "end_line": 573,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0455
        },
        "num_failing_tests": 7
    },
    {
        "name": "Scope.getVarCount#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVarCount()",
        "snippet": "  public int getVarCount() {\n    return vars.size();\n  }\n",
        "begin_line": 606,
        "end_line": 608,
        "comment": "\n   * Returns number of variables in this scope\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0453
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getChildBefore#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 552,
        "end_line": 564,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0453
        },
        "num_failing_tests": 7
    },
    {
        "name": "DataFlowAnalysis.computeEscaped#548",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.computeEscaped(com.google.javascript.jscomp.Scope, java.util.Set<com.google.javascript.jscomp.Scope.Var>, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static void computeEscaped(final Scope jsScope, final Set<Var> escaped,\n      AbstractCompiler compiler) {\n    // TODO(user): Very good place to store this information somewhere.\n    AbstractPostOrderCallback finder = new AbstractPostOrderCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (jsScope == t.getScope() || !n.isName()\n            || parent.isFunction()) {\n          return;\n        }\n        String name = n.getString();\n        Var var = t.getScope().getVar(name);\n        if (var != null && var.scope == jsScope) {\n          escaped.add(jsScope.getVar(name));\n        }\n      }\n    };\n\n    NodeTraversal t = new NodeTraversal(compiler, finder);\n    t.traverseAtScope(jsScope);\n\n    // 1: Remove the exception name in CATCH which technically isn't local to\n    //    begin with.\n    for (Iterator<Var> i = jsScope.getVars(); i.hasNext();) {\n      Var var = i.next();\n      if (var.getParentNode().isCatch() ||\n          compiler.getCodingConvention().isExported(var.getName())) {\n        escaped.add(var);\n      }\n    }\n  }\n",
        "begin_line": 548,
        "end_line": 578,
        "comment": "\n   * Compute set of escaped variables. When a variable is escaped in a\n   * dataflow analysis, it can be reference outside of the code that we are\n   * analyzing. A variable is escaped if any of the following is true:\n   *\n   * <p><ol>\n   * <li>It is defined as the exception name in CATCH clause so it became a\n   * variable local not to our definition of scope.</li>\n   * <li>Exported variables as they can be needed after the script terminates.\n   * </li>\n   * <li>Names of named functions because in JavaScript, <i>function foo(){}</i>\n   * does not kill <i>foo</i> in the dataflow.</li>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.FlowState#341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.FlowState(L, L)",
        "snippet": "    private FlowState(L inState, L outState) {\n      Preconditions.checkNotNull(inState);\n      Preconditions.checkNotNull(outState);\n      this.in = inState;\n      this.out = outState;\n    }\n",
        "begin_line": 341,
        "end_line": 346,
        "comment": "\n     * Private constructor. No other classes should create new states.\n     *\n     * @param inState Input.\n     * @param outState Output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.getIn#348",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.FlowState.getIn()",
        "snippet": "    L getIn() {\n      return in;\n    }\n",
        "begin_line": 348,
        "end_line": 350,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.visit#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.Anonymous-03c8356b-e896-4d04-8553-ed118f61c350.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (jsScope == t.getScope() || !n.isName()\n            || parent.isFunction()) {\n          return;\n        }\n        String name = n.getString();\n        Var var = t.getScope().getVar(name);\n        if (var != null && var.scope == jsScope) {\n          escaped.add(jsScope.getVar(name));\n        }\n      }\n",
        "begin_line": 552,
        "end_line": 563,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.initialize#248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.initialize()",
        "snippet": "  protected void initialize() {\n    // TODO(user): Calling clear doesn't deallocate the memory in a\n    // LinkedHashSet. Consider creating a new work set if we plan to repeatedly\n    // call analyze.\n    orderedWorkSet.clear();\n    for (DiGraphNode<N, Branch> node : cfg.getDirectedGraphNodes()) {\n      node.setAnnotation(new FlowState<L>(createInitialEstimateLattice(),\n          createInitialEstimateLattice()));\n      if (node != cfg.getImplicitReturn()) {\n        orderedWorkSet.add(node);\n      }\n    }\n  }\n",
        "begin_line": 248,
        "end_line": 260,
        "comment": "\n   * Initializes the work list and the control flow graph.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameGenerator.reserveCharacters#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "signature": "com.google.javascript.jscomp.NameGenerator.reserveCharacters(char[], char[])",
        "snippet": "  static char[] reserveCharacters(char[] chars, char[] reservedCharacters) {\n    if (reservedCharacters == null || reservedCharacters.length == 0) {\n      return chars;\n    }\n    Set<Character> charSet = Sets.newLinkedHashSet(Chars.asList(chars));\n    for (char reservedCharacter : reservedCharacters) {\n      charSet.remove(reservedCharacter);\n    }\n    return Chars.toArray(charSet);\n  }\n",
        "begin_line": 78,
        "end_line": 87,
        "comment": "\n   * Provides the array of available characters based on the specified arrays.\n   * @param chars The list of characters that are legal\n   * @param reservedCharacters The characters that should not be used\n   * @return An array of characters to use. Will return the chars array if\n   *    reservedCharacters is null or empty, otherwise creates a new array.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endStatement#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.endStatement#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.addIdentifier#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 7
    },
    {
        "name": "VarCheck.visit#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.NameRefInExternsCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        switch (parent.getType()) {\n          case Token.VAR:\n          case Token.FUNCTION:\n          case Token.PARAM_LIST:\n            // These are okay.\n            break;\n          case Token.GETPROP:\n            if (n == parent.getFirstChild()) {\n              Scope scope = t.getScope();\n              Scope.Var var = scope.getVar(n.getString());\n              if (var == null) {\n                t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());\n                varsToDeclareInExterns.add(n.getString());\n              }\n            }\n            break;\n          default:\n            t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());\n\n            Scope scope = t.getScope();\n            Scope.Var var = scope.getVar(n.getString());\n            if (var == null) {\n              varsToDeclareInExterns.add(n.getString());\n            }\n            break;\n        }\n      }\n    }\n",
        "begin_line": 233,
        "end_line": 263,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.add#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0448
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeGenerator.addIdentifier#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0448
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeGenerator.identifierEscape#1105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-Latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // Identifiers should always go to Latin1/ ASCII characters because\n      // different browser's rules for valid identifier characters are\n      // crazy.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 1105,
        "end_line": 1125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0448
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeUtil.isLatin#2401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    char LARGEST_BASIC_LATIN = 0x7f;\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 2401,
        "end_line": 2411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0448
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.toSource#1740",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n  }\n",
        "begin_line": 1740,
        "end_line": 1744,
        "comment": "\n   * Generates JavaScript source code for an AST, doesn't generate source\n   * map info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0447
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessDefines.process#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (namespace == null) {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n    overrideDefines(collectDefines(root, namespace));\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0447
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 508,
        "end_line": 511,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0447
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.append#442",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 442,
        "end_line": 446,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0446
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.cloneTree#1706",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "  public Node cloneTree() {\n    Node result = cloneNode();\n    for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n      Node n2clone = n2.cloneTree();\n      n2clone.parent = result;\n      if (result.last != null) {\n        result.last.next = n2clone;\n      }\n      if (result.first == null) {\n        result.first = n2clone;\n      }\n      result.last = n2clone;\n    }\n    return result;\n  }\n",
        "begin_line": 1706,
        "end_line": 1720,
        "comment": "\n   * @return A detached clone of the Node and all its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0446
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateName#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonEmptyString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0445
        },
        "num_failing_tests": 7
    },
    {
        "name": "ControlFlowAnalysis.shouldTraverse#217",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node n, Node parent) {\n    astPosition.put(n, astPositionCounter++);\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {\n          exceptionHandler.push(n);\n          return true;\n        }\n        return false;\n      case Token.TRY:\n        exceptionHandler.push(n);\n        return true;\n    }\n\n    /*\n     * We are going to stop the traversal depending on what the node's parent\n     * is.\n     *\n     * We are only interested in adding edges between nodes that change control\n     * flow. The most obvious ones are loops and IF-ELSE's. A statement\n     * transfers control to its next sibling.\n     *\n     * In case of an expression tree, there is no control flow within the tree\n     * even when there are short circuited operators and conditionals. When we\n     * are doing data flow analysis, we will simply synthesize lattices up the\n     * expression tree by finding the meet at each expression node.\n     *\n     * For example: within a Token.SWITCH, the expression in question does not\n     * change the control flow and need not to be considered.\n     */\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.FOR:\n          // Only traverse the body of the for loop.\n          return n == parent.getLastChild();\n\n        // Skip the conditions.\n        case Token.IF:\n        case Token.WHILE:\n        case Token.WITH:\n          return n != parent.getFirstChild();\n        case Token.DO:\n          return n != parent.getFirstChild().getNext();\n        // Only traverse the body of the cases\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.CATCH:\n        case Token.LABEL:\n          return n != parent.getFirstChild();\n        case Token.FUNCTION:\n          return n == parent.getFirstChild().getNext().getNext();\n        case Token.CONTINUE:\n        case Token.BREAK:\n        case Token.EXPR_RESULT:\n        case Token.VAR:\n        case Token.RETURN:\n        case Token.THROW:\n          return false;\n        case Token.TRY:\n          /* Just before we are about to visit the second child of the TRY node,\n           * we know that we will be visiting either the CATCH or the FINALLY.\n           * In other words, we know that the post order traversal of the TRY\n           * block has been finished, no more exceptions can be caught by the\n           * handler at this TRY block and should be taken out of the stack.\n           */\n          if (n == parent.getFirstChild().getNext()) {\n            Preconditions.checkState(exceptionHandler.peek() == parent);\n            exceptionHandler.pop();\n          }\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 217,
        "end_line": 292,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0445
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.disables#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup group) {\n    nextSingleton:\n    for (DiagnosticType type : group.getTypes()) {\n      DiagnosticGroup singleton = DiagnosticGroup.forType(type);\n\n      for (WarningsGuard guard : guards) {\n        if (guard.disables(singleton)) {\n          continue nextSingleton;\n        } else if (guard.enables(singleton)) {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 124,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0445
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.add#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    } else if (c == '/' && getLastChar() == '/') {\n      // Do not allow a forward slash to appear after a DIV.\n      // For example,\n      // REGEXP DIV REGEXP\n      // is valid and should print like\n      // / // / /\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 181,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0444
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.getLastChar#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 205,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0444
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.getLanguageOut#1399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageOut()",
        "snippet": "  public LanguageMode getLanguageOut() {\n    return languageOut;\n  }\n",
        "begin_line": 1399,
        "end_line": 1401,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.toSource#1749",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SourceMap, boolean)",
        "snippet": "  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n    builder.setLineLengthThreshold(options.lineLengthThreshold);\n\n    Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;\n    builder.setOutputCharset(charset);\n\n    return builder.build();\n  }\n",
        "begin_line": 1749,
        "end_line": 1765,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.setSourceMapDetailLevel#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    Builder setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n      Preconditions.checkState(level != null);\n      this.sourceMapDetailLevel = level;\n      return this;\n    }\n",
        "begin_line": 631,
        "end_line": 635,
        "comment": "\n     * @param level The detail level to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.setOutputCharset#641",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setOutputCharset(java.nio.charset.Charset)",
        "snippet": "    Builder setOutputCharset(Charset outCharset) {\n      this.outputCharset = outCharset;\n      return this;\n    }\n",
        "begin_line": 641,
        "end_line": 644,
        "comment": "\n     * Set the charset to use when determining what characters need to be\n     * escaped in the output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.isWordChar#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 277,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.setPreferLineBreakAtEndOfFile#592",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPreferLineBreakAtEndOfFile(boolean)",
        "snippet": "    Builder setPreferLineBreakAtEndOfFile(boolean lineBreakAtEnd) {\n      this.preferLineBreakAtEndOfFile = lineBreakAtEnd;\n      return this;\n    }\n",
        "begin_line": 592,
        "end_line": 595,
        "comment": "\n     * Sets whether line breaking is preferred at end of file. This is useful\n     * if JS serving code needs a place to insert code, such as script tags,\n     * without interfering with source maps.\n     * @param lineBreakAtEnd If true, prefer line breaking at end of file.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.setTagAsStrict#649",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setTagAsStrict(boolean)",
        "snippet": "    Builder setTagAsStrict(boolean tagAsStrict) {\n      this.tagAsStrict = tagAsStrict;\n      return this;\n    }\n",
        "begin_line": 649,
        "end_line": 652,
        "comment": "\n     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeChangeHandler.reset#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reset()",
        "snippet": "    void reset() {\n      hasChanged = false;\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.cloneNode#1687",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "  public Node cloneNode() {\n    Node result;\n    try {\n      result = (Node) super.clone();\n      // PropListItem lists are immutable and can be shared so there is no\n      // need to clone them here.\n      result.next = null;\n      result.first = null;\n      result.last = null;\n      result.parent = null;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return result;\n  }\n",
        "begin_line": 1687,
        "end_line": 1701,
        "comment": "\n   * @return A detached clone of the Node, specifically excluding its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0442
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.traverseAtScope#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseAtScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  void traverseAtScope(Scope s) {\n    Node n = s.getRootNode();\n    if (n.isFunction()) {\n      // We need to do some extra magic to make sure that the scope doesn't\n      // get re-created when we dive into the function.\n      if (inputId == null) {\n        inputId = NodeUtil.getInputId(n);\n      }\n      sourceName = getSourceName(n);\n      curNode = n;\n      pushScope(s);\n\n      Node args = n.getFirstChild().getNext();\n      Node body = args.getNext();\n      traverseBranch(args, n);\n      traverseBranch(body, n);\n\n      popScope();\n    } else {\n      traverseWithScope(n, s);\n    }\n  }\n",
        "begin_line": 350,
        "end_line": 371,
        "comment": "\n   * Traverses a parse tree recursively with a scope, starting at that scope's\n   * root.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0441
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.setSourceMap#623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 623,
        "end_line": 626,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0441
        },
        "num_failing_tests": 7
    },
    {
        "name": "ReferenceCollectingCallback.ReferenceMapWrapper#258",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper.ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection>)",
        "snippet": "    public ReferenceMapWrapper(Map<Var, ReferenceCollection> referenceMap) {\n      this.referenceMap = referenceMap;\n    }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.044
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.exitScope#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    blockStack.pop();\n    if (t.getScope().isGlobal()) {\n      // Update global scope reference lists when we are done with it.\n      compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());\n      behavior.afterExitScope(t, compiler.getGlobalVarReferences());\n    } else {\n      behavior.afterExitScope(t, new ReferenceMapWrapper(referenceMap));\n    }\n  }\n",
        "begin_line": 179,
        "end_line": 189,
        "comment": "\n   * Updates block stack and invokes any additional behavior.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.044
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.shouldRetraverse#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.shouldRetraverse(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean shouldRetraverse(Node node) {\n    if (node.getParent() != null && node.isFunction() || node.isScript()) {\n      ScopeState state = traversalState.peek();\n      if (state.changed) {\n        // prepare to re-visit the scope:\n        // when revisiting, only visit the immediate scope\n        // this reduces the cost of getting to a fixed\n        // point in global scope.\n        state.changed = false;\n        state.traverseChildScopes = false;\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 137,
        "end_line": 151,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.044
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.setLineLengthThreshold#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineLengthThreshold(int)",
        "snippet": "    Builder setLineLengthThreshold(int threshold) {\n      this.lineLengthThreshold = threshold;\n      return this;\n    }\n",
        "begin_line": 612,
        "end_line": 615,
        "comment": "\n     * Sets the line length threshold that will be used to determine\n     * when to break lines, if line breaking is on.\n     *\n     * @param threshold The line length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeOptimizationsPass.reportChange#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.PeepholeChangeHandler.reportChange()",
        "snippet": "    @Override\n    public void reportChange() {\n      traversalState.peek().changed = true;\n    }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractPeepholeOptimization.reportCodeChange#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.reportCodeChange()",
        "snippet": "  protected void reportCodeChange() {\n    Preconditions.checkNotNull(compiler);\n    compiler.reportCodeChange();\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n   * Helper method for telling the compiler that something has changed.\n   * Subclasses must call these if they have changed the AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateNonEmptyString#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonEmptyString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonEmptyString(Node n) {\n    validateNonNullString(n);\n    if (n.getString().isEmpty()) {\n      violation(\"Expected non-empty string.\", n);\n    }\n  }\n",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateNonNullString#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonNullString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonNullString(Node n) {\n    if (n.getString() == null) {\n      violation(\"Expected non-null string.\", n);\n    }\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateNumber#648",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNumber(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNumber(Node n) {\n    validateNodeType(Token.NUMBER, n);\n    validateChildCount(n, 0);\n    try {\n      // Validate that getDouble doesn't throw\n      n.getDouble();\n    } catch (UnsupportedOperationException e) {\n      violation(\"Invalid NUMBER node.\", n);\n    }\n  }\n",
        "begin_line": 648,
        "end_line": 657,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 5
    },
    {
        "name": "CodePrinter.setLineBreak#581",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineBreak(boolean)",
        "snippet": "    Builder setLineBreak(boolean lineBreak) {\n      this.lineBreak = lineBreak;\n      return this;\n    }\n",
        "begin_line": 581,
        "end_line": 584,
        "comment": "\n     * Sets whether line breaking should be done automatically.\n     * @param lineBreak If true, line breaking is done automatically.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateCodeRoot#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCodeRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateCodeRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateScript(c);\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 7
    },
    {
        "name": "GlobalNamespace.isConstructorOrEnumDeclaration#577",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.isConstructorOrEnumDeclaration(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isConstructorOrEnumDeclaration(Node n, Node parent) {\n      JSDocInfo info;\n      int valueNodeType;\n      switch (parent.getType()) {\n        case Token.ASSIGN:\n          info = parent.getJSDocInfo();\n          valueNodeType = n.getNext().getType();\n          break;\n        case Token.VAR:\n          info = n.getJSDocInfo();\n          if (info == null) {\n            info = parent.getJSDocInfo();\n          }\n          Node valueNode = n.getFirstChild();\n          valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID;\n          break;\n        default:\n          if (NodeUtil.isFunctionDeclaration(parent)) {\n            info = parent.getJSDocInfo();\n            valueNodeType = Token.FUNCTION;\n            break;\n          }\n          return false;\n      }\n      // Heed the annotations only if they're sensibly used.\n      return info != null &&\n             (info.isConstructor() && valueNodeType == Token.FUNCTION ||\n              info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT);\n    }\n",
        "begin_line": 577,
        "end_line": 605,
        "comment": "\n     * Determines whether a set operation is a constructor or enumeration\n     * declaration. The set operation may either be an assignment to a name,\n     * a variable declaration, or an object literal key mapping.\n     *\n     * @param n The node that represents the name being set\n     * @param parent Parent node of {@code n} (an ASSIGN, VAR, or OBJLIT node)\n     * @return Whether the set operation is either a constructor or enum\n     *     declaration\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.CompactCodePrinter#431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, boolean, int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak,\n        boolean preferLineBreakAtEndOfFile, int lineLengthThreshold,\n        boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel) {\n      super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);\n      this.lineBreak = lineBreak;\n      this.preferLineBreakAtEndOfFile = preferLineBreakAtEndOfFile;\n    }\n",
        "begin_line": 431,
        "end_line": 437,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   * @param sourceMapDetailLevel A filter to control which nodes get mapped into\n   *     the source map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0438
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.endFile#513",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.endFile()",
        "snippet": "    @Override\n    void endFile() {\n      super.endFile();\n      if (!preferLineBreakAtEndOfFile) {\n        return;\n      }\n      if (lineLength > lineLengthThreshold / 2) {\n        // Add an extra break at end of file.\n        append(\";\");\n        startNewLine();\n      } else if (prevCutPosition > 0) {\n        // Shift the previous break to end of file by replacing it with a\n        // <space> and adding a new break at end of file. Adding the space\n        // handles cases like instanceof\\nfoo. (it would be nice to avoid this)\n        code.setCharAt(prevCutPosition, ' ');\n        lineStartPosition = prevLineStartPosition;\n        lineLength = code.length() - lineStartPosition;\n        reportLineCut(lineIndex, prevCutPosition + 1, false);\n        lineIndex--;\n        prevCutPosition = 0;\n        prevLineStartPosition = 0;\n        append(\";\");\n        startNewLine();\n      } else {\n        // A small file with no line breaks. We do nothing in this case to\n        // avoid excessive line breaks. It's not ideal if a lot of these pile\n        // up, but that is reasonably unlikely.\n      }\n    }\n",
        "begin_line": 513,
        "end_line": 541,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0438
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.endFile#303",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFile()",
        "snippet": "  void endFile() {}\n",
        "begin_line": 303,
        "end_line": 303,
        "comment": " Called when we're at the end of a file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0438
        },
        "num_failing_tests": 7
    },
    {
        "name": "Scope.getVar#539",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 539,
        "end_line": 548,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeGenerator.isIndirectEval#787",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isIndirectEval(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isIndirectEval(Node n) {\n    return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);\n  }\n",
        "begin_line": 787,
        "end_line": 790,
        "comment": "\n   * @return Whether the name is an indirect eval.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 5
    },
    {
        "name": "AstValidator.AstValidator#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.AstValidator()",
        "snippet": "  public AstValidator() {\n    this.violationHandler = new ViolationHandler() {\n      @Override\n      public void handleViolation(String message, Node n) {\n        throw new IllegalStateException(\n            message + \" Reference node \" + n.toString());\n      }\n    };\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateScript#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateScript(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateScript(Node n) {\n    validateNodeType(Token.SCRIPT, n);\n    validateIsSynthetic(n);\n    validateHasSourceName(n);\n    validateHasInputId(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateIsSynthetic#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIsSynthetic(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIsSynthetic(Node n) {\n    if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n      violation(\"Missing 'synthetic block' annotation.\", n);\n    }\n  }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateHasSourceName#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasSourceName(Node n) {\n    String sourceName = n.getSourceFileName();\n    if (sourceName == null || sourceName.isEmpty()) {\n      violation(\"Missing 'source name' annotation.\", n);\n    }\n  }\n",
        "begin_line": 298,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateHasInputId#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasInputId(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasInputId(Node n) {\n    InputId inputId = n.getInputId();\n    if (inputId == null) {\n      violation(\"Missing 'input id' annotation.\", n);\n    }\n  }\n",
        "begin_line": 305,
        "end_line": 310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateNodeType#766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNodeType(int, com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNodeType(int type, Node n) {\n    if (n.getType() != type) {\n      violation(\n          \"Expected \" + Token.name(type) + \" but was \"\n              + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 766,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.addConstant#269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addConstant(java.lang.String)",
        "snippet": "  void addConstant(String newcode) {\n    add(newcode);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0437
        },
        "num_failing_tests": 5
    },
    {
        "name": "CodePrinter.setPrettyPrint#572",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPrettyPrint(boolean)",
        "snippet": "    Builder setPrettyPrint(boolean prettyPrint) {\n      this.prettyPrint = prettyPrint;\n      return this;\n    }\n",
        "begin_line": 572,
        "end_line": 575,
        "comment": "\n     * Sets whether pretty printing should be used.\n     * @param prettyPrint If true, pretty printing will be used.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0436
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.MappedCodePrinter#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    MappedCodePrinter(\n        int lineLengthThreshold,\n        boolean createSrcMap,\n        SourceMap.DetailLevel sourceMapDetailLevel) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;\n      this.createSrcMap = createSrcMap;\n      this.sourceMapDetailLevel = sourceMapDetailLevel;\n      this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 57,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.startSourceMapping#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      Preconditions.checkState(node != null);\n      if (createSrcMap\n          && node.getSourceFileName() != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node)) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        Mapping mapping = new Mapping();\n        mapping.node = node;\n        mapping.start = new FilePosition(line, index);\n        mappings.push(mapping);\n        allMappings.add(mapping);\n      }\n    }\n",
        "begin_line": 89,
        "end_line": 106,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.endSourceMapping#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node) {\n        Mapping mapping = mappings.pop();\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        mapping.end = new FilePosition(line, index);\n      }\n    }\n",
        "begin_line": 112,
        "end_line": 121,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.getCode#201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.Builder#564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 564,
        "end_line": 566,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.build#657",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, lineBreak, preferLineBreakAtEndOfFile,\n          lineLengthThreshold, sourceMap, sourceMapDetailLevel, outputCharset,\n          tagAsStrict);\n    }\n",
        "begin_line": 657,
        "end_line": 672,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodePrinter.toSource#684",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, boolean, boolean, int, com.google.javascript.jscomp.SourceMap, com.google.javascript.jscomp.SourceMap.DetailLevel, java.nio.charset.Charset, boolean)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  boolean preferEndOfFileBreak,\n                                 int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                 Charset outputCharset,\n                                 boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, preferEndOfFileBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 684,
        "end_line": 720,
        "comment": "\n   * Converts a tree to JS code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeConsumer.continueProcessing#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeGenerator.CodeGenerator#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer, java.nio.charset.Charset)",
        "snippet": "  CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset) {\n    cc = consumer;\n    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n      // If we want our default (pretending to be UTF-8, but escaping anything\n      // outside of straight ASCII), then don't use the encoder, but\n      // just special-case the code.  This keeps the normal path through\n      // the code identical to how it's been for years.\n      this.outputCharsetEncoder = null;\n    } else {\n      this.outputCharsetEncoder = outputCharset.newEncoder();\n    }\n  }\n",
        "begin_line": 48,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeGenerator.add#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeUtil.getBestJSDocInfo#3005",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getBestJSDocInfo(Node n) {\n    JSDocInfo info = n.getJSDocInfo();\n    if (info == null) {\n      Node parent = n.getParent();\n      if (parent == null) {\n        return null;\n      }\n\n      if (parent.isName()) {\n        return getBestJSDocInfo(parent);\n      } else if (parent.isAssign()) {\n        return parent.getJSDocInfo();\n      } else if (isObjectLitKey(parent, parent.getParent())) {\n        return parent.getJSDocInfo();\n      } else if (parent.isFunction()) {\n        return parent.getJSDocInfo();\n      } else if (parent.isVar() && parent.hasOneChild()) {\n        return parent.getJSDocInfo();\n      } else if ((parent.isHook() && parent.getFirstChild() != n) ||\n                 parent.isOr() ||\n                 parent.isAnd() ||\n                 (parent.isComma() && parent.getFirstChild() != n)) {\n        return getBestJSDocInfo(parent);\n      }\n    }\n    return info;\n  }\n",
        "begin_line": 3005,
        "end_line": 3031,
        "comment": " Find the best JSDoc for the given node. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0434
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeUtil.getConditionExpression#1674",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getConditionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getConditionExpression(Node n) {\n    switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }\n    throw new IllegalArgumentException(n + \" does not have a condition.\");\n  }\n",
        "begin_line": 1674,
        "end_line": 1693,
        "comment": "\n   * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.\n   * @param n a node with an outgoing conditional CFG edge\n   * @return the condition node or null if the condition is not obviously a node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0434
        },
        "num_failing_tests": 2
    },
    {
        "name": "ParserRunner.initResourceConfig#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
        "snippet": "  private static synchronized void initResourceConfig() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    annotationNames = extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames = extractList(config.getString(\"jsdoc.suppressions\"));\n  }\n",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0433
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSModuleGraph.JSModuleGraph#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.JSModuleGraph(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  public JSModuleGraph(List<JSModule> modulesInDepOrder) {\n    Preconditions.checkState(\n        modulesInDepOrder.size() == Sets.newHashSet(modulesInDepOrder).size(),\n        \"Found duplicate modules\");\n    modules = ImmutableList.copyOf(modulesInDepOrder);\n    modulesByDepth = Lists.newArrayList();\n\n    for (JSModule module : modulesInDepOrder) {\n      int depth = 0;\n      for (JSModule dep : module.getDependencies()) {\n        int depDepth = dep.getDepth();\n        if (depDepth < 0) {\n          throw new ModuleDependenceException(String.format(\n              \"Modules not in dependency order: %s preceded %s\",\n              module.getName(), dep.getName()),\n              module, dep);\n        }\n        depth = Math.max(depth, depDepth + 1);\n      }\n\n      module.setDepth(depth);\n      if (depth == modulesByDepth.size()) {\n        modulesByDepth.add(new ArrayList<JSModule>());\n      }\n      modulesByDepth.get(depth).add(module);\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 110,
        "comment": "\n   * Creates a module graph from a list of modules in dependency order.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0432
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.setDepth#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.setDepth(int)",
        "snippet": "  public void setDepth(int dep) {\n    this.depth = dep;\n  }\n",
        "begin_line": 294,
        "end_line": 296,
        "comment": "\n   * @param dep the depth to set\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0432
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSModule.getDependencies#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getDependencies()",
        "snippet": "  public List<JSModule> getDependencies() {\n    return deps;\n  }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n   * Gets the list of modules that this module depends on.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0431
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processVariableInitializer#1075",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        Node initalizer = transform(initializerNode.getInitializer());\n        node.addChildToBack(initalizer);\n      }\n      return node;\n    }\n",
        "begin_line": 1075,
        "end_line": 1083,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0428
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getDouble#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.getDouble()",
        "snippet": "    @Override\n    public double getDouble() {\n      return this.number;\n    }\n",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0426
        },
        "num_failing_tests": 5
    },
    {
        "name": "TokenStream.isJSIdentifier#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "class_name": "com.google.javascript.rhino.TokenStream",
        "signature": "com.google.javascript.rhino.TokenStream.isJSIdentifier(java.lang.String)",
        "snippet": "    public static boolean isJSIdentifier(String s) {\n      int length = s.length();\n\n      if (length == 0 || !Character.isJavaIdentifierStart(s.charAt(0)))\n        return false;\n\n      for (int i = 1; i < length; i++) {\n        if (!Character.isJavaIdentifierPart(s.charAt(i))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n",
        "begin_line": 190,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0425
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.getWarningCount#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  @Override\n  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0424
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.hoistNoCompileFiles#1406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistNoCompileFiles()",
        "snippet": "  private void hoistNoCompileFiles() {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isNoCompile()) {\n        input.getModule().remove(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1406,
        "end_line": 1426,
        "comment": "\n   * Hoists inputs with the @nocompiler annotation out of the inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0424
        },
        "num_failing_tests": 7
    },
    {
        "name": "IR.block#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node block(Node ... stmts) {\n    Node block = new Node(Token.BLOCK);\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }\n",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "DependencyOptions.needsManagement#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.needsManagement()",
        "snippet": "  boolean needsManagement() {\n    return sortDependencies || pruneDependencies;\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": " Returns whether re-ordering of files is needed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.isOn#1976",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 1976,
        "end_line": 1978,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.newTracer#900",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 900,
        "end_line": 907,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.stopTracer#909",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 909,
        "end_line": 914,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.hasErrors#2093",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 2093,
        "end_line": 2095,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "IR.mayBeStatement#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeStatement(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.RETURN:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 476,
        "end_line": 506,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isCall#2196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCall()",
        "snippet": "  public boolean isCall() {\n    return this.getType() == Token.CALL;\n  }\n",
        "begin_line": 2196,
        "end_line": 2198,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Tracer.isInitialized#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 745,
        "end_line": 747,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Tracer.currentTimeMillis#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-03f6903c-0c22-4bf9-97d1-d13e07d9a70f.currentTimeMillis()",
        "snippet": "    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Tracer.Tracer#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 235,
        "end_line": 278,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totaling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Tracer.stop#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silence_threshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than\n      // extraTracingStatistics.size() because a new statistic may\n      // have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silence_threshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 407,
        "end_line": 434,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silence_threshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Tracer.stop#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": " Stop the trace using the default silence_threshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "Tracer.getThreadTrace#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 958,
        "end_line": 966,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.hasCodeChanged()",
        "snippet": "    boolean hasCodeChanged() {\n      return hasChanged;\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0423
        },
        "num_failing_tests": 7
    },
    {
        "name": "VarCheck.visit#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (!n.isName()) {\n      return;\n    }\n\n    String varName = n.getString();\n\n    // Only a function can have an empty name.\n    if (varName.isEmpty()) {\n      Preconditions.checkState(parent.isFunction());\n      Preconditions.checkState(NodeUtil.isFunctionExpression(parent));\n      return;\n    }\n\n    // Check if this is a declaration for a var that has been declared\n    // elsewhere. If so, mark it as a duplicate.\n    if ((parent.isVar() ||\n         NodeUtil.isFunctionDeclaration(parent)) &&\n        varsToDeclareInExterns.contains(varName)) {\n      createSynthesizedExternVar(varName);\n\n      n.addSuppression(\"duplicate\");\n    }\n\n    // Check that the var has been declared.\n    Scope scope = t.getScope();\n    Scope.Var var = scope.getVar(varName);\n    if (var == null) {\n      if (NodeUtil.isFunctionExpression(parent)) {\n        // e.g. [ function foo() {} ], it's okay if \"foo\" isn't defined in the\n        // current scope.\n      } else {\n        // The extern checks are stricter, don't report a second error.\n        if (!strictExternCheck || !t.getInput().isExtern()) {\n          t.report(n, UNDEFINED_VAR_ERROR, varName);\n        }\n\n        if (sanityCheck) {\n          throw new IllegalStateException(\"Unexpected variable \" + varName);\n        } else {\n          createSynthesizedExternVar(varName);\n          scope.getGlobalScope().declare(varName, n,\n              null, getSynthesizedExternsInput());\n        }\n      }\n      return;\n    }\n\n    CompilerInput currInput = t.getInput();\n    CompilerInput varInput = var.input;\n    if (currInput == varInput || currInput == null || varInput == null) {\n      // The variable was defined in the same file. This is fine.\n      return;\n    }\n\n    // Check module dependencies.\n    JSModule currModule = currInput.getModule();\n    JSModule varModule = varInput.getModule();\n    JSModuleGraph moduleGraph = compiler.getModuleGraph();\n    if (!sanityCheck &&\n        varModule != currModule && varModule != null && currModule != null) {\n      if (moduleGraph.dependsOn(currModule, varModule)) {\n        // The module dependency was properly declared.\n      } else {\n        if (scope.isGlobal()) {\n          if (moduleGraph.dependsOn(varModule, currModule)) {\n            // The variable reference violates a declared module dependency.\n            t.report(n, VIOLATED_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          } else {\n            // The variable reference is between two modules that have no\n            // dependency relationship. This should probably be considered an\n            // error, but just issue a warning for now.\n            t.report(n, MISSING_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          }\n        } else {\n          t.report(n, STRICT_MODULE_DEP_ERROR,\n                   currModule.getName(), varModule.getName(), varName);\n        }\n      }\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 203,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0422
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalVarReferenceMap.getReferences#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.getReferences(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "  @Override\n  public ReferenceCollection getReferences(Var var) {\n    if (!var.isGlobal()) {\n      return null;\n    }\n    return refMap.get(var.getName());\n  }\n",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0422
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getParent#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 451,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0421
        },
        "num_failing_tests": 7
    },
    {
        "name": "NameGenerator.NameGenerator#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "signature": "com.google.javascript.jscomp.NameGenerator.NameGenerator(java.util.Set<java.lang.String>, java.lang.String, char[])",
        "snippet": "  NameGenerator(Set<String> reservedNames, String prefix,\n      @Nullable char[] reservedCharacters) {\n    this.reservedNames = reservedNames;\n    this.prefix = prefix;\n\n    // build the character arrays to use\n    this.firstChars = reserveCharacters(FIRST_CHAR, reservedCharacters);\n    this.nonFirstChars = reserveCharacters(NONFIRST_CHAR, reservedCharacters);\n\n    checkPrefix(prefix);\n  }\n",
        "begin_line": 59,
        "end_line": 69,
        "comment": "\n   * Creates a NameGenerator.\n   *\n   * @param reservedNames set of names that are reserved; generated names will\n   *   not include these names. This set is referenced rather than copied,\n   *   so changes to the set will be reflected in how names are generated.\n   * @param prefix all generated names begin with this prefix.\n   * @param reservedCharacters If specified these characters won't be used in\n   *   generated names\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0421
        },
        "num_failing_tests": 2
    },
    {
        "name": "NameGenerator.checkPrefix#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "signature": "com.google.javascript.jscomp.NameGenerator.checkPrefix(java.lang.String)",
        "snippet": "  private void checkPrefix(String prefix) {\n    if (prefix.length() > 0) {\n      // Make sure that prefix starts with a legal character.\n      if (!contains(firstChars, prefix.charAt(0))) {\n        throw new IllegalArgumentException(\"prefix must start with one of: \" +\n                                           Arrays.toString(firstChars));\n      }\n      for (int pos = 1; pos < prefix.length(); ++pos) {\n        if (!contains(nonFirstChars, prefix.charAt(pos))) {\n          throw new IllegalArgumentException(\"prefix has invalid characters, \" +\n                                             \"must be one of: \" +\n                                             Arrays.toString(nonFirstChars));\n        }\n      }\n    }\n  }\n",
        "begin_line": 90,
        "end_line": 105,
        "comment": " Validates a name prefix. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0421
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.block#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block()",
        "snippet": "  public static Node block() {\n    Node block = new Node(Token.BLOCK);\n    return block;\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.042
        },
        "num_failing_tests": 7
    },
    {
        "name": "ReferenceCollectingCallback.BasicBlock#665",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock.BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock, com.google.javascript.rhino.Node)",
        "snippet": "    BasicBlock(BasicBlock parent, Node root) {\n      this.parent = parent;\n\n      // only named functions may be hoisted.\n      this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n\n      this.isFunction = root.isFunction();\n\n      if (root.getParent() != null) {\n        int pType = root.getParent().getType();\n        this.isLoop = pType == Token.DO ||\n            pType == Token.WHILE ||\n            pType == Token.FOR;\n      } else {\n        this.isLoop = false;\n      }\n    }\n",
        "begin_line": 665,
        "end_line": 681,
        "comment": "\n     * Creates a new block.\n     * @param parent The containing block.\n     * @param root The root node of the block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0419
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.handleTypedefDefinition#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.handleTypedefDefinition(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void handleTypedefDefinition(\n      NodeTraversal t, Node n, Node parent) {\n    JSDocInfo info = n.getFirstChild().getJSDocInfo();\n    if (t.inGlobalScope() && info != null && info.hasTypedefType()) {\n      String name = n.getFirstChild().getQualifiedName();\n      if (name != null) {\n        ProvidedName pn = providedNames.get(name);\n        if (pn != null) {\n          pn.addDefinition(n, t.getModule());\n        }\n      }\n    }\n  }\n",
        "begin_line": 345,
        "end_line": 357,
        "comment": "\n   * Handles a typedef definition for a goog.provided name.\n   * @param n EXPR_RESULT node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0417
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineFunctions.shouldTraverse#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      // Don't traverse into function bodies\n      // if we aren't inlining local functions.\n      return inlineLocalFunctions || nodeTraversal.inGlobalScope();\n    }\n",
        "begin_line": 157,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineFunctions.visit#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if ((t.inGlobalScope() && inlineGlobalFunctions)\n          || (!t.inGlobalScope() && inlineLocalFunctions)) {\n        findNamedFunctions(t, n, parent);\n\n        findFunctionExpressions(t, n);\n      }\n    }\n",
        "begin_line": 165,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 2
    },
    {
        "name": "InlineFunctions.InlineFunctions#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.InlineFunctions(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean, boolean, boolean, boolean, boolean)",
        "snippet": "  InlineFunctions(AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean inlineGlobalFunctions,\n      boolean inlineLocalFunctions,\n      boolean blockFunctionInliningEnabled,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture) {\n    Preconditions.checkArgument(compiler != null);\n    Preconditions.checkArgument(safeNameIdSupplier != null);\n    this.compiler = compiler;\n\n    this.inlineGlobalFunctions = inlineGlobalFunctions;\n    this.inlineLocalFunctions = inlineLocalFunctions;\n    this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;\n    this.assumeMinimumCapture = assumeMinimumCapture;\n\n    this.injector = new FunctionInjector(\n        compiler, safeNameIdSupplier,\n        true, assumeStrictThis, assumeMinimumCapture);\n  }\n",
        "begin_line": 76,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0415
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initCompilerOptionsIfTesting#1520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initCompilerOptionsIfTesting()",
        "snippet": "  void initCompilerOptionsIfTesting() {\n    if (options == null) {\n      // initialization for tests that don't initialize the compiler\n      // by the normal mechanisms.\n      initOptions(newCompilerOptions());\n    }\n  }\n",
        "begin_line": 1520,
        "end_line": 1526,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0407
        },
        "num_failing_tests": 7
    },
    {
        "name": "DefaultPassConfig.runInSerial#2212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runInSerial(java.util.Collection<com.google.javascript.jscomp.CompilerPass>)",
        "snippet": "  private static CompilerPass runInSerial(\n      final Collection<CompilerPass> passes) {\n    return new CompilerPass() {\n      @Override public void process(Node externs, Node root) {\n        for (CompilerPass pass : passes) {\n          pass.process(externs, root);\n        }\n      }\n    };\n  }\n",
        "begin_line": 2212,
        "end_line": 2221,
        "comment": " Create a compiler pass that runs the given passes in serial. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.process#2215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-9c3edcd4-849a-49eb-84bb-3fbfed67ce6a.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override public void process(Node externs, Node root) {\n        for (CompilerPass pass : passes) {\n          pass.process(externs, root);\n        }\n      }\n",
        "begin_line": 2215,
        "end_line": 2219,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#2176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-9aefa4b8-623f-431b-9a63-f7ffd1237f0d.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "      @Override\n      protected CompilerPass createInternal(final AbstractCompiler compiler) {\n        return runInSerial();\n      }\n",
        "begin_line": 2176,
        "end_line": 2179,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-efd3daaa-2775-4872-8613-bb7543322392.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n",
        "begin_line": 1289,
        "end_line": 1301,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.process#1292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-e9739e1f-4162-4d44-932b-e188da1ae002.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n",
        "begin_line": 1292,
        "end_line": 1299,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.runInSerial#2207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.CompilerPass...)",
        "snippet": "  private static CompilerPass runInSerial(final CompilerPass ... passes) {\n    return runInSerial(Lists.newArrayList(passes));\n  }\n",
        "begin_line": 2207,
        "end_line": 2209,
        "comment": " Create a compiler pass that runs the given passes in serial. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.shouldStrip#1990",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TweakProcessing.shouldStrip()",
        "snippet": "    public boolean shouldStrip() {\n      return this == STRIP;\n    }\n",
        "begin_line": 1990,
        "end_line": 1992,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.isExternExportsEnabled#1365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.isExternExportsEnabled()",
        "snippet": "  public boolean isExternExportsEnabled() {\n    return externExports;\n  }\n",
        "begin_line": 1365,
        "end_line": 1367,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.check#755",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.check()",
        "snippet": "  public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n\n    // We are currently only interested in check-passes for progress reporting\n    // as it is used for IDEs, that's why the maximum progress is set to 1.0.\n    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker,\n        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));\n    if (options.devMode == DevMode.EVERY_PASS) {\n      phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n      return;\n    }\n\n    // TODO(nicksantos): clean this up. The flow here is too hard to follow.\n    if (options.nameAnonymousFunctionsOnly) {\n      return;\n    }\n\n    if (options.removeTryCatchFinally) {\n      removeTryCatchFinally();\n    }\n\n    if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty()) {\n      stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);\n    }\n\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n  }\n",
        "begin_line": 755,
        "end_line": 790,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0405
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getDefineReplacements#942",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getDefineReplacements()",
        "snippet": "  public Map<String, Node> getDefineReplacements() {\n    return getReplacementsHelper(defineReplacements);\n  }\n",
        "begin_line": 942,
        "end_line": 944,
        "comment": "\n   * Returns the map of define replacements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0404
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getReplacementsHelper#956",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getReplacementsHelper(java.util.Map<java.lang.String, java.lang.Object>)",
        "snippet": "  private static Map<String, Node> getReplacementsHelper(\n      Map<String, Object> source) {\n    Map<String, Node> map = Maps.newHashMap();\n    for (Map.Entry<String, Object> entry : source.entrySet()) {\n      String name = entry.getKey();\n      Object value = entry.getValue();\n      if (value instanceof Boolean) {\n        map.put(name, NodeUtil.booleanNode(((Boolean) value).booleanValue()));\n      } else if (value instanceof Integer) {\n        map.put(name, IR.number(((Integer) value).intValue()));\n      } else if (value instanceof Double) {\n        map.put(name, IR.number(((Double) value).doubleValue()));\n      } else {\n        Preconditions.checkState(value instanceof String);\n        map.put(name, IR.string((String) value));\n      }\n    }\n    return map;\n  }\n",
        "begin_line": 956,
        "end_line": 974,
        "comment": "\n   * Creates a map of String->Node from a map of String->Number/String/Boolean.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0404
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateCall#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCall(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateCall(Node n) {\n    validateNodeType(Token.CALL, n);\n    validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateExpression(c);\n    }\n  }\n",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0404
        },
        "num_failing_tests": 5
    },
    {
        "name": "CheckSideEffects.visit#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    int pt = parent.getType();\n    if (pt == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() &&\n          parent == gramps.getFirstChild()) {\n        // Semantically, a direct call to eval is different from an indirect\n        // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first\n        // expression to a comma to be a no-op if it's used to indirect\n        // an eval.\n        if (n == parent.getFirstChild() &&\n            parent.getChildCount() == 2 &&\n            n.getNext().isName() &&\n            \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT &&\n              ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (pt != Token.EXPR_RESULT && pt != Token.BLOCK) {\n      if (pt == Token.FOR && parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext())) {\n        // Fall through and look for warnings for the 1st and 3rd child\n        // of a for.\n      } else {\n        return;  // it might be OK to not have a side-effect\n      }\n    }\n\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (isSimpleOp ||\n        !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        // This no-op statement was there so that JSDoc information could\n        // be attached to the name. This check should not complain about it.\n        return;\n      } else if (n.isExprResult()) {\n        // we already reported the problem when we visited the child.\n        return;\n      }\n\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "begin_line": 83,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0403
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.process#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);\n  }\n",
        "begin_line": 108,
        "end_line": 112,
        "comment": "\n   * Convenience method for running this pass over a tree with this\n   * class as a callback.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0401
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#1062",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-f333455f-6dd0-4d6c-88ca-b971cdb67922.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler);\n    }\n",
        "begin_line": 1062,
        "end_line": 1065,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0401
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processPropertyGet#867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet)",
        "snippet": "    @Override\n    Node processPropertyGet(PropertyGet getNode) {\n      Node leftChild = transform(getNode.getTarget());\n      Node newNode = newNode(\n          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));\n      newNode.setLineno(leftChild.getLineno());\n      newNode.setCharno(leftChild.getCharno());\n      maybeSetLengthFrom(newNode, getNode);\n      return newNode;\n    }\n",
        "begin_line": 867,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.04
        },
        "num_failing_tests": 7
    },
    {
        "name": "GlobalVarReferenceMap.resetGlobalVarReferences#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.resetGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection>)",
        "snippet": "  private void resetGlobalVarReferences(\n      Map<Var, ReferenceCollection> globalRefMap) {\n    refMap = Maps.newHashMap();\n    for (Entry<Var, ReferenceCollection> entry : globalRefMap.entrySet()) {\n      Var var = entry.getKey();\n      if (var.isGlobal()) {\n        refMap.put(var.getName(), entry.getValue());\n      }\n    }\n  }\n",
        "begin_line": 78,
        "end_line": 87,
        "comment": "\n   * Resets global var reference map with the new provide map.\n   *\n   * @param globalRefMap The reference map result of a\n   *     {@link ReferenceCollectingCallback} pass collected from the whole AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.04
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isGetElem#2260",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isGetElem()",
        "snippet": "  public boolean isGetElem() {\n    return this.getType() == Token.GETELEM;\n  }\n",
        "begin_line": 2260,
        "end_line": 2262,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0399
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.hasMoreThanOneChild#1401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasMoreThanOneChild()",
        "snippet": "  public boolean hasMoreThanOneChild() {\n    return first != null && first != last;\n  }\n",
        "begin_line": 1401,
        "end_line": 1403,
        "comment": "\n   * Check for more than one child more efficiently than by iterating over all\n   * the children as is done with Node.getChildCount().\n   *\n   * @return Whether the node more than one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0399
        },
        "num_failing_tests": 7
    },
    {
        "name": "PhaseOptimizer.process#177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    double progress = 0.0;\n    double progressStep = 0.0;\n    if (progressRange != null) {\n      progressStep = (progressRange.maxValue - progressRange.initialValue)\n          / passes.size();\n      progress = progressRange.initialValue;\n    }\n    for (CompilerPass pass : passes) {\n      pass.process(externs, root);\n      if (progressRange != null) {\n        progress += progressStep;\n        compiler.setProgress(progress);\n      }\n      if (hasHaltingErrors()) {\n        return;\n      }\n    }\n  }\n",
        "begin_line": 177,
        "end_line": 196,
        "comment": "\n   * Run all the passes in the optimizer.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0397
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transformAsString#409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.transformAsString(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "    private Node transformAsString(AstNode n) {\n      Node ret;\n      if (n instanceof Name) {\n        ret = transformNameAsString((Name)n);\n      } else if (n instanceof NumberLiteral) {\n        ret = transformNumberAsString((NumberLiteral)n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      } else {\n        ret = transform(n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      }\n      Preconditions.checkState(ret.isString());\n      return ret;\n    }\n",
        "begin_line": 409,
        "end_line": 422,
        "comment": "\n     * Transforms the given node and then sets its type to Token.STRING if it\n     * was Token.NAME. If its type was already Token.STRING, then quotes it.\n     * Used for properties, as the old AST uses String tokens, while the new one\n     * uses Name tokens for unquoted strings. For example, in\n     * var o = {'a' : 1, b: 2};\n     * the string 'a' is quoted, while the name b is turned into a string, but\n     * unquoted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0397
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.processName#773",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name, boolean)",
        "snippet": "    Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }\n",
        "begin_line": 773,
        "end_line": 785,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0397
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.transformNameAsString#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformNameAsString(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "  private Node transformNameAsString(Name node) {\n    Node irNode = transformDispatcher.processName(node, true);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 292,
        "end_line": 300,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0397
        },
        "num_failing_tests": 7
    },
    {
        "name": "DefaultPassConfig.createEmptyPass#2174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(java.lang.String)",
        "snippet": "  static PassFactory createEmptyPass(String name) {\n    return new PassFactory(name, true) {\n      @Override\n      protected CompilerPass createInternal(final AbstractCompiler compiler) {\n        return runInSerial();\n      }\n    };\n  }\n",
        "begin_line": 2174,
        "end_line": 2181,
        "comment": "\n   * Create a no-op pass that can only run once. Used to break up loops.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.createInternal#752",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-78b32bfe-e356-4eb8-a96b-37375fc1ef9a.createInternal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      // The current approach to protecting \"hidden\" side-effects is to\n      // wrap them in a function call that is stripped later, this shouldn't\n      // be done in IDE mode where AST changes may be unexpected.\n      boolean protectHiddenSideEffects =\n          options.protectHiddenSideEffects && !options.ideMode;\n      return new CheckSideEffects(compiler,\n          options.checkSuspiciousCode ? CheckLevel.WARNING : CheckLevel.OFF,\n              protectHiddenSideEffects);\n    }\n",
        "begin_line": 752,
        "end_line": 763,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.assertAllOneTimePasses#808",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  private void assertAllOneTimePasses(List<PassFactory> passes) {\n    for (PassFactory pass : passes) {\n      Preconditions.checkState(pass.isOneTimePass());\n    }\n  }\n",
        "begin_line": 808,
        "end_line": 812,
        "comment": " Verify that all the passes are one-time passes. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.isOn#1986",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TweakProcessing.isOn()",
        "snippet": "    public boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 1986,
        "end_line": 1988,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.getTweakProcessing#1383",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getTweakProcessing()",
        "snippet": "  public TweakProcessing getTweakProcessing() {\n    return tweakProcessing;\n  }\n",
        "begin_line": 1383,
        "end_line": 1385,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.runCustomPasses#858",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime)",
        "snippet": "  private void runCustomPasses(CustomPassExecutionTime executionTime) {\n    if (options.customPasses != null) {\n      Tracer t = newTracer(\"runCustomPasses\");\n      try {\n        for (CompilerPass p : options.customPasses.get(executionTime)) {\n          process(p);\n        }\n      } finally {\n        stopTracer(t, \"runCustomPasses\");\n      }\n    }\n  }\n",
        "begin_line": 858,
        "end_line": 869,
        "comment": "\n   * Runs custom passes that are designated to run at a particular time.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getProgress#2337",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getProgress()",
        "snippet": "  @Override\n  public double getProgress() {\n    return progress;\n  }\n",
        "begin_line": 2337,
        "end_line": 2340,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.ProgressRange#413",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.ProgressRange.ProgressRange(double, double)",
        "snippet": "    public ProgressRange(double initialValue, double maxValue) {\n      this.initialValue = initialValue;\n      this.maxValue = maxValue;\n    }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalVarReferenceMap.GlobalVarReferenceMap#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.GlobalVarReferenceMap(java.util.List<com.google.javascript.jscomp.CompilerInput>, java.util.List<com.google.javascript.jscomp.CompilerInput>)",
        "snippet": "  GlobalVarReferenceMap(List<CompilerInput> inputs, List<CompilerInput> externs) {\n    inputOrder = Maps.newHashMap();\n    int ind = 0;\n    for (CompilerInput extern : externs) {\n      inputOrder.put(extern.getInputId(), ind);\n      ind++;\n    }\n    for (CompilerInput input : inputs) {\n      inputOrder.put(input.getInputId(), ind);\n      ind++;\n    }\n  }\n",
        "begin_line": 51,
        "end_line": 62,
        "comment": "\n   * @param inputs The ordered list of all inputs for the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalVarReferenceMap.updateGlobalVarReferences#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection>, com.google.javascript.rhino.Node)",
        "snippet": "  void updateGlobalVarReferences(Map<Var, ReferenceCollection>\n      refMapPatch, Node root) {\n    if (refMap == null || !root.isScript()) {\n      resetGlobalVarReferences(refMapPatch);\n      return;\n    }\n\n    InputId inputId = root.getInputId();\n    Preconditions.checkNotNull(inputId);\n    // Note there are two assumptions here (i) the order of compiler inputs\n    // has not changed and (ii) all references are in the order they appear\n    // in AST (this is enforced in ReferenceCollectionCallback).\n    removeScriptReferences(inputId);\n    for (Entry<Var, ReferenceCollection> entry : refMapPatch.entrySet()) {\n      Var var = entry.getKey();\n      if (var.isGlobal()) {\n        replaceReferences(var.getName(), inputId, entry.getValue());\n      }\n    }\n  }\n",
        "begin_line": 100,
        "end_line": 119,
        "comment": "\n   * Updates the internal reference map based on the provided parameters. If\n   * {@code scriptRoot} is not SCRIPT, it basically replaces the internal map\n   * with the new one, otherwise it replaces all the information associated to\n   * the given script.\n   *\n   * @param refMapPatch The reference map result of a\n   *     {@link ReferenceCollectingCallback} pass which might be collected from\n   *     the whole AST or just a sub-tree associated to a SCRIPT node.\n   * @param root AST sub-tree root on which reference collection was done.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getInputsInOrder#2209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInputsInOrder()",
        "snippet": "  @Override\n  List<CompilerInput> getInputsInOrder() {\n    return Collections.<CompilerInput>unmodifiableList(inputs);\n  }\n",
        "begin_line": 2209,
        "end_line": 2212,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getExternsInOrder#2224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getExternsInOrder()",
        "snippet": "  List<CompilerInput> getExternsInOrder() {\n    return Collections.<CompilerInput>unmodifiableList(externs);\n  }\n",
        "begin_line": 2224,
        "end_line": 2226,
        "comment": "\n   * Gets the externs in the order in which they are being processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.updateGlobalVarReferences#2312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection>, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,\n      Node collectionRoot) {\n    Preconditions.checkState(collectionRoot.isScript()\n        || collectionRoot.isBlock());\n    if (globalRefMap == null) {\n      globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),\n          getExternsInOrder());\n    }\n    globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);\n  }\n",
        "begin_line": 2312,
        "end_line": 2322,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getGlobalVarReferences#2324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getGlobalVarReferences()",
        "snippet": "  @Override\n  GlobalVarReferenceMap getGlobalVarReferences() {\n    return globalRefMap;\n  }\n",
        "begin_line": 2324,
        "end_line": 2327,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.transformTokenType#1148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 1148,
        "end_line": 1328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrepareAst.visit#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateFunctions(n, parent);\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 137,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 7
    },
    {
        "name": "PassFactory.isOneTimePass#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass()",
        "snippet": "  boolean isOneTimePass() {\n    return isOneTimePass;\n  }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n   * @return Whether the pass produced by this factory can only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0395
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.handleGet#762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleGet(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Ref.Type)",
        "snippet": "    void handleGet(NodeTraversal t, Node n, Node parent,\n        String name, Ref.Type type) {\n      Name nameObj = getOrCreateName(name);\n\n      // No need to look up additional ancestors, since they won't be used.\n      nameObj.addRef(new Ref(t, n, nameObj, type, currentPreOrderIndex++));\n    }\n",
        "begin_line": 762,
        "end_line": 768,
        "comment": "\n     * Updates our representation of the global namespace to reflect a read\n     * of a global name.\n     *\n     * @param t The current node traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @param type The reference type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0394
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.precheck#751",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.precheck()",
        "snippet": "  boolean precheck() {\n    return true;\n  }\n",
        "begin_line": 751,
        "end_line": 753,
        "comment": "\n   * Carry out any special checks or procedures that need to be done before\n   * proceeding with rest of the compilation process.\n   *\n   * @return true, to continue with compilation\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0394
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isComma#2208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isComma()",
        "snippet": "  public boolean isComma() {\n    return this.getType() == Token.COMMA;\n  }\n",
        "begin_line": 2208,
        "end_line": 2210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0394
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.processVariableDeclaration#1061",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node = newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 1061,
        "end_line": 1073,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0393
        },
        "num_failing_tests": 7
    },
    {
        "name": "CheckSideEffects.CheckSideEffects#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.CheckSideEffects(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel, boolean)",
        "snippet": "  CheckSideEffects(AbstractCompiler compiler, CheckLevel level,\n      boolean protectSideEffectFreeCode) {\n    this.compiler = compiler;\n    this.level = level;\n    this.protectSideEffectFreeCode = protectSideEffectFreeCode;\n  }\n",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0393
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getValueType#508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.getValueType(com.google.javascript.rhino.Node)",
        "snippet": "    Name.Type getValueType(Node n) {\n      switch (n.getType()) {\n        case Token.OBJECTLIT:\n          return Name.Type.OBJECTLIT;\n        case Token.FUNCTION:\n          return Name.Type.FUNCTION;\n        case Token.OR:\n          // Recurse on the second value. If the first value were an object\n          // literal or function, then the OR would be meaningless and the\n          // second value would be dead code. Assume that if the second value\n          // is an object literal or function, then the first value will also\n          // evaluate to one when it doesn't evaluate to false.\n          return getValueType(n.getLastChild());\n        case Token.HOOK:\n          // The same line of reasoning used for the OR case applies here.\n          Node second = n.getFirstChild().getNext();\n          Name.Type t = getValueType(second);\n          if (t != Name.Type.OTHER) return t;\n          Node third = second.getNext();\n          return getValueType(third);\n      }\n      return Name.Type.OTHER;\n    }\n",
        "begin_line": 508,
        "end_line": 530,
        "comment": "\n     * Gets the type of a value or simple expression.\n     *\n     * @param n An r-value in an assignment or variable declaration (not null)\n     * @return A {@link Name.Type}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0392
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.addOneTimePass#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.addOneTimePass(com.google.javascript.jscomp.PassFactory)",
        "snippet": "  void addOneTimePass(PassFactory factory) {\n    passes.add(new PassFactoryDelegate(compiler, factory));\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "\n   * Add the pass generated by the given factory to the compile sequence.\n   * This pass will be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0392
        },
        "num_failing_tests": 2
    },
    {
        "name": "VarCheck.VarCheck#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  VarCheck(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.addProperty#906",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addProperty(java.lang.String, boolean)",
        "snippet": "    Name addProperty(String name, boolean inExterns) {\n      if (props == null) {\n        props = new ArrayList<Name>();\n      }\n      Name node = new Name(name, this, inExterns);\n      props.add(node);\n      return node;\n    }\n",
        "begin_line": 906,
        "end_line": 913,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getOrCreateName#841",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.getOrCreateName(java.lang.String)",
        "snippet": "    Name getOrCreateName(String name) {\n      Name node = nameMap.get(name);\n      if (node == null) {\n        int i = name.lastIndexOf('.');\n        if (i >= 0) {\n          String parentName = name.substring(0, i);\n          Name parent = getOrCreateName(parentName);\n          node = parent.addProperty(name.substring(i + 1), inExterns);\n        } else {\n          node = new Name(name, null, inExterns);\n          globalNames.add(node);\n        }\n        nameMap.put(name, node);\n      }\n      return node;\n    }\n",
        "begin_line": 841,
        "end_line": 856,
        "comment": "\n     * Gets a {@link Name} instance for a global name. Creates it if necessary,\n     * as well as instances for any of its prefixes that are not yet defined.\n     *\n     * @param name A global name (e.g. \"a\", \"a.b.c.d\")\n     * @return The {@link Name} instance for {@code name}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.add#297",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection.add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference, com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.Scope.Var)",
        "snippet": "    void add(Reference reference, NodeTraversal t, Var v) {\n      references.add(reference);\n    }\n",
        "begin_line": 297,
        "end_line": 299,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.Reference#497",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.Reference(com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock)",
        "snippet": "    Reference(Node nameNode, NodeTraversal t,\n        BasicBlock basicBlock) {\n      this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());\n    }\n",
        "begin_line": 497,
        "end_line": 500,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.Reference#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.Reference(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock, com.google.javascript.jscomp.Scope, com.google.javascript.rhino.InputId)",
        "snippet": "    private Reference(Node nameNode,\n        BasicBlock basicBlock, Scope scope, InputId inputId) {\n      this.nameNode = nameNode;\n      this.basicBlock = basicBlock;\n      this.scope = scope;\n      this.inputId = inputId;\n      this.sourceFile = nameNode.getStaticSourceFile();\n    }\n",
        "begin_line": 521,
        "end_line": 528,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.addReference#239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.addReference(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference)",
        "snippet": "  private void addReference(NodeTraversal t, Var v, Reference reference) {\n    // Create collection if none already\n    ReferenceCollection referenceInfo = referenceMap.get(v);\n    if (referenceInfo == null) {\n      referenceInfo = new ReferenceCollection();\n      referenceMap.put(v, referenceInfo);\n    }\n\n    // Add this particular reference\n    referenceInfo.add(reference, t, v);\n  }\n",
        "begin_line": 239,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0391
        },
        "num_failing_tests": 2
    },
    {
        "name": "Result.Result#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "class_name": "com.google.javascript.jscomp.Result",
        "signature": "Result(JSError[], JSError[], String, VariableMap, VariableMap, VariableMap, VariableMap, FunctionInformationMap, SourceMap, String, Map, String)",
        "snippet": "  Result(JSError[] errors, JSError[] warnings, String debugLog,\n         VariableMap variableMap, VariableMap propertyMap,\n         VariableMap namedAnonFunctionMap,\n         VariableMap stringMap,\n         FunctionInformationMap functionInformationMap,\n         SourceMap sourceMap, String externExport,\n         Map<String, Integer> cssNames, String idGeneratorMap) {\n    this.success = errors.length == 0;\n    this.errors = errors;\n    this.warnings = warnings;\n    this.debugLog = debugLog;\n    this.variableMap = variableMap;\n    this.propertyMap = propertyMap;\n    this.namedAnonFunctionMap = namedAnonFunctionMap;\n    this.stringMap = stringMap;\n    this.functionInformationMap = functionInformationMap;\n    this.sourceMap = sourceMap;\n    this.externExport = externExport;\n    this.cssNames = cssNames;\n    this.idGeneratorMap = idGeneratorMap;\n  }\n",
        "begin_line": 39,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "PassConfig.State#289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "signature": "com.google.javascript.jscomp.PassConfig.State.State(java.util.Map<java.lang.String, java.lang.Integer>, java.util.Set<java.lang.String>, com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.FunctionNames, java.lang.String)",
        "snippet": "    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n        CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n        VariableMap variableMap, VariableMap propertyMap,\n        VariableMap anonymousFunctionNameMap,\n        VariableMap stringMap, FunctionNames functionNames,\n        String idGeneratorMap) {\n      this.cssNames = cssNames;\n      this.exportedNames = exportedNames;\n      this.crossModuleIdGenerator = crossModuleIdGenerator;\n      this.variableMap = variableMap;\n      this.propertyMap = propertyMap;\n      this.anonymousFunctionNameMap = anonymousFunctionNameMap;\n      this.stringMap = stringMap;\n      this.idGeneratorMap = idGeneratorMap;\n      this.functionNames = functionNames;\n    }\n",
        "begin_line": 289,
        "end_line": 304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.getIntermediateState#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getIntermediateState()",
        "snippet": "  @Override\n  protected State getIntermediateState() {\n    return new State(\n        cssNames == null ? null : Maps.newHashMap(cssNames),\n        exportedNames == null ? null :\n            Collections.unmodifiableSet(exportedNames),\n        crossModuleIdGenerator, variableMap, propertyMap,\n        anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);\n  }\n",
        "begin_line": 146,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.call#582",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-d614aab9-0471-4cee-b8f2-ecc53c17782e.call()",
        "snippet": "      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n",
        "begin_line": 582,
        "end_line": 586,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getResult#919",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getResult()",
        "snippet": "  public Result getResult() {\n    PassConfig.State state = getPassConfig().getIntermediateState();\n    return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);\n  }\n",
        "begin_line": 919,
        "end_line": 925,
        "comment": "\n   * Returns the result of the compilation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.compile#580",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compile()",
        "snippet": "  private Result compile() {\n    return runInCompilerThread(new Callable<Result>() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });\n  }\n",
        "begin_line": 580,
        "end_line": 588,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.setProgress#2342",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setProgress(double)",
        "snippet": "  @Override\n  void setProgress(double newProgress) {\n    if (newProgress > 1.0) {\n      progress = 1.0;\n    } else if (newProgress < 0.0) {\n      progress = 0.0;\n    } else {\n      progress = newProgress;\n    }\n  }\n",
        "begin_line": 2342,
        "end_line": 2351,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.generateReport#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.generateReport()",
        "snippet": "  @Override\n  public void generateReport() {\n    for (ErrorWithLevel message : messages) {\n      println(message.level, message.error);\n    }\n    printSummary();\n  }\n",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.removeFirstChild#1634",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeFirstChild()",
        "snippet": "  public Node removeFirstChild() {\n    Node child = first;\n    if (child != null) {\n      removeChild(child);\n    }\n    return child;\n  }\n",
        "begin_line": 1634,
        "end_line": 1640,
        "comment": "\n   * Removes the first child of Node. Equivalent to:\n   * node.removeChild(node.getFirstChild());\n   *\n   * @return The removed Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.parse#707",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parse()",
        "snippet": "  public void parse() {\n    parseInputs();\n  }\n",
        "begin_line": 707,
        "end_line": 709,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.processInternal#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.PassFactoryDelegate.processInternal(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void processInternal(Node externs, Node root) {\n      factory.create(myCompiler).process(externs, root);\n    }\n",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.process#269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.NamedPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      logger.fine(name);\n      startPass(name);\n      processInternal(externs, root);\n      endPass(externs, root);\n    }\n",
        "begin_line": 269,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.startPass#201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.startPass(java.lang.String)",
        "snippet": "  private void startPass(String passName) {\n    Preconditions.checkState(currentTracer == null && currentPassName == null);\n    currentPassName = passName;\n    currentTracer = newTracer(passName);\n  }\n",
        "begin_line": 201,
        "end_line": 205,
        "comment": "\n   * Marks the beginning of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.endPass#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.endPass(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void endPass(Node externs, Node root) {\n    Preconditions.checkState(currentTracer != null && currentPassName != null);\n\n    String passToCheck = currentPassName;\n    try {\n      stopTracer(currentTracer, currentPassName);\n      currentPassName = null;\n      currentTracer = null;\n\n      maybeSanityCheck(externs, root);\n    } catch (Exception e) {\n      // TODO(johnlenz): Remove this once the normalization checks report\n      // errors instead of exceptions.\n      throw new RuntimeException(\"Sanity check failed for \" + passToCheck, e);\n    }\n  }\n",
        "begin_line": 210,
        "end_line": 225,
        "comment": "\n   * Marks the end of a pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.maybeSanityCheck#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.maybeSanityCheck(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  void maybeSanityCheck(Node externs, Node root) {\n    if (sanityCheck != null) {\n      sanityCheck.create(compiler).process(externs, root);\n    }\n  }\n",
        "begin_line": 230,
        "end_line": 234,
        "comment": "\n   * Runs the sanity check if it is available.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.hasHaltingErrors#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.hasHaltingErrors()",
        "snippet": "  private boolean hasHaltingErrors() {\n    return compiler.hasHaltingErrors();\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.newTracer#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.newTracer(java.lang.String)",
        "snippet": "  private Tracer newTracer(String passName) {\n    String comment = passName +\n        (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (tracker != null) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"JSCompiler\", comment);\n  }\n",
        "begin_line": 243,
        "end_line": 250,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.stopTracer#252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  private void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (tracker != null) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 252,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.run#620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-df4c6fb3-0dae-4f84-9335-b77b54879083.run()",
        "snippet": "      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n",
        "begin_line": 620,
        "end_line": 634,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.runCallable#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runCallable(java.util.concurrent.Callable<T>, boolean, boolean)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  static <T> T runCallable(\n      final Callable<T> callable, boolean useLargeStackThread, boolean trace) {\n\n    // Under JRE 1.6, the JS Compiler overflows the stack when running on some\n    // large or complex JS code. Here we start a new thread with a larger\n    // stack in order to let the compiler do its thing, without having to\n    // increase the stack size for *every* thread (which is what -Xss does).\n    // Might want to add thread pool support for clients that compile a lot.\n\n    final boolean dumpTraceReport = trace;\n    final Object[] result = new Object[1];\n    final Throwable[] exception = new Throwable[1];\n    Runnable runnable = new Runnable() {\n      @Override\n      public void run() {\n        try {\n          if (dumpTraceReport) {\n            Tracer.initCurrentThreadTrace();\n          }\n          result[0] = callable.call();\n        } catch (Throwable e) {\n          exception[0] = e;\n        } finally {\n          if (dumpTraceReport) {\n            Tracer.logAndClearCurrentThreadTrace();\n          }\n        }\n      }\n    };\n\n    if (useLargeStackThread) {\n      Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);\n      th.start();\n      while (true) {\n        try {\n          th.join();\n          break;\n        } catch (InterruptedException ignore) {\n          // ignore\n        }\n      }\n    } else {\n      runnable.run();\n    }\n\n    // Pass on any exception caught by the runnable object.\n    if (exception[0] != null) {\n      throw new RuntimeException(exception[0]);\n    }\n\n    return (T) result[0];\n  }\n",
        "begin_line": 606,
        "end_line": 658,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.ReferenceCollectingCallback#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>)",
        "snippet": "  ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior,\n      Predicate<Var> varFilter) {\n    this.compiler = compiler;\n    this.behavior = behavior;\n    this.varFilter = varFilter;\n  }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "\n   * Constructor only collects references that match the given variable.\n   *\n   * The test for Var equality uses reference equality, so it's necessary to\n   * inject a scope when you traverse.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "ReferenceCollectingCallback.enterScope#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Node n = t.getScope().getRootNode();\n    BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek();\n    blockStack.push(new BasicBlock(parent, n));\n  }\n",
        "begin_line": 169,
        "end_line": 174,
        "comment": "\n   * Updates block stack and invokes any additional behavior.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.PassFactoryDelegate#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.PassFactoryDelegate.PassFactoryDelegate(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PassFactory)",
        "snippet": "    private PassFactoryDelegate(\n        AbstractCompiler myCompiler, PassFactory factory) {\n      super(factory.getName());\n      this.myCompiler = myCompiler;\n      this.factory = factory;\n    }\n",
        "begin_line": 287,
        "end_line": 292,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.NamedPass#265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.NamedPass.NamedPass(java.lang.String)",
        "snippet": "    NamedPass(String name) {\n      this.name = name;\n    }\n",
        "begin_line": 265,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "PhaseOptimizer.PhaseOptimizer#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.PhaseOptimizer(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PerformanceTracker, com.google.javascript.jscomp.PhaseOptimizer.ProgressRange)",
        "snippet": "  PhaseOptimizer(AbstractCompiler compiler, PerformanceTracker tracker,\n      ProgressRange progressRange) {\n    this.compiler = compiler;\n    this.tracker = tracker;\n    this.progressRange = progressRange;\n    compiler.addChangeHandler(recentChange);\n  }\n",
        "begin_line": 82,
        "end_line": 88,
        "comment": "\n   * @param compiler the compiler that owns/creates this.\n   * @param tracker an optional performance tracker\n   * @param progressRange the progress range for the process function or null\n   * if progress should not be reported.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "PassFactory.getName#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.getName()",
        "snippet": "  String getName() {\n    return name;\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n   * @return The name of this pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.runInCompilerThread#598",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runInCompilerThread(java.util.concurrent.Callable<T>)",
        "snippet": "  private <T> T runInCompilerThread(final Callable<T> callable) {\n    return runCallable(callable, useThreads, options.tracer.isOn());\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getPassConfig#711",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getPassConfig()",
        "snippet": "  PassConfig getPassConfig() {\n    if (passes == null) {\n      passes = createPassConfigInternal();\n    }\n    return passes;\n  }\n",
        "begin_line": 711,
        "end_line": 716,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.createPassConfigInternal#722",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createPassConfigInternal()",
        "snippet": "  PassConfig createPassConfigInternal() {\n    return new DefaultPassConfig(options);\n  }\n",
        "begin_line": 722,
        "end_line": 724,
        "comment": "\n   * Create the passes object. Clients should use setPassConfig instead of\n   * overriding this.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0388
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.process#143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    new NodeTraversal(compiler, this).traverse(root);\n\n    for (ProvidedName pn : providedNames.values()) {\n      pn.replace();\n    }\n\n    if (requiresLevel.isOn()) {\n      for (UnrecognizedRequire r : unrecognizedRequires) {\n        DiagnosticType error;\n        ProvidedName expectedName = providedNames.get(r.namespace);\n        if (expectedName != null && expectedName.firstNode != null) {\n          // The namespace ended up getting provided after it was required.\n          error = LATE_PROVIDE_ERROR;\n        } else {\n          error = MISSING_PROVIDE_ERROR;\n        }\n\n        compiler.report(JSError.make(\n            r.inputName, r.requireNode, requiresLevel, error, r.namespace));\n      }\n    }\n  }\n",
        "begin_line": 143,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0386
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.ProvidedName#823",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.ProvidedName(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, boolean)",
        "snippet": "    ProvidedName(String namespace, Node node, JSModule module,\n        boolean explicit) {\n      Preconditions.checkArgument(\n          node == null /* The base case */ ||\n          node.isExprResult());\n      this.namespace = namespace;\n      this.firstNode = node;\n      this.firstModule = module;\n\n      addProvide(node, module, explicit);\n    }\n",
        "begin_line": 823,
        "end_line": 833,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0386
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessClosurePrimitives.ProcessClosurePrimitives#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProcessClosurePrimitives(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PreprocessorSymbolTable, com.google.javascript.jscomp.CheckLevel, boolean)",
        "snippet": "  ProcessClosurePrimitives(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      CheckLevel requiresLevel,\n      boolean rewriteNewDateGoogNow) {\n    this.compiler = compiler;\n    this.preprocessorSymbolTable = preprocessorSymbolTable;\n    this.moduleGraph = compiler.getModuleGraph();\n    this.requiresLevel = requiresLevel;\n    this.rewriteNewDateGoogNow = rewriteNewDateGoogNow;\n\n    // goog is special-cased because it is provided in Closure's base library.\n    providedNames.put(GOOG,\n        new ProvidedName(GOOG, null, null, false /* implicit */));\n  }\n",
        "begin_line": 124,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0386
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getScope#595",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }\n",
        "begin_line": 595,
        "end_line": 609,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessDefines.CollectDefines#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.CollectDefines(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.jscomp.GlobalNamespace.Name>)",
        "snippet": "    CollectDefines(AbstractCompiler compiler, List<Name> listOfDefines) {\n      this.compiler = compiler;\n      this.allDefines = Maps.newHashMap();\n\n      assignableDefines = Maps.newHashMap();\n      assignAllowed = new ArrayDeque<Integer>();\n      assignAllowed.push(1);\n\n      // Create a map of references to defines keyed by node for easy lookup\n      allRefInfo = Maps.newHashMap();\n      for (Name name : listOfDefines) {\n        Ref decl = name.getDeclaration();\n        if (decl != null) {\n          allRefInfo.put(decl.node,\n                         new RefInfo(decl, name));\n        }\n        for (Ref ref : name.getRefs()) {\n          if (ref == decl) {\n            // Declarations were handled above.\n            continue;\n          }\n\n          // If there's a TWIN def, only put one of the twins in.\n          if (ref.getTwin() == null || !ref.getTwin().isSet()) {\n            allRefInfo.put(ref.node, new RefInfo(ref, name));\n          }\n        }\n      }\n    }\n",
        "begin_line": 237,
        "end_line": 265,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.getAllDefines#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.getAllDefines()",
        "snippet": "    Map<String, DefineInfo> getAllDefines() {\n      return allDefines;\n    }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "\n     * Get a map of {@link DefineInfo} structures, keyed by the name of\n     * the define.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.shouldTraverse#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      updateAssignAllowedStack(n, true);\n      return true;\n    }\n",
        "begin_line": 279,
        "end_line": 284,
        "comment": "\n     * Keeps track of whether the traversal is in a conditional branch.\n     * We traverse all nodes of the parse tree.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.visit#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.CollectDefines.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      RefInfo refInfo = allRefInfo.get(n);\n      if (refInfo != null) {\n        Ref ref = refInfo.ref;\n        Name name = refInfo.name;\n        String fullName = name.getFullName();\n        switch (ref.type) {\n          case SET_FROM_GLOBAL:\n          case SET_FROM_LOCAL:\n            Node valParent = getValueParent(ref);\n            Node val = valParent.getLastChild();\n            if (valParent.isAssign() && name.isSimpleName() &&\n                name.getDeclaration() == ref) {\n              // For defines, it's an error if a simple name is assigned\n              // before it's declared\n              compiler.report(\n                  t.makeError(val, INVALID_DEFINE_INIT_ERROR, fullName));\n            } else if (processDefineAssignment(t, fullName, val, valParent)) {\n              // remove the assignment so that the variable is still declared,\n              // but no longer assigned to a value, e.g.,\n              // DEF_FOO = 5; // becomes \"5;\"\n\n              // We can't remove the ASSIGN/VAR when we're still visiting its\n              // children, so we'll have to come back later to remove it.\n              refInfo.name.removeRef(ref);\n              lvalueToRemoveLater = valParent;\n            }\n            break;\n          default:\n            if (t.inGlobalScope()) {\n              // Treat this as a reference to a define in the global scope.\n              // After this point, the define must not be reassigned,\n              // or it's an error.\n              DefineInfo info = assignableDefines.get(fullName);\n              if (info != null) {\n                setDefineInfoNotAssignable(info, t);\n                assignableDefines.remove(fullName);\n              }\n            }\n            break;\n        }\n      }\n\n      if (!t.inGlobalScope() &&\n          n.getJSDocInfo() != null && n.getJSDocInfo().isDefine()) {\n        // warn about @define annotations in local scopes\n        compiler.report(\n            t.makeError(n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n      }\n\n      if (lvalueToRemoveLater == n) {\n        lvalueToRemoveLater = null;\n        if (n.isAssign()) {\n          Node last = n.getLastChild();\n          n.removeChild(last);\n          parent.replaceChild(n, last);\n        } else {\n          Preconditions.checkState(n.isName());\n          n.removeChild(n.getFirstChild());\n        }\n        compiler.reportCodeChange();\n      }\n\n      if (n.isCall()) {\n        if (t.inGlobalScope()) {\n          // If there's a function call in the global scope,\n          // we just say it's unsafe and freeze all the defines.\n          //\n          // NOTE(nicksantos): We could be a lot smarter here. For example,\n          // ReplaceOverriddenVars keeps a call graph of all functions and\n          // which functions/variables that they reference, and tries\n          // to statically determine which functions are \"safe\" and which\n          // are not. But this would be overkill, especially because\n          // the intended use of defines is with config_files, where\n          // all the defines are at the top of the bundle.\n          for (DefineInfo info : assignableDefines.values()) {\n            setDefineInfoNotAssignable(info, t);\n          }\n\n          assignableDefines.clear();\n        }\n      }\n\n      updateAssignAllowedStack(n, false);\n    }\n",
        "begin_line": 286,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.ProcessDefines#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.ProcessDefines(com.google.javascript.jscomp.AbstractCompiler, java.util.Map<java.lang.String, com.google.javascript.rhino.Node>)",
        "snippet": "  ProcessDefines(AbstractCompiler compiler, Map<String, Node> replacements) {\n    this.compiler = compiler;\n    dominantReplacements = replacements;\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n   * Create a pass that overrides define constants.\n   *\n   * TODO(nicksantos): Write a builder to help JSCompiler induce\n   *    {@code replacements} from command-line flags\n   *\n   * @param replacements A hash table of names of defines to their replacements.\n   *   All replacements <b>must</b> be literals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.injectNamespace#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.injectNamespace(com.google.javascript.jscomp.GlobalNamespace)",
        "snippet": "  ProcessDefines injectNamespace(GlobalNamespace namespace) {\n    this.namespace = namespace;\n    return this;\n  }\n",
        "begin_line": 110,
        "end_line": 113,
        "comment": "\n   * Injects a pre-computed global namespace, so that the same namespace\n   * can be re-used for multiple check passes. Returns {@code this} for\n   * easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 2
    },
    {
        "name": "ProcessDefines.overrideDefines#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "signature": "com.google.javascript.jscomp.ProcessDefines.overrideDefines(java.util.Map<java.lang.String, com.google.javascript.jscomp.ProcessDefines.DefineInfo>)",
        "snippet": "  private void overrideDefines(Map<String, DefineInfo> allDefines) {\n    boolean changed = false;\n    for (Map.Entry<String, DefineInfo> def : allDefines.entrySet()) {\n      String defineName = def.getKey();\n      DefineInfo info = def.getValue();\n      Node inputValue = dominantReplacements.get(defineName);\n      Node finalValue = inputValue != null ?\n          inputValue : info.getLastValue();\n      if (finalValue != info.initialValue) {\n        info.initialValueParent.replaceChild(\n            info.initialValue, finalValue.cloneTree());\n        compiler.addToDebugLog(\"Overriding @define variable \" + defineName);\n        changed = changed ||\n            finalValue.getType() != info.initialValue.getType() ||\n            !finalValue.isEquivalentTo(info.initialValue);\n      }\n    }\n\n    if (changed) {\n      compiler.reportCodeChange();\n    }\n\n    Set<String> unusedReplacements = dominantReplacements.keySet();\n    unusedReplacements.removeAll(allDefines.keySet());\n    unusedReplacements.removeAll(KNOWN_DEFINES);\n    for (String unknownDefine : unusedReplacements) {\n      compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING, unknownDefine));\n    }\n  }\n",
        "begin_line": 123,
        "end_line": 151,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isLiteralValue#586",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLiteralValue(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  static boolean isLiteralValue(Node n, boolean includeFunctions) {\n    switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }\n  }\n",
        "begin_line": 586,
        "end_line": 623,
        "comment": "\n   * Returns true if this is a literal value. We define a literal value\n   * as any node that evaluates to the same thing regardless of when or\n   * where it is evaluated. So /xyz/ and [3, 5] are literals, but\n   * the name a is not.\n   *\n   * Function literals do not meet this definition, because they\n   * lexically capture variables. For example, if you have\n   * <code>\n   * function() { return a; }\n   * </code>\n   * If it is evaluated in a different scope, then it\n   * captures a different variable. Even if the function did not read\n   * any captured variables directly, it would still fail this definition,\n   * because it affects the lifecycle of variables in the enclosing scope.\n   *\n   * However, a function literal with respect to a particular scope is\n   * a literal.\n   *\n   * @param includeFunctions If true, all function expressions will be\n   *     treated as literals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0381
        },
        "num_failing_tests": 2
    },
    {
        "name": "PassFactory.create#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  final CompilerPass create(AbstractCompiler compiler) {\n    Preconditions.checkState(!isCreated || !isOneTimePass,\n        \"One-time passes cannot be run multiple times: %s\", name);\n    isCreated = true;\n    return createInternal(compiler);\n  }\n",
        "begin_line": 85,
        "end_line": 90,
        "comment": "\n   * Creates a new compiler pass to be run.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0378
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.DefaultPassConfig#142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public DefaultPassConfig(CompilerOptions options) {\n    super(options);\n  }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0378
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isLocal#620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return !isGlobal();\n  }\n",
        "begin_line": 620,
        "end_line": 622,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0378
        },
        "num_failing_tests": 7
    },
    {
        "name": "PassConfig.PassConfig#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "signature": "com.google.javascript.jscomp.PassConfig.PassConfig(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public PassConfig(CompilerOptions options) {\n    this.options = options;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0377
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultPassConfig.HotSwapPassFactory#2298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory.HotSwapPassFactory(java.lang.String, boolean)",
        "snippet": "    HotSwapPassFactory(String name, boolean isOneTimePass) {\n      super(name, isOneTimePass);\n    }\n",
        "begin_line": 2298,
        "end_line": 2300,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0377
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isDeclared#563",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 563,
        "end_line": 572,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0376
        },
        "num_failing_tests": 7
    },
    {
        "name": "Scope.isGlobal#613",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
        "snippet": "  public boolean isGlobal() {\n    return parent == null;\n  }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "\n   * Returns whether this is the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0374
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.popScope#582",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 582,
        "end_line": 592,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0374
        },
        "num_failing_tests": 7
    },
    {
        "name": "LinkedDirectedGraph.AnnotatedLinkedDirectedGraphEdge#565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphEdge.AnnotatedLinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    AnnotatedLinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      super(sourceNode, edgeValue, destNode);\n    }\n",
        "begin_line": 565,
        "end_line": 568,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "VarCheck.process#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    // Don't run externs-checking in sanity check mode. Normalization will\n    // remove duplicate VAR declarations, which will make\n    // externs look like they have assigns.\n    if (!sanityCheck) {\n      NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());\n    }\n\n    NodeTraversal.traverseRoots(\n        compiler, Lists.newArrayList(externs, root), this);\n    for (String varName : varsToDeclareInExterns) {\n      createSynthesizedExternVar(varName);\n    }\n  }\n",
        "begin_line": 93,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isGet#1505",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isGet(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isGet(Node n) {\n    return n.isGetProp() || n.isGetElem();\n  }\n",
        "begin_line": 1505,
        "end_line": 1507,
        "comment": "\n   * Is this a GETPROP or GETELEM node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 7
    },
    {
        "name": "Scope.Var#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.Scope, int, com.google.javascript.jscomp.CompilerInput, boolean, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    private Var(boolean inferred, String name, Node nameNode, JSType type,\n                Scope scope, int index, CompilerInput input, boolean isDefine,\n                JSDocInfo info) {\n      this.name = name;\n      this.nameNode = nameNode;\n      this.type = type;\n      this.scope = scope;\n      this.index = index;\n      this.input = input;\n      this.isDefine = isDefine;\n      this.info = info;\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 130,
        "end_line": 142,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 7
    },
    {
        "name": "Scope.declare#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    // native variables do not have a name node.\n    JSDocInfo info = nameNode == null\n        ? null : NodeUtil.getBestJSDocInfo(nameNode);\n\n    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input,\n        info != null && info.isDefine(), info);\n\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 498,
        "end_line": 514,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0372
        },
        "num_failing_tests": 7
    },
    {
        "name": "VarCheck.VarCheck#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  VarCheck(AbstractCompiler compiler, boolean sanityCheck) {\n    this.compiler = compiler;\n    this.strictExternCheck = compiler.getErrorLevel(\n        JSError.make(\"\", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR;\n    this.sanityCheck = sanityCheck;\n  }\n",
        "begin_line": 86,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0371
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getErrorLevel#2042",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorLevel(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel getErrorLevel(JSError error) {\n    Preconditions.checkNotNull(options);\n    return warningsGuard.level(error);\n  }\n",
        "begin_line": 2042,
        "end_line": 2046,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0371
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodingConvention.isOptionalParameter#320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isOptionalParameter(Node parameter) {\n    return false;\n  }\n",
        "begin_line": 320,
        "end_line": 323,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0371
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClosureCodingConvention.isVarArgsParameter#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return false;\n  }\n",
        "begin_line": 325,
        "end_line": 328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0371
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getInput#998",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(com.google.javascript.rhino.InputId)",
        "snippet": "  @Override\n  public CompilerInput getInput(InputId id) {\n    return inputsById.get(id);\n  }\n",
        "begin_line": 998,
        "end_line": 1001,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.037
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeUtil.isObjectLitKey#2045",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isObjectLitKey(Node node, Node parent) {\n    switch (node.getType()) {\n      case Token.STRING_KEY:\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 2045,
        "end_line": 2053,
        "comment": "\n   * Determines whether a node represents an object literal key\n   * (e.g. key1 in {key1: value1, key2: value2}).\n   *\n   * @param node A node\n   * @param parent The node's parent\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0369
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isSetterDef#2344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isSetterDef()",
        "snippet": "  public boolean isSetterDef() {\n    return this.getType() == Token.SETTER_DEF;\n  }\n",
        "begin_line": 2344,
        "end_line": 2346,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0369
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.Scope#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Scope(Node rootNode, AbstractCompiler compiler) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);\n    this.isBottom = false;\n    this.depth = 0;\n  }\n",
        "begin_line": 411,
        "end_line": 417,
        "comment": "\n   * Creates a global Scope.\n   * @param rootNode  Typically the global BLOCK node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0369
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isString#2348",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isString()",
        "snippet": "  public boolean isString() {\n    return this.getType() == Token.STRING;\n  }\n",
        "begin_line": 2348,
        "end_line": 2350,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.shouldTraverse#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0365
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeUtil.isStatementBlock#1698",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.isScript() || n.isBlock();\n  }\n",
        "begin_line": 1698,
        "end_line": 1700,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0364
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.newNode#1339",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2) {\n    return new Node(type, child1, child2).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1339,
        "end_line": 1341,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0364
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isGetterDef#2256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isGetterDef()",
        "snippet": "  public boolean isGetterDef() {\n    return this.getType() == Token.GETTER_DEF;\n  }\n",
        "begin_line": 2256,
        "end_line": 2258,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#367",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent == null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next == null,\n        \"new child has existing sibling\");\n\n    type = nodeType;\n    parent = null;\n    first = last = child;\n    child.next = null;\n    child.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 367,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.Node#381",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node right) {\n    Preconditions.checkArgument(left.parent == null,\n        \"first new child has existing parent\");\n    Preconditions.checkArgument(left.next == null,\n        \"first new child has existing sibling\");\n    Preconditions.checkArgument(right.parent == null,\n        \"second new child has existing parent\");\n    Preconditions.checkArgument(right.next == null,\n        \"second new child has existing sibling\");\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = right;\n    left.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 381,
        "end_line": 399,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.hasChildren#536",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "  public boolean hasChildren() {\n    return first != null;\n  }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0362
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getQualifiedName#1567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getQualifiedName()",
        "snippet": "  public String getQualifiedName() {\n    if (type == Token.NAME) {\n      return getString();\n    } else if (type == Token.GETPROP) {\n      String left = getFirstChild().getQualifiedName();\n      if (left == null) {\n        return null;\n      }\n      return left + \".\" + getLastChild().getString();\n    } else if (type == Token.THIS) {\n      return \"this\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 1567,
        "end_line": 1581,
        "comment": "\n   * This function takes a set of GETPROP nodes and produces a string that is\n   * each property separated by dots. If the node ultimately under the left\n   * sub-tree is not a simple name, this is not a valid qualified name.\n   *\n   * @return a null if this is not a qualified name, or a dot-separated string\n   *         of the name and properties.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0361
        },
        "num_failing_tests": 6
    },
    {
        "name": "CodeGenerator.addList#895",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node)",
        "snippet": "  void addList(Node firstInList) {\n    addList(firstInList, true, Context.OTHER);\n  }\n",
        "begin_line": 895,
        "end_line": 897,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0361
        },
        "num_failing_tests": 5
    },
    {
        "name": "PeepholeOptimizationsPass.push#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.push()",
        "snippet": "    void push() {\n      currentDepth++;\n      if (states.size() <= currentDepth) {\n        states.add(new ScopeState());\n      } else {\n        states.get(currentDepth).reset();\n      }\n    }\n",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.pop#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.pop()",
        "snippet": "    void pop() {\n      currentDepth--;\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.shouldVisit#153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.shouldVisit(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean shouldVisit(Node node) {\n    if (node.isFunction() || node.isScript()) {\n      ScopeState previous = traversalState.peek();\n      if (!previous.traverseChildScopes) {\n        return false;\n      }\n      traversalState.push();\n    }\n    return true;\n  }\n",
        "begin_line": 153,
        "end_line": 162,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.exitNode#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.exitNode(com.google.javascript.rhino.Node)",
        "snippet": "  private void exitNode(Node node) {\n    if (node.isFunction() || node.isScript()) {\n      traversalState.pop();\n    }\n  }\n",
        "begin_line": 164,
        "end_line": 168,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.beginTraversal#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.beginTraversal()",
        "snippet": "  private void beginTraversal() {\n    for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n      optimization.beginTraversal(compiler);\n    }\n  }\n",
        "begin_line": 197,
        "end_line": 201,
        "comment": "\n   * Make sure that all the optimizations have the current traversal so they\n   * can report errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.endTraversal#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.endTraversal()",
        "snippet": "  private void endTraversal() {\n    for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n      optimization.endTraversal(compiler);\n    }\n  }\n",
        "begin_line": 203,
        "end_line": 207,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractPeepholeOptimization.beginTraversal#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.beginTraversal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  void beginTraversal(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n   * Informs the optimization that a traversal will begin.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractPeepholeOptimization.endTraversal#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.endTraversal(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  void endTraversal(AbstractCompiler compiler) {\n    this.compiler = null;\n  }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n   * Informs the optimization that a traversal has completed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getIntProp#829",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
        "snippet": "  public int getIntProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return 0;\n    }\n    return item.getIntValue();\n  }\n",
        "begin_line": 829,
        "end_line": 835,
        "comment": "\n   * Returns the integer value for the property, or 0 if the property\n   * is not defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 7
    },
    {
        "name": "PeepholeOptimizationsPass.peek#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.peek()",
        "snippet": "    ScopeState peek() {\n      return states.get(currentDepth);\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.process#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    PeepholeChangeHandler handler = new PeepholeChangeHandler();\n    compiler.addChangeHandler(handler);\n    beginTraversal();\n    traverse(root);\n    endTraversal();\n    compiler.removeChangeHandler(handler);\n  }\n",
        "begin_line": 103,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.traverse#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        traverse(c);\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }\n",
        "begin_line": 113,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.removeChangeHandler#1931",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void removeChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.remove(handler);\n  }\n",
        "begin_line": 1931,
        "end_line": 1934,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0359
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.StateStack#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.StateStack.StateStack()",
        "snippet": "    StateStack() {\n      states.add(new ScopeState());\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0358
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.ScopeState#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.ScopeState.ScopeState()",
        "snippet": "    ScopeState() {\n      reset();\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0358
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.reset#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.ScopeState.reset()",
        "snippet": "    void reset() {\n      changed = false;\n      traverseChildScopes = true;\n    }\n",
        "begin_line": 50,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0358
        },
        "num_failing_tests": 2
    },
    {
        "name": "PeepholeOptimizationsPass.PeepholeOptimizationsPass#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.PeepholeOptimizationsPass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.AbstractPeepholeOptimization...)",
        "snippet": "  PeepholeOptimizationsPass(AbstractCompiler compiler,\n      AbstractPeepholeOptimization... optimizations) {\n    this.compiler = compiler;\n    this.peepholeOptimizations = optimizations;\n  }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "\n   * Creates a peephole optimization pass that runs the given\n   * optimizations.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0358
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isSimpleOperatorType#706",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(int)",
        "snippet": "  static boolean isSimpleOperatorType(int type) {\n    switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 706,
        "end_line": 742,
        "comment": "\n   * A \"simple\" operator is one whose children are expressions,\n   * has no direct side-effects (unlike '+='), and has no\n   * conditional aspects (unlike '||').\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0357
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processNumberLiteral#799",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral)",
        "snippet": "    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      return newNumberNode(literalNode.getNumber());\n    }\n",
        "begin_line": 799,
        "end_line": 802,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0356
        },
        "num_failing_tests": 5
    },
    {
        "name": "IRFactory.newNumberNode#1355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNumberNode(java.lang.Double)",
        "snippet": "  private Node newNumberNode(Double value) {\n    return IR.number(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1355,
        "end_line": 1357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0356
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.getIntValue#340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.getIntValue()",
        "snippet": "    @Override\n    public int getIntValue() {\n      return intValue;\n    }\n",
        "begin_line": 340,
        "end_line": 343,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0355
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getWarnings#944",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 944,
        "end_line": 946,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0355
        },
        "num_failing_tests": 7
    },
    {
        "name": "BasicErrorManager.getWarnings#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  @Override\n  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0355
        },
        "num_failing_tests": 7
    },
    {
        "name": "MakeDeclaredNamesUnique.addDeclaredName#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.addDeclaredName(java.lang.String)",
        "snippet": "    @Override\n    public void addDeclaredName(String name) {\n      if (!name.equals(ARGUMENTS)) {\n        if (global) {\n          reserveName(name);\n        } else {\n          // It hasn't been declared locally yet, so increment the count.\n          if (!declarations.containsKey(name)) {\n            int id = incrementNameCount(name);\n            String newName = null;\n            if (id != 0) {\n              newName = getUniqueName(name, id);\n            }\n            declarations.put(name, newName);\n          }\n        }\n      }\n    }\n",
        "begin_line": 461,
        "end_line": 478,
        "comment": "\n     * Adds a name to the map of names declared in this scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0355
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.getUniqueName#488",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.getUniqueName(java.lang.String, int)",
        "snippet": "    private String getUniqueName(String name, int id) {\n      return name + UNIQUE_ID_SEPARATOR + id;\n    }\n",
        "begin_line": 488,
        "end_line": 490,
        "comment": "\n     * Given a name and the associated id, create a new unique name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0355
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.stripConstIfReplaced#500",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.stripConstIfReplaced()",
        "snippet": "    @Override\n    public boolean stripConstIfReplaced() {\n      return false;\n    }\n",
        "begin_line": 500,
        "end_line": 503,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0355
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.newNode#1335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1) {\n    return new Node(type, child1).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1335,
        "end_line": 1337,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0355
        },
        "num_failing_tests": 6
    },
    {
        "name": "IRFactory.IRFactory#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceFile = sourceFile;\n\n    // Sometimes this will be null in tests.\n    this.sourceName = sourceFile == null ? null : sourceFile.getName();\n\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode = createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }\n",
        "begin_line": 134,
        "end_line": 164,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getParserConfig#1979",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 1979,
        "end_line": 2004,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.init#319",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List<T1>, java.util.List<T2>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T1 extends SourceFile, T2 extends SourceFile> void init(\n      List<T1> externs,\n      List<T2> inputs,\n      CompilerOptions options) {\n    JSModule module = new JSModule(SINGLETON_MODULE_NAME);\n    for (SourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }\n",
        "begin_line": 319,
        "end_line": 329,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.makeCompilerInput#388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List<T>, boolean)",
        "snippet": "  private <T extends SourceFile> List<CompilerInput> makeCompilerInput(\n      List<T> files, boolean isExtern) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    for (T file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }\n",
        "begin_line": 388,
        "end_line": 395,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.initInputsByIdMap#482",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByIdMap()",
        "snippet": "  void initInputsByIdMap() {\n    inputsById = new HashMap<InputId, CompilerInput>();\n    for (CompilerInput input : externs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_INPUT, input.getName()));\n      }\n    }\n  }\n",
        "begin_line": 482,
        "end_line": 498,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0354
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.initModules#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List<T>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T extends SourceFile> void initModules(\n      List<T> externs, List<JSModule> modules, CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules = modules;\n    if (modules.size() > 1) {\n      try {\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph = null;\n    }\n\n    this.inputs = getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByIdMap();\n  }\n",
        "begin_line": 345,
        "end_line": 375,
        "comment": "\n   * Initializes the instance state needed for a compile job if the sources\n   * are in modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.initBasedOnOptions#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath != null) {\n      sourceMap = options.sourceMapFormat.getInstance();\n      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);\n    }\n  }\n",
        "begin_line": 380,
        "end_line": 386,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.checkFirstModule#409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private void checkFirstModule(List<JSModule> modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }\n",
        "begin_line": 409,
        "end_line": 417,
        "comment": "\n   * Verifies that at least one module has been provided and that the first one\n   * has at least one source code input.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.fillEmptyModules#431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));\n      }\n    }\n  }\n",
        "begin_line": 431,
        "end_line": 438,
        "comment": "\n   * Fill any empty modules with a place holder file. It makes any cross module\n   * motion easier.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getAllInputsFromModules#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    Map<String, JSModule> inputMap = Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName = input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }\n",
        "begin_line": 454,
        "end_line": 470,
        "comment": "\n   * Builds a single list of all module inputs. Verifies that it contains no\n   * duplicates.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSModule.add#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public void add(SourceFile file) {\n    add(new CompilerInput(file));\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": " Adds a source file input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSModule.add#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  public void add(CompilerInput input) {\n    inputs.add(input);\n    input.setModule(this);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": " Adds a source code input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.setModule#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module == null || this.module == null || this.module == module);\n    this.module = module;\n  }\n",
        "begin_line": 324,
        "end_line": 329,
        "comment": " Sets the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSModule.getInputs#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getInputs()",
        "snippet": "  public List<CompilerInput> getInputs() {\n    return inputs;\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n   * Gets this module's list of source code inputs.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSModule.JSModule#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.JSModule(java.lang.String)",
        "snippet": "  public JSModule(String name) {\n    this.name = name;\n    this.depth = -1;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n   * Creates an instance.\n   *\n   * @param name A unique name for the module\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.getName#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return id.getIdName();\n  }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0353
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSError.make#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, int, int, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(String sourceName, int lineno, int charno,\n                             DiagnosticType type, String... arguments) {\n    return new JSError(sourceName, null, lineno, charno, type, null, arguments);\n  }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "\n   * Creates a JSError at a given source location\n   *\n   * @param sourceName The source file name\n   * @param lineno Line number with source file, or -1 if unknown\n   * @param charno Column number within line, or -1 for whole line.\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0352
        },
        "num_failing_tests": 2
    },
    {
        "name": "InputId.getIdName#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.getIdName()",
        "snippet": "  public String getIdName() {\n    return id;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0352
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.setCodingConvention#1297",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 1297,
        "end_line": 1299,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0352
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isGetProp#2264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isGetProp()",
        "snippet": "  public boolean isGetProp() {\n    return this.getType() == Token.GETPROP;\n  }\n",
        "begin_line": 2264,
        "end_line": 2266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0352
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.setLanguageIn#1390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
        "snippet": "  public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn = languageIn;\n    this.languageOut = languageIn;\n  }\n",
        "begin_line": 1390,
        "end_line": 1393,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0352
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionInjector.FunctionInjector#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.FunctionInjector(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean, boolean, boolean)",
        "snippet": "  public FunctionInjector(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean allowDecomposition,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture) {\n    Preconditions.checkNotNull(compiler);\n    Preconditions.checkNotNull(safeNameIdSupplier);\n    this.compiler = compiler;\n    this.safeNameIdSupplier = safeNameIdSupplier;\n    this.allowDecomposition = allowDecomposition;\n    this.assumeStrictThis = assumeStrictThis;\n    this.assumeMinimumCapture = assumeMinimumCapture;\n  }\n",
        "begin_line": 54,
        "end_line": 67,
        "comment": "\n   * @param allowDecomposition Whether an effort should be made to break down\n   * expressions into simpler expressions to allow functions to be injected\n   * where they would otherwise be disallowed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0351
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isAssign#2180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isAssign()",
        "snippet": "  public boolean isAssign() {\n    return this.getType() == Token.ASSIGN;\n  }\n",
        "begin_line": 2180,
        "end_line": 2182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0351
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.extractCharno#1221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "  protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo & COLUMN_MASK;\n    }\n  }\n",
        "begin_line": 1221,
        "end_line": 1227,
        "comment": "\n   * Extracts the character number and character number from a merged line\n   * char number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.processExpressionStatement#576",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 576,
        "end_line": 581,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.hasOneChild#1391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "  public boolean hasOneChild() {\n    return first != null && first == last;\n  }\n",
        "begin_line": 1391,
        "end_line": 1393,
        "comment": "\n   * Check for one child more efficiently than by iterating over all the\n   * children as is done with Node.getChildCount().\n   *\n   * @return Whether the node has exactly one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.035
        },
        "num_failing_tests": 7
    },
    {
        "name": "IR.number#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.number(double)",
        "snippet": "  public static Node number(double d) {\n    return Node.newNumber(d);\n  }\n",
        "begin_line": 427,
        "end_line": 429,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0348
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.NumberNode#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.NumberNode(double)",
        "snippet": "    NumberNode(double number) {\n      super(Token.NUMBER);\n      this.number = number;\n    }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0348
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.newNumber#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newNumber(double)",
        "snippet": "  public static Node newNumber(double number) {\n    return new NumberNode(number);\n  }\n",
        "begin_line": 504,
        "end_line": 506,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0348
        },
        "num_failing_tests": 5
    },
    {
        "name": "NodeUtil.getInputId#2861",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInputId(com.google.javascript.rhino.Node)",
        "snippet": "  public static InputId getInputId(Node n) {\n    while (n != null && !n.isScript()) {\n      n = n.getParent();\n    }\n\n    return (n != null && n.isScript()) ? n.getInputId() : null;\n  }\n",
        "begin_line": 2861,
        "end_line": 2867,
        "comment": "\n   * @param n The node.\n   * @return The InputId property on the node or its ancestors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0346
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getErrors#937",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 937,
        "end_line": 939,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "BasicErrorManager.getErrors#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  @Override\n  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "BasicErrorManager.toArray#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getTypeRegistry#1138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 1138,
        "end_line": 1144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "VoidType.toStringHelper#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnknownType.UnknownType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry = registry;\n    this.maxUnionSize = maxUnionSize;\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnionTypeBuilder.addAlternate#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union = alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarro sub-lattice. See the commants on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() && functionTypePosition != -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other =\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum =\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result = null;\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex = 0;\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n            if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              it.remove();\n\n              if (currentIndex == functionTypePosition) {\n                functionTypePosition = -1;\n              } else if (currentIndex < functionTypePosition) {\n                functionTypePosition--;\n                currentIndex--;\n              }\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition == -1);\n          functionTypePosition = alternates.size();\n        }\n\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 121,
        "end_line": 212,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 219,
        "end_line": 240,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnionTypeBuilder.build#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 247,
        "end_line": 255,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "UnionType.UnionType#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "StringType.toStringHelper#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false);\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newTreeMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 113,
        "end_line": 125,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.setPrettyPrint#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
        "snippet": "  void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint = prettyPrint;\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 411,
        "end_line": 414,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#422",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 422,
        "end_line": 425,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.getReferenceName#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else if (ownerFunction != null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 427,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null || ownerFunction != null;\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.isSubtype#443",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n    if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    if (getConstructor() != null && getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say 'yes', to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n  }\n",
        "begin_line": 443,
        "end_line": 491,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 493,
        "end_line": 502,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 504,
        "end_line": 507,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 510,
        "end_line": 513,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.setOwnerFunction#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  @Override\n  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction == null || type == null);\n    ownerFunction = type;\n  }\n",
        "begin_line": 515,
        "end_line": 519,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.getOwnerFunction#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
        "snippet": "  @Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 521,
        "end_line": 524,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrototypeObjectType.getCtorExtendedInterfaces#533",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();\n  }\n",
        "begin_line": 533,
        "end_line": 538,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.Property#602",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "    Property(String name, JSType type, boolean inferred,\n        Node propertyNode) {\n      this.name = name;\n      this.type = type;\n      this.inferred = inferred;\n      this.propertyNode = propertyNode;\n    }\n",
        "begin_line": 602,
        "end_line": 608,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.getType#635",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.getType()",
        "snippet": "    @Override\n    public JSType getType() {\n      return type;\n    }\n",
        "begin_line": 635,
        "end_line": 638,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.ObjectType#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.isImplicitPrototype#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 469,
        "end_line": 478,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.isUnknownType#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown = true;\n            break;\n          }\n        }\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 489,
        "end_line": 509,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.hasCachedValues#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 521,
        "end_line": 523,
        "comment": "\n   * Returns true if any cached values have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.cast#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public static ObjectType cast(JSType type) {\n    return type == null ? null : type.toObjectType();\n  }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "\n   * A null-safe version of JSType#toObjectType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ObjectType.isFunctionPrototypeType#545",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() != null;\n  }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NumberType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NullType.toStringHelper#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE =\n        new PrototypeObjectType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 246,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 205,
        "end_line": 212,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 237,
        "end_line": 244,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 561,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.register#587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.register#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 591,
        "end_line": 599,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.registerNativeType#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 617,
        "end_line": 629,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 631,
        "end_line": 650,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.getNativeType#874",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 874,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 878,
        "end_line": 880,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#882",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 882,
        "end_line": 884,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createOptionalType#955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createUnionType#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 993,
        "end_line": 999,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createArrowType#1029",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 1029,
        "end_line": 1031,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createArrowType#1039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 1039,
        "end_line": 1041,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1085",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1085,
        "end_line": 1089,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1192,
        "end_line": 1194,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1200,
        "end_line": 1204,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createParameters#1216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1216,
        "end_line": 1227,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1236,
        "end_line": 1243,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1279,
        "end_line": 1285,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.JSType#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.getNativeType#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isNoType#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isNoResolvedType#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isNoObjectType#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isEmptyType#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isAllType#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isUnknownType#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isUnionType#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public final boolean isUnionType() {\n    return toMaybeUnionType() != null;\n  }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.toMaybeUnionType#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
        "snippet": "  public UnionType toMaybeUnionType() {\n    return null;\n  }\n",
        "begin_line": 254,
        "end_line": 256,
        "comment": "\n   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n   *\n   * Named in honor of Haskell's Maybe type constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isFunctionType#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
        "snippet": "  public final boolean isFunctionType() {\n    return toMaybeFunctionType() != null;\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": " Returns true if toMaybeFunctionType returns a non-null FunctionType. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.toMaybeFunctionType#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
        "snippet": "  public FunctionType toMaybeFunctionType() {\n    return null;\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "\n   * Downcasts this to a FunctionType, or returns null if this is not\n   * a function.\n   *\n   * For the purposes of this function, we define a MaybeFunctionType as any\n   * type in the sub-lattice\n   * { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }\n   * This definition excludes bottom types like NoType and NoObjectType.\n   *\n   * This definition is somewhat arbitrary and axiomatic, but this is the\n   * definition that makes the most sense for the most callers.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isRecordType#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
        "snippet": "  public boolean isRecordType() {\n    return toMaybeRecordType() != null;\n  }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.toMaybeRecordType#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
        "snippet": "  RecordType toMaybeRecordType() {\n    return null;\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n   * Downcasts this to a RecordType, or returns null if this is not\n   * a RecordType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isEquivalentTo#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isEquivalentTo(JSType jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.isEquivalentTo(this);\n    }\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this == jsType;\n  }\n",
        "begin_line": 408,
        "end_line": 417,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.hashCode#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.toObjectType#554",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 554,
        "end_line": 556,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   *\n   * Does not change the underlying JS type. If you want to simulate JS\n   * autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n   * Those methods may change the underlying JS type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isSubtype#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }\n",
        "begin_line": 989,
        "end_line": 991,
        "comment": "\n   * Checks whether {@code this} is a subtype of {@code that}.<p>\n   *\n   * Subtyping rules:\n   * <ul>\n   * <li>(unknown) &mdash; every type is a subtype of the Unknown type.</li>\n   * <li>(no) &mdash; the No type is a subtype of every type.</li>\n   * <li>(no-object) &mdash; the NoObject type is a subtype of every object\n   * type (i.e. subtypes of the Object type).</li>\n   * <li>(ref) &mdash; a type is a subtype of itself.</li>\n   * <li>(union-l) &mdash; A union type is a subtype of a type U if all the\n   * union type's constituents are a subtype of U. Formally<br>\n   * {@code (T<sub>1</sub>, &hellip;, T<sub>n</sub>) &lt;: U} if and only\n   * {@code T<sub>k</sub> &lt;: U} for all {@code k &isin; 1..n}.</li>\n   * <li>(union-r) &mdash; A type U is a subtype of a union type if it is a\n   * subtype of one of the union type's constituents. Formally<br>\n   * {@code U &lt;: (T<sub>1</sub>, &hellip;, T<sub>n</sub>)} if and only\n   * if {@code U &lt;: T<sub>k</sub>} for some index {@code k}.</li>\n   * <li>(objects) &mdash; an Object {@code O<sub>1</sub>} is a subtype\n   * of an object {@code O<sub>2</sub>} if it has more properties\n   * than {@code O<sub>2</sub>} and all common properties are\n   * pairwise subtypes.</li>\n   * </ul>\n   *\n   * @return {@code this &lt;: that}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.isSubtypeHelper#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union = thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }\n",
        "begin_line": 1014,
        "end_line": 1042,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSType.toString#1147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toStringHelper(false);\n  }\n",
        "begin_line": 1147,
        "end_line": 1150,
        "comment": "\n   * A string representation of this type, suitable for printing\n   * in warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toStringHelper(forAnnotations);\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.isNominalType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.isEquivalentTo#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isEquivalentTo(JSType that) {\n    if (this == that) {\n      return true;\n    } else if (this.isNominalType()) {\n      ObjectType thatObj = ObjectType.cast(that);\n      if (thatObj != null && thatObj.isNominalType()) {\n        return getReferenceName().equals(thatObj.getReferenceName());\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.hashCode#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 173,
        "end_line": 180,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "InstanceObjectType.getCtorExtendedInterfaces#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.FunctionType#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.isConstructor#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.isInterface#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.toMaybeFunctionType#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
        "snippet": "  @Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.getInternalArrowType#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.getPrototype#308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot == null) {\n      String refName = getReferenceName();\n      if (refName == null) {\n        // Someone is trying to access the prototype of a structural function.\n        // We don't want to give real properties to this prototype, because\n        // then it would propagate to all structural functions.\n        setPrototype(\n           registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),\n           null);\n      } else {\n        setPrototype(\n            new PrototypeObjectType(\n                registry,\n                this.getReferenceName() + \".prototype\",\n                registry.getNativeObjectType(OBJECT_TYPE),\n                isNativeObjectType()),\n            null);\n      }\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }\n",
        "begin_line": 308,
        "end_line": 330,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#337",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }\n",
        "begin_line": 337,
        "end_line": 339,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType()) {\n\n      baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype(baseType, propertyNode);\n  }\n",
        "begin_line": 341,
        "end_line": 367,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.setPrototype#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    ObjectType oldPrototype = prototypeSlot == null\n        ? null : (ObjectType) prototypeSlot.getType();\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 374,
        "end_line": 417,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.getExtendedInterfaces#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getExtendedInterfaces() {\n    return extendedInterfaces;\n  }\n",
        "begin_line": 504,
        "end_line": 506,
        "comment": " Returns interfaces directly extended by an interface ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.getSuperClassConstructor#764",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 764,
        "end_line": 771,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.getInstanceType#995",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 995,
        "end_line": 998,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.setInstanceType#1004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.hasInstanceType#1011",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 1011,
        "end_line": 1013,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.addSubType#1050",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 1050,
        "end_line": 1055,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionType.hasCachedValues#1087",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototypeSlot != null || super.hasCachedValues();\n  }\n",
        "begin_line": 1087,
        "end_line": 1090,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.newParameter#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.build#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionBuilder.withParamsNode#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionBuilder.withReturnType#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionBuilder.build#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeName, isConstructor, isNativeType);\n  }\n",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "BooleanType.toStringHelper#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "AllType.isAllType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setJSType#1832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 1832,
        "end_line": 1834,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setVarArgs#1886",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 1886,
        "end_line": 1888,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setOptionalArg#1904",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 1904,
        "end_line": 1906,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0345
        },
        "num_failing_tests": 7
    },
    {
        "name": "AstValidator.validateObjectLitKey#674",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateObjectLitKey(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateObjectLitKey(Node n) {\n    switch (n.getType()) {\n      case Token.GETTER_DEF:\n        validateObjectLitGetKey(n);\n        return;\n      case Token.SETTER_DEF:\n        validateObjectLitSetKey(n);\n        return;\n      case Token.STRING_KEY:\n        validateObjectLitStringKey(n);\n        return;\n      default:\n        violation(\"Expected object literal key expression but was \"\n              + Token.name(n.getType()), n);\n    }\n  }\n",
        "begin_line": 674,
        "end_line": 689,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateObjectLitStringKey#723",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateObjectLitStringKey(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateObjectLitStringKey(Node n) {\n    validateNodeType(Token.STRING_KEY, n);\n    validateChildCount(n, 1);\n    validateObjectLiteralKeyName(n);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 723,
        "end_line": 728,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateObjectLiteralKeyName#730",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateObjectLiteralKeyName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateObjectLiteralKeyName(Node n) {\n    if (n.isQuotedString()) {\n      try {\n        // Validate that getString doesn't throw\n        n.getString();\n      } catch (UnsupportedOperationException e) {\n        violation(\"getString failed for\" + Token.name(n.getType()), n);\n      }\n    } else {\n      validateNonEmptyString(n);\n    }\n  }\n",
        "begin_line": 730,
        "end_line": 741,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isBlock#2188",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isBlock()",
        "snippet": "  public boolean isBlock() {\n    return this.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 2188,
        "end_line": 2190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0343
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getBooleanProp#821",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "  public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) != 0;\n  }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0343
        },
        "num_failing_tests": 7
    },
    {
        "name": "GlobalNamespace.getDocInfoForDeclaration#1150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.getDocInfoForDeclaration(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    private static JSDocInfo getDocInfoForDeclaration(Ref ref) {\n      if (ref.node != null) {\n        Node refParent = ref.node.getParent();\n        switch (refParent.getType()) {\n          case Token.FUNCTION:\n          case Token.ASSIGN:\n            return refParent.getJSDocInfo();\n          case Token.VAR:\n            return ref.node == refParent.getFirstChild() ?\n                refParent.getJSDocInfo() : ref.node.getJSDocInfo();\n        }\n      }\n\n      return null;\n    }\n",
        "begin_line": 1150,
        "end_line": 1164,
        "comment": "\n     * Tries to get the doc info for a given declaration ref.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0343
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isVar#2380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isVar()",
        "snippet": "  public boolean isVar() {\n    return this.getType() == Token.VAR;\n  }\n",
        "begin_line": 2380,
        "end_line": 2382,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0341
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isName#2296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isName()",
        "snippet": "  public boolean isName() {\n    return this.getType() == Token.NAME;\n  }\n",
        "begin_line": 2296,
        "end_line": 2298,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.034
        },
        "num_failing_tests": 7
    },
    {
        "name": "LineNumberCheck.visit#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n      requiresLineNumbers = false;\n    } else if (requiresLineNumbers) {\n      if (n.getLineno() == -1) {\n        // The tree version of the node is really the best diagnostic\n        // info we have to offer here.\n        compiler.report(\n            t.makeError(n, MISSING_LINE_INFO,\n                n.toStringTree()));\n      }\n    }\n  }\n",
        "begin_line": 67,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0336
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.isFunction#2252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isFunction()",
        "snippet": "  public boolean isFunction() {\n    return this.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 2252,
        "end_line": 2254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0336
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getChildCount#1405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "  public int getChildCount() {\n    int c = 0;\n    for (Node n = first; n != null; n = n.next)\n      c++;\n\n    return c;\n  }\n",
        "begin_line": 1405,
        "end_line": 1411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0336
        },
        "num_failing_tests": 7
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>, java.util.Set<N>)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph, Set<N> entrySet) {\n    int cycleCount = 0;\n    long nodeCount = graph.getNodes().size();\n\n    // Choose a bail-out heuristically in case the computation\n    // doesn't converge.\n    long maxIterations = Math.max(nodeCount * nodeCount * nodeCount, 100);\n\n    // Use a LinkedHashSet, so that the traversal is deterministic.\n    LinkedHashSet<DiGraphNode<N, E>> workSet =\n        Sets.newLinkedHashSet();\n    for (N n : entrySet) {\n      workSet.add(graph.getDirectedGraphNode(n));\n    }\n    for (; !workSet.isEmpty() && cycleCount < maxIterations; cycleCount++) {\n      // For every out edge in the workSet, traverse that edge. If that\n      // edge updates the state of the graph, then add the destination\n      // node to the resultSet, so that we can update all of its out edges\n      // on the next iteration.\n      DiGraphNode<N, E> source = workSet.iterator().next();\n      N sourceValue = source.getValue();\n\n      workSet.remove(source);\n\n      List<DiGraphEdge<N, E>> outEdges = source.getOutEdges();\n      for (DiGraphEdge<N, E> edge : outEdges) {\n        N destNode = edge.getDestination().getValue();\n        if (callback.traverseEdge(sourceValue, edge.getValue(), destNode)) {\n          workSet.add(edge.getDestination());\n        }\n      }\n    }\n\n    Preconditions.checkState(cycleCount != maxIterations,\n        NON_HALTING_ERROR_MSG);\n  }\n",
        "begin_line": 93,
        "end_line": 128,
        "comment": "\n   * Compute a fixed point for the given graph, entering from the given nodes.\n   * @param graph The graph to traverse.\n   * @param entrySet The nodes to begin traversing from.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0336
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getErrorCount#2068",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 2068,
        "end_line": 2070,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0336
        },
        "num_failing_tests": 7
    },
    {
        "name": "LineNumberCheck.process#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    requiresLineNumbers = false;\n\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0335
        },
        "num_failing_tests": 5
    },
    {
        "name": "IRFactory.processName#768",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }\n",
        "begin_line": 768,
        "end_line": 771,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.isReservedKeyword#790",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isReservedKeyword(java.lang.String)",
        "snippet": "    private boolean isReservedKeyword(String identifier) {\n      return reservedKeywords != null && reservedKeywords.contains(identifier);\n    }\n",
        "begin_line": 790,
        "end_line": 792,
        "comment": "\n     * @return Whether the\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.newStringNode#1351",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
        "snippet": "  private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.getAstRoot#114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    Node root = ast.getAstRoot(compiler);\n    // The root maybe null if the AST can not be created.\n    if (root != null) {\n      Preconditions.checkState(root.isScript());\n      Preconditions.checkNotNull(root.getInputId());\n    }\n    return root;\n  }\n",
        "begin_line": 114,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getParent#1323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "  public Node getParent() {\n    return parent;\n  }\n",
        "begin_line": 1323,
        "end_line": 1325,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "LineNumberCheck.shouldTraverse#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Each JavaScript file is rooted in a script node, so we'll only\n    // have line number information inside the script node.\n    if (n.isScript()) {\n      requiresLineNumbers = true;\n    }\n    return true;\n  }\n",
        "begin_line": 57,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.getLastChild#544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 544,
        "end_line": 546,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "InputId.hashCode#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return id.hashCode();\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.getInputId#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return id;\n  }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.putCompilerInput#1034",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.putCompilerInput(com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  private CompilerInput putCompilerInput(InputId id, CompilerInput input) {\n    input.setCompiler(this);\n    return inputsById.put(id, input);\n  }\n",
        "begin_line": 1034,
        "end_line": 1037,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0334
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.setIsExtern#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setIsExtern(boolean)",
        "snippet": "  void setIsExtern(boolean newVal) {\n    isExternFile = newVal;\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": " Sets that this is an extern. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "JsAst.getInputId#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return inputId;\n  }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "JsAst.getSourceFile#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return sourceFile;\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.CompilerInput#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, boolean isExtern) {\n    this(ast, ast.getInputId(), isExtern);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.CompilerInput#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, com.google.javascript.rhino.InputId, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {\n    this.ast = ast;\n    this.id = inputId;\n\n    // TODO(nicksantos): Add a precondition check here. People are passing\n    // in null, but they should not be.\n    if (ast != null && ast.getSourceFile() != null) {\n      ast.getSourceFile().setIsExtern(isExtern);\n    }\n  }\n",
        "begin_line": 72,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.CompilerInput#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public CompilerInput(SourceFile file) {\n    this(file, false);\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.CompilerInput#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile, boolean)",
        "snippet": "  public CompilerInput(SourceFile file, boolean isExtern) {\n    this(new JsAst(file), isExtern);\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerInput.setCompiler#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setCompiler(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public void setCompiler(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": " Sets an abstract compiler for doing parsing. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getString#216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "    @Override\n    public String getString() {\n      return this.str;\n    }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "\n     * returns the string content.\n     * @return non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.processAstRoot#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = newNode(Token.SCRIPT);\n      for (com.google.javascript.rhino.head.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 451,
        "end_line": 459,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.isDirective#487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 487,
        "end_line": 494,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.chain#355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.chain(com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    @Override\n    public PropListItem chain(PropListItem next) {\n      return new IntPropListItem(getType(), intValue, next);\n    }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.removeProp#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 781,
        "end_line": 786,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.removeProp#794",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.getType() == propType) {\n      return item.getNext();\n    } else {\n      PropListItem result = removeProp(item.getNext(), propType);\n      if (result != item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 794,
        "end_line": 807,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isObjectLit#2320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isObjectLit()",
        "snippet": "  public boolean isObjectLit() {\n    return this.getType() == Token.OBJECTLIT;\n  }\n",
        "begin_line": 2320,
        "end_line": 2322,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrepareAst.PrepareAnnotations#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.PrepareAnnotations(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    PrepareAnnotations(AbstractCompiler compiler) {\n      this.convention = compiler.getCodingConvention();\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrepareAst.PrepareAst#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrepareAst.PrepareAst#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler = compiler;\n    this.checkOnly = checkOnly;\n  }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "PrepareAst.process#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don't perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren't valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn't be applied after inlining has been\n      // performed.\n      if (externs != null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations(compiler));\n      }\n      if (root != null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations(compiler));\n      }\n    }\n  }\n",
        "begin_line": 56,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "JsAst.parse#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void parse(AbstractCompiler compiler) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceFile.getName());\n      root = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n    if (root == null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
        "begin_line": 83,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.prepareAst#1899",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void prepareAst(Node root) {\n    CompilerPass pass = new PrepareAst(this);\n    pass.process(null, root);\n  }\n",
        "begin_line": 1899,
        "end_line": 1903,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.clonePropsFrom#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead == null,\n        \"Node has existing properties.\");\n    this.propListHead = other.propListHead;\n    return this;\n  }\n",
        "begin_line": 774,
        "end_line": 779,
        "comment": "\n   * Clone the properties from the provided node without copying\n   * the property object.  The recieving node may not have any\n   * existing properties.\n   * @param other The node to clone properties from.\n   * @return this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getLineno#1140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "  public int getLineno() {\n    return extractLineno(sourcePosition);\n  }\n",
        "begin_line": 1140,
        "end_line": 1142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setCharno#1172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "  public void setCharno(int charno) {\n      sourcePosition = mergeLineCharNo(getLineno(), charno);\n  }\n",
        "begin_line": 1172,
        "end_line": 1174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.extractLineno#1209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "  protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo >>> COLUMN_BITS;\n    }\n  }\n",
        "begin_line": 1209,
        "end_line": 1215,
        "comment": "\n   * Extracts the line number and character number from a merged line char\n   * number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getJsDocBuilderForNode#1836",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "  public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }\n",
        "begin_line": 1836,
        "end_line": 1838,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "ParserRunner.parse#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static Node parse(StaticSourceFile sourceFile,\n                           String sourceString,\n                           Config config,\n                           ErrorReporter errorReporter,\n                           Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode == LanguageMode.ECMASCRIPT3);\n\n    // Do our own identifier check for ECMASCRIPT 5\n    boolean acceptEs5 =\n        config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;\n    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n      logger.info(\n          \"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceFile, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return root;\n  }\n",
        "begin_line": 104,
        "end_line": 147,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceString Source code from the file.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.parseDirectives#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 470,
        "end_line": 485,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * ECMA-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.createTemplateNode#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = new Node(Token.SCRIPT);\n    templateNode.setStaticSourceFile(sourceFile);\n    return templateNode;\n  }\n",
        "begin_line": 169,
        "end_line": 174,
        "comment": " This reduces the cost of these properties to O(nodes) to O(files).",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.transformTree#176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.rhino.head.ast.AstRoot, com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment)) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n        } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {\n          irFactory.handleBlockComment(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }\n",
        "begin_line": 176,
        "end_line": 199,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.setFileOverviewJsDoc#201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
        "snippet": "  private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we've seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();\n    if (rootNodeJsDoc != null) {\n      irNode.setJSDocInfo(rootNodeJsDoc);\n      rootNodeJsDoc.setAssociatedNode(irNode);\n    }\n\n    if (fileOverviewInfo != null) {\n      if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n      fileOverviewInfo.setAssociatedNode(irNode);\n    }\n  }\n",
        "begin_line": 201,
        "end_line": 219,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.handleJsDoc#270",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(com.google.javascript.rhino.head.ast.AstNode, com.google.javascript.rhino.Node)",
        "snippet": "  private JSDocInfo handleJsDoc(AstNode node, Node irNode) {\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n      parsedComments.add(comment);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        return jsDocParser.retrieveAndResetParsedJSDocInfo();\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 270,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.transform#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    Node irNode = justTransform(node);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 282,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.setSourceInfo#323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void setSourceInfo(Node irNode, AstNode node) {\n    if (irNode.getLineno() == -1) {\n      // If we didn't already set the line, then set it now. This avoids\n      // cases like ParenthesizedExpression where we just return a previous\n      // node, but don't want the new node to get its parent's line number.\n      int lineno = node.getLineno();\n      irNode.setLineno(lineno);\n      int charno = position2charno(node.getAbsolutePosition());\n      irNode.setCharno(charno);\n      maybeSetLengthFrom(irNode, node);\n    }\n  }\n",
        "begin_line": 323,
        "end_line": 334,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.maybeSetLengthFrom#370",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeSetLengthFrom(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void maybeSetLengthFrom(Node node, AstNode source) {\n    if (config.isIdeMode) {\n      node.setLength(source.getLength());\n    }\n  }\n",
        "begin_line": 370,
        "end_line": 374,
        "comment": " Set the length on the node if we're in IDE mode.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.position2charno#376",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 376,
        "end_line": 384,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.justTransform#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 386,
        "end_line": 388,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "IRFactory.newNode#1331",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1331,
        "end_line": 1333,
        "comment": " Simple helper to create nodes and set the initial node properties.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getCharno#1144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "  public int getCharno() {\n    return extractCharno(sourcePosition);\n  }\n",
        "begin_line": 1144,
        "end_line": 1146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setLineno#1164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "  public void setLineno(int lineno) {\n      int charno = getCharno();\n      if (charno == -1) {\n        charno = 0;\n      }\n      sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 1164,
        "end_line": 1170,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.mergeLineCharNo#1195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "  protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno < 0 || charno < 0) {\n      return -1;\n    } else if ((charno & ~COLUMN_MASK) != 0) {\n      return lineno << COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n    }\n  }\n",
        "begin_line": 1195,
        "end_line": 1203,
        "comment": "\n   * Merges the line number and character number in one integer. The Character\n   * number takes the first 12 bits and the line number takes the rest. If\n   * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n   * adjusted to <code>2<sup>12</sup>-1</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "ParserRunner.createConfig#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean, java.util.Set<java.lang.String>)",
        "snippet": "  public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword,\n                                    Set<String> extraAnnotationNames) {\n    initResourceConfig();\n    Set<String> effectiveAnnotationNames;\n    if (extraAnnotationNames == null) {\n      effectiveAnnotationNames = annotationNames;\n    } else {\n      effectiveAnnotationNames = new HashSet<String>(annotationNames);\n      effectiveAnnotationNames.addAll(extraAnnotationNames);\n    }\n    return new Config(effectiveAnnotationNames, suppressionNames,\n        isIdeMode, languageMode, acceptConstKeyword);\n  }\n",
        "begin_line": 60,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "ParserRunner.extractList#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
        "snippet": "  private static Set<String> extractList(String configProp) {\n    String[] names = configProp.split(\",\");\n    Set<String> trimmedNames = Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Config.Config#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.suppressionNames = suppressionNames;\n    this.isIdeMode = isIdeMode;\n    this.languageMode = languageMode;\n    this.acceptConstKeyword = acceptConstKeyword;\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Config.buildAnnotationNames#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 88,
        "end_line": 101,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "JsAst.getAstRoot#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      parse(compiler);\n      root.setInputId(inputId);\n    }\n    return root;\n  }\n",
        "begin_line": 49,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.acceptEcmaScript5#1960",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptEcmaScript5()",
        "snippet": "  @Override\n  public boolean acceptEcmaScript5() {\n    switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1960,
        "end_line": 1968,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1546",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1546,
        "end_line": 1549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.acceptConstKeyword#1974",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
        "snippet": "  @Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }\n",
        "begin_line": 1974,
        "end_line": 1977,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setStaticSourceFile#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile)",
        "snippet": "  public void setStaticSourceFile(StaticSourceFile file) {\n    this.putProp(STATIC_SOURCE_FILE, file);\n  }\n",
        "begin_line": 1094,
        "end_line": 1096,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.traverseBranch#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      inputId = n.getInputId();\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 476,
        "end_line": 505,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.getSourceName#653",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = n.getSourceFileName();\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 653,
        "end_line": 656,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.hasHaltingErrors#2079",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 2079,
        "end_line": 2082,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getSourceFileName#1103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSourceFileName()",
        "snippet": "  public String getSourceFileName() {\n    StaticSourceFile file = getStaticSourceFile();\n    return file == null ? null : file.getName();\n  }\n",
        "begin_line": 1103,
        "end_line": 1106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getStaticSourceFile#1109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getStaticSourceFile()",
        "snippet": "  public StaticSourceFile getStaticSourceFile() {\n    return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n  }\n",
        "begin_line": 1109,
        "end_line": 1111,
        "comment": " Returns the source file associated with this input. May be null ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.getCode#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n   * Gets all the code in this source file.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.getCodingConvention#1301",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getCodingConvention()",
        "snippet": "  public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }\n",
        "begin_line": 1301,
        "end_line": 1303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getCodingConvention#1948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
        "snippet": "  @Override\n  public CodingConvention getCodingConvention() {\n    CodingConvention convention = options.getCodingConvention();\n    convention = convention != null ? convention : defaultCodingConvention;\n    return convention;\n  }\n",
        "begin_line": 1948,
        "end_line": 1953,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "BasicErrorManager.getErrorCount#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  @Override\n  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setInputId#1116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setInputId(com.google.javascript.rhino.InputId)",
        "snippet": "  public void setInputId(InputId inputId) {\n    this.putProp(INPUT_ID, inputId);\n  }\n",
        "begin_line": 1116,
        "end_line": 1118,
        "comment": "\n   * @param inputId\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.ObjectPropListItem#303",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.ObjectPropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    ObjectPropListItem(int propType, Object objectValue, PropListItem next) {\n      super(propType, next);\n      this.objectValue = objectValue;\n    }\n",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getObjectValue#313",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.getObjectValue()",
        "snippet": "    @Override\n    public Object getObjectValue() {\n      return objectValue;\n    }\n",
        "begin_line": 313,
        "end_line": 316,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.lookupProperty#758",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "  @VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x = propListHead;\n    while (x != null && propType != x.getType()) {\n      x = x.getNext();\n    }\n    return x;\n  }\n",
        "begin_line": 758,
        "end_line": 765,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.putProp#845",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "  public void putProp(int propType, Object value) {\n    if (propType == SOURCENAME_PROP) {\n      putProp(\n          STATIC_SOURCE_FILE, new SimpleSourceFile((String) value, false));\n      return;\n    }\n\n    removeProp(propType);\n    if (value != null) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 845,
        "end_line": 856,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.createProp#869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, Object value, PropListItem next) {\n    return new ObjectPropListItem(propType, value, next);\n  }\n",
        "begin_line": 869,
        "end_line": 871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.setIsSyntheticBlock#1921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "  public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }\n",
        "begin_line": 1921,
        "end_line": 1923,
        "comment": "\n   * Sets whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "JsAst.JsAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.inputId = new InputId(sourceFile.getName());\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getInputId#1123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getInputId()",
        "snippet": "  public InputId getInputId() {\n    return ((InputId) this.getProp(INPUT_ID));\n  }\n",
        "begin_line": 1123,
        "end_line": 1125,
        "comment": "\n   * @return The Id of the CompilerInput associated with this Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.isIdeMode#1955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }\n",
        "begin_line": 1955,
        "end_line": 1958,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.getName#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.traverse#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      inputId = NodeUtil.getInputId(root);\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 271,
        "end_line": 282,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.traverse#452",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 452,
        "end_line": 456,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.pushScope#562",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 562,
        "end_line": 569,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.NodeTraversal#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "NodeTraversal.NodeTraversal#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.inputId = null;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 229,
        "end_line": 239,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getNext#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getNext()",
        "snippet": "    @Override\n    public PropListItem getNext() {\n      return next;\n    }\n",
        "begin_line": 287,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getType#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getType()",
        "snippet": "    @Override\n    public int getType() {\n      return propType;\n    }\n",
        "begin_line": 282,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getNext#548",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "  public Node getNext() {\n    return next;\n  }\n",
        "begin_line": 548,
        "end_line": 550,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.addChildToBack#608",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 608,
        "end_line": 619,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "InputId.InputId#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.InputId(java.lang.String)",
        "snippet": "  public InputId(String id) {\n    this.id = id;\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.isScript#2340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isScript()",
        "snippet": "  public boolean isScript() {\n    return this.getType() == Token.SCRIPT;\n  }\n",
        "begin_line": 2340,
        "end_line": 2342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.Preloaded#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }\n",
        "begin_line": 421,
        "end_line": 425,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.Builder#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.Builder()",
        "snippet": "    public Builder() {}\n",
        "begin_line": 368,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.buildFromCode#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.buildFromCode(java.lang.String, java.lang.String)",
        "snippet": "    public SourceFile buildFromCode(String fileName, String code) {\n      return new Preloaded(fileName, originalPath, code);\n    }\n",
        "begin_line": 390,
        "end_line": 392,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.setCode#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.setOriginalPath#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
        "snippet": "  public void setOriginalPath(String originalPath) {\n    this.originalPath = originalPath;\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.fromCode#322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return builder().buildFromCode(fileName, code);\n  }\n",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.builder#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.builder()",
        "snippet": "  public static Builder builder() {\n    return new Builder();\n  }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": " Create a new builder for source files. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "SourceFile.SourceFile#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  public SourceFile(String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      throw new IllegalArgumentException(\"a source must have a name\");\n    }\n    this.fileName = fileName;\n  }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getJSDocInfo#1870",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }\n",
        "begin_line": 1870,
        "end_line": 1872,
        "comment": "\n   * Get the {@link JSDocInfo} attached to this node.\n   * @return the information or {@code null} if no JSDoc is attached to this\n   * node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0332
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.newString#516",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.IntPropListItem#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue = intValue;\n    }\n",
        "begin_line": 335,
        "end_line": 338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.putBooleanProp#858",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 858,
        "end_line": 860,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.putIntProp#862",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 862,
        "end_line": 867,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.createProp#873",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }\n",
        "begin_line": 873,
        "end_line": 875,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.StringNode#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 196,
        "end_line": 202,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.getFirstChild#540",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "  public Node getFirstChild() {\n    return first;\n  }\n",
        "begin_line": 540,
        "end_line": 542,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroupWarningsGuard.enables#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.setWarningLevel#1066",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 1066,
        "end_line": 1068,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.addWarningsGuard#1092",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    warningsGuard.addGuard(guard);\n  }\n",
        "begin_line": 1092,
        "end_line": 1094,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.AbstractPropListItem#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    AbstractPropListItem(int propType, PropListItem next) {\n      this.propType = propType;\n      this.next = next;\n    }\n",
        "begin_line": 277,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "ComposeWarningsGuard.enables#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 159,
        "comment": "\n   * Determines whether this guard will \"elevate\" the status of any disabled\n   * diagnostic type in the group to a warning or an error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroup.matches#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "ComposeWarningsGuard.compare#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff = a.getPriority() - b.getPriority();\n      if (priorityDiff != 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }\n",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "LineNumberCheck.LineNumberCheck#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.LineNumberCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  LineNumberCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 5
    },
    {
        "name": "Node.getType#528",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "  public int getType() {\n    return type;\n  }\n",
        "begin_line": 528,
        "end_line": 530,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "WarningsGuard.getPriority#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
        "snippet": "  protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n   * The priority in which warnings guards are applied. Lower means the\n   * guard will be applied sooner. Expressed on a scale of 1 to 100.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0331
        },
        "num_failing_tests": 7
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#1260",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 1260,
        "end_line": 1262,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.createMessageFormatter#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 233,
        "end_line": 236,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "AbstractMessageFormatter.setColorize#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup>)",
        "snippet": "  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressibleGroups) {\n    for (Map.Entry<String, DiagnosticGroup> entry :\n             suppressibleGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }\n",
        "begin_line": 40,
        "end_line": 49,
        "comment": "\n   * The suppressible groups, indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "SuppressDocWarningsGuard.getPriority#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
        "snippet": "  @Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }\n",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroups.getRegisteredGroups#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
        "snippet": "  protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Get the registered diagnostic groups, indexed by name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroup.getTypes#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
        "snippet": "  public Iterable<DiagnosticType> getTypes() {\n    return types;\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n   * Returns an iterable over all the types in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ComposeWarningsGuard.addGuard#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      ComposeWarningsGuard composeGuard = (ComposeWarningsGuard) guard;\n      if (composeGuard.demoteErrors) {\n        this.demoteErrors = composeGuard.demoteErrors;\n      }\n\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(Lists.newArrayList(composeGuard.guards.descendingSet()));\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }\n",
        "begin_line": 87,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ComposeWarningsGuard.addGuards#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 104,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.enables#1051",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean enables(DiagnosticGroup type) {\n    return warningsGuard.enables(type);\n  }\n",
        "begin_line": 1051,
        "end_line": 1053,
        "comment": "\n   * Whether the warnings guard in this Options object enables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.getWarningsGuard#1070",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.getLanguageIn#1395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
        "snippet": "  public LanguageMode getLanguageIn() {\n    return languageIn;\n  }\n",
        "begin_line": 1395,
        "end_line": 1397,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.setErrorManager#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 223,
        "end_line": 227,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "CheckLevel.isOn#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSDocInfoBuilder.recordNoSideEffects#881",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoSideEffects()",
        "snippet": "  public boolean recordNoSideEffects() {\n    if (!hasAnySingletonSideEffectTags()\n        && !currentInfo.isNoSideEffects()) {\n      currentInfo.setNoSideEffects(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 881,
        "end_line": 890,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isNoSideEffects()} flag set to {@code true}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonSideEffectTags#990",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonSideEffectTags()",
        "snippet": "  private boolean hasAnySingletonSideEffectTags() {\n    return currentInfo.isNoSideEffects() ||\n        currentInfo.hasModifies();\n  }\n",
        "begin_line": 990,
        "end_line": 993,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setNoSideEffects#405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setNoSideEffects(boolean)",
        "snippet": "  void setNoSideEffects(boolean value) {\n    setFlag(value, MASK_NOSIDEEFFECTS);\n  }\n",
        "begin_line": 405,
        "end_line": 407,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasModifies#1490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasModifies()",
        "snippet": "  public boolean hasModifies() {\n    return info != null && info.modifies != null;\n  }\n",
        "begin_line": 1490,
        "end_line": 1492,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.createDelegateSuffix#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
        "snippet": "  public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Creates a suffix for a proxy delegate.\n   * @see #getNormalizedReferenceName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "WarningsGuard.Priority#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.Priority.Priority(int)",
        "snippet": "    Priority(int value) {\n      this.value = value;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessTweaks.TweakFunction#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String)",
        "snippet": "    TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessTweaks.TweakFunction#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }\n",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessTweaks.TweakFunction#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }\n",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessTweaks.TweakFunction#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessTweaks.TweakFunction#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name = name;\n      this.expectedTypeName = expectedTypeName;\n      this.validNodeTypeA = validNodeTypeA;\n      this.validNodeTypeB = validNodeTypeB;\n      this.registerFunction = registerFunction;\n    }\n",
        "begin_line": 141,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ProcessTweaks.getName#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.getName()",
        "snippet": "    String getName() {\n      return name;\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticType.disabled#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticType.equals#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object type) {\n    return type instanceof DiagnosticType &&\n        ((DiagnosticType) type).key.equals(key);\n  }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticType.hashCode#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return key.hashCode();\n  }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroups.DiagnosticGroups#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
        "snippet": "  public DiagnosticGroups() {}\n",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroups.registerDeprecatedGroup#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerDeprecatedGroup(java.lang.String)",
        "snippet": "  static DiagnosticGroup registerDeprecatedGroup(String name) {\n    return registerGroup(name, new DiagnosticGroup(name, UNUSED));\n  }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroups.registerGroup#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroups.registerGroup#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticType ... types) {\n    DiagnosticGroup group = new DiagnosticGroup(name, types);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroups.registerGroup#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup ... groups) {\n    DiagnosticGroup group = new DiagnosticGroup(name, groups);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  DiagnosticGroup(String name, DiagnosticType ...types) {\n    this.name = name;\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this(null, types);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.name = name;\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 87,
        "end_line": 96,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.getDiagnosticGroups#2020",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }\n",
        "begin_line": 2020,
        "end_line": 2022,
        "comment": "\n   * The warning classes that are available from the command-line, and\n   * are suppressible by the {@code @suppress} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ComposeWarningsGuard.GuardComparator#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.GuardComparator(java.util.Map<com.google.javascript.jscomp.WarningsGuard, java.lang.Integer>)",
        "snippet": "    private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) {\n      this.orderOfAddition = orderOfAddition;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    addGuards(guards);\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "CompilerOptions.CompilerOptions#782",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Accepted language\n    languageIn = LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword = false;\n\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkSymbols = false;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkTypes = false;\n    tightenTypes = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.OFF;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n    extraAnnotationNames = null;\n\n    // Optimizations\n    foldConstants = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    assumeStrictThis = false;\n    assumeClosuresOnlyCaptureReferences = false;\n    inlineProperties = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedClassProperties = false;\n    removeUnusedVars = false;\n    removeUnusedLocalVars = false;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    groupVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n    optimizeReturns = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    propertyAffinity = false;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    shadowVariables = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    collapseObjectLiterals = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    jqueryPass = false;\n    rewriteNewDateGoogNow = true;\n    removeAbstractMethods = true;\n    removeClosureAsserts = false;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    tweakProcessing = TweakProcessing.OFF;\n    tweakReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n    replaceStringsFunctionDescriptions = Collections.emptyList();\n    replaceStringsPlaceholderToken = \"\";\n    replaceStringsReservedStrings = Collections.emptySet();\n    propertyInvalidationErrors = Maps.newHashMap();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    preferLineBreakAtEndOfFile = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    debugFunctionSideEffectsPath = null;\n    externExports = false;\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n\n    // Debugging\n    aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n    errorHandler = null;\n  }\n",
        "begin_line": 782,
        "end_line": 922,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "Node.Node#361",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ScriptRuntime.getMessage0#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId) {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 366,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ScriptRuntime.getMessage#379",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments) {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Locale locale = Locale.getDefault();\n\n        // ResourceBundle does cacheing.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 379,
        "end_line": 404,
        "comment": " OPT there's a noticable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private Pattern replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.of(\n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n\n        // Duplicate parameter\n        replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime\n              .getMessage0(\"msg.dup.parms\")),\n        DUPLICATE_PARAM,\n\n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION,\n\n        // Type annotation errors.\n        Pattern.compile(\"^Bad type annotation.*\"),\n        TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 70,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.rhino.head.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "PassFactory.PassFactory#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.Compiler#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
        "snippet": "  public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream = stream;\n  }\n",
        "begin_line": 205,
        "end_line": 208,
        "comment": "\n   * Creates n Compiler that reports errors and warnings to an output\n   * stream.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "Compiler.addChangeHandler#1926",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1926,
        "end_line": 1929,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticType.error#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodingConventions.Proxy#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.Proxy(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    protected Proxy(CodingConvention convention) {\n      this.nextConvention = convention;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention()",
        "snippet": "  public ClosureCodingConvention() {\n    this(CodingConventions.getDefault());\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public ClosureCodingConvention(CodingConvention wrapped) {\n    super(wrapped);\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.033
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticType.warning#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0329
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodingConventions.getDefault#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.getDefault()",
        "snippet": "  public static CodingConvention getDefault() {\n    return new DefaultCodingConvention();\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": " Gets the default coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0329
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticType.make#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0329
        },
        "num_failing_tests": 7
    },
    {
        "name": "DiagnosticType.DiagnosticType#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 97,
        "end_line": 103,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0329
        },
        "num_failing_tests": 7
    },
    {
        "name": "JSDocInfo.isNoSideEffects#562",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isNoSideEffects()",
        "snippet": "  public boolean isNoSideEffects() {\n    return getFlag(MASK_NOSIDEEFFECTS);\n  }\n",
        "begin_line": 562,
        "end_line": 564,
        "comment": "\n   * Returns whether the {@code @nosideeffects} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0329
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isIf#2272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isIf()",
        "snippet": "  public boolean isIf() {\n    return this.getType() == Token.IF;\n  }\n",
        "begin_line": 2272,
        "end_line": 2274,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0329
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isQuotedString#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isQuotedString()",
        "snippet": "    @Override\n    public boolean isQuotedString() {\n      return getBooleanProp(QUOTED_PROP);\n    }\n",
        "begin_line": 245,
        "end_line": 248,
        "comment": "\n     * If the property is not defined, this was not a quoted key.  The\n     * QUOTED_PROP int property is only assigned to STRING tokens used as\n     * object lit keys.\n     * @return true if this was a quoted string key in an object literal.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0328
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateRoot#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    validateChildCount(n, 2);\n    validateCodeRoot(n.getFirstChild());\n    validateCodeRoot(n.getLastChild());\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0323
        },
        "num_failing_tests": 5
    },
    {
        "name": "MakeDeclaredNamesUnique.visit#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the Javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        nameStack.pop();\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.PARAM_LIST:\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
        "begin_line": 158,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.getReplacementName(java.lang.String)",
        "snippet": "  private String getReplacementName(String oldName) {\n    for (Renamer names : nameStack) {\n      String newName = names.getReplacementName(oldName);\n      if (newName != null) {\n        return newName;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 198,
        "end_line": 206,
        "comment": "\n   * Walks the stack of name maps and finds the replacement name for the\n   * current scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getUniqueNameIdSupplier#968",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getUniqueNameIdSupplier()",
        "snippet": "  @Override\n  Supplier<String> getUniqueNameIdSupplier() {\n    final Compiler self = this;\n    return new Supplier<String>() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };\n  }\n",
        "begin_line": 968,
        "end_line": 977,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0317
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.addToDebugLog#2098",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addToDebugLog(java.lang.String)",
        "snippet": "  @Override\n  void addToDebugLog(String str) {\n    debugLog.append(str);\n    debugLog.append('\\n');\n    logger.fine(str);\n  }\n",
        "begin_line": 2098,
        "end_line": 2103,
        "comment": " Called from the compiler passes, adds debug info ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0316
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.listSeparator#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.listSeparator()",
        "snippet": "  void listSeparator() {\n    add(\",\");\n    maybeLineBreak();\n  }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getDeclaration#928",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.getDeclaration()",
        "snippet": "    @Override\n    public Ref getDeclaration() {\n      return declaration;\n    }\n",
        "begin_line": 928,
        "end_line": 931,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getRefs#1018",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.getRefs()",
        "snippet": "    List<Ref> getRefs() {\n      return refs == null ? ImmutableList.<Ref>of() : refs;\n    }\n",
        "begin_line": 1018,
        "end_line": 1020,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.Ref#1204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Ref.Ref(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.GlobalNamespace.Name, com.google.javascript.jscomp.GlobalNamespace.Ref.Type, int)",
        "snippet": "    Ref(NodeTraversal t, Node node, Name name, Type type, int index) {\n      this.node = node;\n      this.name = name;\n      this.module = t.getInput() == null ? null : t.getInput().getModule();\n      this.source = node.getStaticSourceFile();\n      this.type = type;\n      this.scope = t.getScope();\n      this.preOrderIndex = index;\n    }\n",
        "begin_line": 1204,
        "end_line": 1212,
        "comment": "\n     * Creates a reference at the current node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0304
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.Name#899",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.Name(java.lang.String, com.google.javascript.jscomp.GlobalNamespace.Name, boolean)",
        "snippet": "    Name(String name, Name parent, boolean inExterns) {\n      this.baseName = name;\n      this.parent = parent;\n      this.type = Type.OTHER;\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 899,
        "end_line": 904,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0304
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.addRefInternal#1022",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.Name.addRefInternal(com.google.javascript.jscomp.GlobalNamespace.Ref)",
        "snippet": "    void addRefInternal(Ref ref) {\n      if (refs == null) {\n        refs = Lists.newArrayList();\n      }\n      refs.add(ref);\n    }\n",
        "begin_line": 1022,
        "end_line": 1027,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0304
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.handleSetFromGlobal#544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.handleSetFromGlobal(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, boolean, com.google.javascript.jscomp.GlobalNamespace.Name.Type)",
        "snippet": "    void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name,\n                             boolean isPropAssign, Name.Type type) {\n      if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n\n      Name nameObj = getOrCreateName(name);\n      nameObj.type = type;\n\n      Ref set = new Ref(t, n, nameObj, Ref.Type.SET_FROM_GLOBAL,\n          currentPreOrderIndex++);\n      nameObj.addRef(set);\n\n      if (isNestedAssign(parent)) {\n        // This assignment is both a set and a get that creates an alias.\n        Ref get = new Ref(t, n, nameObj, Ref.Type.ALIASING_GET,\n            currentPreOrderIndex++);\n        nameObj.addRef(get);\n        Ref.markTwins(set, get);\n      } else if (isConstructorOrEnumDeclaration(n, parent)) {\n        // Names with a @constructor or @enum annotation are always collapsed\n        nameObj.setIsClassOrEnum();\n      }\n    }\n",
        "begin_line": 544,
        "end_line": 565,
        "comment": "\n     * Updates our representation of the global namespace to reflect an\n     * assignment to a global name in global scope.\n     *\n     * @param t The traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @param isPropAssign Whether this set corresponds to a property\n     *     assignment of the form <code>a.b.c = ...;</code>\n     * @param type The type of the value that the name is being assigned\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0304
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.maybeHandlePrototypePrefix#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.maybeHandlePrototypePrefix(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent,\n        String name) {\n      // We use a string-based approach instead of inspecting the parse tree\n      // to avoid complexities with object literals, possibly nested, beneath\n      // assignments.\n\n      int numLevelsToRemove;\n      String prefix;\n      if (name.endsWith(\".prototype\")) {\n        numLevelsToRemove = 1;\n        prefix = name.substring(0, name.length() - 10);\n      } else {\n        int i = name.indexOf(\".prototype.\");\n        if (i == -1) {\n          return false;\n        }\n        prefix = name.substring(0, i);\n        numLevelsToRemove = 2;\n        i = name.indexOf('.', i + 11);\n        while (i >= 0) {\n          numLevelsToRemove++;\n          i = name.indexOf('.', i + 1);\n        }\n      }\n\n      if (parent != null && NodeUtil.isObjectLitKey(n, parent)) {\n        // Object literal keys have no prefix that's referenced directly per\n        // key, so we're done.\n        return true;\n      }\n\n      for (int i = 0; i < numLevelsToRemove; i++) {\n        parent = n;\n        n = n.getFirstChild();\n      }\n\n      handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET);\n      return true;\n    }\n",
        "begin_line": 781,
        "end_line": 819,
        "comment": "\n     * Updates our representation of the global namespace to reflect a read\n     * of a global name's longest prefix before the \"prototype\" property if the\n     * name includes the \"prototype\" property. Does nothing otherwise.\n     *\n     * @param t The current node traversal\n     * @param n The node currently being visited\n     * @param parent {@code n}'s parent\n     * @param name The global name (e.g. \"a\" or \"a.b.c.d\")\n     * @return Whether the name was handled\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0304
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.isNestedAssign#829",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.isNestedAssign(com.google.javascript.rhino.Node)",
        "snippet": "    boolean isNestedAssign(Node parent) {\n      return parent.isAssign() &&\n             !parent.getParent().isExprResult();\n    }\n",
        "begin_line": 829,
        "end_line": 832,
        "comment": "\n     * Determines whether an assignment is nested (i.e. whether its return\n     * value is used).\n     *\n     * @param parent The parent of the current traversal node (not null)\n     * @return Whether it appears that the return value of the assignment is\n     *     used\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0304
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.isGlobalScope#267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalScope(Scope s) {\n    return s.getParent() == null;\n  }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n   * Gets whether a scope is the global scope.\n   *\n   * @param s A scope\n   * @return Whether the scope is the global scope\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0304
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.isMarkedExpose#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.FindExposeAnnotations.isMarkedExpose(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isMarkedExpose(Node n) {\n      JSDocInfo info = n.getJSDocInfo();\n      return info != null && info.isExpose();\n    }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0299
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.shouldTraverse#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      // We do want to traverse the name of a named function, but we don't\n      // want to traverse the arguments or body.\n      return parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild();\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getNameIndex#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.getNameIndex()",
        "snippet": "  Map<String, Name> getNameIndex() {\n    ensureGenerated();\n    return nameMap;\n  }\n",
        "begin_line": 160,
        "end_line": 163,
        "comment": "\n   * Gets an index of all the global names, indexed by full qualified name\n   * (as in \"a\", \"a.b.c\", etc.).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0298
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.GlobalNamespace#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node)",
        "snippet": "  GlobalNamespace(AbstractCompiler compiler, Node root) {\n    this(compiler, null, root);\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n   * Creates an instance that may emit warnings when building the namespace.\n   *\n   * @param compiler The AbstractCompiler, for reporting code changes\n   * @param root The root of the rest of the code to build a namespace for.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0297
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.isGlobalNameReference#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalNameReference(java.lang.String, com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalNameReference(String name, Scope s) {\n    String topVarName = getTopVarName(name);\n    return isGlobalVarReference(topVarName, s);\n  }\n",
        "begin_line": 229,
        "end_line": 232,
        "comment": "\n   * Determines whether a name reference in a particular scope is a global name\n   * reference.\n   *\n   * @param name A variable or property name (e.g. \"a\" or \"a.b.c.d\")\n   * @param s The scope in which the name is referenced\n   * @return Whether the name reference is a global name reference\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.getTopVarName#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.getTopVarName(java.lang.String)",
        "snippet": "  private String getTopVarName(String name) {\n    int firstDotIndex = name.indexOf('.');\n    return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);\n  }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "\n   * Gets the top variable name from a possibly namespaced name.\n   *\n   * @param name A variable or qualified property name (e.g. \"a\" or \"a.b.c.d\")\n   * @return The top variable name (e.g. \"a\")\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.isGlobalVarReference#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.isGlobalVarReference(java.lang.String, com.google.javascript.jscomp.Scope)",
        "snippet": "  private boolean isGlobalVarReference(String name, Scope s) {\n    Scope.Var v = s.getVar(name);\n    if (v == null && externsScope != null) {\n      v = externsScope.getVar(name);\n    }\n    return v != null && !v.isLocal();\n  }\n",
        "begin_line": 253,
        "end_line": 259,
        "comment": "\n   * Determines whether a variable name reference in a particular scope is a\n   * global variable reference.\n   *\n   * @param name A variable name (e.g. \"a\")\n   * @param s The scope in which the name is referenced\n   * @return Whether the name reference is a global variable reference\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.nodeTypeMayHaveSideEffects#1070",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean nodeTypeMayHaveSideEffects(Node n) {\n    return nodeTypeMayHaveSideEffects(n, null);\n  }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "\n   * Returns true if the current node's type implies side effects.\n   *\n   * This is a non-recursive version of the may have side effects\n   * check; used to check wherever the current node's type is one of\n   * the reason's why a subtree has side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.mayHaveSideEffects#771",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean mayHaveSideEffects(Node n) {\n    return mayHaveSideEffects(n, null);\n  }\n",
        "begin_line": 771,
        "end_line": 773,
        "comment": "\n   * Returns true if the node which may have side effects when executed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.BuildGlobalNamespace#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.BuildGlobalNamespace()",
        "snippet": "    BuildGlobalNamespace() {\n      this(null);\n    }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.BuildGlobalNamespace#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.BuildGlobalNamespace(com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "    BuildGlobalNamespace(Predicate<Node> nodeFilter) {\n      this.nodeFilter = nodeFilter;\n    }\n",
        "begin_line": 288,
        "end_line": 290,
        "comment": "\n     * Builds a global namespace, but only visits nodes that match the\n     * given filter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.visit#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {}\n",
        "begin_line": 292,
        "end_line": 293,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.shouldTraverse#296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      collect(t, n, parent);\n      return true;\n    }\n",
        "begin_line": 296,
        "end_line": 300,
        "comment": " Collect the references in pre-order. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.GlobalNamespace#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root) {\n    this.compiler = compiler;\n    this.externsRoot = externsRoot;\n    this.root = root;\n  }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "\n   * Creates an instance that may emit warnings when building the namespace.\n   *\n   * @param compiler The AbstractCompiler, for reporting code changes\n   * @param externsRoot The root of the externs to build a namespace for. If\n   *     this is null, externs and properties defined on extern types will not\n   *     be included in the global namespace.  If non-null, it allows\n   *     user-defined function on extern types to be included in the global\n   *     namespace.  E.g. String.foo.\n   * @param root The root of the rest of the code to build a namespace for.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.ensureGenerated#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.ensureGenerated()",
        "snippet": "  private void ensureGenerated() {\n    if (!generated) {\n      process();\n    }\n  }\n",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "GlobalNamespace.process#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.process()",
        "snippet": "  private void process() {\n    if (externsRoot != null) {\n      inExterns = true;\n      NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());\n    }\n    inExterns = false;\n\n    NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());\n    generated = true;\n  }\n",
        "begin_line": 210,
        "end_line": 219,
        "comment": "\n   * Builds the namespace lazily.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.evaluatesToLocalValue#2895",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
        "begin_line": 2895,
        "end_line": 2959,
        "comment": "\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0289
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getSourceName#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName()",
        "snippet": "  public String getSourceName() {\n    return sourceName;\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Gets the current input source name.\n   *\n   * @return A string that may be empty, but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeTraversal.getScopeRoot#623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
        "snippet": "  public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }\n",
        "begin_line": 623,
        "end_line": 629,
        "comment": " Returns the current scope's root. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processAssignment#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(com.google.javascript.rhino.head.ast.Assignment)",
        "snippet": "    @Override\n    Node processAssignment(Assignment assignmentNode) {\n      Node assign = processInfixExpression(assignmentNode);\n      Node target = assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n      return assign;\n    }\n",
        "begin_line": 438,
        "end_line": 449,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0286
        },
        "num_failing_tests": 5
    },
    {
        "name": "IRFactory.validAssignmentTarget#1051",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.validAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }\n",
        "begin_line": 1051,
        "end_line": 1059,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0283
        },
        "num_failing_tests": 5
    },
    {
        "name": "Scope.hashCode#327",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.hashCode()",
        "snippet": "    @Override public int hashCode() {\n      return nameNode.hashCode();\n    }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0281
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isCase#2200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCase()",
        "snippet": "  public boolean isCase() {\n    return this.getType() == Token.CASE;\n  }\n",
        "begin_line": 2200,
        "end_line": 2202,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.028
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.normalizeObjectLiteralKeyAnnotations#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.normalizeObjectLiteralKeyAnnotations(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeObjectLiteralKeyAnnotations(\n        Node objlit, Node key, Node value) {\n      Preconditions.checkState(objlit.isObjectLit());\n      if (key.getJSDocInfo() != null &&\n          value.isFunction()) {\n        value.setJSDocInfo(key.getJSDocInfo());\n      }\n    }\n",
        "begin_line": 211,
        "end_line": 218,
        "comment": "\n     * In the AST that Rhino gives us, it needs to make a distinction\n     * between JsDoc on the object literal node and JsDoc on the object literal\n     * value. For example,\n     * <pre>\n     * var x = {\n     *   / JSDOC /\n     *   a: 'b',\n     *   c: / JSDOC / 'd'\n     * };\n     * </pre>\n     *\n     * But in few narrow cases (in particular, function literals), it's\n     * a lot easier for us if the doc is attached to the value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0278
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.visit#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Note: Constant properties annotations are not propagated.\n      if (n.isName()) {\n        if (n.getString().isEmpty()) {\n          return;\n        }\n\n        JSDocInfo info = null;\n        // Find the JSDocInfo for a top-level variable.\n        Var var = t.getScope().getVar(n.getString());\n        if (var != null) {\n          info = var.getJSDocInfo();\n        }\n\n        boolean shouldBeConstant =\n            (info != null && info.isConstant()) ||\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent);\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (shouldBeConstant && !isMarkedConstant) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 235,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0276
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processInfixExpression#721",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      n.setLineno(exprNode.getLineno());\n      n.setCharno(position2charno(exprNode.getAbsolutePosition()));\n      maybeSetLengthFrom(n, exprNode);\n      return n;\n    }\n",
        "begin_line": 721,
        "end_line": 731,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0276
        },
        "num_failing_tests": 5
    },
    {
        "name": "AstValidator.validateOptionalName#344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateOptionalName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateOptionalName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonNullString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 3
    },
    {
        "name": "AstValidator.validateFunctionExpression#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionExpression(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateOptionalName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0275
        },
        "num_failing_tests": 3
    },
    {
        "name": "FixedPointGraphTraversal.FixedPointGraphTraversal#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.FixedPointGraphTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<N, E>)",
        "snippet": "  public FixedPointGraphTraversal(EdgeCallback<N, E> callback) {\n    this.callback = callback;\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a new traversal.\n   * @param callback A callback for updating the state of the graph each\n   *     time an edge is traversed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0274
        },
        "num_failing_tests": 2
    },
    {
        "name": "FixedPointGraphTraversal.newTraversal#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.newTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<NODE, EDGE>)",
        "snippet": "  public static <NODE, EDGE> FixedPointGraphTraversal<NODE, EDGE> newTraversal(\n      EdgeCallback<NODE, EDGE> callback) {\n    return new FixedPointGraphTraversal<NODE, EDGE>(callback);\n  }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\n   * Helper method for creating new traversals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0274
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getNodes#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodes()",
        "snippet": "  @Override\n  public Collection<GraphNode<N, E>> getNodes() {\n    return Collections.<GraphNode<N, E>>unmodifiableCollection(nodes.values());\n  }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0273
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.handleStmtList#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmtList(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmtList(Node node) {\n    Node parent = node.getParent();\n    // Special case, don't add a block of empty CATCH block to the graph.\n    if (node.isBlock() && parent != null &&\n        parent.isTry() &&\n        NodeUtil.getCatchBlock(parent) == node &&\n        !NodeUtil.hasCatchHandler(node)) {\n      return;\n    }\n\n    // A block transfer control to its first child if it is not empty.\n    Node child = node.getFirstChild();\n\n    // Function declarations are skipped since control doesn't go into that\n    // function (unless it is called)\n    while (child != null && child.isFunction()) {\n      child = child.getNext();\n    }\n\n    if (child != null) {\n      createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n      createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n\n    // Synthetic blocks\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.DEFAULT_CASE:\n        case Token.CASE:\n        case Token.TRY:\n          break;\n        default:\n          if (node.isBlock() && node.isSyntheticBlock()) {\n            createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n          }\n          break;\n      }\n    }\n  }\n",
        "begin_line": 484,
        "end_line": 523,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0272
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.evaluatesToLocalValue#2886",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean evaluatesToLocalValue(Node value) {\n    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());\n  }\n",
        "begin_line": 2886,
        "end_line": 2888,
        "comment": "\n   * @return Whether the node is known to be a value that is not referenced\n   * elsewhere.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0269
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isNoSideEffectsCall#2107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNoSideEffectsCall()",
        "snippet": "  public boolean isNoSideEffectsCall() {\n    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);\n  }\n",
        "begin_line": 2107,
        "end_line": 2109,
        "comment": "\n   * Returns true if this node is a function or constructor call that\n   * has no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0266
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.areBitFlagsSet#2123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.areBitFlagsSet(int, int)",
        "snippet": "  private boolean areBitFlagsSet(int value, int flags) {\n    return (value & flags) == flags;\n  }\n",
        "begin_line": 2123,
        "end_line": 2125,
        "comment": "\n   * returns true if all the flags are set in value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0265
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getSideEffectFlags#2020",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSideEffectFlags()",
        "snippet": "  public int getSideEffectFlags() {\n    return getIntProp(SIDE_EFFECT_FLAGS);\n  }\n",
        "begin_line": 2020,
        "end_line": 2022,
        "comment": "\n   * Returns the side effects flags for this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0265
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.shouldTraverse#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.PARAM_LIST: {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // Add the function parameters\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n          }\n\n          // Add the function body declarations\n          Node functionBody = n.getNext();\n          findDeclaredNames(functionBody, null, renamer);\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
        "begin_line": 105,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getModuleGraph#1125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getModuleGraph()",
        "snippet": "  @Override\n  JSModuleGraph getModuleGraph() {\n    return moduleGraph;\n  }\n",
        "begin_line": 1125,
        "end_line": 1128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.visit#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.FindExposeAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (NodeUtil.isExprAssign(n)) {\n        Node assign = n.getFirstChild();\n        Node lhs = assign.getFirstChild();\n        if (lhs.isGetProp() && isMarkedExpose(assign)) {\n          exposedProperties.add(lhs.getLastChild().getString());\n        }\n      } else if (n.isStringKey() && isMarkedExpose(n)) {\n        exposedProperties.add(n.getString());\n      }\n    }\n",
        "begin_line": 167,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0263
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isNominalType#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0262
        },
        "num_failing_tests": 5
    },
    {
        "name": "PrototypeObjectType.getConstructor#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 406,
        "end_line": 409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 5
    },
    {
        "name": "InstanceObjectType.defineProperty#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 5
    },
    {
        "name": "ObjectType.defineDeclaredProperty#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    boolean result = defineProperty(propertyName, type, false,\n        propertyNode);\n\n    // All property definitions go through this method\n    // or defineDeclaredProperty. Because the properties defined an an\n    // object can affect subtyping, it's slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return result;\n  }\n",
        "begin_line": 271,
        "end_line": 283,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param propertyNode the node corresponding to the declaration of property\n   *        which might later be accessed using {@code getPropertyNode}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 5
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 5
    },
    {
        "name": "PrototypeObjectType.defineProperty#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    Property newProp = new Property(\n        name, type, inferred, propertyNode);\n    Property oldProp = properties.get(name);\n    if (oldProp != null) {\n      // This is to keep previously inferred jsdoc info, e.g., in a\n      // replaceScript scenario.\n      newProp.setJSDocInfo(oldProp.getJSDocInfo());\n    }\n    properties.put(name, newProp);\n    return true;\n  }\n",
        "begin_line": 233,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 5
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 5
    },
    {
        "name": "JSTypeRegistry.createNullableType#977",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 5
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention()",
        "snippet": "  public GoogleCodingConvention() {\n    this(new ClosureCodingConvention());\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": " By default, decorate the ClosureCodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0254
        },
        "num_failing_tests": 5
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public GoogleCodingConvention(CodingConvention convention) {\n    super(convention);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": " Decorates a wrapped CodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0254
        },
        "num_failing_tests": 5
    },
    {
        "name": "AstValidator.validateBinaryOp#748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBinaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBinaryOp(Node n) {\n    validateChildCount(n, 2);\n    validateExpression(n.getFirstChild());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 748,
        "end_line": 752,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0254
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setType#532",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setType(int)",
        "snippet": "  public void setType(int type) {\n    this.type = type;\n  }\n",
        "begin_line": 532,
        "end_line": 534,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.025
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isForIn#1564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isForIn(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isForIn(Node n) {\n    return n.isFor()\n        && n.getChildCount() == 3;\n  }\n",
        "begin_line": 1564,
        "end_line": 1567,
        "comment": "\n   * @return Whether the node represents a FOR-IN loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.025
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getCompiler#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCompiler()",
        "snippet": "  public Compiler getCompiler() {\n    // TODO(nicksantos): Remove this type cast. This is just temporary\n    // while refactoring.\n    return (Compiler) compiler;\n  }\n",
        "begin_line": 398,
        "end_line": 402,
        "comment": "\n   * Gets the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0247
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isCatch#2204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCatch()",
        "snippet": "  public boolean isCatch() {\n    return this.getType() == Token.CATCH;\n  }\n",
        "begin_line": 2204,
        "end_line": 2206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0246
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.Scope#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode != parent.rootNode);\n\n    this.parent = parent;\n    this.rootNode = rootNode;\n    JSType nodeType = rootNode.getJSType();\n    if (nodeType != null && nodeType.isFunctionType()) {\n      thisType = nodeType.toMaybeFunctionType().getTypeOfThis();\n    } else {\n      thisType = parent.thisType;\n    }\n    this.isBottom = false;\n    this.depth = parent.depth + 1;\n  }\n",
        "begin_line": 390,
        "end_line": 404,
        "comment": "\n   * Creates a Scope given the parent Scope and the root node of the scope.\n   * @param parent  The parent Scope. Cannot be null.\n   * @param rootNode  Typically the FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0243
        },
        "num_failing_tests": 3
    },
    {
        "name": "MakeDeclaredNamesUnique.incrementNameCount#496",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.incrementNameCount(java.lang.String)",
        "snippet": "    private int incrementNameCount(String name) {\n      return nameUsage.add(name, 1);\n    }\n",
        "begin_line": 496,
        "end_line": 498,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0242
        },
        "num_failing_tests": 2
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0238
        },
        "num_failing_tests": 5
    },
    {
        "name": "Compiler.Compiler#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    this((PrintStream) null);\n  }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0237
        },
        "num_failing_tests": 5
    },
    {
        "name": "NodeUtil.canBeSideEffected#1101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.canBeSideEffected(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean canBeSideEffected(Node n) {\n    Set<String> emptySet = Collections.emptySet();\n    return canBeSideEffected(n, emptySet);\n  }\n",
        "begin_line": 1101,
        "end_line": 1104,
        "comment": "\n   * @return Whether the tree can be affected by side-effects or\n   * has side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0232
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.canBeSideEffected#1112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.canBeSideEffected(com.google.javascript.rhino.Node, java.util.Set<java.lang.String>)",
        "snippet": "  static boolean canBeSideEffected(Node n, Set<String> knownConstants) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (canBeSideEffected(c, knownConstants)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 1112,
        "end_line": 1144,
        "comment": "\n   * @param knownConstants A set of names known to be constant value at\n   * node 'n' (such as locals that are last written before n can execute).\n   * @return Whether the tree can be affected by side-effects or\n   * has side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.023
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isConstantByConvention#2798",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isConstantByConvention(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent) {\n    String name = node.getString();\n    if (parent.isGetProp() &&\n        node == parent.getLastChild()) {\n      return convention.isConstantKey(name);\n    } else if (isObjectLitKey(node, parent)) {\n      return convention.isConstantKey(name);\n    } else {\n      return convention.isConstant(name);\n    }\n  }\n",
        "begin_line": 2798,
        "end_line": 2809,
        "comment": " Whether the given name is constant by coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0228
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.findDeclaredNames#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.findDeclaredNames(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  private void findDeclaredNames(Node n, Node parent, Renamer renamer) {\n    // Do a shallow traversal, so don't traverse into function declarations,\n    // except for the name of the function itself.\n    if (parent == null\n        || !parent.isFunction()\n        || n == parent.getFirstChild()) {\n      if (NodeUtil.isVarDeclaration(n)) {\n        renamer.addDeclaredName(n.getString());\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        renamer.addDeclaredName(nameNode.getString());\n      }\n\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        findDeclaredNames(c, n, renamer);\n      }\n    }\n  }\n",
        "begin_line": 212,
        "end_line": 229,
        "comment": "\n   * Traverses the current scope and collects declared names.  Does not\n   * decent into functions or add CATCH exceptions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0227
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.compare#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.Anonymous-6a27c390-7cda-434c-babc-f92cf3c5399b.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.prioritizeFromEntryNode#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  private void prioritizeFromEntryNode(DiGraphNode<Node, Branch> entry) {\n    PriorityQueue<DiGraphNode<Node, Branch>> worklist =\n        new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);\n    worklist.add(entry);\n\n    while (!worklist.isEmpty()) {\n      DiGraphNode<Node, Branch> current = worklist.remove();\n      if (nodePriorities.containsKey(current)) {\n        continue;\n      }\n\n      nodePriorities.put(current, ++priorityCounter);\n\n      List<DiGraphNode<Node, Branch>> successors =\n          cfg.getDirectedSuccNodes(current);\n      for (DiGraphNode<Node, Branch> candidate : successors) {\n        worklist.add(candidate);\n      }\n    }\n  }\n",
        "begin_line": 196,
        "end_line": 215,
        "comment": "\n   * Given an entry node, find all the nodes reachable from that node\n   * and prioritize them.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.mayHaveSideEffects#775",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, false, compiler);\n  }\n",
        "begin_line": 775,
        "end_line": 777,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0225
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isExtern#218",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isExtern()",
        "snippet": "    boolean isExtern() {\n      return input == null || input.isExtern();\n    }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\n     * Returns whether this is defined in an extern file.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0224
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private DiagnosticGroup(DiagnosticType type) {\n    this.name = null;\n    this.types = ImmutableSet.of(type);\n  }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\n   * Create a diagnostic group with no name that only matches the given type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0219
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.forType#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public static DiagnosticGroup forType(DiagnosticType type) {\n    if (!singletons.containsKey(type)) {\n      singletons.put(type, new DiagnosticGroup(type));\n    }\n    return singletons.get(type);\n  }\n",
        "begin_line": 70,
        "end_line": 75,
        "comment": " Create a diagnostic group that matches only the given type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0219
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.disables#1059",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean disables(DiagnosticGroup type) {\n    return warningsGuard.disables(type);\n  }\n",
        "begin_line": 1059,
        "end_line": 1061,
        "comment": "\n   * Whether the warnings guard in this Options object disables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0219
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isFor#2248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isFor()",
        "snippet": "  public boolean isFor() {\n    return this.getType() == Token.FOR;\n  }\n",
        "begin_line": 2248,
        "end_line": 2250,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0218
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.isSubGroup#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.isSubGroup(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean isSubGroup(DiagnosticGroup group) {\n    for (DiagnosticType type : group.types) {\n      if (!matches(type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 116,
        "end_line": 123,
        "comment": "\n   * Returns whether all of the types in the given group are in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0217
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isImmutableValue#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isImmutableValue(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }\n\n    return false;\n  }\n",
        "begin_line": 490,
        "end_line": 513,
        "comment": "\n   * Returns true if this is an immutable value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0216
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateParameters#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateParameters(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateParameters(Node n) {\n    validateNodeType(Token.PARAM_LIST, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateName(c);\n    }\n  }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0212
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodingConventions.isExported#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String)",
        "snippet": "    @Override\n    public final boolean isExported(String name) {\n      return isExported(name, false) || isExported(name, true);\n    }\n",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0209
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.visit#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            Node empty = IR.empty();\n            empty.copyInformationFrom(n);\n            n.addChildBefore(empty, expr);\n            n.addChildAfter(empty.cloneNode(), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n\n        case Token.NAME:\n        case Token.STRING:\n        case Token.STRING_KEY:\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n          if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) {\n            annotateConstantsByConvention(n, parent);\n          }\n          break;\n      }\n    }\n",
        "begin_line": 380,
        "end_line": 409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.normalizeFunctionDeclaration#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.normalizeFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeFunctionDeclaration(Node n) {\n      Preconditions.checkState(n.isFunction());\n      if (!NodeUtil.isFunctionExpression(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n)) {\n        rewriteFunctionDeclaration(n);\n      }\n    }\n",
        "begin_line": 454,
        "end_line": 460,
        "comment": "\n     * Rewrite named unhoisted functions declarations to a known\n     * consistent behavior so we don't to different logic paths for the same\n     * code. From:\n     *    function f() {}\n     * to:\n     *    var f = function () {};\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.doStatementNormalizations#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.doStatementNormalizations(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent) {\n      if (n.isLabel()) {\n        normalizeLabels(n);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs and LABELs, as all these\n      // are the only legal place for VARs and FOR statements.\n      if (NodeUtil.isStatementBlock(n) || n.isLabel()) {\n        extractForInitializer(n, null, null);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs, as all these\n      // are the only legal place for VARs.\n      if (NodeUtil.isStatementBlock(n)) {\n        splitVarDeclarations(n);\n      }\n\n      if (n.isFunction()) {\n        moveNamedFunctions(n.getLastChild());\n      }\n    }\n",
        "begin_line": 498,
        "end_line": 519,
        "comment": "\n     * Do normalizations that introduce new siblings or parents.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.moveNamedFunctions#640",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.moveNamedFunctions(com.google.javascript.rhino.Node)",
        "snippet": "    private void moveNamedFunctions(Node functionBody) {\n      Preconditions.checkState(\n          functionBody.getParent().isFunction());\n      Node previous = null;\n      Node current = functionBody.getFirstChild();\n      // Skip any declarations at the beginning of the function body, they\n      // are already in the right place.\n      while (current != null && NodeUtil.isFunctionDeclaration(current)) {\n        previous = current;\n        current = current.getNext();\n      }\n\n      // Find any remaining declarations and move them.\n      Node insertAfter = previous;\n      while (current != null) {\n        // Save off the next node as the current node maybe removed.\n        Node next = current.getNext();\n        if (NodeUtil.isFunctionDeclaration(current)) {\n          // Remove the declaration from the body.\n          Preconditions.checkNotNull(previous);\n          functionBody.removeChildAfter(previous);\n\n          // Read the function at the top of the function body (after any\n          // previous declarations).\n          insertAfter = addToFront(functionBody, current, insertAfter);\n          reportCodeChange(\"Move function declaration not at top of function\");\n        } else {\n          // Update the previous only if the current node hasn't been moved.\n          previous = current;\n        }\n        current = next;\n      }\n    }\n",
        "begin_line": 640,
        "end_line": 672,
        "comment": "\n     * Move all the functions that are valid at the execution of the first\n     * statement of the function to the beginning of the function definition.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getModule#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getModule()",
        "snippet": "  public JSModule getModule() {\n    CompilerInput input = getInput();\n    return input == null ? null : input.getModule();\n  }\n",
        "begin_line": 439,
        "end_line": 442,
        "comment": "\n   * Gets the current input module.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer(com.google.common.collect.Multiset<java.lang.String>)",
        "snippet": "    private ContextualRenamer(Multiset<String> nameUsage) {\n      this.global = false;\n      this.nameUsage = nameUsage;\n    }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "\n     * Constructor for child scopes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.forChildScope#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.forChildScope()",
        "snippet": "    @Override\n    public Renamer forChildScope() {\n      return new ContextualRenamer(nameUsage);\n    }\n",
        "begin_line": 453,
        "end_line": 456,
        "comment": "\n     * Create a ContextualRenamer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isExported#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return nextConvention.isExported(name, local);\n    }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodingConventions.isExported#275",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return local && name.startsWith(\"$super\");\n    }\n",
        "begin_line": 275,
        "end_line": 278,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0204
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.enterScope#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used, the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          !declarationRoot.isFunction() ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (!declarationRoot.isFunction()) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
        "begin_line": 75,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0203
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.exitScope#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    if (!t.inGlobalScope()) {\n      nameStack.pop();\n    }\n  }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0203
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getName#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getName()",
        "snippet": "    @Override\n    public String getName() {\n      return name;\n    }\n",
        "begin_line": 147,
        "end_line": 150,
        "comment": "\n     * Gets the name of the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0198
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.splitVarDeclarations#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.splitVarDeclarations(com.google.javascript.rhino.Node)",
        "snippet": "    private void splitVarDeclarations(Node n) {\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        if (c.isVar()) {\n          if (assertOnChange && !c.hasChildren()) {\n            throw new IllegalStateException(\"Empty VAR node.\");\n          }\n\n          while (c.getFirstChild() != c.getLastChild()) {\n            Node name = c.getFirstChild();\n            c.removeChild(name);\n            Node newVar = IR.var(name).srcref(n);\n            n.addChildBefore(newVar, c);\n            reportCodeChange(\"VAR with multiple children\");\n          }\n        }\n      }\n    }\n",
        "begin_line": 617,
        "end_line": 634,
        "comment": "\n     * Split a var node such as:\n     *   var a, b;\n     * into individual statements:\n     *   var a;\n     *   var b;\n     * @param n The whose children we should inspect.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processFunctionNode#626",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode)",
        "snippet": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.PARAM_LIST);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        Node paramNode = transform(param);\n        // When in ideMode Rhino can generate a param list with only a single\n        // ErrorNode. This is transformed into an EMPTY node. Drop this node in\n        // ideMode to keep the AST in a valid state.\n        if (paramNode.isName()) {\n          lp.addChildToBack(paramNode);\n        } else {\n          // We expect this in ideMode or when there is an error handling\n          // destructuring parameter assignments which aren't supported\n          // (an error has already been reported).\n          Preconditions.checkState(\n              config.isIdeMode\n              || paramNode.isObjectLit()\n              || paramNode.isArrayLit());\n        }\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      if (!bodyNode.isBlock()) {\n        // When in ideMode Rhino tries to parse some constructs the compiler\n        // doesn't support, repair it here. see Rhino's\n        // Parser#parseFunctionBodyExpr.\n        Preconditions.checkState(config.isIdeMode);\n        bodyNode = IR.block();\n      }\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 626,
        "end_line": 708,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 3
    },
    {
        "name": "Normalize.process#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    new NodeTraversal(\n        compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverseRoots(externs, root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    // It is important that removeDuplicateDeclarations runs after\n    // MakeDeclaredNamesUnique in order for catch block exception names to be\n    // handled properly. Specifically, catch block exception names are\n    // only valid within the catch block, but our current Scope logic\n    // has no concept of this and includes it in the containing function\n    // (or global scope). MakeDeclaredNamesUnique makes the catch exception\n    // names unique so that removeDuplicateDeclarations() will properly handle\n    // cases where a function scope variable conflict with a exception name:\n    //   function f() {\n    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}\n    //      var e = 1; // f scope 'e'\n    //   }\n    // otherwise 'var e = 1' would be rewritten as 'e = 1'.\n    // TODO(johnlenz): Introduce a separate scope for catch nodes.\n    removeDuplicateDeclarations(externs, root);\n    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n        .process(externs, root);\n\n    FindExposeAnnotations findExposeAnnotations = new FindExposeAnnotations();\n    NodeTraversal.traverse(compiler, root, findExposeAnnotations);\n    if (!findExposeAnnotations.exposedProperties.isEmpty()) {\n      NodeTraversal.traverse(compiler, root,\n          new RewriteExposedProperties(\n              findExposeAnnotations.exposedProperties));\n    }\n\n    if (!compiler.getLifeCycleStage().isNormalized()) {\n      compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.SyntacticScopeCreator.RedeclarationHandler)",
        "snippet": "  SyntacticScopeCreator(\n      AbstractCompiler compiler, RedeclarationHandler redeclarationHandler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = redeclarationHandler;\n  }\n",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.enterScope#820",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      // Cause the scope to be created, which will cause duplicate\n      // to be found.\n      t.getScope();\n    }\n",
        "begin_line": 820,
        "end_line": 825,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.exitScope#827",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      // Nothing to do.\n    }\n",
        "begin_line": 827,
        "end_line": 830,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.shouldTraverse#832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 832,
        "end_line": 836,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.visit#838",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Nothing to do.\n    }\n",
        "begin_line": 838,
        "end_line": 841,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.PropagateConstantAnnotationsOverVars#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.PropagateConstantAnnotationsOverVars(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    PropagateConstantAnnotationsOverVars(\n        AbstractCompiler compiler, boolean forbidChanges) {\n      this.compiler = compiler;\n      this.assertOnChange = forbidChanges;\n    }\n",
        "begin_line": 224,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.process#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      new NodeTraversal(compiler, this).traverseRoots(externs, root);\n    }\n",
        "begin_line": 230,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.removeDuplicateDeclarations#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.removeDuplicateDeclarations(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void removeDuplicateDeclarations(Node externs, Node root) {\n    Callback tickler = new ScopeTicklingCallback();\n    ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());\n    NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);\n    t.traverseRoots(externs, root);\n  }\n",
        "begin_line": 692,
        "end_line": 698,
        "comment": "\n   * Remove duplicate VAR declarations.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.Normalize#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.Normalize(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  Normalize(AbstractCompiler compiler, boolean assertOnChange) {\n    this.compiler = compiler;\n    this.assertOnChange = assertOnChange;\n\n    // TODO(nicksantos): assertOnChange should only be true if the tree\n    // is normalized.\n  }\n",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getFunctionJSDocInfo#2814",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(com.google.javascript.rhino.Node)",
        "snippet": "  public static JSDocInfo getFunctionJSDocInfo(Node n) {\n    Preconditions.checkState(n.isFunction());\n    JSDocInfo fnInfo = n.getJSDocInfo();\n    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {\n      // Look for the info on other nodes.\n      Node parent = n.getParent();\n      if (parent.isAssign()) {\n        // on ASSIGNs\n        fnInfo = parent.getJSDocInfo();\n      } else if (parent.isName()) {\n        // on var NAME = function() { ... };\n        fnInfo = parent.getParent().getJSDocInfo();\n      }\n    }\n    return fnInfo;\n  }\n",
        "begin_line": 2814,
        "end_line": 2829,
        "comment": "\n   * Get the JSDocInfo for a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 3
    },
    {
        "name": "MakeDeclaredNamesUnique.reserveName#492",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.reserveName(java.lang.String)",
        "snippet": "    private void reserveName(String name) {\n      nameUsage.setCount(name, 0, 1);\n    }\n",
        "begin_line": 492,
        "end_line": 494,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.setLifeCycleStage#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage)",
        "snippet": "  void setLifeCycleStage(LifeCycleStage stage) {\n    this.stage = stage;\n  }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "\n   * Set the current life-cycle state.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseFunction#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.isBlock(), body);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 510,
        "end_line": 545,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.isAnd#2172",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isAnd()",
        "snippet": "  public boolean isAnd() {\n    return this.getType() == Token.AND;\n  }\n",
        "begin_line": 2172,
        "end_line": 2174,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0185
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.isOr#2324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isOr()",
        "snippet": "  public boolean isOr() {\n    return this.getType() == Token.OR;\n  }\n",
        "begin_line": 2324,
        "end_line": 2326,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0185
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.isHook#2268",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isHook()",
        "snippet": "  public boolean isHook() {\n    return this.getType() == Token.HOOK;\n  }\n",
        "begin_line": 2268,
        "end_line": 2270,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0185
        },
        "num_failing_tests": 3
    },
    {
        "name": "Normalize.annotateConstantsByConvention#414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.annotateConstantsByConvention(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateConstantsByConvention(Node n, Node parent) {\n      Preconditions.checkState(\n          n.isName()\n          || n.isString()\n          || n.isStringKey()\n          || n.isGetterDef()\n          || n.isSetterDef());\n\n      // There are only two cases where a string token\n      // may be a variable reference: The right side of a GETPROP\n      // or an OBJECTLIT key.\n      boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent);\n      boolean isProperty = isObjLitKey ||\n          (parent.isGetProp() &&\n           parent.getLastChild() == n);\n      if (n.isName() || isProperty) {\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant &&\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent)) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 414,
        "end_line": 444,
        "comment": "\n     * Mark names and properties that are constants by convention.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0185
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.isNormalizedObfuscated#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalizedObfuscated()",
        "snippet": "    boolean isNormalizedObfuscated() {\n      return this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 294,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0185
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.NormalizeStatements#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.NormalizeStatements(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange) {\n      this.compiler = compiler;\n      this.assertOnChange = assertOnChange;\n    }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.shouldTraverse#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      doStatementNormalizations(t, n, parent);\n\n      return true;\n    }\n",
        "begin_line": 373,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.extractForInitializer#560",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.extractForInitializer(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void extractForInitializer(\n        Node n, Node before, Node beforeParent) {\n\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        Node insertBefore = (before == null) ? c : before;\n        Node insertBeforeParent = (before == null) ? n : beforeParent;\n        switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (NodeUtil.isForIn(c)) {\n              Node first = c.getFirstChild();\n              if (first.isVar()) {\n                // Transform:\n                //    for (var a = 1 in b) {}\n                // to:\n                //    var a = 1; for (a in b) {};\n                Node newStatement = first;\n                // Clone just the node, to remove any initialization.\n                Node name = newStatement.getFirstChild().cloneNode();\n                first.getParent().replaceChild(first, name);\n                insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                reportCodeChange(\"FOR-IN var declaration\");\n              }\n            } else if (!c.getFirstChild().isEmpty()) {\n              Node init = c.getFirstChild();\n              Node empty = IR.empty();\n              empty.copyInformationFrom(c);\n              c.replaceChild(init, empty);\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.isVar()) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }\n      }\n    }\n",
        "begin_line": 560,
        "end_line": 607,
        "comment": "\n     * Bring the initializers out of FOR loops.  These need to be placed\n     * before any associated LABEL nodes. This needs to be done from the top\n     * level label first so this is called as a pre-order callback (from\n     * shouldTraverse).\n     *\n     * @param n The node to inspect.\n     * @param before The node to insert the initializer before.\n     * @param beforeParent The parent of the node before which the initializer\n     *     will be inserted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#480",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.getReplacementName(java.lang.String)",
        "snippet": "    @Override\n    public String getReplacementName(String oldName) {\n      return declarations.get(oldName);\n    }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique()",
        "snippet": "  MakeDeclaredNamesUnique() {\n    this(new ContextualRenamer());\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer()",
        "snippet": "    ContextualRenamer() {\n      this.global = true;\n      nameUsage = HashMultiset.create();\n    }\n",
        "begin_line": 437,
        "end_line": 440,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 2
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique(com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  MakeDeclaredNamesUnique(Renamer renamer) {\n    this.rootRenamer = renamer;\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.level#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    for (WarningsGuard guard : guards) {\n      CheckLevel newLevel = guard.level(error);\n      if (newLevel != null) {\n        if (demoteErrors && newLevel == CheckLevel.ERROR) {\n          return CheckLevel.WARNING;\n        }\n        return newLevel;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 110,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseRoots#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.rhino.Node...)",
        "snippet": "  public void traverseRoots(Node ... roots) {\n    traverseRoots(Lists.newArrayList(roots));\n  }\n",
        "begin_line": 284,
        "end_line": 286,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getJSDocInfo#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getJSDocInfo()",
        "snippet": "    @Override\n    public JSDocInfo getJSDocInfo() {\n      return info;\n    }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "\n     * Gets the JSDocInfo for the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.isNormalized#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalized()",
        "snippet": "    boolean isNormalized() {\n      return this == NORMALIZED || this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSError.getType#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getType()",
        "snippet": "  public DiagnosticType getType() {\n    return type;\n  }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroupWarningsGuard.level#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    return group.matches(error) ? level : null;\n  }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.matches#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.JSError)",
        "snippet": "  public boolean matches(JSError error) {\n    return matches(error.getType());\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n   * Returns whether the given error's type matches a type\n   * in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 2
    },
    {
        "name": "SuppressDocWarningsGuard.level#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    Node node = error.node;\n    if (node != null) {\n      for (Node current = node;\n           current != null;\n           current = current.getParent()) {\n        int type = current.getType();\n        JSDocInfo info = null;\n\n        // We only care about function annotations at the FUNCTION and SCRIPT\n        // level. Otherwise, the @suppress annotation has an implicit\n        // dependency on the exact structure of our AST, and that seems like\n        // a bad idea.\n        if (type == Token.FUNCTION) {\n          info = NodeUtil.getFunctionJSDocInfo(current);\n        } else if (type == Token.SCRIPT) {\n          info = current.getJSDocInfo();\n        } else if (type == Token.ASSIGN) {\n          Node rhs = current.getLastChild();\n          if (rhs.isFunction()) {\n            info = NodeUtil.getFunctionJSDocInfo(rhs);\n          }\n        }\n\n        if (info != null) {\n          for (String suppressor : info.getSuppressions()) {\n            WarningsGuard guard = suppressors.get(suppressor);\n\n            // Some @suppress tags are for other tools, and\n            // may not have a warnings guard.\n            if (guard != null) {\n              CheckLevel newLevel = guard.level(error);\n              if (newLevel != null) {\n                return newLevel;\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 51,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCompiler.getLifeCycleStage#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.getLifeCycleStage()",
        "snippet": "  LifeCycleStage getLifeCycleStage() {\n    return stage;\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n   * @return The current life-cycle stage of the AST we're working on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSError.JSError#142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, com.google.javascript.rhino.Node, int, int, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.CheckLevel, java.lang.String...)",
        "snippet": "  private JSError(\n      String sourceName, @Nullable Node node, int lineno, int charno,\n      DiagnosticType type, CheckLevel level, String... arguments) {\n    this.type = type;\n    this.node = node;\n    this.description = type.format.format(arguments);\n    this.lineNumber = lineno;\n    this.charno = charno;\n    this.sourceName = sourceName;\n    this.defaultLevel = level == null ? type.level : level;\n    this.level = level == null ? type.level : level;\n  }\n",
        "begin_line": 142,
        "end_line": 153,
        "comment": "\n   * Creates a JSError at a CheckLevel for a source file location.\n   * Private to avoid any entanglement with code outside of the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.isLocal#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isLocal()",
        "snippet": "    public boolean isLocal() {\n      return scope.isLocal();\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Returns whether this is a local variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isStatementParent#1709",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1709,
        "end_line": 1722,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrepareAst.annotateFunctions#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateFunctions(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateFunctions(Node n, Node parent) {\n      JSDocInfo fnInfo = NodeUtil.getFunctionJSDocInfo(n);\n\n      // Compute which function parameters are optional and\n      // which are var_args.\n      Node args = n.getFirstChild().getNext();\n      for (Node arg = args.getFirstChild();\n           arg != null;\n           arg = arg.getNext()) {\n        String argName = arg.getString();\n        JSTypeExpression typeExpr = fnInfo == null ?\n            null : fnInfo.getParameterType(argName);\n\n        if (convention.isOptionalParameter(arg) ||\n            typeExpr != null && typeExpr.isOptionalArg()) {\n          arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);\n        }\n        if (convention.isVarArgsParameter(arg) ||\n            typeExpr != null && typeExpr.isVarArgs()) {\n          arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);\n        }\n      }\n    }\n",
        "begin_line": 223,
        "end_line": 245,
        "comment": "\n     * Annotate optional and var_arg function parameters.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.isExprAssign#1544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExprAssign(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExprAssign(Node n) {\n    return n.isExprResult()\n        && n.getFirstChild().isAssign();\n  }\n",
        "begin_line": 1544,
        "end_line": 1547,
        "comment": "\n   * Is this node an assignment expression statement?\n   *\n   * @param n The node\n   * @return True if {@code n} is EXPR_RESULT and {@code n}'s\n   *     first child is ASSIGN\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isStringKey#2352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isStringKey()",
        "snippet": "  public boolean isStringKey() {\n    return this.getType() == Token.STRING_KEY;\n  }\n",
        "begin_line": 2352,
        "end_line": 2354,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getModule#319",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getModule()",
        "snippet": "  public JSModule getModule() {\n    return module;\n  }\n",
        "begin_line": 319,
        "end_line": 321,
        "comment": " Returns the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.017
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.getJSType#1828",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSType()",
        "snippet": "  public JSType getJSType() {\n      return jsType;\n  }\n",
        "begin_line": 1828,
        "end_line": 1830,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0168
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocInfoParser.parseBasicTypeExpression#1730",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseBasicTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.STAR) {\n      return newNode(Token.STAR);\n    } else if (token == JsDocToken.LB) {\n      skipEOLs();\n      return parseArrayType(next());\n    } else if (token == JsDocToken.LC) {\n      skipEOLs();\n      return parseRecordType(next());\n    } else if (token == JsDocToken.LP) {\n      skipEOLs();\n      return parseUnionType(next());\n    } else if (token == JsDocToken.STRING) {\n      String string = stream.getString();\n      if (\"function\".equals(string)) {\n        skipEOLs();\n        return parseFunctionType(next());\n      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n        return newStringNode(string);\n      } else {\n        return parseTypeName(token);\n      }\n    }\n\n    restoreLookAhead(token);\n    return reportGenericTypeSyntaxWarning();\n  }\n",
        "begin_line": 1730,
        "end_line": 1756,
        "comment": "\n   * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName\n   *     | FunctionType | UnionType | RecordType | ArrayType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0168
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.skipEOLs#2304",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.skipEOLs()",
        "snippet": "  private void skipEOLs() {\n    while (match(JsDocToken.EOL)) {\n      next();\n      if (match(JsDocToken.STAR)) {\n        next();\n      }\n    }\n  }\n",
        "begin_line": 2304,
        "end_line": 2311,
        "comment": "\n   * Skips all EOLs and all empty lines in the JSDoc. Call this method if you\n   * want the JSDoc entry to span multiple lines.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseTypeExpression#1683",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.QMARK) {\n      // A QMARK could mean that a type is nullable, or that it's unknown.\n      // We use look-ahead 1 to determine whether it's unknown. Otherwise,\n      // we assume it means nullable. There are 5 cases:\n      // {?} - right curly\n      // {?=} - equals\n      // {function(?, number)} - comma\n      // {function(number, ?)} - right paren\n      // {function(number, ...[?])} - right bracket\n      // {function(): ?|number} - pipe\n      // I'm not a big fan of using look-ahead for this, but it makes\n      // the type language a lot nicer.\n      token = next();\n      if (token == JsDocToken.COMMA ||\n          token == JsDocToken.EQUALS ||\n          token == JsDocToken.RB ||\n          token == JsDocToken.RC ||\n          token == JsDocToken.RP ||\n          token == JsDocToken.PIPE) {\n        restoreLookAhead(token);\n        return newNode(Token.QMARK);\n      }\n\n      return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token == JsDocToken.BANG) {\n      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n      Node basicTypeExpr = parseBasicTypeExpression(token);\n      if (basicTypeExpr != null) {\n        if (match(JsDocToken.QMARK)) {\n          next();\n          return wrapNode(Token.QMARK, basicTypeExpr);\n        } else if (match(JsDocToken.BANG)) {\n          next();\n          return wrapNode(Token.BANG, basicTypeExpr);\n        }\n      }\n\n      return basicTypeExpr;\n    }\n  }\n",
        "begin_line": 1683,
        "end_line": 1724,
        "comment": "\n   * TypeExpression := BasicTypeExpression\n   *     | '?' BasicTypeExpression\n   *     | '!' BasicTypeExpression\n   *     | BasicTypeExpression '?'\n   *     | BasicTypeExpression '!'\n   *     | '?'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.newNode#2187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 2187,
        "end_line": 2190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0166
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getScope#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getScope()",
        "snippet": "    Scope getScope() {\n      return scope;\n    }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "\n     * Gets the scope where this variable is declared.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0166
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isParamList#2328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isParamList()",
        "snippet": "  public boolean isParamList() {\n    return this.getType() == Token.PARAM_LIST;\n  }\n",
        "begin_line": 2328,
        "end_line": 2330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeExpression.isOptionalArg#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.isOptionalArg()",
        "snippet": "  public boolean isOptionalArg() {\n    return root.getType() == Token.EQUALS;\n  }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n   * @return Whether this expression denotes an optional {@code @param}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeExpression.isVarArgs#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.isVarArgs()",
        "snippet": "  public boolean isVarArgs() {\n    return root.getType() == Token.ELLIPSIS;\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n   * @return Whether this expression denotes a rest args {@code @param}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getParameterType#950",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getParameterType(java.lang.String)",
        "snippet": "  public JSTypeExpression getParameterType(String parameter) {\n    if (info == null || info.parameters == null) {\n      return null;\n    }\n    return info.parameters.get(parameter);\n  }\n",
        "begin_line": 950,
        "end_line": 955,
        "comment": "\n   * Gets the parameter type.\n   * @param parameter the parameter's name\n   * @return the parameter's type or {@code null} if this parameter is not\n   *     defined or has a {@code null} type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseAndRecordParamTypeNode#1112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordParamTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseAndRecordParamTypeNode(JsDocToken token) {\n    Preconditions.checkArgument(token == JsDocToken.LC);\n    int lineno = stream.getLineno();\n    int startCharno = stream.getCharno();\n\n    Node typeNode = parseParamTypeExpressionAnnotation(token);\n    if (typeNode != null) {\n      int endLineno = stream.getLineno();\n      int endCharno = stream.getCharno();\n\n      jsdocBuilder.markTypeNode(typeNode, lineno, startCharno,\n          endLineno, endCharno, true);\n    }\n    return typeNode;\n  }\n",
        "begin_line": 1112,
        "end_line": 1126,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * Parameter type expressions are special for two reasons:\n   * <ol>\n   *   <li>They must begin with '{', to distinguish type names from param names.\n   *   <li>They may end in '=', to denote optionality.\n   * </ol>\n   *\n   * @param token The current token.\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.markName#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markName(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, int, int)",
        "snippet": "  public void markName(String name, StaticSourceFile file,\n      int lineno, int charno) {\n    if (currentMarker != null) {\n      // Record the name as both a SourcePosition<String> and a\n      // SourcePosition<Node>. The <String> form is deprecated,\n      // because <Node> is more consistent with how other name\n      // references are handled (see #markTypeNode)\n      //\n      // TODO(nicksantos): Remove all uses of the Name position\n      // and replace them with the NameNode position.\n      JSDocInfo.TrimmedStringPosition position =\n          new JSDocInfo.TrimmedStringPosition();\n      position.setItem(name);\n      position.setPositionInformation(lineno, charno,\n          lineno, charno + name.length());\n      currentMarker.setName(position);\n\n      SourcePosition<Node> nodePos =\n          new JSDocInfo.NamePosition();\n      Node node = Node.newString(Token.NAME, name, lineno, charno);\n      node.setLength(name.length());\n      node.setStaticSourceFile(file);\n      nodePos.setItem(node);\n      nodePos.setPositionInformation(lineno, charno,\n          lineno, charno + name.length());\n      currentMarker.setNameNode(nodePos);\n    }\n  }\n",
        "begin_line": 205,
        "end_line": 232,
        "comment": "\n   * Adds a name declaration to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.recordParameter#266",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordParameter(java.lang.String, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordParameter(String parameterName, JSTypeExpression type) {\n    if (!hasAnySingletonTypeTags() &&\n        currentInfo.declareParam(type, parameterName)) {\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 266,
        "end_line": 274,
        "comment": "\n   * Records a typed parameter.\n   *\n   * @return {@code true} if the typed parameter was recorded and\n   *     {@code false} if a parameter with the same name was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.declareParam#889",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.declareParam(com.google.javascript.rhino.JSTypeExpression, java.lang.String)",
        "snippet": "  boolean declareParam(JSTypeExpression jsType, String parameter) {\n    lazyInitInfo();\n    if (info.parameters == null) {\n      info.parameters = new LinkedHashMap<String, JSTypeExpression>();\n    }\n    if (!info.parameters.containsKey(parameter)) {\n      info.parameters.put(parameter, jsType);\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 889,
        "end_line": 900,
        "comment": "\n   * Declares a parameter. Parameters are described using the {@code @param}\n   * annotation.\n   *\n   * @param jsType the parameter's type, it may be {@code null} when the\n   *     {@code @param} annotation did not specify a type.\n   * @param parameter the parameter's name\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0165
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isVarDeclaration#1515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isVarDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isVarDeclaration(Node n) {\n    // There is no need to verify that parent != null because a NAME node\n    // always has a parent in a valid parse tree.\n    return n.isName() && n.getParent().isVar();\n  }\n",
        "begin_line": 1515,
        "end_line": 1519,
        "comment": "\n   * Is this node the name of a variable being declared?\n   *\n   * @param n The node\n   * @return True if {@code n} is NAME and {@code parent} is VAR\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0164
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.handleStmt#668",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmt(Node node) {\n    // Simply transfer to the next line.\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(node, node);\n  }\n",
        "begin_line": 668,
        "end_line": 672,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0164
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, int, int)",
        "snippet": "  public Node(int nodeType, Node child, int lineno, int charno) {\n    this(nodeType, child);\n    sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 451,
        "end_line": 454,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0162
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.wrapNode#2181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.wrapNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node wrapNode(int type, Node n) {\n    return n == null ? null :\n        new Node(type, n, stream.getLineno(),\n            stream.getCharno()).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 2181,
        "end_line": 2185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0162
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateFunctionStatement#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionStatement(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 350,
        "end_line": 356,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0161
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.recordReturnType#481",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordReturnType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordReturnType(JSTypeExpression jsType) {\n    if (jsType != null && currentInfo.getReturnType() == null &&\n        !hasAnySingletonTypeTags()) {\n      currentInfo.setReturnType(jsType);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 481,
        "end_line": 490,
        "comment": "\n   * Records a return type.\n   *\n   * @return {@code true} if the return type was recorded and {@code false} if\n   *     it is invalid or was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.016
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setReturnType#1005",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setReturnType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setReturnType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1005,
        "end_line": 1007,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.016
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getReturnType#1083",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getReturnType()",
        "snippet": "  public JSTypeExpression getReturnType() {\n    return getType(TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1083,
        "end_line": 1085,
        "comment": "\n   * Gets the return type specified by the {@code @return} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.016
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getType#1101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getType(int)",
        "snippet": "  private JSTypeExpression getType(int typefield) {\n    if ((MASK_TYPEFIELD & bitset) == typefield) {\n      return type;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 1101,
        "end_line": 1107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.016
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.mayThrowException#910",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean mayThrowException(Node n) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n      case Token.INSTANCEOF:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 910,
        "end_line": 931,
        "comment": "\n   * Determines if the subtree might throw an exception.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0159
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getSuppressions#1314",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getSuppressions()",
        "snippet": "  public Set<String> getSuppressions() {\n    Set<String> suppressions = info == null ? null : info.suppressions;\n    return suppressions == null ? Collections.<String>emptySet() : suppressions;\n  }\n",
        "begin_line": 1314,
        "end_line": 1317,
        "comment": "\n   * Returns the set of suppressed warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordType#434",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordType(JSTypeExpression type) {\n    if (type != null && !hasAnyTypeRelatedTags()) {\n      currentInfo.setType(type);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 434,
        "end_line": 442,
        "comment": "\n   * Records a type.\n   *\n   * @return {@code true} if the type was recorded and {@code false} if\n   *     it is invalid or was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setType#1001",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 1001,
        "end_line": 1003,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getChar#336",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getChar()",
        "snippet": "  protected int getChar() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (lineEndChar >= 0) {\n        if (lineEndChar == '\\r' && c == '\\n') {\n          lineEndChar = '\\n';\n          continue;\n        }\n        lineEndChar = -1;\n        lineStart = sourceCursor - 1;\n        lineno++;\n      }\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 336,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.annotateDispatchers#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.isFunction());\n      if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.isAssign()) {\n          Preconditions.checkState(parent.getLastChild() == n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }\n",
        "begin_line": 185,
        "end_line": 194,
        "comment": "\n     * Translate dispatcher info into the property expected node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocTokenStream.matchChar#259",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.matchChar(int)",
        "snippet": "  private boolean matchChar(int test) {\n    int c = getCharIgnoreLineEnd();\n    if (c == test) {\n      tokenEnd = cursor;\n      return true;\n    } else {\n      ungetCharIgnoreLineEnd(c);\n      return false;\n    }\n  }\n",
        "begin_line": 259,
        "end_line": 268,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.ungetCharIgnoreLineEnd#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCharIgnoreLineEnd(int)",
        "snippet": "  private void ungetCharIgnoreLineEnd(int c) {\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isFunctionExpression#1905",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionExpression(Node n) {\n    return n.isFunction() && !isStatement(n);\n  }\n",
        "begin_line": 1905,
        "end_line": 1907,
        "comment": "\n   * Is a FUNCTION node an function expression? An function expression is one\n   * that has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of function expressions:\n   * <pre>\n   * (function () {})\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> expressions:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A node\n   * @return Whether n is an function used within an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0156
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#2235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private JsDocToken eatTokensUntilEOL(JsDocToken token) {\n    do {\n      if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF) {\n        state = State.SEARCHING_ANNOTATION;\n        return token;\n      }\n      token = next();\n    } while (true);\n  }\n",
        "begin_line": 2235,
        "end_line": 2244,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0156
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processBlock#496",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.rhino.head.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 496,
        "end_line": 499,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0156
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSDocInfoBuilder.hasAnyTypeRelatedTags#962",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnyTypeRelatedTags()",
        "snippet": "  private boolean hasAnyTypeRelatedTags() {\n    return currentInfo.isConstructor() ||\n        currentInfo.isInterface() ||\n        currentInfo.getParameterCount() > 0 ||\n        currentInfo.hasReturnType() ||\n        currentInfo.hasBaseType() ||\n        currentInfo.getExtendedInterfacesCount() > 0 ||\n        currentInfo.getLendsName() != null ||\n        currentInfo.hasThisType() ||\n        hasAnySingletonTypeTags();\n  }\n",
        "begin_line": 962,
        "end_line": 972,
        "comment": "\n   * Whether the current doc info has other type tags, like\n   * {@code @param} or {@code @return} or {@code @type} or etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0155
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getLendsName#1183",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getLendsName()",
        "snippet": "  public String getLendsName() {\n    return (info == null) ? null : info.lendsName;\n  }\n",
        "begin_line": 1183,
        "end_line": 1185,
        "comment": "\n   * Gets the name we're lending to in a {@code @lends} annotation.\n   *\n   * In many reflection APIs, you pass an anonymous object to a function,\n   * and that function mixes the anonymous object into another object.\n   * The {@code @lends} annotation allows the type system to track\n   * those property assignments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0155
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getExtendedInterfacesCount#1297",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getExtendedInterfacesCount()",
        "snippet": "  public int getExtendedInterfacesCount() {\n    if (info == null || info.extendedInterfaces == null) {\n      return 0;\n    }\n    return info.extendedInterfaces.size();\n  }\n",
        "begin_line": 1297,
        "end_line": 1302,
        "comment": "\n   * Gets the number of extended interfaces specified\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0155
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.lookAheadForTypeAnnotation#2344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.lookAheadForTypeAnnotation()",
        "snippet": "  private boolean lookAheadForTypeAnnotation() {\n    boolean matchedLc = false;\n    int c;\n    while (true) {\n      c = stream.getChar();\n      if (c == ' ') {\n        continue;\n      } else if (c == '{') {\n        matchedLc = true;\n        break;\n      } else {\n        break;\n      }\n    }\n    stream.ungetChar(c);\n    return matchedLc;\n  }\n",
        "begin_line": 2344,
        "end_line": 2360,
        "comment": "\n   * Look ahead for a type annotation by advancing the character stream.\n   * Does not modify the token stream.\n   * This is kind of a hack, and is only necessary because we use the token\n   * stream to parse types, but need the underlying character stream to get\n   * JsDoc descriptions.\n   * @return Whether we found a type annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0155
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isStatement#1705",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }\n",
        "begin_line": 1705,
        "end_line": 1707,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0155
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processGeneric#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.rhino.head.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.rhino.head.Node n) {\n      Node node = newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.rhino.head.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 391,
        "end_line": 398,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0155
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsDocInfoParser.parseTypeExpressionAnnotation#1541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeExpressionAnnotation(JsDocToken token) {\n    if (token == JsDocToken.LC) {\n      skipEOLs();\n      Node typeNode = parseTopLevelTypeExpression(next());\n      if (typeNode != null) {\n        skipEOLs();\n        if (!match(JsDocToken.RC)) {\n          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n          next();\n        }\n      }\n\n      return typeNode;\n    } else {\n      return parseTypeExpression(token);\n    }\n  }\n",
        "begin_line": 1541,
        "end_line": 1558,
        "comment": "\n   * TypeExpressionAnnotation := TypeExpression |\n   *     '{' TopLevelTypeExpression '}'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0154
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.addChildBefore#641",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildBefore(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildBefore(Node newChild, Node node) {\n    Preconditions.checkArgument(node != null && node.parent == this,\n        \"The existing child node of the parent should not be null.\");\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n    if (first == node) {\n      newChild.parent = this;\n      newChild.next = first;\n      first = newChild;\n      return;\n    }\n    Node prev = getChildBefore(node);\n    addChildAfter(newChild, prev);\n  }\n",
        "begin_line": 641,
        "end_line": 656,
        "comment": "\n   * Add 'child' before 'node'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0154
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.lazyInitInfo#621",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitInfo()",
        "snippet": "  private void lazyInitInfo() {\n    if (info == null) {\n      info = new LazilyInitializedInfo();\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 625,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0154
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isJavaDispatch#578",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isJavaDispatch()",
        "snippet": "  public boolean isJavaDispatch() {\n    return getFlag(MASK_JAVADISPATCH);\n  }\n",
        "begin_line": 578,
        "end_line": 580,
        "comment": "\n   * Returns whether the {@code @javadispath} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0153
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1067",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token) {\n    return parseAndRecordTypeNode(token, token == JsDocToken.LC);\n  }\n",
        "begin_line": 1067,
        "end_line": 1069,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0153
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1079",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, boolean)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token, boolean matchingLC) {\n    return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        matchingLC, false);\n  }\n",
        "begin_line": 1079,
        "end_line": 1082,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @param matchingLC Whether the type expression starts with a \"{\".\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0153
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, int, int, boolean, boolean)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames) {\n    Node typeNode = null;\n\n    if (onlyParseSimpleNames) {\n      typeNode = parseTypeNameAnnotation(token);\n    } else {\n      typeNode = parseTypeExpressionAnnotation(token);\n    }\n\n    if (typeNode != null && !matchingLC) {\n      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n    }\n\n    if (typeNode != null) {\n      int endLineno = stream.getLineno();\n      int endCharno = stream.getCharno();\n\n      jsdocBuilder.markTypeNode(\n          typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);\n    }\n\n    return typeNode;\n  }\n",
        "begin_line": 1141,
        "end_line": 1166,
        "comment": "\n   * Looks for a parameter type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @param lineno The line of the type expression.\n   * @param startCharno The starting character position of the type expression.\n   * @param matchingLC Whether the type expression starts with a \"{\".\n   * @param onlyParseSimpleNames If true, only simple type names are parsed\n   *     (via a call to parseTypeNameAnnotation instead of\n   *     parseTypeExpressionAnnotation).\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0153
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setType#1017",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression, int)",
        "snippet": "  private void setType(JSTypeExpression type, int mask) {\n    if ((bitset & MASK_TYPEFIELD) != 0) {\n      throw new IllegalStateException(\n          \"API tried to add two incompatible type tags. \" +\n          \"This should have been blocked and emitted a warning.\");\n    }\n    this.bitset = (bitset & MASK_FLAGS) | mask;\n    this.type = type;\n  }\n",
        "begin_line": 1017,
        "end_line": 1025,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0153
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseTopLevelTypeExpression#1634",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTopLevelTypeExpression(JsDocToken token) {\n    Node typeExpr = parseTypeExpression(token);\n    if (typeExpr != null) {\n      // top-level unions are allowed\n      if (match(JsDocToken.PIPE)) {\n        next();\n        if (match(JsDocToken.PIPE)) {\n          // We support double pipes for backwards-compatibility.\n          next();\n        }\n        skipEOLs();\n        token = next();\n        return parseUnionTypeWithAlternate(token, typeExpr);\n      }\n    }\n    return typeExpr;\n  }\n",
        "begin_line": 1634,
        "end_line": 1650,
        "comment": "\n   * TopLevelTypeExpression := TypeExpression\n   *     | TypeUnionList\n   *\n   * We made this rule up, for the sake of backwards compatibility.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0153
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isQualifiedName#1587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isQualifiedName()",
        "snippet": "  public boolean isQualifiedName() {\n    switch (getType()) {\n      case Token.NAME:\n      case Token.THIS:\n        return true;\n      case Token.GETPROP:\n        return getFirstChild().isQualifiedName();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1587,
        "end_line": 1597,
        "comment": "\n   * Returns whether a node corresponds to a simple or a qualified name, such as\n   * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0152
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getParameterCount#994",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getParameterCount()",
        "snippet": "  public int getParameterCount() {\n    if (info == null || info.parameters == null) {\n      return 0;\n    }\n    return info.parameters.size();\n  }\n",
        "begin_line": 994,
        "end_line": 999,
        "comment": "\n   * Gets the number of parameters defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.isJSDocString#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSDocString(int)",
        "snippet": "  private boolean isJSDocString(int c) {\n    switch (c) {\n      case '@':\n      case '*':\n      case ',':\n      case '>':\n      case ':':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '?':\n      case '!':\n      case '|':\n      case '=':\n      case EOF_CHAR:\n      case '\\n':\n        return false;\n\n      default:\n        return !isJSSpace(c);\n    }\n  }\n",
        "begin_line": 279,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.parseTypeName#1763",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeName(JsDocToken token) {\n    if (token != JsDocToken.STRING) {\n      return reportGenericTypeSyntaxWarning();\n    }\n\n    String typeName = stream.getString();\n    int lineno = stream.getLineno();\n    int charno = stream.getCharno();\n    while (match(JsDocToken.EOL) &&\n        typeName.charAt(typeName.length() - 1) == '.') {\n      skipEOLs();\n      if (match(JsDocToken.STRING)) {\n        next();\n        typeName += stream.getString();\n      }\n    }\n\n    Node typeNameNode = newStringNode(typeName, lineno, charno);\n\n    if (match(JsDocToken.LT)) {\n      next();\n      skipEOLs();\n      Node memberType = parseTypeExpressionList(next());\n      if (memberType != null) {\n        typeNameNode.addChildToFront(memberType);\n\n        skipEOLs();\n        if (!match(JsDocToken.GT)) {\n          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n        }\n\n        next();\n      }\n    }\n    return typeNameNode;\n  }\n",
        "begin_line": 1763,
        "end_line": 1798,
        "comment": "\n   * TypeName := NameExpression | NameExpression TypeApplication\n   * TypeApplication := '.<' TypeExpressionList '>'\n   * TypeExpressionList := TypeExpression // a white lie\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.markTypeNode#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markTypeNode(com.google.javascript.rhino.Node, int, int, int, int, boolean)",
        "snippet": "  public void markTypeNode(Node typeNode, int lineno, int startCharno,\n      int endLineno, int endCharno, boolean hasLC) {\n    if (currentMarker != null) {\n      JSDocInfo.TypePosition position = new JSDocInfo.TypePosition();\n      position.setItem(typeNode);\n      position.setHasBrackets(hasLC);\n      position.setPositionInformation(lineno, startCharno,\n          endLineno, endCharno);\n      currentMarker.setType(position);\n    }\n  }\n",
        "begin_line": 181,
        "end_line": 191,
        "comment": "\n   * Adds a type declaration to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.newString#520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String, int, int)",
        "snippet": "  public static Node newString(String str, int lineno, int charno) {\n    return new StringNode(Token.STRING, str, lineno, charno);\n  }\n",
        "begin_line": 520,
        "end_line": 522,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.newStringNode#2196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newStringNode(java.lang.String, int, int)",
        "snippet": "  private Node newStringNode(String s, int lineno, int charno) {\n    Node n = Node.newString(s, lineno, charno).clonePropsFrom(templateNode);\n    n.setLength(s.length());\n    return n;\n  }\n",
        "begin_line": 2196,
        "end_line": 2200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.StringNode#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String, int, int)",
        "snippet": "    StringNode(int type, String str, int lineno, int charno) {\n      super(type, lineno, charno);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 204,
        "end_line": 210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeExpression.JSTypeExpression#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.JSTypeExpression(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  public JSTypeExpression(Node root, String sourceName) {\n    this.root = root;\n    this.sourceName = sourceName;\n  }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0149
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.createJSTypeExpression#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createJSTypeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private JSTypeExpression createJSTypeExpression(Node n) {\n    return n == null ? null :\n        new JSTypeExpression(n, getSourceName());\n  }\n",
        "begin_line": 1236,
        "end_line": 1239,
        "comment": "\n   * Constructs a new {@code JSTypeExpression}.\n   * @param n A node. May be null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0149
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.getSourceName#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getSourceName()",
        "snippet": "  private String getSourceName() {\n    return sourceFile == null ? null : sourceFile.getName();\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0149
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, int, int)",
        "snippet": "  public Node(int nodeType, int lineno, int charno) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 445,
        "end_line": 449,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0148
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setLength#1136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLength(int)",
        "snippet": "  public void setLength(int length) {\n    putIntProp(LENGTH, length);\n  }\n",
        "begin_line": 1136,
        "end_line": 1138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0148
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getBaseType#1139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getBaseType()",
        "snippet": "  public JSTypeExpression getBaseType() {\n    return (info == null) ? null : info.baseType;\n  }\n",
        "begin_line": 1139,
        "end_line": 1141,
        "comment": "\n   * Gets the base type specified by the {@code @extends} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0146
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasBaseType#1220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasBaseType()",
        "snippet": "  public boolean hasBaseType() {\n    return getBaseType() != null;\n  }\n",
        "begin_line": 1220,
        "end_line": 1222,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @extends}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0146
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getCurrentNode#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCurrentNode()",
        "snippet": "  public Node getCurrentNode() {\n    return curNode;\n  }\n",
        "begin_line": 445,
        "end_line": 447,
        "comment": " Returns the node currently being traversed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0145
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasReturnType#1065",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasReturnType()",
        "snippet": "  public boolean hasReturnType() {\n    return hasType(TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1065,
        "end_line": 1067,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @return}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0145
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.handleExpr#534",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleExpr(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleExpr(Node node) {\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(node, node);\n  }\n",
        "begin_line": 534,
        "end_line": 537,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0145
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasThisType#1127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasThisType()",
        "snippet": "  public boolean hasThisType() {\n    return thisType != null;\n  }\n",
        "begin_line": 1127,
        "end_line": 1129,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @this}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0145
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.analyze#201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze(int)",
        "snippet": "  final void analyze(int maxSteps) {\n    initialize();\n    int step = 0;\n    while (!orderedWorkSet.isEmpty()) {\n      if (step > maxSteps) {\n        throw new MaxIterationsExceededException(\n          \"Analysis did not terminate after \" + maxSteps + \" iterations\");\n      }\n      DiGraphNode<N, Branch> curNode = orderedWorkSet.iterator().next();\n      orderedWorkSet.remove(curNode);\n      joinInputs(curNode);\n      if (flow(curNode)) {\n        // If there is a change in the current node, we want to grab the list\n        // of nodes that this node affects.\n        List<DiGraphNode<N, Branch>> nextNodes = isForward() ?\n            cfg.getDirectedSuccNodes(curNode) :\n            cfg.getDirectedPredNodes(curNode);\n        for (DiGraphNode<N, Branch> nextNode : nextNodes) {\n          if (nextNode != cfg.getImplicitReturn()) {\n            orderedWorkSet.add(nextNode);\n          }\n        }\n      }\n      step++;\n    }\n    if (isForward()) {\n      joinInputs(getCfg().getImplicitReturn());\n    }\n  }\n",
        "begin_line": 201,
        "end_line": 229,
        "comment": "\n   * Finds a fixed-point solution. The function has the side effect of replacing\n   * the existing node annotations with the computed solutions using {@link\n   * com.google.javascript.jscomp.graph.GraphNode#setAnnotation(Annotation)}.\n   *\n   * <p>Initially, each node's input and output flow state contains the value\n   * given by {@link #createInitialEstimateLattice()} (with the exception of the\n   * entry node of the graph which takes on the {@link #createEntryLattice()}\n   * value. Each node will use the output state of its predecessor and compute a\n   * output state according to the instruction. At that time, any nodes that\n   * depends on the node's newly modified output value will need to recompute\n   * their output state again. Each step will perform a computation at one node\n   * until no extra computation will modify any existing output state anymore.\n   *\n   * @param maxSteps Max number of iterations before the method stops and throw\n   *        a {@link MaxIterationsExceededException}. This will prevent the\n   *        analysis from going into a infinite loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0144
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.compare#1031",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.Anonymous-9d8f8cb2-bc7f-46b4-a055-053a1a6a545d.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n",
        "begin_line": 1031,
        "end_line": 1035,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0144
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.recordConstructor#701",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConstructor()",
        "snippet": "  public boolean recordConstructor() {\n    if (!hasAnySingletonTypeTags() &&\n        !currentInfo.isConstructor() && !currentInfo.isInterface()) {\n      currentInfo.setConstructor(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 701,
        "end_line": 710,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isConstructor()} flag set to {@code true}.\n   *\n   * @return {@code true} if the constructor was recorded and {@code false}\n   *     if it was already defined or it was incompatible with the existing\n   *     flags\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0144
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setConstructor#348",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setConstructor(boolean)",
        "snippet": "  void setConstructor(boolean value) {\n    setFlag(value, MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 348,
        "end_line": 350,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0144
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.pushScope#572",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  private void pushScope(Scope s) {\n    Preconditions.checkState(curNode != null);\n    scopes.push(s);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 572,
        "end_line": 579,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0144
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isConstant#441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConstant()",
        "snippet": "  public boolean isConstant() {\n    return getFlag(MASK_CONSTANT) || isDefine();\n  }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "\n   * Returns whether the {@code @const} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0143
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDirectedPredNodes#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedPredNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedPredNodes(\n      DiGraphNode<N, E> dNode) {\n    if (dNode == null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : dNode.getInEdges()) {\n      nodeList.add(edge.getSource());\n    }\n    return nodeList;\n  }\n",
        "begin_line": 227,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0142
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.DataFlowAnalysis#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N>, com.google.javascript.jscomp.JoinOp<L>)",
        "snippet": "  DataFlowAnalysis(ControlFlowGraph<N> targetCfg, JoinOp<L> joinOp) {\n    this.cfg = targetCfg;\n    this.joinOp = joinOp;\n    Comparator<DiGraphNode<N, Branch>> nodeComparator =\n      cfg.getOptionalNodeComparator(isForward());\n    if (nodeComparator != null) {\n      this.orderedWorkSet = Sets.newTreeSet(nodeComparator);\n    } else {\n      this.orderedWorkSet = Sets.newLinkedHashSet();\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 130,
        "comment": "\n   * Constructs a data flow analysis.\n   *\n   * <p>Typical usage\n   * <pre>\n   * DataFlowAnalysis dfa = ...\n   * dfa.analyze();\n   * </pre>\n   *\n   * {@link #analyze()} annotates the result to the control flow graph by\n   * means of {@link DiGraphNode#setAnnotation} without any\n   * modification of the graph itself. Additional calls to {@link #analyze()}\n   * recomputes the analysis which can be useful if the control flow graph\n   * has been modified.\n   *\n   * @param targetCfg The control flow graph object that this object performs\n   *     on. Modification of the graph requires a separate call to\n   *     {@link #analyze()}.\n   *\n   * @see #analyze()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0142
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.getCfg#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getCfg()",
        "snippet": "  final ControlFlowGraph<N> getCfg() {\n    return cfg;\n  }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n   * Returns the control flow graph that this analysis was performed on.\n   * Modifications can be done on this graph, however, the only time that the\n   * annotations are correct is after {@link #analyze()} is called and before\n   * the graph has been modified.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0142
        },
        "num_failing_tests": 2
    },
    {
        "name": "DataFlowAnalysis.analyze#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze()",
        "snippet": "  final void analyze() {\n    analyze(MAX_STEPS);\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "\n   * Finds a fixed-point solution using at most {@link #MAX_STEPS}\n   * iterations.\n   *\n   * @see #analyze(int)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0142
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.isExtern#336",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.isExtern()",
        "snippet": "  public boolean isExtern() {\n    if (ast == null || ast.getSourceFile() == null) {\n      return false;\n    }\n    return ast.getSourceFile().isExtern();\n  }\n",
        "begin_line": 336,
        "end_line": 341,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0142
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.getPosition#1052",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    private int getPosition(DiGraphNode<Node, Branch> n) {\n      Integer priority = priorities.get(n);\n      Preconditions.checkNotNull(priority);\n      return priority;\n    }\n",
        "begin_line": 1052,
        "end_line": 1056,
        "comment": "\n     * Gets the pre-order traversal position of the given node.\n     * @return An arbitrary counter used for comparing positions.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0142
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getSource#478",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getSource()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getSource() {\n      return sourceNode;\n    }\n",
        "begin_line": 478,
        "end_line": 481,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.connectToPossibleExceptionHandler#830",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.connectToPossibleExceptionHandler(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void connectToPossibleExceptionHandler(Node cfgNode, Node target) {\n    if (mayThrowException(target) && !exceptionHandler.isEmpty()) {\n      Node lastJump = cfgNode;\n      for (Node handler : exceptionHandler) {\n        if (handler.isFunction()) {\n          return;\n        }\n        Preconditions.checkState(handler.isTry());\n        Node catchBlock = NodeUtil.getCatchBlock(handler);\n\n        if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n          } else {\n            finallyMap.put(lastJump, handler.getLastChild());\n          }\n        } else { // Has a catch.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, catchBlock);\n            return;\n          } else {\n            finallyMap.put(lastJump, catchBlock);\n          }\n        }\n        lastJump = handler;\n      }\n    }\n  }\n",
        "begin_line": 830,
        "end_line": 857,
        "comment": "\n   * Connects cfgNode to the proper CATCH block if target subtree might throw\n   * an exception. If there are FINALLY blocks reached before a CATCH, it will\n   * make the corresponding entry in finallyMap.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowGraph.isEnteringNewCfgNode#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean isEnteringNewCfgNode(Node n) {\n    Node parent = n.getParent();\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.TRY:\n        return true;\n      case Token.FUNCTION:\n        // A function node represents the start of a function where the name\n        // is bleed into the local scope and parameters has been assigned\n        // to the formal argument names. The node includes the name of the\n        // function and the LP list since we assume the whole set up process\n        // is atomic without change in control flow. The next change of\n        // control is going into the function's body represent by the second\n        // child.\n        return n != parent.getFirstChild().getNext();\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Theses control structure is represented by its node that holds the\n        // condition. Each of them is a branch node based on its condition.\n        return NodeUtil.getConditionExpression(parent) != n;\n\n      case Token.FOR:\n        // The FOR(;;) node differs from other control structure in that\n        // it has a initialization and a increment statement. Those\n        // two statements have its corresponding CFG nodes to represent them.\n        // The FOR node represents the condition check for each iteration.\n        // That way the following:\n        // for(var x = 0; x < 10; x++) { } has a graph that is isomorphic to\n        // var x = 0; while(x<10) {  x++; }\n        if (NodeUtil.isForIn(parent)) {\n          // TODO(user): Investigate how we should handle the case where\n          // we have a very complex expression inside the FOR-IN header.\n          return n != parent.getFirstChild();\n        } else {\n          return NodeUtil.getConditionExpression(parent) != n;\n        }\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.CATCH:\n      case Token.WITH:\n        return n != parent.getFirstChild();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 151,
        "end_line": 197,
        "comment": "\n   * @return True if n should be represented by a new CFG node in the control\n   * flow graph.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 2
    },
    {
        "name": "SourceFile.isExtern#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.isExtern()",
        "snippet": "  @Override\n  public boolean isExtern() {\n    return isExternFile;\n  }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": " Returns whether this is an extern. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getAnnotation#441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.getAnnotation()",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <A extends Annotation> A getAnnotation() {\n      return (A) annotation;\n    }\n",
        "begin_line": 441,
        "end_line": 445,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.setAnnotation#447",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
        "snippet": "    @Override\n    public void setAnnotation(Annotation data) {\n      annotation = data;\n    }\n",
        "begin_line": 447,
        "end_line": 450,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#674",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
        "snippet": "  static Node computeFollowNode(Node node, ControlFlowAnalysis cfa) {\n    return computeFollowNode(node, node, cfa);\n  }\n",
        "begin_line": 674,
        "end_line": 676,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.AnnotatedLinkedDirectedGraphNode(N)",
        "snippet": "    AnnotatedLinkedDirectedGraphNode(N nodeValue) {\n      super(nodeValue);\n    }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDirectedSuccNodes#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedSuccNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedSuccNodes(\n      DiGraphNode<N, E> dNode) {\n    if (dNode == null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : dNode.getOutEdges()) {\n      nodeList.add(edge.getDestination());\n    }\n    return nodeList;\n  }\n",
        "begin_line": 240,
        "end_line": 251,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "Graph.connectIfNotFound#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.connectIfNotFound(N, E, N)",
        "snippet": "  public final void connectIfNotFound(N n1, E edge, N n2) {\n    if (!isConnected(n1, edge, n2)) {\n      connect(n1, edge, n2);\n    }\n  }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "\n   * Connects two nodes in the graph with an edge if such edge does not already\n   * exists between the nodes.\n   *\n   * @param n1 First node.\n   * @param edge The edge.\n   * @param n2 Second node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiGraph.isConnected#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/DiGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.DiGraph",
        "signature": "com.google.javascript.jscomp.graph.DiGraph.isConnected(N, E, N)",
        "snippet": "  @Override\n  public boolean isConnected(N n1, E e, N n2) {\n    return isConnectedInDirection(n1, e, n2) ||\n        isConnectedInDirection(n2, e, n1);\n  }\n",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowGraph.ControlFlowGraph#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.ControlFlowGraph(N, boolean, boolean)",
        "snippet": "  ControlFlowGraph(\n      N entry, boolean nodeAnnotations, boolean edgeAnnotations) {\n    super(nodeAnnotations, edgeAnnotations);\n    implicitReturn = createDirectedGraphNode(null);\n    this.entry = createDirectedGraphNode(entry);\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "\n   * Constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowGraph.getImplicitReturn#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getImplicitReturn()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getImplicitReturn() {\n    return implicitReturn;\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n   * Gets the implicit return node.\n   *\n   * @return Return node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowGraph.getEntry#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getEntry()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getEntry() {\n    return entry;\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n   * Gets the entry point of the control flow graph. In general, this should be\n   * the beginning of the global script or beginning of a function.\n   *\n   * @return The entry point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.AstControlFlowGraph#1013",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.AstControlFlowGraph(com.google.javascript.rhino.Node, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer>, boolean)",
        "snippet": "    private AstControlFlowGraph(Node entry,\n        Map<DiGraphNode<Node, Branch>, Integer> priorities,\n        boolean edgeAnnotations) {\n      super(entry,\n          true /* node annotations */, edgeAnnotations);\n      this.priorities = priorities;\n    }\n",
        "begin_line": 1013,
        "end_line": 1019,
        "comment": "\n     * Constructor.\n     * @param entry The entry node.\n     * @param priorities The map from nodes to position in the AST (to be\n     *    filled by the {@link ControlFlowAnalysis#shouldTraverse}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.ControlFlowAnalysis#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean)",
        "snippet": "  ControlFlowAnalysis(AbstractCompiler compiler,\n      boolean shouldTraverseFunctions, boolean edgeAnnotations) {\n    this.compiler = compiler;\n    this.shouldTraverseFunctions = shouldTraverseFunctions;\n    this.edgeAnnotations = edgeAnnotations;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructor.\n   *\n   * @param compiler Compiler instance.\n   * @param shouldTraverseFunctions Whether functions should be traversed (true\n   *    by default).\n   * @param edgeAnnotations Whether to allow edge annotations. By default,\n   *    only node annotations are allowed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.getCfg#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getCfg()",
        "snippet": "  ControlFlowGraph<Node> getCfg() {\n    return cfg;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.process#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    this.root = root;\n    astPositionCounter = 0;\n    astPosition = Maps.newHashMap();\n    nodePriorities = Maps.newHashMap();\n    cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities,\n                                  edgeAnnotations);\n    NodeTraversal.traverse(compiler, root, this);\n    astPosition.put(null, ++astPositionCounter); // the implicit return is last.\n\n    // Now, generate the priority of nodes by doing a depth-first\n    // search on the CFG.\n    priorityCounter = 0;\n    DiGraphNode<Node, Branch> entry = cfg.getEntry();\n    prioritizeFromEntryNode(entry);\n\n    if (shouldTraverseFunctions) {\n      // If we're traversing inner functions, we need to rank the\n      // priority of them too.\n      for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n        Node value = candidate.getValue();\n        if (value != null && value.isFunction()) {\n          Preconditions.checkState(\n              !nodePriorities.containsKey(candidate) || candidate == entry);\n          prioritizeFromEntryNode(candidate);\n        }\n      }\n    }\n\n    // At this point, all reachable nodes have been given a priority, but\n    // unreachable nodes have not been given a priority. Put them last.\n    // Presumably, it doesn't really matter what priority they get, since\n    // this shouldn't happen in real code.\n    for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n      if (!nodePriorities.containsKey(candidate)) {\n        nodePriorities.put(candidate, ++priorityCounter);\n      }\n    }\n\n    // Again, the implicit return node is always last.\n    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n  }\n",
        "begin_line": 148,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.createEdge#818",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.createEdge(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch, com.google.javascript.rhino.Node)",
        "snippet": "  private void createEdge(Node fromNode, ControlFlowGraph.Branch branch,\n      Node toNode) {\n    cfg.createNode(fromNode);\n    cfg.createNode(toNode);\n    cfg.connectIfNotFound(fromNode, branch, toNode);\n  }\n",
        "begin_line": 818,
        "end_line": 823,
        "comment": "\n   * Connects the two nodes in the control flow graph.\n   *\n   * @param fromNode Source.\n   * @param toNode Destination.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.computeFallThrough#796",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(com.google.javascript.rhino.Node)",
        "snippet": "  static Node computeFallThrough(Node n) {\n    switch (n.getType()) {\n      case Token.DO:\n        return computeFallThrough(n.getFirstChild());\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          return n.getFirstChild().getNext();\n        }\n        return computeFallThrough(n.getFirstChild());\n      case Token.LABEL:\n        return computeFallThrough(n.getLastChild());\n      default:\n        return n;\n    }\n  }\n",
        "begin_line": 796,
        "end_line": 810,
        "comment": "\n   * Computes the destination node of n when we want to fallthrough into the\n   * subtree of n. We don't always create a CFG edge into n itself because of\n   * DOs and FORs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonTypeTags#979",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonTypeTags()",
        "snippet": "  private boolean hasAnySingletonTypeTags() {\n    return currentInfo.hasType() ||\n        currentInfo.hasTypedefType() ||\n        currentInfo.hasEnumParameterType();\n  }\n",
        "begin_line": 979,
        "end_line": 983,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isInterface#514",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isInterface()",
        "snippet": "  public boolean isInterface() {\n    return getFlag(MASK_INTERFACE);\n  }\n",
        "begin_line": 514,
        "end_line": 516,
        "comment": "\n   * Returns whether the {@code @interface} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0139
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isConstructor#449",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConstructor()",
        "snippet": "  public boolean isConstructor() {\n    return getFlag(MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "\n   * Returns whether the {@code @constructor} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0138
        },
        "num_failing_tests": 2
    },
    {
        "name": "WarningsGuard.disables#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean disables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n   * Returns whether all warnings in the given diagnostic group will be\n   * filtered out. Used to determine which passes to skip.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether all warnings of these types are disabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0138
        },
        "num_failing_tests": 2
    },
    {
        "name": "WarningsGuard.enables#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean enables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\n   * Returns whether any of the warnings in the given diagnostic group will be\n   * upgraded to a warning or error.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether any warnings of these types are enabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0138
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasEnumParameterType#1049",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasEnumParameterType()",
        "snippet": "  public boolean hasEnumParameterType() {\n    return hasType(TYPEFIELD_ENUM);\n  }\n",
        "begin_line": 1049,
        "end_line": 1051,
        "comment": "\n   * Returns whether an enum parameter type, specified using the {@code @enum}\n   * annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0138
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasTypedefType#1057",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasTypedefType()",
        "snippet": "  public boolean hasTypedefType() {\n    return hasType(TYPEFIELD_TYPEDEF);\n  }\n",
        "begin_line": 1057,
        "end_line": 1059,
        "comment": "\n   * Returns whether a typedef parameter type, specified using the\n   * {@code @typedef} annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0138
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasType#1041",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType()",
        "snippet": "  public boolean hasType() {\n    return hasType(TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 1041,
        "end_line": 1043,
        "comment": "\n   * Returns whether a type, specified using the {@code @type} annotation, is\n   * present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0138
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasType#1069",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType(int)",
        "snippet": "  private boolean hasType(int mask) {\n    return (bitset & MASK_TYPEFIELD) == mask;\n  }\n",
        "begin_line": 1069,
        "end_line": 1071,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0138
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isSyntheticBlock#1929",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isSyntheticBlock()",
        "snippet": "  public boolean isSyntheticBlock() {\n    return getBooleanProp(SYNTHETIC_BLOCK_PROP);\n  }\n",
        "begin_line": 1929,
        "end_line": 1931,
        "comment": "\n   * Returns whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0137
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setFlag#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setFlag(boolean, int)",
        "snippet": "  private void setFlag(boolean value, int mask) {\n    if (value) {\n      bitset |= mask;\n    } else {\n      bitset &= ~mask;\n    }\n  }\n",
        "begin_line": 421,
        "end_line": 427,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0136
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, com.google.common.base.Predicate<E>, N)",
        "snippet": "  private boolean isConnectedInDirection(N n1, Predicate<E> edgeMatcher, N n2) {\n    // Verify the nodes.\n    DiGraphNode<N, E> dNode1 = getNodeOrFail(n1);\n    DiGraphNode<N, E> dNode2 = getNodeOrFail(n2);\n    for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() == dNode2 &&\n          edgeMatcher.apply(outEdge.getValue())) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 203,
        "end_line": 215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0136
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isDefine#458",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isDefine()",
        "snippet": "  public boolean isDefine() {\n    return getFlag(MASK_DEFINE);\n  }\n",
        "begin_line": 458,
        "end_line": 460,
        "comment": "\n   * Returns whether the {@code @define} annotation is present on this\n   * {@link JSDocInfo}. If this annotation is present, then the\n   * {@link #getType()} method will retrieve the define type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0135
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#2227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL()",
        "snippet": "  private JsDocToken eatTokensUntilEOL() {\n    return eatTokensUntilEOL(next());\n  }\n",
        "begin_line": 2227,
        "end_line": 2229,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0135
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getParentNode#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getParentNode()",
        "snippet": "    public Node getParentNode() {\n      return nameNode == null ? null : nameNode.getParent();\n    }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n     * Gets the parent of the name node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0134
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.addMarker#647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.addMarker()",
        "snippet": "  Marker addMarker() {\n    if (!lazyInitDocumentation()) {\n      return null;\n    }\n\n    if (documentation.markers == null) {\n      documentation.markers = Lists.newArrayList();\n    }\n\n    Marker marker = new Marker();\n    documentation.markers.add(marker);\n    return marker;\n  }\n",
        "begin_line": 647,
        "end_line": 659,
        "comment": "\n   * Adds a marker to the documentation (if it exists) and\n   * returns the marker. Returns null otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0134
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getValue#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getValue()",
        "snippet": "    @Override\n    public E getValue() {\n      return value;\n    }\n",
        "begin_line": 498,
        "end_line": 501,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0134
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.lazyInitDocumentation#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitDocumentation()",
        "snippet": "  private boolean lazyInitDocumentation() {\n    if (!includeDocumentation) {\n      return false;\n    }\n\n    if (documentation == null) {\n      documentation = new LazilyInitializedDocumentation();\n    }\n\n    return true;\n  }\n",
        "begin_line": 631,
        "end_line": 641,
        "comment": "\n   * Lazily initializes the documentation information object, but only\n   * if the JSDocInfo was told to keep such information around.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0134
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroupWarningsGuard.disables#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup otherGroup) {\n    return !level.isOn() && group.isSubGroup(otherGroup);\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0134
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, E, N)",
        "snippet": "  @Override\n  public boolean isConnectedInDirection(N n1, E edgeValue, N n2) {\n    return isConnectedInDirection(n1, Predicates.equalTo(edgeValue), n2);\n  }\n",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getCharIgnoreLineEnd#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharIgnoreLineEnd()",
        "snippet": "  private int getCharIgnoreLineEnd() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 392,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.isAlpha#270",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isAlpha(int)",
        "snippet": "  private static boolean isAlpha(int c) {\n    // Use 'Z' < 'a'\n    if (c <= 'Z') {\n      return 'A' <= c;\n    } else {\n      return 'a' <= c && c <= 'z';\n    }\n  }\n",
        "begin_line": 270,
        "end_line": 277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.markAnnotation#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markAnnotation(java.lang.String, int, int)",
        "snippet": "  public void markAnnotation(String annotation, int lineno, int charno) {\n    JSDocInfo.Marker marker = currentInfo.addMarker();\n\n    if (marker != null) {\n      JSDocInfo.TrimmedStringPosition position =\n          new JSDocInfo.TrimmedStringPosition();\n      position.setItem(annotation);\n      position.setPositionInformation(lineno, charno, lineno,\n          charno + annotation.length());\n      marker.setAnnotation(position);\n      populated = true;\n    }\n\n    currentMarker = marker;\n  }\n",
        "begin_line": 148,
        "end_line": 162,
        "comment": "\n   * Adds a marker to the current JSDocInfo and populates the marker with the\n   * annotation information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getLineno#226",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getLineno()",
        "snippet": "  final int getLineno() { return lineno; }\n",
        "begin_line": 226,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getCharno#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharno()",
        "snippet": "  final int getCharno() {\n    return lineno == initLineno? initCharno + charno : charno;\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getString#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getString()",
        "snippet": "  final String getString() { return string; }\n",
        "begin_line": 232,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isExterns#570",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isExterns()",
        "snippet": "  public boolean isExterns() {\n    return getFlag(MASK_EXTERNS);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\n   * Returns whether the {@code @externs} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.isNoCompile#586",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isNoCompile()",
        "snippet": "  public boolean isNoCompile() {\n    return getFlag(MASK_NOCOMPILE);\n  }\n",
        "begin_line": 586,
        "end_line": 588,
        "comment": "\n   * Returns whether the {@code @nocompile} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.hasFileOverview#1389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasFileOverview()",
        "snippet": "  public boolean hasFileOverview() {\n    return getFlag(MASK_FILEOVERVIEW);\n  }\n",
        "begin_line": 1389,
        "end_line": 1391,
        "comment": "\n   * Returns whether this has a fileoverview flag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.recordOriginalCommentString#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordOriginalCommentString(java.lang.String)",
        "snippet": "  public void recordOriginalCommentString(String sourceComment) {\n    if (parseDocumentation) {\n      currentInfo.setOriginalCommentString(sourceComment);\n    }\n  }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "\n   * Sets the original JSDoc comment string. This is a no-op if the builder\n   * isn't configured to record documentation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.shouldParseDocumentation#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.shouldParseDocumentation()",
        "snippet": "  public boolean shouldParseDocumentation() {\n    return parseDocumentation;\n  }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.isPopulated#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulated()",
        "snippet": "  public boolean isPopulated() {\n    return populated;\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.isPopulatedWithFileOverview#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulatedWithFileOverview()",
        "snippet": "  public boolean isPopulatedWithFileOverview() {\n    return isPopulated() &&\n        (currentInfo.hasFileOverview() || currentInfo.isExterns() ||\n         currentInfo.isNoCompile());\n  }\n",
        "begin_line": 101,
        "end_line": 105,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object that has a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.JsDocTokenStream#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String, int, int)",
        "snippet": "  JsDocTokenStream(String sourceString, int lineno, int initCharno) {\n    Preconditions.checkNotNull(sourceString);\n    this.lineno = lineno;\n    this.sourceString = sourceString;\n    this.sourceEnd = sourceString.length();\n    this.sourceCursor = this.cursor = 0;\n    this.initLineno = lineno;\n    this.initCharno = initCharno;\n  }\n",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getStringFromBuffer#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getStringFromBuffer()",
        "snippet": "  private String getStringFromBuffer() {\n    tokenEnd = cursor;\n    return new String(stringBuffer, 0, stringBufferTop);\n  }\n",
        "begin_line": 236,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.addToString#241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.addToString(int)",
        "snippet": "  private void addToString(int c) {\n    int N = stringBufferTop;\n    if (N == stringBuffer.length) {\n        char[] tmp = new char[stringBuffer.length * 2];\n        System.arraycopy(stringBuffer, 0, tmp, 0, N);\n        stringBuffer = tmp;\n    }\n    stringBuffer[N] = (char)c;\n    stringBufferTop = N + 1;\n  }\n",
        "begin_line": 241,
        "end_line": 250,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.ungetChar#252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetChar(int)",
        "snippet": "  void ungetChar(int c) {\n    // can not unread past across line boundary\n    assert(!(ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\\n'));\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 252,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.isJSSpace#309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSSpace(int)",
        "snippet": "  static boolean isJSSpace(int c) {\n    if (c <= 127) {\n      return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;\n    } else {\n      return c == 0xA0\n          || Character.getType((char)c) == Character.SPACE_SEPARATOR;\n    }\n  }\n",
        "begin_line": 309,
        "end_line": 316,
        "comment": " As defined in ECMA.  jsscan.c uses C isspace() (which allows\n   * \\v, I think.)  note that code in getChar() implicitly accepts\n   * '\\r' == \\u000D as well.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocTokenStream.getOffset#446",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getOffset()",
        "snippet": "  final int getOffset() {\n    return sourceCursor - lineStart - ungetCursor - 1;\n  }\n",
        "begin_line": 446,
        "end_line": 448,
        "comment": "\n   * Returns the offset into the current line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.setFileLevelJsDocBuilder#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder)",
        "snippet": "  void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {\n    this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "\n   * Sets the JsDocBuilder for the file-level (root) node of this parse. The\n   * parser uses the builder to append any preserve annotations it encounters\n   * in JsDoc comments.\n   *\n   * @param fileLevelJsDocBuilder\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.setFileOverviewJSDocInfo#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo) {\n    this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n   * Sets the file overview JSDocInfo, in order to warn about multiple uses of\n   * the @fileoverview tag in a file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.JsDocInfoParser#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream, com.google.javascript.rhino.head.ast.Comment, com.google.javascript.rhino.Node, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  Node associatedNode,\n                  Config config,\n                  ErrorReporter errorReporter) {\n    this.stream = stream;\n    this.associatedNode = associatedNode;\n\n    // Sometimes this will be null in tests.\n    this.sourceFile = associatedNode == null\n        ? null : associatedNode.getStaticSourceFile();\n\n    this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n    if (commentNode != null) {\n      this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());\n    }\n    this.annotationNames = config.annotationNames;\n    this.suppressionNames = config.suppressionNames;\n\n    this.errorReporter = errorReporter;\n    this.templateNode = this.createTemplateNode();\n  }\n",
        "begin_line": 125,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.checkExtendedTypes#950",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.checkExtendedTypes(java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo>)",
        "snippet": "  private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes) {\n    for (ExtendedTypeInfo typeInfo : extendedTypes) {\n      // If interface, record the multiple extended interfaces\n      if (jsdocBuilder.isInterfaceRecorded()) {\n        if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {\n          parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      } else {\n        if (!jsdocBuilder.recordBaseType(typeInfo.type)) {\n          parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      }\n    }\n  }\n",
        "begin_line": 950,
        "end_line": 965,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.createTemplateNode#2204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = IR.script();\n    templateNode.setStaticSourceFile(\n      this.associatedNode != null ?\n      this.associatedNode.getStaticSourceFile() :\n      null);\n    return templateNode;\n  }\n",
        "begin_line": 2204,
        "end_line": 2212,
        "comment": " e.g., source-name, between all nodes.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.match#2265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.match(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private boolean match(JsDocToken token) {\n    unreadToken = next();\n    return unreadToken == token;\n  }\n",
        "begin_line": 2265,
        "end_line": 2268,
        "comment": "\n   * Tests whether the next symbol of the token stream matches the specific\n   * token.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.next#2283",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.next()",
        "snippet": "  private JsDocToken next() {\n    if (unreadToken == NO_UNREAD_TOKEN) {\n      return stream.getJsDocToken();\n    } else {\n      return current();\n    }\n  }\n",
        "begin_line": 2283,
        "end_line": 2289,
        "comment": "\n   * Gets the next token of the token stream or the buffered token if a matching\n   * was previously made.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.current#2294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.current()",
        "snippet": "  private JsDocToken current() {\n    JsDocToken t = unreadToken;\n    unreadToken = NO_UNREAD_TOKEN;\n    return t;\n  }\n",
        "begin_line": 2294,
        "end_line": 2298,
        "comment": "\n   * Gets the current token, invalidating it in the process.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.hasParsedFileOverviewDocInfo#2317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.hasParsedFileOverviewDocInfo()",
        "snippet": "  private boolean hasParsedFileOverviewDocInfo() {\n    return jsdocBuilder.isPopulatedWithFileOverview();\n  }\n",
        "begin_line": 2317,
        "end_line": 2319,
        "comment": "\n   * Determines whether the parser has been populated with docinfo with a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.retrieveAndResetParsedJSDocInfo#2325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.retrieveAndResetParsedJSDocInfo()",
        "snippet": "  JSDocInfo retrieveAndResetParsedJSDocInfo() {\n    return jsdocBuilder.build(associatedNode);\n  }\n",
        "begin_line": 2325,
        "end_line": 2327,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "JsDocInfoParser.getFileOverviewJSDocInfo#2332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getFileOverviewJSDocInfo()",
        "snippet": "  JSDocInfo getFileOverviewJSDocInfo() {\n    return fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 2332,
        "end_line": 2334,
        "comment": "\n   * Gets the fileoverview JSDocInfo, if any.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.handlePossibleFileOverviewJsDoc#255",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser)",
        "snippet": "  private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser) {\n    if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {\n      fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();\n      return true;\n    }\n    return false;\n  }\n",
        "begin_line": 255,
        "end_line": 262,
        "comment": "\n   * @return true if the jsDocParser represents a fileoverview.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.createJsDocInfoParser#347",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment, com.google.javascript.rhino.Node)",
        "snippet": "  private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n    String comment = node.getValue();\n    int lineno = node.getLineno();\n    int position = node.getAbsolutePosition();\n\n    // The JsDocInfoParser expects the comment without the initial '/**'.\n    int numOpeningChars = 3;\n    JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n  }\n",
        "begin_line": 347,
        "end_line": 367,
        "comment": "\n   * Creates a JsDocInfoParser and parses the JsDoc string.\n   *\n   * Used both for handling individual JSDoc comments and for handling\n   * file-level JSDoc comments (@fileoverview and @license).\n   *\n   * @param node The JsDoc Comment node to parse.\n   * @param irNode\n   * @return A JsDocInfoParser. Will contain either fileoverview JsDoc, or\n   *     normal JsDoc, or no JsDoc (if the method parses to the wrong level).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0133
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getInEdges#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getInEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getInEdges() {\n      return inEdgeList;\n    }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphEdge#471",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.LinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      this.value = edgeValue;\n      this.sourceNode = sourceNode;\n      this.destNode = destNode;\n    }\n",
        "begin_line": 471,
        "end_line": 476,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDestination#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getDestination()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getDestination() {\n      return destNode;\n    }\n",
        "begin_line": 483,
        "end_line": 486,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.connect#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.connect(N, E, N)",
        "snippet": "  @Override\n  public void connect(N srcValue, E edgeValue, N destValue) {\n    LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue);\n    LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue);\n    LinkedDirectedGraphEdge<N, E> edge =\n        useEdgeAnnotations ?\n        new AnnotatedLinkedDirectedGraphEdge<N, E>(src, edgeValue, dest) :\n        new LinkedDirectedGraphEdge<N, E>(src, edgeValue, dest);\n    src.getOutEdges().add(edge);\n    dest.getInEdges().add(edge);\n  }\n",
        "begin_line": 77,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getNode#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> getNode(N nodeValue) {\n    return getDirectedGraphNode(nodeValue);\n  }\n",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "Graph.getNodeOrFail#218",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.getNodeOrFail(N)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  <T extends GraphNode<N, E>> T getNodeOrFail(N val) {\n    T node = (T) getNode(val);\n    if (node == null) {\n      throw new IllegalArgumentException(val + \" does not exist in graph\");\n    }\n    return node;\n  }\n",
        "begin_line": 218,
        "end_line": 225,
        "comment": "\n   * Gets the node of the specified type, or throws an\n   * IllegalArgumentException.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.populateDefaults#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private static void populateDefaults(JSDocInfo info) {\n    if (info.getVisibility() == null) {\n      info.setVisibility(Visibility.INHERITED);\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 142,
        "comment": " Generate defaults when certain parameters are not specified. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.JSDocInfoBuilder#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.JSDocInfoBuilder(boolean)",
        "snippet": "  public JSDocInfoBuilder(boolean parseDocumentation) {\n    this.currentInfo = new JSDocInfo(parseDocumentation);\n    this.parseDocumentation = parseDocumentation;\n  }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfoBuilder.build#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.build(com.google.javascript.rhino.Node)",
        "snippet": "  public JSDocInfo build(Node associatedNode) {\n    if (populated) {\n      JSDocInfo built = currentInfo;\n      built.setAssociatedNode(associatedNode);\n      populateDefaults(built);\n      populated = false;\n      currentInfo = new JSDocInfo(this.parseDocumentation);\n      return built;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 124,
        "end_line": 135,
        "comment": "\n   * Builds a {@link JSDocInfo} object based on the populated information and\n   * returns it. Once this method is called, the builder can be reused to build\n   * another {@link JSDocInfo} object.\n   *\n   * @param associatedNode The source node containing the JSDoc.\n   * @return a {@link JSDocInfo} object populated with the values given to this\n   *     builder. If no value was populated, this method simply returns\n   *     {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setVisibility#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)",
        "snippet": "  public void setVisibility(Visibility visibility) {\n    this.visibility = visibility;\n  }\n",
        "begin_line": 617,
        "end_line": 619,
        "comment": " Visible for testing.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.setAssociatedNode#1411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setAssociatedNode(com.google.javascript.rhino.Node)",
        "snippet": "  public void setAssociatedNode(Node node) {\n    this.associatedNode = node;\n  }\n",
        "begin_line": 1411,
        "end_line": 1413,
        "comment": "\n   * Sets the node associated with this JSDoc.\n   * Notice that many nodes may have pointer to the same JSDocInfo\n   * object (because we propagate it across the type graph). But there\n   * is only one canonical \"owner\" node of the JSDocInfo, which corresponds\n   * to its original place in the syntax tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getVisibility#940",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getVisibility()",
        "snippet": "  public Visibility getVisibility() {\n    return visibility;\n  }\n",
        "begin_line": 940,
        "end_line": 942,
        "comment": "\n   * Gets the visibility specified by {@code @private}, {@code @protected} or\n   * {@code @public} annotation. If no visibility is specified, visibility\n   * is inherited from the base class.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.getFlag#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getFlag(int)",
        "snippet": "  private boolean getFlag(int mask) {\n    return (bitset & mask) != 0x00;\n  }\n",
        "begin_line": 612,
        "end_line": 614,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSDocInfo.JSDocInfo#333",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo(boolean)",
        "snippet": "  JSDocInfo(boolean includeDocumentation) {\n    this.includeDocumentation = includeDocumentation;\n  }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": "\n   * Creates a {@link JSDocInfo} object. This object should be created using\n   * a {@link JSDocInfoBuilder}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0131
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.setJSDocInfo#1877",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  public void setJSDocInfo(JSDocInfo info) {\n      putProp(JSDOC_INFO_PROP, info);\n  }\n",
        "begin_line": 1877,
        "end_line": 1879,
        "comment": "\n   * Sets the {@link JSDocInfo} attached to this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0131
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isTry#2372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isTry()",
        "snippet": "  public boolean isTry() {\n    return this.getType() == Token.TRY;\n  }\n",
        "begin_line": 2372,
        "end_line": 2374,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0131
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNodes#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNodes()",
        "snippet": "  @Override\n  public Iterable<DiGraphNode<N, E>> getDirectedGraphNodes() {\n    return Collections.<DiGraphNode<N, E>>unmodifiableCollection(\n        nodes.values());\n  }\n",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0131
        },
        "num_failing_tests": 2
    },
    {
        "name": "IR.script#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.script(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node script(Node ... stmts) {\n    // TODO(johnlenz): finish setting up the SCRIPT node\n    Node block = new Node(Token.SCRIPT);\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }\n",
        "begin_line": 115,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0131
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processParenthesizedExpression#860",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression)",
        "snippet": "    @Override\n    Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n      Node node = transform(exprNode.getExpression());\n      node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);\n      return node;\n    }\n",
        "begin_line": 860,
        "end_line": 865,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0131
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getVars#577",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVars()",
        "snippet": "  public Iterator<Var> getVars() {\n    return vars.values().iterator();\n  }\n",
        "begin_line": 577,
        "end_line": 579,
        "comment": "\n   * Return an iterator over all of the variables declared in this scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "Scope.getRootNode#446",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getRootNode()",
        "snippet": "  @Override\n  public Node getRootNode() {\n    return rootNode;\n  }\n",
        "begin_line": 446,
        "end_line": 449,
        "comment": "\n   * Gets the container node of the scope. This is typically the FUNCTION\n   * node or the global BLOCK/SCRIPT node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphNode#346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.LinkedDirectedGraphNode(N)",
        "snippet": "    LinkedDirectedGraphNode(N nodeValue) {\n      this.value = nodeValue;\n    }\n",
        "begin_line": 346,
        "end_line": 348,
        "comment": "\n     * Constructor\n     *\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getValue#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getValue()",
        "snippet": "    @Override\n    public N getValue() {\n      return value;\n    }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getOutEdges#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getOutEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getOutEdges() {\n      return outEdgeList;\n    }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNode#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> getDirectedGraphNode(N nodeValue) {\n    return nodes.get(nodeValue);\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.createDirectedGraphNode#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> createDirectedGraphNode(N nodeValue) {\n    LinkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);\n    if (node == null) {\n      node = useNodeAnnotations ?\n          new AnnotatedLinkedDirectedGraphNode<N, E>(nodeValue) :\n          new LinkedDirectedGraphNode<N, E>(nodeValue);\n      nodes.put(nodeValue, node);\n    }\n    return node;\n  }\n",
        "begin_line": 133,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.createNode#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> createNode(N value) {\n    return createDirectedGraphNode(value);\n  }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraph#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraph(boolean, boolean)",
        "snippet": "  protected LinkedDirectedGraph(\n      boolean useNodeAnnotations, boolean useEdgeAnnotations) {\n    this.useNodeAnnotations = useNodeAnnotations;\n    this.useEdgeAnnotations = useEdgeAnnotations;\n  }\n",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.013
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isEquivalentTo#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && this.str.equals(((StringNode) node).str));\n    }\n",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0128
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isHoistedFunctionDeclaration#1876",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isHoistedFunctionDeclaration(Node n) {\n    return isFunctionDeclaration(n)\n        && (n.getParent().isScript()\n            || n.getParent().getParent().isFunction());\n  }\n",
        "begin_line": 1876,
        "end_line": 1880,
        "comment": "\n   * Is this node a hoisted function declaration? A function declaration in the\n   * scope root is hoisted to the top of the scope.\n   * See {@link #isFunctionDeclaration}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0124
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseRoots#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverseRoots(\n      AbstractCompiler compiler, List<Node> roots, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverseRoots(roots);\n  }\n",
        "begin_line": 461,
        "end_line": 465,
        "comment": "\n   * Traverses a list of node trees.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0116
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseRoots#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "  public void traverseRoots(List<Node> roots) {\n    if (roots.isEmpty()) {\n      return;\n    }\n\n    try {\n      Node scopeRoot = roots.get(0).getParent();\n      Preconditions.checkState(scopeRoot != null);\n\n      inputId = NodeUtil.getInputId(scopeRoot);\n      sourceName = \"\";\n      curNode = scopeRoot;\n      pushScope(scopeRoot);\n\n      for (Node root : roots) {\n        Preconditions.checkState(root.getParent() == scopeRoot);\n        traverseBranch(root, scopeRoot);\n      }\n\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 288,
        "end_line": 311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0114
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getInput#432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
        "snippet": "  public CompilerInput getInput() {\n    return compiler.getInput(inputId);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Gets the current input source.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0113
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isFunctionDeclaration#1867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionDeclaration(Node n) {\n    return n.isFunction() && isStatement(n);\n  }\n",
        "begin_line": 1867,
        "end_line": 1869,
        "comment": "\n   * Is this node a function declaration? A function declaration is a function\n   * that has a name that is added to the current scope (i.e. a function that\n   * is not part of a expression; see {@link #isFunctionExpression}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0113
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isExprResult#2240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isExprResult()",
        "snippet": "  public boolean isExprResult() {\n    return this.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 2240,
        "end_line": 2242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0109
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.inGlobalScope#634",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inGlobalScope()",
        "snippet": "  boolean inGlobalScope() {\n    return getScopeDepth() <= 1;\n  }\n",
        "begin_line": 634,
        "end_line": 636,
        "comment": "\n   * Determines whether the traversal is currently in the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0108
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.getScopeDepth#638",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeDepth()",
        "snippet": "  int getScopeDepth() {\n    return scopes.size() + scopeRoots.size();\n  }\n",
        "begin_line": 638,
        "end_line": 640,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0108
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endFunction#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFunction(boolean)",
        "snippet": "  void endFunction(boolean statementContext) {\n    sawFunction = true;\n    if (statementContext) {\n      endLine();\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.breakAfterBlockFor#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.breakAfterBlockFor(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  boolean breakAfterBlockFor(Node n, boolean statementContext) {\n    return statementContext;\n  }\n",
        "begin_line": 298,
        "end_line": 300,
        "comment": "\n   * @return Whether the a line break can be added after the specified BLOCK.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0081
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendBlockStart#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockStart()",
        "snippet": "  void appendBlockStart() {\n    append(\"{\");\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0081
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendBlockEnd#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockEnd()",
        "snippet": "  void appendBlockEnd() {\n    append(\"}\");\n  }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0081
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.beginBlock#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.beginBlock()",
        "snippet": "  void beginBlock() {\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n    }\n    appendBlockStart();\n\n    endLine();\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.008
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endBlock#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endBlock(boolean)",
        "snippet": "  void endBlock(boolean shouldEndLine) {\n    appendBlockEnd();\n    if (shouldEndLine) {\n      endLine();\n    }\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.008
        },
        "num_failing_tests": 1
    }
]