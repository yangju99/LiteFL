[
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    externs = DEFAULT_EXTERNS;\n    filenames = Maps.newHashMap();\n    lastCompiler = null;\n    lastArg = null;\n    outReader = new ByteArrayOutputStream();\n    errReader = new ByteArrayOutputStream();\n    useStringComparison = false;\n    useModules = ModulePattern.NONE;\n    args.clear();\n    exitCodes = Lists.newArrayList();\n  }\n",
        "begin_line": 108,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 18)",
            "(line 111,col 5)-(line 111,col 30)",
            "(line 112,col 5)-(line 112,col 34)",
            "(line 113,col 5)-(line 113,col 24)",
            "(line 114,col 5)-(line 114,col 19)",
            "(line 115,col 5)-(line 115,col 44)",
            "(line 116,col 5)-(line 116,col 44)",
            "(line 117,col 5)-(line 117,col 32)",
            "(line 118,col 5)-(line 118,col 36)",
            "(line 119,col 5)-(line 119,col 17)",
            "(line 120,col 5)-(line 120,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    super.tearDown();\n  }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering1()",
        "snippet": "  public void testWarningGuardOrdering1() {\n    args.add(\"--jscomp_error=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 128,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 129,col 5)-(line 129,col 42)",
            "(line 130,col 5)-(line 130,col 40)",
            "(line 131,col 5)-(line 131,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering2()",
        "snippet": "  public void testWarningGuardOrdering2() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 134,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 135,col 40)",
            "(line 136,col 5)-(line 136,col 42)",
            "(line 137,col 5)-(line 137,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering3()",
        "snippet": "  public void testWarningGuardOrdering3() {\n    args.add(\"--jscomp_warning=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 44)",
            "(line 142,col 5)-(line 142,col 40)",
            "(line 143,col 5)-(line 143,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering4()",
        "snippet": "  public void testWarningGuardOrdering4() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_warning=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 146,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 147,col 5)-(line 147,col 40)",
            "(line 148,col 5)-(line 148,col 44)",
            "(line 149,col 5)-(line 149,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOffByDefault()",
        "snippet": "  public void testCheckGlobalThisOffByDefault() {\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithAdvancedMode()",
        "snippet": "  public void testCheckGlobalThisOnWithAdvancedMode() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 59)",
            "(line 158,col 5)-(line 158,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithErrorFlag()",
        "snippet": "  public void testCheckGlobalThisOnWithErrorFlag() {\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 42)",
            "(line 163,col 5)-(line 163,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 166,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 40)",
            "(line 168,col 5)-(line 168,col 40)",
            "(line 169,col 5)-(line 169,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {\n    test(\"function f(x) { return x; } f();\",\n         \"function f(a) { return a; } f();\");\n  }\n",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 173,col 5)-(line 174,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testReflectedMethods()",
        "snippet": "  public void testReflectedMethods() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype.handle = function(x, y) { alert(y); };\" +\n        \"var x = goog.reflect.object(Foo, {handle: 1});\" +\n        \"for (var i in x) { x[i].call(x); }\" +\n        \"window['Foo'] = Foo;\",\n        \"function a() {}\" +\n        \"a.prototype.a = function(e, d) { alert(d); };\" +\n        \"var b = goog.c.b(a, {a: 1}),c;\" +\n        \"for (c in b) { b[c].call(b); }\" +\n        \"window.Foo = a;\");\n  }\n",
        "begin_line": 177,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 59)",
            "(line 179,col 5)-(line 190,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypedAdvanced()",
        "snippet": "  public void testTypedAdvanced() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--use_types_for_optimization\");\n    test(\n        \"/** @constructor */\\n\" +\n        \"function Foo() {}\\n\" +\n        \"Foo.prototype.handle1 = function(x, y) { alert(y); };\\n\" +\n        \"/** @constructor */\\n\" +\n        \"function Bar() {}\\n\" +\n        \"Bar.prototype.handle1 = function(x, y) {};\\n\" +\n        \"new Foo().handle1(1, 2);\\n\" +\n        \"new Bar().handle1(1, 2);\\n\",\n        \"alert(2)\");\n  }\n",
        "begin_line": 193,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 59)",
            "(line 195,col 5)-(line 195,col 45)",
            "(line 196,col 5)-(line 205,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 208,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 40)",
            "(line 210,col 5)-(line 210,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOffByDefault()",
        "snippet": "  public void testTypeParsingOffByDefault() {\n    testSame(\"/** @return {number */ function f(a) { return a; }\");\n  }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 214,col 5)-(line 214,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOnWithVerbose()",
        "snippet": "  public void testTypeParsingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n    test(\"/** @return {n} */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 217,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 40)",
            "(line 219,col 5)-(line 220,col 46)",
            "(line 221,col 5)-(line 222,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=checkTypes\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 225,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 226,col 5)-(line 226,col 40)",
            "(line 227,col 5)-(line 227,col 40)",
            "(line 228,col 5)-(line 228,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    args.add(\"--warning_level=DEFAULT\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    args.add(\"--jscomp_warning=checkTypes\");\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 231,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 232,col 5)-(line 232,col 40)",
            "(line 233,col 5)-(line 233,col 62)",
            "(line 235,col 5)-(line 235,col 44)",
            "(line 236,col 5)-(line 237,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 240,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 40)",
            "(line 242,col 5)-(line 242,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 245,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 246,col 5)-(line 246,col 40)",
            "(line 247,col 5)-(line 247,col 49)",
            "(line 248,col 5)-(line 248,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=undefinedVars\");\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 251,
        "end_line": 255,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 40)",
            "(line 253,col 5)-(line 253,col 43)",
            "(line 254,col 5)-(line 254,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForQuiet()",
        "snippet": "  public void testCheckSymbolsOverrideForQuiet() {\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--jscomp_error=undefinedVars\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 257,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 258,col 5)-(line 258,col 38)",
            "(line 259,col 5)-(line 259,col 45)",
            "(line 260,col 5)-(line 260,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties1()",
        "snippet": "  public void testCheckUndefinedProperties1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_error=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 263,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 264,col 40)",
            "(line 265,col 5)-(line 265,col 49)",
            "(line 266,col 5)-(line 266,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties2()",
        "snippet": "  public void testCheckUndefinedProperties2() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 269,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 40)",
            "(line 271,col 5)-(line 271,col 47)",
            "(line 272,col 5)-(line 272,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties3()",
        "snippet": "  public void testCheckUndefinedProperties3() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() {var x = {}; var y = x.bar;}\",\n        TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 275,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 276,col 40)",
            "(line 277,col 5)-(line 278,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function f(a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 68)",
            "(line 283,col 5)-(line 283,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    args.add(\"--define=FOO\");\n    args.add(\"--define=\\\"BAR=5\\\"\");\n    args.add(\"--D\"); args.add(\"CCC\");\n    args.add(\"-D\"); args.add(\"DDD\");\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\" +\n         \"/** @define {boolean} */ var CCC = false;\" +\n         \"/** @define {boolean} */ var DDD = false;\",\n         \"var FOO = !0, BAR = 5, CCC = !0, DDD = !0;\");\n  }\n",
        "begin_line": 286,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 29)",
            "(line 288,col 5)-(line 288,col 35)",
            "(line 289,col 5)-(line 289,col 20)",
            "(line 289,col 22)-(line 289,col 37)",
            "(line 290,col 5)-(line 290,col 19)",
            "(line 290,col 21)-(line 290,col 36)",
            "(line 291,col 5)-(line 295,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag2()",
        "snippet": "  public void testDefineFlag2() {\n    args.add(\"--define=FOO='x\\\"'\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x\\\\\\\"\\\";\");\n  }\n",
        "begin_line": 298,
        "end_line": 302,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 299,col 35)",
            "(line 300,col 5)-(line 301,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3()",
        "snippet": "  public void testDefineFlag3() {\n    args.add(\"--define=FOO=\\\"x'\\\"\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x'\\\";\");\n  }\n",
        "begin_line": 304,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 36)",
            "(line 306,col 5)-(line 307,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 310,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 311,col 30)",
            "(line 312,col 5)-(line 312,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 315,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 316,col 60)",
            "(line 317,col 5)-(line 318,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"/** @const \\n * @const */ var x;\",\n         RhinoErrorReporter.PARSE_ERROR);\n    args.add(\"--warning_level=QUIET\");\n    testSame(\"/** @const \\n * @const */ var x;\");\n  }\n",
        "begin_line": 321,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 40)",
            "(line 323,col 5)-(line 324,col 41)",
            "(line 325,col 5)-(line 325,col 38)",
            "(line 326,col 5)-(line 326,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessClosurePrimitives()",
        "snippet": "  public void testProcessClosurePrimitives() {\n    test(\"var goog = {}; goog.provide('goog.dom');\",\n         \"var goog = {dom:{}};\");\n    args.add(\"--process_closure_primitives=false\");\n    testSame(\"var goog = {}; goog.provide('goog.dom');\");\n  }\n",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 330,col 5)-(line 331,col 33)",
            "(line 332,col 5)-(line 332,col 51)",
            "(line 333,col 5)-(line 333,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGetMsgWiring()",
        "snippet": "  public void testGetMsgWiring() throws Exception {\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\",\n         \"var goog={getMsg:function(a){return a}}, \" +\n         \"MSG_FOO=goog.getMsg('foo');\");\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\" +\n         \"window['foo'] = MSG_FOO;\",\n         \"window.foo = 'foo';\");\n  }\n",
        "begin_line": 336,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 340,col 40)",
            "(line 341,col 5)-(line 341,col 59)",
            "(line 342,col 5)-(line 345,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCssNameWiring()",
        "snippet": "  public void testCssNameWiring() throws Exception {\n    test(\"var goog = {}; goog.getCssName = function() {};\" +\n         \"goog.setCssNameMapping = function() {};\" +\n         \"goog.setCssNameMapping({'goog': 'a', 'button': 'b'});\" +\n         \"var a = goog.getCssName('goog-button');\" +\n         \"var b = goog.getCssName('css-button');\" +\n         \"var c = goog.getCssName('goog-menu');\" +\n         \"var d = goog.getCssName('css-menu');\",\n         \"var goog = { getCssName: function() {},\" +\n         \"             setCssNameMapping: function() {} },\" +\n         \"    a = 'a-b',\" +\n         \"    b = 'css-b',\" +\n         \"    c = 'a-menu',\" +\n         \"    d = 'css-menu';\");\n  }\n",
        "begin_line": 348,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 349,col 5)-(line 361,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70a()",
        "snippet": "  public void testIssue70a() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 368,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 369,col 5)-(line 369,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70b()",
        "snippet": "  public void testIssue70b() {\n    test(\"function foo([]) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 373,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    useStringComparison = true;\n    test(\"eval('1'); var x = eval; x('2');\",\n         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n  }\n",
        "begin_line": 376,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 377,col 59)",
            "(line 378,col 5)-(line 378,col 31)",
            "(line 379,col 5)-(line 380,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--jscomp_off=es5Strict\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 383,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 384,col 5)-(line 384,col 57)",
            "(line 385,col 5)-(line 385,col 39)",
            "(line 386,col 5)-(line 386,col 40)",
            "(line 387,col 5)-(line 394,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue297()",
        "snippet": "  public void testIssue297() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function f(p) {\" +\n         \" var x;\" +\n         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n         \"}\",\n         \"function f(b) {\" +\n         \" var a;\" +\n         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && 0<a);\" +\n         \"}\");\n  }\n",
        "begin_line": 397,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 398,col 57)",
            "(line 399,col 5)-(line 406,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"element.offsetWidth;\",\n         \"element.offsetWidth\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 409,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 410,col 5)-(line 410,col 59)",
            "(line 411,col 5)-(line 412,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue504()",
        "snippet": "  public void testIssue504() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"void function() { alert('hi'); }();\",\n         \"alert('hi');void 0\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 415,
        "end_line": 419,
        "comment": "",
        "child_ranges": [
            "(line 416,col 5)-(line 416,col 59)",
            "(line 417,col 5)-(line 418,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601()",
        "snippet": "  public void testIssue601() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"function f(){return'\\\\v'=='v'}window['f']=f\");\n  }\n",
        "begin_line": 421,
        "end_line": 425,
        "comment": "",
        "child_ranges": [
            "(line 422,col 5)-(line 422,col 52)",
            "(line 423,col 5)-(line 424,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601b()",
        "snippet": "  public void testIssue601b() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\v'=='v'}\");\n  }\n",
        "begin_line": 427,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 428,col 5)-(line 428,col 59)",
            "(line 429,col 5)-(line 430,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601c()",
        "snippet": "  public void testIssue601c() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\u000B' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\u000B'=='v'}\");\n  }\n",
        "begin_line": 433,
        "end_line": 437,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 59)",
            "(line 435,col 5)-(line 436,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=false\");\n    test(\"function foo(a) {}\",\n         \"function foo() {}\");\n  }\n",
        "begin_line": 439,
        "end_line": 444,
        "comment": "",
        "child_ranges": [
            "(line 440,col 5)-(line 440,col 57)",
            "(line 441,col 5)-(line 441,col 30)",
            "(line 442,col 5)-(line 443,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=true\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 446,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 447,col 5)-(line 447,col 57)",
            "(line 448,col 5)-(line 448,col 29)",
            "(line 449,col 5)-(line 450,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=false\");\n    test(\"function Foo() {}\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"throw (new function() {}).a;\");\n  }\n",
        "begin_line": 453,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 454,col 5)-(line 454,col 59)",
            "(line 455,col 5)-(line 455,col 38)",
            "(line 456,col 5)-(line 456,col 30)",
            "(line 457,col 5)-(line 460,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=true\");\n    test(\"function Foo() {}\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"throw (new function Foo() {}).$x$;\");\n  }\n",
        "begin_line": 463,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 59)",
            "(line 465,col 5)-(line 465,col 38)",
            "(line 466,col 5)-(line 466,col 29)",
            "(line 467,col 5)-(line 470,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag1()",
        "snippet": "  public void testBooleanFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 473,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 474,col 5)-(line 474,col 57)",
            "(line 475,col 5)-(line 475,col 24)",
            "(line 476,col 5)-(line 477,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag2()",
        "snippet": "  public void testBooleanFlag2() {\n    args.add(\"--debug\");\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 24)",
            "(line 482,col 5)-(line 482,col 57)",
            "(line 483,col 5)-(line 484,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHelpFlag()",
        "snippet": "  public void testHelpFlag() {\n    args.add(\"--help\");\n    assertFalse(\n        createCommandLineRunner(\n            new String[] {\"function f() {}\"}).shouldRunCompiler());\n  }\n",
        "begin_line": 487,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 488,col 5)-(line 488,col 23)",
            "(line 489,col 5)-(line 491,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting1()",
        "snippet": "  public void testExternsLifting1() throws Exception{\n    String code = \"/** @externs */ function f() {}\";\n    test(new String[] {code},\n         new String[] {});\n\n    assertEquals(2, lastCompiler.getExternsForTesting().size());\n\n    CompilerInput extern = lastCompiler.getExternsForTesting().get(1);\n    assertNull(extern.getModule());\n    assertTrue(extern.isExtern());\n    assertEquals(code, extern.getCode());\n\n    assertEquals(1, lastCompiler.getInputsForTesting().size());\n\n    CompilerInput input = lastCompiler.getInputsForTesting().get(0);\n    assertNotNull(input.getModule());\n    assertFalse(input.isExtern());\n    assertEquals(\"\", input.getCode());\n  }\n",
        "begin_line": 494,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 495,col 5)-(line 495,col 52)",
            "(line 496,col 5)-(line 497,col 26)",
            "(line 499,col 5)-(line 499,col 64)",
            "(line 501,col 5)-(line 501,col 70)",
            "(line 502,col 5)-(line 502,col 35)",
            "(line 503,col 5)-(line 503,col 34)",
            "(line 504,col 5)-(line 504,col 41)",
            "(line 506,col 5)-(line 506,col 63)",
            "(line 508,col 5)-(line 508,col 68)",
            "(line 509,col 5)-(line 509,col 37)",
            "(line 510,col 5)-(line 510,col 34)",
            "(line 511,col 5)-(line 511,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting2()",
        "snippet": "  public void testExternsLifting2() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\"/** @externs */ function f() {}\", \"f(3);\"},\n         new String[] {\"f(3);\"},\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 514,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 515,col 40)",
            "(line 516,col 5)-(line 518,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOff()",
        "snippet": "  public void testSourceSortingOff() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    testSame(\n        new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n        });\n  }\n",
        "begin_line": 521,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 522,col 5)-(line 522,col 52)",
            "(line 523,col 5)-(line 527,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn()",
        "snippet": "  public void testSourceSortingOn() {\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 530,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 531,col 5)-(line 538,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn2()",
        "snippet": "  public void testSourceSortingOn2() {\n    test(new String[] {\n          \"goog.provide('a');\",\n          \"goog.require('a');\\n\" +\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n           \"var a={};\",\n           \"var COMPILED=!1\"\n         });\n  }\n",
        "begin_line": 541,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 550,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn3()",
        "snippet": "  public void testSourceSortingOn3() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.addDependency('sym', [], []);\\nvar x = 3;\",\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n          \"var COMPILED = !1;\",\n          \"var x = 3;\"\n         });\n  }\n",
        "begin_line": 553,
        "end_line": 563,
        "comment": "",
        "child_ranges": [
            "(line 554,col 5)-(line 554,col 51)",
            "(line 555,col 5)-(line 562,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps1()",
        "snippet": "  public void testSourceSortingCircularDeps1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 565,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 566,col 5)-(line 566,col 51)",
            "(line 567,col 5)-(line 572,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps2()",
        "snippet": "  public void testSourceSortingCircularDeps2() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('roses.lime.juice');\",\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\",\n          \"goog.provide('gimlet');\" +\n          \"     goog.require('gin'); goog.require('roses.lime.juice');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 575,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 51)",
            "(line 577,col 5)-(line 585,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn1()",
        "snippet": "  public void testSourcePruningOn1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 588,
        "end_line": 599,
        "comment": "",
        "child_ranges": [
            "(line 589,col 5)-(line 589,col 51)",
            "(line 590,col 5)-(line 598,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn2()",
        "snippet": "  public void testSourcePruningOn2() {\n    args.add(\"--closure_entry_point=guinness\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var guinness = {};\"\n         });\n  }\n",
        "begin_line": 601,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 602,col 5)-(line 602,col 47)",
            "(line 603,col 5)-(line 611,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn3()",
        "snippet": "  public void testSourcePruningOn3() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 614,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 615,col 5)-(line 615,col 45)",
            "(line 616,col 5)-(line 623,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn4()",
        "snippet": "  public void testSourcePruningOn4() {\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 626,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 627,col 5)-(line 627,col 45)",
            "(line 628,col 5)-(line 628,col 43)",
            "(line 629,col 5)-(line 637,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn5()",
        "snippet": "  public void testSourcePruningOn5() {\n    args.add(\"--closure_entry_point=shiraz\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         Compiler.MISSING_ENTRY_ERROR);\n  }\n",
        "begin_line": 640,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 641,col 5)-(line 641,col 45)",
            "(line 642,col 5)-(line 647,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn6()",
        "snippet": "  public void testSourcePruningOn6() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 650,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 651,col 5)-(line 651,col 45)",
            "(line 652,col 5)-(line 661,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn7()",
        "snippet": "  public void testSourcePruningOn7() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n          \"var COMPILED = !1;\",\n         });\n  }\n",
        "begin_line": 664,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 665,col 51)",
            "(line 666,col 5)-(line 671,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn8()",
        "snippet": "  public void testSourcePruningOn8() {\n    args.add(\"--only_closure_dependencies\");\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"/** @externs */\\n\" +\n          \"var externVar;\",\n          \"goog.provide('scotch'); var x = externVar;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = externVar;\",\n         });\n  }\n",
        "begin_line": 674,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 675,col 5)-(line 675,col 44)",
            "(line 676,col 5)-(line 676,col 45)",
            "(line 677,col 5)-(line 677,col 40)",
            "(line 678,col 5)-(line 685,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testNoCompile()",
        "snippet": "  public void testNoCompile() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"/** @nocompile */\\n\" +\n          \"goog.provide('x');\\n\" +\n          \"var dupeVar;\",\n          \"var dupeVar;\"\n         },\n         new String[] {\n           \"var dupeVar;\"\n         });\n  }\n",
        "begin_line": 688,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 689,col 5)-(line 689,col 40)",
            "(line 690,col 5)-(line 698,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDependencySortingWhitespaceMode()",
        "snippet": "  public void testDependencySortingWhitespaceMode() {\n    args.add(\"--manage_closure_dependencies\");\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.provide('hops');\",\n         },\n         new String[] {\n          \"goog.provide('hops');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.require('beer');\"\n         });\n  }\n",
        "begin_line": 701,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 702,col 46)",
            "(line 703,col 5)-(line 703,col 52)",
            "(line 704,col 5)-(line 713,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testForwardDeclareDroppedTypes()",
        "snippet": "  public void testForwardDeclareDroppedTypes() {\n    args.add(\"--manage_closure_dependencies=true\");\n\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\",\n          \"goog.provide('Scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         });\n\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         },\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 716,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 717,col 5)-(line 717,col 51)",
            "(line 719,col 5)-(line 719,col 40)",
            "(line 720,col 5)-(line 728,col 12)",
            "(line 730,col 5)-(line 738,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesEmptyEntryPoints()",
        "snippet": "  public void testOnlyClosureDependenciesEmptyEntryPoints() throws Exception {\n    // Prevents this from trying to load externs.zip\n    args.add(\"--use_only_custom_externs=true\");\n\n    args.add(\"--only_closure_dependencies=true\");\n    try {\n      CommandLineRunner runner = createCommandLineRunner(new String[0]);\n      runner.doRun();\n      fail(\"Expected FlagUsageException\");\n    } catch (FlagUsageException e) {\n      assertTrue(e.getMessage(),\n          e.getMessage().contains(\"only_closure_dependencies\"));\n    }\n  }\n",
        "begin_line": 741,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 743,col 5)-(line 743,col 47)",
            "(line 745,col 5)-(line 745,col 49)",
            "(line 746,col 5)-(line 753,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesOneEntryPoint()",
        "snippet": "  public void testOnlyClosureDependenciesOneEntryPoint() throws Exception {\n    args.add(\"--only_closure_dependencies=true\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.require('beer'); var beerRequired = 1;\",\n          \"goog.provide('beer');\\ngoog.require('hops');\\nvar beerProvided = 1;\",\n          \"goog.provide('hops'); var hopsProvided = 1;\",\n          \"goog.provide('scotch'); var scotchProvided = 1;\",\n          \"goog.require('scotch');\\nvar includeFileWithoutProvides = 1;\",\n          \"/** This is base.js */\\nvar COMPILED = false;\",\n         },\n         new String[] {\n           \"var COMPILED = !1;\",\n           \"var hops = {}, hopsProvided = 1;\",\n           \"var beer = {}, beerProvided = 1;\"\n         });\n  }\n",
        "begin_line": 756,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 757,col 5)-(line 757,col 49)",
            "(line 758,col 5)-(line 758,col 43)",
            "(line 759,col 5)-(line 771,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion1()",
        "snippet": "  public void testSourceMapExpansion1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--create_source_map=%outname%.map\");\n    testSame(\"var x = 3;\");\n    assertEquals(\"/path/to/out.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 774,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 775,col 5)-(line 775,col 33)",
            "(line 776,col 5)-(line 776,col 32)",
            "(line 777,col 5)-(line 777,col 50)",
            "(line 778,col 5)-(line 778,col 27)",
            "(line 779,col 5)-(line 781,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion2()",
        "snippet": "  public void testSourceMapExpansion2() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 784,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 785,col 5)-(line 785,col 37)",
            "(line 786,col 5)-(line 786,col 50)",
            "(line 787,col 5)-(line 787,col 48)",
            "(line 788,col 5)-(line 788,col 56)",
            "(line 789,col 5)-(line 791,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion3()",
        "snippet": "  public void testSourceMapExpansion3() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo_\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo_m0.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(),\n            lastCompiler.getModuleGraph().getRootModule()));\n  }\n",
        "begin_line": 794,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 795,col 5)-(line 795,col 37)",
            "(line 796,col 5)-(line 796,col 50)",
            "(line 797,col 5)-(line 797,col 49)",
            "(line 798,col 5)-(line 798,col 56)",
            "(line 799,col 5)-(line 802,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat1()",
        "snippet": "  public void testSourceMapFormat1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.DEFAULT,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 805,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 806,col 5)-(line 806,col 33)",
            "(line 807,col 5)-(line 807,col 32)",
            "(line 808,col 5)-(line 808,col 27)",
            "(line 809,col 5)-(line 810,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat2()",
        "snippet": "  public void testSourceMapFormat2() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--source_map_format=V3\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.V3,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 813,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 814,col 5)-(line 814,col 33)",
            "(line 815,col 5)-(line 815,col 32)",
            "(line 816,col 5)-(line 816,col 39)",
            "(line 817,col 5)-(line 817,col 27)",
            "(line 818,col 5)-(line 819,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testModuleWrapperBaseNameExpansion()",
        "snippet": "  public void testModuleWrapperBaseNameExpansion() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--module_wrapper=m0:%s // %basename%\");\n    testSame(new String[] {\n      \"var x = 3;\",\n      \"var y = 4;\"\n    });\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.writeModuleOutput(\n        builder,\n        lastCompiler.getModuleGraph().getRootModule());\n    assertEquals(\"var x=3; // m0.js\\n\", builder.toString());\n  }\n",
        "begin_line": 822,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 823,col 5)-(line 823,col 37)",
            "(line 824,col 5)-(line 824,col 53)",
            "(line 825,col 5)-(line 828,col 7)",
            "(line 830,col 5)-(line 830,col 48)",
            "(line 831,col 5)-(line 833,col 55)",
            "(line 834,col 5)-(line 834,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion()",
        "snippet": "  public void testCharSetExpansion() {\n    testSame(\"\");\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);\n  }\n",
        "begin_line": 837,
        "end_line": 843,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 838,col 17)",
            "(line 839,col 5)-(line 839,col 70)",
            "(line 840,col 5)-(line 840,col 32)",
            "(line 841,col 5)-(line 841,col 17)",
            "(line 842,col 5)-(line 842,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testChainModuleManifest()",
        "snippet": "  public void testChainModuleManifest() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m1}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m2}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 845,
        "end_line": 866,
        "comment": "",
        "child_ranges": [
            "(line 846,col 5)-(line 846,col 37)",
            "(line 847,col 5)-(line 848,col 67)",
            "(line 850,col 5)-(line 850,col 48)",
            "(line 851,col 5)-(line 852,col 54)",
            "(line 853,col 5)-(line 865,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testStarModuleManifest()",
        "snippet": "  public void testStarModuleManifest() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m0}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m0}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 868,
        "end_line": 889,
        "comment": "",
        "child_ranges": [
            "(line 869,col 5)-(line 869,col 36)",
            "(line 870,col 5)-(line 871,col 67)",
            "(line 873,col 5)-(line 873,col 48)",
            "(line 874,col 5)-(line 875,col 54)",
            "(line 876,col 5)-(line 888,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag()",
        "snippet": "  public void testVersionFlag() {\n    args.add(\"--version\");\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 891,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 892,col 5)-(line 892,col 26)",
            "(line 893,col 5)-(line 893,col 17)",
            "(line 894,col 5)-(line 898,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag2()",
        "snippet": "  public void testVersionFlag2() {\n    lastArg = \"--version\";\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 901,
        "end_line": 909,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 902,col 26)",
            "(line 903,col 5)-(line 903,col 17)",
            "(line 904,col 5)-(line 908,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testPrintAstFlag()",
        "snippet": "  public void testPrintAstFlag() {\n    args.add(\"--print_ast=true\");\n    testSame(\"\");\n    assertEquals(\n        \"digraph AST {\\n\" +\n        \"  node [color=lightblue2, style=filled];\\n\" +\n        \"  node0 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node1 [label=\\\"SCRIPT\\\"];\\n\" +\n        \"  node0 -> node1 [weight=1];\\n\" +\n        \"  node1 -> RETURN [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> RETURN [label=\\\"SYN_BLOCK\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"}\\n\\n\",\n        new String(outReader.toByteArray()));\n  }\n",
        "begin_line": 911,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 33)",
            "(line 913,col 5)-(line 913,col 17)",
            "(line 914,col 5)-(line 927,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSyntheticExterns()",
        "snippet": "  public void testSyntheticExterns() {\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"myVar.property;\"));\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         \"var theirVar={},myVar={},yourVar={};\");\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var myVar = {};\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 930,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 931,col 5)-(line 932,col 59)",
            "(line 933,col 5)-(line 934,col 46)",
            "(line 936,col 5)-(line 936,col 47)",
            "(line 937,col 5)-(line 937,col 40)",
            "(line 938,col 5)-(line 939,col 49)",
            "(line 941,col 5)-(line 941,col 47)",
            "(line 942,col 5)-(line 942,col 40)",
            "(line 943,col 5)-(line 944,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGoogAssertStripping()",
        "snippet": "  public void testGoogAssertStripping() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"goog.asserts.assert(false)\",\n         \"\");\n    args.add(\"--debug\");\n    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(!1)\");\n  }\n",
        "begin_line": 947,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 59)",
            "(line 949,col 5)-(line 950,col 13)",
            "(line 951,col 5)-(line 951,col 24)",
            "(line 952,col 5)-(line 952,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testMissingReturnCheckOnWithVerbose()",
        "snippet": "  public void testMissingReturnCheckOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number} */ function f() {f()} f();\",\n        CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 955,
        "end_line": 959,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 40)",
            "(line 957,col 5)-(line 958,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGenerateExports()",
        "snippet": "  public void testGenerateExports() {\n    args.add(\"--generate_exports=true\");\n    test(\"/** @export */ foo.prototype.x = function() {};\",\n        \"foo.prototype.x=function(){};\"+\n        \"goog.exportSymbol(\\\"foo.prototype.x\\\",foo.prototype.x);\");\n  }\n",
        "begin_line": 961,
        "end_line": 966,
        "comment": "",
        "child_ranges": [
            "(line 962,col 5)-(line 962,col 40)",
            "(line 963,col 5)-(line 965,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDepreciationWithVerbose()",
        "snippet": "  public void testDepreciationWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @deprecated */ function f() {}; f()\",\n       CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 968,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 969,col 5)-(line 969,col 40)",
            "(line 970,col 5)-(line 971,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTwoParseErrors()",
        "snippet": "  public void testTwoParseErrors() {\n    // If parse errors are reported in different files, make\n    // sure all of them are reported.\n    Compiler compiler = compile(new String[] {\n      \"var a b;\",\n      \"var b c;\"\n    });\n    assertEquals(2, compiler.getErrors().length);\n  }\n",
        "begin_line": 974,
        "end_line": 982,
        "comment": "",
        "child_ranges": [
            "(line 977,col 5)-(line 980,col 7)",
            "(line 981,col 5)-(line 981,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES3ByDefault()",
        "snippet": "  public void testES3ByDefault() {\n    test(\"var x = f.function\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 984,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 985,col 5)-(line 985,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5()",
        "snippet": "  public void testES5() {\n    args.add(\"--language_in=ECMASCRIPT5\");\n    test(\"var x = f.function\", \"var x = f.function\");\n    test(\"var let\", \"var let\");\n  }\n",
        "begin_line": 988,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 989,col 5)-(line 989,col 42)",
            "(line 990,col 5)-(line 990,col 53)",
            "(line 991,col 5)-(line 991,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5Strict()",
        "snippet": "  public void testES5Strict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    test(\"var x = f.function\", \"'use strict';var x = f.function\");\n    test(\"var let\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 994,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 995,col 5)-(line 995,col 49)",
            "(line 996,col 5)-(line 996,col 66)",
            "(line 997,col 5)-(line 997,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrict()",
        "snippet": "  public void testES5StrictUseStrict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n  }\n",
        "begin_line": 1000,
        "end_line": 1005,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1001,col 49)",
            "(line 1002,col 5)-(line 1002,col 69)",
            "(line 1003,col 5)-(line 1003,col 46)",
            "(line 1004,col 5)-(line 1004,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrictMultipleInputs()",
        "snippet": "  public void testES5StrictUseStrictMultipleInputs() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\",\n        \"var y = f.function\", \"var z = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n    assertEquals(outputSource.substring(13).indexOf(\"'use strict'\"), -1);\n  }\n",
        "begin_line": 1007,
        "end_line": 1014,
        "comment": "",
        "child_ranges": [
            "(line 1008,col 5)-(line 1008,col 49)",
            "(line 1009,col 5)-(line 1010,col 53)",
            "(line 1011,col 5)-(line 1011,col 46)",
            "(line 1012,col 5)-(line 1012,col 64)",
            "(line 1013,col 5)-(line 1013,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordDefault()",
        "snippet": "  public void testWithKeywordDefault() {\n    test(\"var x = {}; with (x) {}\", ControlStructureCheck.USE_OF_WITH);\n  }\n",
        "begin_line": 1016,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordWithEs5ChecksOff()",
        "snippet": "  public void testWithKeywordWithEs5ChecksOff() {\n    args.add(\"--jscomp_off=es5Strict\");\n    testSame(\"var x = {}; with (x) {}\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1021,col 39)",
            "(line 1022,col 5)-(line 1022,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testNoSrCFilesWithManifest()",
        "snippet": "  public void testNoSrCFilesWithManifest() throws IOException {\n    args.add(\"--use_only_custom_externs=true\");\n    args.add(\"--output_manifest=test.MF\");\n    CommandLineRunner runner = createCommandLineRunner(new String[0]);\n    String expectedMessage = \"\";\n    try {\n      runner.doRun();\n    } catch (FlagUsageException e) {\n      expectedMessage = e.getMessage();\n    }\n    assertEquals(expectedMessage, \"Bad --js flag. \" +\n      \"Manifest files cannot be generated when the input is from stdin.\");\n  }\n",
        "begin_line": 1025,
        "end_line": 1037,
        "comment": "",
        "child_ranges": [
            "(line 1026,col 5)-(line 1026,col 47)",
            "(line 1027,col 5)-(line 1027,col 42)",
            "(line 1028,col 5)-(line 1028,col 70)",
            "(line 1029,col 5)-(line 1029,col 32)",
            "(line 1030,col 5)-(line 1034,col 5)",
            "(line 1035,col 5)-(line 1036,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMD()",
        "snippet": "  public void testTransformAMD() {\n    args.add(\"--transform_amd_modules\");\n    test(\"define({test: 1})\", \"exports = {test: 1}\");\n  }\n",
        "begin_line": 1039,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1040,col 5)-(line 1040,col 40)",
            "(line 1041,col 5)-(line 1041,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS()",
        "snippet": "  public void testProcessCJS() {\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"exports.test = 1\",\n        \"var module$foo$bar={test:1};\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1050,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 44)",
            "(line 1046,col 5)-(line 1046,col 49)",
            "(line 1047,col 5)-(line 1047,col 33)",
            "(line 1048,col 5)-(line 1049,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS()",
        "snippet": "  public void testTransformAMDAndProcessCJS() {\n    args.add(\"--transform_amd_modules\");\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"define({foo: 1})\",\n        \"var module$foo$bar={}, module$foo$bar={foo:1};\");\n  }\n",
        "begin_line": 1052,
        "end_line": 1059,
        "comment": "",
        "child_ranges": [
            "(line 1053,col 5)-(line 1053,col 40)",
            "(line 1054,col 5)-(line 1054,col 44)",
            "(line 1055,col 5)-(line 1055,col 49)",
            "(line 1056,col 5)-(line 1056,col 33)",
            "(line 1057,col 5)-(line 1058,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 1063,
        "end_line": 1065,
        "comment": "",
        "child_ranges": [
            "(line 1064,col 5)-(line 1064,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 1067,
        "end_line": 1069,
        "comment": "",
        "child_ranges": [
            "(line 1068,col 5)-(line 1068,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 1071,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 5)-(line 1072,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    test(original, compiled, null);\n  }\n",
        "begin_line": 1079,
        "end_line": 1081,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1080,col 5)-(line 1080,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, String[] compiled,\n                    DiagnosticType warning) {\n    Compiler compiler = compile(original);\n\n    if (warning == null) {\n      assertEquals(\"Expected no warnings or errors\\n\" +\n          \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n          \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          0, compiler.getErrors().length + compiler.getWarnings().length);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 1089,
        "end_line": 1113,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   * If {@code warning} is non-null, we will also check if the given\n   * warning type was emitted.\n   ",
        "child_ranges": [
            "(line 1091,col 5)-(line 1091,col 42)",
            "(line 1093,col 5)-(line 1101,col 5)",
            "(line 1103,col 5)-(line 1103,col 50)",
            "(line 1104,col 5)-(line 1112,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 1118,
        "end_line": 1120,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1119,col 5)-(line 1119,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, String expected, DiagnosticType warning) {\n    test(new String[] { original }, new String[] { expected }, warning);\n  }\n",
        "begin_line": 1122,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1123,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n\n    assertTrue(exitCodes.size() > 0);\n    int lastExitCode = exitCodes.get(exitCodes.size() - 1);\n\n    if (compiler.getErrors().length > 0) {\n      assertEquals(1, compiler.getErrors().length);\n      assertEquals(warning, compiler.getErrors()[0].getType());\n      assertEquals(1, lastExitCode);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n      assertEquals(0, lastExitCode);\n    }\n  }\n",
        "begin_line": 1129,
        "end_line": 1148,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1130,col 5)-(line 1130,col 42)",
            "(line 1131,col 5)-(line 1134,col 72)",
            "(line 1136,col 5)-(line 1136,col 37)",
            "(line 1137,col 5)-(line 1137,col 59)",
            "(line 1139,col 5)-(line 1147,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.createCommandLineRunner(java.lang.String[])",
        "snippet": "  private CommandLineRunner createCommandLineRunner(String[] original) {\n    for (int i = 0; i < original.length; i++) {\n      args.add(\"--js\");\n      args.add(\"/path/to/input\" + i + \".js\");\n      if (useModules == ModulePattern.CHAIN) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? (\":m\" + (i - 1)) : \"\"));\n      } else if (useModules == ModulePattern.STAR) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? \":m0\" : \"\"));\n      }\n    }\n\n    if (lastArg != null) {\n      args.add(lastArg);\n    }\n\n    String[] argStrings = args.toArray(new String[] {});\n    return new CommandLineRunner(\n        argStrings,\n        new PrintStream(outReader),\n        new PrintStream(errReader));\n  }\n",
        "begin_line": 1150,
        "end_line": 1172,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1161,col 5)",
            "(line 1163,col 5)-(line 1165,col 5)",
            "(line 1167,col 5)-(line 1167,col 56)",
            "(line 1168,col 5)-(line 1171,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    CommandLineRunner runner = createCommandLineRunner(original);\n    assertTrue(runner.shouldRunCompiler());\n    Supplier<List<SourceFile>> inputsSupplier = null;\n    Supplier<List<JSModule>> modulesSupplier = null;\n\n    if (useModules == ModulePattern.NONE) {\n      List<SourceFile> inputs = Lists.newArrayList();\n      for (int i = 0; i < original.length; i++) {\n        inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n      }\n      inputsSupplier = Suppliers.ofInstance(inputs);\n    } else if (useModules == ModulePattern.STAR) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleStar(original)));\n    } else if (useModules == ModulePattern.CHAIN) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleChain(original)));\n    } else {\n      throw new IllegalArgumentException(\"Unknown module type: \" + useModules);\n    }\n\n    runner.enableTestMode(\n        Suppliers.<List<SourceFile>>ofInstance(externs),\n        inputsSupplier,\n        modulesSupplier,\n        new Function<Integer, Boolean>() {\n          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n        });\n    runner.run();\n    lastCompiler = runner.getCompiler();\n    lastCommandLineRunner = runner;\n    return lastCompiler;\n  }\n",
        "begin_line": 1174,
        "end_line": 1212,
        "comment": "",
        "child_ranges": [
            "(line 1175,col 5)-(line 1175,col 65)",
            "(line 1176,col 5)-(line 1176,col 43)",
            "(line 1177,col 5)-(line 1177,col 53)",
            "(line 1178,col 5)-(line 1178,col 52)",
            "(line 1180,col 5)-(line 1196,col 5)",
            "(line 1198,col 5)-(line 1207,col 11)",
            "(line 1208,col 5)-(line 1208,col 17)",
            "(line 1209,col 5)-(line 1209,col 40)",
            "(line 1210,col 5)-(line 1210,col 35)",
            "(line 1211,col 5)-(line 1211,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.Anonymous-ced3e78a-ab78-4e7f-9780-6e1441b687da.apply(java.lang.Integer)",
        "snippet": "          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n",
        "begin_line": 1203,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1205,col 13)-(line 1205,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = new CommandLineRunner(argStrings);\n    Compiler compiler = runner.createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n    }\n    CompilerOptions options = new CompilerOptions();\n    // ECMASCRIPT5 is the most forgiving.\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.init(externs, inputs, options);\n    Node all = compiler.parseInputs();\n    Preconditions.checkState(compiler.getErrorCount() == 0);\n    Preconditions.checkNotNull(all);\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 1214,
        "end_line": 1231,
        "comment": "",
        "child_ranges": [
            "(line 1215,col 5)-(line 1215,col 56)",
            "(line 1216,col 5)-(line 1216,col 65)",
            "(line 1217,col 5)-(line 1217,col 48)",
            "(line 1218,col 5)-(line 1218,col 51)",
            "(line 1219,col 5)-(line 1221,col 5)",
            "(line 1222,col 5)-(line 1222,col 52)",
            "(line 1224,col 5)-(line 1224,col 52)",
            "(line 1225,col 5)-(line 1225,col 44)",
            "(line 1226,col 5)-(line 1226,col 38)",
            "(line 1227,col 5)-(line 1227,col 60)",
            "(line 1228,col 5)-(line 1228,col 36)",
            "(line 1229,col 5)-(line 1229,col 32)",
            "(line 1230,col 5)-(line 1230,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setFilename(int, java.lang.String)",
        "snippet": "  private void setFilename(int i, String filename) {\n    this.filenames.put(i, filename);\n  }\n",
        "begin_line": 1233,
        "end_line": 1235,
        "comment": "",
        "child_ranges": [
            "(line 1234,col 5)-(line 1234,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.getFilename(int)",
        "snippet": "  private String getFilename(int i) {\n    if (filenames.isEmpty()) {\n      return \"input\" + i;\n    }\n    return filenames.get(i);\n  }\n",
        "begin_line": 1237,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1238,col 5)-(line 1240,col 5)",
            "(line 1241,col 5)-(line 1241,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.ProcessCommonJSModulesTest()",
        "snippet": "  public ProcessCommonJSModulesTest() {\n  }\n",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new ProcessCommonJSModules(compiler, \"foo/bar/\", false);\n  }\n",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    return 1;\n  }\n",
        "begin_line": 32,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.testWithoutExports()",
        "snippet": "  public void testWithoutExports() {\n    setFilename(\"test\");\n    test(\n        \"var name = require('name');\" +\n        \"name()\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"name$$module$test();\");\n    setFilename(\"test/sub\");\n    test(\n        \"var name = require('mod/name');\" +\n        \"(function() { name(); })();\",\n        \"goog.provide('module$test$sub');\" +\n        \"var module$test$sub = {};\" +\n        \"goog.require('module$mod$name');\" +\n        \"var name$$module$test$sub = module$mod$name;\" +\n        \"(function() { name$$module$test$sub(); })();\");\n  }\n",
        "begin_line": 37,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 24)",
            "(line 39,col 5)-(line 46,col 32)",
            "(line 47,col 5)-(line 47,col 28)",
            "(line 48,col 5)-(line 55,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.testExports()",
        "snippet": "  public void testExports() {\n    setFilename(\"test\");\n    test(\n        \"var name = require('name');\" +\n        \"exports.foo = 1;\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.foo = 1;\");\n    test(\n        \"var name = require('name');\" +\n        \"module.exports = function() {};\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test = module$name;\" +\n        \"module$test.module$exports = function() {};\" +\n        \"if(module$test.module$exports)\" +\n        \"module$test=module$test.module$exports\");\n  }\n",
        "begin_line": 58,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 59,col 5)-(line 59,col 24)",
            "(line 60,col 5)-(line 67,col 32)",
            "(line 68,col 5)-(line 77,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.testVarRenaming()",
        "snippet": "  public void testVarRenaming() {\n    setFilename(\"test\");\n    test(\n        \"var a = 1, b = 2;\" +\n        \"(function() { var a; b = 4})()\",\n        \"goog.provide('module$test');\" +\n        \"var module$test = {};\" +\n        \"var a$$module$test = 1, b$$module$test = 2;\" +\n        \"(function() { var a; b$$module$test = 4})();\");\n  }\n",
        "begin_line": 80,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 24)",
            "(line 82,col 5)-(line 88,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.testDash()",
        "snippet": "  public void testDash() {\n    setFilename(\"test-test\");\n    test(\n        \"var name = require('name'); exports.foo = 1;\",\n        \"goog.provide('module$test_test');\" +\n        \"var module$test_test = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$test_test = module$name;\" +\n        \"module$test_test.foo = 1;\");\n  }\n",
        "begin_line": 91,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 29)",
            "(line 93,col 5)-(line 99,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.testModuleName()",
        "snippet": "  public void testModuleName() {\n    assertEquals(\"module$foo$baz\",\n        ProcessCommonJSModules.toModuleName(\"./baz.js\", \"foo/bar.js\"));\n    assertEquals(\"module$foo$baz_bar\",\n        ProcessCommonJSModules.toModuleName(\"./baz-bar.js\", \"foo/bar.js\"));\n    assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../baz.js\", \"foo/bar.js\"));\n    assertEquals(\"module$baz\",\n        ProcessCommonJSModules.toModuleName(\"../../baz.js\", \"foo/bar/abc.js\"));\n    assertEquals(\"module$baz\", ProcessCommonJSModules.toModuleName(\n        \"../../../baz.js\", \"foo/bar/abc/xyz.js\"));\n    setFilename(\"foo/bar\");\n    test(\n        \"var name = require('name');\",\n        \"goog.provide('module$foo$bar'); var module$foo$bar = {};\" +\n        \"goog.require('module$name');\" +\n        \"var name$$module$foo$bar = module$name;\");\n    test(\n        \"var name = require('./name');\",\n        \"goog.provide('module$foo$bar');\" +\n        \"var module$foo$bar = {};\" +\n        \"goog.require('module$foo$name');\" +\n        \"var name$$module$foo$bar = module$foo$name;\");\n\n  }\n",
        "begin_line": 102,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 104,col 71)",
            "(line 105,col 5)-(line 106,col 75)",
            "(line 107,col 5)-(line 108,col 72)",
            "(line 109,col 5)-(line 110,col 79)",
            "(line 111,col 5)-(line 112,col 50)",
            "(line 113,col 5)-(line 113,col 27)",
            "(line 114,col 5)-(line 118,col 51)",
            "(line 119,col 5)-(line 124,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessCommonJSModulesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
        "signature": "com.google.javascript.jscomp.ProcessCommonJSModulesTest.testGuessModuleName()",
        "snippet": "  public void testGuessModuleName() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));\n  }\n",
        "begin_line": 128,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 129,col 5)-(line 129,col 74)",
            "(line 130,col 5)-(line 131,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 128,col 49)",
            "(line 129,col 5)-(line 129,col 39)",
            "(line 130,col 5)-(line 130,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 169,
        "end_line": 182,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 170,col 5)-(line 172,col 5)",
            "(line 176,col 5)-(line 176,col 32)",
            "(line 178,col 5)-(line 179,col 65)",
            "(line 180,col 5)-(line 180,col 55)",
            "(line 181,col 5)-(line 181,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 196,
        "end_line": 200,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 223,col 5)-(line 223,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 234,
        "end_line": 237,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 29)",
            "(line 236,col 5)-(line 236,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 28)",
            "(line 283,col 5)-(line 283,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 311,
        "end_line": 319,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 313,col 5)-(line 315,col 40)",
            "(line 317,col 5)-(line 318,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 371,col 5)-(line 371,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 385,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 410,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 408,col 49)",
            "(line 409,col 5)-(line 409,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 426,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 41)",
            "(line 430,col 5)-(line 430,col 28)",
            "(line 432,col 5)-(line 432,col 43)",
            "(line 434,col 5)-(line 436,col 5)",
            "(line 439,col 5)-(line 439,col 39)",
            "(line 440,col 5)-(line 441,col 53)",
            "(line 443,col 5)-(line 443,col 71)",
            "(line 445,col 5)-(line 445,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 455,col 5)-(line 455,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 467,col 5)-(line 467,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 498,
        "end_line": 509,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 41)",
            "(line 501,col 5)-(line 501,col 28)",
            "(line 503,col 5)-(line 503,col 51)",
            "(line 504,col 5)-(line 506,col 5)",
            "(line 507,col 5)-(line 507,col 55)",
            "(line 508,col 5)-(line 508,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 529,
        "end_line": 532,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 531,col 5)-(line 531,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 544,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 546,col 5)-(line 546,col 41)",
            "(line 547,col 5)-(line 547,col 28)",
            "(line 549,col 5)-(line 550,col 66)",
            "(line 551,col 5)-(line 551,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 582,
        "end_line": 588,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 583,col 5)-(line 587,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 611,
        "end_line": 618,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 613,col 5)-(line 617,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 631,
        "end_line": 636,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 634,col 49)",
            "(line 635,col 5)-(line 635,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 643,
        "end_line": 645,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 644,col 5)-(line 644,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 666,
        "end_line": 669,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 668,col 5)-(line 668,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 676,
        "end_line": 678,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 686,
        "end_line": 699,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 698,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 712,
        "end_line": 715,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 714,col 5)-(line 714,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR, true)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 732,
        "end_line": 946,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 51)",
            "(line 736,col 5)-(line 736,col 44)",
            "(line 738,col 5)-(line 738,col 39)",
            "(line 739,col 5)-(line 740,col 66)",
            "(line 742,col 5)-(line 744,col 5)",
            "(line 745,col 5)-(line 745,col 44)",
            "(line 746,col 5)-(line 746,col 40)",
            "(line 749,col 5)-(line 749,col 38)",
            "(line 750,col 5)-(line 750,col 54)",
            "(line 751,col 5)-(line 751,col 50)",
            "(line 753,col 5)-(line 753,col 45)",
            "(line 754,col 5)-(line 754,col 68)",
            "(line 755,col 5)-(line 755,col 34)",
            "(line 756,col 5)-(line 756,col 59)",
            "(line 757,col 5)-(line 757,col 35)",
            "(line 759,col 5)-(line 760,col 39)",
            "(line 762,col 5)-(line 813,col 5)",
            "(line 815,col 5)-(line 945,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 948,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 950,col 5)-(line 950,col 57)",
            "(line 951,col 5)-(line 951,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 957,
        "end_line": 975,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 958,col 5)-(line 958,col 41)",
            "(line 959,col 5)-(line 959,col 51)",
            "(line 960,col 5)-(line 962,col 5)",
            "(line 963,col 5)-(line 963,col 55)",
            "(line 964,col 5)-(line 964,col 39)",
            "(line 965,col 5)-(line 966,col 66)",
            "(line 967,col 5)-(line 967,col 44)",
            "(line 968,col 5)-(line 968,col 42)",
            "(line 970,col 5)-(line 973,col 5)",
            "(line 974,col 5)-(line 974,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 978,col 5)-(line 978,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 985,
        "end_line": 991,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 47)",
            "(line 987,col 5)-(line 989,col 5)",
            "(line 990,col 5)-(line 990,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 997,
        "end_line": 1003,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 47)",
            "(line 999,col 5)-(line 1001,col 5)",
            "(line 1002,col 5)-(line 1002,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1010,
        "end_line": 1017,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 48)",
            "(line 1012,col 5)-(line 1012,col 47)",
            "(line 1013,col 5)-(line 1015,col 5)",
            "(line 1016,col 5)-(line 1016,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1024,
        "end_line": 1030,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 47)",
            "(line 1026,col 5)-(line 1028,col 5)",
            "(line 1029,col 5)-(line 1029,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1036,
        "end_line": 1043,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 53)",
            "(line 1038,col 5)-(line 1041,col 5)",
            "(line 1042,col 5)-(line 1042,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 7)-(line 1047,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1050,
        "end_line": 1051,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1053,
        "end_line": 1054,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1057,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1058,col 39)",
            "(line 1059,col 5)-(line 1059,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1062,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1067,
        "end_line": 1079,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1069,col 5)-(line 1077,col 39)",
            "(line 1078,col 5)-(line 1078,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-0beb4ae0-df45-4927-a91d-69f8192e9f10.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1071,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 13)-(line 1074,col 13)"
        ]
    }
]