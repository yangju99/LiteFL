[
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.BooleanUtilsTest(java.lang.String)",
        "snippet": "    public BooleanUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(BooleanUtilsTest.class);\n        suite.setName(\"BooleanUtils Tests\");\n        return suite;\n    }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 64)",
            "(line 46,col 9)-(line 46,col 44)",
            "(line 47,col 9)-(line 47,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new BooleanUtils());\n        Constructor[] cons = BooleanUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n    }\n",
        "begin_line": 59,
        "end_line": 66,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 42)",
            "(line 61,col 9)-(line 61,col 74)",
            "(line 62,col 9)-(line 62,col 37)",
            "(line 63,col 9)-(line 63,col 70)",
            "(line 64,col 9)-(line 64,col 81)",
            "(line 65,col 9)-(line 65,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_negate_Boolean()",
        "snippet": "    public void test_negate_Boolean() {\n        assertSame(null, BooleanUtils.negate(null));\n        assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));\n        assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));\n    }\n",
        "begin_line": 69,
        "end_line": 73,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 70,col 9)-(line 70,col 52)",
            "(line 71,col 9)-(line 71,col 69)",
            "(line 72,col 9)-(line 72,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isTrue_Boolean()",
        "snippet": "    public void test_isTrue_Boolean() {\n        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.isTrue((Boolean) null));\n    }\n",
        "begin_line": 76,
        "end_line": 80,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 77,col 9)-(line 77,col 62)",
            "(line 78,col 9)-(line 78,col 64)",
            "(line 79,col 9)-(line 79,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isNotTrue_Boolean()",
        "snippet": "    public void test_isNotTrue_Boolean() {\n        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));\n        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));\n        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));\n    }\n",
        "begin_line": 82,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isFalse_Boolean()",
        "snippet": "    public void test_isFalse_Boolean() {\n        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));\n        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.isFalse((Boolean) null));\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 64)",
            "(line 91,col 9)-(line 91,col 64)",
            "(line 92,col 9)-(line 92,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_isNotFalse_Boolean()",
        "snippet": "    public void test_isNotFalse_Boolean() {\n        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));\n        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));\n    }\n",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 68)",
            "(line 98,col 9)-(line 98,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_boolean()",
        "snippet": "    public void test_toBooleanObject_boolean() {\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(true));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(false));\n    }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 69)",
            "(line 104,col 9)-(line 104,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_Boolean()",
        "snippet": "    public void test_toBoolean_Boolean() {\n        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));\n        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));\n        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));\n    }\n",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 65)",
            "(line 109,col 9)-(line 109,col 67)",
            "(line 110,col 9)-(line 110,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean()",
        "snippet": "    public void test_toBooleanDefaultIfNull_Boolean_boolean() {\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\n        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));\n        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));\n    }\n",
        "begin_line": 113,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 84)",
            "(line 115,col 9)-(line 115,col 85)",
            "(line 116,col 9)-(line 116,col 86)",
            "(line 117,col 9)-(line 117,col 87)",
            "(line 118,col 9)-(line 118,col 86)",
            "(line 119,col 9)-(line 119,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_int()",
        "snippet": "    public void test_toBoolean_int() {\n        assertEquals(true, BooleanUtils.toBoolean(1));\n        assertEquals(true, BooleanUtils.toBoolean(-1));\n        assertEquals(false, BooleanUtils.toBoolean(0));\n    }\n",
        "begin_line": 124,
        "end_line": 128,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 125,col 9)-(line 125,col 54)",
            "(line 126,col 9)-(line 126,col 55)",
            "(line 127,col 9)-(line 127,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_int()",
        "snippet": "    public void test_toBooleanObject_int() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));\n    }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 68)",
            "(line 132,col 9)-(line 132,col 69)",
            "(line 133,col 9)-(line 133,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_Integer()",
        "snippet": "    public void test_toBooleanObject_Integer() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));\n    }\n",
        "begin_line": 136,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 81)",
            "(line 138,col 9)-(line 138,col 82)",
            "(line 139,col 9)-(line 139,col 82)",
            "(line 140,col 9)-(line 140,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_int_int_int()",
        "snippet": "    public void test_toBoolean_int_int_int() {\n        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));\n        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));\n        try {\n            BooleanUtils.toBoolean(8, 6, 7);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 144,
        "end_line": 151,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 60)",
            "(line 146,col 9)-(line 146,col 61)",
            "(line 147,col 9)-(line 150,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer()",
        "snippet": "    public void test_toBoolean_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n\n        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));\n        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));\n        try {\n            BooleanUtils.toBoolean(null, six, seven);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n        try {\n            BooleanUtils.toBoolean(new Integer(8), six, seven);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 153,
        "end_line": 170,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 37)",
            "(line 155,col 9)-(line 155,col 39)",
            "(line 157,col 9)-(line 157,col 80)",
            "(line 158,col 9)-(line 158,col 79)",
            "(line 159,col 9)-(line 162,col 48)",
            "(line 164,col 9)-(line 164,col 79)",
            "(line 165,col 9)-(line 165,col 80)",
            "(line 166,col 9)-(line 169,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_int_int_int()",
        "snippet": "    public void test_toBooleanObject_int_int_int() {\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));\n        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));\n        try {\n            BooleanUtils.toBooleanObject(9, 6, 7, 8);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 173,
        "end_line": 181,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 77)",
            "(line 175,col 9)-(line 175,col 78)",
            "(line 176,col 9)-(line 176,col 69)",
            "(line 177,col 9)-(line 180,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer()",
        "snippet": "    public void test_toBooleanObject_Integer_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        Integer eight = new Integer(8);\n\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));\n        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));\n        try {\n            BooleanUtils.toBooleanObject(null, six, seven, eight);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n        try {\n            BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 183,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 37)",
            "(line 185,col 9)-(line 185,col 39)",
            "(line 186,col 9)-(line 186,col 39)",
            "(line 188,col 9)-(line 188,col 99)",
            "(line 189,col 9)-(line 189,col 98)",
            "(line 190,col 9)-(line 190,col 89)",
            "(line 191,col 9)-(line 194,col 48)",
            "(line 196,col 9)-(line 196,col 100)",
            "(line 197,col 9)-(line 197,col 101)",
            "(line 198,col 9)-(line 198,col 92)",
            "(line 199,col 9)-(line 202,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toInteger_boolean()",
        "snippet": "    public void test_toInteger_boolean() {\n        assertEquals(1, BooleanUtils.toInteger(true));\n        assertEquals(0, BooleanUtils.toInteger(false));\n    }\n",
        "begin_line": 206,
        "end_line": 209,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 54)",
            "(line 208,col 9)-(line 208,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_boolean()",
        "snippet": "    public void test_toIntegerObject_boolean() {\n        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));\n    }\n",
        "begin_line": 211,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 73)",
            "(line 213,col 9)-(line 213,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_Boolean()",
        "snippet": "    public void test_toIntegerObject_Boolean() {\n        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));\n    }\n",
        "begin_line": 216,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 81)",
            "(line 218,col 9)-(line 218,col 82)",
            "(line 219,col 9)-(line 219,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toInteger_boolean_int_int()",
        "snippet": "    public void test_toInteger_boolean_int_int() {\n        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));\n        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));\n    }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 224,col 9)-(line 224,col 60)",
            "(line 225,col 9)-(line 225,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toInteger_Boolean_int_int_int()",
        "snippet": "    public void test_toInteger_Boolean_int_int_int() {\n        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));\n        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));\n        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));\n    }\n",
        "begin_line": 228,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 71)",
            "(line 230,col 9)-(line 230,col 72)",
            "(line 231,col 9)-(line 231,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_boolean_Integer_Integer()",
        "snippet": "    public void test_toIntegerObject_boolean_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));\n        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\n    }\n",
        "begin_line": 234,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 37)",
            "(line 236,col 9)-(line 236,col 39)",
            "(line 237,col 9)-(line 237,col 74)",
            "(line 238,col 9)-(line 238,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_Boolean_Integer_Integer_Integer()",
        "snippet": "    public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {\n        Integer six = new Integer(6);\n        Integer seven = new Integer(7);\n        Integer eight = new Integer(8);\n        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));\n        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));\n        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));\n        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));\n    }\n",
        "begin_line": 241,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 37)",
            "(line 243,col 9)-(line 243,col 39)",
            "(line 244,col 9)-(line 244,col 39)",
            "(line 245,col 9)-(line 245,col 89)",
            "(line 246,col 9)-(line 246,col 92)",
            "(line 247,col 9)-(line 247,col 93)",
            "(line 248,col 9)-(line 248,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_String()",
        "snippet": "    public void test_toBooleanObject_String() {\n        assertEquals(null, BooleanUtils.toBooleanObject((String) null));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"false\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"no\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"off\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"FALSE\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"NO\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"OFF\"));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"oof\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"true\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"yes\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"on\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TRUE\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"ON\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"YES\"));\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\n    }\n",
        "begin_line": 253,
        "end_line": 270,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 72)",
            "(line 255,col 9)-(line 255,col 61)",
            "(line 256,col 9)-(line 256,col 75)",
            "(line 257,col 9)-(line 257,col 72)",
            "(line 258,col 9)-(line 258,col 73)",
            "(line 259,col 9)-(line 259,col 75)",
            "(line 260,col 9)-(line 260,col 72)",
            "(line 261,col 9)-(line 261,col 73)",
            "(line 262,col 9)-(line 262,col 64)",
            "(line 263,col 9)-(line 263,col 73)",
            "(line 264,col 9)-(line 264,col 72)",
            "(line 265,col 9)-(line 265,col 71)",
            "(line 266,col 9)-(line 266,col 73)",
            "(line 267,col 9)-(line 267,col 71)",
            "(line 268,col 9)-(line 268,col 72)",
            "(line 269,col 9)-(line 269,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_String_String_String_String()",
        "snippet": "    public void test_toBooleanObject_String_String_String_String() {\n        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, \"N\", \"U\"));\n        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, \"Y\", null, \"U\"));\n        assertSame(null, BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", null));\n        try {\n            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n\n        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\", \"Y\", \"N\", \"U\"));\n        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\", \"Y\", \"N\", \"U\"));\n        assertEquals(null, BooleanUtils.toBooleanObject(\"U\", \"Y\", \"N\", \"U\"));\n        try {\n            BooleanUtils.toBooleanObject(null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            BooleanUtils.toBooleanObject(\"X\", \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 272,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 94)",
            "(line 274,col 9)-(line 274,col 95)",
            "(line 275,col 9)-(line 275,col 86)",
            "(line 276,col 9)-(line 279,col 48)",
            "(line 281,col 9)-(line 281,col 85)",
            "(line 282,col 9)-(line 282,col 86)",
            "(line 283,col 9)-(line 283,col 77)",
            "(line 284,col 9)-(line 287,col 48)",
            "(line 288,col 9)-(line 291,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_String()",
        "snippet": "    public void test_toBoolean_String() {\n        assertEquals(false, BooleanUtils.toBoolean((String) null));\n        assertEquals(false, BooleanUtils.toBoolean(\"\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n        assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n        assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n    }\n",
        "begin_line": 295,
        "end_line": 335,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 67)",
            "(line 297,col 9)-(line 297,col 56)",
            "(line 298,col 9)-(line 298,col 59)",
            "(line 299,col 9)-(line 299,col 59)",
            "(line 300,col 9)-(line 300,col 59)",
            "(line 301,col 9)-(line 301,col 60)",
            "(line 302,col 9)-(line 302,col 61)",
            "(line 303,col 9)-(line 303,col 57)",
            "(line 304,col 9)-(line 304,col 59)",
            "(line 305,col 9)-(line 305,col 99)",
            "(line 306,col 9)-(line 306,col 59)",
            "(line 307,col 9)-(line 307,col 59)",
            "(line 308,col 9)-(line 308,col 59)",
            "(line 309,col 9)-(line 309,col 59)",
            "(line 310,col 9)-(line 310,col 59)",
            "(line 311,col 9)-(line 311,col 59)",
            "(line 312,col 9)-(line 312,col 59)",
            "(line 313,col 9)-(line 313,col 59)",
            "(line 314,col 9)-(line 314,col 59)",
            "(line 315,col 9)-(line 315,col 59)",
            "(line 316,col 9)-(line 316,col 59)",
            "(line 317,col 9)-(line 317,col 59)",
            "(line 318,col 9)-(line 318,col 59)",
            "(line 319,col 9)-(line 319,col 59)",
            "(line 320,col 9)-(line 320,col 59)",
            "(line 321,col 9)-(line 321,col 57)",
            "(line 322,col 9)-(line 322,col 57)",
            "(line 323,col 9)-(line 323,col 57)",
            "(line 324,col 9)-(line 324,col 57)",
            "(line 325,col 9)-(line 325,col 58)",
            "(line 326,col 9)-(line 326,col 58)",
            "(line 327,col 9)-(line 327,col 58)",
            "(line 328,col 9)-(line 328,col 58)",
            "(line 329,col 9)-(line 329,col 58)",
            "(line 330,col 9)-(line 330,col 58)",
            "(line 331,col 9)-(line 331,col 58)",
            "(line 332,col 9)-(line 332,col 58)",
            "(line 333,col 9)-(line 333,col 60)",
            "(line 334,col 9)-(line 334,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_String_String_String()",
        "snippet": "    public void test_toBoolean_String_String_String() {\n        assertEquals(true, BooleanUtils.toBoolean((String) null, null, \"N\"));\n        assertEquals(false, BooleanUtils.toBoolean((String) null, \"Y\", null));\n        try {\n            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n        assertEquals(false, BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n        try {\n            BooleanUtils.toBoolean(null, \"Y\", \"N\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            BooleanUtils.toBoolean(\"X\", \"Y\", \"N\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 337,
        "end_line": 355,
        "comment": "",
        "child_ranges": [
            "(line 338,col 9)-(line 338,col 77)",
            "(line 339,col 9)-(line 339,col 78)",
            "(line 340,col 9)-(line 343,col 48)",
            "(line 345,col 9)-(line 345,col 66)",
            "(line 346,col 9)-(line 346,col 67)",
            "(line 347,col 9)-(line 350,col 48)",
            "(line 351,col 9)-(line 354,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringTrueFalse_Boolean()",
        "snippet": "    public void test_toStringTrueFalse_Boolean() {\n        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));\n        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(Boolean.TRUE));\n        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(Boolean.FALSE));\n    }\n",
        "begin_line": 358,
        "end_line": 362,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 359,col 9)-(line 359,col 75)",
            "(line 360,col 9)-(line 360,col 75)",
            "(line 361,col 9)-(line 361,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringOnOff_Boolean()",
        "snippet": "    public void test_toStringOnOff_Boolean() {\n        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));\n        assertEquals(\"on\", BooleanUtils.toStringOnOff(Boolean.TRUE));\n        assertEquals(\"off\", BooleanUtils.toStringOnOff(Boolean.FALSE));\n    }\n",
        "begin_line": 364,
        "end_line": 368,
        "comment": "",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 71)",
            "(line 366,col 9)-(line 366,col 69)",
            "(line 367,col 9)-(line 367,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringYesNo_Boolean()",
        "snippet": "    public void test_toStringYesNo_Boolean() {\n        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));\n        assertEquals(\"yes\", BooleanUtils.toStringYesNo(Boolean.TRUE));\n        assertEquals(\"no\", BooleanUtils.toStringYesNo(Boolean.FALSE));\n    }\n",
        "begin_line": 370,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 71)",
            "(line 372,col 9)-(line 372,col 70)",
            "(line 373,col 9)-(line 373,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toString_Boolean_String_String_String()",
        "snippet": "    public void test_toString_Boolean_String_String_String() {\n        assertEquals(\"U\", BooleanUtils.toString((Boolean) null, \"Y\", \"N\", \"U\"));\n        assertEquals(\"Y\", BooleanUtils.toString(Boolean.TRUE, \"Y\", \"N\", \"U\"));\n        assertEquals(\"N\", BooleanUtils.toString(Boolean.FALSE, \"Y\", \"N\", \"U\"));\n    }\n",
        "begin_line": 376,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 80)",
            "(line 378,col 9)-(line 378,col 78)",
            "(line 379,col 9)-(line 379,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringTrueFalse_boolean()",
        "snippet": "    public void test_toStringTrueFalse_boolean() {\n        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(true));\n        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(false));\n    }\n",
        "begin_line": 383,
        "end_line": 386,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 67)",
            "(line 385,col 9)-(line 385,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringOnOff_boolean()",
        "snippet": "    public void test_toStringOnOff_boolean() {\n        assertEquals(\"on\", BooleanUtils.toStringOnOff(true));\n        assertEquals(\"off\", BooleanUtils.toStringOnOff(false));\n    }\n",
        "begin_line": 388,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 61)",
            "(line 390,col 9)-(line 390,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toStringYesNo_boolean()",
        "snippet": "    public void test_toStringYesNo_boolean() {\n        assertEquals(\"yes\", BooleanUtils.toStringYesNo(true));\n        assertEquals(\"no\", BooleanUtils.toStringYesNo(false));\n    }\n",
        "begin_line": 393,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 62)",
            "(line 395,col 9)-(line 395,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.test_toString_boolean_String_String_String()",
        "snippet": "    public void test_toString_boolean_String_String_String() {\n        assertEquals(\"Y\", BooleanUtils.toString(true, \"Y\", \"N\"));\n        assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\n    }\n",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 65)",
            "(line 400,col 9)-(line 400,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_nullInput()",
        "snippet": "    public void testXor_primitive_nullInput() {\n        final boolean[] b = null;\n        try {\n            BooleanUtils.xor(b);\n            fail(\"Exception was not thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 405,
        "end_line": 411,
        "comment": "  -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 406,col 9)-(line 406,col 33)",
            "(line 407,col 9)-(line 410,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_emptyInput()",
        "snippet": "    public void testXor_primitive_emptyInput() {\n        try {\n            BooleanUtils.xor(new boolean[] {});\n            fail(\"Exception was not thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 413,
        "end_line": 418,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 417,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_validInput_2items()",
        "snippet": "    public void testXor_primitive_validInput_2items() {\n        assertTrue(\n            \"True result for (true, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, true }));\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(new boolean[] { false, false }));\n\n        assertTrue(\n            \"False result for (true, false)\",\n            BooleanUtils.xor(new boolean[] { true, false }));\n\n        assertTrue(\n            \"False result for (false, true)\",\n            BooleanUtils.xor(new boolean[] { false, true }));\n    }\n",
        "begin_line": 420,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 421,col 9)-(line 423,col 62)",
            "(line 425,col 9)-(line 427,col 64)",
            "(line 429,col 9)-(line 431,col 61)",
            "(line 433,col 9)-(line 435,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_validInput_3items()",
        "snippet": "    public void testXor_primitive_validInput_3items() {\n        assertTrue(\n            \"False result for (false, false, true)\",\n            BooleanUtils.xor(new boolean[] { false, false, true }));\n\n        assertTrue(\n            \"False result for (false, true, false)\",\n            BooleanUtils.xor(new boolean[] { false, true, false }));\n\n        assertTrue(\n            \"False result for (true, false, false)\",\n            BooleanUtils.xor(new boolean[] { true, false, false }));\n\n        assertTrue(\n            \"True result for (true, true, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, true, true }));\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(new boolean[] { false, false, false }));\n\n        assertTrue(\n            \"True result for (true, true, false)\",\n            ! BooleanUtils.xor(new boolean[] { true, true, false }));\n\n        assertTrue(\n            \"True result for (true, false, true)\",\n            ! BooleanUtils.xor(new boolean[] { true, false, true }));\n\n        assertTrue(\n            \"False result for (false, true, true)\",\n            ! BooleanUtils.xor(new boolean[] { false, true, true }));\n    }\n",
        "begin_line": 438,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 441,col 68)",
            "(line 443,col 9)-(line 445,col 68)",
            "(line 447,col 9)-(line 449,col 68)",
            "(line 451,col 9)-(line 453,col 68)",
            "(line 455,col 9)-(line 457,col 71)",
            "(line 459,col 9)-(line 461,col 69)",
            "(line 463,col 9)-(line 465,col 69)",
            "(line 467,col 9)-(line 469,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_nullInput()",
        "snippet": "    public void testXor_object_nullInput() {\n        final Boolean[] b = null;\n        try {\n            BooleanUtils.xor(b);\n            fail(\"Exception was not thrown for null input.\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 472,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 473,col 33)",
            "(line 474,col 9)-(line 477,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_emptyInput()",
        "snippet": "    public void testXor_object_emptyInput() {\n        try {\n            BooleanUtils.xor(new Boolean[] {});\n            fail(\"Exception was not thrown for empty input.\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 9)-(line 484,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_nullElementInput()",
        "snippet": "    public void testXor_object_nullElementInput() {\n        try {\n            BooleanUtils.xor(new Boolean[] {null});\n            fail(\"Exception was not thrown for null element input.\");\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 487,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 488,col 9)-(line 491,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_validInput_2items()",
        "snippet": "    public void testXor_object_validInput_2items() {\n        assertTrue(\n            \"True result for (true, true)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (true, false)\",\n            BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true)\",\n            BooleanUtils\n                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })\n                .booleanValue());\n    }\n",
        "begin_line": 494,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 499,col 33)",
            "(line 501,col 9)-(line 505,col 33)",
            "(line 507,col 9)-(line 511,col 33)",
            "(line 513,col 9)-(line 517,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.BooleanUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
        "signature": "org.apache.commons.lang.BooleanUtilsTest.testXor_object_validInput_3items()",
        "snippet": "    public void testXor_object_validInput_3items() {\n        assertTrue(\n            \"False result for (false, false, true)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.FALSE,\n                        Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true, false)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.TRUE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (true, false, false)\",\n            BooleanUtils\n                .xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.FALSE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, true, true)\",\n            ! BooleanUtils\n                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (false, false)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.FALSE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, true, false)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.TRUE,\n                        Boolean.FALSE })\n                .booleanValue());\n\n        assertTrue(\n            \"True result for (true, false, true)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.TRUE,\n                        Boolean.FALSE,\n                        Boolean.TRUE })\n                .booleanValue());\n\n        assertTrue(\n            \"False result for (false, true, true)\",\n            ! BooleanUtils.xor(\n                    new Boolean[] {\n                        Boolean.FALSE,\n                        Boolean.TRUE,\n                        Boolean.TRUE })\n                .booleanValue());\n                \n    }\n",
        "begin_line": 520,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 529,col 33)",
            "(line 531,col 9)-(line 539,col 33)",
            "(line 541,col 9)-(line 549,col 33)",
            "(line 551,col 9)-(line 555,col 33)",
            "(line 557,col 9)-(line 564,col 33)",
            "(line 566,col 9)-(line 573,col 33)",
            "(line 575,col 9)-(line 582,col 33)",
            "(line 584,col 9)-(line 591,col 33)"
        ]
    }
]