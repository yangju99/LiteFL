[
    {
        "name": "PolynomialFitter.PolynomialFitter#62",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitter.PolynomialFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)",
        "snippet": "    public PolynomialFitter(DifferentiableMultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n        degree = -1; // To avoid compilation error until the instance variable is removed.\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n     * Simple constructor.\n     *\n     * @param optimizer Optimizer to use for the fitting.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFitter.fit#109",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitter.fit(double[])",
        "snippet": "    public double[] fit(double[] guess) {\n        return fit(new PolynomialFunction.Parametric(), guess);\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Get the coefficients of the polynomial fitting the weighted data points.\n     * The degree of the fitting polynomial is {@code guess.length - 1}.\n     *\n     * @param guess First guess for the coefficients. They must be sorted in\n     * increasing order of the polynomial's degree.\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFunction.PolynomialFunction#67",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java",
        "class_name": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction",
        "signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.PolynomialFunction(double[])",
        "snippet": "    public PolynomialFunction(double c[])\n        throws NullArgumentException, NoDataException {\n        super();\n        MathUtils.checkNotNull(c);\n        int n = c.length;\n        if (n == 0) {\n            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n        }\n        while ((n > 1) && (c[n - 1] == 0)) {\n            --n;\n        }\n        this.coefficients = new double[n];\n        System.arraycopy(c, 0, this.coefficients, 0, n);\n    }\n",
        "begin_line": 67,
        "end_line": 80,
        "comment": "\n     * Construct a polynomial with the given coefficients.  The first element\n     * of the coefficients array is the constant term.  Higher degree\n     * coefficients follow in sequence.  The degree of the resulting polynomial\n     * is the index of the last non-null element of the array, or 0 if all elements\n     * are null.\n     * <p>\n     * The constructor makes a copy of the input array and assigns the copy to\n     * the coefficients property.</p>\n     *\n     * @param c Polynomial coefficients.\n     * @throws NullArgumentException if {@code c} is {@code null}.\n     * @throws NoDataException if {@code c} is empty.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFunction.value#93",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java",
        "class_name": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction",
        "signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.value(double)",
        "snippet": "    public double value(double x) {\n       return evaluate(coefficients, x);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Compute the value of the function for the given argument.\n     * <p>\n     *  The value returned is <br/>\n     *  <code>coefficients[n] * x^n + ... + coefficients[1] * x  + coefficients[0]</code>\n     * </p>\n     *\n     * @param x Argument for which the function value should be computed.\n     * @return the value of the polynomial at the given point.\n     * @see UnivariateFunction#value(double)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFunction.evaluate#128",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java",
        "class_name": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction",
        "signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.evaluate(double[], double)",
        "snippet": "    protected static double evaluate(double[] coefficients, double argument)\n        throws NullArgumentException, NoDataException {\n        MathUtils.checkNotNull(coefficients);\n        int n = coefficients.length;\n        if (n == 0) {\n            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n        }\n        double result = coefficients[n - 1];\n        for (int j = n - 2; j >= 0; j--) {\n            result = argument * result + coefficients[j];\n        }\n        return result;\n    }\n",
        "begin_line": 128,
        "end_line": 140,
        "comment": "\n     * Uses Horner's Method to evaluate the polynomial with the given coefficients at\n     * the argument.\n     *\n     * @param coefficients Coefficients of the polynomial to evaluate.\n     * @param argument Input value.\n     * @return the value of the polynomial.\n     * @throws NoDataException if {@code coefficients} is empty.\n     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.fit#152",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.CurveFitter.fit(T, double[])",
        "snippet": "    public double[] fit(T f, final double[] initialGuess) {\n        return fit(Integer.MAX_VALUE, f, initialGuess);\n    }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "\n     * Fit a curve.\n     * This method compute the coefficients of the curve that best\n     * fit the sample of observed points previously given through calls\n     * to the {@link #addObservedPoint(WeightedObservedPoint)\n     * addObservedPoint} method.\n     *\n     * @param f parametric function to fit.\n     * @param initialGuess first guess of the function parameters.\n     * @return the fitted parameters.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the start point dimension is wrong.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.optimize#417",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimize(int, org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction, double[], double[], double[])",
        "snippet": "    @Override\n    @Deprecated\n    public PointVectorValuePair optimize(int maxEval,\n                                         final DifferentiableMultivariateVectorFunction f,\n                                         final double[] target, final double[] weights,\n                                         final double[] startPoint) {\n        return optimizeInternal(maxEval,\n                                FunctionUtils.toMultivariateDifferentiableVectorFunction(f),\n                                new Target(target),\n                                new Weight(weights),\n                                new InitialGuess(startPoint));\n    }\n",
        "begin_line": 417,
        "end_line": 428,
        "comment": " {@inheritDoc}\n     * @deprecated As of 3.1. Please use\n     * {@link BaseAbstractMultivariateVectorOptimizer#optimize(int,MultivariateVectorFunction,OptimizationData[])\n     * optimize(int,MultivariateDifferentiableVectorFunction,OptimizationData...)}\n     * instead.\n     ",
        "resolved_comments": {
            "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer": null,
            "org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer": null,
            "org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer": null,
            "org.apache.commons.math3.optimization.BaseOptimizer": null
        },
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getWeight#58",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint.getWeight()",
        "snippet": "    public double getWeight() {\n        return weight;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": " Get the weight of the measurement in the fitting process.\n     * @return weight of the measurement in the fitting process\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.OldTheoreticalValuesFunction#210",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.CurveFitter.OldTheoreticalValuesFunction.OldTheoreticalValuesFunction(org.apache.commons.math3.analysis.ParametricUnivariateFunction)",
        "snippet": "        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {\n            this.f = f;\n        }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": " Simple constructor.\n         * @param f function to fit.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.fit#173",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.CurveFitter.fit(int, T, double[])",
        "snippet": "    public double[] fit(int maxEval, T f,\n                        final double[] initialGuess) {\n        // prepare least squares problem\n        double[] target  = new double[observations.size()];\n        double[] weights = new double[observations.size()];\n        int i = 0;\n        for (WeightedObservedPoint point : observations) {\n            target[i]  = point.getY();\n            weights[i] = point.getWeight();\n            ++i;\n        }\n\n        // perform the fit\n        final PointVectorValuePair optimum;\n        if (optimizer == null) {\n            // to be removed in 4.0\n            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),\n                                            target, weights, initialGuess);\n        } else {\n            optimum = optimizer.optimize(maxEval, new TheoreticalValuesFunction(f),\n                                         target, weights, initialGuess);\n        }\n\n        // extract the coefficients\n        return optimum.getPointRef();\n    }\n",
        "begin_line": 173,
        "end_line": 198,
        "comment": "\n     * Fit a curve.\n     * This method compute the coefficients of the curve that best\n     * fit the sample of observed points previously given through calls\n     * to the {@link #addObservedPoint(WeightedObservedPoint)\n     * addObservedPoint} method.\n     *\n     * @param f parametric function to fit.\n     * @param initialGuess first guess of the function parameters.\n     * @param maxEval Maximum number of function evaluations.\n     * @return the fitted parameters.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the number of allowed evaluations is exceeded.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the start point dimension is wrong.\n     * @since 3.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getY#72",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint.getY()",
        "snippet": "    public double getY() {\n        return y;\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": " Get the observed value of the function at x.\n     * @return observed value of the function at x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.addObservedPoint#108",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.CurveFitter.addObservedPoint(double, double, double)",
        "snippet": "    public void addObservedPoint(double weight, double x, double y) {\n        observations.add(new WeightedObservedPoint(weight, x, y));\n    }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": " Add an observed weighted (x,y) point to the sample.\n     * @param weight weight of the observed point in the fit\n     * @param x abscissa of the point\n     * @param y observed value of the point at x, after fitting we should\n     * have f(x) as close as possible to this value\n     * @see #addObservedPoint(double, double)\n     * @see #addObservedPoint(WeightedObservedPoint)\n     * @see #getObservations()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.WeightedObservedPoint#49",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.optimization.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double)",
        "snippet": "    public WeightedObservedPoint(final double weight, final double x, final double y) {\n        this.weight = weight;\n        this.x      = x;\n        this.y      = y;\n    }\n",
        "begin_line": 49,
        "end_line": 53,
        "comment": " Simple constructor.\n     * @param weight weight of the measurement in the fitting process\n     * @param x abscissa of the measurement\n     * @param y ordinate of the measurement\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.CurveFitter#69",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.optimization.fitting.CurveFitter.CurveFitter(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer)",
        "snippet": "    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {\n        this.oldOptimizer = optimizer;\n        this.optimizer    = null;\n        observations      = new ArrayList<WeightedObservedPoint>();\n    }\n",
        "begin_line": 69,
        "end_line": 73,
        "comment": " Simple constructor.\n     * @param optimizer optimizer to use for the fitting\n     * @deprecated as of 3.1 replaced by {@link #CurveFitter(MultivariateDifferentiableVectorOptimizer)}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer#157",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer()",
        "snippet": "    public LevenbergMarquardtOptimizer() {\n        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);\n    }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Build an optimizer for least squares problems with default values\n     * for all the tuning parameters (see the {@link\n     * #LevenbergMarquardtOptimizer(double,double,double,double,double)\n     * other contructor}.\n     * The default values for the algorithm settings are:\n     * <ul>\n     *  <li>Initial step bound factor: 100</li>\n     *  <li>Cost relative tolerance: 1e-10</li>\n     *  <li>Parameters relative tolerance: 1e-10</li>\n     *  <li>Orthogonality tolerance: 1e-10</li>\n     *  <li>QR ranking threshold: {@link Precision#SAFE_MIN}</li>\n     * </ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer#265",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double, double, double, double, double)",
        "snippet": "    public LevenbergMarquardtOptimizer(double initialStepBoundFactor,\n                                       double costRelativeTolerance,\n                                       double parRelativeTolerance,\n                                       double orthoTolerance,\n                                       double threshold) {\n        super(null); // No custom convergence criterion.\n        this.initialStepBoundFactor = initialStepBoundFactor;\n        this.costRelativeTolerance = costRelativeTolerance;\n        this.parRelativeTolerance = parRelativeTolerance;\n        this.orthoTolerance = orthoTolerance;\n        this.qrRankingThreshold = threshold;\n    }\n",
        "begin_line": 265,
        "end_line": 276,
        "comment": "\n     * The arguments control the behaviour of the default convergence checking\n     * procedure.\n     * Additional criteria can defined through the setting of a {@link\n     * ConvergenceChecker}.\n     *\n     * @param initialStepBoundFactor Positive input variable used in\n     * determining the initial step bound. This bound is set to the\n     * product of initialStepBoundFactor and the euclidean norm of\n     * {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}\n     * itself. In most cases factor should lie in the interval\n     * {@code (0.1, 100.0)}. {@code 100} is a generally recommended value.\n     * @param costRelativeTolerance Desired relative error in the sum of\n     * squares.\n     * @param parRelativeTolerance Desired relative error in the approximate\n     * solution parameters.\n     * @param orthoTolerance Desired max cosine on the orthogonality between\n     * the function vector and the columns of the Jacobian.\n     * @param threshold Desired threshold for QR ranking. If the squared norm\n     * of a column vector is smaller or equal to this threshold during QR\n     * decomposition, it is considered to be a zero vector and hence the rank\n     * of the matrix is reduced.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "MatrixUtils.isSymmetricInternal#388",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.isSymmetricInternal(org.apache.commons.math3.linear.RealMatrix, double, boolean)",
        "snippet": "    private static boolean isSymmetricInternal(RealMatrix matrix,\n                                               double relativeTolerance,\n                                               boolean raiseException) {\n        final int rows = matrix.getRowDimension();\n        if (rows != matrix.getColumnDimension()) {\n            if (raiseException) {\n                throw new NonSquareMatrixException(rows, matrix.getColumnDimension());\n            } else {\n                return false;\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = i + 1; j < rows; j++) {\n                final double mij = matrix.getEntry(i, j);\n                final double mji = matrix.getEntry(j, i);\n                if (FastMath.abs(mij - mji) >\n                    FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * relativeTolerance) {\n                    if (raiseException) {\n                        throw new NonSymmetricMatrixException(i, j, relativeTolerance);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 388,
        "end_line": 414,
        "comment": "\n     * Checks whether a matrix is symmetric, within a given relative tolerance.\n     *\n     * @param matrix Matrix to check.\n     * @param relativeTolerance Tolerance of the symmetry check.\n     * @param raiseException If {@code true}, an exception will be raised if\n     * the matrix is not symmetric.\n     * @return {@code true} if {@code matrix} is symmetric.\n     * @throws NonSquareMatrixException if the matrix is not square.\n     * @throws NonSymmetricMatrixException if the matrix is not symmetric.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.max#3531",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.max(double, double)",
        "snippet": "    public static double max(final double a, final double b) {\n        if (a > b) {\n            return a;\n        }\n        if (a < b) {\n            return b;\n        }\n        /* if either arg is NaN, return NaN */\n        if (a != b) {\n            return Double.NaN;\n        }\n        /* min(+0.0,-0.0) == -0.0 */\n        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n        long bits = Double.doubleToRawLongBits(a);\n        if (bits == 0x8000000000000000L) {\n            return b;\n        }\n        return a;\n    }\n",
        "begin_line": 3531,
        "end_line": 3549,
        "comment": " Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1098
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.checkNotNull#262",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/MathUtils.java",
        "class_name": "org.apache.commons.math3.util.MathUtils",
        "signature": "org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object)",
        "snippet": "    public static void checkNotNull(Object o)\n        throws NullArgumentException {\n        if (o == null) {\n            throw new NullArgumentException();\n        }\n    }\n",
        "begin_line": 262,
        "end_line": 267,
        "comment": "\n     * Checks that an object is not null.\n     *\n     * @param o Object to be checked.\n     * @throws NullArgumentException if {@code o} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.setMaximalCount#95",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "signature": "org.apache.commons.math3.util.Incrementor.setMaximalCount(int)",
        "snippet": "    public void setMaximalCount(int max) {\n        maximalCount = max;\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Sets the upper limit for the counter.\n     * This does not automatically reset the current count to zero (see\n     * {@link #resetCount()}).\n     *\n     * @param max Upper limit of the counter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.resetCount#163",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "signature": "org.apache.commons.math3.util.Incrementor.resetCount()",
        "snippet": "    public void resetCount() {\n        count = 0;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\n     * Resets the counter to 0.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.abs#3016",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(double)",
        "snippet": "    public static double abs(double x) {\n        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n    }\n",
        "begin_line": 3016,
        "end_line": 3018,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#42",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math3.util.CompositeFormat",
        "signature": "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "snippet": "    public static NumberFormat getDefaultNumberFormat() {\n        return getDefaultNumberFormat(Locale.getDefault());\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance()} with the only customizing that the\n     * maximum number of fraction digits is set to 10.\n     * @return the default number format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math3.util.CompositeFormat",
        "signature": "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    public static NumberFormat getDefaultNumberFormat(final Locale locale) {\n        final NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(10);\n        return nf;\n    }\n",
        "begin_line": 53,
        "end_line": 57,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n     * customizing that the maximum number of fraction digits is set to 10.\n     * @param locale the specific locale used by the format.\n     * @return the default number format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.optimizeInternal#490",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.optimizeInternal(int, org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction, org.apache.commons.math3.optimization.OptimizationData...)",
        "snippet": "    @Deprecated\n    protected PointVectorValuePair optimizeInternal(final int maxEval,\n                                                    final MultivariateDifferentiableVectorFunction f,\n                                                    OptimizationData... optData) {\n        // XXX Conversion will be removed when the generic argument of the\n        // base class becomes \"MultivariateDifferentiableVectorFunction\".\n        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);\n    }\n",
        "begin_line": 490,
        "end_line": 497,
        "comment": "\n     * Optimize an objective function.\n     * Optimization is considered to be a weighted least-squares minimization.\n     * The cost function to be minimized is\n     * <code>&sum;weight<sub>i</sub>(objective<sub>i</sub> - target<sub>i</sub>)<sup>2</sup></code>\n     *\n     * @param maxEval Allowed number of evaluations of the objective function.\n     * @param f Objective function.\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Target}</li>\n     *  <li>{@link Weight}</li>\n     *  <li>{@link InitialGuess}</li>\n     * </ul>\n     * @return the point/value pair giving the optimal value of the objective\n     * function.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException if\n     * the maximal number of evaluations is exceeded.\n     * @throws DimensionMismatchException if the target, and weight arguments\n     * have inconsistent dimensions.\n     * @see BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,MultivariateVectorFunction,OptimizationData[])\n     * @since 3.1\n     * @deprecated As of 3.1. Override is necessary only until this class's generic\n     * argument is changed to {@code MultivariateDifferentiableVectorFunction}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.setUp#500",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.setUp()",
        "snippet": "    @Override\n    protected void setUp() {\n        super.setUp();\n\n        // Reset counter.\n        jacobianEvaluations = 0;\n\n        // Square-root of the weight matrix.\n        weightMatrixSqrt = squareRoot(getWeight());\n\n        // Store least squares problem characteristics.\n        // XXX The conversion won't be necessary when the generic argument of\n        // the base class becomes \"MultivariateDifferentiableVectorFunction\".\n        // XXX \"jF\" is not strictly necessary anymore but is currently more\n        // efficient than converting the value returned from \"getObjectiveFunction()\"\n        // every time it is used.\n        jF = FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction) getObjectiveFunction());\n\n        // Arrays shared with \"private\" and \"protected\" methods.\n        point = getStartPoint();\n        rows = getTarget().length;\n        cols = point.length;\n    }\n",
        "begin_line": 500,
        "end_line": 522,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer": "\n     * Method which a subclass <em>must</em> override whenever its internal\n     * state depend on the {@link OptimizationData input} parsed by this base\n     * class.\n     * It will be called after the parsing step performed in the\n     * {@link #optimize(int,MultivariateVectorFunction,OptimizationData[])\n     * optimize} method and just before {@link #doOptimize()}.\n     *\n     * @since 3.1\n     ",
            "org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer": null,
            "org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer": null,
            "org.apache.commons.math3.optimization.BaseOptimizer": null
        },
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.squareRoot#561",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.squareRoot(org.apache.commons.math3.linear.RealMatrix)",
        "snippet": "    private RealMatrix squareRoot(RealMatrix m) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n    }\n",
        "begin_line": 561,
        "end_line": 564,
        "comment": "\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractMultivariateVectorOptimizer.optimizeInternal#225",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.optimizeInternal(int, FUNC, org.apache.commons.math3.optimization.OptimizationData...)",
        "snippet": "    protected PointVectorValuePair optimizeInternal(int maxEval,\n                                                    FUNC f,\n                                                    OptimizationData... optData)\n        throws TooManyEvaluationsException,\n               DimensionMismatchException {\n        // Set internal state.\n        evaluations.setMaximalCount(maxEval);\n        evaluations.resetCount();\n        function = f;\n        // Retrieve other settings.\n        parseOptimizationData(optData);\n        // Check input consistency.\n        checkParameters();\n        // Allow subclasses to reset their own internal state.\n        setUp();\n        // Perform computation.\n        return doOptimize();\n    }\n",
        "begin_line": 225,
        "end_line": 242,
        "comment": "\n     * Optimize an objective function.\n     *\n     * @param maxEval Allowed number of evaluations of the objective function.\n     * @param f Objective function.\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Target}</li>\n     *  <li>{@link Weight}</li>\n     *  <li>{@link InitialGuess}</li>\n     * </ul>\n     * @return the point/value pair giving the optimal value of the objective\n     * function.\n     * @throws TooManyEvaluationsException if the maximal number of\n     * evaluations is exceeded.\n     * @throws DimensionMismatchException if the initial guess, target, and weight\n     * arguments have inconsistent dimensions.\n     *\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractMultivariateVectorOptimizer.getWeight#259",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.getWeight()",
        "snippet": "    public RealMatrix getWeight() {\n        return weightMatrix.copy();\n    }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": "\n     * Gets the weight matrix of the observations.\n     *\n     * @return the weight matrix.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractMultivariateVectorOptimizer.setUp#319",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.setUp()",
        "snippet": "    protected void setUp() {\n        // XXX Temporary code until the new internal data is used everywhere.\n        final int dim = target.length;\n        weight = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            weight[i] = weightMatrix.getEntry(i, i);\n        }\n    }\n",
        "begin_line": 319,
        "end_line": 326,
        "comment": "\n     * Method which a subclass <em>must</em> override whenever its internal\n     * state depend on the {@link OptimizationData input} parsed by this base\n     * class.\n     * It will be called after the parsing step performed in the\n     * {@link #optimize(int,MultivariateVectorFunction,OptimizationData[])\n     * optimize} method and just before {@link #doOptimize()}.\n     *\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractMultivariateVectorOptimizer.parseOptimizationData#339",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.parseOptimizationData(org.apache.commons.math3.optimization.OptimizationData...)",
        "snippet": "    private void parseOptimizationData(OptimizationData... optData) {\n        // The existing values (as set by the previous call) are reused if\n        // not provided in the argument list.\n        for (OptimizationData data : optData) {\n            if (data instanceof Target) {\n                target = ((Target) data).getTarget();\n                continue;\n            }\n            if (data instanceof Weight) {\n                weightMatrix = ((Weight) data).getWeight();\n                continue;\n            }\n            if (data instanceof InitialGuess) {\n                start = ((InitialGuess) data).getInitialGuess();\n                continue;\n            }\n        }\n    }\n",
        "begin_line": 339,
        "end_line": 356,
        "comment": "\n     * Scans the list of (required and optional) optimization data that\n     * characterize the problem.\n     *\n     * @param optData Optimization data. The following data will be looked for:\n     * <ul>\n     *  <li>{@link Target}</li>\n     *  <li>{@link Weight}</li>\n     *  <li>{@link InitialGuess}</li>\n     * </ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractMultivariateVectorOptimizer.checkParameters#364",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.checkParameters()",
        "snippet": "    private void checkParameters() {\n        if (target.length != weightMatrix.getColumnDimension()) {\n            throw new DimensionMismatchException(target.length,\n                                                 weightMatrix.getColumnDimension());\n        }\n    }\n",
        "begin_line": 364,
        "end_line": 369,
        "comment": "\n     * Check parameters consistency.\n     *\n     * @throws DimensionMismatchException if {@link #target} and\n     * {@link #weightMatrix} have inconsistent dimensions.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "Weight.Weight#43",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/Weight.java",
        "class_name": "org.apache.commons.math3.optimization.Weight",
        "signature": "org.apache.commons.math3.optimization.Weight.Weight(double[])",
        "snippet": "    public Weight(double[] weight) {\n        weightMatrix = new DiagonalMatrix(weight);\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Creates a diagonal weight matrix.\n     *\n     * @param weight List of the values of the diagonal.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "Weight.getWeight#66",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/Weight.java",
        "class_name": "org.apache.commons.math3.optimization.Weight",
        "signature": "org.apache.commons.math3.optimization.Weight.getWeight()",
        "snippet": "    public RealMatrix getWeight() {\n        return weightMatrix.copy();\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\n     * Gets the initial guess.\n     *\n     * @return the initial guess.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "Target.Target#39",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/Target.java",
        "class_name": "org.apache.commons.math3.optimization.Target",
        "signature": "org.apache.commons.math3.optimization.Target.Target(double[])",
        "snippet": "    public Target(double[] observations) {\n        target = observations.clone();\n    }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "\n     * @param observations Target values.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "Target.getTarget#48",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/Target.java",
        "class_name": "org.apache.commons.math3.optimization.Target",
        "signature": "org.apache.commons.math3.optimization.Target.getTarget()",
        "snippet": "    public double[] getTarget() {\n        return target.clone();\n    }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "\n     * Gets the initial guess.\n     *\n     * @return the initial guess.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "InitialGuess.InitialGuess#37",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/InitialGuess.java",
        "class_name": "org.apache.commons.math3.optimization.InitialGuess",
        "signature": "org.apache.commons.math3.optimization.InitialGuess.InitialGuess(double[])",
        "snippet": "    public InitialGuess(double[] startPoint) {\n        init = startPoint.clone();\n    }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "\n     * @param startPoint Initial guess.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "InitialGuess.getInitialGuess#46",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/InitialGuess.java",
        "class_name": "org.apache.commons.math3.optimization.InitialGuess",
        "signature": "org.apache.commons.math3.optimization.InitialGuess.getInitialGuess()",
        "snippet": "    public double[] getInitialGuess() {\n        return init.clone();\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "\n     * Gets the initial guess.\n     *\n     * @return the initial guess.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#98",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.text.NumberFormat)",
        "snippet": "    public RealMatrixFormat(final NumberFormat format) {\n        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,\n                DEFAULT_ROW_SEPARATOR, DEFAULT_COLUMN_SEPARATOR, format);\n    }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "\n     * Create an instance with a custom number format for components.\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#112",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public RealMatrixFormat(final String prefix, final String suffix,\n                            final String rowPrefix, final String rowSuffix,\n                            final String rowSeparator, final String columnSeparator) {\n        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,\n                CompositeFormat.getDefaultNumberFormat());\n    }\n",
        "begin_line": 112,
        "end_line": 117,
        "comment": "\n     * Create an instance with custom prefix, suffix and separator.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param rowPrefix row prefix to use instead of the default \"{\"\n     * @param rowSuffix row suffix to use instead of the default \"}\"\n     * @param rowSeparator tow separator to use instead of the default \";\"\n     * @param columnSeparator column separator to use instead of the default \", \"\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#130",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)",
        "snippet": "    public RealMatrixFormat(final String prefix, final String suffix,\n                            final String rowPrefix, final String rowSuffix,\n                            final String rowSeparator, final String columnSeparator,\n                            final NumberFormat format) {\n        this.prefix            = prefix;\n        this.suffix            = suffix;\n        this.rowPrefix         = rowPrefix;\n        this.rowSuffix         = rowSuffix;\n        this.rowSeparator      = rowSeparator;\n        this.columnSeparator   = columnSeparator;\n        this.format            = format;\n        // disable grouping to prevent parsing problems\n        this.format.setGroupingUsed(false);\n    }\n",
        "begin_line": 130,
        "end_line": 143,
        "comment": "\n     * Create an instance with custom prefix, suffix, separator and format\n     * for components.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param rowPrefix row prefix to use instead of the default \"{\"\n     * @param rowSuffix row suffix to use instead of the default \"}\"\n     * @param rowSeparator tow separator to use instead of the default \";\"\n     * @param columnSeparator column separator to use instead of the default \", \"\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.getFormat#206",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getFormat()",
        "snippet": "    public NumberFormat getFormat() {\n        return format;\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * Get the components format.\n     * @return components format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.getInstance#214",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getInstance()",
        "snippet": "    public static RealMatrixFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\n     * Returns the default real vector format for the current locale.\n     * @return the default real vector format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.getInstance#223",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getInstance(java.util.Locale)",
        "snippet": "    public static RealMatrixFormat getInstance(final Locale locale) {\n        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n     * Returns the default real vector format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the real vector format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "MatrixUtils.isSymmetric#438",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.isSymmetric(org.apache.commons.math3.linear.RealMatrix, double)",
        "snippet": "    public static boolean isSymmetric(RealMatrix matrix,\n                                      double eps) {\n        return isSymmetricInternal(matrix, eps, false);\n    }\n",
        "begin_line": 438,
        "end_line": 441,
        "comment": "\n     * Checks whether a matrix is symmetric.\n     *\n     * @param matrix Matrix to check.\n     * @param eps Relative tolerance.\n     * @return {@code true} if {@code matrix} is symmetric.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "MatrixUtils.checkMatrixIndex#452",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix, int, int)",
        "snippet": "    public static void checkMatrixIndex(final AnyMatrix m,\n                                        final int row, final int column)\n        throws OutOfRangeException {\n        checkRowIndex(m, row);\n        checkColumnIndex(m, column);\n    }\n",
        "begin_line": 452,
        "end_line": 457,
        "comment": "\n     * Check if matrix indices are valid.\n     *\n     * @param m Matrix.\n     * @param row Row index to check.\n     * @param column Column index to check.\n     * @throws OutOfRangeException if {@code row} or {@code column} is not\n     * a valid index.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "MatrixUtils.checkRowIndex#466",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkRowIndex(org.apache.commons.math3.linear.AnyMatrix, int)",
        "snippet": "    public static void checkRowIndex(final AnyMatrix m, final int row)\n        throws OutOfRangeException {\n        if (row < 0 ||\n            row >= m.getRowDimension()) {\n            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,\n                                          row, 0, m.getRowDimension() - 1);\n        }\n    }\n",
        "begin_line": 466,
        "end_line": 473,
        "comment": "\n     * Check if a row index is valid.\n     *\n     * @param m Matrix.\n     * @param row Row index to check.\n     * @throws OutOfRangeException if {@code row} is not a valid index.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "MatrixUtils.checkColumnIndex#482",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.checkColumnIndex(org.apache.commons.math3.linear.AnyMatrix, int)",
        "snippet": "    public static void checkColumnIndex(final AnyMatrix m, final int column)\n        throws OutOfRangeException {\n        if (column < 0 || column >= m.getColumnDimension()) {\n            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,\n                                           column, 0, m.getColumnDimension() - 1);\n        }\n    }\n",
        "begin_line": 482,
        "end_line": 488,
        "comment": "\n     * Check if a column index is valid.\n     *\n     * @param m Matrix.\n     * @param column Column index to check.\n     * @throws OutOfRangeException if {@code column} is not a valid index.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagonalMatrix.DiagonalMatrix#67",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java",
        "class_name": "org.apache.commons.math3.linear.DiagonalMatrix",
        "signature": "org.apache.commons.math3.linear.DiagonalMatrix.DiagonalMatrix(double[])",
        "snippet": "    public DiagonalMatrix(final double[] d) {\n        data = d.clone();\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Creates a matrix using the input array as the underlying data. \n     * <br/>\n     * The input array is copied, not referenced.\n     *\n     * @param d Data for the new matrix.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagonalMatrix.copy#105",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java",
        "class_name": "org.apache.commons.math3.linear.DiagonalMatrix",
        "signature": "org.apache.commons.math3.linear.DiagonalMatrix.copy()",
        "snippet": "    @Override\n    public RealMatrix copy() {\n        return new DiagonalMatrix(data);\n    }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Returns a (deep) copy of this.\n     *\n     * @return matrix copy\n     "
        },
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagonalMatrix.getData#201",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java",
        "class_name": "org.apache.commons.math3.linear.DiagonalMatrix",
        "signature": "org.apache.commons.math3.linear.DiagonalMatrix.getData()",
        "snippet": "    @Override\n    public double[][] getData() {\n        final int dim = getRowDimension();\n        final double[][] out = new double[dim][dim];\n\n        for (int i = 0; i < dim; i++) {\n            out[i][i] = data[i];\n        }\n\n        return out;\n    }\n",
        "begin_line": 201,
        "end_line": 211,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Returns matrix entries as a two-dimensional array.\n     *\n     * @return 2-dimensional array of entries\n     "
        },
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagonalMatrix.getEntry#234",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java",
        "class_name": "org.apache.commons.math3.linear.DiagonalMatrix",
        "signature": "org.apache.commons.math3.linear.DiagonalMatrix.getEntry(int, int)",
        "snippet": "    @Override\n    public double getEntry(final int row, final int column)\n        throws OutOfRangeException {\n        MatrixUtils.checkMatrixIndex(this, row, column);\n        return row == column ? data[row] : 0;\n    }\n",
        "begin_line": 234,
        "end_line": 239,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": " {@inheritDoc} ",
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": "\n     * Get the entry in the specified row and column. Row and column indices\n     * start at 0.\n     *\n     * @param row Row index of entry to be fetched.\n     * @param column Column index of entry to be fetched.\n     * @return the matrix entry at {@code (row, column)}.\n     * @throws OutOfRangeException if the row or column index is not valid.\n     "
        },
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagonalMatrix.getRowDimension#288",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java",
        "class_name": "org.apache.commons.math3.linear.DiagonalMatrix",
        "signature": "org.apache.commons.math3.linear.DiagonalMatrix.getRowDimension()",
        "snippet": "    @Override\n    public int getRowDimension() {\n        return data == null ? 0 : data.length;\n    }\n",
        "begin_line": 288,
        "end_line": 291,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": "\n     * Returns the number of rows of this matrix.\n     *\n     * @return the number of rows.\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagonalMatrix.getColumnDimension#294",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java",
        "class_name": "org.apache.commons.math3.linear.DiagonalMatrix",
        "signature": "org.apache.commons.math3.linear.DiagonalMatrix.getColumnDimension()",
        "snippet": "    @Override\n    public int getColumnDimension() {\n        return getRowDimension();\n    }\n",
        "begin_line": 294,
        "end_line": 297,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.AbstractRealMatrix": "\n     * Returns the number of columns of this matrix.\n     *\n     * @return the number of columns.\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealMatrix.AbstractRealMatrix#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix()",
        "snippet": "    protected AbstractRealMatrix() {}\n",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * Creates a matrix with no data\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealMatrix.isSquare#615",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.isSquare()",
        "snippet": "    public boolean isSquare() {\n        return getColumnDimension() == getRowDimension();\n    }\n",
        "begin_line": 615,
        "end_line": 617,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.RealLinearOperator": null,
            "org.apache.commons.math3.linear.RealMatrix": null,
            "org.apache.commons.math3.linear.AnyMatrix": "\n     * Is this a square matrix?\n     * @return true if the matrix is square (rowDimension = columnDimension)\n     "
        },
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionUtils.toMultivariateDifferentiableVectorFunction#725",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java",
        "class_name": "org.apache.commons.math3.analysis.FunctionUtils",
        "signature": "org.apache.commons.math3.analysis.FunctionUtils.toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)",
        "snippet": "    @Deprecated\n    public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f) {\n        return new MultivariateDifferentiableVectorFunction() {\n\n            /** {@inheritDoc} */\n            public double[] value(final double[] x) {\n                return f.value(x);\n            }\n\n            /** {@inheritDoc}\n             * @exception DimensionMismatchException if number of parameters or derivation\n             * order are higher than 1\n             */\n            public DerivativeStructure[] value(final DerivativeStructure[] t)\n                throws DimensionMismatchException, NumberIsTooLargeException {\n\n                // check parameters and orders limits\n                final int parameters = t[0].getFreeParameters();\n                final int order      = t[0].getOrder();\n                final int n          = t.length;\n                if (order > 1) {\n                    throw new NumberIsTooLargeException(order, 1, true);\n                }\n\n                // check all elements in the array are consistent\n                for (int i = 0; i < n; ++i) {\n                    if (t[i].getFreeParameters() != parameters) {\n                        throw new DimensionMismatchException(t[i].getFreeParameters(), parameters);\n                    }\n\n                    if (t[i].getOrder() != order) {\n                        throw new DimensionMismatchException(t[i].getOrder(), order);\n                    }\n                }\n\n                // delegate computation to underlying function\n                final double[] point = new double[n];\n                for (int i = 0; i < n; ++i) {\n                    point[i] = t[i].getValue();\n                }\n                final double[] value      = f.value(point);\n                final double[][] jacobian = f.jacobian().value(point);\n\n                // merge value and Jacobian into a DerivativeStructure array\n                final DerivativeStructure[] merged = new DerivativeStructure[value.length];\n                for (int k = 0; k < merged.length; ++k) {\n                    final double[] derivatives = new double[parameters + 1];\n                    derivatives[0] = value[k];\n                    final int[] orders = new int[parameters];\n                    for (int i = 0; i < parameters; ++i) {\n                        orders[i] = 1;\n                        for (int j = 0; j < n; ++j) {\n                            derivatives[i + 1] += jacobian[k][j] * t[j].getPartialDerivative(orders);\n                        }\n                        orders[i] = 0;\n                    }\n                    merged[k] = new DerivativeStructure(parameters, order, derivatives);\n                }\n\n                return merged;\n\n            }\n\n        };\n    }\n",
        "begin_line": 725,
        "end_line": 789,
        "comment": " Convert a {@link DifferentiableMultivariateVectorFunction} into a {@link MultivariateDifferentiableVectorFunction}.\n     * <p>\n     * Note that the converted function is able to handle {@link DerivativeStructure} elements\n     * that all have the same number of free parameters and order, and with order at most 1.\n     * If the function is called with inconsistent numbers of free parameters or higher order, a\n     * {@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.\n     * </p>\n     * @param f function to convert\n     * @return converted function\n     * @deprecated this conversion method is temporary in version 3.1, as the {@link\n     * DifferentiableMultivariateFunction} interface itself is deprecated\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionUtils.toDifferentiableMultivariateVectorFunction#670",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java",
        "class_name": "org.apache.commons.math3.analysis.FunctionUtils",
        "signature": "org.apache.commons.math3.analysis.FunctionUtils.toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)",
        "snippet": "    @Deprecated\n    public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f) {\n        return new DifferentiableMultivariateVectorFunction() {\n\n            /** {@inheritDoc} */\n            public double[] value(final double[] x) {\n                return f.value(x);\n            }\n\n            public MultivariateMatrixFunction jacobian() {\n                return new MultivariateMatrixFunction() {\n                    /** {@inheritDoc} */\n                    public double[][] value(final double[] x) {\n\n                        final int n = x.length;\n\n                        // delegate computation to underlying function\n                        final DerivativeStructure[] dsX = new DerivativeStructure[n];\n                        for (int i = 0; i < n; ++i) {\n                            dsX[i] = new DerivativeStructure(n, 1, i, x[i]);\n                        }\n                        final DerivativeStructure[] y = f.value(dsX);\n\n                        // extract Jacobian\n                        final double[][] jacobian = new double[y.length][n];\n                        final int[] orders = new int[n];\n                        for (int i = 0; i < y.length; ++i) {\n                            for (int j = 0; j < n; ++j) {\n                                orders[j]      = 1;\n                                jacobian[i][j] = y[i].getPartialDerivative(orders);\n                                orders[j]      = 0;\n                            }\n                        }\n\n                        return jacobian;\n\n                    }\n                };\n            }\n\n        };\n    }\n",
        "begin_line": 670,
        "end_line": 711,
        "comment": " Convert a {@link MultivariateDifferentiableVectorFunction} into a {@link DifferentiableMultivariateVectorFunction}.\n     * @param f function to convert\n     * @return converted function\n     * @deprecated this conversion method is temporary in version 3.1, as the {@link\n     * DifferentiableMultivariateVectorFunction} interface itself is deprecated\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1091
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.Incrementor#61",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "signature": "org.apache.commons.math3.util.Incrementor.Incrementor(int)",
        "snippet": "    public Incrementor(int max) {\n        this(max,\n             new MaxCountExceededCallback() {\n                 /** {@inheritDoc} */\n                 public void trigger(int max) {\n                     throw new MaxCountExceededException(max);\n                 }\n             });\n    }\n",
        "begin_line": 61,
        "end_line": 69,
        "comment": "\n     * Defines a maximal count.\n     *\n     * @param max Maximal count.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.Incrementor#52",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "signature": "org.apache.commons.math3.util.Incrementor.Incrementor()",
        "snippet": "    public Incrementor() {\n        this(0);\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * Default constructor.\n     * For the new instance to be useful, the maximal count must be set\n     * by calling {@link #setMaximalCount(int) setMaximalCount}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.Incrementor#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "signature": "org.apache.commons.math3.util.Incrementor.Incrementor(int, org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback)",
        "snippet": "    public Incrementor(int max,\n                       MaxCountExceededCallback cb) {\n        if (cb == null){\n            throw new NullArgumentException();\n        }\n        maximalCount = max;\n        maxCountCallback = cb;\n    }\n",
        "begin_line": 79,
        "end_line": 86,
        "comment": "\n     * Defines a maximal count and a callback method to be triggered at\n     * counter exhaustion.\n     *\n     * @param max Maximal count.\n     * @param cb Function to be called when the maximal count has been reached.\n     * @throws NullArgumentException if {@code cb} is {@code null}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer#133",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.PointVectorValuePair>)",
        "snippet": "    protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\n        super(checker);\n    }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractMultivariateVectorOptimizer.BaseAbstractMultivariateVectorOptimizer#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer.BaseAbstractMultivariateVectorOptimizer(org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.PointVectorValuePair>)",
        "snippet": "    protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\n        this.checker = checker;\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    }
]