[
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testFit()",
        "snippet": "    @Test\n    public void testFit() {\n        final RealDistribution rng = new UniformRealDistribution(-100, 100);\n        rng.reseedRandomGenerator(64925784252L);\n\n        final LevenbergMarquardtOptimizer optim = new LevenbergMarquardtOptimizer();\n        final PolynomialFitter fitter = new PolynomialFitter(optim);\n        final double[] coeff = { 12.9, -3.4, 2.1 }; // 12.9 - 3.4 x + 2.1 x^2\n        final PolynomialFunction f = new PolynomialFunction(coeff);\n\n        // Collect data from a known polynomial.\n        for (int i = 0; i < 100; i++) {\n            final double x = rng.sample();\n            fitter.addObservedPoint(x, f.value(x));\n        }\n\n        // Start fit from initial guesses that are far from the optimal values.\n        final double[] best = fitter.fit(new double[] { -1e-20, 3e15, -5e25 });\n\n        TestUtils.assertEquals(\"best != coeff\", coeff, best, 1e-12);\n    }\n",
        "begin_line": 43,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 76)",
            "(line 46,col 9)-(line 46,col 48)",
            "(line 48,col 9)-(line 48,col 84)",
            "(line 49,col 9)-(line 49,col 68)",
            "(line 50,col 9)-(line 50,col 51)",
            "(line 51,col 9)-(line 51,col 67)",
            "(line 54,col 9)-(line 57,col 9)",
            "(line 60,col 9)-(line 60,col 79)",
            "(line 62,col 9)-(line 62,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testNoError()",
        "snippet": "    @Test\n    public void testNoError() {\n        Random randomizer = new Random(64925784252l);\n        for (int degree = 1; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (int i = 0; i <= degree; ++i) {\n                fitter.addObservedPoint(1.0, i, p.value(i));\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                               (1.0 + FastMath.abs(p.value(x)));\n                Assert.assertEquals(0.0, error, 1.0e-6);\n            }\n        }\n    }\n",
        "begin_line": 65,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 53)",
            "(line 68,col 9)-(line 84,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testSmallError()",
        "snippet": "    @Test\n    public void testSmallError() {\n        Random randomizer = new Random(53882150042l);\n        double maxError = 0;\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                fitter.addObservedPoint(1.0, x,\n                                        p.value(x) + 0.1 * randomizer.nextGaussian());\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                              (1.0 + FastMath.abs(p.value(x)));\n                maxError = FastMath.max(maxError, error);\n                Assert.assertTrue(FastMath.abs(error) < 0.1);\n            }\n        }\n        Assert.assertTrue(maxError > 0.01);\n    }\n",
        "begin_line": 87,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 53)",
            "(line 90,col 9)-(line 90,col 28)",
            "(line 91,col 9)-(line 109,col 9)",
            "(line 110,col 9)-(line 110,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testMath798()",
        "snippet": "    @Test\n    public void testMath798() {\n        final double tol = 1e-14;\n        final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol);\n        final double[] init = new double[] { 0, 0 };\n        final int maxEval = 3;\n\n        final double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);\n        final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);\n\n        for (int i = 0; i <= 1; i++) {\n            Assert.assertEquals(lm[i], gn[i], tol);\n        }\n    }\n",
        "begin_line": 113,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 33)",
            "(line 116,col 9)-(line 116,col 88)",
            "(line 117,col 9)-(line 117,col 52)",
            "(line 118,col 9)-(line 118,col 30)",
            "(line 120,col 9)-(line 120,col 95)",
            "(line 121,col 9)-(line 121,col 88)",
            "(line 123,col 9)-(line 125,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testMath798WithToleranceTooLow()",
        "snippet": "    @Test(expected=TooManyEvaluationsException.class)\n    public void testMath798WithToleranceTooLow() {\n        final double tol = 1e-100;\n        final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol);\n        final double[] init = new double[] { 0, 0 };\n        final int maxEval = 10000; // Trying hard to fit.\n\n        final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);\n    }\n",
        "begin_line": 134,
        "end_line": 142,
        "comment": "\n     * This test shows that the user can set the maximum number of iterations\n     * to avoid running for too long.\n     * But in the test case, the real problem is that the tolerance is way too\n     * stringent.\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 34)",
            "(line 137,col 9)-(line 137,col 88)",
            "(line 138,col 9)-(line 138,col 52)",
            "(line 139,col 9)-(line 139,col 34)",
            "(line 141,col 9)-(line 141,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testMath798WithToleranceTooLowButNoException()",
        "snippet": "    @Test\n    public void testMath798WithToleranceTooLowButNoException() {\n        final double tol = 1e-100;\n        final double[] init = new double[] { 0, 0 };\n        final int maxEval = 10000; // Trying hard to fit.\n        final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol, maxEval);\n\n        final double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);\n        final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);\n\n        for (int i = 0; i <= 1; i++) {\n            Assert.assertEquals(lm[i], gn[i], 1e-15);\n        }\n    }\n",
        "begin_line": 151,
        "end_line": 164,
        "comment": "\n     * This test shows that the user can set the maximum number of iterations\n     * to avoid running for too long.\n     * Even if the real problem is that the tolerance is way too stringent, it\n     * is possible to get the best solution so far, i.e. a checker will return\n     * the point when the maximum iteration count has been reached.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 34)",
            "(line 154,col 9)-(line 154,col 52)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 156,col 9)-(line 156,col 97)",
            "(line 158,col 9)-(line 158,col 95)",
            "(line 159,col 9)-(line 159,col 88)",
            "(line 161,col 9)-(line 163,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.doMath798(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer, int, double[])",
        "snippet": "    private double[] doMath798(DifferentiableMultivariateVectorOptimizer optimizer,\n                               int maxEval,\n                               double[] init) {\n        final CurveFitter<Parametric> fitter = new CurveFitter<Parametric>(optimizer);\n\n        fitter.addObservedPoint(-0.2, -7.12442E-13);\n        fitter.addObservedPoint(-0.199, -4.33397E-13);\n        fitter.addObservedPoint(-0.198, -2.823E-13);\n        fitter.addObservedPoint(-0.197, -1.40405E-13);\n        fitter.addObservedPoint(-0.196, -7.80821E-15);\n        fitter.addObservedPoint(-0.195, 6.20484E-14);\n        fitter.addObservedPoint(-0.194, 7.24673E-14);\n        fitter.addObservedPoint(-0.193, 1.47152E-13);\n        fitter.addObservedPoint(-0.192, 1.9629E-13);\n        fitter.addObservedPoint(-0.191, 2.12038E-13);\n        fitter.addObservedPoint(-0.19, 2.46906E-13);\n        fitter.addObservedPoint(-0.189, 2.77495E-13);\n        fitter.addObservedPoint(-0.188, 2.51281E-13);\n        fitter.addObservedPoint(-0.187, 2.64001E-13);\n        fitter.addObservedPoint(-0.186, 2.8882E-13);\n        fitter.addObservedPoint(-0.185, 3.13604E-13);\n        fitter.addObservedPoint(-0.184, 3.14248E-13);\n        fitter.addObservedPoint(-0.183, 3.1172E-13);\n        fitter.addObservedPoint(-0.182, 3.12912E-13);\n        fitter.addObservedPoint(-0.181, 3.06761E-13);\n        fitter.addObservedPoint(-0.18, 2.8559E-13);\n        fitter.addObservedPoint(-0.179, 2.86806E-13);\n        fitter.addObservedPoint(-0.178, 2.985E-13);\n        fitter.addObservedPoint(-0.177, 2.67148E-13);\n        fitter.addObservedPoint(-0.176, 2.94173E-13);\n        fitter.addObservedPoint(-0.175, 3.27528E-13);\n        fitter.addObservedPoint(-0.174, 3.33858E-13);\n        fitter.addObservedPoint(-0.173, 2.97511E-13);\n        fitter.addObservedPoint(-0.172, 2.8615E-13);\n        fitter.addObservedPoint(-0.171, 2.84624E-13);\n\n        final double[] coeff = fitter.fit(maxEval,\n                                          new PolynomialFunction.Parametric(),\n                                          init);\n        return coeff;\n    }\n",
        "begin_line": 172,
        "end_line": 212,
        "comment": "\n     * @param optimizer Optimizer.\n     * @param maxEval Maximum number of function evaluations.\n     * @param init First guess.\n     * @return the solution found by the given optimizer.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 86)",
            "(line 177,col 9)-(line 177,col 52)",
            "(line 178,col 9)-(line 178,col 54)",
            "(line 179,col 9)-(line 179,col 52)",
            "(line 180,col 9)-(line 180,col 54)",
            "(line 181,col 9)-(line 181,col 54)",
            "(line 182,col 9)-(line 182,col 53)",
            "(line 183,col 9)-(line 183,col 53)",
            "(line 184,col 9)-(line 184,col 53)",
            "(line 185,col 9)-(line 185,col 52)",
            "(line 186,col 9)-(line 186,col 53)",
            "(line 187,col 9)-(line 187,col 52)",
            "(line 188,col 9)-(line 188,col 53)",
            "(line 189,col 9)-(line 189,col 53)",
            "(line 190,col 9)-(line 190,col 53)",
            "(line 191,col 9)-(line 191,col 52)",
            "(line 192,col 9)-(line 192,col 53)",
            "(line 193,col 9)-(line 193,col 53)",
            "(line 194,col 9)-(line 194,col 52)",
            "(line 195,col 9)-(line 195,col 53)",
            "(line 196,col 9)-(line 196,col 53)",
            "(line 197,col 9)-(line 197,col 51)",
            "(line 198,col 9)-(line 198,col 53)",
            "(line 199,col 9)-(line 199,col 51)",
            "(line 200,col 9)-(line 200,col 53)",
            "(line 201,col 9)-(line 201,col 53)",
            "(line 202,col 9)-(line 202,col 53)",
            "(line 203,col 9)-(line 203,col 53)",
            "(line 204,col 9)-(line 204,col 53)",
            "(line 205,col 9)-(line 205,col 52)",
            "(line 206,col 9)-(line 206,col 53)",
            "(line 208,col 9)-(line 210,col 48)",
            "(line 211,col 9)-(line 211,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testRedundantSolvable()",
        "snippet": "    @Test\n    public void testRedundantSolvable() {\n        // Levenberg-Marquardt should handle redundant information gracefully\n        checkUnsolvableProblem(new LevenbergMarquardtOptimizer(), true);\n    }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 217,col 9)-(line 217,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testRedundantUnsolvable()",
        "snippet": "    @Test\n    public void testRedundantUnsolvable() {\n        // Gauss-Newton should not be able to solve redundant information\n        checkUnsolvableProblem(new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-15, 1e-15)), false);\n    }\n",
        "begin_line": 220,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 114)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testLargeSample()",
        "snippet": "    @Test\n    public void testLargeSample() {\n        Random randomizer = new Random(0x5551480dca5b369bl);\n        double maxError = 0;\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (int i = 0; i < 40000; ++i) {\n                double x = -1.0 + i / 20000.0;\n                fitter.addObservedPoint(1.0, x,\n                                        p.value(x) + 0.1 * randomizer.nextGaussian());\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                              (1.0 + FastMath.abs(p.value(x)));\n                maxError = FastMath.max(maxError, error);\n                Assert.assertTrue(FastMath.abs(error) < 0.01);\n            }\n        }\n        Assert.assertTrue(maxError > 0.001);\n    }\n",
        "begin_line": 226,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 228,col 9)-(line 228,col 60)",
            "(line 229,col 9)-(line 229,col 28)",
            "(line 230,col 9)-(line 249,col 9)",
            "(line 250,col 9)-(line 250,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.checkUnsolvableProblem(org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer, boolean)",
        "snippet": "    private void checkUnsolvableProblem(DifferentiableMultivariateVectorOptimizer optimizer,\n                                        boolean solvable) {\n        Random randomizer = new Random(1248788532l);\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(optimizer);\n\n            // reusing the same point over and over again does not bring\n            // information, the problem cannot be solved in this case for\n            // degrees greater than 1 (but one point is sufficient for\n            // degree 0)\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                fitter.addObservedPoint(1.0, 0.0, p.value(0.0));\n            }\n\n            try {\n                final double[] init = new double[degree + 1];\n                fitter.fit(init);\n                Assert.assertTrue(solvable || (degree == 0));\n            } catch(ConvergenceException e) {\n                Assert.assertTrue((! solvable) && (degree > 0));\n            }\n        }\n    }\n",
        "begin_line": 253,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 52)",
            "(line 256,col 9)-(line 276,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "signature": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.buildRandomPolynomial(int, java.util.Random)",
        "snippet": "    private PolynomialFunction buildRandomPolynomial(int degree, Random randomizer) {\n        final double[] coefficients = new double[degree + 1];\n        for (int i = 0; i <= degree; ++i) {\n            coefficients[i] = randomizer.nextGaussian();\n        }\n        return new PolynomialFunction(coefficients);\n    }\n",
        "begin_line": 279,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 61)",
            "(line 281,col 9)-(line 283,col 9)",
            "(line 284,col 9)-(line 284,col 52)"
        ]
    }
]