[
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.RemoveUnusedVarsTest()",
        "snippet": "  public RemoveUnusedVarsTest() {\n    super(\"function alert() {}\");\n    enableNormalize();\n  }\n",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 27,col 5)-(line 27,col 33)",
            "(line 28,col 5)-(line 28,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    removeGlobal = true;\n    preserveFunctionExpressionNames = false;\n    modifyCallSites = false;\n  }\n",
        "begin_line": 31,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 24)",
            "(line 34,col 5)-(line 34,col 44)",
            "(line 35,col 5)-(line 35,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new RemoveUnusedVars(\n        compiler, removeGlobal, preserveFunctionExpressionNames,\n        modifyCallSites);\n  }\n",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 42,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveUnusedVars()",
        "snippet": "  public void testRemoveUnusedVars() {\n    // Test lots of stuff\n    test(\"var a;var b=3;var c=function(){};var x=A();var y; var z;\" +\n         \"function A(){B()} function B(){C(b)} function C(){} \" +\n         \"function X(){Y()} function Y(z){Z(x)} function Z(){y} \" +\n         \"P=function(){A()}; \" +\n         \"try{0}catch(e){a}\",\n\n         \"var a;var b=3;A();function A(){B()}\" +\n         \"function B(){C(b)}\" +\n         \"function C(){}\" +\n         \"P=function(){A()}\" +\n         \";try{0}catch(e){a}\");\n\n    // Test removal from if {} blocks\n    test(\"var i=0;var j=0;if(i>0){var k=1;}\",\n         \"var i=0;if(i>0);\");\n\n    // Test with for loop\n    test(\"for (var i in booyah) {\" +\n         \"  if (i > 0) x += ', ';\" +\n         \"  var arg = 'foo';\" +\n         \"  if (arg.length > 40) {\" +\n         \"    var unused = 'bar';\" +   // this variable is unused\n         \"    arg = arg.substr(0, 40) + '...';\" +\n         \"  }\" +\n         \"  x += arg;\" +\n         \"}\",\n\n         \"for(var i in booyah){if(i>0)x+=\\\", \\\";\" +\n         \"var arg=\\\"foo\\\";if(arg.length>40)arg=arg.substr(0,40)+\\\"...\\\";\" +\n         \"x+=arg}\");\n\n    // Test with function expressions in another function call\n    test(\"function A(){}\" +\n         \"if(0){function B(){}}win.setTimeout(function(){A()})\",\n         \"function A(){}\" +\n         \"if(0);win.setTimeout(function(){A()})\");\n\n    // Test with recursive functions\n    test(\"function A(){A()}function B(){B()}B()\",\n         \"function B(){B()}B()\");\n\n    // Test with multiple var declarations.\n    test(\"var x,y=2,z=3;A(x);B(z);var a,b,c=4;C()\",\n         \"var x,z=3;A(x);B(z);C()\");\n\n    // Test with for loop declarations\n    test(\"for(var i=0,j=0;i<10;){}\" +\n         \"for(var x=0,y=0;;y++){}\" +\n         \"for(var a,b;;){a}\" +\n         \"for(var c,d;;);\" +\n         \"for(var item in items){}\",\n\n         \"for(var i=0;i<10;);\" +\n         \"for(var y=0;;y++);\" +\n         \"for(var a;;)a;\" +\n         \"for(;;);\" +\n         \"for(var item in items);\");\n\n    // Test multiple passes required\n    test(\"var a,b,c,d;var e=[b,c];var x=e[3];var f=[d];print(f[0])\",\n         \"var d;var f=[d];print(f[0])\");\n\n    // Test proper scoping (static vs dynamic)\n    test(\"var x;function A(){var x;B()}function B(){print(x)}A()\",\n         \"var x;function A(){B()}function B(){print(x)}A()\");\n\n    // Test closures in a return statement\n    test(\"function A(){var x;return function(){print(x)}}A()\",\n         \"function A(){var x;return function(){print(x)}}A()\");\n\n    // Test other closures, multiple passes\n    test(\"function A(){}function B(){\" +\n         \"var c,d,e,f,g,h;\" +\n         \"function C(){print(c)}\" +\n         \"var handler=function(){print(d)};\" +\n         \"var handler2=function(){handler()};\" +\n         \"e=function(){print(e)};\" +\n         \"if(1){function G(){print(g)}}\" +\n         \"arr=[function(){print(h)}];\" +\n         \"return function(){print(f)}}B()\",\n\n         \"function B(){\" +\n         \"var f,h;\" +\n         \"if(1);\" +\n         \"arr=[function(){print(h)}];\" +\n         \"return function(){print(f)}}B()\");\n\n    // Test exported names\n    test(\"var a,b=1; function _A1() {this.foo(a)}\",\n         \"var a;function _A1(){this.foo(a)}\");\n\n    // Test undefined (i.e. externally defined) names\n    test(\"undefinedVar = 1\", \"undefinedVar=1\");\n\n    // Test unused vars with side effects\n    test(\"var a,b=foo(),c=i++,d;var e=boo();var f;print(d);\",\n         \"foo(); i++; var d; boo(); print(d)\");\n\n    test(\"var a,b=foo()\", \"foo()\");\n    test(\"var b=foo(),a\", \"foo()\");\n    test(\"var a,b=foo(a)\", \"var a; foo(a);\");\n  }\n",
        "begin_line": 45,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 57,col 31)",
            "(line 60,col 5)-(line 61,col 29)",
            "(line 64,col 5)-(line 76,col 20)",
            "(line 79,col 5)-(line 82,col 50)",
            "(line 85,col 5)-(line 86,col 33)",
            "(line 89,col 5)-(line 90,col 36)",
            "(line 93,col 5)-(line 103,col 36)",
            "(line 106,col 5)-(line 107,col 40)",
            "(line 110,col 5)-(line 111,col 61)",
            "(line 114,col 5)-(line 115,col 63)",
            "(line 118,col 5)-(line 132,col 44)",
            "(line 135,col 5)-(line 136,col 46)",
            "(line 139,col 5)-(line 139,col 47)",
            "(line 142,col 5)-(line 143,col 47)",
            "(line 145,col 5)-(line 145,col 35)",
            "(line 146,col 5)-(line 146,col 35)",
            "(line 147,col 5)-(line 147,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionArgRemoval()",
        "snippet": "  public void testFunctionArgRemoval() {\n    // remove all function arguments\n    test(\"var b=function(c,d){return};b(1,2)\",\n         \"var b=function(){return};b(1,2)\");\n\n    // remove no function arguments\n    testSame(\"var b=function(c,d){return c+d};b(1,2)\");\n    testSame(\"var b=function(e,f,c,d){return c+d};b(1,2)\");\n\n    // remove some function arguments\n    test(\"var b=function(c,d,e,f){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,c,f,d,g){return c+d};b(1,2)\",\n         \"var b=function(e,c,f,d){return c+d};b(1,2)\");\n  }\n",
        "begin_line": 150,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 153,col 44)",
            "(line 156,col 5)-(line 156,col 55)",
            "(line 157,col 5)-(line 157,col 59)",
            "(line 160,col 5)-(line 161,col 51)",
            "(line 162,col 5)-(line 163,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionArgRemovalFromCallSites()",
        "snippet": "  public void testFunctionArgRemovalFromCallSites() {\n    this.modifyCallSites = true;\n\n    // remove all function arguments\n    test(\"var b=function(c,d){return};b(1,2)\",\n         \"var b=function(){return};b()\");\n\n    // remove no function arguments\n    testSame(\"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,f,c,d){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b()\");\n\n    // remove some function arguments\n    test(\"var b=function(c,d,e,f){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,c,f,d,g){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(2)\");\n  }\n",
        "begin_line": 166,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 32)",
            "(line 170,col 5)-(line 171,col 41)",
            "(line 174,col 5)-(line 174,col 55)",
            "(line 175,col 5)-(line 176,col 48)",
            "(line 179,col 5)-(line 180,col 51)",
            "(line 181,col 5)-(line 182,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionsDeadButEscaped()",
        "snippet": "  public void testFunctionsDeadButEscaped() {\n    testSame(\"function b(a) { a = 1; print(arguments[0]) }; b(6)\");\n    testSame(\"function b(a) { a = 1; arguments=1; }; b(6)\");\n    testSame(\"function b(a) { var c = 2; a = c; print(arguments[0]) }; b(6)\");\n  }\n",
        "begin_line": 185,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 67)",
            "(line 187,col 5)-(line 187,col 60)",
            "(line 188,col 5)-(line 188,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testVarInControlStructure()",
        "snippet": "  public void testVarInControlStructure() {\n    test(\"if (true) var b = 3;\", \"if(true);\");\n    test(\"if (true) var b = 3; else var c = 5;\", \"if(true);else;\");\n    test(\"while (true) var b = 3;\", \"while(true);\");\n    test(\"for (;;) var b = 3;\", \"for(;;);\");\n    test(\"do var b = 3; while(true)\", \"do;while(true)\");\n    test(\"with (true) var b = 3;\", \"with(true);\");\n    test(\"f: var b = 3;\",\"f:{}\");\n  }\n",
        "begin_line": 191,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 46)",
            "(line 193,col 5)-(line 193,col 67)",
            "(line 194,col 5)-(line 194,col 52)",
            "(line 195,col 5)-(line 195,col 44)",
            "(line 196,col 5)-(line 196,col 56)",
            "(line 197,col 5)-(line 197,col 50)",
            "(line 198,col 5)-(line 198,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRValueHoisting()",
        "snippet": "  public void testRValueHoisting() {\n    test(\"var x = foo();\", \"foo()\");\n    test(\"var x = {a: foo()};\", \"({a:foo()})\");\n\n    test(\"var x=function y(){}\", \"\");\n  }\n",
        "begin_line": 201,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 36)",
            "(line 203,col 5)-(line 203,col 47)",
            "(line 205,col 5)-(line 205,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testModule()",
        "snippet": "  public void testModule() {\n    test(createModules(\n             \"var unreferenced=1; function x() { foo(); }\" +\n             \"function uncalled() { var x; return 2; }\",\n             \"var a,b; function foo() { this.foo(a); } x()\"),\n         new String[] {\n           \"function x(){foo()}\",\n           \"var a;function foo(){this.foo(a)}x()\"\n         });\n  }\n",
        "begin_line": 208,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 209,col 5)-(line 216,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRecursiveFunction1()",
        "snippet": "  public void testRecursiveFunction1() {\n    testSame(\"(function x(){return x()})()\");\n  }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRecursiveFunction2()",
        "snippet": "  public void testRecursiveFunction2() {\n    test(\"var x = 3; (function x() { return x(); })();\",\n         \"(function x$$1(){return x$$1()})()\");\n  }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 225,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionWithName1()",
        "snippet": "  public void testFunctionWithName1() {\n    test(\"var x=function f(){};x()\",\n         \"var x=function(){};x()\");\n\n    preserveFunctionExpressionNames = true;\n    testSame(\"var x=function f(){};x()\");\n  }\n",
        "begin_line": 228,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 229,col 5)-(line 230,col 35)",
            "(line 232,col 5)-(line 232,col 43)",
            "(line 233,col 5)-(line 233,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionWithName2()",
        "snippet": "  public void testFunctionWithName2() {\n    test(\"foo(function bar(){})\",\n         \"foo(function(){})\");\n\n    preserveFunctionExpressionNames = true;\n    testSame(\"foo(function bar(){})\");\n  }\n",
        "begin_line": 236,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 237,col 5)-(line 238,col 30)",
            "(line 240,col 5)-(line 240,col 43)",
            "(line 241,col 5)-(line 241,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal1()",
        "snippet": "  public void testRemoveGlobal1() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"var y=function(x){var z;}\", \"var y=function(){}\");\n  }\n",
        "begin_line": 244,
        "end_line": 248,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 245,col 25)",
            "(line 246,col 5)-(line 246,col 24)",
            "(line 247,col 5)-(line 247,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal2()",
        "snippet": "  public void testRemoveGlobal2() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"function y(x){var z;}\", \"function y(){}\");\n  }\n",
        "begin_line": 250,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 251,col 5)-(line 251,col 25)",
            "(line 252,col 5)-(line 252,col 24)",
            "(line 253,col 5)-(line 253,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal3()",
        "snippet": "  public void testRemoveGlobal3() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"function x(){function y(x){var z;}y()}\",\n         \"function x(){function y(){}y()}\");\n  }\n",
        "begin_line": 256,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 257,col 5)-(line 257,col 25)",
            "(line 258,col 5)-(line 258,col 24)",
            "(line 259,col 5)-(line 260,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveGlobal4()",
        "snippet": "  public void testRemoveGlobal4() {\n    removeGlobal = false;\n    testSame(\"var x=1\");\n    test(\"function x(){function y(x){var z;}}\",\n         \"function x(){}\");\n  }\n",
        "begin_line": 263,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 264,col 25)",
            "(line 265,col 5)-(line 265,col 24)",
            "(line 266,col 5)-(line 267,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue168a()",
        "snippet": "  public void testIssue168a() {\n    test(\"function _a(){\" +\n         \"  (function(x){ _b(); })(1);\" +\n         \"}\" +\n         \"function _b(){\" +\n         \"  _a();\" +\n         \"}\",\n         \"function _a(){(function(){_b()})(1)}\" +\n         \"function _b(){_a()}\");\n  }\n",
        "begin_line": 270,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 278,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue168b()",
        "snippet": "  public void testIssue168b() {\n    removeGlobal = false;\n    test(\"function a(){\" +\n         \"  (function(x){ b(); })(1);\" +\n         \"}\" +\n         \"function b(){\" +\n         \"  a();\" +\n         \"}\",\n         \"function a(){(function(){b()})(1)}\" +\n         \"function b(){a()}\");\n  }\n",
        "begin_line": 281,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 25)",
            "(line 283,col 5)-(line 290,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign1()",
        "snippet": "  public void testUnusedAssign1() {\n    test(\"var x = 3; x = 5;\", \"\");\n  }\n",
        "begin_line": 293,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign2()",
        "snippet": "  public void testUnusedAssign2() {\n    test(\"function f(a) { a = 3; } this.x = f;\",\n         \"function f(){} this.x=f\");\n  }\n",
        "begin_line": 297,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 299,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign3()",
        "snippet": "  public void testUnusedAssign3() {\n    // e can't be removed, so we don't try to remove the dead assign.\n    // We might be able to improve on this case.\n    test(\"try { throw ''; } catch (e) { e = 3; }\",\n        \"try{throw\\\"\\\";}catch(e){e=3}\");\n  }\n",
        "begin_line": 302,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 305,col 5)-(line 306,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign4()",
        "snippet": "  public void testUnusedAssign4() {\n    test(\"function f(a, b) { this.foo(b); a = 3; } this.x = f;\",\n        \"function f(a,b){this.foo(b);}this.x=f\");\n  }\n",
        "begin_line": 309,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 310,col 5)-(line 311,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign5()",
        "snippet": "  public void testUnusedAssign5() {\n    test(\"var z = function f() { f = 3; }; z();\",\n         \"var z=function(){};z()\");\n  }\n",
        "begin_line": 314,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 316,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign5b()",
        "snippet": "  public void testUnusedAssign5b() {\n    test(\"var z = function f() { f = alert(); }; z();\",\n         \"var z=function(){alert()};z()\");\n  }\n",
        "begin_line": 319,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 320,col 5)-(line 321,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign6()",
        "snippet": "  public void testUnusedAssign6() {\n    test(\"var z; z = 3;\", \"\");\n  }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 325,col 5)-(line 325,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign6b()",
        "snippet": "  public void testUnusedAssign6b() {\n    test(\"var z; z = alert();\", \"alert()\");\n  }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign7()",
        "snippet": "  public void testUnusedAssign7() {\n    // This loop is normalized to \"var i;for(i in...\"\n    test(\"var a = 3; for (var i in {}) { i = a; }\",\n         // TODO(johnlenz): \"i = a\" should be removed here.\n         \"var a = 3; var i; for (i in {}) {i = a;}\");\n  }\n",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 336,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedAssign8()",
        "snippet": "  public void testUnusedAssign8() {\n    // This loop is normalized to \"var i;for(i in...\"\n    test(\"var a = 3; for (var i in {}) { i = a; } alert(a);\",\n         // TODO(johnlenz): \"i = a\" should be removed here.\n         \"var a = 3; var i; for (i in {}) {i = a} alert(a);\");\n  }\n",
        "begin_line": 339,
        "end_line": 344,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 343,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign1()",
        "snippet": "  public void testUnusedPropAssign1() {\n    test(\"var x = {}; x.foo = 3;\", \"\");\n  }\n",
        "begin_line": 346,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 347,col 5)-(line 347,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign1b()",
        "snippet": "  public void testUnusedPropAssign1b() {\n    test(\"var x = {}; x.foo = alert();\", \"alert()\");\n  }\n",
        "begin_line": 350,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 351,col 5)-(line 351,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign2()",
        "snippet": "  public void testUnusedPropAssign2() {\n    test(\"var x = {}; x['foo'] = 3;\", \"\");\n  }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 355,col 5)-(line 355,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign2b()",
        "snippet": "  public void testUnusedPropAssign2b() {\n    test(\"var x = {}; x[alert()] = alert();\", \"alert(),alert()\");\n  }\n",
        "begin_line": 358,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 359,col 5)-(line 359,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign3()",
        "snippet": "  public void testUnusedPropAssign3() {\n    test(\"var x = {}; x['foo'] = {}; x['bar'] = 3\", \"\");\n  }\n",
        "begin_line": 362,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 363,col 5)-(line 363,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign3b()",
        "snippet": "  public void testUnusedPropAssign3b() {\n    test(\"var x = {}; x[alert()] = alert(); x[alert() + alert()] = alert()\",\n         \"alert(),alert();(alert() + alert()),alert()\");\n  }\n",
        "begin_line": 366,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 368,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign4()",
        "snippet": "  public void testUnusedPropAssign4() {\n    test(\"var x = {foo: 3}; x['foo'] = 5;\", \"\");\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign5()",
        "snippet": "  public void testUnusedPropAssign5() {\n    test(\"var x = {foo: bar()}; x['foo'] = 5;\",\n         \"var x={foo:bar()};x[\\\"foo\\\"]=5\");\n  }\n",
        "begin_line": 375,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 377,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign6()",
        "snippet": "  public void testUnusedPropAssign6() {\n    test(\"var x = function() {}; x.prototype.bar = function() {};\", \"\");\n  }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 381,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign7()",
        "snippet": "  public void testUnusedPropAssign7() {\n    test(\"var x = {}; x[x.foo] = x.bar;\", \"\");\n  }\n",
        "begin_line": 384,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign7b()",
        "snippet": "  public void testUnusedPropAssign7b() {\n    testSame(\"var x = {}; x[x.foo] = alert(x.bar);\");\n  }\n",
        "begin_line": 388,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 389,col 5)-(line 389,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUnusedPropAssign7c()",
        "snippet": "  public void testUnusedPropAssign7c() {\n    test(\"var x = {}; x[alert(x.foo)] = x.bar;\",\n         \"var x={};x[alert(x.foo)]=x.bar\");\n  }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 394,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign1()",
        "snippet": "  public void testUsedPropAssign1() {\n    test(\"function f(x) { x.bar = 3; } f({});\",\n         \"function f(x){x.bar=3}f({})\");\n  }\n",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 399,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign2()",
        "snippet": "  public void testUsedPropAssign2() {\n    test(\"try { throw z; } catch (e) { e.bar = 3; }\",\n         \"try{throw z;}catch(e){e.bar=3}\");\n  }\n",
        "begin_line": 402,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 404,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign3()",
        "snippet": "  public void testUsedPropAssign3() {\n    // This pass does not do flow analysis.\n    test(\"var x = {}; x.foo = 3; x = bar();\",\n         \"var x={};x.foo=3;x=bar()\");\n  }\n",
        "begin_line": 407,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 409,col 5)-(line 410,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign4()",
        "snippet": "  public void testUsedPropAssign4() {\n    test(\"var y = foo(); var x = {}; x.foo = 3; y[x.foo] = 5;\",\n         \"var y=foo();var x={};x.foo=3;y[x.foo]=5\");\n  }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 415,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign5()",
        "snippet": "  public void testUsedPropAssign5() {\n    test(\"var y = foo(); var x = 3; y[x] = 5;\",\n         \"var y=foo();var x=3;y[x]=5\");\n  }\n",
        "begin_line": 418,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 420,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign6()",
        "snippet": "  public void testUsedPropAssign6() {\n    test(\"var x = newNodeInDom(doc); x.innerHTML = 'new text';\",\n         \"var x=newNodeInDom(doc);x.innerHTML=\\\"new text\\\"\");\n  }\n",
        "begin_line": 423,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 425,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign7()",
        "snippet": "  public void testUsedPropAssign7() {\n    testSame(\"var x = {}; for (x in alert()) { x.foo = 3; }\");\n  }\n",
        "begin_line": 428,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign8()",
        "snippet": "  public void testUsedPropAssign8() {\n    testSame(\"for (var x in alert()) { x.foo = 3; }\");\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testUsedPropAssign9()",
        "snippet": "  public void testUsedPropAssign9() {\n    testSame(\n        \"var x = {}; x.foo = newNodeInDom(doc); x.foo.innerHTML = 'new test';\");\n  }\n",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 437,col 5)-(line 438,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies1()",
        "snippet": "  public void testDependencies1() {\n    test(\"var a = 3; var b = function() { alert(a); };\", \"\");\n  }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies1b()",
        "snippet": "  public void testDependencies1b() {\n    test(\"var a = 3; var b = alert(function() { alert(a); });\",\n         \"var a=3;alert(function(){alert(a)})\");\n  }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 447,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies1c()",
        "snippet": "  public void testDependencies1c() {\n    test(\"var a = 3; var _b = function() { alert(a); };\",\n         \"var a=3;var _b=function(){alert(a)}\");\n  }\n",
        "begin_line": 450,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 451,col 5)-(line 452,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies2()",
        "snippet": "  public void testDependencies2() {\n    test(\"var a = 3; var b = 3; b = function() { alert(a); };\", \"\");\n  }\n",
        "begin_line": 455,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 456,col 5)-(line 456,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies2b()",
        "snippet": "  public void testDependencies2b() {\n    test(\"var a = 3; var b = 3; b = alert(function() { alert(a); });\",\n         \"var a=3;alert(function(){alert(a)})\");\n  }\n",
        "begin_line": 459,
        "end_line": 462,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 461,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDependencies2c()",
        "snippet": "  public void testDependencies2c() {\n    testSame(\"var a=3;var _b=3;_b=function(){alert(a)}\");\n  }\n",
        "begin_line": 464,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 465,col 5)-(line 465,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testGlobalVarReferencesLocalVar()",
        "snippet": "  public void testGlobalVarReferencesLocalVar() {\n    testSame(\"var a=3;function f(){var b=4;a=b}alert(a + f())\");\n  }\n",
        "begin_line": 468,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 469,col 5)-(line 469,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testLocalVarReferencesGlobalVar1()",
        "snippet": "  public void testLocalVarReferencesGlobalVar1() {\n    testSame(\"var a=3;function f(b, c){b=a; alert(b + c);} f();\");\n  }\n",
        "begin_line": 472,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testLocalVarReferencesGlobalVar2()",
        "snippet": "  public void testLocalVarReferencesGlobalVar2() {\n    test(\"var a=3;function f(b, c){b=a; alert(c);} f();\",\n         \"function f(b, c) { alert(c); } f();\");\n    this.modifyCallSites = true;\n    test(\"var a=3;function f(b, c){b=a; alert(c);} f();\",\n         \"function f(c) { alert(c); } f();\");\n  }\n",
        "begin_line": 476,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 477,col 5)-(line 478,col 48)",
            "(line 479,col 5)-(line 479,col 32)",
            "(line 480,col 5)-(line 481,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testNestedAssign1()",
        "snippet": "  public void testNestedAssign1() {\n    test(\"var b = null; var a = (b = 3); alert(a);\",\n         \"var a = 3; alert(a);\");\n  }\n",
        "begin_line": 484,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 486,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testNestedAssign2()",
        "snippet": "  public void testNestedAssign2() {\n    test(\"var a = 1; var b = 2; var c = (b = a); alert(c);\",\n         \"var a = 1; var c = a; alert(c);\");\n  }\n",
        "begin_line": 489,
        "end_line": 492,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 491,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testNestedAssign3()",
        "snippet": "  public void testNestedAssign3() {\n    test(\"var b = 0; var z; z = z = b = 1; alert(b);\",\n         \"var b = 0; b = 1; alert(b);\");\n  }\n",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 495,col 5)-(line 496,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testCallSiteInteraction()",
        "snippet": "  public void testCallSiteInteraction() {\n    this.modifyCallSites = true;\n\n    testSame(\"var b=function(){return};b()\");\n    testSame(\"var b=function(c){return c};b(1)\");\n    test(\"var b=function(c){};b.call(null, x)\",\n         \"var b=function(){};b.call(null)\");\n    test(\"var b=function(c){};b.apply(null, x)\",\n         \"var b=function(){};b.apply(null, x)\");\n\n    test(\"var b=function(c){return};b(1)\",\n         \"var b=function(){return};b()\");\n    test(\"var b=function(c){return};b(1,2)\",\n         \"var b=function(){return};b()\");\n    test(\"var b=function(c){return};b(1,2);b(3,4)\",\n         \"var b=function(){return};b();b()\");\n\n    // Here there is a unknown reference to the function so we can't\n    // change the signature.\n    test(\"var b=function(c,d){return d};b(1,2);b(3,4);b.length\",\n         \"var b=function(c,d){return d};b(0,2);b(0,4);b.length\");\n\n    test(\"var b=function(c){return};b(1,2);b(3,new x())\",\n         \"var b=function(){return};b();b(new x())\");\n\n    test(\"var b=function(c){return};b(1,2);b(new x(),4)\",\n         \"var b=function(){return};b();b(new x())\");\n\n    test(\"var b=function(c,d){return d};b(1,2);b(new x(),4)\",\n         \"var b=function(c,d){return d};b(0,2);b(new x(),4)\");\n    test(\"var b=function(c,d,e){return d};b(1,2,3);b(new x(),4,new x())\",\n         \"var b=function(c,d){return d};b(0,2);b(new x(),4,new x())\");\n\n    // Recursive calls are ok.\n    test(\"var b=function(c,d){b(1,2);return d};b(3,4);b(5,6)\",\n         \"var b=function(d){b(2);return d};b(4);b(6)\");\n\n    testSame(\"var b=function(c){return arguments};b(1,2);b(3,4)\");\n\n    // remove all function arguments\n    test(\"var b=function(c,d){return};b(1,2)\",\n         \"var b=function(){return};b()\");\n\n    // remove no function arguments\n    testSame(\"var b=function(c,d){return c+d};b(1,2)\");\n\n    // remove some function arguments\n    test(\"var b=function(e,f,c,d){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b()\");\n    test(\"var b=function(c,d,e,f){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(1,2)\");\n    test(\"var b=function(e,c,f,d,g){return c+d};b(1,2)\",\n         \"var b=function(c,d){return c+d};b(2)\");\n\n    // multiple definitions of \"b\", the parameters can be removed but\n    // the call sites are left unmodified for now.\n    test(\"var b=function(c,d){};var b=function(e,f){};b(1,2)\",\n         \"var b=function(){};var b=function(){};b(1,2)\");\n  }\n",
        "begin_line": 499,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 32)",
            "(line 502,col 5)-(line 502,col 45)",
            "(line 503,col 5)-(line 503,col 49)",
            "(line 504,col 5)-(line 505,col 44)",
            "(line 506,col 5)-(line 507,col 48)",
            "(line 509,col 5)-(line 510,col 41)",
            "(line 511,col 5)-(line 512,col 41)",
            "(line 513,col 5)-(line 514,col 45)",
            "(line 518,col 5)-(line 519,col 65)",
            "(line 521,col 5)-(line 522,col 52)",
            "(line 524,col 5)-(line 525,col 52)",
            "(line 527,col 5)-(line 528,col 62)",
            "(line 529,col 5)-(line 530,col 70)",
            "(line 533,col 5)-(line 534,col 55)",
            "(line 536,col 5)-(line 536,col 66)",
            "(line 539,col 5)-(line 540,col 41)",
            "(line 543,col 5)-(line 543,col 55)",
            "(line 546,col 5)-(line 547,col 48)",
            "(line 548,col 5)-(line 549,col 51)",
            "(line 550,col 5)-(line 551,col 49)",
            "(line 555,col 5)-(line 556,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testCallSiteInteraction_contructors()",
        "snippet": "  public void testCallSiteInteraction_contructors() {\n    this.modifyCallSites = true;\n    // The third level tests that the functions which have already been looked\n    // at get re-visited if they are changed by a call site removal.\n    test(\"var Ctor1=function(a,b){return a};\" +\n        \"var Ctor2=function(a,b){Ctor1.call(this,a,b)};\" +\n        \"goog$inherits(Ctor2, Ctor1);\" +\n        \"new Ctor2(1,2)\",\n        \"var Ctor1=function(a){return a};\" +\n        \"var Ctor2=function(a){Ctor1.call(this,a)};\" +\n        \"goog$inherits(Ctor2, Ctor1);\" +\n        \"new Ctor2(1)\");\n  }\n",
        "begin_line": 559,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 32)",
            "(line 563,col 5)-(line 570,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testFunctionArgRemovalCausingInconsistency()",
        "snippet": "  public void testFunctionArgRemovalCausingInconsistency() {\n    this.modifyCallSites = true;\n    // Test the case where an unused argument is removed and the argument\n    // contains a call site in its subtree (will cause the call site's parent\n    // pointer to be null).\n    test(\"var a=function(x,y){};\" +\n        \"var b=function(z){};\" +\n        \"a(new b, b)\",\n        \"var a=function(){};\" +\n        \"var b=function(){};\" +\n        \"a(new b)\");\n  }\n",
        "begin_line": 573,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 574,col 5)-(line 574,col 32)",
            "(line 578,col 5)-(line 583,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveUnusedVarsPossibleNpeCase()",
        "snippet": "  public void testRemoveUnusedVarsPossibleNpeCase() {\n    this.modifyCallSites = true;\n    test(\"var a = [];\" +\n        \"var register = function(callback) {a[0] = callback};\" +\n        \"register(function(transformer) {});\" +\n        \"register(function(transformer) {});\",\n        \"var register=function(){};register();register()\");\n  }\n",
        "begin_line": 586,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 587,col 5)-(line 587,col 32)",
            "(line 588,col 5)-(line 592,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDoNotOptimizeJSCompiler_renameProperty()",
        "snippet": "  public void testDoNotOptimizeJSCompiler_renameProperty() {\n    this.modifyCallSites = true;\n\n    // Only the function definition can be modified, none of the call sites.\n    test(\"function JSCompiler_renameProperty(a) {};\" +\n         \"JSCompiler_renameProperty('a');\",\n         \"function JSCompiler_renameProperty() {};\" +\n         \"JSCompiler_renameProperty('a');\");\n  }\n",
        "begin_line": 595,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 596,col 32)",
            "(line 599,col 5)-(line 602,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDoNotOptimizeJSCompiler_ObjectPropertyString()",
        "snippet": "  public void testDoNotOptimizeJSCompiler_ObjectPropertyString() {\n    this.modifyCallSites = true;\n    test(\"function JSCompiler_ObjectPropertyString(a, b) {};\" +\n         \"JSCompiler_ObjectPropertyString(window,'b');\",\n         \"function JSCompiler_ObjectPropertyString() {};\" +\n         \"JSCompiler_ObjectPropertyString(window,'b');\");\n  }\n",
        "begin_line": 605,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 606,col 5)-(line 606,col 32)",
            "(line 607,col 5)-(line 610,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testDoNotOptimizeSetters()",
        "snippet": "  public void testDoNotOptimizeSetters() {\n    testSame(\"({set s(a) {}})\");\n  }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 614,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass1()",
        "snippet": "  public void testRemoveInheritedClass1() {\n    test(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a); new a\",\n        \"function a(){} new a\");\n  }\n",
        "begin_line": 617,
        "end_line": 623,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 622,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass2()",
        "snippet": "  public void testRemoveInheritedClass2() {\n    test(\"function goog$inherits(){}\" +\n        \"function goog$mixin(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"goog$inherits(b,a);\" +\n        \"goog$mixin(c.prototype,b.prototype);\",\n        \"\");\n  }\n",
        "begin_line": 625,
        "end_line": 634,
        "comment": "",
        "child_ranges": [
            "(line 626,col 5)-(line 633,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass3()",
        "snippet": "  public void testRemoveInheritedClass3() {\n    testSame(\"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a); new b\");\n  }\n",
        "begin_line": 636,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 637,col 5)-(line 639,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass4()",
        "snippet": "  public void testRemoveInheritedClass4() {\n    testSame(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a);\" +\n        \"/**@constructor*/function c(){}\" +\n        \"goog$inherits(c,b); new c\");\n  }\n",
        "begin_line": 642,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 648,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass5()",
        "snippet": "  public void testRemoveInheritedClass5() {\n    test(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a);\" +\n        \"/**@constructor*/function c(){}\" +\n        \"goog$inherits(c,b); new b\",\n        \"function goog$inherits(){}\" +\n        \"function a(){}\" +\n        \"function b(){}\" +\n        \"goog$inherits(b,a); new b\");\n  }\n",
        "begin_line": 651,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 661,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass6()",
        "snippet": "  public void testRemoveInheritedClass6() {\n    test(\"function goog$mixin(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"/**@constructor*/function d(){}\" +\n        \"goog$mixin(b.prototype,a.prototype);\" +\n        \"goog$mixin(c.prototype,a.prototype); new c;\" +\n        \"goog$mixin(d.prototype,a.prototype)\",\n        \"function goog$mixin(){}\" +\n        \"function a(){}\" +\n        \"function c(){}\" +\n        \"goog$mixin(c.prototype,a.prototype); new c\");\n  }\n",
        "begin_line": 664,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 676,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass7()",
        "snippet": "  public void testRemoveInheritedClass7() {\n    test(\"function goog$mixin(){}\" +\n        \"/**@constructor*/function a(){alert(goog$mixin(a, a))}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$mixin(b.prototype,a.prototype); new a\",\n        \"function goog$mixin(){}\" +\n        \"function a(){alert(goog$mixin(a, a))} new a\");\n  }\n",
        "begin_line": 679,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 680,col 5)-(line 685,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass8()",
        "snippet": "  public void testRemoveInheritedClass8() {\n    test(\"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"b.inherits(a);c.mixin(b.prototype)\",\n        \"\");\n  }\n",
        "begin_line": 688,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 689,col 5)-(line 693,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass9()",
        "snippet": "  public void testRemoveInheritedClass9() {\n    testSame(\"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"/**@constructor*/function c(){}\" +\n        \"b.inherits(a);c.mixin(b.prototype);new c\");\n  }\n",
        "begin_line": 696,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 697,col 5)-(line 700,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass10()",
        "snippet": "  public void testRemoveInheritedClass10() {\n    test(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$inherits(b,a); new a;\" +\n        \"var c = a; var d = a.g; new b\",\n        \"function goog$inherits(){}\" +\n        \"function a(){} function b(){} goog$inherits(b,a); new a; new b\");\n  }\n",
        "begin_line": 703,
        "end_line": 711,
        "comment": "",
        "child_ranges": [
            "(line 704,col 5)-(line 710,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass11()",
        "snippet": "  public void testRemoveInheritedClass11() {\n    testSame(\"function goog$inherits(){}\" +\n        \"function goog$mixin(a,b){goog$inherits(a,b)}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"/**@constructor*/function b(){}\" +\n        \"goog$mixin(b.prototype,a.prototype);new b\");\n  }\n",
        "begin_line": 713,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 714,col 5)-(line 718,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testRemoveInheritedClass12()",
        "snippet": "  public void testRemoveInheritedClass12() {\n    testSame(\"function goog$inherits(){}\" +\n        \"/**@constructor*/function a(){}\" +\n        \"var b = {};\" +\n        \"goog$inherits(b.foo, a)\");\n  }\n",
        "begin_line": 721,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 725,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testReflectedMethods()",
        "snippet": "  public void testReflectedMethods() {\n    this.modifyCallSites = true;\n    testSame(\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype.handle = function(x, y) { alert(y); };\" +\n        \"var x = goog.reflect.object(Foo, {handle: 1});\" +\n        \"for (var i in x) { x[i].call(x); }\" +\n        \"window['Foo'] = Foo;\");\n  }\n",
        "begin_line": 728,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 729,col 32)",
            "(line 730,col 5)-(line 736,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue618_1()",
        "snippet": "  public void testIssue618_1() {\n    this.removeGlobal = false;\n    testSame(\n        \"function f() {\\n\" +\n        \"  var a = [], b;\\n\" +\n        \"  a.push(b = []);\\n\" +\n        \"  b[0] = 1;\\n\" +\n        \"  return a;\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 739,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 740,col 5)-(line 740,col 30)",
            "(line 741,col 5)-(line 747,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVarsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue618_2()",
        "snippet": "  public void testIssue618_2() {\n    this.removeGlobal = false;\n    testSame(\n        \"var b;\\n\" +\n        \"a.push(b = []);\\n\" +\n        \"b[0] = 1;\\n\");\n  }\n",
        "begin_line": 750,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 751,col 5)-(line 751,col 30)",
            "(line 752,col 5)-(line 755,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 119,col 5)-(line 121,col 6)",
            "(line 122,col 5)-(line 122,col 39)",
            "(line 123,col 5)-(line 123,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 155,col 5)-(line 155,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 162,
        "end_line": 175,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 163,col 5)-(line 165,col 5)",
            "(line 169,col 5)-(line 169,col 32)",
            "(line 171,col 5)-(line 172,col 65)",
            "(line 173,col 5)-(line 173,col 55)",
            "(line 174,col 5)-(line 174,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 185,
        "end_line": 189,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 193,col 5)-(line 193,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 29)",
            "(line 225,col 5)-(line 225,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 232,col 5)-(line 232,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 250,
        "end_line": 252,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 251,col 5)-(line 251,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 262,
        "end_line": 265,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 28)",
            "(line 264,col 5)-(line 264,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 281,col 5)-(line 281,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 292,
        "end_line": 300,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 294,col 5)-(line 296,col 40)",
            "(line 298,col 5)-(line 299,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 321,col 5)-(line 321,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 335,
        "end_line": 338,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 352,col 5)-(line 352,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 366,
        "end_line": 369,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 368,col 5)-(line 368,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 385,
        "end_line": 392,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 388,col 5)-(line 390,col 6)",
            "(line 391,col 5)-(line 391,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 408,
        "end_line": 428,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 41)",
            "(line 412,col 5)-(line 412,col 28)",
            "(line 414,col 5)-(line 414,col 43)",
            "(line 416,col 5)-(line 418,col 5)",
            "(line 421,col 5)-(line 421,col 39)",
            "(line 422,col 5)-(line 423,col 58)",
            "(line 425,col 5)-(line 425,col 71)",
            "(line 427,col 5)-(line 427,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 436,
        "end_line": 438,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 437,col 5)-(line 437,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 449,col 5)-(line 449,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 462,
        "end_line": 465,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 480,
        "end_line": 491,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 41)",
            "(line 483,col 5)-(line 483,col 28)",
            "(line 485,col 5)-(line 485,col 56)",
            "(line 486,col 5)-(line 488,col 5)",
            "(line 489,col 5)-(line 489,col 55)",
            "(line 490,col 5)-(line 490,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 499,
        "end_line": 501,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 511,
        "end_line": 514,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 513,col 5)-(line 513,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 526,
        "end_line": 533,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 528,col 5)-(line 528,col 41)",
            "(line 529,col 5)-(line 529,col 28)",
            "(line 531,col 5)-(line 531,col 56)",
            "(line 532,col 5)-(line 532,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 540,
        "end_line": 542,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 541,col 5)-(line 541,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 551,
        "end_line": 553,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 552,col 5)-(line 552,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 563,
        "end_line": 569,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 564,col 5)-(line 568,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 579,
        "end_line": 581,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 580,col 5)-(line 580,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 592,
        "end_line": 599,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 594,col 5)-(line 598,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 612,
        "end_line": 618,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 614,col 5)-(line 616,col 6)",
            "(line 617,col 5)-(line 617,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 625,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 626,col 5)-(line 626,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 636,
        "end_line": 638,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 637,col 5)-(line 637,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 648,
        "end_line": 651,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 650,col 5)-(line 650,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 658,
        "end_line": 660,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 659,col 5)-(line 659,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 668,
        "end_line": 681,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 669,col 5)-(line 680,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 694,
        "end_line": 697,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 696,col 5)-(line 696,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 714,
        "end_line": 920,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 717,col 5)-(line 717,col 51)",
            "(line 718,col 5)-(line 718,col 44)",
            "(line 720,col 5)-(line 720,col 39)",
            "(line 721,col 5)-(line 722,col 66)",
            "(line 724,col 5)-(line 726,col 5)",
            "(line 727,col 5)-(line 727,col 44)",
            "(line 728,col 5)-(line 728,col 40)",
            "(line 731,col 5)-(line 731,col 38)",
            "(line 732,col 5)-(line 732,col 54)",
            "(line 733,col 5)-(line 733,col 50)",
            "(line 735,col 5)-(line 735,col 45)",
            "(line 736,col 5)-(line 736,col 68)",
            "(line 737,col 5)-(line 737,col 34)",
            "(line 738,col 5)-(line 738,col 59)",
            "(line 739,col 5)-(line 739,col 35)",
            "(line 741,col 5)-(line 742,col 39)",
            "(line 744,col 5)-(line 787,col 5)",
            "(line 789,col 5)-(line 919,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 922,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 924,col 5)-(line 924,col 57)",
            "(line 925,col 5)-(line 925,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 931,
        "end_line": 949,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 932,col 5)-(line 932,col 41)",
            "(line 933,col 5)-(line 933,col 62)",
            "(line 934,col 5)-(line 936,col 5)",
            "(line 937,col 5)-(line 937,col 55)",
            "(line 938,col 5)-(line 938,col 39)",
            "(line 939,col 5)-(line 940,col 66)",
            "(line 941,col 5)-(line 941,col 44)",
            "(line 942,col 5)-(line 942,col 42)",
            "(line 944,col 5)-(line 947,col 5)",
            "(line 948,col 5)-(line 948,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 951,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 952,col 5)-(line 952,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 959,
        "end_line": 965,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 960,col 5)-(line 960,col 47)",
            "(line 961,col 5)-(line 963,col 5)",
            "(line 964,col 5)-(line 964,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 971,
        "end_line": 977,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 972,col 5)-(line 972,col 47)",
            "(line 973,col 5)-(line 975,col 5)",
            "(line 976,col 5)-(line 976,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 984,
        "end_line": 991,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 985,col 5)-(line 985,col 48)",
            "(line 986,col 5)-(line 986,col 47)",
            "(line 987,col 5)-(line 989,col 5)",
            "(line 990,col 5)-(line 990,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 998,
        "end_line": 1004,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 999,col 5)-(line 999,col 47)",
            "(line 1000,col 5)-(line 1002,col 5)",
            "(line 1003,col 5)-(line 1003,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1010,
        "end_line": 1017,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 53)",
            "(line 1012,col 5)-(line 1015,col 5)",
            "(line 1016,col 5)-(line 1016,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1020,
        "end_line": 1022,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 7)-(line 1021,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1024,
        "end_line": 1025,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1027,
        "end_line": 1028,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1031,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1032,col 5)-(line 1032,col 39)",
            "(line 1033,col 5)-(line 1033,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1036,
        "end_line": 1038,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1041,
        "end_line": 1053,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1042,col 5)-(line 1042,col 52)",
            "(line 1043,col 5)-(line 1051,col 39)",
            "(line 1052,col 5)-(line 1052,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.RemoveUnusedVarsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-c2452933-4cd8-43a7-a545-e626d8c1ab71.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1045,
        "end_line": 1049,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 13)-(line 1048,col 13)"
        ]
    }
]