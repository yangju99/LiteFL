[
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.FastDateFormatTest(java.lang.String)",
        "snippet": "    public FastDateFormatTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(FastDateFormatTest.class);\n        suite.setName(\"FastDateFormat Tests\");\n\n        return suite;\n    }\n",
        "begin_line": 52,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 66)",
            "(line 54,col 9)-(line 54,col 46)",
            "(line 56,col 9)-(line 56,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        super.setUp();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance()",
        "snippet": "    public void test_getInstance() {\n        FastDateFormat format1 = FastDateFormat.getInstance();\n        FastDateFormat format2 = FastDateFormat.getInstance();\n        assertSame(format1, format2);\n        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());\n    }\n",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 62)",
            "(line 69,col 9)-(line 69,col 62)",
            "(line 70,col 9)-(line 70,col 37)",
            "(line 71,col 9)-(line 71,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String()",
        "snippet": "    public void test_getInstance_String() {\n        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n        FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n        FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n        assertSame(format2, format3);\n        assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n        assertEquals(TimeZone.getDefault(), format1.getTimeZone());\n        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n        assertEquals(false, format1.getTimeZoneOverridesCalendar());\n        assertEquals(false, format2.getTimeZoneOverridesCalendar());\n    }\n",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 74)",
            "(line 76,col 9)-(line 76,col 74)",
            "(line 77,col 9)-(line 77,col 74)",
            "(line 79,col 9)-(line 79,col 39)",
            "(line 80,col 9)-(line 80,col 37)",
            "(line 81,col 9)-(line 81,col 57)",
            "(line 82,col 9)-(line 82,col 67)",
            "(line 83,col 9)-(line 83,col 67)",
            "(line 84,col 9)-(line 84,col 68)",
            "(line 85,col 9)-(line 85,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_TimeZone()",
        "snippet": "    public void test_getInstance_String_TimeZone() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n            FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n            FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertSame(format3, format4);\n            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 88,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 55)",
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 115,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_Locale()",
        "snippet": "    public void test_getInstance_String_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertSame(format1, format3);\n            assertSame(Locale.GERMANY, format1.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 118,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 55)",
            "(line 120,col 9)-(line 132,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 135,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 55)",
            "(line 137,col 9)-(line 152,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance()",
        "snippet": "    public void test_changeDefault_Locale_DateTimeInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }\n",
        "begin_line": 155,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 55)",
            "(line 157,col 9)-(line 172,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale()",
        "snippet": "    public void test_getInstance_String_TimeZone_Locale() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n                    TimeZone.getDefault(), Locale.GERMANY);\n\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n            assertEquals(TimeZone.getDefault(), format3.getTimeZone());\n            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n            assertEquals(true, format3.getTimeZoneOverridesCalendar());\n            assertEquals(Locale.GERMANY, format1.getLocale());\n            assertEquals(Locale.GERMANY, format2.getLocale());\n            assertEquals(Locale.GERMANY, format3.getLocale());\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }\n",
        "begin_line": 175,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 55)",
            "(line 177,col 9)-(line 177,col 57)",
            "(line 178,col 9)-(line 202,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testFormat()",
        "snippet": "    public void testFormat() {}\n",
        "begin_line": 205,
        "end_line": 205,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testShortDateStyleWithLocales()",
        "snippet": "    public void testShortDateStyleWithLocales() {\n        Locale usLocale = Locale.US;\n        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004, 1, 3);\n        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);\n        assertEquals(\"2/3/04\", fdf.format(cal));\n\n        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);\n        assertEquals(\"2004-02-03\", fdf.format(cal));\n\n    }\n",
        "begin_line": 269,
        "end_line": 280,
        "comment": "\n     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.\n     ",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 36)",
            "(line 271,col 9)-(line 271,col 54)",
            "(line 272,col 9)-(line 272,col 46)",
            "(line 273,col 9)-(line 273,col 28)",
            "(line 274,col 9)-(line 274,col 92)",
            "(line 275,col 9)-(line 275,col 48)",
            "(line 277,col 9)-(line 277,col 82)",
            "(line 278,col 9)-(line 278,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testLowYearPadding()",
        "snippet": "    public void testLowYearPadding() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/DD\");\n\n        cal.set(1,0,1);\n        assertEquals(\"0001/01/01\", format.format(cal));\n        cal.set(10,0,1);\n        assertEquals(\"0010/01/01\", format.format(cal));\n        cal.set(100,0,1);\n        assertEquals(\"0100/01/01\", format.format(cal));\n        cal.set(999,0,1);\n        assertEquals(\"0999/01/01\", format.format(cal));\n    }\n",
        "begin_line": 285,
        "end_line": 297,
        "comment": "\n     * Tests that pre-1000AD years get padded with yyyy\n     ",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 46)",
            "(line 287,col 9)-(line 287,col 73)",
            "(line 289,col 9)-(line 289,col 23)",
            "(line 290,col 9)-(line 290,col 55)",
            "(line 291,col 9)-(line 291,col 24)",
            "(line 292,col 9)-(line 292,col 55)",
            "(line 293,col 9)-(line 293,col 25)",
            "(line 294,col 9)-(line 294,col 55)",
            "(line 295,col 9)-(line 295,col 25)",
            "(line 296,col 9)-(line 296,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testMilleniumBug()",
        "snippet": "    public void testMilleniumBug() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"dd.MM.yyyy\");\n\n        cal.set(1000,0,1);\n        assertEquals(\"01.01.1000\", format.format(cal));\n    }\n",
        "begin_line": 301,
        "end_line": 307,
        "comment": "\n     * Show Bug #39410 is solved\n     ",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 46)",
            "(line 303,col 9)-(line 303,col 73)",
            "(line 305,col 9)-(line 305,col 26)",
            "(line 306,col 9)-(line 306,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testSimpleDate()",
        "snippet": "    public void testSimpleDate() {\n        Calendar cal = Calendar.getInstance();\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n\n        cal.set(2004,11,31);\n        assertEquals(\"2004/12/31\", format.format(cal));\n        cal.set(999,11,31);\n        assertEquals(\"0999/12/31\", format.format(cal));\n        cal.set(1,2,2);\n        assertEquals(\"0001/03/02\", format.format(cal));\n    }\n",
        "begin_line": 314,
        "end_line": 324,
        "comment": " TODO: Fix this problem",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 46)",
            "(line 316,col 9)-(line 316,col 73)",
            "(line 318,col 9)-(line 318,col 28)",
            "(line 319,col 9)-(line 319,col 55)",
            "(line 320,col 9)-(line 320,col 27)",
            "(line 321,col 9)-(line 321,col 55)",
            "(line 322,col 9)-(line 322,col 23)",
            "(line 323,col 9)-(line 323,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.time.FastDateFormatTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
        "signature": "org.apache.commons.lang.time.FastDateFormatTest.testLang303()",
        "snippet": "    public void testLang303() {\n        Calendar cal = Calendar.getInstance();\n        cal.set(2004,11,31);\n\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n        String output = format.format(cal);\n\n        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n        assertEquals(output, format.format(cal));\n    }\n",
        "begin_line": 326,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 46)",
            "(line 328,col 9)-(line 328,col 28)",
            "(line 330,col 9)-(line 330,col 73)",
            "(line 331,col 9)-(line 331,col 43)",
            "(line 333,col 9)-(line 333,col 107)",
            "(line 334,col 9)-(line 334,col 49)"
        ]
    }
]