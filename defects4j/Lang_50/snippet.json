[
    {
        "name": "FastDateFormat.parsePattern#580",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.parsePattern()",
        "snippet": "    protected List parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List rules = new ArrayList();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }\n",
        "begin_line": 580,
        "end_line": 701,
        "comment": "\n     * <p>Returns a list of Rules given a pattern.</p>\n     * \n     * @return a <code>List</code> of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.Pair#1708",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Pair.Pair(java.lang.Object, java.lang.Object)",
        "snippet": "        public Pair(Object obj1, Object obj2) {\n            mObj1 = obj1;\n            mObj2 = obj2;\n        }\n",
        "begin_line": 1708,
        "end_line": 1711,
        "comment": "\n         * Constructs an instance of <code>Pair</code> to hold the specified objects.\n         * @param obj1 one object in the pair\n         * @param obj2 second object in the pair\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.hashCode#1737",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Pair.hashCode()",
        "snippet": "        public int hashCode() {\n            return\n                (mObj1 == null ? 0 : mObj1.hashCode()) +\n                (mObj2 == null ? 0 : mObj2.hashCode());\n        }\n",
        "begin_line": 1737,
        "end_line": 1741,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        },
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.TimeZoneNameRule#1538",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule.TimeZoneNameRule(java.util.TimeZone, boolean, java.util.Locale, int)",
        "snippet": "        TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) {\n            mTimeZone = timeZone;\n            mTimeZoneForced = timeZoneForced;\n            mLocale = locale;\n            mStyle = style;\n\n            if (timeZoneForced) {\n                mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n                mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n            } else {\n                mStandard = null;\n                mDaylight = null;\n            }\n        }\n",
        "begin_line": 1538,
        "end_line": 1551,
        "comment": "\n         * Constructs an instance of <code>TimeZoneNameRule</code> with the specified properties.\n         * \n         * @param timeZone the time zone\n         * @param timeZoneForced if <code>true</code> the time zone is forced into standard and daylight\n         * @param locale the locale\n         * @param style the style\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1556",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TimeZoneNameRule.estimateLength()",
        "snippet": "        public int estimateLength() {\n            if (mTimeZoneForced) {\n                return Math.max(mStandard.length(), mDaylight.length());\n            } else if (mStyle == TimeZone.SHORT) {\n                return 4;\n            } else {\n                return 40;\n            }\n        }\n",
        "begin_line": 1556,
        "end_line": 1564,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.equals#1716",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.Pair.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n\n            if (!(obj instanceof Pair)) {\n                return false;\n            }\n\n            Pair key = (Pair)obj;\n\n            return\n                (mObj1 == null ?\n                 key.mObj1 == null : mObj1.equals(key.mObj1)) &&\n                (mObj2 == null ?\n                 key.mObj2 == null : mObj2.equals(key.mObj2));\n        }\n",
        "begin_line": 1716,
        "end_line": 1732,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getDateInstance#233",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int)",
        "snippet": "    public static FastDateFormat getDateInstance(int style) {\n        return getDateInstance(style, null, null);\n    }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n     * <p>Gets a date formatter instance using the specified style in the\n     * default time zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getDateInstance#279",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n        Object key = new Integer(style);\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n\n        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateInstanceCache.put(key, format);\n                \n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }\n",
        "begin_line": 279,
        "end_line": 306,
        "comment": "\n     * <p>Gets a date formatter instance using the specified style, time\n     * zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getDateTimeInstance#406",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int, int)",
        "snippet": "    public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle) {\n        return getDateTimeInstance(dateStyle, timeStyle, null, null);\n    }\n",
        "begin_line": 406,
        "end_line": 409,
        "comment": "\n     * <p>Gets a date/time formatter instance using the specified style\n     * in the default time zone and locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getDateTimeInstance#423",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.Locale)",
        "snippet": "    public static FastDateFormat getDateTimeInstance(\n            int dateStyle, int timeStyle, Locale locale) {\n        return getDateTimeInstance(dateStyle, timeStyle, null, locale);\n    }\n",
        "begin_line": 423,
        "end_line": 426,
        "comment": "\n     * <p>Gets a date/time formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getDateTimeInstance#458",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale) {\n\n        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateTimeInstanceCache.put(key, format);\n\n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }\n",
        "begin_line": 458,
        "end_line": 486,
        "comment": "\n     * <p>Gets a date/time formatter instance using the specified style,\n     * time zone and locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.UnpaddedNumberField#1185",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField.UnpaddedNumberField(int)",
        "snippet": "        UnpaddedNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 1185,
        "end_line": 1187,
        "comment": "\n         * Constructs an instance of <code>UnpadedNumberField</code> with the specified field.\n         * \n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.estimateLength#1192",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.UnpaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 1192,
        "end_line": 1194,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.selectNumberRule#769",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.selectNumberRule(int, int)",
        "snippet": "    protected NumberRule selectNumberRule(int field, int padding) {\n        switch (padding) {\n        case 1:\n            return new UnpaddedNumberField(field);\n        case 2:\n            return new TwoDigitNumberField(field);\n        default:\n            return new PaddedNumberField(field, padding);\n        }\n    }\n",
        "begin_line": 769,
        "end_line": 778,
        "comment": "\n     * <p>Gets an appropriate rule for the padding required.</p>\n     * \n     * @param field  the field to get a rule for\n     * @param padding  the padding required\n     * @return a new rule with the correct padding\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.getLocale#953",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getLocale()",
        "snippet": "    public Locale getLocale() {\n        return mLocale;\n    }\n",
        "begin_line": 953,
        "end_line": 955,
        "comment": "\n     * <p>Gets the locale used by this formatter.</p>\n     * \n     * @return the locale\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.TwelveHourField#1447",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwelveHourField.TwelveHourField(org.apache.commons.lang.time.FastDateFormat.NumberRule)",
        "snippet": "        TwelveHourField(NumberRule rule) {\n            mRule = rule;\n        }\n",
        "begin_line": 1447,
        "end_line": 1449,
        "comment": "\n         * Constructs an instance of <code>TwelveHourField</code> with the specified\n         * <code>NumberRule</code>.\n         * \n         * @param rule the rule\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1454",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwelveHourField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return mRule.estimateLength();\n        }\n",
        "begin_line": 1454,
        "end_line": 1456,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.getDateInstance#248",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int, java.util.Locale)",
        "snippet": "    public static FastDateFormat getDateInstance(int style, Locale locale) {\n        return getDateInstance(style, null, locale);\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * <p>Gets a date formatter instance using the specified style and\n     * locale in the default time zone.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.StringLiteral#1112",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.StringLiteral.StringLiteral(java.lang.String)",
        "snippet": "        StringLiteral(String value) {\n            mValue = value;\n        }\n",
        "begin_line": 1112,
        "end_line": 1114,
        "comment": "\n         * Constructs a new instance of <code>StringLiteral</code>\n         * to hold the specified value.\n         * \n         * @param value the string literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.estimateLength#1119",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.StringLiteral.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return mValue.length();\n        }\n",
        "begin_line": 1119,
        "end_line": 1121,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.TextField#1145",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TextField.TextField(int, java.lang.String[])",
        "snippet": "        TextField(int field, String[] values) {\n            mField = field;\n            mValues = values;\n        }\n",
        "begin_line": 1145,
        "end_line": 1148,
        "comment": "\n         * Constructs an instance of <code>TextField</code>\n         * with the specified field and values.\n         * \n         * @param field the field\n         * @param values the field values\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.estimateLength#1153",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TextField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            int max = 0;\n            for (int i=mValues.length; --i >= 0; ) {\n                int len = mValues[i].length();\n                if (len > max) {\n                    max = len;\n                }\n            }\n            return max;\n        }\n",
        "begin_line": 1153,
        "end_line": 1162,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.PaddedNumberField#1272",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.PaddedNumberField(int, int)",
        "snippet": "        PaddedNumberField(int field, int size) {\n            if (size < 3) {\n                // Should use UnpaddedNumberField or TwoDigitNumberField.\n                throw new IllegalArgumentException();\n            }\n            mField = field;\n            mSize = size;\n        }\n",
        "begin_line": 1272,
        "end_line": 1279,
        "comment": "\n         * Constructs an instance of <code>PaddedNumberField</code>.\n         * \n         * @param field the field\n         * @param size size of the output field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.estimateLength#1284",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.PaddedNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 4;\n        }\n",
        "begin_line": 1284,
        "end_line": 1286,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.CharacterLiteral#1081",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.CharacterLiteral.CharacterLiteral(char)",
        "snippet": "        CharacterLiteral(char value) {\n            mValue = value;\n        }\n",
        "begin_line": 1081,
        "end_line": 1083,
        "comment": "\n         * Constructs a new instance of <code>CharacterLiteral</code>\n         * to hold the specified value.\n         * \n         * @param value the character literal\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.estimateLength#1088",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.CharacterLiteral.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 1;\n        }\n",
        "begin_line": 1088,
        "end_line": 1090,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.Rule": null
        },
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.getInstance#211",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);\n        FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);\n        if (format == null) {\n            format = emptyFormat;\n            format.init();  // convert shell format into usable one\n            cInstanceCache.put(format, format);  // this is OK!\n        }\n        return format;\n    }\n",
        "begin_line": 211,
        "end_line": 220,
        "comment": "\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.FastDateFormat#537",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale)",
        "snippet": "    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        super();\n        if (pattern == null) {\n            throw new IllegalArgumentException(\"The pattern must not be null\");\n        }\n        mPattern = pattern;\n        \n        mTimeZoneForced = (timeZone != null);\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        mTimeZone = timeZone;\n        \n        mLocaleForced = (locale != null);\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        mLocale = locale;\n    }\n",
        "begin_line": 537,
        "end_line": 555,
        "comment": "\n     * <p>Constructs a new FastDateFormat.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  time zone to use, <code>null</code> means use\n     *  default for <code>Date</code> and value within for\n     *  <code>Calendar</code>\n     * @param locale  locale, <code>null</code> means use system\n     *  default\n     * @throws IllegalArgumentException if pattern is invalid or\n     *  <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.init#560",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.init()",
        "snippet": "    protected void init() {\n        List rulesList = parsePattern();\n        mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }\n",
        "begin_line": 560,
        "end_line": 570,
        "comment": "\n     * <p>Initializes the instance for first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.parseToken#710",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.parseToken(java.lang.String, int[])",
        "snippet": "    protected String parseToken(String pattern, int[] indexRef) {\n        StringBuffer buf = new StringBuffer();\n\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {\n            // Scan a run of the same character, which indicates a time\n            // pattern.\n            buf.append(c);\n\n            while (i + 1 < length) {\n                char peek = pattern.charAt(i + 1);\n                if (peek == c) {\n                    buf.append(c);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } else {\n            // This will identify token as text.\n            buf.append('\\'');\n\n            boolean inLiteral = false;\n\n            for (; i < length; i++) {\n                c = pattern.charAt(i);\n\n                if (c == '\\'') {\n                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                        // '' is treated as escaped '\n                        i++;\n                        buf.append(c);\n                    } else {\n                        inLiteral = !inLiteral;\n                    }\n                } else if (!inLiteral &&\n                         (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {\n                    i--;\n                    break;\n                } else {\n                    buf.append(c);\n                }\n            }\n        }\n\n        indexRef[0] = i;\n        return buf.toString();\n    }\n",
        "begin_line": 710,
        "end_line": 760,
        "comment": "\n     * <p>Performs the parsing of tokens.</p>\n     * \n     * @param pattern  the pattern\n     * @param indexRef  index references\n     * @return parsed token\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.hashCode#1000",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.hashCode()",
        "snippet": "    public int hashCode() {\n        int total = 0;\n        total += mPattern.hashCode();\n        total += mTimeZone.hashCode();\n        total += (mTimeZoneForced ? 1 : 0);\n        total += mLocale.hashCode();\n        total += (mLocaleForced ? 1 : 0);\n        return total;\n    }\n",
        "begin_line": 1000,
        "end_line": 1008,
        "comment": "\n     * <p>Returns a hashcode compatible with equals.</p>\n     * \n     * @return a hashcode compatible with equals\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3086
        },
        "num_failing_tests": 2
    },
    {
        "name": "FastDateFormat.TwoDigitNumberField#1332",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.TwoDigitNumberField(int)",
        "snippet": "        TwoDigitNumberField(int field) {\n            mField = field;\n        }\n",
        "begin_line": 1332,
        "end_line": 1334,
        "comment": "\n         * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.\n         * \n         * @param field the field\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastDateFormat.estimateLength#1339",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "class_name": "org.apache.commons.lang.time.FastDateFormat",
        "signature": "org.apache.commons.lang.time.FastDateFormat.TwoDigitNumberField.estimateLength()",
        "snippet": "        public int estimateLength() {\n            return 2;\n        }\n",
        "begin_line": 1339,
        "end_line": 1341,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "java.text.Format": null,
            "org.apache.commons.lang.time.FastDateFormat.NumberRule": null
        },
        "susp": {
            "ochiai_susp": 0.1581
        },
        "num_failing_tests": 1
    }
]