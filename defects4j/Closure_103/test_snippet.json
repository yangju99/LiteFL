[
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new CombinedCompilerPass(compiler,\n        new CheckUnreachableCode(compiler, CheckLevel.ERROR));\n  }\n",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 30,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testCorrectSimple()",
        "snippet": "  public void testCorrectSimple() {\n    testSame(\"var x\");\n    testSame(\"var x = 1\");\n    testSame(\"var x = 1; x = 2;\");\n    testSame(\"if (x) { var x = 1 }\");\n    testSame(\"if (x) { var x = 1 } else { var y = 2 }\");\n    testSame(\"while(x) {}\");\n  }\n",
        "begin_line": 33,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 34,col 5)-(line 34,col 22)",
            "(line 35,col 5)-(line 35,col 26)",
            "(line 36,col 5)-(line 36,col 34)",
            "(line 37,col 5)-(line 37,col 37)",
            "(line 38,col 5)-(line 38,col 56)",
            "(line 39,col 5)-(line 39,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testIncorrectSimple()",
        "snippet": "  public void testIncorrectSimple() {\n    assertUnreachable(\"function f() { return; x=1; }\");\n    assertUnreachable(\"function f() { return; x=1; x=1; }\");\n    assertUnreachable(\"function f() { return; var x = 1; }\");\n  }\n",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 55)",
            "(line 44,col 5)-(line 44,col 60)",
            "(line 45,col 5)-(line 45,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testCorrectIfReturns()",
        "snippet": "  public void testCorrectIfReturns() {\n    testSame(\"function f() { if (x) { return } }\");\n    testSame(\"function f() { if (x) { return } return }\");\n    testSame(\"function f() { if (x) { if (y) { return } } else { return }}\");\n    testSame(\"function f()\" +\n        \"{ if (x) { if (y) { return } return } else { return }}\");\n  }\n",
        "begin_line": 48,
        "end_line": 54,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 51)",
            "(line 50,col 5)-(line 50,col 58)",
            "(line 51,col 5)-(line 51,col 77)",
            "(line 52,col 5)-(line 53,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testInCorrectIfReturns()",
        "snippet": "  public void testInCorrectIfReturns() {\n    assertUnreachable(\n        \"function f() { if (x) { return } else { return } return }\");\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 57,col 5)-(line 58,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testCorrectSwitchReturn()",
        "snippet": "  public void testCorrectSwitchReturn() {\n    testSame(\"function f() { switch(x) { default: return; case 1: x++; }}\");\n    testSame(\"function f() {\" +\n        \"switch(x) { default: return; case 1: x++; } return }\");\n    testSame(\"function f() {\" +\n        \"switch(x) { default: return; case 1: return; }}\");\n    testSame(\"function f() {\" +\n        \"switch(x) { case 1: return; } return }\");\n    testSame(\"function f() {\" +\n        \"switch(x) { case 1: case 2: return; } return }\");\n    testSame(\"function f() {\" +\n        \"switch(x) { case 1: return; case 2: return; } return }\");\n    testSame(\"function f() {\" +\n        \"switch(x) { case 1 : return; case 2: return; } return }\");\n  }\n",
        "begin_line": 61,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 62,col 5)-(line 62,col 76)",
            "(line 63,col 5)-(line 64,col 64)",
            "(line 65,col 5)-(line 66,col 59)",
            "(line 67,col 5)-(line 68,col 50)",
            "(line 69,col 5)-(line 70,col 58)",
            "(line 71,col 5)-(line 72,col 66)",
            "(line 73,col 5)-(line 74,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testInCorrectSwitchReturn()",
        "snippet": "  public void testInCorrectSwitchReturn() {\n    assertUnreachable(\"function f() {\" +\n        \"switch(x) { default: return; case 1: return; } return }\");\n    assertUnreachable(\"function f() {\" +\n        \"switch(x) { default: return; return; case 1: return; } }\");\n  }\n",
        "begin_line": 77,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 79,col 67)",
            "(line 80,col 5)-(line 81,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testCorrectLoopBreaksAndContinues()",
        "snippet": "  public void testCorrectLoopBreaksAndContinues() {\n    testSame(\"while(1) { foo(); break }\");\n    testSame(\"while(1) { foo(); continue }\");\n    testSame(\"for(;;) { foo(); break }\");\n    testSame(\"for(;;) { foo(); continue }\");\n    testSame(\"for(;;) { if (x) { break } }\");\n    testSame(\"for(;;) { if (x) { continue } }\");\n    testSame(\"do { foo(); continue} while(1)\");\n  }\n",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 42)",
            "(line 86,col 5)-(line 86,col 45)",
            "(line 87,col 5)-(line 87,col 41)",
            "(line 88,col 5)-(line 88,col 44)",
            "(line 89,col 5)-(line 89,col 45)",
            "(line 90,col 5)-(line 90,col 48)",
            "(line 91,col 5)-(line 91,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testInCorrectLoopBreaksAndContinues()",
        "snippet": "  public void testInCorrectLoopBreaksAndContinues() {\n    assertUnreachable(\"while(1) { foo(); break; bar()}\");\n    assertUnreachable(\"while(1) { foo(); continue; bar() }\");\n    assertUnreachable(\"for(;;) { foo(); break; bar() }\");\n    assertUnreachable(\"for(;;) { foo(); continue; bar() }\");\n    assertUnreachable(\"for(;;) { if (x) { break; bar() } }\");\n    assertUnreachable(\"for(;;) { if (x) { continue; bar() } }\");\n    assertUnreachable(\"do { foo(); continue; bar()} while(1)\");\n  }\n",
        "begin_line": 94,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 57)",
            "(line 96,col 5)-(line 96,col 61)",
            "(line 97,col 5)-(line 97,col 57)",
            "(line 98,col 5)-(line 98,col 60)",
            "(line 99,col 5)-(line 99,col 61)",
            "(line 100,col 5)-(line 100,col 64)",
            "(line 101,col 5)-(line 101,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testUncheckedWhileInDo()",
        "snippet": "  public void testUncheckedWhileInDo() {\n    assertUnreachable(\"do { foo(); break} while(1)\");\n  }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testUncheckedConditionInFor()",
        "snippet": "  public void testUncheckedConditionInFor() {\n    assertUnreachable(\"for(var x = 0; x < 100; x++) { break };\");\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testFunctionDeclaration()",
        "snippet": "  public void testFunctionDeclaration() {\n    // functions are not in our CFG.\n    testSame(\"function f() { return; function ff() { }}\");\n  }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testVarDeclaration()",
        "snippet": "  public void testVarDeclaration() {\n    assertUnreachable(\"function f() { return; var x = 1 }\");\n    // I think the user should fix this as well.\n    assertUnreachable(\"function f() { return; var x }\");\n  }\n",
        "begin_line": 117,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 60)",
            "(line 120,col 5)-(line 120,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testReachableTryCatchFinally()",
        "snippet": "  public void testReachableTryCatchFinally() {\n    testSame(\"try { } finally {  }\");\n    testSame(\"try { foo(); } finally bar(); \");\n    testSame(\"try { foo() } finally { bar() }\");\n    testSame(\"try { foo(); } catch (e) {e()} finally bar(); \");\n    testSame(\"try { foo() } catch (e) {e()} finally { bar() }\");\n  }\n",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 37)",
            "(line 125,col 5)-(line 125,col 47)",
            "(line 126,col 5)-(line 126,col 48)",
            "(line 127,col 5)-(line 127,col 63)",
            "(line 128,col 5)-(line 128,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testUnreachableCatch()",
        "snippet": "  public void testUnreachableCatch() {\n    assertUnreachable(\"try { var x = 0 } catch (e) { }\");\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testSpuriousBreak()",
        "snippet": "  public void testSpuriousBreak() {\n    testSame(\"switch (x) { default: throw x; break; }\");\n  }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.testInstanceOfThrowsException()",
        "snippet": "  public void testInstanceOfThrowsException() {\n    testSame(\"function f() {try { if (value instanceof type) return true; } \" +\n             \"catch (e) { }}\");\n  }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 141,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCodeTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCodeTest.assertUnreachable(java.lang.String)",
        "snippet": "  private void assertUnreachable(String js) {\n    test(js, js, CheckUnreachableCode.UNREACHABLE_CODE);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testCfg(java.lang.String, java.lang.String)",
        "snippet": "  private void testCfg(String input, String expected) {\n    testCfg(input, expected, true);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "\n   * Given an input in Javascript, test if the control flow analysis\n   * creates the proper control flow graph by comparing the expected\n   * Dot file output.\n   *\n   * @param input Input Javascript.\n   * @param expected Expected Graphvis Dot file.\n   ",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllEdges(\n      ControlFlowGraph<Node> cfg) {\n    List<DiGraphEdge<Node, Branch>> edges = Lists.newArrayList();\n    for (DiGraphNode<Node, Branch> n : cfg.getDirectedGraphNodes()) {\n      for (DiGraphEdge<Node, Branch> e : cfg.getOutEdges(n.getValue())) {\n        edges.add(e);\n      }\n    }\n    return edges;\n  }\n",
        "begin_line": 55,
        "end_line": 64,
        "comment": "\n   * Gets all the edges of the graph.\n   ",
        "child_ranges": [
            "(line 57,col 5)-(line 57,col 65)",
            "(line 58,col 5)-(line 62,col 5)",
            "(line 63,col 5)-(line 63,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllEdges(\n      ControlFlowGraph<Node> cfg, int startToken, int endToken) {\n    List<DiGraphEdge<Node, Branch>> edges = getAllEdges(cfg);\n    Iterator<DiGraphEdge<Node, Branch>> it = edges.iterator();\n    while (it.hasNext()) {\n      DiGraphEdge<Node, Branch> edge = it.next();\n      Node startNode = edge.getSource().getValue();\n      Node endNode = edge.getDestination().getValue();\n      if (startNode == null || endNode == null ||\n          startNode.getType() != startToken || endNode.getType() != endToken) {\n        it.remove();\n      }\n    }\n    return edges;\n  }\n",
        "begin_line": 70,
        "end_line": 84,
        "comment": "\n   * Gets all the control flow edges from some node with the first token to\n   * some node with the second token.\n   ",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 61)",
            "(line 73,col 5)-(line 73,col 62)",
            "(line 74,col 5)-(line 82,col 5)",
            "(line 83,col 5)-(line 83,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllEdges(\n      ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type) {\n    List<DiGraphEdge<Node, Branch>> edges =\n        getAllEdges(cfg, startToken, endToken);\n    Iterator<DiGraphEdge<Node, Branch>> it = edges.iterator();\n    while (it.hasNext()) {\n      if (type != it.next().getValue()) {\n        it.remove();\n      }\n    }\n    return edges;\n  }\n",
        "begin_line": 90,
        "end_line": 101,
        "comment": "\n   * Gets all the control flow edges of the given type from some node with the\n   * first token to some node with the second token.\n   ",
        "child_ranges": [
            "(line 92,col 5)-(line 93,col 47)",
            "(line 94,col 5)-(line 94,col 62)",
            "(line 95,col 5)-(line 99,col 5)",
            "(line 100,col 5)-(line 100,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.isAncestor(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean isAncestor(Node n, Node maybeDescendent) {\n    for (Node current = n.getFirstChild(); current != null;\n         current = current.getNext()) {\n      if (current == maybeDescendent ||\n          isAncestor(current, maybeDescendent)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 103,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 104,col 5)-(line 110,col 5)",
            "(line 112,col 5)-(line 112,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllDownEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllDownEdges(\n      ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type) {\n    List<DiGraphEdge<Node, Branch>> edges =\n        getAllEdges(cfg, startToken, endToken, type);\n    Iterator<DiGraphEdge<Node, Branch>> it = edges.iterator();\n    while (it.hasNext()) {\n      DiGraphEdge<Node, Branch> edge = it.next();\n      Node source = edge.getSource().getValue();\n      Node dest = edge.getDestination().getValue();\n      if (!isAncestor(source, dest)) {\n        it.remove();\n      }\n    }\n\n    return edges;\n  }\n",
        "begin_line": 120,
        "end_line": 135,
        "comment": "\n   * Gets all the control flow edges of the given type from some node with\n   * the first token to some node with the second token.\n   * This edge must flow from a parent to one of its descendants.\n   ",
        "child_ranges": [
            "(line 122,col 5)-(line 123,col 53)",
            "(line 124,col 5)-(line 124,col 62)",
            "(line 125,col 5)-(line 132,col 5)",
            "(line 134,col 5)-(line 134,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertNoEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int)",
        "snippet": "  private static void assertNoEdge(ControlFlowGraph<Node> cfg, int startToken,\n      int endToken) {\n    assertEquals(0, getAllEdges(cfg, startToken, endToken).size());\n  }\n",
        "begin_line": 141,
        "end_line": 144,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   ",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertDownEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static void assertDownEdge(ControlFlowGraph<Node> cfg,\n      int startToken, int endToken, Branch type) {\n    assertTrue(\"No down edge found\",\n        0 != getAllDownEdges(cfg, startToken, endToken, type).size());\n  }\n",
        "begin_line": 151,
        "end_line": 155,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   * This edge must flow from a parent to one of its descendants.\n   ",
        "child_ranges": [
            "(line 153,col 5)-(line 154,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertUpEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static void assertUpEdge(ControlFlowGraph<Node> cfg,\n      int startToken, int endToken, Branch type) {\n    assertTrue(\"No up edge found\",\n        0 != getAllDownEdges(cfg, endToken, startToken, type).size());\n  }\n",
        "begin_line": 162,
        "end_line": 166,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   * This edge must flow from a node to one of its ancestors.\n   ",
        "child_ranges": [
            "(line 164,col 5)-(line 165,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertCrossEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static void assertCrossEdge(ControlFlowGraph<Node> cfg,\n      int startToken, int endToken, Branch type) {\n    int numDownEdges = getAllDownEdges(cfg, startToken, endToken, type).size();\n    int numUpEdges = getAllDownEdges(cfg, endToken, startToken, type).size();\n    int numEdges = getAllEdges(cfg, startToken, endToken, type).size();\n    assertTrue(\"No cross edges found\", numDownEdges + numUpEdges < numEdges);\n  }\n",
        "begin_line": 173,
        "end_line": 179,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   * This edge must flow between two nodes that are not in the same subtree.\n   ",
        "child_ranges": [
            "(line 175,col 5)-(line 175,col 79)",
            "(line 176,col 5)-(line 176,col 77)",
            "(line 177,col 5)-(line 177,col 71)",
            "(line 178,col 5)-(line 178,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertReturnEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int)",
        "snippet": "  private static void assertReturnEdge(ControlFlowGraph<Node> cfg,\n      int startToken) {\n    List<DiGraphEdge<Node, Branch>> edges = getAllEdges(cfg);\n    for (DiGraphEdge<Node, Branch> edge : edges) {\n      Node source = edge.getSource().getValue();\n      DiGraphNode<Node, Branch> dest = edge.getDestination();\n      if (source.getType() == startToken &&\n          cfg.isImplicitReturn(dest)) {\n        return;\n      }\n    }\n\n    fail(\"No return edge found\");\n  }\n",
        "begin_line": 185,
        "end_line": 198,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to the return node.\n   ",
        "child_ranges": [
            "(line 187,col 5)-(line 187,col 61)",
            "(line 188,col 5)-(line 195,col 5)",
            "(line 197,col 5)-(line 197,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertNoReturnEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int)",
        "snippet": "  private static void assertNoReturnEdge(ControlFlowGraph<Node> cfg,\n      int startToken) {\n    List<DiGraphEdge<Node, Branch>> edges = getAllEdges(cfg);\n    for (DiGraphEdge<Node, Branch> edge : edges) {\n      Node source = edge.getSource().getValue();\n      DiGraphNode<Node, Branch> dest = edge.getDestination();\n      if (source.getType() == startToken) {\n        assertTrue(\"Token \" + startToken + \" should not have an out going\" +\n            \" edge to the implicit return\", !cfg.isImplicitReturn(dest));\n        return;\n      }\n    }\n  }\n",
        "begin_line": 204,
        "end_line": 216,
        "comment": "\n   * Assert that there exists no control flow edge of the given type\n   * from some node with the first token to the return node.\n   ",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 61)",
            "(line 207,col 5)-(line 215,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.createCfg(java.lang.String, boolean)",
        "snippet": "  private ControlFlowGraph<Node> createCfg(String input,\n      boolean runSynBlockPass) {\n    Compiler compiler = new Compiler();\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, true);\n\n    Node root = compiler.parseSyntheticCode(\"cfgtest\", input);\n    if (runSynBlockPass) {\n      CreateSyntheticBlocks pass = new CreateSyntheticBlocks(\n          compiler, \"START\", \"END\");\n      pass.process(null, root);\n    }\n    cfa.process(null, root);\n    return cfa.getCfg();\n  }\n",
        "begin_line": 223,
        "end_line": 236,
        "comment": "\n   * Given an input in Javascript, get a control flow graph for it.\n   *\n   * @param input Input Javascript.\n   ",
        "child_ranges": [
            "(line 225,col 5)-(line 225,col 39)",
            "(line 226,col 5)-(line 226,col 70)",
            "(line 228,col 5)-(line 228,col 62)",
            "(line 229,col 5)-(line 233,col 5)",
            "(line 234,col 5)-(line 234,col 28)",
            "(line 235,col 5)-(line 235,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.createCfg(java.lang.String)",
        "snippet": "  private ControlFlowGraph<Node> createCfg(String input) {\n    return createCfg(input, false);\n  }\n",
        "begin_line": 238,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 239,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testCfg(java.lang.String, java.lang.String, boolean)",
        "snippet": "  private void testCfg(String input, String expected,\n      boolean shouldTraverseFunctions) {\n    Compiler compiler = new Compiler();\n    ControlFlowAnalysis cfa =\n        new ControlFlowAnalysis(compiler, shouldTraverseFunctions);\n\n    Node root = compiler.parseSyntheticCode(\"cfgtest\", input);\n    cfa.process(null, root);\n    ControlFlowGraph<Node> cfg = cfa.getCfg();\n    try {\n      assertEquals(expected, DotFormatter.toDot(root, cfg));\n    } catch (java.io.IOException e) {\n      fail(\"Tests failed with IOExceptions\");\n    }\n  }\n",
        "begin_line": 253,
        "end_line": 267,
        "comment": "\n   * Given an input in Javascript, test if the control flow analysis\n   * creates the proper control flow graph by comparing the expected\n   * Dot file output.\n   *\n   * @param input Input Javascript.\n   * @param expected Expected Graphvis Dot file.\n   * @param shouldTraverseFunctions Whether to traverse functions when\n   *    constructing the CFG (true by default). Passed in to the\n   *    constructor of {@link ControlFlowAnalysis}.\n   ",
        "child_ranges": [
            "(line 255,col 5)-(line 255,col 39)",
            "(line 256,col 5)-(line 257,col 67)",
            "(line 259,col 5)-(line 259,col 62)",
            "(line 260,col 5)-(line 260,col 28)",
            "(line 261,col 5)-(line 261,col 46)",
            "(line 262,col 5)-(line 266,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleStatements()",
        "snippet": "  public void testSimpleStatements() {\n    String src = \"var a; a = a; a = a\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SCRIPT, Token.VAR, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.VAR, Token.EXPR_RESULT, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.EXPR_RESULT, Branch.UNCOND);\n  }\n",
        "begin_line": 269,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 39)",
            "(line 271,col 5)-(line 271,col 48)",
            "(line 272,col 5)-(line 272,col 64)",
            "(line 273,col 5)-(line 273,col 70)",
            "(line 274,col 5)-(line 274,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleIf()",
        "snippet": "  public void testSimpleIf() {\n    String src = \"var x; if (x) { x() } else { x() };\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SCRIPT, Token.VAR, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.VAR, Token.IF, Branch.UNCOND);\n    assertDownEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertNoEdge(cfg, Token.EXPR_RESULT, Token.CALL);\n    assertDownEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_FALSE);\n    assertReturnEdge(cfg, Token.EMPTY);\n  }\n",
        "begin_line": 278,
        "end_line": 288,
        "comment": " Test a simple IF control flow.",
        "child_ranges": [
            "(line 279,col 5)-(line 279,col 55)",
            "(line 280,col 5)-(line 280,col 48)",
            "(line 281,col 5)-(line 281,col 64)",
            "(line 282,col 5)-(line 282,col 61)",
            "(line 283,col 5)-(line 283,col 63)",
            "(line 284,col 5)-(line 284,col 71)",
            "(line 285,col 5)-(line 285,col 53)",
            "(line 286,col 5)-(line 286,col 64)",
            "(line 287,col 5)-(line 287,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testBreakingBlock()",
        "snippet": "  public void testBreakingBlock() {\n    // BUG #1382217\n    String src = \"X: { while(1) { break } }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertUpEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);\n  }\n",
        "begin_line": 290,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 45)",
            "(line 293,col 5)-(line 293,col 48)",
            "(line 294,col 5)-(line 294,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testBreakingTryBlock()",
        "snippet": "  public void testBreakingTryBlock() {\n    String src = \"a: try { break a; } finally {} if(x) {}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.BREAK, Token.IF, Branch.UNCOND);\n\n    src = \"a: try {} finally {break a;} if(x) {}\";\n    cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.BREAK, Token.IF, Branch.UNCOND);\n\n    src = \"a: try {} catch(e) {break a;} if(x) {}\";\n    cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.BREAK, Token.IF, Branch.UNCOND);\n  }\n",
        "begin_line": 297,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 298,col 59)",
            "(line 299,col 5)-(line 299,col 48)",
            "(line 300,col 5)-(line 300,col 63)",
            "(line 302,col 5)-(line 302,col 50)",
            "(line 303,col 5)-(line 303,col 25)",
            "(line 304,col 5)-(line 304,col 63)",
            "(line 306,col 5)-(line 306,col 51)",
            "(line 307,col 5)-(line 307,col 25)",
            "(line 308,col 5)-(line 308,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testWithStatement()",
        "snippet": "  public void testWithStatement() {\n    String src = \"var x, y; with(x) { y() }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.WITH, Token.BLOCK, Branch.UNCOND);\n    assertNoEdge(cfg, Token.WITH, Token.NAME);\n    assertNoEdge(cfg, Token.NAME, Token.BLOCK);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertReturnEdge(cfg, Token.EXPR_RESULT);\n  }\n",
        "begin_line": 311,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 312,col 5)-(line 312,col 45)",
            "(line 313,col 5)-(line 313,col 48)",
            "(line 314,col 5)-(line 314,col 64)",
            "(line 315,col 5)-(line 315,col 46)",
            "(line 316,col 5)-(line 316,col 47)",
            "(line 317,col 5)-(line 317,col 71)",
            "(line 318,col 5)-(line 318,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleWhile()",
        "snippet": "  public void testSimpleWhile() {\n    String src = \"var x; while (x) { x(); if (x) { break; } x() }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertDownEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_TRUE);\n    assertReturnEdge(cfg, Token.BREAK);\n  }\n",
        "begin_line": 322,
        "end_line": 329,
        "comment": " Test a simple WHILE control flow with BREAKs.",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 67)",
            "(line 324,col 5)-(line 324,col 48)",
            "(line 325,col 5)-(line 325,col 66)",
            "(line 326,col 5)-(line 326,col 71)",
            "(line 327,col 5)-(line 327,col 63)",
            "(line 328,col 5)-(line 328,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleSwitch()",
        "snippet": "  public void testSimpleSwitch() {\n    String src = \"var x; switch(x){ case(1): x(); case('x'): x(); break\" +\n        \"; default: x();}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.VAR, Token.SWITCH, Branch.UNCOND);\n    assertNoEdge(cfg, Token.SWITCH, Token.NAME);\n    // Transfer between cases and default.\n    assertDownEdge(cfg, Token.SWITCH, Token.CASE, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.CASE, Token.CASE, Branch.ON_FALSE);\n    assertCrossEdge(cfg, Token.CASE, Token.DEFAULT, Branch.ON_FALSE);\n    // Within each case.\n    assertDownEdge(cfg, Token.CASE, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertNoEdge(cfg, Token.EXPR_RESULT, Token.CALL);\n    assertNoEdge(cfg, Token.CALL, Token.NAME);\n  }\n",
        "begin_line": 331,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 333,col 27)",
            "(line 334,col 5)-(line 334,col 48)",
            "(line 335,col 5)-(line 335,col 65)",
            "(line 336,col 5)-(line 336,col 48)",
            "(line 338,col 5)-(line 338,col 65)",
            "(line 339,col 5)-(line 339,col 66)",
            "(line 340,col 5)-(line 340,col 69)",
            "(line 342,col 5)-(line 342,col 65)",
            "(line 343,col 5)-(line 343,col 71)",
            "(line 344,col 5)-(line 344,col 53)",
            "(line 345,col 5)-(line 345,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleNoDefault()",
        "snippet": "  public void testSimpleNoDefault() {\n    String src = \"var x; switch(x){ case(1): break; } x();\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.CASE, Token.EXPR_RESULT, Branch.ON_FALSE);\n  }\n",
        "begin_line": 348,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 349,col 5)-(line 349,col 60)",
            "(line 350,col 5)-(line 350,col 48)",
            "(line 351,col 5)-(line 351,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSwitchDefaultFirst()",
        "snippet": "  public void testSwitchDefaultFirst() {\n    // DEFAULT appears first. But it is should evaluated last.\n    String src = \"var x; switch(x){ default: break; case 1: break; }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SWITCH, Token.CASE, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.CASE, Token.DEFAULT, Branch.ON_FALSE);\n  }\n",
        "begin_line": 354,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 70)",
            "(line 357,col 5)-(line 357,col 48)",
            "(line 358,col 5)-(line 358,col 65)",
            "(line 359,col 5)-(line 359,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSwitchDefaultInMiddle()",
        "snippet": "  public void testSwitchDefaultInMiddle() {\n    // DEFAULT appears in the middle. But it is should evaluated last.\n    String src = \"var x; switch(x){ case 1: break; default: break; \" +\n        \"case 2: break; }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SWITCH, Token.CASE, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.CASE, Token.CASE, Branch.ON_FALSE);\n    assertCrossEdge(cfg, Token.CASE, Token.DEFAULT, Branch.ON_FALSE);\n  }\n",
        "begin_line": 362,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 365,col 27)",
            "(line 366,col 5)-(line 366,col 48)",
            "(line 367,col 5)-(line 367,col 65)",
            "(line 368,col 5)-(line 368,col 66)",
            "(line 369,col 5)-(line 369,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSwitchEmpty()",
        "snippet": "  public void testSwitchEmpty() {\n    // DEFAULT appears first. But it is should evaluated last.\n    String src = \"var x; switch(x){}; x()\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.SWITCH, Token.EMPTY, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.EMPTY, Token.EXPR_RESULT, Branch.UNCOND);\n  }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 374,col 5)-(line 374,col 43)",
            "(line 375,col 5)-(line 375,col 48)",
            "(line 376,col 5)-(line 376,col 67)",
            "(line 377,col 5)-(line 377,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnThrowingException()",
        "snippet": "  public void testReturnThrowingException() {\n    String src = \"function f() {try { return a(); } catch (e) {e()}}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.RETURN, Token.BLOCK, Branch.ON_EX);\n    assertDownEdge(cfg, Token.BLOCK, Token.CATCH, Branch.UNCOND);\n  }\n",
        "begin_line": 380,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 381,col 70)",
            "(line 382,col 5)-(line 382,col 48)",
            "(line 383,col 5)-(line 383,col 66)",
            "(line 384,col 5)-(line 384,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleFor()",
        "snippet": "  public void testSimpleFor() {\n    String src = \"var a; for (var x = 0; x < 100; x++) { a(); }\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"VAR\\\"];\\n\" +\n      \"  node1 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FOR\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node4 -> node3 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node3 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 [label=\\\"LT\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"NAME\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node7 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"INC\\\"];\\n\" +\n      \"  node4 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node11 [weight=1];\\n\" +\n      \"  node10 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node12 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"CALL\\\"];\\n\" +\n      \"  node13 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node13 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 -> node13 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node12 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 388,
        "end_line": 441,
        "comment": " Test a simple FOR loop.",
        "child_ranges": [
            "(line 389,col 5)-(line 389,col 65)",
            "(line 390,col 5)-(line 439,col 12)",
            "(line 440,col 5)-(line 440,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleForWithContinue()",
        "snippet": "  public void testSimpleForWithContinue() {\n    String src = \"var a; for (var x = 0; x < 100; x++) {a();continue;a()}\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"VAR\\\"];\\n\" +\n      \"  node1 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FOR\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node4 -> node3 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node3 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 [label=\\\"LT\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"NAME\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node7 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"INC\\\"];\\n\" +\n      \"  node4 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node11 [weight=1];\\n\" +\n      \"  node10 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node12 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"CALL\\\"];\\n\" +\n      \"  node13 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node16 [label=\\\"CONTINUE\\\"];\\n\" +\n      \"  node13 -> node16 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 -> node16 [weight=1];\\n\" +\n      \"  node16 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node12 -> node17 [weight=1];\\n\" +\n      \"  node18 [label=\\\"CALL\\\"];\\n\" +\n      \"  node17 -> node18 [weight=1];\\n\" +\n      \"  node19 [label=\\\"NAME\\\"];\\n\" +\n      \"  node18 -> node19 [weight=1];\\n\" +\n      \"  node17 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 -> node13 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node12 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 443,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 444,col 5)-(line 444,col 75)",
            "(line 445,col 5)-(line 506,col 12)",
            "(line 507,col 5)-(line 507,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testNestedFor()",
        "snippet": "  public void testNestedFor() {\n    // This is tricky as the inner FOR branches to \"x++\" ON_FALSE.\n    String src = \"var a,b;a();for(var x=0;x<100;x++){for(var y=0;y<100;y++){\" +\n      \"continue;b();}}\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node1 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"CALL\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NAME\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"VAR\\\"];\\n\" +\n      \"  node4 -> node7 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 [label=\\\"FOR\\\"];\\n\" +\n      \"  node0 -> node8 [weight=1];\\n\" +\n      \"  node8 -> node7 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n      \"  node7 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node11 [label=\\\"LT\\\"];\\n\" +\n      \"  node8 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"NAME\\\"];\\n\" +\n      \"  node11 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node11 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"INC\\\"];\\n\" +\n      \"  node8 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node14 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node16 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node8 -> node16 [weight=1];\\n\" +\n      \"  node17 [label=\\\"FOR\\\"];\\n\" +\n      \"  node16 -> node17 [weight=1];\\n\" +\n      \"  node18 [label=\\\"VAR\\\"];\\n\" +\n      \"  node17 -> node18 [weight=1];\\n\" +\n      \"  node19 [label=\\\"NAME\\\"];\\n\" +\n      \"  node18 -> node19 [weight=1];\\n\" +\n      \"  node20 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node19 -> node20 [weight=1];\\n\" +\n      \"  node18 -> node17 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node21 [label=\\\"LT\\\"];\\n\" +\n      \"  node17 -> node21 [weight=1];\\n\" +\n      \"  node22 [label=\\\"NAME\\\"];\\n\" +\n      \"  node21 -> node22 [weight=1];\\n\" +\n      \"  node23 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node21 -> node23 [weight=1];\\n\" +\n      \"  node24 [label=\\\"INC\\\"];\\n\" +\n      \"  node17 -> node24 [weight=1];\\n\" +\n      \"  node25 [label=\\\"NAME\\\"];\\n\" +\n      \"  node24 -> node25 [weight=1];\\n\" +\n      \"  node24 -> node17 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node26 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node17 -> node26 [weight=1];\\n\" +\n      \"  node27 [label=\\\"CONTINUE\\\"];\\n\" +\n      \"  node26 -> node27 [weight=1];\\n\" +\n      \"  node27 -> node24 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node28 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node26 -> node28 [weight=1];\\n\" +\n      \"  node29 [label=\\\"CALL\\\"];\\n\" +\n      \"  node28 -> node29 [weight=1];\\n\" +\n      \"  node30 [label=\\\"NAME\\\"];\\n\" +\n      \"  node29 -> node30 [weight=1];\\n\" +\n      \"  node28 -> node24 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node26 -> node27 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node17 -> node14 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node17 -> node26 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node16 -> node18 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> node16 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 510,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 512,col 5)-(line 513,col 24)",
            "(line 514,col 5)-(line 607,col 12)",
            "(line 608,col 5)-(line 608,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testNestedDoWithBreak()",
        "snippet": "  public void testNestedDoWithBreak() {\n    // The BREAK branches to a() with UNCOND.\n    String src = \"var a;do{do{break}while(a);do{a()}while(a)}while(a);\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"DO\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node4 -> node3 [weight=1];\\n\" +\n      \"  node5 [label=\\\"DO\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BREAK\\\"];\\n\" +\n      \"  node6 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node6 -> node7 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n      \"  node5 -> node9 [weight=1];\\n\" +\n      \"  node5 -> node6 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node5 -> node8 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node10 [label=\\\"DO\\\"];\\n\" +\n      \"  node3 -> node10 [weight=1];\\n\" +\n      \"  node10 -> node8 [weight=1];\\n\" +\n      \"  node11 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node8 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"CALL\\\"];\\n\" +\n      \"  node11 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"NAME\\\"];\\n\" +\n      \"  node12 -> node13 [weight=1];\\n\" +\n      \"  node11 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> node11 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node14 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node14 [weight=1];\\n\" +\n      \"  node10 -> node4 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node10 -> node8 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node3 -> node6 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node15 [weight=1];\\n\" +\n      \"  node4 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node3 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 611,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 613,col 72)",
            "(line 614,col 5)-(line 673,col 12)",
            "(line 674,col 5)-(line 674,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testForIn()",
        "snippet": "  public void testForIn() {\n    String src = \"var a,b;for(a in b){a()};\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"FOR\\\"];\\n\" +\n      \"  node1 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"CALL\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node8 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node11 [label=\\\"EMPTY\\\"];\\n\" +\n      \"  node4 -> node11 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node7 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node11 [weight=1];\\n\" +\n      \"  node11 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 677,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 678,col 5)-(line 678,col 45)",
            "(line 679,col 5)-(line 718,col 12)",
            "(line 719,col 5)-(line 719,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testThrow()",
        "snippet": "  public void testThrow() {\n    String src = \"function f() { throw 1; f() }\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"LP\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"THROW\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"CALL\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node7 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node5 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 722,
        "end_line": 755,
        "comment": "",
        "child_ranges": [
            "(line 723,col 5)-(line 723,col 49)",
            "(line 724,col 5)-(line 753,col 12)",
            "(line 754,col 5)-(line 754,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleFunction()",
        "snippet": "  public void testSimpleFunction() {\n    String src = \"function f() { f() } f()\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"LP\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"CALL\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"NAME\\\"];\\n\" +\n      \"  node6 -> node7 [weight=1];\\n\" +\n      \"  node5 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node5 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node0 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"CALL\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node8 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 758,
        "end_line": 795,
        "comment": " Test a simple FUNCTION.",
        "child_ranges": [
            "(line 759,col 5)-(line 759,col 44)",
            "(line 760,col 5)-(line 793,col 12)",
            "(line 794,col 5)-(line 794,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleCatch()",
        "snippet": "  public void testSimpleCatch() {\n    String src = \"try{ throw x; x(); x['stuff']; x.x; x} catch (e) { e() }\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"THROW\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"NAME\\\"];\\n\" +\n      \"  node3 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node3 -> node5 \" +\n      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node6 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node2 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"CALL\\\"];\\n\" +\n      \"  node6 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"NAME\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node6 -> node5 \" +\n      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node6 -> node9 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node2 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"GETELEM\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"STRING\\\"];\\n\" +\n      \"  node10 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node9 -> node13 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node9 -> node5 \" +\n      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node2 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"GETPROP\\\"];\\n\" +\n      \"  node13 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node16 [label=\\\"STRING\\\"];\\n\" +\n      \"  node14 -> node16 [weight=1];\\n\" +\n      \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node13 -> node17 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node13 -> node5 \" +\n      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node2 -> node17 [weight=1];\\n\" +\n      \"  node18 [label=\\\"NAME\\\"];\\n\" +\n      \"  node17 -> node18 [weight=1];\\n\" +\n      \"  node17 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node2 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node5 [weight=1];\\n\" +\n      \"  node19 [label=\\\"CATCH\\\"];\\n\" +\n      \"  node5 -> node19 [weight=1];\\n\" +\n      \"  node20 [label=\\\"NAME\\\"];\\n\" +\n      \"  node19 -> node20 [weight=1];\\n\" +\n      \"  node21 [label=\\\"EMPTY\\\"];\\n\" +\n      \"  node19 -> node21 [weight=1];\\n\" +\n      \"  node22 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node19 -> node22 [weight=1];\\n\" +\n      \"  node23 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node22 -> node23 [weight=1];\\n\" +\n      \"  node24 [label=\\\"CALL\\\"];\\n\" +\n      \"  node23 -> node24 [weight=1];\\n\" +\n      \"  node25 [label=\\\"NAME\\\"];\\n\" +\n      \"  node24 -> node25 [weight=1];\\n\" +\n      \"  node23 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node22 -> node23 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node19 -> node22 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node5 -> node19 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node2 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 797,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 798,col 5)-(line 798,col 76)",
            "(line 799,col 5)-(line 882,col 12)",
            "(line 883,col 5)-(line 883,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testFunctionWithinTry()",
        "snippet": "  public void testFunctionWithinTry() {\n    // Make sure we don't search for the handler outside of the function.\n    String src = \"try { function f() {throw 1;} } catch (e) { }\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"NAME\\\"];\\n\" +\n      \"  node3 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"LP\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node3 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"THROW\\\"];\\n\" +\n      \"  node6 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node6 -> node7 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node3 -> node6 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node2 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node9 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"CATCH\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"EMPTY\\\"];\\n\" +\n      \"  node10 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node10 -> node13 [weight=1];\\n\" +\n      \"  node13 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node10 -> node13 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node9 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node2 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n    \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 886,
        "end_line": 936,
        "comment": "",
        "child_ranges": [
            "(line 888,col 5)-(line 888,col 65)",
            "(line 889,col 5)-(line 934,col 10)",
            "(line 935,col 5)-(line 935,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testNestedCatch()",
        "snippet": "  public void testNestedCatch() {\n    // Make sure we are going to the right handler.\n    String src = \"try{try{throw 1;}catch(e){throw 2}}catch(f){}\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"TRY\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node3 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"THROW\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node5 -> node7 \" +\n      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node5 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node3 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"CATCH\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"EMPTY\\\"];\\n\" +\n      \"  node8 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node8 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"THROW\\\"];\\n\" +\n      \"  node11 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node12 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node12 -> node14 \" +\n      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node11 -> node12 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> node11 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node3 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node2 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"CATCH\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node16 [label=\\\"NAME\\\"];\\n\" +\n      \"  node15 -> node16 [weight=1];\\n\" +\n      \"  node17 [label=\\\"EMPTY\\\"];\\n\" +\n      \"  node15 -> node17 [weight=1];\\n\" +\n      \"  node18 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node15 -> node18 [weight=1];\\n\" +\n      \"  node18 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node15 -> node18 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node14 -> node15 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node2 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 938,
        "end_line": 1008,
        "comment": "",
        "child_ranges": [
            "(line 940,col 5)-(line 940,col 65)",
            "(line 941,col 5)-(line 1006,col 12)",
            "(line 1007,col 5)-(line 1007,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleFinally()",
        "snippet": "  public void testSimpleFinally() {\n    String src = \"try{var x; foo()}finally{}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.TRY, Token.BLOCK, Branch.UNCOND);\n    assertDownEdge(cfg, Token.BLOCK, Token.VAR, Branch.UNCOND);\n    // VAR to FINALLY.\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.UNCOND);\n    // No CATCH to FINALLY.\n    assertNoEdge(cfg, Token.BLOCK, Token.BLOCK);\n  }\n",
        "begin_line": 1010,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 46)",
            "(line 1012,col 5)-(line 1012,col 48)",
            "(line 1013,col 5)-(line 1013,col 63)",
            "(line 1014,col 5)-(line 1014,col 63)",
            "(line 1016,col 5)-(line 1016,col 72)",
            "(line 1018,col 5)-(line 1018,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleCatchFinally()",
        "snippet": "  public void testSimpleCatchFinally() {\n    // Make sure we are going to the right handler.\n    String src = \"try{ if(a){throw 1}else{a} } catch(e){a}finally{a}\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"IF\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"NAME\\\"];\\n\" +\n      \"  node3 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"THROW\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node6 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node6 -> node8 \" +\n      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node5 -> node6 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node9 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node3 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node10 -> node12 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node9 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node3 -> node5 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node3 -> node9 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node2 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node8 [weight=1];\\n\" +\n      \"  node13 [label=\\\"CATCH\\\"];\\n\" +\n      \"  node8 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"NAME\\\"];\\n\" +\n      \"  node13 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"EMPTY\\\"];\\n\" +\n      \"  node13 -> node15 [weight=1];\\n\" +\n      \"  node16 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node13 -> node16 [weight=1];\\n\" +\n      \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node16 -> node17 [weight=1];\\n\" +\n      \"  node18 [label=\\\"NAME\\\"];\\n\" +\n      \"  node17 -> node18 [weight=1];\\n\" +\n      \"  node17 -> node12 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node16 -> node17 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node13 -> node16 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> node13 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node12 [weight=1];\\n\" +\n      \"  node19 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node12 -> node19 [weight=1];\\n\" +\n      \"  node20 [label=\\\"NAME\\\"];\\n\" +\n      \"  node19 -> node20 [weight=1];\\n\" +\n      \"  node19 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 -> node19 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node2 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 1021,
        "end_line": 1099,
        "comment": "",
        "child_ranges": [
            "(line 1023,col 5)-(line 1023,col 70)",
            "(line 1024,col 5)-(line 1097,col 12)",
            "(line 1098,col 5)-(line 1098,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testComplicatedFinally2()",
        "snippet": "  public void testComplicatedFinally2() {\n    // Now the most nasty case.....\n    String src = \"while(1){try{\" +\n      \"if(a){a;continue;}else if(b){b;break;} else if(c) throw 1; else a}\" +\n      \"catch(e){}finally{c()}bar}foo\";\n\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    // Focus only on the ON_EX edges.\n    assertCrossEdge(cfg, Token.CONTINUE, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.THROW, Token.BLOCK, Branch.ON_EX);\n  }\n",
        "begin_line": 1101,
        "end_line": 1112,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1105,col 38)",
            "(line 1107,col 5)-(line 1107,col 48)",
            "(line 1109,col 5)-(line 1109,col 69)",
            "(line 1110,col 5)-(line 1110,col 66)",
            "(line 1111,col 5)-(line 1111,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testDeepNestedBreakwithFinally()",
        "snippet": "  public void testDeepNestedBreakwithFinally() {\n    String src = \"X:while(1){try{while(2){try{var a;break X;}\" +\n        \"finally{}}}finally{}}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.TRY, Branch.UNCOND);\n    assertDownEdge(cfg, Token.BLOCK, Token.VAR, Branch.UNCOND);\n    // BREAK to FINALLY.\n    assertCrossEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);\n    // FINALLY to FINALLY.\n    assertCrossEdge(cfg, Token.BLOCK, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_FALSE);\n    assertReturnEdge(cfg, Token.BLOCK);\n  }\n",
        "begin_line": 1114,
        "end_line": 1127,
        "comment": "",
        "child_ranges": [
            "(line 1115,col 5)-(line 1116,col 32)",
            "(line 1117,col 5)-(line 1117,col 48)",
            "(line 1118,col 5)-(line 1118,col 66)",
            "(line 1119,col 5)-(line 1119,col 63)",
            "(line 1120,col 5)-(line 1120,col 63)",
            "(line 1122,col 5)-(line 1122,col 66)",
            "(line 1124,col 5)-(line 1124,col 66)",
            "(line 1125,col 5)-(line 1125,col 68)",
            "(line 1126,col 5)-(line 1126,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testDeepNestedFinally()",
        "snippet": "  public void testDeepNestedFinally() {\n    String src = \"try{try{try{throw 1}\" +\n        \"finally{1;var a}}finally{2;if(a);}}finally{3;a()}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.THROW, Token.BLOCK, Branch.ON_EX);\n    assertCrossEdge(cfg, Token.VAR, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.IF, Token.BLOCK, Branch.UNCOND);\n  }\n",
        "begin_line": 1129,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1130,col 5)-(line 1131,col 60)",
            "(line 1132,col 5)-(line 1132,col 48)",
            "(line 1133,col 5)-(line 1133,col 65)",
            "(line 1134,col 5)-(line 1134,col 64)",
            "(line 1135,col 5)-(line 1135,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturn()",
        "snippet": "  public void testReturn() {\n    String src = \"function f() { return; }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1138,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 5)-(line 1139,col 44)",
            "(line 1140,col 5)-(line 1140,col 48)",
            "(line 1141,col 5)-(line 1141,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnInFinally()",
        "snippet": "  public void testReturnInFinally() {\n    String src = \"function f(x){ try{} finally {return x;} }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1144,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1145,col 5)-(line 1145,col 62)",
            "(line 1146,col 5)-(line 1146,col 48)",
            "(line 1147,col 5)-(line 1147,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnInFinally2()",
        "snippet": "  public void testReturnInFinally2() {\n    String src = \"function f(x){\" +\n      \" try{ try{}finally{var dummy; return x;} } finally {} }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.VAR, Token.RETURN, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.RETURN, Token.BLOCK, Branch.UNCOND);\n    assertReturnEdge(cfg, Token.BLOCK);\n    assertNoReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1150,
        "end_line": 1158,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1152,col 64)",
            "(line 1153,col 5)-(line 1153,col 48)",
            "(line 1154,col 5)-(line 1154,col 65)",
            "(line 1155,col 5)-(line 1155,col 67)",
            "(line 1156,col 5)-(line 1156,col 39)",
            "(line 1157,col 5)-(line 1157,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnInTry()",
        "snippet": "  public void testReturnInTry() {\n    String src = \"function f(x){ try{x; return x()} finally {} var y;}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.RETURN, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.RETURN, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.BLOCK, Token.VAR, Branch.UNCOND);\n    assertReturnEdge(cfg, Token.VAR);\n    assertReturnEdge(cfg, Token.BLOCK);\n    assertNoReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1160,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1161,col 5)-(line 1161,col 72)",
            "(line 1162,col 5)-(line 1162,col 48)",
            "(line 1163,col 5)-(line 1163,col 73)",
            "(line 1164,col 5)-(line 1164,col 67)",
            "(line 1165,col 5)-(line 1165,col 64)",
            "(line 1166,col 5)-(line 1166,col 37)",
            "(line 1167,col 5)-(line 1167,col 39)",
            "(line 1168,col 5)-(line 1168,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testOptionNotToTraverseFunctions()",
        "snippet": "  public void testOptionNotToTraverseFunctions() {\n    String src = \"var x = 1; function f() { x = null; }\";\n    String expectedWhenNotTraversingFunctions = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node1 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"LP\\\"];\\n\" +\n      \"  node4 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"ASSIGN\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NULL\\\"];\\n\" +\n      \"  node9 -> node11 [weight=1];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node1 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"LP\\\"];\\n\" +\n      \"  node4 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"ASSIGN\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NULL\\\"];\\n\" +\n      \"  node9 -> node11 [weight=1];\\n\" +\n      \"  node8 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node7 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n    testCfg(src, expectedWhenNotTraversingFunctions, false);\n  }\n",
        "begin_line": 1171,
        "end_line": 1241,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 5)-(line 1172,col 57)",
            "(line 1173,col 5)-(line 1202,col 12)",
            "(line 1203,col 5)-(line 1238,col 12)",
            "(line 1239,col 5)-(line 1239,col 27)",
            "(line 1240,col 5)-(line 1240,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testInstanceOf()",
        "snippet": "  public void testInstanceOf() {\n    String src = \"try { x instanceof 'x' } catch (e) { }\";\n    ControlFlowGraph<Node> cfg = createCfg(src, true);\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);\n  }\n",
        "begin_line": 1243,
        "end_line": 1247,
        "comment": "",
        "child_ranges": [
            "(line 1244,col 5)-(line 1244,col 58)",
            "(line 1245,col 5)-(line 1245,col 54)",
            "(line 1246,col 5)-(line 1246,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSynBlock()",
        "snippet": "  public void testSynBlock() {\n    String src = \"START(); var x; END()\";\n    ControlFlowGraph<Node> cfg = createCfg(src, true);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.SYN_BLOCK);\n  }\n",
        "begin_line": 1249,
        "end_line": 1253,
        "comment": "",
        "child_ranges": [
            "(line 1250,col 5)-(line 1250,col 41)",
            "(line 1251,col 5)-(line 1251,col 54)",
            "(line 1252,col 5)-(line 1252,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testPartialTraversalOfScope()",
        "snippet": "  public void testPartialTraversalOfScope() {\n    Compiler compiler = new Compiler();\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, true);\n\n    Node script1 = compiler.parseSyntheticCode(\"cfgtest\", \"var foo;\");\n    Node script2 = compiler.parseSyntheticCode(\"cfgtest2\", \"var bar;\");\n    Node root = new Node(Token.BLOCK, script1, script2);\n\n    cfa.process(null, script1);\n    ControlFlowGraph<Node> cfg = cfa.getCfg();\n\n    assertNotNull(cfg.getNode(script1));\n    assertNull(cfg.getNode(script2));\n  }\n",
        "begin_line": 1255,
        "end_line": 1268,
        "comment": "",
        "child_ranges": [
            "(line 1256,col 5)-(line 1256,col 39)",
            "(line 1257,col 5)-(line 1257,col 70)",
            "(line 1259,col 5)-(line 1259,col 70)",
            "(line 1260,col 5)-(line 1260,col 71)",
            "(line 1261,col 5)-(line 1261,col 56)",
            "(line 1263,col 5)-(line 1263,col 31)",
            "(line 1264,col 5)-(line 1264,col 46)",
            "(line 1266,col 5)-(line 1266,col 40)",
            "(line 1267,col 5)-(line 1267,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testForLoopOrder()",
        "snippet": "  public void testForLoopOrder() {\n    assertNodeOrder(\n        createCfg(\"for (var i = 0; i < 5; i++) { var x = 3; } if (true) {}\"),\n        Lists.newArrayList(\n            Token.SCRIPT, Token.VAR, Token.FOR, Token.BLOCK, Token.VAR,\n            Token.INC /* i++ */,\n            Token.IF, Token.BLOCK));\n  }\n",
        "begin_line": 1270,
        "end_line": 1277,
        "comment": "",
        "child_ranges": [
            "(line 1271,col 5)-(line 1276,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testLabelledForInLoopOrder()",
        "snippet": "  public void testLabelledForInLoopOrder() {\n    assertNodeOrder(\n        createCfg(\"var i = 0; var y = {}; \" +\n            \"label: for (var x in y) { if (x) { break label; } else { i++ } x(); }\"),\n        Lists.newArrayList(\n            Token.SCRIPT, Token.VAR, Token.VAR,\n            Token.FOR, Token.BLOCK,\n            Token.IF, Token.BLOCK, Token.BREAK,\n            Token.BLOCK, Token.EXPR_RESULT, Token.EXPR_RESULT));\n  }\n",
        "begin_line": 1279,
        "end_line": 1288,
        "comment": "",
        "child_ranges": [
            "(line 1280,col 5)-(line 1287,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testLocalFunctionOrder()",
        "snippet": "  public void testLocalFunctionOrder() {\n    ControlFlowGraph<Node> cfg =\n        createCfg(\"function f() { while (x) { x++; } } var x = 3;\");\n    assertNodeOrder(\n        cfg,\n        Lists.newArrayList(\n            Token.SCRIPT, Token.VAR,\n\n            Token.FUNCTION, Token.BLOCK,\n            Token.WHILE, Token.BLOCK, Token.EXPR_RESULT));\n  }\n",
        "begin_line": 1290,
        "end_line": 1300,
        "comment": "",
        "child_ranges": [
            "(line 1291,col 5)-(line 1292,col 68)",
            "(line 1293,col 5)-(line 1299,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testDoWhileOrder()",
        "snippet": "  public void testDoWhileOrder() {\n    assertNodeOrder(\n        createCfg(\"do { var x = 3; } while (true); void x;\"),\n        Lists.newArrayList(\n            Token.SCRIPT, Token.BLOCK, Token.VAR, Token.DO, Token.EXPR_RESULT));\n  }\n",
        "begin_line": 1302,
        "end_line": 1307,
        "comment": "",
        "child_ranges": [
            "(line 1303,col 5)-(line 1306,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertNodeOrder(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, java.util.List<java.lang.Integer>)",
        "snippet": "  private void assertNodeOrder(ControlFlowGraph<Node> cfg,\n      List<Integer> nodeTypes) {\n    List<DiGraphNode<Node, Branch>> cfgNodes = cfg.getDirectedGraphNodes();\n    Collections.sort(cfgNodes, cfg.getOptionalNodeComparator(true));\n\n    // IMPLICIT RETURN must always be last.\n    Node implicitReturn = cfgNodes.remove(cfgNodes.size() - 1).getValue();\n    assertNull(implicitReturn == null ? \"null\" : implicitReturn.toStringTree(),\n        implicitReturn);\n\n    assertEquals(\"Wrong number of CFG nodes\",\n        nodeTypes.size(), cfgNodes.size());\n    for (int i = 0; i < cfgNodes.size(); i++) {\n      int expectedType = nodeTypes.get(i);\n      int actualType = cfgNodes.get(i).getValue().getType();\n      assertEquals(\n          \"Node type mismatch at \" + i + \".\\n\" +\n          \"found   : \" + Token.name(actualType) + \"\\n\" +\n          \"required: \" + Token.name(expectedType) + \"\\n\",\n          expectedType, actualType);\n    }\n  }\n",
        "begin_line": 1319,
        "end_line": 1340,
        "comment": "\n   * Asserts the priority order of CFG nodes.\n   *\n   * Checks that the node type of the highest-priority node matches the\n   * first element of the list, the type of the second node matches the\n   * second element of the list, and so on.\n   *\n   * @param cfg The control flow graph.\n   * @param nodeTypes The expected node types, in order.\n   ",
        "child_ranges": [
            "(line 1321,col 5)-(line 1321,col 75)",
            "(line 1322,col 5)-(line 1322,col 68)",
            "(line 1325,col 5)-(line 1325,col 74)",
            "(line 1326,col 5)-(line 1327,col 24)",
            "(line 1329,col 5)-(line 1330,col 43)",
            "(line 1331,col 5)-(line 1339,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.DisambiguatePropertiesTest()",
        "snippet": "  public DisambiguatePropertiesTest() {\n    parseTypeInfo = true;\n  }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    final TypeCheck checker = new TypeCheck(compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), compiler.getTypeRegistry()),\n        compiler.getTypeRegistry());\n\n    return new CompilerPass() {\n      public void process(Node externs, Node root) {\n        checker.processForTesting(externs, root);\n\n        if (runTightenTypes) {\n          TightenTypes tightener = new TightenTypes(compiler);\n          tightener.process(externs, root);\n          lastPass = DisambiguateProperties.forConcreteTypeSystem(compiler,\n                                                                  tightener);\n        } else {\n          // This must be created after type checking is run as it depends on\n          // any mismatches found during checking.\n          lastPass = DisambiguateProperties.forJSTypeSystem(compiler);\n        }\n\n        lastPass.process(externs, root);\n      }\n    };\n  }\n",
        "begin_line": 46,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 51,col 36)",
            "(line 53,col 5)-(line 70,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.Anonymous-44a8e5b7-533e-43b5-91cb-57db52214f0c.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      public void process(Node externs, Node root) {\n        checker.processForTesting(externs, root);\n\n        if (runTightenTypes) {\n          TightenTypes tightener = new TightenTypes(compiler);\n          tightener.process(externs, root);\n          lastPass = DisambiguateProperties.forConcreteTypeSystem(compiler,\n                                                                  tightener);\n        } else {\n          // This must be created after type checking is run as it depends on\n          // any mismatches found during checking.\n          lastPass = DisambiguateProperties.forJSTypeSystem(compiler);\n        }\n\n        lastPass.process(externs, root);\n      }\n",
        "begin_line": 54,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 55,col 9)-(line 55,col 49)",
            "(line 57,col 9)-(line 66,col 9)",
            "(line 68,col 9)-(line 68,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    return 1;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 5)-(line 75,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testOneType()",
        "snippet": "  public void testOneType() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\";\n    testSets(false, js, js, \"{a=[[Foo.prototype]]}\");\n    testSets(true, js, js, \"{a=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 78,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 84,col 21)",
            "(line 85,col 5)-(line 85,col 53)",
            "(line 86,col 5)-(line 86,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testPrototypeAndInstance()",
        "snippet": "  public void testPrototypeAndInstance() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\";\n    testSets(false, js, js, \"{a=[[Foo.prototype]]}\");\n    testSets(true, js, js, \"{a=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 89,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 90,col 5)-(line 95,col 21)",
            "(line 96,col 5)-(line 96,col 53)",
            "(line 97,col 5)-(line 97,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoTypes()",
        "snippet": "  public void testTwoTypes() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"var F=new Foo;\"\n        + \"F.Foo_prototype$a=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"var B=new Bar;\"\n        + \"B.Bar_prototype$a=0\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 100,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 111,col 21)",
            "(line 112,col 5)-(line 120,col 32)",
            "(line 121,col 5)-(line 121,col 74)",
            "(line 122,col 5)-(line 122,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoFields()",
        "snippet": "  public void testTwoFields() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"Foo.prototype.b = 0;\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"F.b = 0;\";\n    String output = \"function Foo(){}Foo.prototype.a=0;Foo.prototype.b=0;\"\n        + \"var F=new Foo;F.a=0;F.b=0\";\n    testSets(false, js, output, \"{a=[[Foo.prototype]], b=[[Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Foo.prototype]], b=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 125,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 133,col 21)",
            "(line 134,col 5)-(line 135,col 38)",
            "(line 136,col 5)-(line 136,col 78)",
            "(line 137,col 5)-(line 137,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoSeparateFieldsTwoTypes()",
        "snippet": "  public void testTwoSeparateFieldsTwoTypes() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"Foo.prototype.b = 0;\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"F.b = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"Bar.prototype.b = 0;\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\"\n        + \"B.b = 0;\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"Foo.prototype.Foo_prototype$b=0;\"\n        + \"var F=new Foo;\"\n        + \"F.Foo_prototype$a=0;\"\n        + \"F.Foo_prototype$b=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"Bar.prototype.Bar_prototype$b=0;\"\n        + \"var B=new Bar;\"\n        + \"B.Bar_prototype$a=0;\"\n        + \"B.Bar_prototype$b=0\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]],\"\n                                + \" b=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]],\"\n                               + \" b=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 140,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 155,col 21)",
            "(line 156,col 5)-(line 168,col 32)",
            "(line 169,col 5)-(line 170,col 76)",
            "(line 171,col 5)-(line 172,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionType()",
        "snippet": "  public void testUnionType() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @type {Bar|Foo} */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\\n\"\n        + \"B = new Foo;\\n\"\n        + \"B.a = 0;\\n\"\n        + \"/** @constructor */ function Baz() {}\\n\"\n        + \"Baz.prototype.a = 0;\\n\";\n    testSets(false, js,\n             \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n    testSets(true, js, \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n  }\n",
        "begin_line": 175,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 187,col 35)",
            "(line 188,col 5)-(line 189,col 70)",
            "(line 190,col 5)-(line 190,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testIgnoreUnknownType()",
        "snippet": "  public void testIgnoreUnknownType() {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"Foo.prototype.blah = 3;\\n\"\n        + \"/** @type {Foo} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.blah = 0;\\n\"\n        + \"var U = function() { return {} };\\n\"\n        + \"U().blah();\";\n    String expected = \"\"\n        + \"function Foo(){}Foo.prototype.blah=3;var F = new Foo;F.blah=0;\"\n        + \"var U=function(){return{}};U().blah()\";\n    testSets(false, js, expected, \"{}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n        js, expected, \"{}\");\n  }\n",
        "begin_line": 193,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 202,col 24)",
            "(line 203,col 5)-(line 205,col 50)",
            "(line 206,col 5)-(line 206,col 40)",
            "(line 207,col 5)-(line 208,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionTypeTwoFields()",
        "snippet": "  public void testUnionTypeTwoFields() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"Foo.prototype.b = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"Bar.prototype.b = 0;\\n\"\n        + \"/** @type {Foo|Bar} */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\\n\"\n        + \"B.b = 0;\\n\"\n        + \"B = new Foo;\\n\"\n        + \"/** @constructor */ function Baz() {}\\n\"\n        + \"Baz.prototype.a = 0;\\n\"\n        + \"Baz.prototype.b = 0;\\n\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Bar_prototype$a=0;\"\n        + \"Foo.prototype.Bar_prototype$b=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"Bar.prototype.Bar_prototype$b=0;\"\n        + \"var B=new Bar;\"\n        + \"B.Bar_prototype$a=0;\"\n        + \"B.Bar_prototype$b=0;\"\n        + \"function Baz(){}\"\n        + \"Baz.prototype.a$Baz_prototype=0;\"\n        + \"Baz.prototype.b$Baz_prototype=0;\";\n    testSets(false, js, \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]],\"\n                 + \" b=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n    testSets(true, js, \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]],\"\n                 + \" b=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n  }\n",
        "begin_line": 211,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 226,col 35)",
            "(line 227,col 5)-(line 239,col 45)",
            "(line 240,col 5)-(line 241,col 76)",
            "(line 242,col 5)-(line 243,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testCast()",
        "snippet": "  public void testCast() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @type {Foo|Bar} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"(/** @type {Bar} */(F)).a = 0;\";\n    String output = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Bar_prototype$a=0;\"\n        + \"var F=new Foo;F.Bar_prototype$a=0;\";\n    String ttOutput = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Bar_prototype$a=0;\"\n        + \"var F=new Foo;F.Unique$1$a=0;\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, ttOutput,\n        \"{a=[[Bar.prototype], [Foo.prototype], [Unique$1]]}\");\n  }\n",
        "begin_line": 246,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 254,col 43)",
            "(line 255,col 5)-(line 258,col 47)",
            "(line 259,col 5)-(line 262,col 42)",
            "(line 263,col 5)-(line 263,col 74)",
            "(line 264,col 5)-(line 265,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testConstructorFields()",
        "snippet": "  public void testConstructorFields() {\n    String js = \"\"\n      + \"/** @constructor */\\n\"\n      + \"var Foo = function() { this.a = 0; };\\n\"\n      + \"/** @constructor */ function Bar() {}\\n\"\n      + \"Bar.prototype.a = 0;\"\n      + \"new Foo\";\n    String output = \"\"\n        + \"var Foo=function(){this.Foo$a=0};\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"new Foo\";\n    String ttOutput = \"\"\n        + \"var Foo=function(){this.Foo_prototype$a=0};\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"new Foo\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo]]}\");\n    testSets(true, js, ttOutput, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 268,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 274,col 18)",
            "(line 275,col 5)-(line 279,col 20)",
            "(line 280,col 5)-(line 284,col 20)",
            "(line 285,col 5)-(line 285,col 64)",
            "(line 286,col 5)-(line 286,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testStaticProperty()",
        "snippet": "  public void testStaticProperty() {\n    String js = \"\"\n      + \"/** @constructor */ function Foo() {} \\n\"\n      + \"/** @constructor */ function Bar() {}\\n\"\n      + \"Foo.a = 0;\"\n      + \"Bar.a = 0;\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"function Bar(){}\"\n        + \"Foo.function__this_Foo____$a = 0;\"\n        + \"Bar.function__this_Bar____$a = 0;\";\n\n    testSets(false, js, output,\n        \"{a=[[function (this:Bar): ?], [function (this:Foo): ?]]}\");\n  }\n",
        "begin_line": 289,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 290,col 5)-(line 294,col 21)",
            "(line 295,col 5)-(line 299,col 46)",
            "(line 301,col 5)-(line 302,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSupertypeWithSameField()",
        "snippet": "  public void testSupertypeWithSameField() {\n    String js = \"\"\n      + \"/** @constructor */ function Foo() {}\\n\"\n      + \"Foo.prototype.a = 0;\\n\"\n      + \"/** @constructor\\n* @extends Foo */ function Bar() {}\\n\"\n      + \"/** @override */\\n\"\n      + \"Bar.prototype.a = 0;\\n\"\n      + \"/** @type Bar */ var B = new Bar;\\n\"\n      + \"B.a = 0;\"\n      + \"/** @constructor */ function Baz() {}\\n\"\n      + \"Baz.prototype.a = function(){};\\n\";\n\n    String output = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Foo_prototype$a=0;\"\n        + \"var B = new Bar;B.Foo_prototype$a=0;\"\n        + \"function Baz(){}Baz.prototype.Baz_prototype$a=function(){};\";\n    String ttOutput = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Bar_prototype$a=0;\"\n        + \"var B = new Bar;B.Bar_prototype$a=0;\"\n        + \"function Baz(){}Baz.prototype.Baz_prototype$a=function(){};\";\n    testSets(false, js, output, \"{a=[[Baz.prototype], [Foo.prototype]]}\");\n    testSets(true, js, ttOutput,\n        \"{a=[[Bar.prototype], [Baz.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 305,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 315,col 44)",
            "(line 317,col 5)-(line 321,col 72)",
            "(line 322,col 5)-(line 326,col 72)",
            "(line 327,col 5)-(line 327,col 74)",
            "(line 328,col 5)-(line 329,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testScopedType()",
        "snippet": "  public void testScopedType() {\n    String js = \"\"\n        + \"var g = {};\\n\"\n        + \"/** @constructor */ g.Foo = function() {}\\n\"\n        + \"g.Foo.prototype.a = 0;\"\n        + \"/** @constructor */ g.Bar = function() {}\\n\"\n        + \"g.Bar.prototype.a = 0;\";\n    String output = \"\"\n        + \"var g={};\"\n        + \"g.Foo=function(){};\"\n        + \"g.Foo.prototype.g_Foo_prototype$a=0;\"\n        + \"g.Bar=function(){};\"\n        + \"g.Bar.prototype.g_Bar_prototype$a=0;\";\n    testSets(false, js, output, \"{a=[[g.Bar.prototype], [g.Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[g.Bar.prototype], [g.Foo.prototype]]}\");\n  }\n",
        "begin_line": 332,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 338,col 35)",
            "(line 339,col 5)-(line 344,col 49)",
            "(line 345,col 5)-(line 345,col 78)",
            "(line 346,col 5)-(line 346,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnresolvedType()",
        "snippet": "  public void testUnresolvedType() {\n    String js = \"\"\n        + \"var g = {};\"\n        + \"/** @constructor \\n @extends g.NotHere */ var Foo = function() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ var Bar = function() {}\\n\"\n        + \"Bar.prototype.a = 0;\";\n    String output = \"\"\n        + \"var g={};\"\n        + \"var Foo=function(){};\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"var Bar=function(){};\"\n        + \"Bar.prototype.Bar_prototype$a=0;\";\n    testSets(false, js, js, \"{}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n        js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 349,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 355,col 33)",
            "(line 356,col 5)-(line 361,col 45)",
            "(line 362,col 5)-(line 362,col 34)",
            "(line 363,col 5)-(line 364,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testNamedType()",
        "snippet": "  public void testNamedType() {\n    String js = \"\"\n        + \"var g = {};\"\n        + \"/** @constructor \\n @extends g.Late */ var Foo = function() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ var Bar = function() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @constructor */ g.Late = function() {}\";\n    String output = \"\"\n        + \"var g={};\"\n        + \"var Foo=function(){};\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"var Bar=function(){};\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"g.Late = function(){}\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 367,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 374,col 55)",
            "(line 375,col 5)-(line 381,col 34)",
            "(line 382,col 5)-(line 382,col 74)",
            "(line 383,col 5)-(line 383,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnknownType()",
        "snippet": "  public void testUnknownType() {\n    String js = \"\"\n        + \"/** @constructor */ var Foo = function() {};\\n\"\n        + \"/** @constructor */ var Bar = function() {};\\n\"\n        + \"function fun() {}\\n\"\n        + \"Foo.prototype.a = fun();\\n\"\n        + \"fun().a;\\n\"\n        + \"Bar.prototype.a = 0;\";\n    String ttOutput = \"\"\n        + \"var Foo=function(){};\\n\"\n        + \"var Bar=function(){};\\n\"\n        + \"function fun(){}\\n\"\n        + \"Foo.prototype.Foo_prototype$a=fun();\\n\"\n        + \"fun().Unique$1$a;\\n\"\n        + \"Bar.prototype.Bar_prototype$a=0;\";\n    testSets(false, js, js, \"{}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, ttOutput,\n             \"{a=[[Bar.prototype], [Foo.prototype], [Unique$1]]}\");\n  }\n",
        "begin_line": 386,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 387,col 5)-(line 393,col 33)",
            "(line 394,col 5)-(line 400,col 45)",
            "(line 401,col 5)-(line 401,col 34)",
            "(line 402,col 5)-(line 403,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testEnum()",
        "snippet": "  public void testEnum() {\n    String js = \"\"\n      + \"/** @enum {string} */ var En = {\\n\"\n      + \"  A: 'first',\\n\"\n      + \"  B: 'second'\\n\"\n      + \"};\\n\"\n      + \"var EA = En.A;\\n\"\n      + \"var EB = En.B;\\n\"\n      + \"/** @constructor */ function Foo(){};\\n\"\n      + \"Foo.prototype.A = 0;\\n\"\n      + \"Foo.prototype.B = 0;\\n\";\n    String output = \"\"\n        + \"var En={A:'first',B:'second'};\"\n        + \"var EA=En.A;\"\n        + \"var EB=En.B;\"\n        + \"function Foo(){};\"\n        + \"Foo.prototype.A=0;\"\n        + \"Foo.prototype.B=0\";\n    String ttOutput = \"\"\n        + \"var En={A:'first',B:'second'};\"\n        + \"var EA=En.A;\"\n        + \"var EB=En.B;\"\n        + \"function Foo(){};\"\n        + \"Foo.prototype.Foo_prototype$A=0;\"\n        + \"Foo.prototype.Foo_prototype$B=0\";\n    testSets(false, js, output, \"{}\");\n    testSets(true, js, ttOutput, \"{A=[[Foo.prototype]], B=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 406,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 416,col 33)",
            "(line 417,col 5)-(line 423,col 30)",
            "(line 424,col 5)-(line 430,col 44)",
            "(line 431,col 5)-(line 431,col 38)",
            "(line 432,col 5)-(line 432,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUntypedExterns()",
        "snippet": "  public void testUntypedExterns() {\n    String externs =\n        BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES\n        + \"var window;\"\n        + \"window.alert = function() {x};\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"Foo.prototype.alert = 0;\\n\"\n        + \"Foo.prototype.window = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"Bar.prototype.alert = 0;\\n\"\n        + \"Bar.prototype.window = 0;\\n\"\n        + \"window.alert();\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"Foo.prototype.alert=0;\"\n        + \"Foo.prototype.Foo_prototype$window=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"Bar.prototype.alert=0;\"\n        + \"Bar.prototype.Bar_prototype$window=0;\"\n        + \"window.alert();\";\n\n    testSets(false, externs, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]\"\n             + \", window=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, externs, js, output, \"{a=[[Bar.prototype], [Foo.prototype]],\"\n             + \" window=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 435,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 436,col 5)-(line 439,col 43)",
            "(line 440,col 5)-(line 449,col 28)",
            "(line 450,col 5)-(line 459,col 28)",
            "(line 461,col 5)-(line 462,col 63)",
            "(line 463,col 5)-(line 464,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionTypeInvalidation()",
        "snippet": "  public void testUnionTypeInvalidation() {\n    String externs = \"\"\n        + \"/** @constructor */ function Baz() {}\"\n        + \"Baz.prototype.a\";\n    String js = \"\"\n        + \"/** @constructor */ function Ind() {this.a=0}\\n\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"/** @type {Foo|Bar} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 1\\n;\"\n        + \"F = new Bar;\\n\"\n        + \"/** @type {Baz} */\\n\"\n        + \"var Z = new Baz;\\n\"\n        + \"Z.a = 1\\n;\"\n        + \"/** @type {Bar|Baz} */\\n\"\n        + \"var B = new Baz;\\n\"\n        + \"B.a = 1;\\n\"\n        + \"B = new Bar;\\n\";\n    // Only the constructor field a of Ind is renamed, as Foo is related to Baz\n    // through Bar in the unions Bar|Baz and Foo|Bar.\n    String output = \"\"\n        + \"function Ind() { this.Ind$a = 0; }\"\n        + \"function Foo() {}\"\n        + \"Foo.prototype.a = 0;\"\n        + \"function Bar() {}\"\n        + \"Bar.prototype.a = 0;\"\n        + \"var F = new Foo;\"\n        + \"F.a = 1;\"\n        + \"F = new Bar;\"\n        + \"var Z = new Baz;\"\n        + \"Z.a = 1;\"\n        + \"var B = new Baz;\"\n        + \"B.a = 1;\"\n        + \"B = new Bar;\";\n    String ttOutput = \"\"\n        + \"function Ind() { this.Unique$1$a = 0; }\"\n        + \"function Foo() {}\"\n        + \"Foo.prototype.a = 0;\"\n        + \"function Bar() {}\"\n        + \"Bar.prototype.a = 0;\"\n        + \"var F = new Foo;\"\n        + \"F.a = 1;\"\n        + \"F = new Bar;\"\n        + \"var Z = new Baz;\"\n        + \"Z.a = 1;\"\n        + \"var B = new Baz;\"\n        + \"B.a = 1;\"\n        + \"B = new Bar;\";\n    testSets(false, externs, js, output, \"{a=[[Ind]]}\");\n    testSets(true, externs, js, ttOutput, \"{a=[[Unique$1]]}\");\n  }\n",
        "begin_line": 467,
        "end_line": 520,
        "comment": "",
        "child_ranges": [
            "(line 468,col 5)-(line 470,col 28)",
            "(line 471,col 5)-(line 487,col 27)",
            "(line 490,col 5)-(line 503,col 25)",
            "(line 504,col 5)-(line 517,col 25)",
            "(line 518,col 5)-(line 518,col 56)",
            "(line 519,col 5)-(line 519,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionAndExternTypes()",
        "snippet": "  public void testUnionAndExternTypes() {\n    String externs = \"\"\n      + \"/** @constructor */ function Foo() { }\"\n      + \"Foo.prototype.a = 4;\\n\";\n    String js = \"\"\n      + \"/** @constructor */ function Bar() { this.a = 2; }\\n\"\n      + \"/** @constructor */ function Baz() { this.a = 3; }\\n\"\n      + \"/** @constructor */ function Buz() { this.a = 4; }\\n\"\n      + \"/** @constructor */ function T1() { this.a = 3; }\\n\"\n      + \"/** @constructor */ function T2() { this.a = 3; }\\n\"\n      + \"/** @type {Bar|Baz} */ var b;\\n\"\n      + \"/** @type {Baz|Buz} */ var c;\\n\"\n      + \"/** @type {Buz|Foo} */ var d;\\n\"\n      + \"b.a = 5; c.a = 6; d.a = 7;\";\n    String output = \"\"\n      + \"/** @constructor */ function Bar() { this.a = 2; }\\n\"\n      + \"/** @constructor */ function Baz() { this.a = 3; }\\n\"\n      + \"/** @constructor */ function Buz() { this.a = 4; }\\n\"\n      + \"/** @constructor */ function T1() { this.T1$a = 3; }\\n\"\n      + \"/** @constructor */ function T2() { this.T2$a = 3; }\\n\"\n      + \"/** @type {Bar|Baz} */ var b;\\n\"\n      + \"/** @type {Baz|Buz} */ var c;\\n\"\n      + \"/** @type {Buz|Foo} */ var d;\\n\"\n      + \"b.a = 5; c.a = 6; d.a = 7;\";\n\n    // We are testing the skipping of multiple types caused by unioning with\n    // extern types.\n    testSets(false, externs, js, output, \"{a=[[T1], [T2]]}\");\n  }\n",
        "begin_line": 522,
        "end_line": 550,
        "comment": "",
        "child_ranges": [
            "(line 523,col 5)-(line 525,col 33)",
            "(line 526,col 5)-(line 535,col 37)",
            "(line 536,col 5)-(line 545,col 37)",
            "(line 549,col 5)-(line 549,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTypedExterns()",
        "snippet": "  public void testTypedExterns() {\n    String externs = \"\"\n        + \"/** @constructor */ function Window() {};\\n\"\n        + \"Window.prototype.alert;\"\n        + \"/** @type {Window} */\"\n        + \"var window;\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.alert = 0;\\n\"\n        + \"window.alert('blarg');\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$alert=0;\"\n        + \"window.alert('blarg');\";\n    testSets(false, externs, js, output, \"{alert=[[Foo.prototype]]}\");\n    testSets(true, externs, js, output, \"{alert=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 552,
        "end_line": 568,
        "comment": "",
        "child_ranges": [
            "(line 553,col 5)-(line 557,col 24)",
            "(line 558,col 5)-(line 561,col 35)",
            "(line 562,col 5)-(line 565,col 35)",
            "(line 566,col 5)-(line 566,col 70)",
            "(line 567,col 5)-(line 567,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSubtypesWithSameField()",
        "snippet": "  public void testSubtypesWithSameField() {\n    String js = \"\"\n        + \"/** @constructor */ function Top() {}\\n\"\n        + \"/** @constructor \\n@extends Top*/ function Foo() {}\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor \\n@extends Top*/ function Bar() {}\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @param {Top} top */\"\n        + \"function foo(top) {\\n\"\n        + \"  var x = top.a;\\n\"\n        + \"}\\n\"\n        + \"foo(new Foo);\\n\"\n        + \"foo(new Bar);\\n\";\n    testSets(false, js, \"{}\");\n    testSets(true, js, \"{a=[[Bar.prototype, Foo.prototype]]}\");\n  }\n",
        "begin_line": 570,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 571,col 5)-(line 582,col 28)",
            "(line 583,col 5)-(line 583,col 30)",
            "(line 584,col 5)-(line 584,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSupertypeReferenceOfSubtypeProperty()",
        "snippet": "  public void testSupertypeReferenceOfSubtypeProperty() {\n    String externs = \"\"\n        + \"/** @constructor */ function Ext() {}\"\n        + \"Ext.prototype.a;\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"/** @constructor \\n@extends Foo*/ function Bar() {}\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @param {Foo} foo */\"\n        + \"function foo(foo) {\\n\"\n        + \"  var x = foo.a;\\n\"\n        + \"}\\n\";\n    String result = \"\"\n        + \"function Foo() {}\\n\"\n        + \"function Bar() {}\\n\"\n        + \"Bar.prototype.Bar_prototype$a;\\n\"\n        + \"function foo(foo) {\\n\"\n        + \"  var x = foo.Bar_prototype$a;\\n\"\n        + \"}\\n\";\n    testSets(false, externs, js, result, \"{a=[[Bar.prototype]]}\");\n  }\n",
        "begin_line": 587,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 588,col 5)-(line 590,col 29)",
            "(line 591,col 5)-(line 598,col 16)",
            "(line 599,col 5)-(line 605,col 16)",
            "(line 606,col 5)-(line 606,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testObjectLiteralNotRenamed()",
        "snippet": "  public void testObjectLiteralNotRenamed() {\n    String js = \"\"\n        + \"var F = {a:'a', b:'b'};\"\n        + \"F.a = 'z';\";\n    testSets(false, js, js, \"{}\");\n    testSets(true, js, js, \"{}\");\n  }\n",
        "begin_line": 609,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 610,col 5)-(line 612,col 23)",
            "(line 613,col 5)-(line 613,col 34)",
            "(line 614,col 5)-(line 614,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testClosureInherits()",
        "snippet": "  public void testClosureInherits() {\n    String js = \"\"\n        + \"var goog = {};\"\n        + \"/* @param {Function} childCtor Child class.\\n\"\n        + \" * @param {Function} parentCtor Parent class. */\\n\"\n        + \"goog.inherits = function(childCtor, parentCtor) {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function tempCtor() {};\\n\"\n        + \"  tempCtor.prototype = parentCtor.prototype;\\n\"\n        + \"  childCtor.superClass_ = parentCtor.prototype;\\n\"\n        + \"  childCtor.prototype = new tempCtor();\\n\"\n        + \"  childCtor.prototype.constructor = childCtor;\\n\"\n        + \"};\"\n        + \"/** @constructor */ function Top() {}\\n\"\n        + \"Top.prototype.f = function() {};\"\n        + \"/** @constructor \\n@extends Top*/ function Foo() {}\\n\"\n        + \"goog.inherits(Foo, Top);\\n\"\n        + \"Foo.prototype.f = function() {\"\n        + \"  Foo.superClass_.f();\"\n        + \"};\\n\"\n        + \"/** @constructor \\n* @extends Foo */ function Bar() {}\\n\"\n        + \"goog.inherits(Bar, Foo);\\n\"\n        + \"Bar.prototype.f = function() {\"\n        + \"  Bar.superClass_.f();\"\n        + \"};\\n\"\n        + \"(new Bar).f();\\n\";\n    testSets(false, js, \"{f=[[Top.prototype]]}\");\n    testSets(true, js, \"{constructor=[[Bar.prototype, Foo.prototype]], \"\n                 + \"f=[[Bar.prototype], [Foo.prototype], [Top.prototype]]}\");\n  }\n",
        "begin_line": 617,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 618,col 5)-(line 642,col 29)",
            "(line 643,col 5)-(line 643,col 49)",
            "(line 644,col 5)-(line 645,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSkipNativeFunctionMethod()",
        "snippet": "  public void testSkipNativeFunctionMethod() {\n    String externs = \"\"\n        + \"/** @constructor \\n @param {*} var_args */\"\n        + \"function Function(var_args) {}\"\n        + \"Function.prototype.call = function() {};\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo(){};\"\n        + \"/** @constructor\\n @extends Foo */\"\n        + \"function Bar() { Foo.call(this); };\"; // call should not be renamed\n    testSame(externs, js, null);\n  }\n",
        "begin_line": 648,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 652,col 53)",
            "(line 653,col 5)-(line 656,col 48)",
            "(line 657,col 5)-(line 657,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSkipNativeObjectMethod()",
        "snippet": "  public void testSkipNativeObjectMethod() {\n    String externs = \"\"\n        + \"/** @constructor \\n @param {*} opt_v */ function Object(opt_v) {}\"\n        + \"Object.prototype.hasOwnProperty;\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo(){};\"\n        + \"(new Foo).hasOwnProperty('x');\";\n    testSets(false, externs, js, js, \"{}\");\n    testSets(true, externs, js, js, \"{}\");\n  }\n",
        "begin_line": 660,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 661,col 5)-(line 663,col 45)",
            "(line 664,col 5)-(line 666,col 43)",
            "(line 667,col 5)-(line 667,col 43)",
            "(line 668,col 5)-(line 668,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testExtendNativeType()",
        "snippet": "  public void testExtendNativeType() {\n    String externs = \"\"\n        + \"/** @constructor \\n @return {string} */\"\n        + \"function Date(opt_1, opt_2, opt_3, opt_4, opt_5, opt_6, opt_7) {}\"\n        + \"/** @override */ Date.prototype.toString = function() {}\";\n    String js = \"\"\n        + \"/** @constructor\\n @extends {Date} */ function SuperDate() {};\\n\"\n        + \"(new SuperDate).toString();\";\n    testSets(true, externs, js, js, \"{}\");\n    testSets(false, externs, js, js, \"{}\");\n  }\n",
        "begin_line": 671,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 672,col 5)-(line 675,col 69)",
            "(line 676,col 5)-(line 678,col 40)",
            "(line 679,col 5)-(line 679,col 42)",
            "(line 680,col 5)-(line 680,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testStringFunction()",
        "snippet": "  public void testStringFunction() {\n    // Extern functions are not renamed, but user functions on a native\n    // prototype object are.\n    String externs = \"/**@constructor\\n@param {*} opt_str \\n @return {string}*/\"\n         + \"function String(opt_str) {};\\n\"\n         + \"/** @override \\n @return {string} */\\n\"\n         + \"String.prototype.toString = function() { };\\n\";\n    String js = \"\"\n         + \"/** @constructor */ function Foo() {};\\n\"\n         + \"Foo.prototype.foo = function() {};\\n\"\n         + \"String.prototype.foo = function() {};\\n\"\n         + \"var a = 'str'.toString().foo();\\n\";\n    String output = \"\"\n         + \"function Foo() {};\\n\"\n         + \"Foo.prototype.Foo_prototype$foo = function() {};\\n\"\n         + \"String.prototype.String_prototype$foo = function() {};\\n\"\n         + \"var a = 'str'.toString().String_prototype$foo();\\n\";\n\n    testSets(false, externs, js, output,\n             \"{foo=[[Foo.prototype], [String.prototype]]}\");\n    testSets(true, externs, js, output,\n             \"{foo=[[Foo.prototype], [String.prototype]]}\");\n  }\n",
        "begin_line": 683,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 686,col 5)-(line 689,col 59)",
            "(line 690,col 5)-(line 694,col 47)",
            "(line 695,col 5)-(line 699,col 64)",
            "(line 701,col 5)-(line 702,col 60)",
            "(line 703,col 5)-(line 704,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnusedTypeInExterns()",
        "snippet": "  public void testUnusedTypeInExterns() {\n    String externs = \"\"\n        + \"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.a\";\n    String js = \"\"\n        + \"/** @constructor */ function Bar() {};\\n\"\n        + \"Bar.prototype.a;\"\n        + \"/** @constructor */ function Baz() {};\\n\"\n        + \"Baz.prototype.a;\";\n    String output = \"\"\n        + \"/** @constructor */ function Bar() {};\\n\"\n        + \"Bar.prototype.Bar_prototype$a;\"\n        + \"/** @constructor */ function Baz() {};\\n\"\n        + \"Baz.prototype.Baz_prototype$a\";\n    testSets(false, externs, js, output,\n             \"{a=[[Bar.prototype], [Baz.prototype]]}\");\n    testSets(true, externs, js, output,\n             \"{a=[[Bar.prototype], [Baz.prototype]]}\");\n  }\n",
        "begin_line": 707,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 708,col 5)-(line 710,col 28)",
            "(line 711,col 5)-(line 715,col 29)",
            "(line 716,col 5)-(line 720,col 42)",
            "(line 721,col 5)-(line 722,col 55)",
            "(line 723,col 5)-(line 724,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInterface()",
        "snippet": "  public void testInterface() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I */ function Foo() {};\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @type I */\\n\"\n        + \"var F = new Foo;\"\n        + \"var x = F.a;\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype]]}\");\n    testSets(true, js, \"{a=[[Foo.prototype], [I.prototype]]}\");\n  }\n",
        "begin_line": 727,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 728,col 5)-(line 735,col 25)",
            "(line 736,col 5)-(line 736,col 62)",
            "(line 737,col 5)-(line 737,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInterfaceOfSuperclass()",
        "snippet": "  public void testInterfaceOfSuperclass() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I */ function Foo() {};\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor \\n @extends Foo */ function Bar() {};\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\"\n        + \"B.a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype]]}\");\n    testSets(true, js,\n        \"{a=[[Bar.prototype], [Foo.prototype], [I.prototype]]}\");\n  }\n",
        "begin_line": 740,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 750,col 20)",
            "(line 751,col 5)-(line 751,col 62)",
            "(line 752,col 5)-(line 753,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoInterfacesWithSomeInheritance()",
        "snippet": "  public void testTwoInterfacesWithSomeInheritance() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @interface */ function I2() {};\\n\"\n        + \"I2.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I */ function Foo() {};\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor \\n @extends Foo \\n @implements I2*/\\n\"\n        + \"function Bar() {};\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\"\n        + \"B.a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype, I2.prototype]]}\");\n    testSets(true, js, \"{a=[[Bar.prototype], [Foo.prototype], \"\n                       + \"[I.prototype], [I2.prototype]]}\");\n  }\n",
        "begin_line": 756,
        "end_line": 773,
        "comment": "",
        "child_ranges": [
            "(line 757,col 5)-(line 769,col 20)",
            "(line 770,col 5)-(line 770,col 76)",
            "(line 771,col 5)-(line 772,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInvalidatingInterface()",
        "snippet": "  public void testInvalidatingInterface() {\n    String js = \"\"\n        + \"/** @interface */ function I2() {};\\n\"\n        + \"I2.prototype.a;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"/** @type I */\\n\"\n        + \"var i = new Bar;\\n\" // Make I invalidating\n        + \"/** @constructor \\n @implements I \\n @implements I2 */\"\n        + \"function Foo() {};\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"(new Foo).a = 0;\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\";\n    testSets(false, js, \"{}\");\n    testSets(true, js, \"{}\");\n  }\n",
        "begin_line": 775,
        "end_line": 790,
        "comment": "",
        "child_ranges": [
            "(line 776,col 5)-(line 787,col 29)",
            "(line 788,col 5)-(line 788,col 30)",
            "(line 789,col 5)-(line 789,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testMultipleInterfaces()",
        "snippet": "  public void testMultipleInterfaces() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"/** @interface */ function I2() {};\\n\"\n        + \"I2.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I \\n @implements I2 */\"\n        + \"function Foo() {};\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"(new Foo).a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I2.prototype]]}\");\n    testSets(true, js, \"{a=[[Foo.prototype], [I2.prototype]]}\");\n  }\n",
        "begin_line": 792,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 793,col 5)-(line 800,col 28)",
            "(line 801,col 5)-(line 801,col 63)",
            "(line 802,col 5)-(line 802,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInterfaceWithSupertypeImplementor()",
        "snippet": "  public void testInterfaceWithSupertypeImplementor() {\n    String js = \"\"\n        + \"/** @interface */ function C() {}\\n\"\n        + \"C.prototype.foo = function() {};\\n\"\n        + \"/** @constructor */ function A (){}\\n\"\n        + \"A.prototype.foo = function() {};\\n\"\n        + \"/** @constructor \\n @implements {C} \\n @extends {A} */\\n\"\n        + \"function B() {}\\n\"\n        + \"/** @type {C} */ var b = new B();\\n\"\n        + \"b.foo();\\n\";\n    testSets(false, js, \"{foo=[[A.prototype, C.prototype]]}\");\n    testSets(true, js, \"{foo=[[A.prototype], [C.prototype]]}\");\n  }\n",
        "begin_line": 805,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 806,col 5)-(line 814,col 23)",
            "(line 815,col 5)-(line 815,col 62)",
            "(line 816,col 5)-(line 816,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSuperInterface()",
        "snippet": "  public void testSuperInterface() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @interface \\n @implements I */ function I2() {};\\n\"\n        + \"/** @constructor \\n @implements I2 */\"\n        + \"function Foo() {};\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"(new Foo).a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype]]}\");\n    testSets(true, js, \"{a=[[Foo.prototype], [I.prototype]]}\");\n  }\n",
        "begin_line": 819,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 820,col 5)-(line 827,col 28)",
            "(line 828,col 5)-(line 828,col 62)",
            "(line 829,col 5)-(line 829,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testMismatchInvalidation()",
        "snippet": "  public void testMismatchInvalidation() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Bar;\\n\"\n        + \"F.a = 0;\";\n\n    testSets(false, \"\", js, js, \"{}\", TypeValidator.TYPE_MISMATCH_WARNING,\n             \"initializing variable\\n\"\n             + \"found   : Bar\\n\"\n             + \"required: (Foo|null)\");\n    testSets(true, \"\", js, js, \"{}\", TypeValidator.TYPE_MISMATCH_WARNING,\n             \"initializing variable\\n\"\n             + \"found   : Bar\\n\"\n             + \"required: (Foo|null)\");\n  }\n",
        "begin_line": 836,
        "end_line": 854,
        "comment": "\n   * Tests that the type based version skips renaming on types that have a\n   * mismatch, and the type tightened version continues to work as normal.\n   ",
        "child_ranges": [
            "(line 837,col 5)-(line 844,col 21)",
            "(line 846,col 5)-(line 849,col 39)",
            "(line 850,col 5)-(line 853,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testBadCast()",
        "snippet": "  public void testBadCast() {\n    String js = \"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @constructor */ function Bar() {};\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"var a = /** @type {!Foo} */ (new Bar);\\n\"\n        + \"a.a = 4;\";\n    testSets(false, \"\", js, js, \"{}\",\n             TypeValidator.INVALID_CAST,\n             \"invalid cast - must be a subtype or supertype\\n\"\n             + \"from: Bar\\n\"\n             + \"to  : Foo\");\n  }\n",
        "begin_line": 856,
        "end_line": 868,
        "comment": "",
        "child_ranges": [
            "(line 857,col 5)-(line 862,col 21)",
            "(line 863,col 5)-(line 867,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testDeterministicNaming()",
        "snippet": "  public void testDeterministicNaming() {\n    String js =\n        \"/** @constructor */function A() {}\\n\"\n        + \"/** @return {string} */A.prototype.f = function() {return 'a';};\\n\"\n        + \"/** @constructor */function B() {}\\n\"\n        + \"/** @return {string} */B.prototype.f = function() {return 'b';};\\n\"\n        + \"/** @constructor */function C() {}\\n\"\n        + \"/** @return {string} */C.prototype.f = function() {return 'c';};\\n\"\n        + \"/** @type {A|B} */var ab = 1 ? new B : new A;\\n\"\n        + \"/** @type {string} */var n = ab.f();\\n\";\n\n    String output =\n        \"function A() {}\\n\"\n        + \"A.prototype.A_prototype$f = function() { return'a'; };\\n\"\n        + \"function B() {}\\n\"\n        + \"B.prototype.A_prototype$f = function() { return'b'; };\\n\"\n        + \"function C() {}\\n\"\n        + \"C.prototype.C_prototype$f = function() { return'c'; };\\n\"\n        + \"var ab = 1 ? new B : new A; var n = ab.A_prototype$f();\\n\";\n\n    for (int i = 0; i < 5; i++) {\n      testSets(false, js, output,\n          \"{f=[[A.prototype, B.prototype], [C.prototype]]}\");\n\n      testSets(true, js, output,\n          \"{f=[[A.prototype, B.prototype], [C.prototype]]}\");\n    }\n  }\n",
        "begin_line": 870,
        "end_line": 897,
        "comment": "",
        "child_ranges": [
            "(line 871,col 5)-(line 879,col 51)",
            "(line 881,col 5)-(line 888,col 70)",
            "(line 890,col 5)-(line 896,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() {\n    String js = \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"var F = /** @type {Foo} */({ a: 'a' });\\n\";\n\n    String output = \"function Foo() {}\\n\"\n        + \"Foo.prototype.Foo_prototype$a;\\n\"\n        + \"function Bar() {}\\n\"\n        + \"Bar.prototype.Bar_prototype$a;\\n\"\n        + \"var F = { Foo_prototype$a: 'a' };\\n\";\n\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 899,
        "end_line": 914,
        "comment": "",
        "child_ranges": [
            "(line 900,col 5)-(line 904,col 54)",
            "(line 906,col 5)-(line 910,col 48)",
            "(line 912,col 5)-(line 912,col 74)",
            "(line 913,col 5)-(line 913,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testCustomInherits()",
        "snippet": "  public void testCustomInherits() {\n    String js = \"Object.prototype.inheritsFrom = function(shuper) {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  function Inheriter() { }\\n\" +\n        \"  Inheriter.prototype = shuper.prototype;\\n\" +\n        \"  this.prototype = new Inheriter();\\n\" +\n        \"  this.superConstructor = shuper;\\n\" +\n        \"};\\n\" +\n        \"function Foo(var1, var2, strength) {\\n\" +\n        \"  Foo.superConstructor.call(this, strength);\\n\" +\n        \"}\" +\n        \"Foo.inheritsFrom(Object);\";\n\n    String externs = \"\" +\n        \"function Function(var_args) {}\" +\n        \"/** @return {*} */Function.prototype.call = function(var_args) {};\";\n\n    testSets(false, externs, js, js, \"{}\");\n  }\n",
        "begin_line": 916,
        "end_line": 934,
        "comment": "",
        "child_ranges": [
            "(line 917,col 5)-(line 927,col 36)",
            "(line 929,col 5)-(line 931,col 77)",
            "(line 933,col 5)-(line 933,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.runFindHighestTypeInChain()",
        "snippet": "  public void runFindHighestTypeInChain() {\n    // Check that this doesn't go into an infinite loop.\n    DisambiguateProperties.forJSTypeSystem(new Compiler())\n        .getTypeWithProperty(\"no\",\n            new JSTypeRegistry(new TestErrorReporter(null, null))\n            .getNativeType(JSTypeNative.OBJECT_PROTOTYPE));\n  }\n",
        "begin_line": 936,
        "end_line": 942,
        "comment": "",
        "child_ranges": [
            "(line 938,col 5)-(line 941,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  private void testSets(boolean runTightenTypes, String js, String expected,\n      String fieldTypes) {\n    this.runTightenTypes = runTightenTypes;\n    test(js, expected);\n    assertEquals(\n        fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));\n  }\n",
        "begin_line": 944,
        "end_line": 951,
        "comment": "",
        "child_ranges": [
            "(line 947,col 5)-(line 947,col 43)",
            "(line 948,col 5)-(line 948,col 23)",
            "(line 949,col 5)-(line 950,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  private void testSets(boolean runTightenTypes, String externs, String js,\n       String expected, String fieldTypes) {\n    testSets(runTightenTypes, externs, js, expected, fieldTypes, null, null);\n  }\n",
        "begin_line": 953,
        "end_line": 957,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  private void testSets(boolean runTightenTypes, String externs, String js,\n       String expected, String fieldTypes, DiagnosticType warning,\n       String description) {\n    this.runTightenTypes = runTightenTypes;\n    test(externs, js, expected, null, warning, description);\n    assertEquals(\n        fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));\n  }\n",
        "begin_line": 959,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 43)",
            "(line 964,col 5)-(line 964,col 60)",
            "(line 965,col 5)-(line 966,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  private void testSets(boolean runTightenTypes, String js, String fieldTypes) {\n    this.runTightenTypes = runTightenTypes;\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    compiler.init(new JSSourceFile[]{JSSourceFile.fromCode(\"externs\", \"\")},\n                  new JSSourceFile[]{\n                      JSSourceFile.fromCode(\"testcode\", js)}, options);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    getProcessor(compiler).process(externsRoot, mainRoot);\n\n    assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));\n  }\n",
        "begin_line": 976,
        "end_line": 994,
        "comment": "\n   * Compiles the code and checks that the set of types for each field matches\n   * the expected value.\n   *\n   * <p>The format for the set of types for fields is:\n   * {field=[[Type1, Type2]]}\n   ",
        "child_ranges": [
            "(line 978,col 5)-(line 978,col 43)",
            "(line 979,col 5)-(line 979,col 39)",
            "(line 980,col 5)-(line 980,col 52)",
            "(line 981,col 5)-(line 983,col 71)",
            "(line 985,col 5)-(line 985,col 39)",
            "(line 986,col 5)-(line 987,col 66)",
            "(line 989,col 5)-(line 989,col 44)",
            "(line 990,col 5)-(line 990,col 42)",
            "(line 991,col 5)-(line 991,col 58)",
            "(line 993,col 5)-(line 993,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.mapToString(com.google.common.collect.Multimap<java.lang.String, java.util.Collection<T>>)",
        "snippet": "  private <T> String mapToString(Multimap<String, Collection<T>> map) {\n    TreeMap<String, String> retMap = Maps.newTreeMap();\n    for (String key : map.keySet()) {\n      TreeSet<String> treeSet = Sets.newTreeSet();\n      for (Collection<T> collection : map.get(key)) {\n        Set<String> subSet = Sets.newTreeSet();\n        for (T type : collection) {\n          subSet.add(type.toString());\n        }\n        treeSet.add(subSet.toString());\n      }\n      retMap.put(key, treeSet.toString());\n    }\n    return retMap.toString();\n  }\n",
        "begin_line": 997,
        "end_line": 1011,
        "comment": " Sorts the map and converts to a string for comparision purposes. ",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 55)",
            "(line 999,col 5)-(line 1009,col 5)",
            "(line 1010,col 5)-(line 1010,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 99,
        "end_line": 105,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 100,col 5)-(line 102,col 6)",
            "(line 103,col 5)-(line 103,col 39)",
            "(line 104,col 5)-(line 104,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 137,
        "end_line": 143,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 52)",
            "(line 139,col 5)-(line 140,col 65)",
            "(line 141,col 5)-(line 141,col 55)",
            "(line 142,col 5)-(line 142,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 153,
        "end_line": 157,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 161,col 5)-(line 161,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 166,col 5)-(line 166,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 29)",
            "(line 179,col 5)-(line 179,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    normalizeEnabled  = true;\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 214,col 5)-(line 214,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 218,
        "end_line": 226,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 220,col 5)-(line 222,col 40)",
            "(line 224,col 5)-(line 225,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 261,
        "end_line": 264,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 292,
        "end_line": 295,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 294,col 5)-(line 294,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 311,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 314,col 5)-(line 316,col 6)",
            "(line 317,col 5)-(line 317,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    CompilerOptions options = getOptions();\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 334,
        "end_line": 349,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 337,col 5)-(line 337,col 41)",
            "(line 338,col 5)-(line 338,col 28)",
            "(line 340,col 5)-(line 340,col 71)",
            "(line 342,col 5)-(line 342,col 43)",
            "(line 345,col 5)-(line 345,col 39)",
            "(line 346,col 5)-(line 347,col 58)",
            "(line 348,col 5)-(line 348,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 357,
        "end_line": 359,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 358,col 5)-(line 358,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 383,
        "end_line": 386,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 385,col 5)-(line 385,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 401,
        "end_line": 412,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 41)",
            "(line 404,col 5)-(line 404,col 28)",
            "(line 406,col 5)-(line 406,col 56)",
            "(line 407,col 5)-(line 409,col 5)",
            "(line 410,col 5)-(line 410,col 55)",
            "(line 411,col 5)-(line 411,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 420,
        "end_line": 422,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 421,col 5)-(line 421,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 432,
        "end_line": 435,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 447,
        "end_line": 454,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 449,col 5)-(line 449,col 41)",
            "(line 450,col 5)-(line 450,col 28)",
            "(line 452,col 5)-(line 452,col 56)",
            "(line 453,col 5)-(line 453,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 461,
        "end_line": 463,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 462,col 5)-(line 462,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 472,
        "end_line": 474,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 473,col 5)-(line 473,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 484,
        "end_line": 490,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 485,col 5)-(line 489,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 500,
        "end_line": 502,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 501,col 5)-(line 501,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 515,
        "end_line": 521,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 517,col 5)-(line 519,col 6)",
            "(line 520,col 5)-(line 520,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 528,
        "end_line": 530,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 529,col 5)-(line 529,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 540,col 5)-(line 540,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 551,
        "end_line": 553,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 552,col 5)-(line 552,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 560,
        "end_line": 562,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 561,col 5)-(line 561,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 570,
        "end_line": 583,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 582,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 596,
        "end_line": 599,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 598,col 5)-(line 598,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          Normalize normalize = new Normalize(compiler, false);\n          normalize.process(externsRoot, mainRoot);\n          compiler.setNormalized();\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n      SymbolTable table = compiler.acquireSymbolTable();\n      table.verify(\n          new Node(Token.BLOCK, externsRoot.cloneTree(), expectedRoot),\n          mainRoot.getParent());\n      table.release();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        Normalize normalize = new Normalize(compiler, false);\n        normalize.process(externsRootClone, mainRootClone);\n      }\n\n      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new NodeTypeNormalizer().process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n    }\n  }\n",
        "begin_line": 616,
        "end_line": 802,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 619,col 5)-(line 619,col 51)",
            "(line 620,col 5)-(line 620,col 44)",
            "(line 622,col 5)-(line 622,col 39)",
            "(line 623,col 5)-(line 624,col 66)",
            "(line 626,col 5)-(line 626,col 44)",
            "(line 627,col 5)-(line 627,col 40)",
            "(line 630,col 5)-(line 630,col 38)",
            "(line 631,col 5)-(line 631,col 54)",
            "(line 632,col 5)-(line 632,col 50)",
            "(line 634,col 5)-(line 634,col 45)",
            "(line 635,col 5)-(line 635,col 68)",
            "(line 636,col 5)-(line 636,col 34)",
            "(line 637,col 5)-(line 637,col 59)",
            "(line 638,col 5)-(line 638,col 35)",
            "(line 640,col 5)-(line 641,col 39)",
            "(line 643,col 5)-(line 685,col 5)",
            "(line 687,col 5)-(line 801,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  private Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n      compiler.setNormalized();\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 807,
        "end_line": 826,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 808,col 5)-(line 808,col 41)",
            "(line 809,col 5)-(line 809,col 62)",
            "(line 810,col 5)-(line 812,col 5)",
            "(line 813,col 5)-(line 813,col 55)",
            "(line 814,col 5)-(line 814,col 39)",
            "(line 815,col 5)-(line 816,col 66)",
            "(line 817,col 5)-(line 817,col 44)",
            "(line 818,col 5)-(line 818,col 42)",
            "(line 820,col 5)-(line 824,col 5)",
            "(line 825,col 5)-(line 825,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 828,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 829,col 5)-(line 829,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 836,
        "end_line": 842,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 837,col 5)-(line 837,col 47)",
            "(line 838,col 5)-(line 840,col 5)",
            "(line 841,col 5)-(line 841,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 848,
        "end_line": 854,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 849,col 5)-(line 849,col 47)",
            "(line 850,col 5)-(line 852,col 5)",
            "(line 853,col 5)-(line 853,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 860,
        "end_line": 867,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 861,col 5)-(line 861,col 53)",
            "(line 862,col 5)-(line 865,col 5)",
            "(line 866,col 5)-(line 866,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 870,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 871,col 7)-(line 871,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 874,
        "end_line": 875,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 877,
        "end_line": 878,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  private Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 881,
        "end_line": 884,
        "comment": "",
        "child_ranges": [
            "(line 882,col 5)-(line 882,col 39)",
            "(line 883,col 5)-(line 883,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest",
            "com.google.javascript.jscomp.CheckUnreachableCodeTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 886,
        "end_line": 888,
        "comment": "",
        "child_ranges": [
            "(line 887,col 5)-(line 887,col 41)"
        ]
    }
]