[
    {
        "name": "Node.checkTreeEquals#1327",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "    public String checkTreeEquals(Node node2) {\n        NodeMismatch diff = checkTreeEqualsImpl(node2);\n        if (diff != null) {\n          return \"Node tree inequality:\" +\n              \"\\nTree1:\\n\" + toStringTree() +\n              \"\\n\\nTree2:\\n\" + node2.toStringTree();\n        }\n        return null;\n    }\n",
        "begin_line": 1327,
        "end_line": 1335,
        "comment": "\n     * Checks if the subtree under this node is the same as another subtree.\n     * Returns null if it's equal, or a message describing the differences.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "CreateSyntheticBlocks.visit#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.Callback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() != Token.NAME || parent.getType() != Token.CALL) {\n        return;\n      }\n\n      if (startMarkerName.equals(n.getString())) {\n        // Record information needed for insertion of a synthetic block or\n        // warning about an unmatched start marker.\n        Node ancestorBlockChild = n;\n        Node ancestorBlock = null;\n        for (Node ancestor : n.getAncestors()) {\n          int type = ancestor.getType();\n          if (type == Token.SCRIPT || type == Token.BLOCK) {\n            ancestorBlock = ancestor;\n            break;\n          }\n          ancestorBlockChild = ancestor;\n        }\n\n        startMarkerStack.push(new StartMarker(t.getSourceName(), n,\n            ancestorBlockChild, ancestorBlock));\n      }\n\n      if (!endMarkerName.equals(n.getString())) {\n        return;\n      }\n\n      if (startMarkerStack.isEmpty()) {\n        compiler.report(JSError.make(t, n, UNMATCHED_END_MARKER,\n            startMarkerName, endMarkerName));\n        return;\n      }\n\n      StartMarker startMarker = startMarkerStack.pop();\n\n      Node endMarkerAncestorBlockChild = n;\n      for (Node ancestor : n.getAncestors()) {\n        int type = ancestor.getType();\n        if (type == Token.SCRIPT || type == Token.BLOCK) {\n          if (ancestor != startMarker.ancestorBlock) {\n            // The end marker isn't in the same block as the start marker.\n            compiler.report(JSError.make(t, n, UNMATCHED_END_MARKER,\n                startMarkerName, endMarkerName));\n            return;\n          }\n          break;\n        }\n        endMarkerAncestorBlockChild = ancestor;\n      }\n\n      Node block = new Node(Token.BLOCK);\n      block.setIsSyntheticBlock(true);\n      startMarker.ancestorBlock.addChildAfter(block,\n          startMarker.ancestorBlockChild);\n      Node removedNode = null;\n      do {\n        // Move the nodes into the synthetic block.\n        removedNode = startMarker.ancestorBlock.removeChildAfter(block);\n        block.addChildToBack(removedNode);\n      } while (removedNode != endMarkerAncestorBlockChild);\n\n      compiler.reportCodeChange();\n    }\n",
        "begin_line": 95,
        "end_line": 158,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CreateSyntheticBlocks.CreateSyntheticBlocks#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.CreateSyntheticBlocks(com.google.javascript.jscomp.AbstractCompiler, java.lang.String, java.lang.String)",
        "snippet": "  public CreateSyntheticBlocks(AbstractCompiler compiler,\n      String startMarkerName, String endMarkerName) {\n    this.compiler = compiler;\n    this.startMarkerName = startMarkerName;\n    this.endMarkerName = endMarkerName;\n    startMarkerStack = new ArrayDeque<StartMarker>();\n  }\n",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CreateSyntheticBlocks.process#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CreateSyntheticBlocks.java",
        "class_name": "com.google.javascript.jscomp.CreateSyntheticBlocks",
        "signature": "com.google.javascript.jscomp.CreateSyntheticBlocks.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, new Callback());\n\n    for (StartMarker startMarker : startMarkerStack) {\n      compiler.report(JSError.make(startMarker.sourceName, startMarker.node,\n          UNMATCHED_START_MARKER, startMarkerName));\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.canPropertyBeDefined#558",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  public boolean canPropertyBeDefined(JSType type, String propertyName) {\n    if (typesIndexedByProperty.containsKey(propertyName)) {\n      for (JSType alt : typesIndexedByProperty.get(propertyName)) {\n        if (alt.isSubtype(type) || type.isSubtype(alt)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 558,
        "end_line": 568,
        "comment": "\n   * Returns whether the given property can possibly be set on the given type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptOrFnNode.getSourceName#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getSourceName()",
        "snippet": "    public final String getSourceName() { return sourceName; }\n",
        "begin_line": 54,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptOrFnNode.getEncodedSourceStart#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getEncodedSourceStart()",
        "snippet": "    public final int getEncodedSourceStart() { return encodedSourceStart; }\n",
        "begin_line": 60,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptOrFnNode.getEncodedSourceEnd#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getEncodedSourceEnd()",
        "snippet": "    public final int getEncodedSourceEnd() { return encodedSourceEnd; }\n",
        "begin_line": 62,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptOrFnNode.getBaseLineno#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getBaseLineno()",
        "snippet": "    public final int getBaseLineno() { return baseLineno; }\n",
        "begin_line": 69,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScriptOrFnNode.getEndLineno#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.getEndLineno()",
        "snippet": "    public final int getEndLineno() { return endLineno; }\n",
        "begin_line": 77,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.propToString#176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "    private static final String propToString(int propType) {\n        switch (propType) {\n            case LOCAL_BLOCK_PROP:   return \"local_block\";\n            case OBJECT_IDS_PROP:    return \"object_ids_prop\";\n            case CATCH_SCOPE_PROP:   return \"catch_scope_prop\";\n            case LABEL_ID_PROP:      return \"label_id_prop\";\n            case TARGET_PROP:        return \"target\";\n            case BREAK_PROP:         return \"break\";\n            case CONTINUE_PROP:      return \"continue\";\n            case ENUM_PROP:          return \"enum\";\n            case FUNCTION_PROP:      return \"function\";\n            case TEMP_PROP:          return \"temp\";\n            case LOCAL_PROP:         return \"local\";\n            case CODEOFFSET_PROP:    return \"codeoffset\";\n            case FIXUPS_PROP:        return \"fixups\";\n            case VARS_PROP:          return \"vars\";\n            case USES_PROP:          return \"uses\";\n            case REGEXP_PROP:        return \"regexp\";\n            case CASES_PROP:         return \"cases\";\n            case DEFAULT_PROP:       return \"default\";\n            case CASEARRAY_PROP:     return \"casearray\";\n            case SOURCENAME_PROP:    return \"sourcename\";\n            case TYPE_PROP:          return \"type\";\n            case SPECIAL_PROP_PROP:  return \"special_prop\";\n            case LABEL_PROP:         return \"label\";\n            case FINALLY_PROP:       return \"finally\";\n            case LOCALCOUNT_PROP:    return \"localcount\";\n\n            case TARGETBLOCK_PROP:   return \"targetblock\";\n            case VARIABLE_PROP:      return \"variable\";\n            case LASTUSE_PROP:       return \"lastuse\";\n            case ISNUMBER_PROP:      return \"isnumber\";\n            case DIRECTCALL_PROP:    return \"directcall\";\n\n            case SPECIALCALL_PROP:   return \"specialcall\";\n            case DEBUGSOURCE_PROP:   return \"debugsource\";\n\n            case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n            case SKIP_INDEXES_PROP:  return \"skip_indexes\";\n            case INCRDECR_PROP:      return \"incrdecr\";\n            case MEMBER_TYPE_PROP:   return \"member_type\";\n            case NAME_PROP:          return \"name\";\n            case PARENTHESIZED_PROP: return \"parenthesized\";\n            case QUOTED_PROP:        return \"quoted\";\n\n            case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n            case SOURCEFILE_PROP: return \"sourcefile\";\n            case EMPTY_BLOCK: return \"empty_block\";\n            case ORIGINALNAME_PROP: return \"originalname\";\n            case NO_SIDE_EFFECTS_CALL: return \"no_side_effects_call\";\n\n            case IS_CONSTANT_NAME:   return \"is_constant_name\";\n            case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n            case IS_VAR_ARGS_PARAM:  return \"is_var_args_param\";\n            case IS_NAMESPACE:       return \"is_namespace\";\n            case IS_DISPATCHER:      return \"is_dispatcher\";\n            case DIRECTIVES:         return \"directives\";\n            case DIRECT_EVAL:        return \"direct_eval\";\n            default:\n              Kit.codeBug();\n\n\n        }\n        return null;\n    }\n",
        "begin_line": 176,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getSortedPropTypes#802",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "    private int[] getSortedPropTypes() {\n        int count = 0;\n        for (PropListItem x = propListHead; x != null; x = x.next) {\n            count++;\n        }\n\n        int[] keys = new int[count];\n        for (PropListItem x = propListHead; x != null; x = x.next) {\n            count--;\n            keys[count] = x.type;\n        }\n\n        Arrays.sort(keys);\n        return keys;\n    }\n",
        "begin_line": 802,
        "end_line": 816,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#870",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "    @Override public String toString()\n    {\n       return toString(true, true, true);\n    }\n",
        "begin_line": 870,
        "end_line": 873,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#875",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "    public String toString(\n        boolean printSource,\n        boolean printAnnotations,\n        boolean printType)\n    {\n        if (Token.printTrees) {\n            StringBuilder sb = new StringBuilder();\n            toString(sb, printSource, printAnnotations, printType);\n            return sb.toString();\n        }\n        return String.valueOf(type);\n    }\n",
        "begin_line": 875,
        "end_line": 886,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toString#888",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "    private void toString(\n        StringBuilder sb,\n        boolean printSource,\n        boolean printAnnotations,\n        boolean printType)\n    {\n        if (Token.printTrees) {\n            sb.append(Token.name(type));\n            if (this instanceof StringNode) {\n                sb.append(' ');\n                sb.append(getString());\n            } else if (type == Token.FUNCTION) {\n                sb.append(' ');\n                sb.append(first.getString());\n            } else if (this instanceof ScriptOrFnNode) {\n                ScriptOrFnNode sof = (ScriptOrFnNode)this;\n                if (this instanceof FunctionNode) {\n                    FunctionNode fn = (FunctionNode)this;\n                    sb.append(' ');\n                    sb.append(fn.getFunctionName());\n                }\n                if (printSource) {\n                  sb.append(\" [source name: \");\n                  sb.append(sof.getSourceName());\n                  sb.append(\"] [encoded source length: \");\n                  sb.append(sof.getEncodedSourceEnd()\n                            - sof.getEncodedSourceStart());\n                  sb.append(\"] [base line: \");\n                  sb.append(sof.getBaseLineno());\n                  sb.append(\"] [end line: \");\n                  sb.append(sof.getEndLineno());\n                  sb.append(']');\n                }\n            } else if (type == Token.NUMBER) {\n                sb.append(' ');\n                sb.append(getDouble());\n            }\n            if (printSource) {\n              int lineno = getLineno();\n              if (lineno != -1) {\n                  sb.append(' ');\n                  sb.append(lineno);\n              }\n            }\n\n            if (printAnnotations) {\n              int[] keys = getSortedPropTypes();\n              for (int i = 0; i < keys.length; i++) {\n                  int type = keys[i];\n                  PropListItem x = lookupProperty(type);\n                  sb.append(\" [\");\n                  sb.append(propToString(type));\n                  sb.append(\": \");\n                  String value;\n                  switch (type) {\n                    case TARGETBLOCK_PROP : // can't add this as it recurses\n                      value = \"target block property\";\n                      break;\n                    case LOCAL_BLOCK_PROP :     // can't add this as it is dull\n                      value = \"last local block\";\n                      break;\n                    case ISNUMBER_PROP:\n                      switch (x.intValue) {\n                        case BOTH:\n                          value = \"both\";\n                          break;\n                        case RIGHT:\n                          value = \"right\";\n                          break;\n                        case LEFT:\n                          value = \"left\";\n                          break;\n                        default:\n                          throw Kit.codeBug();\n                      }\n                      break;\n                    case SPECIALCALL_PROP:\n                      switch (x.intValue) {\n                        case SPECIALCALL_EVAL:\n                          value = \"eval\";\n                          break;\n                        case SPECIALCALL_WITH:\n                          value = \"with\";\n                          break;\n                        default:\n                          // NON_SPECIALCALL should not be stored\n                          throw Kit.codeBug();\n                      }\n                      break;\n                    default :\n                      Object obj = x.objectValue;\n                      if (obj != null) {\n                          value = obj.toString();\n                      } else {\n                          value = String.valueOf(x.intValue);\n                      }\n                      break;\n                  }\n                  sb.append(value);\n                  sb.append(']');\n              }\n            }\n\n            if (printType) {\n              if (jsType != null) {\n                  String jsTypeString = jsType.toString();\n                  if (jsTypeString != null) {\n                      sb.append(\" : \");\n                      sb.append(jsTypeString);\n                  }\n              }\n            }\n        }\n    }\n",
        "begin_line": 888,
        "end_line": 1001,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTree#1004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "    public String toStringTree() {\n        return toStringTreeImpl();\n    }\n",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeImpl#1008",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "    private String toStringTreeImpl() {\n        try {\n            StringBuffer s = new StringBuffer();\n            appendStringTree(s);\n            return s.toString();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Should not happen\\n\" + e);\n        }\n    }\n",
        "begin_line": 1008,
        "end_line": 1016,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.appendStringTree#1018",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "    public void appendStringTree(Appendable appendable) throws IOException {\n        toStringTreeHelper(this, 0, appendable);\n    }\n",
        "begin_line": 1018,
        "end_line": 1020,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.toStringTreeHelper#1022",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "    private static void toStringTreeHelper(Node n, int level, Appendable sb)\n            throws IOException\n    {\n        if (Token.printTrees) {\n            for (int i = 0; i != level; ++i) {\n                sb.append(\"    \");\n            }\n            sb.append(n.toString());\n            sb.append('\\n');\n            for (Node cursor = n.getFirstChild(); cursor != null;\n                 cursor = cursor.getNext())\n            {\n                toStringTreeHelper(cursor, level + 1, sb);\n            }\n        }\n    }\n",
        "begin_line": 1022,
        "end_line": 1037,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.toString#965",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"JSDocInfo\";\n  }\n",
        "begin_line": 965,
        "end_line": 968,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#670",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node computeFollowNode(Node fromNode, Node node) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.getType() == Token.FUNCTION || node == root) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent);\n      case Token.CASE:\n      case Token.DEFAULT:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().getType() == Token.CASE) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().getType() == Token.DEFAULT) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          for (Node finallyNode : finallyMap.get(parent)) {\n            createEdge(fromNode, Branch.UNCOND, finallyNode);\n          }\n          return computeFollowNode(fromNode, parent);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.getType() == Token.FUNCTION) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transfered up the AST.\n      return computeFollowNode(fromNode, parent);\n    }\n  }\n",
        "begin_line": 670,
        "end_line": 763,
        "comment": "\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2649
        },
        "num_failing_tests": 3
    },
    {
        "name": "Token.name#266",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "class_name": "com.google.javascript.rhino.Token",
        "signature": "com.google.javascript.rhino.Token.name(int)",
        "snippet": "  public static String name(int token)\n    {\n        if (!printNames) {\n            return String.valueOf(token);\n        }\n        switch (token) {\n          case ERROR:           return \"ERROR\";\n          case EOF:             return \"EOF\";\n          case EOL:             return \"EOL\";\n          case ENTERWITH:       return \"ENTERWITH\";\n          case LEAVEWITH:       return \"LEAVEWITH\";\n          case RETURN:          return \"RETURN\";\n          case GOTO:            return \"GOTO\";\n          case IFEQ:            return \"IFEQ\";\n          case IFNE:            return \"IFNE\";\n          case SETNAME:         return \"SETNAME\";\n          case BITOR:           return \"BITOR\";\n          case BITXOR:          return \"BITXOR\";\n          case BITAND:          return \"BITAND\";\n          case EQ:              return \"EQ\";\n          case NE:              return \"NE\";\n          case LT:              return \"LT\";\n          case LE:              return \"LE\";\n          case GT:              return \"GT\";\n          case GE:              return \"GE\";\n          case LSH:             return \"LSH\";\n          case RSH:             return \"RSH\";\n          case URSH:            return \"URSH\";\n          case ADD:             return \"ADD\";\n          case SUB:             return \"SUB\";\n          case MUL:             return \"MUL\";\n          case DIV:             return \"DIV\";\n          case MOD:             return \"MOD\";\n          case NOT:             return \"NOT\";\n          case BITNOT:          return \"BITNOT\";\n          case POS:             return \"POS\";\n          case NEG:             return \"NEG\";\n          case NEW:             return \"NEW\";\n          case DELPROP:         return \"DELPROP\";\n          case TYPEOF:          return \"TYPEOF\";\n          case GETPROP:         return \"GETPROP\";\n          case SETPROP:         return \"SETPROP\";\n          case GETELEM:         return \"GETELEM\";\n          case SETELEM:         return \"SETELEM\";\n          case CALL:            return \"CALL\";\n          case NAME:            return \"NAME\";\n          case NUMBER:          return \"NUMBER\";\n          case STRING:          return \"STRING\";\n          case NULL:            return \"NULL\";\n          case THIS:            return \"THIS\";\n          case FALSE:           return \"FALSE\";\n          case TRUE:            return \"TRUE\";\n          case SHEQ:            return \"SHEQ\";\n          case SHNE:            return \"SHNE\";\n          case REGEXP:          return \"OBJECT\";\n          case BINDNAME:        return \"BINDNAME\";\n          case THROW:           return \"THROW\";\n          case RETHROW:         return \"RETHROW\";\n          case IN:              return \"IN\";\n          case INSTANCEOF:      return \"INSTANCEOF\";\n          case LOCAL_LOAD:      return \"LOCAL_LOAD\";\n          case GETVAR:          return \"GETVAR\";\n          case SETVAR:          return \"SETVAR\";\n          case CATCH_SCOPE:     return \"CATCH_SCOPE\";\n          case ENUM_INIT_KEYS:  return \"ENUM_INIT_KEYS\";\n          case ENUM_INIT_VALUES:  return \"ENUM_INIT_VALUES\";\n          case ENUM_NEXT:       return \"ENUM_NEXT\";\n          case ENUM_ID:         return \"ENUM_ID\";\n          case THISFN:          return \"THISFN\";\n          case RETURN_RESULT:   return \"RETURN_RESULT\";\n          case ARRAYLIT:        return \"ARRAYLIT\";\n          case OBJECTLIT:       return \"OBJECTLIT\";\n          case GET_REF:         return \"GET_REF\";\n          case SET_REF:         return \"SET_REF\";\n          case DEL_REF:         return \"DEL_REF\";\n          case REF_CALL:        return \"REF_CALL\";\n          case REF_SPECIAL:     return \"REF_SPECIAL\";\n          case DEFAULTNAMESPACE:return \"DEFAULTNAMESPACE\";\n          case ESCXMLTEXT:      return \"ESCXMLTEXT\";\n          case ESCXMLATTR:      return \"ESCXMLATTR\";\n          case REF_MEMBER:      return \"REF_MEMBER\";\n          case REF_NS_MEMBER:   return \"REF_NS_MEMBER\";\n          case REF_NAME:        return \"REF_NAME\";\n          case REF_NS_NAME:     return \"REF_NS_NAME\";\n          case TRY:             return \"TRY\";\n          case SEMI:            return \"SEMI\";\n          case LB:              return \"LB\";\n          case RB:              return \"RB\";\n          case LC:              return \"LC\";\n          case RC:              return \"RC\";\n          case LP:              return \"LP\";\n          case RP:              return \"RP\";\n          case COMMA:           return \"COMMA\";\n          case ASSIGN:          return \"ASSIGN\";\n          case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n          case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n          case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n          case ASSIGN_LSH:      return \"ASSIGN_LSH\";\n          case ASSIGN_RSH:      return \"ASSIGN_RSH\";\n          case ASSIGN_URSH:     return \"ASSIGN_URSH\";\n          case ASSIGN_ADD:      return \"ASSIGN_ADD\";\n          case ASSIGN_SUB:      return \"ASSIGN_SUB\";\n          case ASSIGN_MUL:      return \"ASSIGN_MUL\";\n          case ASSIGN_DIV:      return \"ASSIGN_DIV\";\n          case ASSIGN_MOD:      return \"ASSIGN_MOD\";\n          case HOOK:            return \"HOOK\";\n          case COLON:           return \"COLON\";\n          case OR:              return \"OR\";\n          case AND:             return \"AND\";\n          case INC:             return \"INC\";\n          case DEC:             return \"DEC\";\n          case DOT:             return \"DOT\";\n          case FUNCTION:        return \"FUNCTION\";\n          case EXPORT:          return \"EXPORT\";\n          case IMPORT:          return \"IMPORT\";\n          case IF:              return \"IF\";\n          case ELSE:            return \"ELSE\";\n          case SWITCH:          return \"SWITCH\";\n          case CASE:            return \"CASE\";\n          case DEFAULT:         return \"DEFAULT\";\n          case WHILE:           return \"WHILE\";\n          case DO:              return \"DO\";\n          case FOR:             return \"FOR\";\n          case BREAK:           return \"BREAK\";\n          case CONTINUE:        return \"CONTINUE\";\n          case VAR:             return \"VAR\";\n          case WITH:            return \"WITH\";\n          case CATCH:           return \"CATCH\";\n          case FINALLY:         return \"FINALLY\";\n          case RESERVED:        return \"RESERVED\";\n          case EMPTY:           return \"EMPTY\";\n          case BLOCK:           return \"BLOCK\";\n          case LABEL:           return \"LABEL\";\n          case TARGET:          return \"TARGET\";\n          case LOOP:            return \"LOOP\";\n          case EXPR_VOID:       return \"EXPR_VOID\";\n          case EXPR_RESULT:     return \"EXPR_RESULT\";\n          case JSR:             return \"JSR\";\n          case SCRIPT:          return \"SCRIPT\";\n          case TYPEOFNAME:      return \"TYPEOFNAME\";\n          case USE_STACK:       return \"USE_STACK\";\n          case SETPROP_OP:      return \"SETPROP_OP\";\n          case SETELEM_OP:      return \"SETELEM_OP\";\n          case LOCAL_BLOCK:     return \"LOCAL_BLOCK\";\n          case SET_REF_OP:      return \"SET_REF_OP\";\n          case DOTDOT:          return \"DOTDOT\";\n          case COLONCOLON:      return \"COLONCOLON\";\n          case XML:             return \"XML\";\n          case DOTQUERY:        return \"DOTQUERY\";\n          case XMLATTR:         return \"XMLATTR\";\n          case XMLEND:          return \"XMLEND\";\n          case TO_OBJECT:       return \"TO_OBJECT\";\n          case TO_DOUBLE:       return \"TO_DOUBLE\";\n          case GET:             return \"GET\";\n          case SET:             return \"SET\";\n          case CONST:           return \"CONST\";\n          case SETCONST:        return \"SETCONST\";\n          case DEBUGGER:        return \"DEBUGGER\";\n          case ANNOTATION:      return \"ANNOTATION\";\n          case PIPE:            return \"PIPE\";\n          case STAR:            return \"STAR\";\n          case EOC:             return \"EOC\";\n          case QMARK:           return \"QMARK\";\n          case ELLIPSIS:        return \"ELLIPSIS\";\n          case BANG:            return \"BANG\";\n          case VOID:            return \"VOID\"; \n          case EQUALS:          return \"EQUALS\";\n        }\n\n        // Token without name\n        throw new IllegalStateException(String.valueOf(token));\n    }\n",
        "begin_line": 266,
        "end_line": 437,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getInstanceFromPrototype#769",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getInstanceFromPrototype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public JSType getInstanceFromPrototype(JSType type) {\n      if (type.isFunctionPrototypeType()) {\n        FunctionPrototypeType prototype = (FunctionPrototypeType) type;\n        FunctionType owner = prototype.getOwnerFunction();\n        if (owner.isConstructor() || owner.isInterface()) {\n          return ((FunctionPrototypeType) type).getOwnerFunction()\n              .getInstanceType();\n        }\n      }\n      return null;\n    }\n",
        "begin_line": 769,
        "end_line": 779,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeSafeDispatcher.process#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n      case Token.FINALLY:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return processEmptyExpression((EmptyExpression) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 119,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2144
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processCatchClause#409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processCatchClause(com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause)",
        "snippet": "    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = new Node(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        node.addChildToBack(transform(clauseNode.getCatchCondition()));\n      } else {\n        Node catchCondition = new Node(Token.EMPTY);\n        // Old Rhino used the position of the catchVar as the position\n        // for the (nonexistent) error being caught.\n        catchCondition.setLineno(catchVar.getLineno());\n        int clauseAbsolutePosition =\n            position2charno(catchVar.getAbsolutePosition());\n        catchCondition.setCharno(clauseAbsolutePosition);\n        node.addChildToBack(catchCondition);\n      }\n      node.addChildToBack(transform(clauseNode.getBody()));\n      return node;\n    }\n",
        "begin_line": 409,
        "end_line": 427,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2144
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processTryStatement#743",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processTryStatement(com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement)",
        "snippet": "    @Override\n    Node processTryStatement(TryStatement statementNode) {\n      Node node = new Node(Token.TRY, transform(statementNode.getTryBlock()));\n      Node block = new Node(Token.BLOCK);\n      boolean lineSet = false;\n\n      for (CatchClause cc : statementNode.getCatchClauses()) {\n        // Mark the enclosing block at the same line as the first catch\n        // clause.\n        if (lineSet == false) {\n            block.setLineno(cc.getLineno());\n            lineSet = true;\n        }\n        block.addChildToBack(transform(cc));\n      }\n      node.addChildToBack(block);\n\n      AstNode finallyBlock = statementNode.getFinallyBlock();\n      if (finallyBlock != null) {\n        node.addChildToBack(transform(finallyBlock));\n      }\n\n      // If we didn't set the line on the catch clause, then\n      // we've got an empty catch clause.  Set its line to be the same\n      // as the finally block (to match Old Rhino's behavior.)\n      if ((lineSet == false) && (finallyBlock != null)) {\n        block.setLineno(finallyBlock.getLineno());\n      }\n\n      return node;\n    }\n",
        "begin_line": 743,
        "end_line": 773,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2144
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isControlStructureCodeBlock#955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructureCodeBlock(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructureCodeBlock(Node parent, Node n) {\n    switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }\n  }\n",
        "begin_line": 955,
        "end_line": 979,
        "comment": "\n   * Determines whether the given node is code node for FOR, DO,\n   * WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2144
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseBranch#441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 3);\n        Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);\n        // the first child is the catch var and the third child\n        // is the code block\n        traverseBranch(n.getFirstChild(), n);\n        traverseBranch(n.getFirstChild().getNext().getNext(), n);\n        break;\n\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 441,
        "end_line": 478,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2144
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.visit#290",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.IF:\n        handleIf(n);\n        return;\n      case Token.WHILE:\n        handleWhile(n);\n        return;\n      case Token.DO:\n        handleDo(n);\n        return;\n      case Token.FOR:\n        handleFor(n);\n        return;\n      case Token.SWITCH:\n        handleSwitch(n);\n        return;\n      case Token.CASE:\n        handleCase(n);\n        return;\n      case Token.DEFAULT:\n        handleDefault(n);\n        return;\n      case Token.BLOCK:\n      case Token.SCRIPT:\n        handleStmtList(n);\n        return;\n      case Token.FUNCTION:\n        handleFunction(n);\n        return;\n      case Token.EXPR_RESULT:\n        handleExpr(n);\n        return;\n      case Token.THROW:\n        handleThrow(n);\n        return;\n      case Token.TRY:\n        handleTry(n);\n        return;\n      case Token.CATCH:\n        handleCatch(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n      case Token.RETURN:\n        handleReturn(n);\n        return;\n      case Token.WITH:\n        handleWith(n);\n        return;\n      case Token.LABEL:\n        return;\n      default:\n        handleStmt(n);\n        return;\n    }\n  }\n",
        "begin_line": 290,
        "end_line": 351,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2144
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.handleCatch#544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleCatch(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleCatch(Node node) {\n    createEdge(node, Branch.UNCOND, node.getLastChild());\n  }\n",
        "begin_line": 544,
        "end_line": 546,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2144
        },
        "num_failing_tests": 2
    },
    {
        "name": "DisambiguateProperties.visit#355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.FindExternProperties.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.GETPROP) {\n        String field = n.getLastChild().getString();\n        T type = typeSystem.getType(getScope(), n.getFirstChild(), field);\n        Property prop = getProperty(field);\n        if (typeSystem.isInvalidatingType(type)) {\n          prop.invalidate();\n        } else {\n          prop.addTypeToSkip(type);\n\n          // If this is a prototype property, then we want to skip assignments\n          // to the instance type as well.  These assignments are not usually\n          // seen in the extern code itself, so we must handle them here.\n          if ((type = typeSystem.getInstanceFromPrototype(type)) != null) {\n            prop.getTypes().add(type);\n            prop.typesToSkip.add(type);\n          }\n        }\n      }\n    }\n",
        "begin_line": 355,
        "end_line": 374,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.handleReturn#621",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleReturn(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleReturn(Node node) {\n    Node lastJump = null;\n    for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext();) {\n      Node curHandler = iter.next();\n      if (NodeUtil.isFunction(curHandler)) {\n        break;\n      }\n      if (NodeUtil.hasFinally(curHandler)) {\n        if (lastJump == null) {\n          createEdge(node, Branch.UNCOND, curHandler.getLastChild());\n        } else {\n          finallyMap.put(lastJump,\n              computeFallThrough(curHandler.getLastChild()));\n        }\n        lastJump = curHandler;\n      }\n    }\n\n    if (node.hasChildren()) {\n      connectToPossibleExceptionHandler(node, node.getFirstChild());\n    }\n\n    if (lastJump == null) {\n      createEdge(node, Branch.UNCOND, null);\n    } else {\n      finallyMap.put(lastJump, null);\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 648,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.recompute#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.recompute(N)",
        "snippet": "  public void recompute(N reachableNode) {\n    GraphNode<N, E> newReachable = graph.getNode(reachableNode);\n    Preconditions.checkState(newReachable.getAnnotation() != REACHABLE);\n    newReachable.setAnnotation(REACHABLE);\n    FixedPointGraphTraversal.newTraversal(this)\n        .computeFixedPoint(graph, reachableNode);\n  }\n",
        "begin_line": 50,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.toString#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.toString()",
        "snippet": "  @Override\n  public String toString() {\n    // TODO(user): remove custom toString.\n    return type.key + \". \" + description + \" at \" +\n      (sourceName != null && sourceName.length() > 0 ?\n       sourceName : \"(unknown source)\") + \" line \" +\n      (lineNumber != -1 ? String.valueOf(lineNumber) : \"(unknown line)\");\n  }\n",
        "begin_line": 212,
        "end_line": 219,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.visitOrMaybeActivate#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.visitOrMaybeActivate(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void visitOrMaybeActivate(NodeTraversal t, Node n, Node parent) {\n      if (isActive()) {\n        callback.visit(t, n, parent);\n      } else if (waiting == n) {\n        waiting = null;\n      }\n    }\n",
        "begin_line": 105,
        "end_line": 111,
        "comment": "\n     * Visits the node unless the wrapped callback is inactive. Activates the\n     * callback if appropriate. \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.shouldTraverseIfActive#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.shouldTraverseIfActive(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void shouldTraverseIfActive(NodeTraversal t, Node n, Node parent) {\n      if (isActive() && !callback.shouldTraverse(t, n, parent)) {\n        waiting = n;\n      }\n    }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.shouldTraverse#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    GraphNode<Node, Branch> gNode = t.getControlFlowGraph().getNode(n);\n    if (gNode != null && gNode.getAnnotation() != GraphReachability.REACHABLE) {\n\n      // Only report error when there are some line number informations.\n      // There are synthetic nodes with no line number informations, nodes\n      // introduce by other passes (although not likely since this pass should\n      // be executed early) or some rhino bug.\n      if (n.getLineno() != -1 &&\n          // Allow spurious semi-colons and spurious breaks.\n          n.getType() != Token.EMPTY && n.getType() != Token.BREAK) {\n        compiler.report(JSError.make(t, n, level, UNREACHABLE_CODE));\n        // From now on, we are going to assume the user fixed the error and not\n        // give more warning related to code section reachable from this node.\n        new GraphReachability<Node, ControlFlowGraph.Branch>(\n            t.getControlFlowGraph()).recompute(n);\n\n        // Saves time by not traversing children.\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 53,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformTokenType#839",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n        return Token.EXPR_VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 839,
        "end_line": 1151,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1898
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeUtil.hasFinally#1887",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.hasFinally(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean hasFinally(Node n) {\n    Preconditions.checkArgument(n.getType() == Token.TRY);\n    return n.getChildCount() == 3;\n  }\n",
        "begin_line": 1887,
        "end_line": 1890,
        "comment": "\n   * @return Whether a TRY node has a finally block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1849
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.getCatchBlock#1896",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getCatchBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getCatchBlock(Node n) {\n    Preconditions.checkArgument(n.getType() == Token.TRY);\n    return n.getFirstChild().getNext();\n  }\n",
        "begin_line": 1896,
        "end_line": 1899,
        "comment": "\n   * @return The BLOCK node containing the CATCH node (if any)\n   * of a TRY.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1849
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.hasCatchHandler#1905",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean hasCatchHandler(Node n) {\n    Preconditions.checkArgument(n.getType() == Token.BLOCK);\n    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;\n  }\n",
        "begin_line": 1905,
        "end_line": 1908,
        "comment": "\n   * @return Whether BLOCK (from a TRY node) contains a CATCH.\n   * @see NodeUtil#getCatchBlock\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1849
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.shouldTraverse#213",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node n, Node parent) {\n    astPosition.put(n, astPositionCounter++);\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {\n          exceptionHandler.push(n);\n          return true;\n        }\n        return false;\n      case Token.TRY:\n        exceptionHandler.push(n);\n        return true;\n    }\n\n    /*\n     * We are going to stop the traversal depending on what the node's parent\n     * is.\n     *\n     * We are only interested in adding edges between nodes that change control\n     * flow. The most obvious ones are loops and IF-ELSE's. A statement\n     * transfers control to its next sibling.\n     *\n     * In case of an expression tree, there is no control flow within the tree\n     * even when there are short circuited operators and conditionals. When we\n     * are doing data flow analysis, we will simply synthesize lattices up the\n     * expression tree by finding the meet at each expression node.\n     *\n     * For example: within a Token.SWITCH, the expression in question does not\n     * change the control flow and need not to be considered.\n     */\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.FOR:\n          // Only traverse the body of the for loop.\n          return n == parent.getLastChild();\n\n        // Skip the conditions.\n        case Token.IF:\n        case Token.WHILE:\n        case Token.WITH:\n          return n != parent.getFirstChild();\n        case Token.DO:\n          return n != parent.getFirstChild().getNext();\n        // Only traverse the body of the cases\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.CATCH:\n        case Token.LABEL:\n          return n != parent.getFirstChild();\n        case Token.FUNCTION:\n          return n == parent.getFirstChild().getNext().getNext();\n        case Token.CONTINUE:\n        case Token.BREAK:\n        case Token.EXPR_RESULT:\n        case Token.VAR:\n        case Token.RETURN:\n        case Token.THROW:\n          return false;\n        case Token.TRY:\n          /* Just before we are about to visit the second child of the TRY node,\n           * we know that we will be visiting either the CATCH or the FINALLY.\n           * In other words, we know that the post order traversal of the TRY\n           * block has been finished, no more exceptions can be caught by the\n           * handler at this TRY block and should be taken out of the stack.\n           */\n          if (n == parent.getFirstChild().getNext()) {\n            Preconditions.checkState(exceptionHandler.peek() == parent);\n            exceptionHandler.pop();\n          }\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 213,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1849
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.handleTry#540",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleTry(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleTry(Node node) {\n    createEdge(node, Branch.UNCOND, node.getFirstChild());\n  }\n",
        "begin_line": 540,
        "end_line": 542,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1849
        },
        "num_failing_tests": 2
    },
    {
        "name": "DisambiguateProperties.getTypesToSkipForType#680",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getTypesToSkipForType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public ImmutableSet<JSType> getTypesToSkipForType(JSType type) {\n      type = type.restrictByNotNullOrUndefined();\n      if (type instanceof UnionType) {\n        Set<JSType> types = Sets.newHashSet(type);\n        for (JSType alt : ((UnionType) type).getAlternates()) {\n          types.addAll(getTypesToSkipForTypeNonUnion(type));\n        }\n        return ImmutableSet.copyOf(types);\n      }\n      return ImmutableSet.copyOf(getTypesToSkipForTypeNonUnion(type));\n    }\n",
        "begin_line": 680,
        "end_line": 690,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getTypesToSkipForTypeNonUnion#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getTypesToSkipForTypeNonUnion(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    private Set<JSType> getTypesToSkipForTypeNonUnion(JSType type) {\n      Set<JSType> types = Sets.newHashSet();\n      JSType skipType = type;\n      while (skipType != null) {\n        types.add(skipType);\n\n        ObjectType objSkipType = skipType.toObjectType();\n        if (objSkipType != null) {\n          skipType = objSkipType.getImplicitPrototype();\n        } else {\n          break;\n        }\n      }\n      return types;\n    }\n",
        "begin_line": 692,
        "end_line": 706,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.process#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    this.root = root;\n    astPositionCounter = 0;\n    astPosition = Maps.newHashMap();\n    nodePriorities = Maps.newHashMap();\n    cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities);\n    NodeTraversal.traverse(compiler, root, this);\n    astPosition.put(null, ++astPositionCounter); // the implicit return is last.\n\n    // Now, generate the priority of nodes by doing a depth-first\n    // search on the CFG.\n    priorityCounter = 0;\n    DiGraphNode<Node, Branch> entry = cfg.getEntry();\n    prioritizeFromEntryNode(entry);\n\n    if (shouldTraverseFunctions) {\n      // If we're traversing inner functions, we need to rank the\n      // priority of them too.\n      for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n        Node value = candidate.getValue();\n        if (value != null && value.getType() == Token.FUNCTION) {\n          Preconditions.checkState(\n              !nodePriorities.containsKey(candidate) || candidate == entry);\n          prioritizeFromEntryNode(candidate);\n        }\n      }\n    }\n\n    // At this point, all reachable nodes have been given a priority, but\n    // unreachable nodes have not been given a priority. Put them last.\n    // Presumably, it doesn't really matter what priority they get, since\n    // this shouldn't happen in real code.\n    for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n      if (!nodePriorities.containsKey(candidate)) {\n        nodePriorities.put(candidate, ++priorityCounter);\n      }\n    }\n\n    // Again, the implicit return node is always last.\n    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n  }\n",
        "begin_line": 145,
        "end_line": 186,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1803
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.handleStmtList#478",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmtList(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmtList(Node node) {\n    Node parent = node.getParent();\n    // Special case, don't add a block of empty CATCH block to the graph.\n    if (node.getType() == Token.BLOCK && parent != null &&\n        parent.getType() == Token.TRY &&\n        NodeUtil.getCatchBlock(parent) == node &&\n        !NodeUtil.hasCatchHandler(node)) {\n      return;\n    }\n\n    // A block transfer control to its first child if it is not empty.\n    Node child = node.getFirstChild();\n\n    // Function declarations are skipped since control doesn't go into that\n    // function (unless it is called)\n    while (child != null && child.getType() == Token.FUNCTION) {\n      child = child.getNext();\n    }\n\n    if (child != null) {\n      createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n      createEdge(node, Branch.UNCOND, computeFollowNode(node));\n    }\n\n    // Synthetic blocks\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.DEFAULT:\n        case Token.CASE:\n        case Token.TRY:\n          break;\n        default:\n          if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) {\n            Node next = node.getLastChild();\n            if (next != null) {\n              createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n            }\n          }\n          break;\n      }\n    }\n  }\n",
        "begin_line": 478,
        "end_line": 520,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 3
    },
    {
        "name": "DisambiguateProperties.addTypeToSkip#159",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property.addTypeToSkip(T)",
        "snippet": "    void addTypeToSkip(T type) {\n      for (T skipType : typeSystem.getTypesToSkipForType(type)) {\n        typesToSkip.add(skipType);\n        getTypes().union(skipType, type);\n      }\n    }\n",
        "begin_line": 159,
        "end_line": 164,
        "comment": " Records the given type as one to skip for this property. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardUnionFind.union#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.union(E, E)",
        "snippet": "  public E union(E a, E b) {\n    Node<E> nodeA = findRootOrCreateNode(a);\n    Node<E> nodeB = findRootOrCreateNode(b);\n\n    if (nodeA == nodeB) {\n      return nodeA.element;\n    }\n    if (nodeA.rank > nodeB.rank) {\n      nodeB.parent = nodeA;\n      nodeA.size += nodeB.size;\n      return nodeA.element;\n    }\n    nodeA.parent = nodeB;\n    if (nodeA.rank == nodeB.rank) {\n      nodeB.rank++;\n    }\n    nodeB.size += nodeA.size;\n    return nodeB.element;\n  }\n",
        "begin_line": 81,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.CheckUnreachableCode#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.CheckUnreachableCode(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  CheckUnreachableCode(AbstractCompiler compiler, CheckLevel level) {\n    this.compiler = compiler;\n    this.level = level;\n  }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.enterScope#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    new GraphReachability<Node, ControlFlowGraph.Branch>(\n        t.getControlFlowGraph()).compute(\n            t.getControlFlowGraph().getEntry().getValue());\n  }\n",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.exitScope#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.visit#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parse#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parse()",
        "snippet": "  boolean parse() {\n    int lineno;\n    int charno;\n\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n\n    state = State.SEARCHING_ANNOTATION;\n    JsDocToken token = next();\n\n    ExtractionInfo blockInfo = extractBlockComment(token);\n    token = blockInfo.token;\n\n    // If we have a block level comment, record it.\n    if (blockInfo.string.length() > 0) {\n      jsdocBuilder.recordBlockDescription(blockInfo.string);\n    }\n\n    // Parse the actual JsDoc.\n    retry: for (;;) {\n      switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            String annotationName = stream.getString();\n            Annotation annotation = annotationNames.get(annotationName);\n            if (annotation == null) {\n              parser.addWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              // Mark the beginning of the annotation.\n              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n              switch (annotation) {\n                case AUTHOR:\n                  ExtractionInfo authorInfo = extractSingleLineBlock();\n                  String author = authorInfo.string;\n\n                  if (author.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.authormissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    jsdocBuilder.addAuthor(author);\n                  }\n\n                  token = authorInfo.token;\n                  continue retry;\n\n                case CONSTANT:\n                  if (!jsdocBuilder.recordConstancy()) {\n                    parser.addWarning(\"msg.jsdoc.const\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTRUCTOR:\n                  if (!jsdocBuilder.recordConstructor()) {\n                    if (jsdocBuilder.isInterfaceRecorded()) {\n                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DEPRECATED:\n                  if (!jsdocBuilder.recordDeprecated()) {\n                    parser.addWarning(\"msg.jsdoc.deprecated\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  // Find the reason/description, if any.\n                  ExtractionInfo reasonInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String reason = reasonInfo.string;\n\n                  if (reason.length() > 0) {\n                    jsdocBuilder.recordDeprecationReason(reason);\n                  }\n\n                  token = reasonInfo.token;\n                  continue retry;\n\n                case INTERFACE:\n                  if (!jsdocBuilder.recordInterface()) {\n                    if (jsdocBuilder.isConstructorRecorded()) {\n                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DESC:\n                  if (jsdocBuilder.isDescriptionRecorded()) {\n                    parser.addWarning(\"msg.jsdoc.desc.extra\",\n                        stream.getLineno(), stream.getCharno());\n                    token = eatTokensUntilEOL();\n                    continue retry;\n                  } else {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    jsdocBuilder.recordDescription(description);\n                    token = descriptionInfo.token;\n                    continue retry;\n                  }\n\n                case FILE_OVERVIEW:\n                  ExtractionInfo fileOverviewInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.TRIM);\n\n                  String fileOverview = fileOverviewInfo.string;\n\n                  if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n                      fileOverviewJSDocInfo != null) {\n                    parser.addWarning(\"msg.jsdoc.fileoverview.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = fileOverviewInfo.token;\n                  continue retry;\n\n                case LICENSE:\n                case PRESERVE:\n                  ExtractionInfo preserveInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.PRESERVE);\n\n                  String preserve = preserveInfo.string;\n\n                  if (preserve.length() > 0) {\n                    if (fileLevelJsDocBuilder != null) {\n                      fileLevelJsDocBuilder.append(preserve);\n                    }\n                  }\n\n                  token = preserveInfo.token;\n                  continue retry;\n\n                case ENUM:\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  type = null;\n                  if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n                  }\n\n                  if (type == null) {\n                    type = createJSTypeExpression(newStringNode(\"number\"));\n                  }\n                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n                    parser.addWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case EXPORT:\n                  if (!jsdocBuilder.recordExport()) {\n                    parser.addWarning(\"msg.jsdoc.export\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTERNS:\n                  if (!jsdocBuilder.recordExterns()) {\n                    parser.addWarning(\"msg.jsdoc.externs\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case JAVA_DISPATCH:\n                  if (!jsdocBuilder.recordJavaDispatch()) {\n                    parser.addWarning(\"msg.jsdoc.javadispatch\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTENDS:\n                case IMPLEMENTS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  boolean matchingRc = false;\n\n                  if (token == JsDocToken.LC) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (token == JsDocToken.STRING) {\n                    Node typeNode = parseAndRecordTypeNameNode(\n                        token, lineno, charno, matchingRc);\n\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && !matchingRc) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                    type = createJSTypeExpression(typeNode);\n\n                    if (annotation == Annotation.EXTENDS) {\n                      if (!jsdocBuilder.recordBaseType(type)) {\n                        parser.addWarning(\n                            \"msg.jsdoc.incompat.type\", lineno, charno);\n                      }\n                    } else {\n                      Preconditions.checkState(\n                          annotation == Annotation.IMPLEMENTS);\n                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n                        parser.addWarning(\"msg.jsdoc.implements.duplicate\",\n                            lineno, charno);\n                      }\n                    }\n                    token = next();\n                    if (matchingRc) {\n                      if (token != JsDocToken.RC) {\n                        parser.addWarning(\"msg.jsdoc.missing.rc\",\n                            stream.getLineno(), stream.getCharno());\n                      }\n                    } else if (token != JsDocToken.EOL &&\n                        token != JsDocToken.EOF && token != JsDocToken.EOC) {\n                      parser.addWarning(\"msg.end.annotation.expected\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addWarning(\"msg.no.type.name\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case HIDDEN:\n                  if (!jsdocBuilder.recordHiddenness()) {\n                    parser.addWarning(\"msg.jsdoc.hidden\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_ALIAS:\n                  if (!jsdocBuilder.recordNoAlias()) {\n                    parser.addWarning(\"msg.jsdoc.noalias\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_TYPE_CHECK:\n                  if (!jsdocBuilder.recordNoTypeCheck()) {\n                    parser.addWarning(\"msg.jsdoc.nocheck\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NOT_IMPLEMENTED:\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case INHERIT_DOC:\n                case OVERRIDE:\n                  if (!jsdocBuilder.recordOverride()) {\n                    parser.addWarning(\"msg.jsdoc.override\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case THROWS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                  }\n\n                  // *Update* the token to that after the type annotation.\n                  token = current();\n\n                  // Save the throw type.\n                  jsdocBuilder.recordThrowType(type);\n\n                  // Find the throw's description (if applicable).\n                  ExtractionInfo descriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String description = descriptionInfo.string;\n\n                  if (description.length() > 0) {\n                    jsdocBuilder.recordThrowDescription(type, description);\n                  }\n\n                  token = descriptionInfo.token;\n                  continue retry;\n\n                case PARAM:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordParamTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                    skipEOLs();\n                    token = next();\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n                  }\n\n                  String name = null;\n                  boolean isBracketedParam = JsDocToken.LB == token;\n                  if (isBracketedParam) {\n                    token = next();\n                  }\n\n                  if (JsDocToken.STRING != token) {\n                    parser.addWarning(\"msg.missing.variable.name\",\n                        lineno, charno);\n                  } else {\n                    name = stream.getString();\n\n                    if (isBracketedParam) {\n                      token = next();\n\n                      // Throw out JsDocToolkit's \"default\" parameter annotation.\n                      // It makes no sense under our type system.\n                      if (JsDocToken.EQUALS == token) {\n                        token = next();\n                        if (JsDocToken.STRING == token) {\n                          token = next();\n                        }\n                      }\n\n                      if (JsDocToken.RB != token) {\n                        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n                      } else if (type != null) {\n                        // Make the type expression optional, if it isn't\n                        // already.\n                        type = JSTypeExpression.makeOptionalArg(type);\n                      }\n                    }\n\n                    // If the param name has a DOT in it, just throw it out\n                    // quietly. We do not handle the JsDocToolkit method\n                    // for handling properties of params.\n                    if (name.indexOf('.') > -1) {\n                      name = null;\n                    } else if (!jsdocBuilder.recordParameter(name, type)) {\n                      if (jsdocBuilder.hasParameter(name)) {\n                        parser.addWarning(\"msg.dup.variable.name\", name,\n                            lineno, charno);\n                      } else {\n                        parser.addWarning(\"msg.jsdoc.incompat.type\", name,\n                            lineno, charno);\n                      }\n                    }\n                  }\n\n                  if (name == null) {\n                    token = eatTokensUntilEOL(token);\n                    continue retry;\n                  }\n\n                  jsdocBuilder.markName(name, lineno, charno);\n\n                  // Find the parameter's description (if applicable).\n                  ExtractionInfo paramDescriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String paramDescription = paramDescriptionInfo.string;\n\n                  if (paramDescription.length() > 0) {\n                    jsdocBuilder.recordParameterDescription(name,\n                                                            paramDescription);\n                  }\n\n                  token = paramDescriptionInfo.token;\n                  continue retry;\n\n                case PRESERVE_TRY:\n                  if (!jsdocBuilder.recordPreserveTry()) {\n                    parser.addWarning(\"msg.jsdoc.preservertry\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PRIVATE:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                    parser.addWarning(\"msg.jsdoc.visibility.private\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PROTECTED:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                    parser.addWarning(\"msg.jsdoc.visibility.protected\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PUBLIC:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                    parser.addWarning(\"msg.jsdoc.visibility.public\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SHADOW:\n                  if (!jsdocBuilder.recordNoShadow()) {\n                    parser.addWarning(\"msg.jsdoc.noshadow\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SIDE_EFFECTS:\n                  if (!jsdocBuilder.recordNoSideEffects()) {\n                    parser.addWarning(\"msg.jsdoc.nosideeffects\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case IMPLICIT_CAST:\n                  if (!jsdocBuilder.recordImplicitCast()) {\n                    parser.addWarning(\"msg.jsdoc.implicitcast\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case SEE:\n                  ExtractionInfo referenceInfo = extractSingleLineBlock();\n                  String reference = referenceInfo.string;\n\n                  if (reference.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.seemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    jsdocBuilder.addReference(reference);\n                  }\n\n                  token = referenceInfo.token;\n                  continue retry;\n\n                case SUPPRESS:\n                  token = parseSuppressTag(next());\n                  continue retry;\n\n                case TEMPLATE:\n                  ExtractionInfo templateInfo = extractSingleLineBlock();\n                  String templateTypeName = templateInfo.string;\n\n                  if (templateTypeName.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.templatemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else if (!jsdocBuilder.recordTemplateTypeName(\n                      templateTypeName)) {\n                    parser.addWarning(\"msg.jsdoc.template.at.most.once\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  token = templateInfo.token;\n                  continue retry;\n\n                case VERSION:\n                  ExtractionInfo versionInfo = extractSingleLineBlock();\n                  String version = versionInfo.string;\n\n                  if (version.length() == 0) {\n                    parser.addWarning(\"msg.jsdoc.versionmissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    if (!jsdocBuilder.recordVersion(version)) {\n                       parser.addWarning(\"msg.jsdoc.extraversion\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n\n                  token = versionInfo.token;\n                  continue retry;\n\n                case DEFINE:\n                case RETURN:\n                case THIS:\n                case TYPE:\n                case TYPEDEF:\n                  skipEOLs();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  token = next();\n\n                  Node typeNode = parseAndRecordTypeNode(token, lineno, charno);\n\n                  if (annotation == Annotation.THIS) {\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && token != JsDocToken.LC) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                  }\n                  type = createJSTypeExpression(typeNode);\n\n                  if (type == null) {\n                    // error reported during recursive descent\n                    // recovering parsing\n                  } else {\n                    switch (annotation) {\n                      case DEFINE:\n                        if (!isValidDefineType(typeNode)) {\n                          parser.addWarning(\"msg.jsdoc.define.badtype\",\n                              lineno, charno);\n                        } else if (!jsdocBuilder.recordDefineType(type)) {\n                          parser.addWarning(\"msg.jsdoc.define\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case RETURN:\n                        if (!jsdocBuilder.recordReturnType(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                          break;\n                        }\n\n                        // *Update* the token to that after the type annotation.\n                        token = current();\n\n                        // Find the return's description (if applicable).\n                        ExtractionInfo returnDescriptionInfo =\n                            extractMultilineTextualBlock(token);\n\n                        String returnDescription = returnDescriptionInfo.string;\n\n                        if (returnDescription.length() > 0) {\n                          jsdocBuilder.recordReturnDescription(\n                              returnDescription);\n                        }\n\n                        token = returnDescriptionInfo.token;\n                        continue retry;\n\n                      case THIS:\n                        if (!jsdocBuilder.recordThisType(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPE:\n                        if (!jsdocBuilder.recordType(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPEDEF:\n                        if (!jsdocBuilder.recordTypedef(type)) {\n                          parser.addWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n                    }\n\n                    token = eatTokensUntilEOL();\n                  }\n                  continue retry;\n              }\n            }\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          continue retry;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n            continue retry;\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n            continue retry;\n          }\n      }\n\n      // next token\n      token = next();\n    }\n  }\n",
        "begin_line": 139,
        "end_line": 792,
        "comment": "\n   * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n   * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n   * {@link JsDocToken#EOC} is returned.\n   *\n   * @return {@code true} if JSDoc information was correctly parsed,\n   *     {@code false} otherwise\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1037
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.make#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(NodeTraversal t, Node n,\n      CheckLevel level, DiagnosticType type, String... arguments) {\n    return new JSError(t.getSourceName(), n.getLineno(), n.getCharno(), type,\n        level, arguments);\n  }\n",
        "begin_line": 137,
        "end_line": 141,
        "comment": "\n   * Creates a JSError during NodeTraversal.\n   *\n   * @param t Determines source file name containing current script\n   * @param n Determines the line and char position within the source file name\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1037
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.recordInterfaces#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.recordInterfaces(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.DisambiguateProperties.Property)",
        "snippet": "    @Override\n    public void recordInterfaces(JSType type, JSType relatedType,\n                                 DisambiguateProperties<JSType>.Property p) {\n      ObjectType objType = ObjectType.cast(type);\n      if (objType != null) {\n        FunctionType constructor;\n        if (objType instanceof FunctionType) {\n          constructor = (FunctionType) objType;\n        } else if (objType instanceof FunctionPrototypeType) {\n          constructor = ((FunctionPrototypeType) objType).getOwnerFunction();\n        } else {\n          constructor = objType.getConstructor();\n        }\n        while (constructor != null) {\n          for (ObjectType itype : constructor.getImplementedInterfaces()) {\n            JSType top = getTypeWithProperty(p.name, itype);\n            if (top != null) {\n              p.addType(itype, top, relatedType);\n            } else {\n              recordInterfaces(itype, relatedType, p);\n            }\n\n            // If this interface invalidated this property, return now.\n            if (p.skipRenaming) return;\n          }\n          if (constructor.isInterface() || constructor.isConstructor()) {\n            constructor = constructor.getSuperClassConstructor();\n          } else {\n            constructor = null;\n          }\n        }\n      }\n    }\n",
        "begin_line": 781,
        "end_line": 813,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1037
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.CallbackWrapper#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.CallbackWrapper(com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "    private CallbackWrapper(Callback callback) {\n      this.callback = callback;\n      if (callback instanceof ScopedCallback) {\n        scopedCallback = (ScopedCallback) callback;\n      } else {\n        scopedCallback = null;\n      }\n    }\n",
        "begin_line": 92,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.enterScopeIfActive#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.enterScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void enterScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.enterScope(t);\n      }\n    }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.exitScopeIfActive#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.exitScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void exitScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.exitScope(t);\n      }\n    }\n",
        "begin_line": 125,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionType.findPropertyType#162",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.findPropertyType(java.lang.String)",
        "snippet": "  @Override\n  public JSType findPropertyType(String propertyName) {\n    JSType propertyType = null;\n\n    for (JSType alternate : getAlternates()) {\n      // Filter out the null/undefined type.\n      if (alternate.isNullType() || alternate.isVoidType()) {\n        continue;\n      }\n\n      JSType altPropertyType = alternate.findPropertyType(propertyName);\n      if (altPropertyType == null) {\n        continue;\n      }\n\n      if (propertyType == null) {\n        propertyType = altPropertyType;\n      } else {\n        propertyType = propertyType.getLeastSupertype(altPropertyType);\n      }\n    }\n\n    return propertyType;\n  }\n",
        "begin_line": 162,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.isTypeToSkip#708",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.isTypeToSkip(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public boolean isTypeToSkip(JSType type) {\n      return type.isEnumType() || (type.autoboxesTo() != null);\n    }\n",
        "begin_line": 708,
        "end_line": 710,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.process#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public final void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 136,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getTypeWithProperty#736",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getTypeWithProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public ObjectType getTypeWithProperty(String field, JSType type) {\n      if (!(type instanceof ObjectType)) {\n        if (type.autoboxesTo() != null) {\n          type = type.autoboxesTo();\n        } else {\n          return null;\n        }\n      }\n\n      // Ignore the prototype itself at all times.\n      if (\"prototype\".equals(field)) {\n        return null;\n      }\n\n      // We look up the prototype chain to find the highest place (if any) that\n      // this appears.  This will make references to overriden properties look\n      // like references to the initial property, so they are renamed alike.\n      ObjectType foundType = null;\n      ObjectType objType = ObjectType.cast(type);\n      while (objType != null && objType.getImplicitPrototype() != objType) {\n        if (objType.hasOwnProperty(field)) {\n          foundType = objType;\n        }\n        objType = objType.getImplicitPrototype();\n      }\n      // If the property does not exist on the referenced type but the original\n      // type is an object type, see if any subtype has the property.\n        // getGreatestSubtypeWithProperty does not guarantee that the property\n        // is defined on the returned type, it just indicates that it might be,\n        // so we have to double check.\n      return foundType;\n    }\n",
        "begin_line": 736,
        "end_line": 767,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.isActive#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.isActive()",
        "snippet": "    boolean isActive() {\n      return waiting == null;\n    }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.CombinedCompilerPass#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CombinedCompilerPass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback...)",
        "snippet": "  CombinedCompilerPass(\n      AbstractCompiler compiler, Callback... callbacks) {\n    this.compiler = compiler;\n    this.callbacks = new CallbackWrapper[callbacks.length];\n    for (int i = 0; i < callbacks.length; i++) {\n      this.callbacks[i] = new CallbackWrapper(callbacks[i]);\n    }\n  }\n",
        "begin_line": 56,
        "end_line": 63,
        "comment": "\n   * Creates a combined compiler pass.\n   * @param compiler the compiler\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.shouldTraverse#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.shouldTraverseIfActive(t, n, parent);\n    }\n    // Note that this method could return false if all callbacks are inactive.\n    // This apparent optimization would make this method more expensive\n    // in the typical case where not all nodes are inactive. It is\n    // very unlikely that many all callbacks would be inactive at the same\n    // time (indeed, there are several checking passes that never return false).\n    return true;\n  }\n",
        "begin_line": 141,
        "end_line": 152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.visit#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.visitOrMaybeActivate(t, n, parent);\n    }\n  }\n",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.enterScope#161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.enterScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 161,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.exitScope#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.exitScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.processProperty#442",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.FindRenameableProperties.processProperty(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.DisambiguateProperties.Property, T, T)",
        "snippet": "    private T processProperty(\n        NodeTraversal t, Property prop, T type, T relatedType) {\n      type = typeSystem.restrictByNotNullOrUndefined(type);\n      if (prop.skipRenaming || typeSystem.isInvalidatingType(type)) {\n        return null;\n      }\n\n      Iterable<T> alternatives = typeSystem.getTypeAlternatives(type);\n      if (alternatives != null) {\n        T firstType = null;\n        for (T subType : alternatives) {\n          T lastType = processProperty(t, prop, subType, firstType);\n          if (lastType != null) {\n            firstType = firstType == null ? lastType : firstType;\n          }\n        }\n        return firstType;\n      } else {\n        T topType = typeSystem.getTypeWithProperty(prop.name, type);\n        if (typeSystem.isInvalidatingType(topType)) {\n          return null;\n        }\n        prop.addType(type, topType, relatedType);\n        return topType;\n      }\n    }\n",
        "begin_line": 442,
        "end_line": 467,
        "comment": "\n     * Processes a property, adding it to the list of properties to rename.\n     * @return a representative type for the property reference, which will be\n     *   the highest type on the prototype chain of the provided type.  In the\n     *   case of a union type, it will be the highest type on the prototype\n     *   chain of one of the members of the union.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardUnionFind.add#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.add(E)",
        "snippet": "  public void add(E e) {\n    union(e, e);\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.addType#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property.addType(T, T, T)",
        "snippet": "    boolean addType(T type, T top, T relatedType) {\n      checkState(!skipRenaming, \"Attempt to record skipped property: %s\", name);\n      if (typeSystem.isInvalidatingType(top)) {\n        invalidate();\n        return false;\n      } else {\n        if (typeSystem.isTypeToSkip(top)) {\n          addTypeToSkip(top);\n        }\n\n        if (relatedType == null) {\n          getTypes().add(top);\n        } else {\n          getTypes().union(top, relatedType);\n        }\n        typeSystem.recordInterfaces(type, top, this);\n        return true;\n      }\n    }\n",
        "begin_line": 138,
        "end_line": 156,
        "comment": "\n     * Record that this property is referenced from this type.\n     * @return true if the type was recorded for this property, else false,\n     *     which would happen if the type was invalidating.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.scheduleRenaming#241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property.scheduleRenaming(com.google.javascript.rhino.Node, T)",
        "snippet": "    boolean scheduleRenaming(Node node, T type) {\n      if (!skipRenaming) {\n        if (typeSystem.isInvalidatingType(type)) {\n          invalidate();\n          return false;\n        }\n        renameNodes.add(node);\n        rootTypes.put(node, type);\n      }\n      return true;\n    }\n",
        "begin_line": 241,
        "end_line": 251,
        "comment": "\n     * Schedule the node to potentially be renamed.\n     * @param node the node to rename\n     * @param type the highest type in the prototype chain for which the\n     *     property is defined\n     * @return True if type was accepted without invalidation or if the property\n     *     was already invalidated.  False if this property was invalidated this\n     *     time.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getTypeAlternatives#716",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getTypeAlternatives(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public Iterable<JSType> getTypeAlternatives(JSType type) {\n      if (type.isUnionType()) {\n        return ((UnionType) type).getAlternates();\n      } else {\n        ObjectType objType = type.toObjectType();\n        if (objType != null &&\n            objType.getConstructor() != null &&\n            objType.getConstructor().isInterface()) {\n          List<JSType> list = Lists.newArrayList();\n          for (FunctionType impl\n                   : registry.getDirectImplementors(objType)) {\n            list.add(impl.getInstanceType());\n          }\n          return list;\n        } else {\n          return null;\n        }\n      }\n    }\n",
        "begin_line": 716,
        "end_line": 734,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0924
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardUnionFind.Node#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.Node.Node(E)",
        "snippet": "    Node(E element) {\n      this.parent = this;\n      this.element = element;\n    }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardUnionFind.StandardUnionFind#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.StandardUnionFind()",
        "snippet": "  public StandardUnionFind() {\n  }\n",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Creates an empty UnionFind structure. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardUnionFind.findRootOrCreateNode#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.findRootOrCreateNode(E)",
        "snippet": "  private Node<E> findRootOrCreateNode(E e) {\n    Node<E> node = elmap.get(e);\n    if (node != null) {\n      return findRoot(node);\n    }\n    node = new Node<E>(e);\n    elmap.put(e, node);\n    return node;\n  }\n",
        "begin_line": 140,
        "end_line": 148,
        "comment": "\n   * If e is already in a non-trivial equivalence class, that is, a class with\n   * more than two elements, then return the {@link Node} corresponding to the\n   * representative element. Otherwise, if e sits in an equivalence class by\n   * itself, then create a {@link Node}, put it into elmap and return it.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardUnionFind.findRoot#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.findRoot(com.google.javascript.jscomp.graph.StandardUnionFind.Node<E>)",
        "snippet": "  private Node<E> findRoot(Node<E> node) {\n    if (node.parent != node) {\n      node.parent = findRoot(node.parent);\n    }\n    return node.parent;\n  }\n",
        "begin_line": 157,
        "end_line": 162,
        "comment": "\n   * Given a {@link Node}, walk the parent field as far as possible, until\n   * reaching the root, which is the {@link Node} for the current\n   * representative of this equivalence class. To achieve low runtime\n   * complexity, also compress the path, by making each node a direct child of\n   * the root.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getTypes#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property.getTypes()",
        "snippet": "    UnionFind<T> getTypes() {\n      if (types == null) {\n        types = new StandardUnionFind<T>();\n      }\n      return types;\n    }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": " Returns the types on which this field is referenced. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.invalidate#225",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property.invalidate()",
        "snippet": "    boolean invalidate() {\n      boolean changed = !skipRenaming;\n      skipRenaming = true;\n      types = null;\n      return changed;\n    }\n",
        "begin_line": 225,
        "end_line": 230,
        "comment": "\n     * Invalidates a field from renaming.  Used for field references on an\n     * object with unknown type.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.isInvalidatingType#670",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.isInvalidatingType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public boolean isInvalidatingType(JSType type) {\n      if (type == null || invalidatingTypes.contains(type) ||\n          (type.isNamedType() && type.isUnknownType())) {\n        return true;\n      }\n\n      ObjectType objType = ObjectType.cast(type);\n      return objType != null && !objType.hasReferenceName();\n    }\n",
        "begin_line": 670,
        "end_line": 678,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.renameProperties#471",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.renameProperties()",
        "snippet": "  void renameProperties() {\n    int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,\n        instancesSkipped = 0, singleTypeProps = 0;\n\n    for (Property prop : properties.values()) {\n      if (prop.shouldRename()) {\n        Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name);\n\n        ++propsRenamed;\n        prop.expandTypesToSkip();\n        UnionFind<T> types = prop.getTypes();\n        for (Node node : prop.renameNodes) {\n          T rootType = prop.rootTypes.get(node);\n          if (prop.shouldRename(rootType)) {\n            String newName = propNames.get(rootType);\n            node.setString(newName);\n            compiler.reportCodeChange();\n            ++instancesRenamed;\n          } else {\n            ++instancesSkipped;\n          }\n        }\n      } else {\n        if (prop.skipRenaming) {\n          ++propsSkipped;\n        } else {\n          ++singleTypeProps;\n        }\n      }\n    }\n    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n                + propsRenamed + \" properties.\");\n    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                + \"properties, \" + propsSkipped + \" instances of properties \"\n                + \"that were skipped for specific types and \" + singleTypeProps\n                + \" properties that were referenced from only one type.\");\n  }\n",
        "begin_line": 471,
        "end_line": 507,
        "comment": " Renames all properties with references on more than one type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getFunctionScope#658",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getFunctionScope(com.google.javascript.rhino.Node)",
        "snippet": "    @Override public StaticScope<JSType> getFunctionScope(Node node) {\n      return null;\n    }\n",
        "begin_line": 658,
        "end_line": 660,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0902
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.enterScope#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.AbstractScopingCallback.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    public void enterScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        scopes.push(typeSystem.getRootScope());\n      } else {\n        scopes.push(typeSystem.getFunctionScope(t.getScopeRoot()));\n      }\n    }\n",
        "begin_line": 332,
        "end_line": 338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0902
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.Property#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property.Property(java.lang.String)",
        "snippet": "    Property(String name) {\n      this.name = name;\n    }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.shouldRename#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.Property.shouldRename()",
        "snippet": "    boolean shouldRename() {\n      return !skipRenaming && types != null\n          && types.allEquivalenceClasses().size() > 1;\n    }\n",
        "begin_line": 207,
        "end_line": 210,
        "comment": " Returns true if any instance of this property should be renamed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.JSTypeSystem#638",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.JSTypeSystem(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    public JSTypeSystem(AbstractCompiler compiler) {\n      registry = compiler.getTypeRegistry();\n      invalidatingTypes = Sets.newHashSet(\n          registry.getNativeType(JSTypeNative.ALL_TYPE),\n          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n          registry.getNativeType(JSTypeNative.NO_TYPE),\n          registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE),\n          registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n\n    }\n",
        "begin_line": 638,
        "end_line": 649,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getRootScope#656",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getRootScope()",
        "snippet": "    @Override public StaticScope<JSType> getRootScope() { return null; }\n",
        "begin_line": 656,
        "end_line": 656,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getType#662",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getType(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "    @Override public JSType getType(\n        StaticScope<JSType> scope, Node node, String prop) {\n      if (node.getJSType() == null) {\n        return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n      }\n      return node.getJSType();\n    }\n",
        "begin_line": 662,
        "end_line": 668,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.restrictByNotNullOrUndefined#712",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.restrictByNotNullOrUndefined(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    @Override public JSType restrictByNotNullOrUndefined(JSType type) {\n      return type.restrictByNotNullOrUndefined();\n    }\n",
        "begin_line": 712,
        "end_line": 714,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.visit#382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.FindRenameableProperties.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.GETPROP) {\n        handleGetProp(t, n);\n      } else if (n.getType() == Token.OBJECTLIT) {\n        handleObjectLit(t, n);\n      }\n    }\n",
        "begin_line": 382,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.handleGetProp#394",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.FindRenameableProperties.handleGetProp(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "    private void handleGetProp(NodeTraversal t, Node n) {\n      String name = n.getLastChild().getString();\n      T type = typeSystem.getType(getScope(), n.getFirstChild(), name);\n\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(n.getLastChild(),\n                                 processProperty(t, prop, type, null))) {\n        if (showInvalidationWarnings) {\n          compiler.report(JSError.make(\n              t.getSourceName(), n, INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()), n.toString()));\n        }\n      }\n    }\n",
        "begin_line": 394,
        "end_line": 407,
        "comment": "\n     * Processes a GETPROP node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.shouldTraverse#328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.AbstractScopingCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.exitScope#340",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.AbstractScopingCallback.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    public void exitScope(NodeTraversal t) {\n      scopes.pop();\n    }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getScope#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.AbstractScopingCallback.getScope()",
        "snippet": "    protected StaticScope<T> getScope() {\n      return scopes.peek();\n    }\n",
        "begin_line": 345,
        "end_line": 347,
        "comment": " Returns the current scope at this point in the file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.forJSTypeSystem#256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static DisambiguateProperties<JSType> forJSTypeSystem(\n      AbstractCompiler compiler) {\n    return new DisambiguateProperties<JSType>(\n        compiler, new JSTypeSystem(compiler));\n  }\n",
        "begin_line": 256,
        "end_line": 260,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.DisambiguateProperties#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.DisambiguateProperties(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.DisambiguateProperties.TypeSystem<T>)",
        "snippet": "  private DisambiguateProperties(AbstractCompiler compiler,\n                                 TypeSystem<T> typeSystem) {\n    this.compiler = compiler;\n    this.typeSystem = typeSystem;\n  }\n",
        "begin_line": 272,
        "end_line": 276,
        "comment": "\n   * This constructor should only be called by one of the helper functions\n   * above for either the JSType system, or the concrete type system.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.process#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void process(Node externs, Node root) {\n    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {\n      addInvalidatingType(mis.typeA);\n      addInvalidatingType(mis.typeB);\n    }\n\n    StaticScope<T> scope = typeSystem.getRootScope();\n    NodeTraversal.traverse(compiler, externs, new FindExternProperties());\n    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());\n    renameProperties();\n  }\n",
        "begin_line": 278,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "DisambiguateProperties.getProperty#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.getProperty(java.lang.String)",
        "snippet": "  protected Property getProperty(String name) {\n    if (!properties.containsKey(name)) {\n      properties.put(name, new Property(name));\n    }\n    return properties.get(name);\n  }\n",
        "begin_line": 311,
        "end_line": 316,
        "comment": " Returns the property for the given name, creating it if necessary. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.parse#1022",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parse(com.google.javascript.jscomp.JSSourceFile)",
        "snippet": "  public Node parse(JSSourceFile file) {\n    addToDebugLog(\"Parsing: \" + file.getName());\n    return new JsAst(file).getAstRoot(this);\n  }\n",
        "begin_line": 1022,
        "end_line": 1025,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.parseSyntheticCode#1035",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseSyntheticCode(java.lang.String, java.lang.String)",
        "snippet": "  @Override\n  Node parseSyntheticCode(String fileName, String js) {\n    return parse(JSSourceFile.fromCode(fileName, js));\n  }\n",
        "begin_line": 1035,
        "end_line": 1038,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0891
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.toString#654",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n      return \"Function\";\n    }\n\n    StringBuilder b = new StringBuilder(32);\n    b.append(\"function (\");\n    int paramNum = (call == null || call.parameters == null) ?\n        0 : call.parameters.getChildCount();\n    boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();\n    if (hasKnownTypeOfThis) {\n      b.append(\"this:\");\n      b.append(typeOfThis.toString());\n    }\n    if (paramNum > 0) {\n      if (hasKnownTypeOfThis) {\n        b.append(\", \");\n      }\n      Node p = call.parameters.getFirstChild();\n      if (p.isVarArgs()) {\n        appendVarArgsString(b, p.getJSType());\n      } else {\n        b.append(p.getJSType().toString());\n      }\n      p = p.getNext();\n      while (p != null) {\n        b.append(\", \");\n        if (p.isVarArgs()) {\n          appendVarArgsString(b, p.getJSType());\n        } else {\n          b.append(p.getJSType().toString());\n        }\n        p = p.getNext();\n      }\n    }\n    b.append(\")\");\n    if (call != null && call.returnType != null) {\n      b.append(\": \");\n      b.append(call.returnType);\n    }\n    return b.toString();\n  }\n",
        "begin_line": 654,
        "end_line": 696,
        "comment": "\n   * Informally, a function is represented by\n   * {@code function (params): returnType} where the {@code params} is a comma\n   * separated list of types, the first one being a special\n   * {@code this:T} if the function expects a known type for {@code this}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.088
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.GraphReachability#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.GraphReachability(com.google.javascript.jscomp.graph.DiGraph<N, E>)",
        "snippet": "  public GraphReachability(DiGraph<N, E> graph) {\n    this.graph = graph;\n  }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.088
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.compute#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.compute(N)",
        "snippet": "  public void compute(N entry) {\n    graph.clearNodeAnnotations();\n    graph.getNode(entry).setAnnotation(REACHABLE);\n    FixedPointGraphTraversal.newTraversal(this)\n        .computeFixedPoint(graph, entry);\n  }\n",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.088
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.traverseEdge#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.traverseEdge(N, E, N)",
        "snippet": "  @Override\n  public boolean traverseEdge(N source, E e, N destination) {\n    if (graph.getNode(source).getAnnotation() == REACHABLE) {\n      GraphNode<N, E> destNode = graph.getNode(destination);\n      if (destNode.getAnnotation() != REACHABLE) {\n        destNode.setAnnotation(REACHABLE);\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 58,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.088
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>, N)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph, N entry) {\n    Set<N> entrySet = Sets.newHashSet();\n    entrySet.add(entry);\n    computeFixedPoint(graph, entrySet);\n  }\n",
        "begin_line": 82,
        "end_line": 86,
        "comment": "\n   * Compute a fixed point for the given graph, entering from the given node.\n   * @param graph The graph to traverse.\n   * @param entry The node to begin traversing from.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.088
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.addChildrenToFront#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildrenToFront(com.google.javascript.rhino.Node)",
        "snippet": "    public void addChildrenToFront(Node children) {\n        for (Node child = children; child != null; child = child.next) {\n          Preconditions.checkArgument(child.parent == null);\n          child.parent = this;\n        }\n        Node lastSib = children.getLastSibling();\n        lastSib.next = first;\n        first = children;\n        if (last == null) {\n            last = lastSib;\n        }\n    }\n",
        "begin_line": 591,
        "end_line": 602,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0833
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTypeNormalizer.normalizeBlocks#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.normalizeBlocks(com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeBlocks(Node n) {\n    if (NodeUtil.isControlStructure(n)\n        && n.getType() != Token.LABEL\n        && n.getType() != Token.SWITCH) {\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (NodeUtil.isControlStructureCodeBlock(n,c) &&\n            c.getType() != Token.BLOCK) {\n          Node newBlock = new Node(Token.BLOCK);\n          n.replaceChild(c, newBlock);\n          if (c.getType() != Token.EMPTY) {\n            newBlock.addChildrenToFront(c);\n          } else {\n            newBlock.setWasEmptyNode(true);\n          }\n          c = newBlock;\n          reportChange();\n        }\n      }\n    }\n  }\n",
        "begin_line": 129,
        "end_line": 148,
        "comment": "\n   * Add blocks to IF, WHILE, DO, etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0833
        },
        "num_failing_tests": 3
    },
    {
        "name": "GoogleCodingConvention.isConstant#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstant(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstant(String name) {\n    if (name.length() <= 1) {\n      return false;\n    }\n\n    // In compiled code, '$' is often a namespace delimiter. To allow inlining\n    // of namespaced constants, we strip off any namespaces here.\n    int pos = name.lastIndexOf('$');\n    if (pos >= 0) {\n      name = name.substring(pos + 1);\n      if (name.length() == 0) {\n        return false;\n      }\n    }\n\n    if (!Character.isUpperCase(name.charAt(0))) {\n      return false;\n    }\n\n    // hack way of checking that there aren't any lower-case letters\n    return name.toUpperCase().equals(name);\n  }\n",
        "begin_line": 59,
        "end_line": 81,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>This enforces the Google const name convention, that the first character\n   * after the last $ must be an upper-case letter and all subsequent letters\n   * must be upper case. The name must be at least 2 characters long.\n   *\n   * <p>Examples:\n   * <pre>\n   *      aaa          Not constant - lower-case letters in the name\n   *      A            Not constant - too short\n   *      goog$A       Constant - letters after the $ are upper-case.\n   *      AA17         Constant - digits can appear after the first letter\n   *      goog$7A      Not constant - first character after the $ must be\n   *                   upper case.\n   *      $A           Constant - doesn't have to be anything in front of the $\n   * </pre>\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.ClosureCodingConvention": ""
        },
        "susp": {
            "ochiai_susp": 0.0833
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.getScopeRoot#594",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
        "snippet": "  public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }\n",
        "begin_line": 594,
        "end_line": 600,
        "comment": " Returns the current scope's root. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0814
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeCheck.getJSType#1609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.getJSType(com.google.javascript.rhino.Node)",
        "snippet": "  private JSType getJSType(Node n) {\n    JSType jsType = n.getJSType();\n    if (jsType == null) {\n      // TODO(nicksantos): This branch indicates a compiler bug, not worthy of\n      // halting the compilation but we should log this and analyze to track\n      // down why it happens. This is not critical and will be resolved over\n      // time as the type checker is extended.\n      return getNativeType(UNKNOWN_TYPE);\n    } else {\n      return jsType;\n    }\n  }\n",
        "begin_line": 1609,
        "end_line": 1620,
        "comment": "\n   * This method gets the JSType from the Node argument and verifies that it is\n   * present.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0808
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processScope#694",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope)",
        "snippet": "    @Override\n    Node processScope(Scope scopeNode) {\n      return processGeneric(scopeNode);\n    }\n",
        "begin_line": 694,
        "end_line": 697,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0803
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionPrototypeType.hasReferenceName#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return ownerFunction != null && ownerFunction.hasReferenceName();\n  }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0801
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.addToDebugLog#1506",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addToDebugLog(java.lang.String)",
        "snippet": "  @Override\n  void addToDebugLog(String str) {\n    debugLog_.append(str);\n    debugLog_.append('\\n');\n    logger_.fine(str);\n  }\n",
        "begin_line": 1506,
        "end_line": 1511,
        "comment": " Called from the compiler passes, adds debug info ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0786
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>, java.util.Set<N>)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph, Set<N> entrySet) {\n    int cycleCount = 0;\n    long nodeCount = graph.getNodes().size();\n\n    // Choose a bail-out heuristically in case the computation\n    // doesn't converge.\n    long maxIterations = Math.max(nodeCount * nodeCount * nodeCount, 100);\n\n    // Use a LinkedHashSet, so that the traversal is deterministic.\n    LinkedHashSet<DiGraphNode<N, E>> workSet =\n        Sets.newLinkedHashSet();\n    for (N n : entrySet) {\n      workSet.add(graph.getDirectedGraphNode(n));\n    }\n    for (; !workSet.isEmpty() && cycleCount < maxIterations; cycleCount++) {\n      // For every out edge in the workSet, traverse that edge. If that\n      // edge updates the state of the graph, then add the destination\n      // node to the resultSet, so that we can update all of its out edges\n      // on the next iteration.\n      DiGraphNode<N, E> source = workSet.iterator().next();\n      N sourceValue = source.getValue();\n\n      workSet.remove(source);\n\n      List<DiGraphEdge<N, E>> outEdges = source.getOutEdges();\n      for (DiGraphEdge<N, E> edge : outEdges) {\n        N destNode = edge.getDestination().getValue();\n        if (callback.traverseEdge(sourceValue, edge.getValue(), destNode)) {\n          workSet.add(edge.getDestination());\n        }\n      }\n    }\n\n    Preconditions.checkState(cycleCount != maxIterations,\n        NON_HALTING_ERROR_MSG);\n  }\n",
        "begin_line": 93,
        "end_line": 128,
        "comment": "\n   * Compute a fixed point for the given graph, entering from the given nodes.\n   * @param graph The graph to traverse.\n   * @param entrySet The nodes to begin traversing from.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0778
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.toString#320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getReferenceName();\n  }\n",
        "begin_line": 320,
        "end_line": 323,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0765
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNamedType#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNamedType()",
        "snippet": "  public boolean isNamedType() {\n    return false;\n  }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0739
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getScope#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getScope()",
        "snippet": "    Scope getScope() {\n      return scope;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n     * Gets the scope where this variable is declared.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0727
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.visit#1264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.CATCH:\n        case Token.VAR:\n          define(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 1264,
        "end_line": 1286,
        "comment": "\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0722
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnknownType.toString#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getReferenceName();\n  }\n",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnknownType.getReferenceName#170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return isChecked ? \"??\" : \"?\";\n  }\n",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "Graph.clearNodeAnnotations#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.clearNodeAnnotations()",
        "snippet": "  public final void clearNodeAnnotations() {\n    for (GraphNode<N, E> n : getNodes()) {\n      n.setAnnotation(null);\n    }\n  }\n",
        "begin_line": 207,
        "end_line": 211,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionType.toString#372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.toString()",
        "snippet": "  @Override public String toString() {\n    StringBuilder result = new StringBuilder();\n    boolean firstAlternate = true;\n\n    result.append(\"(\");\n    SortedSet<JSType> sorted = new TreeSet<JSType>(ALPHA);\n    sorted.addAll(alternates);\n    for (JSType t : sorted) {\n      if (!firstAlternate) {\n        result.append(\"|\");\n      }\n      result.append(t.toString());\n      firstAlternate = false;\n    }\n    result.append(\")\");\n    return result.toString();\n  }\n",
        "begin_line": 372,
        "end_line": 388,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.compare#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.Anonymous-19765b1f-bb6c-406e-90ba-ab7fcfbbcb71.compare(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getLastSibling#559",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastSibling()",
        "snippet": "    public Node getLastSibling() {\n        Node n = this;\n        while (n.next != null) {\n            n = n.next;\n        }\n        return n;\n    }\n",
        "begin_line": 559,
        "end_line": 565,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0695
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoObjectType.hashCode#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 288,
        "end_line": 291,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.069
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isControlStructure#932",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 932,
        "end_line": 949,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0671
        },
        "num_failing_tests": 3
    },
    {
        "name": "BasicErrorManager.report#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.report(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "  public void report(CheckLevel level, JSError error) {\n    if (messages.add(new ErrorWithLevel(error, level))) {\n      if (level == CheckLevel.ERROR) {\n        errorCount++;\n      } else if (level == CheckLevel.WARNING) {\n        warningCount++;\n      }\n    }\n  }\n",
        "begin_line": 46,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0671
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeValidator.getMismatches#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "signature": "com.google.javascript.jscomp.TypeValidator.getMismatches()",
        "snippet": "  Iterable<TypeMismatch> getMismatches() {\n    return mismatches;\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n   * Gets a list of type violations.\n   *\n   * For each violation, one element is the expected type and the other is\n   * the type that is actually found. Order is not signficant.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0667
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.isNullType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.isNullType()",
        "snippet": "  @Override\n  public boolean isNullType() {\n    return true;\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isImplicitPrototype#383",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.equals(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 383,
        "end_line": 392,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0612
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.replaceChild#672",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void replaceChild(Node child, Node newChild) {\n        Preconditions.checkArgument(newChild.next == null,\n            \"The new child node has siblings.\");\n        Preconditions.checkArgument(newChild.parent == null,\n            \"The new child node already has a parent.\");\n\n        // Copy over important information.\n        newChild.copyInformationFrom(child);\n\n        newChild.next = child.next;\n        newChild.parent = this;\n        if (child == first) {\n            first = newChild;\n        } else {\n            Node prev = getChildBefore(child);\n            prev.next = newChild;\n        }\n        if (child == last)\n            last = newChild;\n        child.next = null;\n        child.parent = null;\n    }\n",
        "begin_line": 672,
        "end_line": 693,
        "comment": "\n     * Detaches child from Node and replaces it with newChild.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0602
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getControlFlowGraph#583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getControlFlowGraph()",
        "snippet": "  public ControlFlowGraph<Node> getControlFlowGraph() {\n    if (cfgs.peek() == null) {\n      ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);\n      cfa.process(null, getScopeRoot());\n      cfgs.pop();\n      cfgs.push(cfa.getCfg());\n    }\n    return cfgs.peek();\n  }\n",
        "begin_line": 583,
        "end_line": 591,
        "comment": " Gets the control flow graph for the current JS scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0602
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processGeneric#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n) {\n      Node node = new Node(transformTokenType(n.getType()));\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 284,
        "end_line": 291,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.06
        },
        "num_failing_tests": 3
    },
    {
        "name": "TypedScopeCreator.resolveStubDeclarations#1138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.resolveStubDeclarations()",
        "snippet": "    private void resolveStubDeclarations() {\n      for (StubDeclaration stub : stubDeclarations) {\n        Node n = stub.node;\n        Node parent = n.getParent();\n        String qName = n.getQualifiedName();\n        String propName = n.getLastChild().getString();\n        String ownerName = stub.ownerName;\n        boolean isExtern = stub.isExtern;\n\n        if (scope.isDeclared(qName, false)) {\n          continue;\n        }\n\n        // If we see a stub property, make sure to register this property\n        // in the type registry.\n        ObjectType ownerType = getObjectSlot(ownerName);\n        ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);\n        defineSlot(n, parent, unknownType, true);\n\n        if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType())) {\n          // If this is a stub for a prototype, just declare it\n          // as an unknown type. These are seen often in externs.\n          ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);\n        } else {\n          typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);\n        }\n      }\n    }\n",
        "begin_line": 1138,
        "end_line": 1168,
        "comment": "\n     * Resolve any stub delcarations to unknown types if we could not\n     * find types for them during traversal.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0592
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.dereferencePointer#946",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.dereferencePointer(com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.getType() == Token.NAME) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = scope.createChildFlowScope();\n        redeclare(scope, n.getString(), narrowed);\n      }\n    }\n    return scope;\n  }\n",
        "begin_line": 946,
        "end_line": 956,
        "comment": "\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0589
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.getJSType#1192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.getJSType(com.google.javascript.rhino.Node)",
        "snippet": "  private JSType getJSType(Node n) {\n    JSType jsType = n.getJSType();\n    if (jsType == null) {\n      // TODO(nicksantos): This branch indicates a compiler bug, not worthy of\n      // halting the compilation but we should log this and analyze to track\n      // down why it happens. This is not critical and will be resolved over\n      // time as the type checker is extended.\n      return getNativeType(UNKNOWN_TYPE);\n    } else {\n      return jsType;\n    }\n  }\n",
        "begin_line": 1192,
        "end_line": 1203,
        "comment": "\n   * This method gets the JSType from the Node argument and verifies that it is\n   * present.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0577
        },
        "num_failing_tests": 1
    },
    {
        "name": "Graph.connectIfNotFound#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.connectIfNotFound(N, E, N)",
        "snippet": "  public final void connectIfNotFound(N n1, E edge, N n2) {\n    GraphNode<N, E> node1 = getNode(n1);\n    GraphNode<N, E> node2 = getNode(n2);\n    if (node1 == null) {\n      throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    if (node2 == null) {\n      throw new IllegalArgumentException(n2 + \" does not exist in graph\");\n    }\n    List<GraphEdge<N, E>> edgeList = getEdges(n1, n2);\n    for (GraphEdge<N, E> e : edgeList) {\n      // Check == first to short circuit nulls.\n      if (e.getValue() == edge || e.getValue().equals(edge)) {\n        return;\n      }\n    }\n    connect(n1, edge, n2);\n  }\n",
        "begin_line": 121,
        "end_line": 138,
        "comment": "\n   * Connects two nodes in the graph with an edge if such edge does not already\n   * exists between the nodes.\n   *\n   * @param n1 First node.\n   * @param edge The edge.\n   * @param n2 Second node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0571
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphEdges#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphEdges(N, N)",
        "snippet": "  @Override\n  public List<DiGraphEdge<N, E>> getDirectedGraphEdges(N n1, N n2) {\n    DiGraphNode<N, E> dNode1 = nodes.get(n1);\n    if (dNode1 == null) {\n      throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    DiGraphNode<N, E> dNode2 = nodes.get(n2);\n    if (dNode2 == null) {\n      throw new IllegalArgumentException(n1 + \" does not exist in graph\");\n    }\n    List<DiGraphEdge<N, E>> edges = Lists.newArrayList();\n    for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() == dNode2) {\n        edges.add(outEdge);\n      }\n    }\n    return edges;\n  }\n",
        "begin_line": 173,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.057
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.isNullType#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNullType()",
        "snippet": "  public boolean isNullType() {\n    return false;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0566
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.FixedPointGraphTraversal#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.FixedPointGraphTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<N, E>)",
        "snippet": "  public FixedPointGraphTraversal(EdgeCallback<N, E> callback) {\n    this.callback = callback;\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a new traversal.\n   * @param callback A callback for updating the state of the graph each\n   *     time an edge is traversed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.newTraversal#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.newTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<NODE, EDGE>)",
        "snippet": "  public static <NODE, EDGE> FixedPointGraphTraversal<NODE, EDGE> newTraversal(\n      EdgeCallback<NODE, EDGE> callback) {\n    return new FixedPointGraphTraversal<NODE, EDGE>(callback);\n  }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\n   * Helper method for creating new traversals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.handleIf#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleIf(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleIf(Node node) {\n    Node thenBlock = node.getFirstChild().getNext();\n    Node elseBlock = thenBlock.getNext();\n    createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));\n\n    if (elseBlock == null) {\n      createEdge(node, Branch.ON_FALSE,\n          computeFollowNode(node)); // not taken branch\n    } else {\n      createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock));\n    }\n    connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));\n  }\n",
        "begin_line": 353,
        "end_line": 366,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0548
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionPrototypeType.isFunctionPrototypeType#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public boolean isFunctionPrototypeType() {\n    return true;\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0543
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.inferInheritance#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferInheritance(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info) {\n    if (info != null) {\n      isConstructor = info.isConstructor();\n      isInterface = info.isInterface();\n\n      // base type\n      if (info.hasBaseType()) {\n        if (isConstructor || isInterface) {\n          baseType = ObjectType.cast(info.getBaseType().evaluate(scope));\n          if (baseType == null) {\n            reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());\n          }\n        } else {\n          reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n        }\n      }\n\n      // implemented interfaces\n      if (isConstructor || isInterface) {\n        implementedInterfaces = Lists.newArrayList();\n        for (JSTypeExpression t : info.getImplementedInterfaces()) {\n          ObjectType interType = ObjectType.cast(t.evaluate(scope));\n          if (interType != null) {\n            implementedInterfaces.add(interType);\n          } else {\n            reportError(BAD_IMPLEMENTED_TYPE, fnName);\n          }\n        }\n        if (baseType != null) {\n          JSType maybeFunctionType = baseType.getConstructor();\n          if (maybeFunctionType instanceof FunctionType) {\n            FunctionType functionType = baseType.getConstructor();\n            Iterables.addAll(\n                implementedInterfaces,\n                functionType.getImplementedInterfaces());\n          }\n        }\n      } else if (info.getImplementedInterfaceCount() > 0) {\n        reportWarning(IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n      }\n    }\n\n    return this;\n  }\n",
        "begin_line": 211,
        "end_line": 254,
        "comment": "\n   * Infer the role of the function (whether it's a constructor or interface)\n   * and what it inherits from in JSDocInfo.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0541
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getNodes#285",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodes()",
        "snippet": "  @Override\n  public List<GraphNode<N, E>> getNodes() {\n    List<GraphNode<N, E>> list = Lists.newArrayList();\n    list.addAll(nodes.values());\n    return list;\n  }\n",
        "begin_line": 285,
        "end_line": 290,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0534
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.maybeSetBaseType#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.maybeSetBaseType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void maybeSetBaseType(FunctionType fnType) {\n    if (baseType != null) {\n      fnType.setPrototypeBasedOn(baseType);\n    }\n  }\n",
        "begin_line": 493,
        "end_line": 497,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0531
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setCodingConvention#868",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 868,
        "end_line": 870,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0531
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeCheck.isPropertyTest#1204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.isPropertyTest(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isPropertyTest(Node getProp) {\n    Node parent = getProp.getParent();\n    switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n    }\n    return false;\n  }\n",
        "begin_line": 1204,
        "end_line": 1226,
        "comment": "\n   * Determines whether this node is testing for the existence of a property.\n   * If true, we will not emit warnings about a missing property.\n   *\n   * @param getProp The GETPROP being tested.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0525
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeProp#738",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "    public void removeProp(int propType)\n    {\n        PropListItem x = propListHead;\n        if (x != null) {\n            PropListItem prev = null;\n            while (x.type != propType) {\n                prev = x;\n                x = x.next;\n                if (x == null) { return; }\n            }\n            if (prev == null) {\n                propListHead = x.next;\n            } else {\n                prev.next = x.next;\n            }\n        }\n    }\n",
        "begin_line": 738,
        "end_line": 754,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0516
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordBaseType#466",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordBaseType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordBaseType(JSTypeExpression jsType) {\n    if (jsType != null && !hasAnySingletonTypeTags() &&\n        !currentInfo.hasBaseType()) {\n      currentInfo.setBaseType(jsType);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 466,
        "end_line": 475,
        "comment": "\n   * Records a base type.\n   *\n   * @return {@code true} if the base type was recorded and {@code false}\n   *     if it was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0514
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setBaseType#922",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setBaseType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setBaseType(JSTypeExpression type) {\n    lazyInitInfo();\n    info.baseType = type;\n  }\n",
        "begin_line": 922,
        "end_line": 925,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0514
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildBefore#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "    public Node getChildBefore(Node child) {\n        if (child == first)\n            return null;\n        Node n = first;\n        while (n.next != child) {\n            n = n.next;\n            if (n == null)\n                throw new RuntimeException(\"node is not a child\");\n        }\n        return n;\n    }\n",
        "begin_line": 538,
        "end_line": 548,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0509
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.putProp#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "    public void putProp(int propType, Object prop)\n    {\n        if (prop == null) {\n            removeProp(propType);\n        } else {\n            PropListItem item = ensureProperty(propType);\n            item.objectValue = prop;\n        }\n    }\n",
        "begin_line": 781,
        "end_line": 789,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.copyInformationFrom#1835",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFrom(com.google.javascript.rhino.Node)",
        "snippet": "    public void copyInformationFrom(Node other) {\n        if (getProp(ORIGINALNAME_PROP) == null) {\n            putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n        }\n\n        if (getProp(SOURCEFILE_PROP) == null) {\n            putProp(SOURCEFILE_PROP, other.getProp(SOURCEFILE_PROP));\n            sourcePosition = other.sourcePosition;\n        }\n    }\n",
        "begin_line": 1835,
        "end_line": 1844,
        "comment": "\n     * Copies source file and name information from the other\n     * node given to the current node. Used for maintaining\n     * debug information across node append and remove operations.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasChildren#522",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "    public boolean hasChildren() {\n        return first != null;\n    }\n",
        "begin_line": 522,
        "end_line": 524,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0507
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.cloneTree#1814",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "    public Node cloneTree() {\n        Node result = cloneNode();\n        for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n            Node n2clone = n2.cloneTree();\n            n2clone.parent = result;\n            if (result.last != null) {\n                result.last.next = n2clone;\n            }\n            if (result.first == null) {\n                result.first = n2clone;\n            }\n            result.last = n2clone;\n        }\n        return result;\n    }\n",
        "begin_line": 1814,
        "end_line": 1828,
        "comment": "\n     * @return A detached clone of the Node and all its children.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0503
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypedScopeCreator.StubDeclaration#1178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.StubDeclaration.StubDeclaration(com.google.javascript.rhino.Node, boolean, java.lang.String)",
        "snippet": "      private StubDeclaration(Node node, boolean isExtern, String ownerName) {\n        this.node = node;\n        this.isExtern = isExtern;\n        this.ownerName = ownerName;\n      }\n",
        "begin_line": 1178,
        "end_line": 1182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0501
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.maybeDeclareQualifiedName#994",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.maybeDeclareQualifiedName(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue) {\n      Node ownerNode = n.getFirstChild();\n      String ownerName = ownerNode.getQualifiedName();\n      String qName = n.getQualifiedName();\n      String propName = n.getLastChild().getString();\n      Preconditions.checkArgument(qName != null && ownerName != null);\n\n      // Function prototypes are special.\n      // It's a common JS idiom to do:\n      // F.prototype = { ... };\n      // So if F does not have an explicitly declared super type,\n      // allow F.prototype to be redefined arbitrarily.\n      if (\"prototype\".equals(propName)) {\n        Var qVar = scope.getVar(qName);\n        if (qVar != null) {\n          if (!qVar.isTypeInferred()) {\n            // Just ignore assigns to declared prototypes.\n            return;\n          }\n          scope.undeclare(qVar);\n        }\n      }\n\n      // Precedence of type information on GETPROPs:\n      // 1) @type annotation / @enum annotation\n      // 2) ASSIGN to FUNCTION literal\n      // 3) @param/@return annotation (with no function literal)\n      // 4) ASSIGN to anything else\n      //\n      // 1 and 3 are declarations, 4 is inferred, and 2 is a declaration iff\n      // the function has not been declared before.\n      //\n      // FUNCTION literals are special because TypedScopeCreator is very smart\n      // about getting as much type information as possible for them.\n\n      // Determining type for #1 + #2 + #3\n      JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);\n      if (valueType == null && rhsValue != null) {\n        // Determining type for #4\n        valueType = rhsValue.getJSType();\n      }\n\n      if (valueType == null) {\n        if (parent.getType() == Token.EXPR_RESULT) {\n          stubDeclarations.add(new StubDeclaration(\n              n, t.getInput().isExtern(), ownerName));\n        } else if (rhsValue != null &&\n                   rhsValue.getType() == Token.TRUE) {\n          // We declare these for delegate proxy method properties.\n          ObjectType ownerType = getObjectSlot(ownerName);\n          if (ownerType instanceof FunctionType) {\n            JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();\n            String delegateName = codingConvention.getDelegateSuperclassName();\n            JSType delegateType = delegateName == null ?\n                null : typeRegistry.getType(delegateName);\n            if (delegateType != null &&\n                ownerTypeOfThis.isSubtype(delegateType)) {\n              defineSlot(n, parent, typeRegistry.getNativeType(BOOLEAN_TYPE),\n                         true);\n            }\n          }\n        }\n\n        return;\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        // Determining declaration for #1 + #3\n        inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred) {\n        // Determining declaration for #2\n        inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));\n      }\n\n      if (!inferred) {\n        ObjectType ownerType = getObjectSlot(ownerName);\n        if (ownerType != null) {\n          // Only declare this as an official property if it has not been\n          // declared yet.\n          boolean isExtern = t.getInput().isExtern();\n          if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType())) {\n            // If the property is undeclared or inferred, declare it now.\n            ownerType.defineDeclaredProperty(propName, valueType, isExtern);\n          }\n        }\n\n        // If the property is already declared, the error will be\n        // caught when we try to declare it in the current scope.\n        defineSlot(n, parent, valueType, inferred);\n      }\n    }\n",
        "begin_line": 994,
        "end_line": 1094,
        "comment": "\n     * Declare the symbol for a qualified name in the global scope.\n     *\n     * @param info The doc info for this property.\n     * @param n A top-level GETPROP node (it should not be contained inside\n     *     another GETPROP).\n     * @param parent The parent of {@code n}.\n     * @param rhsValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0501
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.cloneNode#1796",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "    public Node cloneNode() {\n        Node result;\n        try {\n            result = (Node) super.clone();\n            result.next = null;\n            result.first = null;\n            result.last = null;\n            result.parent = null;\n        }\n        catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e.getMessage());\n        }\n        return result;\n    }\n",
        "begin_line": 1796,
        "end_line": 1809,
        "comment": "\n     * @return A detached clone of the Node, specifically excluding its\n     * children.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0499
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeChangeHandler.reset#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reset()",
        "snippet": "    void reset() {\n      hasChanged = false;\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.init#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n    externs_ = makeCompilerInput(externs, true);\n    modules_ = null;\n    moduleGraph_ = null;\n    inputs_ = makeCompilerInput(inputs, false);\n    options_ = options;\n    initBasedOnOptions();\n\n    initInputsByNameMap();\n  }\n",
        "begin_line": 223,
        "end_line": 233,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0494
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.parseInputs#946",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options_.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main js sources.\n    jsRoot = new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n\n    if (options_.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot,\n          options_.tracer == TracerMode.ALL);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      externsRoot = new Node(Token.BLOCK);\n      externsRoot.setIsSyntheticBlock(true);\n      for (CompilerInput input : externs_) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      for (CompilerInput input : inputs_) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n\n        // Inputs can have a null AST during initial parse.\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options_.sourceMapOutputPath != null ||\n            options_.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(input.getName());\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);\n      externAndJsRoot.setIsSyntheticBlock(true);\n\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }\n",
        "begin_line": 946,
        "end_line": 1020,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0492
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initBasedOnOptions#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options_.sourceMapOutputPath != null) {\n      sourceMap_ = new SourceMap();\n    }\n  }\n",
        "begin_line": 271,
        "end_line": 276,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.makeCompilerInput#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(com.google.javascript.jscomp.JSSourceFile[], boolean)",
        "snippet": "  private CompilerInput[] makeCompilerInput(\n      JSSourceFile[] files, boolean isExtern) {\n    CompilerInput [] inputs = new CompilerInput[files.length];\n    for (int i = 0; i < files.length; ++i) {\n      inputs[i] = new CompilerInput(files[i], isExtern);\n    }\n    return inputs;\n  }\n",
        "begin_line": 278,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.initInputsByNameMap#362",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByNameMap()",
        "snippet": "  void initInputsByNameMap() {\n    inputsByName_ = new HashMap<String, CompilerInput>();\n    for (CompilerInput input : externs_) {\n      String name = input.getName();\n      if (!inputsByName_.containsKey(name)) {\n        inputsByName_.put(name, input);\n      } else {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, name));\n      }\n    }\n    for (CompilerInput input : inputs_) {\n      String name = input.getName();\n      if (!inputsByName_.containsKey(name)) {\n        inputsByName_.put(name, input);\n      } else {\n        report(JSError.make(DUPLICATE_INPUT, name));\n      }\n    }\n  }\n",
        "begin_line": 362,
        "end_line": 380,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.hasErrors#1501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 1501,
        "end_line": 1503,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeCheck.checkPropertyAccess#1174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.checkPropertyAccess(com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void checkPropertyAccess(JSType childType, String propName,\n      NodeTraversal t, Node n) {\n    ObjectType objectType = childType.dereference();\n    if (objectType != null) {\n      JSType propType = getJSType(n);\n      if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n        if (objectType instanceof EnumType) {\n          t.report(n, INEXISTENT_ENUM_ELEMENT, propName);\n        } else if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n)) {\n          if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n            t.report(n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));\n          }\n        }\n      }\n    } else {\n      // TODO(nicksantos): might want to flag the access on a non object when\n      // it's impossible to get a property from this type.\n    }\n  }\n",
        "begin_line": 1174,
        "end_line": 1196,
        "comment": "\n   * Make sure that the access of this property is ok.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0491
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarningCount#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0485
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.Node#352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "    public Node(int nodeType, Node child) {\n        Preconditions.checkArgument(child.parent == null,\n            \"new child has existing parent\");\n        Preconditions.checkArgument(child.next == null,\n            \"new child has existing sibling\");\n\n        type = nodeType;\n        parent = null;\n        first = last = child;\n        child.next = null;\n        child.parent = this;\n        sourcePosition = -1;\n    }\n",
        "begin_line": 352,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0481
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getValue#485",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getValue()",
        "snippet": "    @Override\n    public E getValue() {\n      return value;\n    }\n",
        "begin_line": 485,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0473
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.compare#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.Anonymous-08e24699-4583-4bf9-9f9d-4d681f01a87c.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0471
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.prioritizeFromEntryNode#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  private void prioritizeFromEntryNode(DiGraphNode<Node, Branch> entry) {\n    PriorityQueue<DiGraphNode<Node, Branch>> worklist =\n        new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);\n    worklist.add(entry);\n\n    while (!worklist.isEmpty()) {\n      DiGraphNode<Node, Branch> current = worklist.remove();\n      if (nodePriorities.containsKey(current)) {\n        continue;\n      }\n\n      nodePriorities.put(current, ++priorityCounter);\n\n      List<DiGraphNode<Node, Branch>> successors =\n          cfg.getDirectedSuccNodes(current);\n      for (DiGraphNode<Node, Branch> candidate : successors) {\n        worklist.add(candidate);\n      }\n    }\n  }\n",
        "begin_line": 192,
        "end_line": 211,
        "comment": "\n   * Given an entry node, find all the nodes reachable from that node\n   * and prioritize them.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0469
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.mayThrowException#884",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayThrowException(Node n) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 884,
        "end_line": 904,
        "comment": "\n   * Determines if the subtree might throw an exception.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowGraph.isEnteringNewCfgNode#149",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean isEnteringNewCfgNode(Node n) {\n    Node parent = n.getParent();\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.TRY:\n      case Token.FINALLY:\n        return true;\n      case Token.FUNCTION:\n        // A function node represents the start of a function where the name\n        // is bleed into the local scope and parameters has been assigned\n        // to the formal argument names. The node includes the name of the\n        // function and the LP list since we assume the whole set up process\n        // is atomic without change in control flow. The next change of\n        // control is going into the function's body represent by the second\n        // child.\n        return n != parent.getFirstChild().getNext();\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // Theses control structure is represented by its node that holds the\n        // condition. Each of them is a branch node based on its condition.\n        return NodeUtil.getConditionExpression(parent) != n;\n        \n      case Token.FOR:\n        // The FOR(;;) node differs from other control structure in that\n        // it has a initialization and a increment statement. Those\n        // two statements have its corresponding CFG nodes to represent them.\n        // The FOR node represents the condition check for each iteration.\n        // That way the following:\n        // for(var x = 0; x < 10; x++) { } has a graph that is isomorphic to\n        // var x = 0; while(x<10) {  x++; }\n        if (NodeUtil.isForIn(parent)) {\n          return n == parent.getLastChild(); \n        } else {\n          return NodeUtil.getConditionExpression(parent) != n;\n        }\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.CATCH:\n      case Token.WITH:\n        return n != parent.getFirstChild();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 149,
        "end_line": 194,
        "comment": "\n   * @return True if n should be represented by a new CFG node in the control\n   * flow graph.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0467
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.connectToPossibleExceptionHandler#804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.connectToPossibleExceptionHandler(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void connectToPossibleExceptionHandler(Node cfgNode, Node target) {\n    if (mayThrowException(target) && !exceptionHandler.isEmpty()) {\n      Node lastJump = cfgNode;\n      for (Node handler : exceptionHandler) {\n        if (NodeUtil.isFunction(handler)) {\n          return;\n        }\n        Preconditions.checkState(handler.getType() == Token.TRY);\n        Node catchBlock = NodeUtil.getCatchBlock(handler);\n\n        if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n          } else {\n            finallyMap.put(lastJump, handler.getLastChild());\n          }\n        } else { // Has a catch.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, catchBlock);\n            return;\n          } else {\n            finallyMap.put(lastJump, catchBlock);\n          }\n        }\n        lastJump = handler;\n      }\n    }\n  }\n",
        "begin_line": 804,
        "end_line": 831,
        "comment": "\n   * Connects cfgNode to the proper CATCH block if target subtree might throw\n   * an exception. If there are FINALLY blocks reached before a CATCH, it will\n   * make the corresponding entry in finallyMap.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0464
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processBlock#395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 395,
        "end_line": 398,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0461
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.forgiveUnknownNames#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.forgiveUnknownNames()",
        "snippet": "  public void forgiveUnknownNames() {}\n",
        "begin_line": 131,
        "end_line": 131,
        "comment": "\n   * If we see a type name without braces, it might be legacy jsdoc.\n   * So we shouldn't emit warnings about it. This method is how we skip\n   * those warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0461
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#656",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node)",
        "snippet": "  private Node computeFollowNode(Node node) {\n    return computeFollowNode(node, node);\n  }\n",
        "begin_line": 656,
        "end_line": 658,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.NodeMismatch#2043",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NodeMismatch.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      NodeMismatch(Node nodeA, Node nodeB) {\n        this.nodeA = nodeA;\n        this.nodeB = nodeB;\n      }\n",
        "begin_line": 2043,
        "end_line": 2046,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEqualsImpl#1350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "    NodeMismatch checkTreeEqualsImpl(Node node2) {\n        boolean eq = false;\n\n        if (type == node2.getType() &&\n            getChildCount() == node2.getChildCount() &&\n            getClass() == node2.getClass()) {\n\n            eq = this.isEquivalentTo(node2);\n        }\n\n        if (!eq) {\n            return new NodeMismatch(this, node2);\n        }\n\n        NodeMismatch res = null;\n        Node n, n2;\n        for (n = first, n2 = node2.first;\n             res == null && n != null;\n             n = n.next, n2 = n2.next) {\n            res = n.checkTreeEqualsImpl(n2);\n            if (res != null) {\n              return res;\n            }\n        }\n        return res;\n    }\n",
        "begin_line": 1350,
        "end_line": 1375,
        "comment": "\n     * Compare this node to node2 recursively and return the first pair\n     * of nodes that differs doing a preorder depth-first traversal.\n     * Package private for testing. Returns null if the nodes are equivalent.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphNode#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.LinkedDirectedGraphNode(N)",
        "snippet": "    public LinkedDirectedGraphNode(N nodeValue) {\n      this.value = nodeValue;\n      this.id = totalNodes++;\n    }\n",
        "begin_line": 358,
        "end_line": 361,
        "comment": "\n     * Constructor\n     *\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getValue#363",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getValue()",
        "snippet": "    @Override\n    public N getValue() {\n      return value;\n    }\n",
        "begin_line": 363,
        "end_line": 366,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getInEdges#399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getInEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getInEdges() {\n      return inEdgeList;\n    }\n",
        "begin_line": 399,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getOutEdges#404",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getOutEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getOutEdges() {\n      return outEdgeList;\n    }\n",
        "begin_line": 404,
        "end_line": 407,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphEdge#458",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.LinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    public LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      this.value = edgeValue;\n      this.sourceNode = sourceNode;\n      this.destNode = destNode;\n    }\n",
        "begin_line": 458,
        "end_line": 463,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getDestination#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getDestination()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getDestination() {\n      return destNode;\n    }\n",
        "begin_line": 470,
        "end_line": 473,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.connect#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.connect(N, E, N)",
        "snippet": "  @Override\n  public GraphEdge<N, E> connect(N srcValue, E edgeValue, N destValue) {\n    DiGraphNode<N, E> node = getDirectedGraphNode(srcValue);\n    if (node == null) {\n      throw new IllegalArgumentException(\n          srcValue + \" does not exist in graph\");\n    }\n    LinkedDirectedGraphNode<N, E> src = (LinkedDirectedGraphNode<N, E>) node;\n    node = getDirectedGraphNode(destValue);\n    if (node == null) {\n      throw new IllegalArgumentException(\n          destValue + \" does not exist in graph\");\n    }\n    LinkedDirectedGraphNode<N, E> dest = (LinkedDirectedGraphNode<N, E>) node;\n    LinkedDirectedGraphEdge<N, E> edge =\n        new LinkedDirectedGraphEdge<N, E>(src, edgeValue, dest);\n    src.getOutEdges().add(edge);\n    dest.getInEdges().add(edge);\n    return edge;\n  }\n",
        "begin_line": 52,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNodes#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNodes()",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedGraphNodes() {\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    nodeList.addAll(nodes.values());\n    return nodeList;\n  }\n",
        "begin_line": 99,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNode#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> getDirectedGraphNode(N nodeValue) {\n    return nodes.get(nodeValue);\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getNode#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> getNode(N nodeValue) {\n    return getDirectedGraphNode(nodeValue);\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.createDirectedGraphNode#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> createDirectedGraphNode(N nodeValue) {\n    LinkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);\n    if (node == null) {\n      node = new LinkedDirectedGraphNode<N, E>(nodeValue);\n      nodes.put(nodeValue, node);\n    }\n    return node;\n  }\n",
        "begin_line": 145,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getEdges#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getEdges(N, N)",
        "snippet": "  @Override\n  public List<GraphEdge<N, E>> getEdges(N n1, N n2) {\n    // Since this is a method from a generic graph, edges from both\n    // directions must be added to the returning list.\n    List<DiGraphEdge<N, E>> forwardEdges = getDirectedGraphEdges(n1, n2);\n    List<DiGraphEdge<N, E>> backwardEdges = getDirectedGraphEdges(n2, n1);\n    int totalSize = forwardEdges.size() + backwardEdges.size();\n    List<GraphEdge<N, E>> edges = Lists.newArrayListWithCapacity(totalSize);\n    edges.addAll(forwardEdges);\n    edges.addAll(backwardEdges);\n    return edges;\n  }\n",
        "begin_line": 155,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.createNode#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> createNode(N value) {\n    return createDirectedGraphNode(value);\n  }\n",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "LinkedDirectedGraph.getDirectedSuccNodes#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedSuccNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedSuccNodes(\n      DiGraphNode<N, E> dNode) {\n    if (dNode == null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : dNode.getOutEdges()) {\n      nodeList.add(edge.getDestination());\n    }\n    return nodeList;\n  }\n",
        "begin_line": 236,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowGraph.ControlFlowGraph#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.ControlFlowGraph(N)",
        "snippet": "  public ControlFlowGraph(N entry) {\n    implicitReturn = createDirectedGraphNode(null);\n    this.entry = createDirectedGraphNode(entry);\n  }\n",
        "begin_line": 48,
        "end_line": 51,
        "comment": "\n   * Constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowGraph.getImplicitReturn#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getImplicitReturn()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getImplicitReturn() {\n    return implicitReturn;\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "\n   * Gets the implicit return node.\n   *\n   * @return Return node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowGraph.getEntry#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getEntry()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getEntry() {\n    return entry;\n  }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n   * Gets the entry point of the control flow graph. In general, this should be\n   * the beginning of the global script or beginning of a function.\n   *\n   * @return The entry point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.AstControlFlowGraph#952",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.AstControlFlowGraph(com.google.javascript.rhino.Node, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer>)",
        "snippet": "    private AstControlFlowGraph(Node entry,\n        Map<DiGraphNode<Node, Branch>, Integer> priorities) {\n      super(entry);\n      this.priorities = priorities;\n    }\n",
        "begin_line": 952,
        "end_line": 956,
        "comment": "\n     * Constructor.\n     * @param entry The entry node.\n     * @param priorities The map from nodes to position in the AST (to be\n     *    filled by the {@link ControlFlowAnalysis#shouldTraverse}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.ControlFlowAnalysis#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  ControlFlowAnalysis(AbstractCompiler compiler,\n      boolean shouldTraverseFunctions) {\n    this.compiler = compiler;\n    this.shouldTraverseFunctions = shouldTraverseFunctions;\n  }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": "\n   * Constructor.\n   *\n   * @param compiler Compiler instance.\n   * @param shouldTraverseFunctions Whether functions should be traversed (true\n   *    by default).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.getCfg#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getCfg()",
        "snippet": "  ControlFlowGraph<Node> getCfg() {\n    return cfg;\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.computeFallThrough#770",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(com.google.javascript.rhino.Node)",
        "snippet": "  private static Node computeFallThrough(Node n) {\n    switch (n.getType()) {\n      case Token.DO:\n        return computeFallThrough(n.getFirstChild());\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          return n;\n        }\n        return computeFallThrough(n.getFirstChild());\n      case Token.LABEL:\n        return computeFallThrough(n.getLastChild());\n      default:\n        return n;\n    }\n  }\n",
        "begin_line": 770,
        "end_line": 784,
        "comment": "\n   * Computes the destination node of n when we want to fallthough into the\n   * subtree of n. We don't always create a CFG edge into n itself because of\n   * DOs and FORs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "ControlFlowAnalysis.createEdge#792",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.createEdge(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch, com.google.javascript.rhino.Node)",
        "snippet": "  private void createEdge(Node fromNode, ControlFlowGraph.Branch branch,\n      Node toNode) {\n    cfg.createNode(fromNode);\n    cfg.createNode(toNode);\n    cfg.connectIfNotFound(fromNode, branch, toNode);\n  }\n",
        "begin_line": 792,
        "end_line": 797,
        "comment": "\n   * Connects the two nodes in the control flow graph.\n   *\n   * @param fromNode Source.\n   * @param toNode Destination.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.Node#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public Node(int nodeType, Node left, Node right) {\n        Preconditions.checkArgument(left.parent == null,\n            \"first new child has existing parent\");\n        Preconditions.checkArgument(left.next == null,\n            \"first new child has existing sibling\");\n        Preconditions.checkArgument(right.parent == null,\n            \"second new child has existing parent\");\n        Preconditions.checkArgument(right.next == null,\n            \"second new child has existing sibling\");\n        type = nodeType;\n        parent = null;\n        first = left;\n        last = right;\n        left.next = right;\n        left.parent = this;\n        right.next = null;\n        right.parent = this;\n        sourcePosition = -1;\n    }\n",
        "begin_line": 366,
        "end_line": 384,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0456
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeExpression.evaluate#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.evaluate(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  public JSType evaluate(StaticScope<JSType> scope) {\n    JSType type = registry.createFromTypeNodes(root, sourceName, scope);\n    if (root.getBooleanProp(Node.BRACELESS_TYPE)) {\n      type.forgiveUnknownNames();\n    }\n    return type;\n  }\n",
        "begin_line": 104,
        "end_line": 110,
        "comment": "\n   * Evaluates the type expression into a {@code JSType} object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0455
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildCount#1305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "    public int getChildCount() {\n        int c = 0;\n        for (Node n = first; n != null; n = n.next)\n            c++;\n\n        return c;\n    }\n",
        "begin_line": 1305,
        "end_line": 1311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0454
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.isSyntheticBlock#1968",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isSyntheticBlock()",
        "snippet": "    public boolean isSyntheticBlock() {\n        return getBooleanProp(SYNTHETIC_BLOCK_PROP);\n    }\n",
        "begin_line": 1968,
        "end_line": 1970,
        "comment": "\n     * Returns whether this is a synthetic block that should not be considered\n     * a real source block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0453
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getBooleanProp#763",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "    public boolean getBooleanProp(int propType) {\n        return getIntProp(propType, 0) != 0;\n    }\n",
        "begin_line": 763,
        "end_line": 765,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getIntProp#767",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int, int)",
        "snippet": "    public int getIntProp(int propType, int defaultValue)\n    {\n        PropListItem item = lookupProperty(propType);\n        if (item == null) { return defaultValue; }\n        return item.intValue;\n    }\n",
        "begin_line": 767,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processName#619",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return Node.newString(Token.NAME, nameNode.getIdentifier());\n    }\n",
        "begin_line": 619,
        "end_line": 622,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodingConventionAnnotator.visit#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    int nType = n.getType();\n    switch (nType) {\n      case Token.NAME:\n      case Token.STRING:\n        String nString = n.getString();\n        if (nType == Token.NAME &&\n            n.getParent().getType() == Token.CALL &&\n            \"eval\".equals(nString)) {\n          n.putBooleanProp(Node.DIRECT_EVAL, true);\n        }\n        if (convention.isConstant(nString)) {\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n        break;\n\n      case Token.FUNCTION:\n        JSDocInfo fnInfo = n.getJSDocInfo();\n        if (fnInfo == null) {\n          // Look for the info on other nodes.\n          if (parent.getType() == Token.ASSIGN) {\n            // on ASSIGNs\n            fnInfo = parent.getJSDocInfo();\n          } else if (parent.getType() == Token.NAME) {\n            // on var NAME = function() { ... };\n            fnInfo = parent.getParent().getJSDocInfo();\n          }\n        }\n\n        // Compute which function parameters are optional and\n        // which are var_args.\n        Node args = n.getFirstChild().getNext();\n        for (Node arg = args.getFirstChild();\n             arg != null;\n             arg = arg.getNext()) {\n          String argName = arg.getString();\n          JSTypeExpression typeExpr = fnInfo == null ?\n              null : fnInfo.getParameterType(argName);\n\n          if (convention.isOptionalParameter(arg) ||\n              typeExpr != null && typeExpr.isOptionalArg()) {\n            arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);\n          }\n          if (convention.isVarArgsParameter(arg) ||\n              typeExpr != null && typeExpr.isVarArgs()) {\n            arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);\n          }\n        }\n        break;\n    }\n  }\n",
        "begin_line": 55,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "ScriptOrFnNode.ScriptOrFnNode#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptOrFnNode.java",
        "class_name": "com.google.javascript.rhino.ScriptOrFnNode",
        "signature": "com.google.javascript.rhino.ScriptOrFnNode.ScriptOrFnNode(int)",
        "snippet": "    public ScriptOrFnNode(int nodeType) {\n        super(nodeType);\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "ObjToIntMap.ObjToIntMap#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ObjToIntMap.java",
        "class_name": "com.google.javascript.rhino.ObjToIntMap",
        "signature": "com.google.javascript.rhino.ObjToIntMap.ObjToIntMap(int)",
        "snippet": "    public ObjToIntMap(int keyCountHint) {\n        if (keyCountHint < 0) Kit.codeBug();\n        // Table grow when number of stored keys >= 3/4 of max capacity\n        int minimalCapacity = keyCountHint * 4 / 3;\n        int i;\n        for (i = 2; (1 << i) < minimalCapacity; ++i) { }\n        power = i;\n        if (check && power < 2) Kit.codeBug();\n    }\n",
        "begin_line": 128,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "ObjArray.ObjArray#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ObjArray.java",
        "class_name": "com.google.javascript.rhino.ObjArray",
        "signature": "com.google.javascript.rhino.ObjArray.ObjArray()",
        "snippet": "    public ObjArray() { }\n",
        "begin_line": 54,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getProp#756",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "    public Object getProp(int propType)\n    {\n        PropListItem item = lookupProperty(propType);\n        if (item == null) { return null; }\n        return item.objectValue;\n    }\n",
        "begin_line": 756,
        "end_line": 761,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getLineno#818",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "    public int getLineno() {\n        return extractLineno(sourcePosition);\n    }\n",
        "begin_line": 818,
        "end_line": 820,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getCharno#822",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "    public int getCharno() {\n        return extractCharno(sourcePosition);\n    }\n",
        "begin_line": 822,
        "end_line": 824,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.setLineno#1091",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "    public void setLineno(int lineno) {\n        int charno = getCharno();\n        if (charno == -1) {\n          charno = 0;\n        }\n        sourcePosition = mergeLineCharNo(lineno, charno);\n    }\n",
        "begin_line": 1091,
        "end_line": 1097,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.setCharno#1099",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "    public void setCharno(int charno) {\n        sourcePosition = mergeLineCharNo(getLineno(), charno);\n    }\n",
        "begin_line": 1099,
        "end_line": 1101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.mergeLineCharNo#1109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "    protected static int mergeLineCharNo(int lineno, int charno) {\n      if (lineno < 0 || charno < 0) {\n        return -1;\n      } else if ((charno & ~COLUMN_MASK) != 0) {\n        return lineno << COLUMN_BITS | COLUMN_MASK;\n      } else {\n        return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n      }\n    }\n",
        "begin_line": 1109,
        "end_line": 1117,
        "comment": "\n     * Merges the line number and character number in one integer. The Character\n     * number takes the first 12 bits and the line number takes the rest. If\n     * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n     * adjusted to <code>2<sup>12</sup>-1</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.extractLineno#1123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "    protected static int extractLineno(int lineCharNo) {\n      if (lineCharNo == -1) {\n        return -1;\n      } else {\n        return lineCharNo >>> COLUMN_BITS;\n      }\n    }\n",
        "begin_line": 1123,
        "end_line": 1129,
        "comment": "\n     * Extracts the line number and character number from a merged line char\n     * number (see {@link #mergeLineCharNo(int, int)}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.extractCharno#1135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "    protected static int extractCharno(int lineCharNo) {\n      if (lineCharNo == -1) {\n        return -1;\n      } else {\n        return lineCharNo & COLUMN_MASK;\n      }\n    }\n",
        "begin_line": 1135,
        "end_line": 1141,
        "comment": "\n     * Extracts the character number and character number from a merged line\n     * char number (see {@link #mergeLineCharNo(int, int)}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getJsDocBuilderForNode#1869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "    public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n      return new FileLevelJsDocBuilder();\n    }\n",
        "begin_line": 1869,
        "end_line": 1871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "ParserRunner.createConfig#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  public static Config createConfig(\n      JSTypeRegistry typeRegistry, boolean isIdeMode) {\n    return new Config(\n        typeRegistry, getAnnotationNames(), isIdeMode);\n  }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "ParserRunner.getAnnotationNames#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.getAnnotationNames()",
        "snippet": "  static Set<String> getAnnotationNames() {\n    initAnnotationNames();\n    return annotationNames;\n  }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n   * Gets a list of extra annotations that are OK, even if the parser\n   * doesn't have handlers for them built-in.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "ParserRunner.initAnnotationNames#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initAnnotationNames()",
        "snippet": "  private static synchronized void initAnnotationNames() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    Set<String> trimmedNames = Sets.newHashSet();\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    String[] names = config.getString(\"jsdoc.annotations\").split(\",\");\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    annotationNames = ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 60,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "ParserRunner.parse#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(java.lang.String, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static Node parse(String sourceName,\n                           String sourceString,\n                           Config config,\n                           ErrorReporter errorReporter,\n                           Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    compilerEnv.setWarnTrailingComma(true);\n    if (config.isIdeMode) {\n      compilerEnv.setReservedKeywordAsIdentifier(true);\n      compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceName, 1);\n    } catch (EvaluatorException e) {\n      logger.info(\"Error parsing \" + sourceName + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return root;\n  }\n",
        "begin_line": 86,
        "end_line": 120,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceName The filename.\n   * @param sourceString Source code from the file.\n   * @param isIdeMode Whether in IDE mode, which affects the environment.\n   * @param typeRegistry The type registry.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processAstRoot#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = new ScriptOrFnNode(Token.SCRIPT);\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 350,
        "end_line": 358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.parseDirectives#369",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 369,
        "end_line": 384,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * Ecma-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.isDirective#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 386,
        "end_line": 393,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.IRFactory#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceName = sourceName;\n    this.registry = config.registry;\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n  }\n",
        "begin_line": 117,
        "end_line": 127,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.transformTree#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n    // @license text gets appended onto the fileLevelJsDocBuilder as found,\n    // and stored straight into the JSDocInfo for the root node.\n    Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n        irNode.getJsDocBuilderForNode();\n    // fileOverviewInfo stores the last bit of fileoverview data we saw.\n    // We only permit one, so throwing away extras is fair.\n    // The fileOverviewInfo gets passed into parseJSDocInfo so that\n    // it can detect when multiple @fileoverviews exist in the same file.\n    JSDocInfo fileOverviewInfo = null;\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == JSDOC) {\n          JsDocInfoParser jsDocParser =\n              irFactory.createJsDocInfoParser(comment.getValue(),\n                  comment.getLineno(), comment.getAbsolutePosition(),\n                  fileLevelJsDocBuilder, fileOverviewInfo);\n          if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {\n            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();\n          } else {\n            JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();\n            if (info != null) {\n              irFactory.attachJsDoc(comment, info);\n            }\n          }\n        }\n      }\n\n      // Only after we've seen all @fileoverview entries, attach the\n      // last one to the root node, and copy the found license strings\n      // to that node.\n      if (fileOverviewInfo != null) {\n        if ((irNode.getJSDocInfo() != null) &&\n            (irNode.getJSDocInfo().getLicense() != null)) {\n          fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n        }\n        irNode.setJSDocInfo(fileOverviewInfo);\n      }\n    }\n    return irNode;\n  }\n",
        "begin_line": 129,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.transform#177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    String jsDoc = node.getJsDoc();\n    NodeWithJsDoc nodeWithJsDoc = null;\n    if (jsDoc != null) {\n      nodeWithJsDoc = new NodeWithJsDoc();\n      nodesWithJsDoc.put(jsDoc, nodeWithJsDoc);\n    }\n\n    Node irNode = justTransform(node);\n    if (nodeWithJsDoc != null) {\n      nodeWithJsDoc.node = irNode;\n    }\n\n    // If we have a named function, set the position to that of the name.\n    if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1) {\n      irNode.setLineno(irNode.getFirstChild().getLineno());\n      irNode.setCharno(irNode.getFirstChild().getCharno());\n    } else {\n      if (irNode.getLineno() == -1) {\n        // If we didn't already set the line, then set it now.  This avoids\n        // cases like ParenthesizedExpression where we just return a previous\n        // node, but don't want the new node to get its parent's line number.\n        int lineno = node.getLineno();\n        irNode.setLineno(lineno);\n        int charno = position2charno(node.getAbsolutePosition());\n        irNode.setCharno(charno);\n      }\n    }\n    return irNode;\n  }\n",
        "begin_line": 177,
        "end_line": 207,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.position2charno#269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 269,
        "end_line": 277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.justTransform#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Config.Config#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Set<java.lang.String>, boolean)",
        "snippet": "  Config(JSTypeRegistry registry, Set<String> annotationWhitelist,\n      boolean isIdeMode) {\n    this.registry = registry;\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.isIdeMode = isIdeMode;\n  }\n",
        "begin_line": 58,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Config.buildAnnotationNames#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 70,
        "end_line": 83,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Tracer.isInitialized#757",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 757,
        "end_line": 759,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Tracer.currentTimeMillis#239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-bf8e4c4e-5702-4445-9e5c-f62de12b9c26.currentTimeMillis()",
        "snippet": "    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Tracer.Tracer#251",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 251,
        "end_line": 294,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totalling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Tracer.stop#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silence_threshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than extraTracingStatistics.size() because\n      // a new statistic may have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silence_threshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 421,
        "end_line": 447,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silence_threshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Tracer.stop#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 453,
        "end_line": 455,
        "comment": " Stop the trace using the default silence_threshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Tracer.getThreadTrace#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 967,
        "end_line": 975,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "SourceFile.getCode#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": " \n   * Gets all the code in this source file. \n   * @throws IOException \n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTypeNormalizer.NodeTypeNormalizer#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.NodeTypeNormalizer()",
        "snippet": "  NodeTypeNormalizer() {\n    this(false);\n  }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTypeNormalizer.NodeTypeNormalizer#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.NodeTypeNormalizer(boolean)",
        "snippet": "  NodeTypeNormalizer(boolean forbidChanges) {\n    this.assertOnChange = forbidChanges;\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTypeNormalizer.process#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    normalizeNodeTypes(root);\n    normalizeJsDocAnnotations(root);\n  }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTypeNormalizer.normalizeJsDocAnnotations#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.normalizeJsDocAnnotations(com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeJsDocAnnotations(Node n) {\n    if (n.getType() == Token.OBJECTLIT) {\n      for (Node key = n.getFirstChild();\n           key != null; key = key.getNext().getNext()) {\n        Node value = key.getNext();\n        if (key.getJSDocInfo() != null &&\n            key.getNext().getType() == Token.FUNCTION) {\n          value.setJSDocInfo(key.getJSDocInfo());\n        }\n      }\n    }\n\n    // TODO(johnlenz): Determine if it is possible to simply use the javadoc\n    // everywhere rather than use IS_DISPATCHER.\n    /*\n     * Translate dispatcher info into the property expected node.\n     */\n    if (n.getJSDocInfo() != null && n.getJSDocInfo().isJavaDispatch()) {\n      if (n.getType() == Token.ASSIGN) {\n        Node fnNode = n.getLastChild();\n        Preconditions.checkState(fnNode.getType() == Token.FUNCTION);\n        fnNode.putBooleanProp(Node.IS_DISPATCHER, true);\n      }\n    }\n\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n      normalizeJsDocAnnotations(child);\n    }\n  }\n",
        "begin_line": 68,
        "end_line": 97,
        "comment": "\n   * Normalize where JSDoc annotations appear on the AST.\n   *\n   * In the AST that Rhino gives us, it needs to make a distinction\n   * between jsdoc on the object literal node and jsdoc on the object literal\n   * value. For example,\n   * <pre>\n   * var x = {\n   *   / JSDOC /\n   *   a: 'b',\n   *   c: / JSDOC / 'd'\n   * };\n   * </pre>\n   *\n   * But in few narrow cases (in particular, function literals), it's\n   * a lot easier for us if the doc is attached to the value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTypeNormalizer.normalizeNodeTypes#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.normalizeNodeTypes(com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeNodeTypes(Node n) {\n    if (n.getType() == Token.EXPR_VOID) {\n      n.setType(Token.EXPR_RESULT);\n      reportChange();\n    }\n\n    // Remove unused properties to minimize differences between ASTs\n    // produced by the two parsers.\n    if (n.getType() == Token.FUNCTION) {\n      Preconditions.checkState(n.getProp(Node.FUNCTION_PROP) == null);\n    }\n\n    normalizeBlocks(n);\n\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n      // This pass is run during the CompilerTestCase validation, so this\n      // parent pointer check serves as a more general check.\n      Preconditions.checkState(child.getParent() == n);\n\n      normalizeNodeTypes(child);\n    }\n  }\n",
        "begin_line": 102,
        "end_line": 124,
        "comment": "\n   * Covert EXPR_VOID to EXPR_RESULT to simplify the rest of the code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsAst.JsAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsAst.getAstRoot#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      createAst(compiler);\n    }\n    return root;\n  }\n",
        "begin_line": 48,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsAst.createAst#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.createAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void createAst(AbstractCompiler compiler) {\n    try {\n      parse(compiler, sourceFile.getName(), sourceFile.getCode());\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n  }\n",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "JsAst.parse#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler, java.lang.String, java.lang.String)",
        "snippet": "  private void parse(AbstractCompiler compiler, String sourceName,\n      String sourceStr) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceName);\n      root = ParserRunner.parse(sourceName, sourceStr,\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n    } catch (IOException e) {\n      compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));\n    }\n\n    if (root == null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = new Node(Token.BLOCK);\n    } else {\n      compiler.normalizeNodeTypes(root);\n      compiler.annotateCodingConvention(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.putProp(Node.SOURCENAME_PROP, sourceName);\n  }\n",
        "begin_line": 85,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSSourceFile.getCode#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.getCode()",
        "snippet": "  @Override\n  public String getCode() throws IOException {\n    return referenced.getCode();\n  }\n",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "CompilerOptions.isOn#914",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 914,
        "end_line": 916,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.newTracer#744",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options_.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 744,
        "end_line": 751,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.stopTracer#753",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options_.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 753,
        "end_line": 758,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1050",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1050,
        "end_line": 1053,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.normalizeNodeTypes#1351",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.normalizeNodeTypes(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void normalizeNodeTypes(Node root) {\n    Tracer tracer = newTracer(\"normalizeNodeTypes\");\n\n    // TODO(johnlenz): Merge the NodeTypeNormalizer into the AST creator\n    // it doesn't need to be done separately.\n    CompilerPass pass = new NodeTypeNormalizer();\n    pass.process(null, root);\n\n    stopTracer(tracer, \"normalizeNodeTypes\");\n  }\n",
        "begin_line": 1351,
        "end_line": 1361,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.annotateCodingConvention#1363",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.annotateCodingConvention(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void annotateCodingConvention(Node root) {\n    Tracer tracer = newTracer(\"annotateCodingConvention\");\n    CompilerPass pass = new CodingConventionAnnotator(this);\n    pass.process(null, root);\n    stopTracer(tracer, \"annotateCodingConvention\");\n  }\n",
        "begin_line": 1363,
        "end_line": 1369,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.isIdeMode#1416",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options_.ideMode;\n  }\n",
        "begin_line": 1416,
        "end_line": 1419,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.getParserConfig#1421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      parserConfig = ParserRunner.createConfig(\n          getTypeRegistry(), isIdeMode());\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 1421,
        "end_line": 1428,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.getErrorCount#1476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 1476,
        "end_line": 1478,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.hasHaltingErrors#1487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 1487,
        "end_line": 1490,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodingConventionAnnotator.CodingConventionAnnotator#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.CodingConventionAnnotator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public CodingConventionAnnotator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.convention = compiler.getCodingConvention();\n  }\n",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodingConventionAnnotator.process#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventionAnnotator.java",
        "class_name": "com.google.javascript.jscomp.CodingConventionAnnotator",
        "signature": "com.google.javascript.jscomp.CodingConventionAnnotator.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (externs != null) {\n      NodeTraversal.traverse(compiler, externs, this);\n    }\n    if (root != null) {\n      NodeTraversal.traverse(compiler, root, this);\n    }\n  }\n",
        "begin_line": 45,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.hasCodeChanged()",
        "snippet": "    boolean hasCodeChanged() {\n      return hasChanged;\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "BasicErrorManager.getErrorCount#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.getSourceName#624",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = (String) n.getProp(Node.SOURCENAME_PROP);\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 624,
        "end_line": 627,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getString#296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "        @Override public String getString() {\n            return this.str;\n        }\n",
        "begin_line": 296,
        "end_line": 298,
        "comment": " returns the string content.\n          * @return non null.\n          ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "SourceFile.Preloaded#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String code) {\n      super(fileName);\n      super.setCode(code);\n    }\n",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "SourceFile.SourceFile#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  SourceFile(String fileName) {\n    this.fileName = fileName;\n    // Starting point: offset 0 is at line 1.\n    this.lastOffset = 0;\n    this.lastLine = 1;\n  }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "SourceFile.setCode#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "SourceFile.getName#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "SourceFile.fromCode#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return new Preloaded(fileName, code);\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSSourceFile.fromCode#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static JSSourceFile fromCode(String fileName, String code) {\n    return new JSSourceFile(SourceFile.fromCode(fileName, code));\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSSourceFile.JSSourceFile#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.JSSourceFile(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  private JSSourceFile(SourceFile referenced) {\n    super(referenced.getName());\n    this.referenced = referenced;\n  }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0451
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getType#514",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "    public int getType() {\n        return type;\n    }\n",
        "begin_line": 514,
        "end_line": 516,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.lookupProperty#717",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "    private PropListItem lookupProperty(int propType)\n    {\n        PropListItem x = propListHead;\n        while (x != null && propType != x.type) {\n            x = x.next;\n        }\n        return x;\n    }\n",
        "begin_line": 717,
        "end_line": 724,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getParent#1230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "    public Node getParent() {\n        return parent;\n    }\n",
        "begin_line": 1230,
        "end_line": 1232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getJSDocInfo#1903",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "    public JSDocInfo getJSDocInfo()\n    {\n        return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n    }\n",
        "begin_line": 1903,
        "end_line": 1906,
        "comment": "\n     * Get the {@link JSDocInfo} attached to this node.\n     * @return the information or {@code null} if no JSDoc is attached to this\n     * node\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.setIsSyntheticBlock#1960",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "    public void setIsSyntheticBlock(boolean val) {\n        putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n    }\n",
        "begin_line": 1960,
        "end_line": 1962,
        "comment": "\n     * Sets whether this is a synthetic block that should not be considered\n     * a real source block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 48,
        "end_line": 51,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.shouldTraverse#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.NodeTraversal#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.NodeTraversal#207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 207,
        "end_line": 216,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.traverse#248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 248,
        "end_line": 258,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.traverse#423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 423,
        "end_line": 427,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.pushScope#533",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 533,
        "end_line": 540,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NodeTraversal.popScope#553",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 553,
        "end_line": 563,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "CompilerOptions.getCodingConvention#872",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getCodingConvention()",
        "snippet": "  public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }\n",
        "begin_line": 872,
        "end_line": 874,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.getCodingConvention#1409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
        "snippet": "  @Override\n  public CodingConvention getCodingConvention() {\n    CodingConvention convention = options_.getCodingConvention();\n    convention = convention != null ? convention : defaultCodingConvention;\n    return convention;\n  }\n",
        "begin_line": 1409,
        "end_line": 1414,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "VoidType.VoidType#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "VoidType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"undefined\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ValueType.isSubtype#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    return JSType.isSubtype(this, that);\n  }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "UnknownType.UnknownType#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "UnionTypeBuilder.addAlternate#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate instanceof UnionType) {\n        UnionType union = (UnionType) alternate;\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (!alternate.isUnknownType()) {\n          Iterator<JSType> it = alternates.iterator();\n          while (it.hasNext()) {\n            JSType current = it.next();\n            if (!current.isUnknownType()) {\n              if (alternate.isSubtype(current)) {\n                // Alternate is unnecessary.\n                return this;\n              } else if (current.isSubtype(alternate)) {\n                // Alternate makes current obsolete\n                it.remove();\n              }\n            }\n          }\n        }\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 85,
        "end_line": 129,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "UnionTypeBuilder.build#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      if (isAllType) {\n        result = registry.getNativeType(ALL_TYPE);\n      } else if (isNativeUnknownType) {\n        if (areAllUnknownsChecked) {\n          result = registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n        } else {\n          result = registry.getNativeType(UNKNOWN_TYPE);\n        }\n      } else {\n        Set<JSType> alternateSet = Sets.newUnmodifiableHashSet(alternates);\n        int size = alternateSet.size();\n        if (size > MAX_UNION_SIZE) {\n          result = registry.getNativeType(UNKNOWN_TYPE);\n        } else {\n          if (size > 1) {\n            result = new UnionType(registry, alternateSet);\n          } else if (size == 1) {\n            result = alternates.iterator().next();\n          } else {\n            result = registry.getNativeType(NO_TYPE);\n          }\n        }\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 136,
        "end_line": 163,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "UnionType.UnionType#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Set<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Set<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "StringType.StringType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "StringType.toString#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"string\";\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false);\n  }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newHashMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType) {\n      this.implicitPrototype = implicitPrototype;\n    } else if (implicitPrototype == null) {\n      this.implicitPrototype =\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n    } else {\n      this.implicitPrototype = implicitPrototype;\n    }\n  }\n",
        "begin_line": 97,
        "end_line": 111,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.getConstructor#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 325,
        "end_line": 328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#330",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototype;\n  }\n",
        "begin_line": 330,
        "end_line": 333,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototype = implicitPrototype;\n  }\n",
        "begin_line": 341,
        "end_line": 344,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.getReferenceName#346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else {\n      return \"{...}\";\n    }\n  }\n",
        "begin_line": 346,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#355",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null;\n  }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.isSubtype#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtype(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that instanceof UnionType) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that instanceof RecordType) {\n      return RecordType.isSubtype(this, (RecordType) that);\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n    if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (that != null) {\n      if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n        // If unsure, say 'yes', to avoid spurious warnings.\n        // TODO(user): resolve the prototype chain completely in all cases,\n        // to avoid guessing.\n        return true;\n      }\n      return this.isImplicitPrototype(thatObj);\n    }\n\n    return false;\n  }\n",
        "begin_line": 360,
        "end_line": 404,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 406,
        "end_line": 415,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 451,
        "end_line": 454,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ObjectType.ObjectType#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ObjectType.defineDeclaredProperty#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, boolean inExterns) {\n    // All property definitions go through this method\n    // or defineInferredProperty.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return defineProperty(propertyName, type, false, inExterns);\n  }\n",
        "begin_line": 215,
        "end_line": 222,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param inExterns {@code true} if this property was defined in an externs\n   *        file. TightenTypes assumes that any function passed to an externs\n   *        property could be called, so setting this incorrectly could result\n   *        in live code being removed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ObjectType.isUnknownType#403",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 403,
        "end_line": 417,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ObjectType.hasCachedValues#429",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 429,
        "end_line": 431,
        "comment": "\n   * Returns true if any cached valeus have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ObjectType.cast#441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public static ObjectType cast(JSType type) {\n    return type == null ? null : type.toObjectType();\n  }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "\n   * A null-safe version of JSType#toObjectType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NumberType.NumberType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NumberType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"number\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NullType.NullType#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NullType.toString#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"null\";\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NoType.NoType#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NoType.isNoType#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NoObjectType.NoObjectType#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null, null, null, null, null, true, true);\n  }\n",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NoObjectType.getReturnType#214",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.getReturnType()",
        "snippet": "  @Override\n  public JSType getReturnType() {\n    return this;\n  }\n",
        "begin_line": 214,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "NoObjectType.isNoObjectType#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.isNoObjectType()",
        "snippet": "  @Override\n  public boolean isNoObjectType() {\n    return true;\n  }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    ObjectType TOP_LEVEL_PROTOTYPE =\n        new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE,\n            null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\n        \"prototype\", TOP_LEVEL_PROTOTYPE, true);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE,\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n      };\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true,\n            true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n              UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n          STRING_TYPE, null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null, createParameters(false, ALL_TYPE),\n            NUMBER_TYPE, null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createOptionalParameters(ALL_TYPE, ALL_TYPE),\n          null, null, null, true, true) {\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n      };\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null, createParameters(false, ALL_TYPE),\n        STRING_TYPE, null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n          createParametersWithVarArgs(\n              UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    ObjectType GLOBAL_THIS = createObjectType(\"global this\", null,\n        UNKNOWN_TYPE /* to be resolved later */);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n  }\n",
        "begin_line": 165,
        "end_line": 466,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.getReturnType#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.Anonymous-9ca42adb-ea56-41db-89f9-f394b3452adc.getReturnType()",
        "snippet": "        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.getReturnType#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.Anonymous-fbade69d-bc2b-42e8-bba2-c1318aba4361.getReturnType()",
        "snippet": "        @Override\n        public JSType getReturnType() {\n          return getInstanceType();\n        }\n",
        "begin_line": 237,
        "end_line": 240,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter)",
        "snippet": "  public JSTypeRegistry(ErrorReporter reporter) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n  }\n",
        "begin_line": 147,
        "end_line": 152,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 157,
        "end_line": 163,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#468",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 468,
        "end_line": 492,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.register#494",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 494,
        "end_line": 496,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.register#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 498,
        "end_line": 506,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.registerNativeType#508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 508,
        "end_line": 510,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#524",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, ObjectType owner) {\n    Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typesIndexedByProperty.put(propertyName, typeSet = Sets.newHashSet());\n    }\n    greatestSubtypeByProperty.remove(propertyName);\n    typeSet.add(owner);\n  }\n",
        "begin_line": 524,
        "end_line": 531,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.getNativeType#680",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 680,
        "end_line": 682,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#684",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 684,
        "end_line": 686,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createOptionalType#748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 748,
        "end_line": 754,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createUnionType#776",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 776,
        "end_line": 782,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createUnionType#788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative...)",
        "snippet": "  public JSType createUnionType(JSTypeNative... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSTypeNative typeId : variants) {\n      builder.addAlternate(getNativeType(typeId));\n    }\n    return builder.build();\n  }\n",
        "begin_line": 788,
        "end_line": 794,
        "comment": "\n   * Creates a union type whose variants are the builtin types specified\n   * by the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#848",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return new FunctionType(\n        this, null, null, createParametersWithVarArgs(parameterTypes), returnType);\n  }\n",
        "begin_line": 848,
        "end_line": 852,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#949",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 949,
        "end_line": 951,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#957",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 957,
        "end_line": 961,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createParameters#973",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 973,
        "end_line": 984,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createFunctionType#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 993,
        "end_line": 1000,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSTypeRegistry.createObjectType#1053",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createObjectType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public ObjectType createObjectType(String name, Node n,\n      ObjectType implicitPrototype) {\n    return new PrototypeObjectType(this, name, implicitPrototype);\n  }\n",
        "begin_line": 1053,
        "end_line": 1056,
        "comment": "\n   * Create an object type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.JSType#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.isNoType#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.isNoObjectType#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.isEmptyType#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType();\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.isAllType#216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.isUnknownType#220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 220,
        "end_line": 222,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.equals#309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.equals(java.lang.Object)",
        "snippet": "  @Override public boolean equals(Object jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.equals(this);\n    }\n    return this == jsType;\n  }\n",
        "begin_line": 309,
        "end_line": 314,
        "comment": "\n   * This method relies on the fact that for the base {@link JSType}, only one\n   * instance of each sub-type will ever be created in a given registry, so\n   * there is no need to verify members. If the object pointers are not\n   * identical, then the type member must be different.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.hashCode#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 316,
        "end_line": 319,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.toObjectType#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   *\n   * Does not change the underlying JS type. If you want to simulate JS\n   * autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n   * Those methods may change the underlying JS type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "JSType.isSubtype#806",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtype(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.equals(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType instanceof UnionType) {\n      UnionType union = (UnionType)thatType;\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // named types\n    if (thatType instanceof NamedType) {\n      return thisType.isSubtype(((NamedType)thatType).referencedType);\n    }\n    return false;\n  }\n",
        "begin_line": 806,
        "end_line": 833,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 63,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.getReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.hasReferenceName#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.getConstructor#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.toString#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return constructor.getReferenceName();\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.isNominalType#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.equals#150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object that) {\n    if (this == that) {\n      return true;\n    } else if (that instanceof JSType && this.isNominalType()) {\n      ObjectType thatObj = ObjectType.cast((JSType) that);\n      if (thatObj != null && thatObj.isNominalType()) {\n        return getReferenceName().equals(thatObj.getReferenceName());\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 150,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "InstanceObjectType.hashCode#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 174,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.FunctionType#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @VisibleForTesting\n  public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType) {\n    this(registry, name, source, parameters, returnType, null, null, false,\n         false);\n  }\n",
        "begin_line": 136,
        "end_line": 141,
        "comment": "\n   * Creates a function type.\n   * @param registry the owner registry for this type\n   * @param name the function's name or {@code null} to indicate that the\n   *        function is anonymous.\n   * @param source the node defining this function. Its type\n   *        ({@link Node#getType()}) must be {@link Token#FUNCTION}.\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.FunctionType#186",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    // The call type should be set up last because we are calling getReturnType,\n    // which may be overloaded and depend on other properties being set.\n    this.call = new ArrowType(registry, parameters,\n        (returnType == null ? getReturnType() : returnType));\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 186,
        "end_line": 209,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.isConstructor#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 230,
        "end_line": 233,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.isInterface#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.getPrototype#309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public FunctionPrototypeType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototype == null) {\n      setPrototype(new FunctionPrototypeType(registry, this, null));\n    }\n    return prototype;\n  }\n",
        "begin_line": 309,
        "end_line": 315,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    if (prototype == null) {\n      setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));\n    } else {\n      prototype.setImplicitPrototype(baseType);\n    }\n  }\n",
        "begin_line": 322,
        "end_line": 330,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.setPrototype#337",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType)",
        "snippet": "  public boolean setPrototype(FunctionPrototypeType prototype) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    this.prototype = prototype;\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 337,
        "end_line": 355,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.defineProperty#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type,\n      boolean inferred, boolean inExterns) {\n    if (\"prototype\".equals(name)) {\n      ObjectType objType = type.toObjectType();\n      if (objType != null) {\n        if (objType.equals(prototype)) {\n          return true;\n        }\n        return setPrototype(\n            new FunctionPrototypeType(\n                registry, this, objType, isNativeObjectType()));\n      } else {\n        return false;\n      }\n    }\n    return super.defineProperty(name, type, inferred, inExterns);\n  }\n",
        "begin_line": 470,
        "end_line": 487,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.getSuperClassConstructor#554",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 554,
        "end_line": 561,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.hashCode#639",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return isInterface() ? getReferenceName().hashCode() : call.hashCode();\n  }\n",
        "begin_line": 639,
        "end_line": 642,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.getInstanceType#761",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 761,
        "end_line": 764,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.setInstanceType#767",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 767,
        "end_line": 769,
        "comment": " Sets the instance type. This should only be used for special native types. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.hasInstanceType#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 774,
        "end_line": 776,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.addSubType#801",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 801,
        "end_line": 806,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionType.hasCachedValues#817",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototype != null || super.hasCachedValues();\n  }\n",
        "begin_line": 817,
        "end_line": 820,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionPrototypeType.FunctionPrototypeType#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.FunctionPrototypeType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n      ObjectType implicitPrototype, boolean isNative) {\n    super(registry, null /* has no class name */, implicitPrototype,\n        isNative);\n    this.ownerFunction = ownerFunction;\n  }\n",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionPrototypeType.FunctionPrototypeType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.FunctionPrototypeType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  FunctionPrototypeType(JSTypeRegistry registry, FunctionType ownerFunction,\n      ObjectType implicitPrototype) {\n    this(registry, ownerFunction, implicitPrototype, false);\n  }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.newParameter#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 121,
        "end_line": 126,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.build#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 132,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 138,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(registry, name, null,\n          registry.createOptionalParameters(\n              registry.getNativeType(ALL_TYPE),\n              registry.getNativeType(ALL_TYPE),\n              registry.getNativeType(ALL_TYPE)),\n          null, null, null, true, true);\n  }\n",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ErrorFunctionType.getReturnType#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.getReturnType()",
        "snippet": "  @Override\n  public JSType getReturnType() {\n    return getInstanceType();\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "BooleanType.BooleanType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "BooleanType.toString#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"boolean\";\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ArrowType.ArrowType#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    super(registry);\n    this.parameters = parameters;\n    this.returnType = returnType;\n  }\n",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ArrowType.hashCode#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    int hashCode = 0;\n    if (returnType != null) {\n      hashCode += returnType.hashCode();\n    }\n    if (parameters != null) {\n      Node param = parameters.getFirstChild();\n      while (param != null) {\n        JSType paramType = param.getJSType();\n        if (paramType != null) {\n          hashCode += paramType.hashCode();\n        }\n        param = param.getNext();\n      }\n    }\n    return hashCode;\n  }\n",
        "begin_line": 189,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "AllType.AllType#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "AllType.isAllType#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ScriptRuntime.getMessage0#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId)\n    {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 421,
        "end_line": 424,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ScriptRuntime.getMessage#457",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments)\n    {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Context cx = Context.getCurrentContext();\n        Locale locale = cx != null ? cx.getLocale() : Locale.getDefault();\n\n        // ResourceBundle does cacheing.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 457,
        "end_line": 484,
        "comment": " OPT there's a noticable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.StringNode#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "        StringNode(int type, String str) {\n            super(type);\n            if (null == str) {\n                throw new IllegalArgumentException(\"StringNode: str is null\");\n            }\n            this.str = str;\n        }\n",
        "begin_line": 277,
        "end_line": 283,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.Node#346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "    public Node(int nodeType) {\n        type = nodeType;\n        parent = null;\n        sourcePosition = -1;\n    }\n",
        "begin_line": 346,
        "end_line": 350,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.newString#502",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "    public static Node newString(int type, String str) {\n        return new StringNode(type, str);\n    }\n",
        "begin_line": 502,
        "end_line": 504,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getFirstChild#526",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "    public Node getFirstChild() {\n        return first;\n    }\n",
        "begin_line": 526,
        "end_line": 528,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getLastChild#530",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "    public Node getLastChild() {\n        return last;\n    }\n",
        "begin_line": 530,
        "end_line": 532,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getNext#534",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "    public Node getNext() {\n        return next;\n    }\n",
        "begin_line": 534,
        "end_line": 536,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.addChildToBack#578",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "    public void addChildToBack(Node child) {\n        Preconditions.checkArgument(child.parent == null);\n        Preconditions.checkArgument(child.next == null);\n        child.parent = this;\n        child.next = null;\n        if (last == null) {\n            first = last = child;\n            return;\n        }\n        last.next = child;\n        last = child;\n    }\n",
        "begin_line": 578,
        "end_line": 589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.ensureProperty#726",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ensureProperty(int)",
        "snippet": "    private PropListItem ensureProperty(int propType)\n    {\n        PropListItem item = lookupProperty(propType);\n        if (item == null) {\n            item = new PropListItem();\n            item.type = propType;\n            item.next = propListHead;\n            propListHead = item;\n        }\n        return item;\n    }\n",
        "begin_line": 726,
        "end_line": 736,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.putBooleanProp#791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "    public void putBooleanProp(int propType, boolean prop) {\n        putIntProp(propType, prop ? 1 : 0);\n    }\n",
        "begin_line": 791,
        "end_line": 793,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.putIntProp#795",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "    public void putIntProp(int propType, int prop)\n    {\n        PropListItem item = ensureProperty(propType);\n        item.intValue = prop;\n    }\n",
        "begin_line": 795,
        "end_line": 799,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.getJSType#1861",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSType()",
        "snippet": "    public JSType getJSType() {\n        return jsType;\n    }\n",
        "begin_line": 1861,
        "end_line": 1863,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.setJSType#1865",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    public void setJSType(JSType jsType) {\n        this.jsType = jsType;\n    }\n",
        "begin_line": 1865,
        "end_line": 1867,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.setVarArgs#1921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "    public void setVarArgs(boolean varArgs)\n    {\n        putBooleanProp(VAR_ARGS_NAME, varArgs);\n    }\n",
        "begin_line": 1921,
        "end_line": 1924,
        "comment": "\n     * Sets whether this node is a variable length argument node. This\n     * method is meaningful only on {@link Token#NAME} nodes\n     * used to define a {@link Token#FUNCTION}'s argument list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.setOptionalArg#1941",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "    public void setOptionalArg(boolean optionalArg)\n    {\n        putBooleanProp(OPT_ARG_NAME, optionalArg);\n    }\n",
        "begin_line": 1941,
        "end_line": 1944,
        "comment": "\n     * Sets whether this node is an optional argument node. This\n     * method is meaningful only on {@link Token#NAME} nodes\n     * used to define a {@link Token#FUNCTION}'s argument list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Context.getCurrentContext#401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "class_name": "com.google.javascript.rhino.Context",
        "signature": "com.google.javascript.rhino.Context.getCurrentContext()",
        "snippet": "    public static Context getCurrentContext() {\n        return threadContexts.get();\n    }\n",
        "begin_line": 401,
        "end_line": 403,
        "comment": "\n     * Get the current Context.\n     *\n     * The current Context is per-thread; this method looks up\n     * the Context associated with the current thread. <p>\n     *\n     * @return the Context associated with the current thread, or\n     *         null if no context is associated with the current\n     *         thread.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "TypeValidator.TypeValidator#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "signature": "com.google.javascript.jscomp.TypeValidator.TypeValidator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  TypeValidator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.typeRegistry = compiler.getTypeRegistry();\n    this.allValueTypes = typeRegistry.createUnionType(\n        STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);\n  }\n",
        "begin_line": 115,
        "end_line": 120,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private String replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\");\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.of(\n\n        // Extra @fileoverview\n        replacePlaceHolders(\n            ScriptRuntime.getMessage0(\"msg.jsdoc.fileoverview.extra\")),\n        EXTRA_FILEOVERVIEW,\n\n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n\n        // Duplicate parameter\n        replacePlaceHolders(\n            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n              .getMessage0(\"msg.dup.parms\")),\n        DUPLICATE_PARAM,\n\n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION);\n  }\n",
        "begin_line": 70,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.jscomp.mozilla.rhino.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "PassFactory.PassFactory#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "DiagnosticType.error#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "DiagnosticType.warning#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "DiagnosticType.make#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 85,
        "end_line": 89,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "DiagnosticType.DiagnosticType#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 94,
        "end_line": 100,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "CompilerOptions.CompilerOptions#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkSymbols = false;\n    checkShadowVars = CheckLevel.OFF;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkFunctions = CheckLevel.OFF;\n    checkMethods = CheckLevel.OFF;\n    checkDuplicateMessages = false;\n    allowLegacyJsMessages = false;\n    strictMessageReplacement = false;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkUndefinedProperties = CheckLevel.OFF;\n    checkUnusedPropertiesEarly = false;\n    checkTypes = false;\n    tightenTypes = false;\n    inferTypesInGlobalScope = false;\n    checkTypedPropertyCalls = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.WARNING;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkEs5Strict = false;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n\n    // Optimizations\n    foldConstants = false;\n    removeConstantExpressions = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedVars = false;\n    removeUnusedVarsInGlobalScope = true;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    instrumentForCoverage = false;\n    instrumentForCoverageOnly = false;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    rewriteNewDateGoogNow = true;\n    removeAbstractMethods = true;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    warningsGuard = null;\n    debugFunctionSideEffectsPath = null;\n    jsOutputFile = \"\";\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n  }\n",
        "begin_line": 561,
        "end_line": 687,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#842",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 842,
        "end_line": 844,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.Compiler#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    addChangeHandler(recentChange);\n    this.typeValidator = new TypeValidator(this);\n    setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger_));\n  }\n",
        "begin_line": 160,
        "end_line": 164,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.createDefaultOptions#184",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createDefaultOptions()",
        "snippet": "  CompilerOptions createDefaultOptions() {\n    return new CompilerOptions();\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.setErrorManager#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 205,
        "end_line": 209,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.createMessageFormatter#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options_.shouldColorizeErrorOutput();\n    return options_.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 215,
        "end_line": 218,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.getTypeRegistry#897",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 897,
        "end_line": 903,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "Compiler.addChangeHandler#1387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1387,
        "end_line": 1390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "AbstractMessageFormatter.setColorize#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.045
        },
        "num_failing_tests": 3
    },
    {
        "name": "CheckLevel.isOn#30",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0449
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processIfStatement#564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement)",
        "snippet": "    @Override\n    Node processIfStatement(IfStatement statementNode) {\n      Node node = new Node(Token.IF);\n      node.addChildToBack(transform(statementNode.getCondition()));\n      node.addChildToBack(transform(statementNode.getThenPart()));\n      if (statementNode.getElsePart() != null) {\n        node.addChildToBack(transform(statementNode.getElsePart()));\n      }\n      return node;\n    }\n",
        "begin_line": 564,
        "end_line": 573,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0444
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNominalType#276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNameNode#883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNameNode(com.google.javascript.jscomp.parsing.JsDocToken, int, int, boolean)",
        "snippet": "  private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                          int startCharno, boolean matchingLC) {\n    return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n  }\n",
        "begin_line": 883,
        "end_line": 886,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @param lineno The line of the type expression.\n   * @param startCharno The starting character position of the type expression.\n   * @param matchingLC Whether the type expression starts with a \"{\".\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#927",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, int, int, boolean, boolean)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames) {\n    Node typeNode = null;\n\n    if (onlyParseSimpleNames) {\n      typeNode = parseTypeNameAnnotation(token);\n    } else {\n      typeNode = parseTypeExpressionAnnotation(token);\n    }\n\n    if (typeNode != null && !matchingLC) {\n      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n    }\n\n    int endCharno = stream.getCharno();\n\n    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n        matchingLC);\n\n    return typeNode;\n  }\n",
        "begin_line": 927,
        "end_line": 949,
        "comment": "\n   * Looks for a parameter type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @param lineno The line of the type expression.\n   * @param startCharno The starting character position of the type expression.\n   * @param matchingLC Whether the type expression starts with a \"{\".\n   * @param onlyParseSimpleNames If true, only simple type names are parsed\n   *     (via a call to parseTypeNameAnnotation instead of\n   *     parseTypeExpressionAnnotation).\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeNameAnnotation#1371",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeNameAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeNameAnnotation(JsDocToken token) {\n    if (token == JsDocToken.LC) {\n      skipEOLs();\n      Node typeNode = parseTypeName(next());\n      if (typeNode != null) {\n        skipEOLs();\n        if (!match(JsDocToken.RC)) {\n          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n          next();\n        }\n      }\n\n      return typeNode;\n    } else {\n      return parseTypeName(token);\n    }\n  }\n",
        "begin_line": 1371,
        "end_line": 1388,
        "comment": "\n   * TypeNameAnnotation := TypeName | '{' TypeName '}'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0443
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getConditionExpression#986",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getConditionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getConditionExpression(Node n) {\n    switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }\n    throw new IllegalArgumentException(n + \" does not have a condition.\");\n  }\n",
        "begin_line": 986,
        "end_line": 1005,
        "comment": "\n   * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.\n   * @param n a node with an outgoing conditional CFG edge\n   * @return the condition node or null if the condition is not obviously a node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.044
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.getPropertyType#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.getPropertyType(com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  private JSType getPropertyType(JSType objType, String propName,\n      Node n, FlowScope scope) {\n    // Scopes sometimes contain inferred type info about qualified names.\n    String qualifiedName = n.getQualifiedName();\n    StaticSlot<JSType> var = scope.getSlot(qualifiedName);\n    if (var != null) {\n      JSType varType = var.getType();\n      if (varType != null) {\n        if (varType.equals(getNativeType(UNKNOWN_TYPE)) &&\n            var != syntacticScope.getSlot(qualifiedName)) {\n          // If the type of this qualified name has been checked in this scope,\n          // then use CHECKED_UNKNOWN_TYPE instead to indicate that.\n          return getNativeType(CHECKED_UNKNOWN_TYPE);\n        } else {\n          return varType;\n        }\n      }\n    }\n\n    JSType propertyType = null;\n    if (objType != null) {\n      propertyType = objType.findPropertyType(propName);\n    }\n\n    if ((propertyType == null || propertyType.isUnknownType()) &&\n        qualifiedName != null) {\n      // If we find this node in the registry, then we can infer its type.\n      ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));\n      if (regType != null) {\n        propertyType = regType.getConstructor();\n      }\n    }\n\n    return propertyType;\n  }\n",
        "begin_line": 958,
        "end_line": 992,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0419
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.handleFunction#522",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleFunction(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleFunction(Node node) {\n    // A block transfer control to its first child if it is not empty.\n    Preconditions.checkState(node.getChildCount() >= 3);\n    createEdge(node, Branch.UNCOND,\n        computeFallThrough(node.getFirstChild().getNext().getNext()));\n    Preconditions.checkState(exceptionHandler.peek() == node);\n    exceptionHandler.pop();\n  }\n",
        "begin_line": 522,
        "end_line": 529,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0401
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionType.getAlternates#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.getAlternates()",
        "snippet": "  public Iterable<JSType> getAlternates() {\n    return alternates;\n  }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n   * Gets the alternate types of this union type.\n   * @return The alternate types of this union type. The returned set is\n   *     immutable.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0396
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.doPercentTypedAccounting#785",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void doPercentTypedAccounting(NodeTraversal t, Node n) {\n    JSType type = n.getJSType();\n    if (type == null) {\n      nullCount++;\n    } else if (type.isUnknownType()) {\n      if (reportUnknownTypes.isOn()) {\n        String unresolvedReference = getUnresolvedReference(type);\n        if (unresolvedReference != null) {\n          compiler.report(JSError.make(t, n, reportUnknownTypes,\n                                       UNRESOLVED_TYPE, unresolvedReference));\n        } else {\n          compiler.report(JSError.make(t, n, reportUnknownTypes,\n                                       UNKNOWN_EXPR_TYPE));\n        }\n      }\n      unknownCount++;\n    } else {\n      typedCount++;\n    }\n  }\n",
        "begin_line": 785,
        "end_line": 804,
        "comment": "\n   * Counts the given node in the typed statistics.\n   * @param n a node that should be typed\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0394
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isFunctionPrototypeType#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionPrototypeType()",
        "snippet": "  public boolean isFunctionPrototypeType() {\n    return false;\n  }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": " Whether this is the prototype of a function. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.039
        },
        "num_failing_tests": 1
    },
    {
        "name": "InferJSDocInfo.attachJSDocInfoToNominalTypeOrShape#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.attachJSDocInfoToNominalTypeOrShape(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.JSDocInfo, java.lang.String)",
        "snippet": "  private void attachJSDocInfoToNominalTypeOrShape(\n      ObjectType objType, JSDocInfo docInfo, @Nullable String qName) {\n    if (objType.isConstructor() ||\n        objType.isEnumType() ||\n        objType.isInterface()) {\n      // Named types.\n      if (objType.hasReferenceName() &&\n          objType.getReferenceName().equals(qName)) {\n        objType.setJSDocInfo(docInfo);\n\n        if (objType.isConstructor() || objType.isInterface()) {\n          ((FunctionType) objType).getInstanceType().setJSDocInfo(\n              docInfo);\n        } else if (objType instanceof EnumType) {\n          ((EnumType) objType).getElementsType().setJSDocInfo(docInfo);\n        }\n      }\n    } else if (!objType.isNativeObjectType() &&\n        objType.isFunctionType()) {\n      // Structural functions.\n      objType.setJSDocInfo(docInfo);\n    }\n  }\n",
        "begin_line": 190,
        "end_line": 212,
        "comment": "\n   * Handle cases #1 and #3 in the class doc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0387
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processStringLiteral#699",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processStringLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral)",
        "snippet": "    @Override\n    Node processStringLiteral(StringLiteral literalNode) {\n      Node n = Node.newString(literalNode.getValue());\n      return n;\n    }\n",
        "begin_line": 699,
        "end_line": 703,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.ensureTyped#1673",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void ensureTyped(NodeTraversal t, Node n, JSType type) {\n    // Make sure FUNCTION nodes always get function type.\n    Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());\n    JSDocInfo info = n.getJSDocInfo();\n    if (info != null) {\n      if (info.hasType()) {\n        JSType infoType = info.getType().evaluate(t.getScope());\n        validator.expectCanCast(t, n, infoType, type);\n        type = infoType;\n      }\n\n      if (info.isImplicitCast() && !inExterns) {\n        String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";\n        compiler.report(\n            JSError.make(t, n, ILLEGAL_IMPLICIT_CAST, propName));\n      }\n    }\n\n    if (n.getJSType() == null) {\n      n.setJSType(type);\n    }\n  }\n",
        "begin_line": 1673,
        "end_line": 1697,
        "comment": "\n   * Enforces type casts, and ensures the node is typed.\n   *\n   * A cast in the way that we use it in JSDoc annotations never\n   * alters the generated code and therefore never can induce any runtime\n   * operation. What this means is that a 'cast' is really just a compile\n   * time constraint on the underlying value. In the future, we may add\n   * support for run-time casts for compiled tests.\n   *\n   * To ensure some shred of sanity, we enforce the notion that the\n   * type you are casting to may only meaningfully be a narrower type\n   * than the underlying declared type. We also invalidate optimizations\n   * on bad type casts.\n   *\n   * @param t The traversal object needed to report errors.\n   * @param n The node getting a type assigned to it.\n   * @param type The type to be assigned.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0384
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.getDeclaredGetPropType#1120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.getDeclaredGetPropType(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue) {\n      if (info != null && info.hasType()) {\n        return getDeclaredTypeInAnnotation(t, n, info);\n      } else if (info != null && info.hasEnumParameterType()) {\n        return n.getJSType();\n      } else if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION) {\n        return rhsValue.getJSType();\n      } else {\n        return getDeclaredTypeInAnnotation(t, n, info);\n      }\n    }\n",
        "begin_line": 1120,
        "end_line": 1132,
        "comment": "\n     * Look for a type declaration on a GETPROP node.\n     *\n     * @param info The doc info for this property.\n     * @param n A top-level GETPROP node (it should not be contained inside\n     *     another GETPROP).\n     * @param rhsValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0383
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String)",
        "snippet": "    public static Node newString(String str) {\n        return new StringNode(Token.STRING, str);\n    }\n",
        "begin_line": 498,
        "end_line": 500,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0382
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processInfixExpression#575",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  new Node(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      // Set the line number here so we can fine-tune it in ways transform\n      // doesn't do.\n      n.setLineno(exprNode.getLineno());\n      // Position in new ASTNode is to start of expression, but old-fashioned\n      // line numbers from Node reference the operator token.  Add the offset\n      // to the operator to get the correct character number.\n      n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));\n      return n;\n    }\n",
        "begin_line": 575,
        "end_line": 590,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0374
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.add#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(childCount == 2);\n      int p = NodeUtil.precedence(type);\n      addLeftExpr(first, p, context);\n      cc.addOp(opstr, true);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                first.getNext().getChildCount() <= 1);\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 3);\n        if (first.getNext().getType() != Token.EMPTY) {\n          throw new Error(\"Catch conditions not suppored because I think\" +\n                          \" that it may be a netscape only feature.\");\n        }\n\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), p);\n        cc.addOp(\":\", true);\n        addExpr(last, p);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        boolean stripBlock = n.isSyntheticBlock() ||\n            ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));\n        if (!stripBlock) {\n          cc.beginBlock();\n        }\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (type == Token.SCRIPT) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (!stripBlock) {\n          cc.endBlock(context == Context.STATEMENT);\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyExpression(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(childCount == 2);\n        Preconditions.checkState(last.getType() == Token.STRING);\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(childCount == 2);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP, 0);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        if (first.getType() == Token.NAME &&\n            \"eval\".equals(first.getString()) &&\n            !first.getBooleanProp(Node.DIRECT_EVAL)) {\n          add(\"(0,eval)\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyExpression(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyExpression(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyExpression(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n      case Token.EXPR_RESULT:\n        if (type == Token.EXPR_VOID && validation) {\n          throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n        }\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parens. Otherwise, when parsed, NEW will bind to the\n        // first viable parens\n        if (NodeUtil.containsCall(first)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(childCount == 0);\n        add(jsString(n.getString(), outputCharsetEncoder));\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        Preconditions.checkState(childCount % 2 == 0);\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext().getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          // Object literal property names don't have to be quoted if they are\n          // not JavaScript keywords\n          if (c.getType() == Token.STRING &&\n              !TokenStream.isKeyword(c.getString()) &&\n              TokenStream.isJSIdentifier(c.getString()) &&\n              // do not encode literally any non-literal characters that were\n              // unicode escaped.\n              NodeUtil.isLatin(c.getString())) {\n            add(c.getString());\n          } else {\n            addExpr(c, 1);\n          }\n          add(\":\");\n          addExpr(c.getNext(), 1);\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        add(first);\n        add(\":\");\n        addNonEmptyExpression(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 86,
        "end_line": 624,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0373
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionPrototypeType.getOwnerFunction#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.getOwnerFunction()",
        "snippet": "  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "MemoizedScopeCreator.createScope#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
        "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  @Override\n  public Scope createScope(Node n, Scope parent) {\n    Scope scope = scopes.get(n);\n    if (scope == null) {\n      scope = delegate.createScope(n, parent);\n      scopes.put(n, scope);\n    } else {\n      Preconditions.checkState(parent == scope.getParent());\n    }\n    return scope;\n  }\n",
        "begin_line": 49,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0366
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getSourceName#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName()",
        "snippet": "  public String getSourceName() {\n    return sourceName;\n  }\n",
        "begin_line": 396,
        "end_line": 398,
        "comment": "\n   * Gets the current input source name.\n   *\n   * @return A string that may be empty, but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0363
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodePrinter.maybeLineBreak#428",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeLineBreak()",
        "snippet": "    @Override\n    void maybeLineBreak() {\n      if (lineBreak) {\n        if (sawFunction) {\n          startNewLine();\n          sawFunction = false;\n        }\n      }\n\n      // Since we are at a legal line break, can we upgrade the\n      // preferred break position?  We prefer to break after a\n      // semicolon rather than before it.\n      int len = code.length();\n      if (preferredBreakPosition == len - 1) {\n        char ch = code.charAt(len - 1);\n        if (ch == ';') {\n          preferredBreakPosition = len;\n        }\n      }\n      maybeCutLine();\n    }\n",
        "begin_line": 428,
        "end_line": 448,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0361
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.visitVar#1249",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.visitVar(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void visitVar(NodeTraversal t, Node n) {\n    // TODO(nicksantos): Fix this so that the doc info always shows up\n    // on the NAME node. We probably want to wait for the parser\n    // merge to fix this.\n    JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;\n    for (Node name : n.children()) {\n      Node value = name.getFirstChild();\n      // A null var would indicate a bug in the scope creation logic.\n      Var var = t.getScope().getVar(name.getString());\n\n      if (value != null) {\n        JSType valueType = getJSType(value);\n        JSType nameType = var.getType();\n        nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;\n\n        JSDocInfo info = name.getJSDocInfo();\n        if (info == null) {\n          info = varInfo;\n        }\n        if (info != null && info.hasEnumParameterType()) {\n          // var.getType() can never be null, this would indicate a bug in the\n          // scope creation logic.\n          checkEnumInitializer(\n              t, value,  info.getEnumParameterType().evaluate(t.getScope()));\n        } else if (var.isTypeInferred()) {\n          ensureTyped(t, name, valueType);\n        } else {\n          validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");\n        }\n      }\n    }\n  }\n",
        "begin_line": 1249,
        "end_line": 1281,
        "comment": "\n   * Visits a VAR node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0344
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processKeywordLiteral#592",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral)",
        "snippet": "    @Override\n    Node processKeywordLiteral(KeywordLiteral literalNode) {\n      return new Node(transformTokenType(literalNode.getType()));\n    }\n",
        "begin_line": 592,
        "end_line": 595,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerGroup#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#30",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 67,
        "end_line": 75,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    this.guards = Lists.newArrayList();\n    addGuards(guards);\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.addGuard#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      addGuards(((ComposeWarningsGuard) guard).guards);\n    } else {\n      int index = Collections.binarySearch(this.guards, guard, guardComparator);\n      if (index < 0) {\n        index = -index - 1;\n      }\n      this.guards.add(index, guard);\n    }\n  }\n",
        "begin_line": 55,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "ComposeWarningsGuard.addGuards#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.setWarningLevel#770",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 770,
        "end_line": 772,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerOptions.addWarningsGuard#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    if (warningsGuard == null) {\n      warningsGuard = new ComposeWarningsGuard(guard);\n    } else {\n      warningsGuard.addGuard(guard);\n    }\n  }\n",
        "begin_line": 781,
        "end_line": 787,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0327
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.isVarArgs#1931",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isVarArgs()",
        "snippet": "    public boolean isVarArgs()\n    {\n        return getBooleanProp(VAR_ARGS_NAME);\n    }\n",
        "begin_line": 1931,
        "end_line": 1934,
        "comment": "\n     * Returns whether this node is a variable length argument node. This\n     * method's return value is meaningful only on {@link Token#NAME} nodes\n     * used to define a {@link Token#FUNCTION}'s argument list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0326
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getWarnings#788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 788,
        "end_line": 790,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.getWarnings#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processFunctionNode#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode)",
        "snippet": "   @Override\n  Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = new com.google.javascript.rhino.FunctionNode(\n          name.getIdentifier());\n      node.putProp(Node.SOURCENAME_PROP, functionNode.getSourceName());\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(user) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = new Node(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(user): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 510,
        "end_line": 562,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 2
    },
    {
        "name": "InstanceObjectType.defineProperty#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      boolean inExterns) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, inExterns);\n  }\n",
        "begin_line": 90,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0323
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSType.isUnionType#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public boolean isUnionType() {\n    return false;\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getOutEdges#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getOutEdges(N)",
        "snippet": "  @Override\n  public List<DiGraphEdge<N, E>> getOutEdges(N nodeValue) {\n    LinkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);\n    if (node == null) {\n      throw new IllegalArgumentException(\n          nodeValue + \" does not exist in graph\");\n    }\n    List<DiGraphEdge<N, E>> edgeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : node.getOutEdges()) {\n      edgeList.add(edge);\n    }\n    return edgeList;\n  }\n",
        "begin_line": 131,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.inGlobalScope#605",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inGlobalScope()",
        "snippet": "  boolean inGlobalScope() {\n    return getScopeDepth() <= 1;\n  }\n",
        "begin_line": 605,
        "end_line": 607,
        "comment": "\n   * Determines whether the traversal is currently in the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScopeDepth#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeDepth()",
        "snippet": "  int getScopeDepth() {\n    return scopes.size() + scopeRoots.size();\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0319
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.Property#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.Property.Property(com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "    private Property(JSType type, boolean inferred, boolean inExterns) {\n      this.type = type;\n      this.inferred = inferred;\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 438,
        "end_line": 442,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrototypeObjectType.defineProperty#218",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, boolean)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      boolean inExterns) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    properties.put(name, new Property(type, inferred, inExterns));\n    return true;\n  }\n",
        "begin_line": 218,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 2
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#339",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#688",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 688,
        "end_line": 690,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 2
    },
    {
        "name": "ControlFlowAnalysis.handleExpr#531",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleExpr(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleExpr(Node node) {\n    createEdge(node, Branch.UNCOND, computeFollowNode(node));\n    connectToPossibleExceptionHandler(node, node);\n  }\n",
        "begin_line": 531,
        "end_line": 534,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.endFunction#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFunction(boolean)",
        "snippet": "  void endFunction(boolean statementContext) {\n    sawFunction = true;\n    if (statementContext) {\n      endLine();\n    }\n  }\n",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0317
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatement#1017",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    Node parent = n.getParent();\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node, for instance,\n    // is either part of an expression (as a anonymous function) or as\n    // a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1017,
        "end_line": 1032,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0317
        },
        "num_failing_tests": 2
    },
    {
        "name": "DiagnosticType.disabled#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0316
        },
        "num_failing_tests": 2
    },
    {
        "name": "JSTypeRegistry.createNullableType#760",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 760,
        "end_line": 762,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0316
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.add#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 210,
        "end_line": 226,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0313
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getSource#465",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getSource()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getSource() {\n      return sourceNode;\n    }\n",
        "begin_line": 465,
        "end_line": 468,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0312
        },
        "num_failing_tests": 2
    },
    {
        "name": "Compiler.getErrors#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 781,
        "end_line": 783,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.getErrors#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 2
    },
    {
        "name": "BasicErrorManager.toArray#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 98,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0311
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.getAnnotation#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getAnnotation()",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <A extends Annotation> A getAnnotation() {\n      return (A) annotation;\n    }\n",
        "begin_line": 368,
        "end_line": 372,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "LinkedDirectedGraph.setAnnotation#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
        "snippet": "    @Override\n    public void setAnnotation(Annotation data) {\n      annotation = data;\n    }\n",
        "begin_line": 374,
        "end_line": 377,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeTraversal.traverseFunction#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous(n);\n\n    if (!anonymous) {\n      // Named functions are parent of the containing scope.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (anonymous) {\n      // Anonymous function names are parent of the contained scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 483,
        "end_line": 516,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.031
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processExpressionStatement#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = new Node(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 469,
        "end_line": 474,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0309
        },
        "num_failing_tests": 2
    },
    {
        "name": "FunctionNode.FunctionNode#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/FunctionNode.java",
        "class_name": "com.google.javascript.rhino.FunctionNode",
        "signature": "com.google.javascript.rhino.FunctionNode.FunctionNode(java.lang.String)",
        "snippet": "    public FunctionNode(String name) {\n        super(Token.FUNCTION);\n        functionName = name;\n    }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 2
    },
    {
        "name": "NodeUtil.isFunctionAnonymous#1215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionAnonymous(Node n) {\n    return !isStatement(n);\n  }\n",
        "begin_line": 1215,
        "end_line": 1217,
        "comment": "\n   * Is a FUNCTION node an anonymous function? An anonymous function is one that\n   * has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of anonymous functions:\n   * <pre>\n   * function () {}\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> anonymous:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A FUNCTION node\n   * @return Whether n is an anonymous function\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processReturnStatement#685",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processReturnStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement)",
        "snippet": "    @Override\n    Node processReturnStatement(ReturnStatement statementNode) {\n      Node node = new Node(Token.RETURN);\n      if (statementNode.getReturnValue() != null) {\n        node.addChildToBack(transform(statementNode.getReturnValue()));\n      }\n      return node;\n    }\n",
        "begin_line": 685,
        "end_line": 692,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0306
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile, boolean)",
        "snippet": "  public CompilerInput(JSSourceFile file, boolean isExtern) {\n    this.ast = new JsAst(file);\n    this.name = file.getName();\n    this.isExtern = isExtern;\n  }\n",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getName#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  public String getName() {\n    return name;\n  }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 2
    },
    {
        "name": "CompilerInput.getAstRoot#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    return ast.getAstRoot(compiler);\n  }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0305
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnionType.isUnknownType#250",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    for (JSType t : alternates) {\n      if (t.isUnknownType()) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 250,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.findPropertyType#291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.findPropertyType(java.lang.String)",
        "snippet": "  @Override\n  public JSType findPropertyType(String propertyName) {\n    return hasProperty(propertyName) ?\n        getPropertyType(propertyName) : null;\n  }\n",
        "begin_line": 291,
        "end_line": 295,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addOp#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addOp(java.lang.String, boolean)",
        "snippet": "  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formating around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }\n",
        "begin_line": 232,
        "end_line": 260,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0297
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.maybeEndStatement#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 181,
        "end_line": 190,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendOp#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendOp(java.lang.String, boolean)",
        "snippet": "  void appendOp(String op, boolean binOp) {\n    append(op);\n  }\n",
        "begin_line": 228,
        "end_line": 230,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.TypeInference#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.TypeInference(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.ReverseAbstractInterpreter, com.google.javascript.jscomp.Scope, java.util.Collection<com.google.javascript.jscomp.Scope.Var>)",
        "snippet": "  TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,\n                ReverseAbstractInterpreter reverseInterpreter,\n                Scope functionScope, Collection<Var> unflowableVars) {\n    super(cfg, new LinkedFlowScope.FlowScopeJoinOp());\n    this.compiler = compiler;\n    this.registry = compiler.getTypeRegistry();\n    this.reverseInterpreter = reverseInterpreter;\n    this.syntacticScope = functionScope;\n    this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);\n\n    for (Var unflowableVar : unflowableVars) {\n      String name = unflowableVar.getName();\n      if (functionScope.getVar(name) == unflowableVar) {\n        this.unflowableVarNames.add(name);\n      }\n    }\n\n    Iterator<Var> varIt = functionScope.getVars();\n    while (varIt.hasNext()) {\n      Var var = varIt.next();\n      if (this.unflowableVarNames.contains(var.getName())) {\n        continue;\n      }\n\n      // For each local variable declared with the VAR keyword, the entry\n      // type is VOID.\n      if (var.getParentNode() != null &&\n          var.getType() == null && // no declared type\n          var.getParentNode().getType() == Token.VAR &&\n          !var.isExtern()) {\n        this.functionScope.inferSlotType(\n            var.getName(), getNativeType(VOID_TYPE));\n      }\n    }\n\n    this.bottomScope = LinkedFlowScope.createEntryLattice(\n        new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis()));\n  }\n",
        "begin_line": 107,
        "end_line": 144,
        "comment": " TODO(nicksantos): Create a builder for this class.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0296
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.apply#239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.FlowScopeJoinOp.apply(com.google.javascript.jscomp.FlowScope, com.google.javascript.jscomp.FlowScope)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FlowScope apply(FlowScope a, FlowScope b) {\n      // To join the two scopes, we have to\n      LinkedFlowScope linkedA = (LinkedFlowScope) a;\n      LinkedFlowScope linkedB = (LinkedFlowScope) b;\n      linkedA.frozen = true;\n      linkedB.frozen = true;\n      if (linkedA.optimize() == linkedB.optimize()) {\n        return linkedA.createChildFlowScope();\n      }\n      return new LinkedFlowScope(new FlatFlowScopeCache(linkedA, linkedB));\n    }\n",
        "begin_line": 239,
        "end_line": 251,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0295
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.defineName#412",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.defineName(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    private void defineName(Node name, Node var, Node parent, JSDocInfo info) {\n      Node value = name.getFirstChild();\n\n      if (value != null && value.getType() == Token.FUNCTION) {\n        // function\n        String functionName = name.getString();\n        FunctionType functionType =\n            getFunctionType(functionName, value, info, null);\n        defineSlot(name, var, functionType);\n      } else {\n        // variable's type\n        JSType type = null;\n        if (info == null) {\n          // the variable's type will be inferred\n          CompilerInput input = compiler.getInput(sourceName);\n          Preconditions.checkNotNull(input, sourceName);\n          type = input.isExtern() ?\n              typeRegistry.getNativeType(UNKNOWN_TYPE) : null;\n        } else if (info.hasEnumParameterType()) {\n          type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope));\n        } else if (info.isConstructor()) {\n          type = getFunctionType(name.getString(), value, info, name);\n        } else {\n          type = getDeclaredTypeInAnnotation(sourceName, name, info);\n        }\n\n        defineSlot(name, var, type);\n      }\n    }\n",
        "begin_line": 412,
        "end_line": 441,
        "comment": "\n     * Defines a variable based on the {@link Token#NAME} node passed.\n     * @param name The {@link Token#NAME} node.\n     * @param var The parent of the {@code name} node, which must be a\n     *     {@link Token#VAR} node.\n     * @param parent {@code var}'s parent.\n     * @param info the {@link JSDocInfo} information relating to this\n     *     {@code name} node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addList#720",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext) {\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      boolean isFirst = n == firstInList;\n      if (isFirst) {\n        addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n      } else {\n        cc.listSeparator();\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0);\n      }\n    }\n  }\n",
        "begin_line": 720,
        "end_line": 731,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0294
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.getContextForNoInOperator#956",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context getContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);\n  }\n",
        "begin_line": 956,
        "end_line": 959,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, we can't permit in operators in the\n   * expression.  Pass on the IN_FOR_INIT_CLAUSE flag through subexpressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0293
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunction#1136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunction(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunction(Node n) {\n    return n.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 1136,
        "end_line": 1138,
        "comment": "\n   * Is this a FUNCTION node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0293
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.updateScopeForTypeChange#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.updateScopeForTypeChange(com.google.javascript.jscomp.FlowScope, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void updateScopeForTypeChange(\n      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n    Preconditions.checkNotNull(resultType);\n    switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n        if (var != null && var.isLocal() && var.getScope() != syntacticScope) {\n          assignedOuterLocalVars.put(var.getScope(), var);\n        }\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclare(scope, varName, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }\n  }\n",
        "begin_line": 489,
        "end_line": 535,
        "comment": "\n   * Updates the scope according to the result of a type change, like\n   * an assignment or a type cast.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0292
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.setType#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.setType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    void setType(JSType type) {\n      Preconditions.checkState(isTypeInferred());\n      this.type = type;\n    }\n",
        "begin_line": 221,
        "end_line": 224,
        "comment": "\n     * Sets this variable's type.\n     * @throws IllegalStateException if the variable's type is not inferred\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0292
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isExtern#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isExtern()",
        "snippet": "    boolean isExtern() {\n      return input == null || input.isExtern();\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Returns whether this is defined in an extern file.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0289
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendBlockStart#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockStart()",
        "snippet": "  void appendBlockStart() {\n    append(\"{\");\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.appendBlockEnd#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockEnd()",
        "snippet": "  void appendBlockEnd() {\n    append(\"}\");\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.beginBlock#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.beginBlock()",
        "snippet": "  void beginBlock() {\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n    }\n    appendBlockStart();\n\n    endLine();\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 129,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endBlock#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endBlock(boolean)",
        "snippet": "  void endBlock(boolean statementContext) {\n    appendBlockEnd();\n    if (statementContext) {\n      endLine();\n    }\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 144,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0285
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.level#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    for (WarningsGuard guard : guards) {\n      CheckLevel newLevel = guard.level(error);\n      if (newLevel != null) {\n        return newLevel;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0278
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addList#712",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node)",
        "snippet": "  void addList(Node firstInList) {\n    addList(firstInList, true, Context.OTHER);\n  }\n",
        "begin_line": 712,
        "end_line": 714,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0277
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endLine#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endLine()",
        "snippet": "  void endLine() {\n  }\n",
        "begin_line": 123,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0274
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.maybeCutLine#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          reportLineCut(lineIndex, position - lineStartPosition);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 454,
        "end_line": 470,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0272
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addLeftExpr#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addLeftExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addLeftExpr(Node n, int minPrecedence, Context context) {\n    addExpr(n, minPrecedence, context);\n  }\n",
        "begin_line": 692,
        "end_line": 694,
        "comment": "\n   * Adds a node at the left-hand side of an expression. Unlike\n   * {@link #addExpr(Node,int)}, this preserves information about the context.\n   *\n   * The left side of an expression is special because in the JavaScript\n   * grammar, certain tokens may be parsed differently when they are at\n   * the beginning of a statement. For example, \"{}\" is parsed as a block,\n   * but \"{'x': 'y'}\" is parsed as an object literal.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0271
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.precedence#627",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 627,
        "end_line": 702,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.027
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addExpr#700",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN))){\n      add(\"(\");\n      add(n, clearContextForNoInOperator(context));\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 700,
        "end_line": 710,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.027
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endStatement#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0269
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.endStatement#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0269
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isLatin#1604",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    char LARGEST_BASIC_LATIN = 0x7f;\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 1604,
        "end_line": 1614,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0268
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0268
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.addIdentifier#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0268
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.identifierEscape#889",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // Identifiers should always go to Latin1/ ASCII characters because\n      // different browser's rules for valid identifier characters are\n      // crazy.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 889,
        "end_line": 909,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0268
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.addIdentifier#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0268
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.getLastChar#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.append#409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 409,
        "end_line": 413,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#472",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 472,
        "end_line": 475,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.isWordChar#290",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 290,
        "end_line": 294,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "SymbolTable.VerifyingCallback#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.VerifyingCallback.VerifyingCallback(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private VerifyingCallback(Node expectedRoot, Node actualRoot) {\n      this.actualRoot = actualRoot;\n      this.expectedRoot = expectedRoot;\n    }\n",
        "begin_line": 169,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "SymbolTable.verify#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.VerifyingCallback.verify()",
        "snippet": "    private void verify() {\n      if (cache == null) {\n        // The symbol table was never used, so no need to check anything.\n        return;\n      }\n\n      if (!cache.scopes.isEmpty()) {\n        verifyScopes();\n      }\n    }\n",
        "begin_line": 195,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "SymbolTable.SymbolTable#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.SymbolTable(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SymbolTable(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    compiler.addChangeHandler(this);\n\n    scopeCreator = new SyntacticScopeCreator(compiler);\n  }\n",
        "begin_line": 79,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "SymbolTable.acquire#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.acquire()",
        "snippet": "  synchronized void acquire() {\n    Preconditions.checkState(!locked, \"SymbolTable already acquired\");\n    locked = true;\n  }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "SymbolTable.release#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.release()",
        "snippet": "  synchronized void release() {\n    Preconditions.checkState(locked, \"SymbolTable already released\");\n    locked = false;\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "SymbolTable.verify#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SymbolTable.java",
        "class_name": "com.google.javascript.jscomp.SymbolTable",
        "signature": "com.google.javascript.jscomp.SymbolTable.verify(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  void verify(Node expectedRoot, Node actualRoot) {\n    VerifyingCallback callback = new VerifyingCallback(\n        expectedRoot, actualRoot);\n    callback.verify();\n  }\n",
        "begin_line": 152,
        "end_line": 156,
        "comment": "\n   * Check that this symbol table has been kept up to date. Compiler warnings\n   * will be emitted if anything is wrong.\n   * @param expectedRoot The root of the expected AST.\n   * @param actualRoot The root of the actual AST used with this symbol table.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.acquireSymbolTable#191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acquireSymbolTable()",
        "snippet": "  @Override\n  SymbolTable acquireSymbolTable() {\n    if (symbolTable == null) {\n      symbolTable = new SymbolTable(this);\n    }\n    symbolTable.acquire();\n    return symbolTable;\n  }\n",
        "begin_line": 191,
        "end_line": 198,
        "comment": "\n   * Acquires the symbol table.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "        @Override public boolean isEquivalentTo(Node node) {\n            return (node instanceof StringNode &&\n                    this.str.equals(((StringNode) node).str));\n        }\n",
        "begin_line": 310,
        "end_line": 313,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0266
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.detachFromParent#1731",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.detachFromParent()",
        "snippet": "    public Node detachFromParent() {\n      Preconditions.checkState(parent != null);\n      parent.removeChild(this);\n      return this;\n    }\n",
        "begin_line": 1731,
        "end_line": 1735,
        "comment": "\n     * Removes this node from its parent.  Equivalent to:\n     *     node.getParent().removeChild();\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0266
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeChild#658",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "    public void removeChild(Node child) {\n        Node prev = getChildBefore(child);\n        if (prev == null)\n            first = first.next;\n        else\n            prev.next = child.next;\n        if (child == last) last = prev;\n        child.next = null;\n        child.parent = null;\n    }\n",
        "begin_line": 658,
        "end_line": 667,
        "comment": "\n     * Detach a child from its parent and siblings.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0266
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.checkTreeEqualsSilent#1341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsSilent(com.google.javascript.rhino.Node)",
        "snippet": "    public boolean checkTreeEqualsSilent(Node node2) {\n        return checkTreeEqualsImpl(node2) == null;\n    }\n",
        "begin_line": 1341,
        "end_line": 1343,
        "comment": "\n     * If this is a compilation pass and not a test, do not construct error\n     * strings. Instead return true if the trees are equal.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0265
        },
        "num_failing_tests": 1
    },
    {
        "name": "InferJSDocInfo.visit#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    JSDocInfo docInfo;\n\n    switch (n.getType()) {\n      // Infer JSDocInfo on types of all type declarations on variables.\n      case Token.NAME:\n        if (parent == null) {\n          return;\n        }\n\n        // Only allow JSDoc on VARs, function declarations, and assigns.\n        if (parent.getType() != Token.VAR &&\n            !NodeUtil.isFunctionDeclaration(parent) &&\n            !(parent.getType() == Token.ASSIGN &&\n              n == parent.getFirstChild())) {\n          return;\n        }\n\n        // There are four places the doc info could live.\n        // 1) A FUNCTION node.\n        // /** ... */ function f() { ... }\n        // 2) An ASSIGN parent.\n        // /** ... */ x = function () { ... }\n        // 3) A NAME parent.\n        // var x, /** ... */ y = function() { ... }\n        // 4) A VAR gramps.\n        // /** ... */ var x = function() { ... }\n        docInfo = n.getJSDocInfo();\n        if (docInfo == null &&\n            !(parent.getType() == Token.VAR &&\n                !parent.hasOneChild())) {\n          docInfo = parent.getJSDocInfo();\n        }\n\n        // Try to find the type of the NAME.\n        JSType varType = n.getJSType();\n        if (varType == null && parent.getType() == Token.FUNCTION) {\n          varType = parent.getJSType();\n        }\n\n        // If we have no type to attach JSDocInfo to, then there's nothing\n        // we can do.\n        if (varType == null || docInfo == null) {\n          return;\n        }\n\n        // Dereference the type. If the result is not an object, or already\n        // has docs attached, then do nothing.\n        ObjectType objType = dereferenceToObject(varType);\n        if (objType == null || objType.getJSDocInfo() != null) {\n          return;\n        }\n\n        attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString());\n        break;\n\n      case Token.GETPROP:\n        // Infer JSDocInfo on properties.\n        // There are two ways to write doc comments on a property.\n        //\n        // 1)\n        // /** @deprecated */\n        // obj.prop = ...\n        //\n        // 2)\n        // /** @deprecated */\n        // obj.prop;\n        if (NodeUtil.isExpressionNode(parent) ||\n            (parent.getType() == Token.ASSIGN &&\n             parent.getFirstChild() == n)) {\n          docInfo = n.getJSDocInfo();\n          if (docInfo == null) {\n            docInfo = parent.getJSDocInfo();\n          }\n          if (docInfo != null) {\n            ObjectType lhsType =\n                dereferenceToObject(n.getFirstChild().getJSType());\n            if (lhsType != null) {\n              // Put the JSDoc in the property slot, if there is one.\n              String propName = n.getLastChild().getString();\n              if (lhsType.hasOwnProperty(propName)) {\n                lhsType.setPropertyJSDocInfo(propName, docInfo, inExterns);\n              }\n\n              // Put the JSDoc in any constructors or function shapes as well.\n              ObjectType propType =\n                  dereferenceToObject(lhsType.getPropertyType(propName));\n              if (propType != null) {\n                attachJSDocInfoToNominalTypeOrShape(\n                    propType, docInfo, n.getQualifiedName());\n              }\n            }\n          }\n        }\n        break;\n    }\n  }\n",
        "begin_line": 82,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0265
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.level#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    return group.matches(error) ? level : null;\n  }\n",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.JSError)",
        "snippet": "  public boolean matches(JSError error) {\n    return matches(error.getType());\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n   * Returns whether the given error's type matches a type\n   * in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.report#1440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.report(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  void report(JSError error) {\n    CheckLevel level = error.level;\n    WarningsGuard guard = options_.getWarningsGuard();\n    if (guard != null) {\n      CheckLevel newLevel = guard.level(error);\n      if (newLevel != null) {\n        level = newLevel;\n      }\n    }\n\n    if (level.isOn()) {\n      errorManager.report(level, error);\n    }\n  }\n",
        "begin_line": 1440,
        "end_line": 1454,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.getType#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getType()",
        "snippet": "  public DiagnosticType getType() {\n    return type;\n  }\n",
        "begin_line": 190,
        "end_line": 192,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.opToStr#1329",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 1329,
        "end_line": 1374,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.toSource#1224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options_.prettyPrint);\n    builder.setLineBreak(options_.lineBreak);\n    builder.setSourceMap(sourceMap_);\n    builder.setOutputCharset(options_.outputCharset);\n    return builder.build();\n  }\n",
        "begin_line": 1224,
        "end_line": 1232,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.MappedCodePrinter#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(boolean)",
        "snippet": "    MappedCodePrinter(boolean createSrcMap) {\n      this.createSrcMap = createSrcMap;\n      this.mappings = createSrcMap ? new Stack<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 57,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.startSourceMapping#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      if (createSrcMap\n          && node.getProp(Node.SOURCEFILE_PROP) != null\n          && node.getLineno() > 0) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n\n        // If the index is -1, we are not performing any mapping.\n        if (index >= 0) {\n          Mapping mapping = new Mapping();\n          mapping.node = node;\n          mapping.start = new Position(line, index);\n          mappings.push(mapping);\n          allMappings.add(mapping);\n        }\n      }\n    }\n",
        "begin_line": 82,
        "end_line": 99,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.endSourceMapping#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap\n          && node.getProp(Node.SOURCEFILE_PROP) != null\n          && node.getLineno() > 0) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n\n        // If the index is -1, we are not performing any mapping.\n        if (index >= 0) {\n          Preconditions.checkState(\n              !mappings.empty(), \"Mismatch in start and end of mapping\");\n\n          Mapping mapping = mappings.pop();\n          mapping.end = new Position(line, index);\n        }\n      }\n    }\n",
        "begin_line": 105,
        "end_line": 122,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.CompactCodePrinter#375",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, int, boolean)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak, int lineLengthThreshold,\n        boolean createSrcMap) {\n      super(createSrcMap);\n      this.lineBreak = lineBreak;\n      this.lineLengthThreshold = lineLengthThreshold;\n    }\n",
        "begin_line": 375,
        "end_line": 380,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.getCode#382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 382,
        "end_line": 384,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.Builder#494",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 494,
        "end_line": 496,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setPrettyPrint#502",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPrettyPrint(boolean)",
        "snippet": "    Builder setPrettyPrint(boolean prettyPrint) {\n      this.prettyPrint = prettyPrint;\n      return this;\n    }\n",
        "begin_line": 502,
        "end_line": 505,
        "comment": "\n     * Sets whether pretty printing should be used.\n     * @param prettyPrint If true, pretty printing will be used.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setLineBreak#511",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineBreak(boolean)",
        "snippet": "    Builder setLineBreak(boolean lineBreak) {\n      this.lineBreak = lineBreak;\n      return this;\n    }\n",
        "begin_line": 511,
        "end_line": 514,
        "comment": "\n     * Sets whether line breaking should be done automatically.\n     * @param lineBreak If true, line breaking is done automatically.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setSourceMap#542",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 542,
        "end_line": 545,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.setOutputCharset#551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setOutputCharset(java.nio.charset.Charset)",
        "snippet": "    Builder setOutputCharset(Charset outCharset) {\n      this.outputCharset = outCharset;\n      return this;\n    }\n",
        "begin_line": 551,
        "end_line": 554,
        "comment": "\n     * Set the charset to use when determining what characters need to be\n     * escaped in the output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.build#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n          sourceMap, outputCharset, validation);\n    }\n",
        "begin_line": 567,
        "end_line": 581,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodePrinter.toSource#593",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, boolean, int, com.google.javascript.jscomp.SourceMap, java.nio.charset.Charset, boolean)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 Charset outputCharset,\n                                 boolean validation) {\n    boolean createSourceMap = (sourceMap != null);\n    CodeConsumer cp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, lineLengthThreshold, createSourceMap)\n        : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(cp, outputCharset)\n        : new CodeGenerator(cp, outputCharset, validation);\n    cg.add(root);\n\n    String code = ((HasGetCode) cp).getCode();\n\n    if (createSourceMap) {\n      cp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 593,
        "end_line": 617,
        "comment": "\n   * Converts a tree to js code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.CodeGenerator#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer, java.nio.charset.Charset, boolean)",
        "snippet": "  CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset, boolean validation) {\n    this.validation = validation;\n    cc = consumer;\n    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n      // If we want our default (pretending to be UTF-8, but escaping anything\n      // outside of straight ASCII), then don't use the encoder, but\n      // just special-case the code.  This keeps the normal path through\n      // the code identical to how it's been for years.\n      this.outputCharsetEncoder = null;\n    } else {\n      this.outputCharsetEncoder = outputCharset.newEncoder();\n    }\n  }\n",
        "begin_line": 51,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeGenerator.add#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodeConsumer.continueProcessing#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0264
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.defineInferredProperty#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineInferredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  public final boolean defineInferredProperty(String propertyName,\n      JSType type, boolean inExterns) {\n    // All property definitions go through this method\n    // or defineDeclaredProperty.\n    registry.registerPropertyOnType(propertyName, this);\n\n    if (hasProperty(propertyName)) {\n      JSType originalType = getPropertyType(propertyName);\n      type = originalType == null ? type :\n          originalType.getLeastSupertype(type);\n    }\n\n    return defineProperty(propertyName, type, true, inExterns);\n  }\n",
        "begin_line": 233,
        "end_line": 246,
        "comment": "\n   * Defines a property whose type is inferred.\n   * @param propertyName the property's name\n   * @param type the type\n   * @param inExterns {@code true} if this property was defined in an externs\n   *        file. TightenTypes assumes that any function passed to an externs\n   *        property could be called, so setting this incorrectly could result\n   *        in live code being removed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0263
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.compare#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.compare(com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel, com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel)",
        "snippet": "    public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n      // null is the smallest value\n      if (p2 == null) {\n        if (p1 == null) {\n          return 0;\n        } else {\n          return P1_GT_P2;\n        }\n      }\n\n      // check level\n      if (p1.level != p2.level) {\n        return p2.level.compareTo(p1.level);\n      }\n\n      // sourceName comparison\n      String source1 = p1.error.sourceName;\n      String source2 = p2.error.sourceName;\n      if (source1 != null && source2 != null) {\n        int sourceCompare = source1.compareTo(source2);\n        if (sourceCompare != 0) {\n          return sourceCompare;\n        }\n      } else if (source1 == null && source2 != null) {\n        return P1_LT_P2;\n      } else if (source1 != null && source2 == null) {\n        return P1_GT_P2;\n      }\n      // lineno comparison\n      int lineno1 = p1.error.lineNumber;\n      int lineno2 = p2.error.lineNumber;\n      if (lineno1 != lineno2) {\n        return lineno1 - lineno2;\n      } else if (lineno1 < 0 && 0 <= lineno2) {\n        return P1_LT_P2;\n      } else if (0 <= lineno1 && lineno2 < 0) {\n        return P1_GT_P2;\n      }\n      // charno comparison\n      int charno1 = p1.error.getCharno();\n      int charno2 = p2.error.getCharno();\n      if (charno1 != charno2) {\n        return charno1 - charno2;\n      } else if (charno1 < 0 && 0 <= charno2) {\n        return P1_LT_P2;\n      } else if (0 <= charno1 && charno2 < 0) {\n        return P1_GT_P2;\n      }\n      // description\n      return p1.error.description.compareTo(p2.error.description);\n    }\n",
        "begin_line": 122,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0263
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.getCharno#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getCharno()",
        "snippet": "  public int getCharno() {\n    return charno;\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Get the character number.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0263
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.ErrorWithLevel#179",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel.ErrorWithLevel(com.google.javascript.jscomp.JSError, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "    ErrorWithLevel(JSError error, CheckLevel level) {\n      this.error = error;\n      this.level = level;\n    }\n",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0263
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0262
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEquivalentTo#1543",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "    public boolean isEquivalentTo(Node node) {\n        if (type == Token.ARRAYLIT) {\n            try {\n                int[] indices1 = (int[])getProp(Node.SKIP_INDEXES_PROP);\n                int[] indices2 = (int[])node.getProp(Node.SKIP_INDEXES_PROP);\n                if (indices1 == null) {\n                    if (indices2 != null)\n                        return false;\n                } else if (indices2 == null) {\n                    return false;\n                } else if (indices1.length != indices2.length) {\n                    return false;\n                } else {\n                    for (int i = 0; i < indices1.length; i++) {\n                        if (indices1[i] != indices2[i])\n                            return false;\n                    }\n                }\n            } catch (Exception e) {\n                return false;\n            }\n        } else if (type == Token.INC ||\n                   type == Token.DEC) {\n            int post1 = this.getIntProp(INCRDECR_PROP, 0);\n            int post2 = node.getIntProp(INCRDECR_PROP, 0);\n            if (post1 != post2)\n                return false;\n        } else if (type == Token.STRING) {\n            int quoted1 = this.getIntProp(QUOTED_PROP, 0);\n            int quoted2 = node.getIntProp(QUOTED_PROP, 0);\n            if (quoted1 != quoted2)\n                return false;\n        }\n        return true;\n    }\n",
        "begin_line": 1543,
        "end_line": 1577,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0262
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.redeclare#1178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.redeclare(com.google.javascript.jscomp.FlowScope, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void redeclare(FlowScope scope, String varName, JSType varType) {\n    if (varType == null) {\n      varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    if (unflowableVarNames.contains(varName)) {\n      return;\n    }\n    scope.inferSlotType(varName, varType);\n  }\n",
        "begin_line": 1178,
        "end_line": 1186,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0261
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.JSError#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, int, int, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.CheckLevel, java.lang.String...)",
        "snippet": "  private JSError(String sourceName, int lineno, int charno,\n      DiagnosticType type, CheckLevel level, String... arguments) {\n    this.type = type;\n    this.description = type.format.format(arguments);\n    this.lineNumber = lineno;\n    this.charno = charno;\n    this.sourceName = sourceName;\n    this.level = level == null ? type.level : level;\n  }\n",
        "begin_line": 166,
        "end_line": 174,
        "comment": "\n   * Creates a JSError at a CheckLevel for a source file location.  Package\n   * private to avoid any entanglement with code outside of the compiler.\n   *\n   * This is a preferred internal constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.026
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTypeNormalizer.reportChange#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTypeNormalizer.java",
        "class_name": "com.google.javascript.jscomp.NodeTypeNormalizer",
        "signature": "com.google.javascript.jscomp.NodeTypeNormalizer.reportChange()",
        "snippet": "  private void reportChange() {\n    if (assertOnChange) {\n      Preconditions.checkState(false, \"normalizeNodeType constraints violated\");\n    }\n  }\n",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0259
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getWarningsGuard#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 774,
        "end_line": 776,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0258
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getVar#418",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 418,
        "end_line": 427,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0257
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.getOrCreateConstructor#512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.getOrCreateConstructor()",
        "snippet": "  private FunctionType getOrCreateConstructor() {\n    FunctionType fnType = typeRegistry.createConstructorType(\n        fnName, sourceNode, parametersNode, returnType);\n    JSType existingType = typeRegistry.getType(fnName);\n\n    if (existingType != null) {\n      boolean isInstanceObject = existingType instanceof InstanceObjectType;\n      if (isInstanceObject || fnName.equals(\"Function\")) {\n        FunctionType existingFn =\n            isInstanceObject ?\n            ((InstanceObjectType) existingType).getConstructor() :\n            typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n\n        if (existingFn.getSource() == null) {\n          existingFn.setSource(sourceNode);\n        }\n\n        if (!existingFn.hasEqualCallType(fnType)) {\n          reportWarning(TYPE_REDEFINITION, fnName,\n              fnType.toString(), existingFn.toString());\n        }\n\n        return existingFn;\n      } else {\n        // We fall through and return the created type, even though it will fail\n        // to register. We have no choice as we have to return a function. We\n        // issue an error elsewhere though, so the user should fix it.\n      }\n    }\n\n    maybeSetBaseType(fnType);\n\n    if (scope.isGlobal() && !fnName.isEmpty()) {\n      typeRegistry.declareType(fnName, fnType.getInstanceType());\n    }\n    return fnType;\n  }\n",
        "begin_line": 512,
        "end_line": 548,
        "comment": "\n   * Returns a constructor function either by returning it from the\n   * registry if it exists or creating and registering a new type. If\n   * there is already a type, then warn if the existing type is\n   * different than the one we are creating, though still return the\n   * existing function if possible.  The primary purpose of this is\n   * that registering a constructor will fail for all built-in types\n   * that are initialized in {@link JSTypeRegistry}.  We a) want to\n   * make sure that the type information specified in the externs file\n   * matches what is in the registry and b) annotate the externs with\n   * the {@link JSType} from the registry so that there are not two\n   * separate JSType objects for one type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0256
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.isFunctionType#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isFunctionType()",
        "snippet": "  @Override\n  public boolean isFunctionType() {\n    return true;\n  }\n",
        "begin_line": 245,
        "end_line": 248,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0246
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.apply#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BinaryJoinOp.apply(java.util.List<L>)",
        "snippet": "    @Override\n    public final L apply(List<L> values) {\n      Preconditions.checkArgument(!values.isEmpty());\n      int size = values.size();\n      if (size == 1) {\n        return values.get(0);\n      } else if (size == 2) {\n        return apply(values.get(0), values.get(1));\n      } else {\n        int mid = computeMidPoint(size);\n        return apply(\n            apply(values.subList(0, mid)),\n            apply(values.subList(mid, size)));\n      }\n    }\n",
        "begin_line": 106,
        "end_line": 120,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0244
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.declareType#637",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.declareType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean declareType(String name, JSType t) {\n    if (namesToTypes.containsKey(name)) {\n      return false;\n    }\n    register(t, name);\n    return true;\n  }\n",
        "begin_line": 637,
        "end_line": 643,
        "comment": "\n   * Records declared type names. Given the limited scopes of JavaScript, all\n   * named types are dumped in a common global scope. We may need to revise this\n   * assumption in the future.\n   *\n   * @param name The name of the type to be recorded.\n   * @param t The actual type being associated with the name.\n   * @return True if this name is not already defined, false otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0236
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getImplementedInterfaceCount#1011",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getImplementedInterfaceCount()",
        "snippet": "  public int getImplementedInterfaceCount() {\n    if (info == null || info.implementedInterfaces == null) {\n      return 0;\n    }\n    return info.implementedInterfaces.size();\n  }\n",
        "begin_line": 1011,
        "end_line": 1016,
        "comment": "\n   * Gets the number of interfaces specified by the {@code @implements}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0236
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleSlot.SimpleSlot#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.SimpleSlot(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  public SimpleSlot(String name, JSType type, boolean inferred) {\n    this.name = name;\n    this.type = type;\n    this.inferred = inferred;\n  }\n",
        "begin_line": 52,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0235
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.LinkedFlowSlot#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot.LinkedFlowSlot(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot)",
        "snippet": "    LinkedFlowSlot(String name, JSType type, LinkedFlowSlot parent) {\n      super(name, type, true);\n      this.parent = parent;\n    }\n",
        "begin_line": 373,
        "end_line": 376,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0235
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.inferSlotType#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.inferSlotType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public void inferSlotType(String symbol, JSType type) {\n    Preconditions.checkState(!frozen);\n    lastSlot = new LinkedFlowSlot(symbol, type, lastSlot);\n    depth++;\n    cache.dirtySymbols.add(symbol);\n  }\n",
        "begin_line": 102,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0235
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getTemplateTypeName#1142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getTemplateTypeName()",
        "snippet": "  public String getTemplateTypeName() {\n    if (info == null) {\n      return null;\n    }\n    return info.templateTypeName;\n  }\n",
        "begin_line": 1142,
        "end_line": 1147,
        "comment": " Gets the template type name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0227
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getParameterNames#775",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getParameterNames()",
        "snippet": "  public Set<String> getParameterNames() {\n    if (info == null || info.parameters == null) {\n      return ImmutableSet.of();\n    }\n    return ImmutableSet.copyOf(info.parameters.keySet());\n  }\n",
        "begin_line": 775,
        "end_line": 780,
        "comment": "\n   * Returns the set of names of the defined parameters. The iteration order\n   * of the returned set is not the order in which parameters are defined.\n   *\n   * @return the set of names of the defined parameters. The returned set is\n   *     immutable.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasProperty#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasProperty(String propertyName) {\n    if (properties.get(propertyName) != null) {\n      return true;\n    }\n    ObjectType implicitPrototype = getImplicitPrototype();\n    if (implicitPrototype != null) {\n      return implicitPrototype.hasProperty(propertyName);\n    }\n    return false;\n  }\n",
        "begin_line": 131,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0225
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.visit#436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    JSType childType;\n    JSType leftType, rightType;\n    Node left, right;\n    // To be explicitly set to false if the node is not typeable.\n    boolean typeable = true;\n\n    switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        if (n.getParent().getType() != Token.OBJECTLIT) {\n          ensureTyped(t, n, NUMBER_TYPE);\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.STRING:\n        if (n.getParent().getType() != Token.OBJECTLIT) {\n          ensureTyped(t, n, STRING_TYPE);\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          t.report(n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          t.report(n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          t.report(n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotVoid(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotVoid(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          t.report(n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        break;\n\n      default:\n        t.report(n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }\n\n    // Don't count externs since the user's code may not even use that part.\n    typeable = typeable && !inExterns;\n\n    if (typeable) {\n      doPercentTypedAccounting(t, n);\n    }\n  }\n",
        "begin_line": 436,
        "end_line": 779,
        "comment": "\n   * This is the meat of the type checking.  It is basically one big switch,\n   * with each case representing one type of parse tree node.  The individual\n   * cases are usually pretty straightforward.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of the node n.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0222
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.traverseName#621",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.traverseName(com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  private FlowScope traverseName(Node n, FlowScope scope) {\n    String varName = n.getString();\n    Node value = n.getFirstChild();\n    JSType type = n.getJSType();\n    if (value != null) {\n      scope = traverse(value, scope);\n      updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n         getJSType(value));\n      return scope;\n    } else {\n      StaticSlot<JSType> var = scope.getSlot(varName);\n      if (var != null &&\n          !(var.isTypeInferred() && unflowableVarNames.contains(varName))) {\n        type = var.getType();\n        if (type == null) {\n          type = getNativeType(UNKNOWN_TYPE);\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n  }\n",
        "begin_line": 621,
        "end_line": 642,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0219
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.define#333",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.define(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void define(Node n, Node parent) {\n      Preconditions.checkState(sourceName != null);\n\n      JSDocInfo info = n.getJSDocInfo();\n      switch (n.getType()) {\n        case Token.CATCH:\n          Node catchName = n.getFirstChild();\n          defineSlot(catchName, n, null);\n          break;\n\n        case Token.VAR:\n          if (n.getChildCount() > 1) {\n            if (info != null) {\n              // multiple children\n              compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));\n            }\n            for (Node name : n.children()) {\n              defineName(name, n, parent, name.getJSDocInfo());\n            }\n          } else {\n            Node name = n.getFirstChild();\n            defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());\n          }\n          break;\n\n        case Token.FUNCTION:\n          int parentType = parent.getType();\n          Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");\n          String functionName = n.getFirstChild().getString();\n          FunctionType functionType = getFunctionType(functionName, n, info,\n              null);\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineSlot(n.getFirstChild(), n, functionType);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // TODO(nicksantos): We should support direct assignment to a\n          // prototype, as in:\n          // Foo.prototype = {\n          //   a: function() { ... },\n          //   b: function() { ... }\n          // };\n          // Right now (6/23/08), we understand most of this syntax, but we\n          // don't tie the \"a\" and \"b\" methods to the context of Foo.\n\n          Node rvalue = n.getLastChild();\n          Node lvalue = n.getFirstChild();\n          info = (info != null) ? info : rvalue.getJSDocInfo();\n          if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor()) {\n            getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);\n          } else if (info != null && info.hasEnumParameterType()) {\n            lvalue.setJSType(\n                getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                    info.getEnumParameterType().evaluate(scope)));\n          }\n          break;\n\n        default:\n          throw new IllegalStateException(Integer.toString(n.getType()));\n      }\n    }\n",
        "begin_line": 333,
        "end_line": 401,
        "comment": "\n     * Defines variable(s) or modifies types based on the content of the node\n     * {@code n}. A variable definition creates variables in the current scope,\n     * a function definition creates a binding, and an assignment updates the\n     * type of the namespaces on which the definition is made (e.g.\n     * {@code goog.FOO = 6}).\n     * @param n a {@link Token#VAR}, {@link Token#FUNCTION} or\n     *     {@link Token#ASSIGN} node\n     * @param parent {@code n}'s parent\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0215
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.children#1155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.children()",
        "snippet": "    public Iterable<Node> children() {\n      if (first == null) {\n        return Collections.emptySet();\n      } else {\n        return new SiblingNodeIterable(first);\n      }\n    }\n",
        "begin_line": 1155,
        "end_line": 1161,
        "comment": "\n     * <p>Return an iterable object that iterates over this nodes's children.\n     * The iterator does not support the optional operation\n     * {@link Iterator#remove()}.</p>\n     *\n     * <p>To iterate over a node's siblings, one can write</p>\n     * <pre>Node n = ...;\n     * for (Node child : n.children()) { ...</pre>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0213
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isLocal#162",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isLocal()",
        "snippet": "    public boolean isLocal() {\n      return scope.isLocal();\n    }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\n     * Returns whether this is a local variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0212
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getInitialValue#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getInitialValue()",
        "snippet": "    public Node getInitialValue() {\n      Node parent = getParentNode();\n      return parent.getType() == Token.FUNCTION ?\n          parent : nameNode.getFirstChild();\n    }\n",
        "begin_line": 189,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0209
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.buildAndRegister#463",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.buildAndRegister()",
        "snippet": "  FunctionType buildAndRegister() {\n    if (returnType == null || parametersNode == null) {\n      throw new IllegalStateException(\n          \"All Function types must have params and a return type\");\n    }\n\n    FunctionType fnType;\n    if (isConstructor) {\n      fnType = getOrCreateConstructor();\n    } else if (isInterface) {\n      fnType = typeRegistry.createInterfaceType(fnName, sourceNode);\n      if (scope.isGlobal() && !fnName.isEmpty()) {\n        typeRegistry.declareType(fnName, fnType.getInstanceType());\n      }\n      maybeSetBaseType(fnType);\n    } else {\n      fnType = new FunctionType(typeRegistry, fnName, sourceNode,\n          parametersNode, returnType, thisType, templateTypeName);\n      maybeSetBaseType(fnType);\n    }\n\n    if (implementedInterfaces != null) {\n      fnType.setImplementedInterfaces(implementedInterfaces);\n    }\n\n    typeRegistry.clearTemplateTypeName();\n\n    return fnType;\n  }\n",
        "begin_line": 463,
        "end_line": 491,
        "comment": "\n   * Builds the function type, and puts it in the registry.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0206
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.FunctionType#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String)",
        "snippet": "  public FunctionType(JSTypeRegistry registry, String name, Node source,\n      Node parameters, JSType returnType, ObjectType typeOfThis,\n      String templateTypeName) {\n    this(registry, name, source, parameters, returnType, typeOfThis,\n        templateTypeName, false, false);\n  }\n",
        "begin_line": 178,
        "end_line": 183,
        "comment": "\n   * Creates a function type.\n   * @param registry the owner registry for this type\n   * @param name the function's name or {@code null} to indicate that the\n   *        function is anonymous.\n   * @param source the node defining this function. Its type\n   *        ({@link Node#getType()}) must be {@link Token#FUNCTION}.\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   * @param typeOfThis The type of {@code this} in non-constructors.  May be\n   *        {@code null} to indicate that the type of {@code this} is unknown.\n   * @param templateTypeName The template type name or {@code null}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0205
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableInitializer#794",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        node.addChildToBack(transform(initializerNode.getInitializer()));\n        node.setLineno(node.getLineno());\n      }\n      return node;\n    }\n",
        "begin_line": 794,
        "end_line": 802,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0199
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.TypeCheck#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.TypeCheck(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ReverseAbstractInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry) {\n    this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);\n  }\n",
        "begin_line": 310,
        "end_line": 315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0198
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.getJSDocInfo#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.getJSDocInfo()",
        "snippet": "  @Override public JSDocInfo getJSDocInfo() {\n    if (docInfo != null) {\n      return docInfo;\n    } else if (getImplicitPrototype() != null) {\n      return getImplicitPrototype().getJSDocInfo();\n    } else {\n      return super.getJSDocInfo();\n    }\n  }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "\n   * Gets the docInfo for this type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0195
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getParameterCount#785",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getParameterCount()",
        "snippet": "  public int getParameterCount() {\n    if (info == null || info.parameters == null) {\n      return 0;\n    }\n    return info.parameters.size();\n  }\n",
        "begin_line": 785,
        "end_line": 790,
        "comment": "\n   * Gets the number of parameters defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0195
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeExpression.isOptionalArg#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.isOptionalArg()",
        "snippet": "  public boolean isOptionalArg() {\n    return root.getType() == Token.EQUALS;\n  }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n   * @return Whether this expression denotes an optional {@code @param}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0195
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeExpression.isVarArgs#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.isVarArgs()",
        "snippet": "  public boolean isVarArgs() {\n    return root.getType() == Token.ELLIPSIS;\n  }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n   * @return Whether this expression denotes a rest args {@code @param}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0195
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseParamTypeExpressionAnnotation#1331",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseParamTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n    Preconditions.checkArgument(token == JsDocToken.LC);\n\n    skipEOLs();\n\n    boolean restArg = false;\n    token = next();\n    if (token == JsDocToken.ELLIPSIS) {\n      token = next();\n      if (token == JsDocToken.RC) {\n        // EMPTY represents the UNKNOWN type in the Type AST.\n        return wrapNode(Token.ELLIPSIS, new Node(Token.EMPTY));\n      }\n      restArg = true;\n    }\n\n    Node typeNode = parseTopLevelTypeExpression(token);\n    if (typeNode != null) {\n      skipEOLs();\n      if (restArg) {\n        typeNode = wrapNode(Token.ELLIPSIS, typeNode);\n      } else if (match(JsDocToken.EQUALS)) {\n        next();\n        skipEOLs();\n        typeNode = wrapNode(Token.EQUALS, typeNode);\n      }\n\n      if (!match(JsDocToken.RC)) {\n        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n      } else {\n        next();\n      }\n    }\n\n    return typeNode;\n  }\n",
        "begin_line": 1331,
        "end_line": 1366,
        "comment": "\n   * ParamTypeExpressionAnnotation :=\n   *     '{' OptionalParameterType '}' |\n   *     '{' TopLevelTypeExpression '}' |\n   *     '{' '...' TopLevelTypeExpression '}'\n   *\n   * OptionalParameterType :=\n   *     TopLevelTypeExpression '='\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0195
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markName#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markName(java.lang.String, int, int)",
        "snippet": "  public void markName(String name, int lineno, int charno) {\n    if (currentMarker != null) {\n      currentMarker.name = new JSDocInfo.StringPosition();\n      currentMarker.name.setItem(name);\n      currentMarker.name.setPositionInformation(lineno, charno,\n                                                lineno, charno + name.length());\n    }\n  }\n",
        "begin_line": 175,
        "end_line": 182,
        "comment": "\n   * Adds a name declaration to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordParameter#216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordParameter(java.lang.String, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordParameter(String parameterName, JSTypeExpression type) {\n    if (!hasAnySingletonTypeTags() &&\n        currentInfo.declareParam(type, parameterName)) {\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 216,
        "end_line": 224,
        "comment": "\n   * Records a typed parameter.\n   *\n   * @return {@code true} if the typed parameter was recorded and\n   *     {@code false} if a parameter with the same name was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.declareParam#680",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.declareParam(com.google.javascript.rhino.JSTypeExpression, java.lang.String)",
        "snippet": "  boolean declareParam(JSTypeExpression jsType, String parameter) {\n    lazyInitInfo();\n    if (info.parameters == null) {\n      info.parameters = new LinkedHashMap<String, JSTypeExpression>();\n    }\n    if (!info.parameters.containsKey(parameter)) {\n      info.parameters.put(parameter, jsType);\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 680,
        "end_line": 691,
        "comment": "\n   * Declares a parameter. Parameters are described using the {@code @param}\n   * annotation.\n   *\n   * @param jsType the parameter's type, it may be {@code null} when the\n   *     {@code @param} annotation did not specify a type.\n   * @param parameter the parameter's name\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getParameterType#741",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getParameterType(java.lang.String)",
        "snippet": "  public JSTypeExpression getParameterType(String parameter) {\n    if (info == null || info.parameters == null) {\n      return null;\n    }\n    return info.parameters.get(parameter);\n  }\n",
        "begin_line": 741,
        "end_line": 746,
        "comment": "\n   * Gets the parameter type.\n   * @param parameter the parameter's name\n   * @return the parameter's type or {@code null} if this parameter is not\n   *     defined or has a {@code null} type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordParamTypeNode#901",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordParamTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseAndRecordParamTypeNode(JsDocToken token) {\n    Preconditions.checkArgument(token == JsDocToken.LC);\n    int lineno = stream.getLineno();\n    int startCharno = stream.getCharno();\n\n    Node typeNode = parseParamTypeExpressionAnnotation(token);\n    int endCharno = stream.getCharno();\n\n    jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,\n        true);\n    return typeNode;\n  }\n",
        "begin_line": 901,
        "end_line": 912,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * Parameter type expressions are special for two reasons:\n   * <ol>\n   *   <li>They must begin with '{', to distinguish type names from param names.\n   *   <li>They may end in '=', to denote optionality.\n   * </ol>\n   *\n   * @param token The current token.\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.visit#757",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);\n          if (relationship != null) {\n            ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));\n            ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));\n            if (superClass != null && subClass != null) {\n              FunctionType superCtor = superClass.getConstructor();\n              FunctionType subCtor = subClass.getConstructor();\n\n              if (relationship.type == SubclassType.INHERITS) {\n                validator.expectSuperType(t, n, superClass, subClass);\n              }\n\n              if (superCtor != null && subCtor != null) {\n                codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);\n              }\n            }\n          }\n\n          String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);\n          if (singletonGetterClassName != null) {\n            ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));\n            if (objectType != null) {\n              FunctionType functionType = objectType.getConstructor();\n\n              if (functionType != null) {\n                FunctionType getterType = new FunctionType(\n                    typeRegistry, null, null,\n                    new FunctionParamBuilder(typeRegistry).build(),\n                    objectType, null);\n                codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);\n              }\n            }\n          }\n\n          DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);\n          if (delegateRelationship != null) {\n            ObjectType delegatorObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegator));\n            ObjectType delegateBaseObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegateBase));\n            ObjectType delegateSuperObject = ObjectType.cast(\n                typeRegistry.getType(\n                    codingConvention.getDelegateSuperclassName()));\n            if (delegatorObject != null &&\n                delegateBaseObject != null &&\n                delegateSuperObject != null) {\n              FunctionType delegatorCtor = delegatorObject.getConstructor();\n              FunctionType delegateBaseCtor =\n                  delegateBaseObject.getConstructor();\n              FunctionType delegateSuperCtor =\n                  delegateSuperObject.getConstructor();\n\n              if (delegatorCtor != null && delegateBaseCtor != null &&\n                  delegateSuperCtor != null) {\n                FunctionParamBuilder functionParamBuilder =\n                    new FunctionParamBuilder(typeRegistry);\n                functionParamBuilder.addRequiredParams(\n                    typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));\n                FunctionType findDelegate = new FunctionType(\n                    typeRegistry, null, null, functionParamBuilder.build(),\n                    typeRegistry.createNullableType(delegateBaseObject), null);\n\n                FunctionType delegateProxy =\n                    typeRegistry.createConstructorType(\n                        delegateBaseObject.getReferenceName(), null, null,\n                        null);\n                delegateProxy.setPrototypeBasedOn(delegateBaseCtor);\n\n                codingConvention.applyDelegateRelationship(\n                    delegateSuperObject, delegateBaseObject, delegatorObject,\n                    delegateProxy, findDelegate);\n                delegateProxyMap.put(\n                    delegateProxy.getPrototype(),\n                    delegateBaseCtor.getPrototype());\n              }\n            }\n          }\n\n          ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);\n          if (objectLiteralCast != null) {\n            ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));\n            if (type != null && type.getConstructor() != null) {\n              objectLiteralCast.objectNode.setJSType(type);\n            } else {\n              compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));\n            }\n          }\n          break;\n\n        case Token.FUNCTION:\n          if (!t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          define(n, parent);\n\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          define(n, parent);\n          break;\n\n        case Token.VAR:\n          define(n, parent);\n\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            checkForTypedef(t, n, n.getJSDocInfo());\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }\n    }\n",
        "begin_line": 757,
        "end_line": 912,
        "comment": "\n     * Visit a node in the global scope, and add anything it declares to the\n     * global symbol table.\n     *\n     * @param t The current traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFromTypeNodes#1167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  public JSType createFromTypeNodes(Node n, String sourceName,\n      StaticScope<JSType> scope) {\n    switch (n.getType()) {\n      case Token.LC: // Record type.\n        return createRecordTypeFromNodes(n.getFirstChild(), sourceName, scope);\n\n      case Token.BANG: // Not nullable\n        return createFromTypeNodes(n.getFirstChild(), sourceName, scope)\n            .restrictByNotNullOrUndefined();\n\n      case Token.QMARK: // Nullable\n        return createNullableType(\n            createFromTypeNodes(n.getFirstChild(), sourceName, scope));\n\n      case Token.EQUALS: // Optional\n        return createOptionalType(\n            createFromTypeNodes(n.getFirstChild(), sourceName, scope));\n\n      case Token.ELLIPSIS: // Var args\n        return createOptionalType(\n            createFromTypeNodes(n.getFirstChild(), sourceName, scope));\n\n      case Token.STAR: // The AllType\n        return getNativeType(ALL_TYPE);\n\n      case Token.LB: // Array type\n        // TODO(nicksantos): Enforce membership restrictions on the Array.\n        return getNativeType(ARRAY_TYPE);\n\n      case Token.PIPE: // Union type\n        UnionTypeBuilder builder = new UnionTypeBuilder(this);\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          builder.addAlternate(createFromTypeNodes(child, sourceName, scope));\n        }\n        return builder.build();\n\n      case Token.EMPTY: // When the return value of a function is not specified\n        return getNativeType(UNKNOWN_TYPE);\n\n      case Token.VOID: // Only allowed in the return value of a function.\n        return getNativeType(VOID_TYPE);\n\n      case Token.STRING:\n        JSType namedType = getType(scope, n.getString(), sourceName,\n            n.getLineno(), n.getCharno());\n        if ((namedType instanceof ObjectType) &&\n            !(enumTypeNames.contains(n.getString()))) {\n          Node typeList = n.getFirstChild();\n          if (typeList != null &&\n              (\"Array\".equals(n.getString()) ||\n               \"Object\".equals(n.getString()))) {\n            JSType parameterType =\n                createFromTypeNodes(\n                    typeList.getLastChild(), sourceName, scope);\n            namedType = new ParameterizedType(\n                this, (ObjectType) namedType, parameterType);\n            if (typeList.hasMoreThanOneChild()) {\n              JSType indexType =\n                  createFromTypeNodes(\n                      typeList.getFirstChild(), sourceName, scope);\n              namedType = new IndexedType(\n                  this, (ObjectType) namedType, indexType);\n            }\n          }\n          return createNullableType(namedType);\n\n        } else {\n          return namedType;\n        }\n\n      case Token.FUNCTION:\n        ObjectType thisType = null;\n        Node current = n.getFirstChild();\n        if (current.getType() == Token.THIS) {\n          Node thisNode = current.getFirstChild();\n          thisType =\n              ObjectType.cast(\n                  createFromTypeNodes(thisNode, sourceName, scope)\n                  .restrictByNotNullOrUndefined());\n          if (thisType == null) {\n            reporter.warning(\n                ScriptRuntime.getMessage0(\"msg.jsdoc.function.thisnotobject\"),\n                sourceName, thisNode.getLineno(), \"\", thisNode.getCharno());\n          }\n\n          current = current.getNext();\n        }\n\n        FunctionParamBuilder paramBuilder = new FunctionParamBuilder(this);\n\n        if (current.getType() == Token.LP) {\n          Node args = current.getFirstChild();\n          for (Node arg = current.getFirstChild(); arg != null;\n               arg = arg.getNext()) {\n            if (arg.getType() == Token.ELLIPSIS) {\n              if (arg.getChildCount() == 0) {\n                paramBuilder.addVarArgs(getNativeType(UNKNOWN_TYPE));\n              } else {\n                paramBuilder.addVarArgs(\n                    createFromTypeNodes(\n                        arg.getFirstChild(), sourceName, scope));\n              }\n            } else {\n              JSType type = createFromTypeNodes(arg, sourceName, scope);\n              if (arg.getType() == Token.EQUALS) {\n                boolean addSuccess = paramBuilder.addOptionalParams(type);\n                if (!addSuccess) {\n                  reporter.warning(\n                      ScriptRuntime.getMessage0(\"msg.jsdoc.function.varargs\"),\n                      sourceName, arg.getLineno(), \"\", arg.getCharno());\n                }\n              } else {\n                paramBuilder.addRequiredParams(type);\n              }\n            }\n          }\n          current = current.getNext();\n        }\n\n        JSType returnType = createFromTypeNodes(current, sourceName, scope);\n\n        return new FunctionType(this, null, null, paramBuilder.build(),\n             returnType, thisType, null);\n    }\n\n    throw new IllegalStateException(\n        \"Unexpected node in type expression: \" + n.toString());\n  }\n",
        "begin_line": 1167,
        "end_line": 1295,
        "comment": "\n   * Creates a JSType from the nodes representing a type.\n   * @param n The node with type info.\n   * @param sourceName The source file name.\n   * @param scope A scope for doing type name lookups.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasParameterType#764",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasParameterType(java.lang.String)",
        "snippet": "  public boolean hasParameterType(String parameter) {\n    return getParameterType(parameter) != null;\n  }\n",
        "begin_line": 764,
        "end_line": 766,
        "comment": "\n   * Returns whether the parameter has an attached type.\n   *\n   * @return {@code true} if the parameter has an attached type, {@code false}\n   *     if the parameter has no attached type or does not exist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.traverse#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.traverse(com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  private FlowScope traverse(Node n, FlowScope scope) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.NULL:\n        n.setJSType(getNativeType(NULL_TYPE));\n        break;\n\n      case Token.VOID:\n        n.setJSType(getNativeType(VOID_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.REF_SPECIAL:\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        break;\n\n      case Token.REGEXP:\n        n.setJSType(getNativeType(REGEXP_TYPE));\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n      case Token.NUMBER:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.LP:\n      case Token.GET_REF:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.STRING:\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.TRUE:\n      case Token.FALSE:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().getType() == Token.GETPROP) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.VAR:\n      case Token.RETURN:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n    }\n    if (n.getType() != Token.FUNCTION) {\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.hasType()) {\n        JSType castType = info.getType().evaluate(syntacticScope);\n\n        // A stubbed type cast on a qualified name should take\n        // effect for all subsequent accesses of that name,\n        // so treat it the same as an assign to that name.\n        if (n.isQualifiedName() &&\n            n.getParent().getType() == Token.EXPR_RESULT) {\n          updateScopeForTypeChange(scope, n, n.getJSType(), castType);\n        }\n\n        n.setJSType(castType);\n      }\n    }\n\n    return scope;\n  }\n",
        "begin_line": 278,
        "end_line": 458,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.ensurePropertyDeclared#588",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.ensurePropertyDeclared(com.google.javascript.rhino.Node)",
        "snippet": "  private void ensurePropertyDeclared(Node getprop) {\n    ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());\n    if (ownerType != null) {\n      ensurePropertyDeclaredHelper(getprop, ownerType);\n    }\n  }\n",
        "begin_line": 588,
        "end_line": 594,
        "comment": "\n   * Defines a declared property if it has not been defined yet.\n   *\n   * This handles the case where a property is declared on an object where\n   * the object type is inferred, and so the object type will not\n   * be known in {@code TypedScopeCreator}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0194
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.addParameter#428",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.addParameter(com.google.javascript.rhino.jstype.FunctionParamBuilder, com.google.javascript.rhino.jstype.JSType, boolean, boolean, boolean)",
        "snippet": "  private boolean addParameter(FunctionParamBuilder builder,\n      JSType paramType, boolean warnedAboutArgList,\n      boolean isOptional, boolean isVarArgs) {\n    boolean emittedWarning = false;\n    if (isOptional) {\n      // Remembering that an optional parameter has been encountered\n      // so that if a non optional param is encountered later, an\n      // error can be reported.\n      if (!builder.addOptionalParams(paramType) && !warnedAboutArgList) {\n        reportWarning(VAR_ARGS_MUST_BE_LAST);\n        emittedWarning = true;\n      }\n    } else if (isVarArgs) {\n      if (!builder.addVarArgs(paramType) && !warnedAboutArgList) {\n        reportWarning(VAR_ARGS_MUST_BE_LAST);\n        emittedWarning = true;\n      }\n    } else {\n      if (!builder.addRequiredParams(paramType) && !warnedAboutArgList) {\n        // An optional parameter was seen and this argument is not an optional\n        // or var arg so it is an error.\n        if (builder.hasVarArgs()) {\n          reportWarning(VAR_ARGS_MUST_BE_LAST);\n        } else {\n          reportWarning(OPTIONAL_ARG_AT_END);\n        }\n        emittedWarning = true;\n      }\n    }\n    return emittedWarning;\n  }\n",
        "begin_line": 428,
        "end_line": 458,
        "comment": "\n   * Add a parameter to the param list.\n   * @param builder A builder.\n   * @param paramType The parameter type.\n   * @param warnedAboutArgList Whether we've already warned about arg ordering\n   *     issues (like if optional args appeared before required ones).\n   * @param isOptional Is this an optional parameter?\n   * @param isVarArgs Is this a var args parameter?\n   * @return Whether a warning was emitted.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0192
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getCharIgnoreLineEnd#394",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharIgnoreLineEnd()",
        "snippet": "  private int getCharIgnoreLineEnd() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 394,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0192
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getRemainingJSDocLine#202",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getRemainingJSDocLine()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  String getRemainingJSDocLine() {\n    int c;\n    for (;;) {\n      c = getChar();\n      switch (c) {\n        case '*':\n          if (peekChar() != '/') {\n            addToString(c);\n            break;\n          }\n          // fall through\n        case EOF_CHAR:\n        case '\\n':\n          ungetChar(c);\n          this.string = getStringFromBuffer();\n          stringBufferTop = 0;\n          return this.string;\n\n        default:\n          addToString(c);\n          break;\n      }\n    }\n  }\n",
        "begin_line": 202,
        "end_line": 226,
        "comment": "\n   * Gets the remaining JSDoc line without the {@link JsDocToken#EOL},\n   * {@link JsDocToken#EOF} or {@link JsDocToken#EOC}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0191
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.peekChar#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.peekChar()",
        "snippet": "  private int peekChar() {\n    int c = getChar();\n    ungetChar(c);\n    return c;\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0191
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, int, int)",
        "snippet": "    public Node(int nodeType, Node child, int lineno, int charno) {\n        this(nodeType, child);\n        sourcePosition = mergeLineCharNo(lineno, charno);\n    }\n",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0191
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.wrapNode#1898",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.wrapNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node wrapNode(int type, Node n) {\n    return n == null ? null :\n        new Node(type, n, stream.getLineno(), stream.getCharno());\n  }\n",
        "begin_line": 1898,
        "end_line": 1901,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0191
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.isOptionalParameter#381",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isOptionalParameter(com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private boolean isOptionalParameter(\n      Node param, @Nullable JSDocInfo info) {\n    if (codingConvention.isOptionalParameter(param)) {\n      return true;\n    }\n\n    String paramName = param.getString();\n    return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isOptionalArg();\n  }\n",
        "begin_line": 381,
        "end_line": 390,
        "comment": "\n   * @return Whether the given param is an optional param.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0191
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.declareArguments#1313",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder.declareArguments(com.google.javascript.rhino.Node)",
        "snippet": "    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          }\n        }\n      }\n    } // end declareArguments\n",
        "begin_line": 1313,
        "end_line": 1332,
        "comment": "\n     * Declares all of a function's arguments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0191
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.isVarArgsParameter#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isVarArgsParameter(com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private boolean isVarArgsParameter(\n      Node param, @Nullable JSDocInfo info) {\n    if (codingConvention.isVarArgsParameter(param)) {\n      return true;\n    }\n\n    String paramName = param.getString();\n    return info != null && info.hasParameterType(paramName) &&\n        info.getParameterType(paramName).isVarArgs();\n  }\n",
        "begin_line": 396,
        "end_line": 405,
        "comment": "\n   * Determine whether this is a var args parameter.\n   * @return Whether the given param is a var args param.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0191
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.inferParameterTypes#327",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferParameterTypes(com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info) {\n    if (argsParent == null) {\n      if (info == null) {\n        return this;\n      } else {\n        return inferParameterTypes(info);\n      }\n    }\n\n    // arguments\n    FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList = false;\n    Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType = false;\n    for (Node arg : argsParent.children()) {\n      String argumentName = arg.getString();\n      allJsDocParams.remove(argumentName);\n\n      // type from JSDocInfo\n      JSType parameterType =\n          info != null && info.hasParameterType(argumentName) ?\n          info.getParameterType(argumentName).evaluate(scope) :\n          typeRegistry.getNativeType(UNKNOWN_TYPE);\n      if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n        if (foundTemplateType) {\n          reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n        }\n        foundTemplateType = true;\n      }\n      warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParameter(arg, info),\n          isVarArgsParameter(arg, info));\n    }\n\n    if (templateTypeName != null && !foundTemplateType) {\n      reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n\n    for (String inexistentName : allJsDocParams) {\n      reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n\n    parametersNode = builder.build();\n    return this;\n  }\n",
        "begin_line": 327,
        "end_line": 376,
        "comment": "\n   * Infer the parameter types from the list of argument names and\n   * the doc info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.019
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getJsDocToken#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getJsDocToken()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  final JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop = 0;\n    for (;;) {\n      // eat white spaces\n      for (;;) {\n        charno = -1;\n        c = getChar();\n        if (c == EOF_CHAR) {\n          return JsDocToken.EOF;\n        } else if (c == '\\n') {\n          return JsDocToken.EOL;\n        } else if (!isJSSpace(c)) {\n          break;\n        }\n      }\n\n      switch (c) {\n        // annotation, e.g. @type or @constructor\n        case '@':\n          do {\n            c = getChar();\n            if (isAlpha(c)) {\n              addToString(c);\n            } else {\n              ungetChar(c);\n              this.string = getStringFromBuffer();\n              stringBufferTop = 0;\n              return JsDocToken.ANNOTATION;\n            }\n          } while (true);\n\n        case '*':\n          if (matchChar('/')) {\n            return JsDocToken.EOC;\n          } else {\n            return JsDocToken.STAR;\n          }\n\n        case ',':\n          return JsDocToken.COMMA;\n\n        case '>':\n          return JsDocToken.GT;\n\n        case '(':\n          return JsDocToken.LP;\n\n        case ')':\n          return JsDocToken.RP;\n\n        case '{':\n          return JsDocToken.LC;\n\n        case '}':\n          return JsDocToken.RC;\n\n        case '[':\n          return JsDocToken.LB;\n\n        case ']':\n          return JsDocToken.RB;\n\n        case '?':\n          return JsDocToken.QMARK;\n\n        case '!':\n          return JsDocToken.BANG;\n\n        case ':':\n          return JsDocToken.COLON;\n\n        case '=':\n          return JsDocToken.EQUALS;\n\n        case '|':\n          matchChar('|');\n          return JsDocToken.PIPE;\n\n        case '.':\n          c = getChar();\n          if (c == '<') {\n            return JsDocToken.LT;\n          } else {\n            if (c == '.') {\n              c = getChar();\n              if (c == '.') {\n                return JsDocToken.ELLIPSIS;\n              } else {\n                addToString('.');\n              }\n            }\n            // we may backtrack across line boundary\n            ungetBuffer[ungetCursor++] = c;\n            c = '.';\n          }\n          // fall through\n\n        default: {\n          // recognize a jsdoc string but discard last . if it is followed by\n          // a non-jsdoc comment char, e.g. Array.<\n          int c1 = c;\n          addToString(c);\n          int c2 = getChar();\n          if (!isJSDocString(c2)) {\n            ungetChar(c2);\n            this.string = getStringFromBuffer();\n            stringBufferTop = 0;\n            return JsDocToken.STRING;\n          } else {\n            do {\n              c1 = c2;\n              c2 = getChar();\n              if (c1 == '.' && c2 == '<') {\n                ungetChar(c2);\n                ungetChar(c1);\n                this.string = getStringFromBuffer();\n                stringBufferTop = 0;\n                return JsDocToken.STRING;\n              } else {\n                if (isJSDocString(c2)) {\n                  addToString(c1);\n                } else {\n                  ungetChar(c2);\n                  addToString(c1);\n                  this.string = getStringFromBuffer();\n                  stringBufferTop = 0;\n                  return JsDocToken.STRING;\n                }\n              }\n            } while (true);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 60,
        "end_line": 196,
        "comment": "\n   * Tokenizes JSDoc comments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.019
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getChar#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getChar()",
        "snippet": "  protected int getChar() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for(;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (lineEndChar >= 0) {\n        if (lineEndChar == '\\r' && c == '\\n') {\n          lineEndChar = '\\n';\n          continue;\n        }\n        lineEndChar = -1;\n        lineStart = sourceCursor - 1;\n        lineno++;\n      }\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 338,
        "end_line": 392,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.019
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasOneChild#1292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "    public boolean hasOneChild() {\n      return first != null && first == last;\n    }\n",
        "begin_line": 1292,
        "end_line": 1294,
        "comment": "\n     * Check for one child more efficiently than by iterating over all the\n     * children as is done with Node.getChildCount().\n     * @return Whether the node has exactly one child.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.019
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.update#328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.update()",
        "snippet": "  void update() {\n    charno = getOffset();\n  }\n",
        "begin_line": 328,
        "end_line": 330,
        "comment": "\n   * Allows the JSDocParser to update the character offset\n   * so that getCharno() returns a valid character position.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0189
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.extractMultilineTextualBlock#1113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption)",
        "snippet": "  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    do {\n      switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          String multilineText = builder.toString();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n          }\n\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n\n          if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                                  endLineno, endCharno);\n          }\n\n          return new ExtractionInfo(multilineText, token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n",
        "begin_line": 1113,
        "end_line": 1202,
        "comment": "\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0189
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.restrictByNotNullOrUndefined#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.restrictByNotNullOrUndefined()",
        "snippet": "  @Override\n  public JSType restrictByNotNullOrUndefined() {\n    return registry.getNativeType(JSTypeNative.NO_TYPE);\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0189
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.getDeclaredTypeInAnnotation#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.getDeclaredTypeInAnnotation(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info) {\n      return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);\n    }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "\n     * Returns the type specified in a JSDoc annotation near a GETPROP or NAME.\n     *\n     * Extracts type information from either the {@code @type} tag or from\n     * the {@code @return} and {@code @param} tags.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0189
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.extractMultilineTextualBlock#1082",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token) {\n    return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);\n  }\n",
        "begin_line": 1082,
        "end_line": 1084,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0189
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionType.restrictByNotNullOrUndefined#209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.restrictByNotNullOrUndefined()",
        "snippet": "  @Override\n  public JSType restrictByNotNullOrUndefined() {\n    UnionTypeBuilder restricted = new UnionTypeBuilder(registry);\n    for (JSType t : alternates) {\n      restricted.addAlternate(t.restrictByNotNullOrUndefined());\n    }\n    return restricted.build();\n  }\n",
        "begin_line": 209,
        "end_line": 216,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.lazyInitInfo#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitInfo()",
        "snippet": "  private void lazyInitInfo() {\n    if (info == null) {\n      info = new LazilyInitializedInfo();\n    }\n  }\n",
        "begin_line": 451,
        "end_line": 455,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.CollectProperties#1193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.CollectProperties.CollectProperties(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "      CollectProperties(ObjectType thisType) {\n        this.thisType = thisType;\n      }\n",
        "begin_line": 1193,
        "end_line": 1195,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.visit#1197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.CollectProperties.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n          switch (n.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, n.getFirstChild(), n);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, n, n);\n              break;\n          }\n        }\n      }\n",
        "begin_line": 1197,
        "end_line": 1208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.createScope#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  public Scope createScope(Node root, Scope parent) {\n    // Constructing the global scope is very different than constructing\n    // inner scopes, because only global scopes can contain named classes that\n    // show up in the type registry.\n    Scope newScope = null;\n    if (parent == null) {\n      // Find all the classes in the global scope.\n      newScope = createInitialScope(root);\n\n      GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(newScope);\n      NodeTraversal.traverse(compiler, root, scopeBuilder);\n      scopeBuilder.resolveStubDeclarations();\n\n      // Gather the properties in each function that we found in the\n      // global scope, if that function has a @this type that we can\n      // build properties on.\n      for (Node functionNode : scopeBuilder.nonExternFunctions) {\n        JSType type = functionNode.getJSType();\n        if (type != null && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          ObjectType fnThisType = fnType.getTypeOfThis();\n          if (!fnThisType.isUnknownType()) {\n            NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n                scopeBuilder.new CollectProperties(fnThisType));\n          }\n        }\n      }\n\n      codingConvention.defineDelegateProxyProperties(\n          typeRegistry, newScope, delegateProxyMap);\n    } else {\n      newScope = new Scope(parent, root);\n      (new LocalScopeBuilder(newScope)).build();\n    }\n    typeRegistry.resolveTypesInScope(newScope);\n    return newScope;\n  }\n",
        "begin_line": 121,
        "end_line": 157,
        "comment": "\n   * Creates a scope with all types declared. Declares newly discovered types\n   * and type properties in the type registry.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0188
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTopLevelTypeExpression#1396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTopLevelTypeExpression(JsDocToken token) {\n    Node typeExpr = parseTypeExpression(token);\n    if (typeExpr != null) {\n      // top-level unions are allowed\n      if (match(JsDocToken.PIPE)) {\n        next();\n        if (match(JsDocToken.PIPE)) {\n          // We support double pipes for backwards-compatibility.\n          next();\n        }\n        skipEOLs();\n        token = next();\n        return parseUnionTypeWithAlternate(token, typeExpr);\n      }\n    }\n    return typeExpr;\n  }\n",
        "begin_line": 1396,
        "end_line": 1412,
        "comment": "\n   * TopLevelTypeExpression := TypeExpression\n   *     | TypeUnionList\n   *\n   * We made this rule up, for the sake of backwards compatibility.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.getDeclaredTypeInAnnotation#276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.getDeclaredTypeInAnnotation(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info) {\n      JSType jsType = null;\n      Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;\n      if (info != null) {\n        if (info.hasType()) {\n          jsType = info.getType().evaluate(scope);\n        } else if (FunctionTypeBuilder.isFunctionTypeDeclaration(info)) {\n          String fnName = node.getQualifiedName();\n\n          // constructors are often handled separately.\n          if (info.isConstructor() && typeRegistry.getType(fnName) != null) {\n            return null;\n          }\n\n          FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);\n\n          // Infer the context type.\n          boolean searchedForThisType = false;\n          if (objNode != null) {\n            if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\")) {\n              builder.inferThisType(info, objNode.getFirstChild());\n              searchedForThisType = true;\n            } else if (objNode.getType() == Token.THIS) {\n              builder.inferThisType(info, objNode.getJSType());\n              searchedForThisType = true;\n            }\n          }\n\n          if (!searchedForThisType) {\n            builder.inferThisType(info, (Node) null);\n          }\n\n          jsType = builder.buildAndRegister();\n        }\n      }\n      return jsType;\n    }\n",
        "begin_line": 276,
        "end_line": 321,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0187
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseBasicTypeExpression#1469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseBasicTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.STAR) {\n      return newNode(Token.STAR);\n    } else if (token == JsDocToken.LB) {\n      skipEOLs();\n      return parseArrayType(next());\n    } else if (token == JsDocToken.LC) {\n      skipEOLs();\n      return parseRecordType(next());\n    } else if (token == JsDocToken.LP) {\n      skipEOLs();\n      return parseUnionType(next());\n    } else if (token == JsDocToken.STRING) {\n      String string = stream.getString();\n      if (\"function\".equals(string)) {\n        skipEOLs();\n        return parseFunctionType(next());\n      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n        return newStringNode(string);\n      } else {\n        return parseTypeName(token);\n      }\n    }\n\n    return reportGenericTypeSyntaxWarning();\n  }\n",
        "begin_line": 1469,
        "end_line": 1494,
        "comment": "\n   * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName\n   *     | FunctionType | UnionType | RecordType | ArrayType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.hasProperty#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasProperty(String name) {\n    return super.hasProperty(name) || \"prototype\".equals(name);\n  }\n",
        "begin_line": 407,
        "end_line": 410,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0186
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeExpression#1444",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.QMARK) {\n      return wrapNode(Token.QMARK, parseBasicTypeExpression(next()));\n    } else if (token == JsDocToken.BANG) {\n      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n      Node basicTypeExpr = parseBasicTypeExpression(token);\n      if (basicTypeExpr != null) {\n        if (match(JsDocToken.QMARK)) {\n          next();\n          return wrapNode(Token.QMARK, basicTypeExpr);\n        } else if (match(JsDocToken.BANG)) {\n          next();\n          return wrapNode(Token.BANG, basicTypeExpr);\n        }\n      }\n\n      return basicTypeExpr;\n    }\n  }\n",
        "begin_line": 1444,
        "end_line": 1463,
        "comment": "\n   * TypeExpression := BasicTypeExpression\n   *     | '?' BasicTypeExpression\n   *     | '!' BasicTypeExpression\n   *     | BasicTypeExpression '?'\n   *     | BasicTypeExpression '!'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0185
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.isJSDocString#281",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSDocString(int)",
        "snippet": "  private boolean isJSDocString(int c) {\n    switch (c) {\n      case '@':\n      case '*':\n      case ',':\n      case '>':\n      case ':':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '?':\n      case '!':\n      case '|':\n      case '=':\n      case EOF_CHAR:\n      case '\\n':\n        return false;\n\n      default:\n        return !isJSSpace(c);\n    }\n  }\n",
        "begin_line": 281,
        "end_line": 305,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0185
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeValidator.expectNotVoid#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "signature": "com.google.javascript.jscomp.TypeValidator.expectNotVoid(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  boolean expectNotVoid(\n      NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n    if (type.isVoidType()) {\n      mismatch(t, n, msg, type, expectedType);\n      return false;\n    }\n    return true;\n  }\n",
        "begin_line": 224,
        "end_line": 231,
        "comment": "\n   * Expect the type to be anything but the void type. If the expectation is not\n   * met, issue a warning at the provided node's source code position. Note that\n   * a union type that includes the void type and at least one other type meets\n   * the expectation.\n   * @return Whether the expectation was met.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.visitGetProp#1143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.visitGetProp(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // GETPROP nodes have an assigned type on their node by the scope creator\n    // if this is an enum declaration. The only namespaced enum declarations\n    // that we allow are of the form object.name = ...;\n    if (n.getJSType() != null && parent.getType() == Token.ASSIGN) {\n      return;\n    }\n\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // TODO(user): remove in favor of flagging every property access on\n    // non-object.\n    if (!validator.expectNotVoid(t, n, childType,\n            \"undefined has no properties\", getNativeType(OBJECT_TYPE))) {\n      ensureTyped(t, n);\n      return;\n    }\n\n    checkPropertyAccess(childType, property.getString(), t, n);\n    ensureTyped(t, n);\n  }\n",
        "begin_line": 1143,
        "end_line": 1169,
        "comment": "\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.getObjectSlot#1101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.getObjectSlot(java.lang.String)",
        "snippet": "    private ObjectType getObjectSlot(String slotName) {\n      Var ownerVar = scope.getVar(slotName);\n      if (ownerVar != null) {\n        JSType ownerVarType = ownerVar.getType();\n        return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());\n      }\n      return null;\n    }\n",
        "begin_line": 1101,
        "end_line": 1109,
        "comment": "\n     * Find the ObjectType associated with the given slot.\n     * @param slotName The name of the slot to find the type in.\n     * @return An object type, or null if this slot does not contain an object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0184
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.defineSlot#657",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.defineSlot(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualfied names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // declared in closest scope?\n      if (scope.isDeclared(variableName, false)) {\n        Var oldVar = scope.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          n.setJSType(type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scope.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    typeRegistry.getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scope.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scope.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    typeRegistry.getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }\n",
        "begin_line": 657,
        "end_line": 722,
        "comment": "\n     * Defines a typed variable. The defining node will be annotated with the\n     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is\n     * inferred.\n     *\n     * Slots may be any variable or any qualified name in the global scope.\n     *\n     * @param n the defining NAME or GETPROP node.\n     * @param parent the {@code n}'s parent.\n     * @param type the variable's type. It may be {@code null} if\n     *     {@code inferred} is {@code true}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isVoidType#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isVoidType()",
        "snippet": "  public boolean isVoidType() {\n    return false;\n  }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeValidator.expectAllInterfacePropertiesImplemented#511",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "signature": "com.google.javascript.jscomp.TypeValidator.expectAllInterfacePropertiesImplemented(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  void expectAllInterfacePropertiesImplemented(FunctionType type) {\n    ObjectType instance = type.getInstanceType();\n    for (ObjectType implemented : type.getAllImplementedInterfaces()) {\n      if (implemented.getImplicitPrototype() != null) {\n        for (String prop :\n            implemented.getImplicitPrototype().getOwnPropertyNames()) {\n          if (!instance.hasProperty(prop)) {\n            Node source = type.getSource();\n            Preconditions.checkNotNull(source);\n            String sourceName = (String) source.getProp(Node.SOURCENAME_PROP);\n            sourceName = sourceName == null ? \"\" : sourceName;\n\n            compiler.report(JSError.make(sourceName, source,\n                INTERFACE_METHOD_NOT_IMPLEMENTED,\n                prop, implemented.toString(), instance.toString()));\n            registerMismatch(instance, implemented);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 511,
        "end_line": 531,
        "comment": "\n   * Expect that all properties on interfaces that this type implements are\n   * implemented.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.visitFunction#1317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.visitFunction(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void visitFunction(NodeTraversal t, Node n) {\n    JSDocInfo info = n.getJSDocInfo();\n\n    FunctionType functionType = (FunctionType) n.getJSType();\n    String functionPrivateName = n.getFirstChild().getString();\n    if (functionType.isInterface() || functionType.isConstructor()) {\n      FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();\n      if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isConstructor() && functionType.isInterface() ||\n           baseConstructor.isInterface() && functionType.isConstructor())) {\n        compiler.report(\n            JSError.make(t, n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n      }\n\n      for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n        boolean badImplementedType = false;\n        ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);\n        if (baseInterfaceObj != null) {\n          FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();\n          if (interfaceConstructor != null &&\n              !interfaceConstructor.isInterface()) {\n            badImplementedType = true;\n          }\n        } else {\n          badImplementedType = true;\n        }\n        if (badImplementedType) {\n          t.report(n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n        }\n      }\n      if (functionType.isConstructor()) {\n        validator.expectAllInterfacePropertiesImplemented(functionType);\n      }\n    }\n  }\n",
        "begin_line": 1317,
        "end_line": 1354,
        "comment": "\n   * Visits a {@link Token#FUNCTION} node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getAllImplementedInterfaces#362",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getAllImplementedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getAllImplementedInterfaces() {\n    Set<ObjectType> interfaces = Sets.newHashSet();\n\n    for (ObjectType type : getImplementedInterfaces()) {\n      addRelatedInterfaces(type, interfaces);\n    }\n    return interfaces;\n  }\n",
        "begin_line": 362,
        "end_line": 369,
        "comment": "\n   * Returns all interfaces implemented by a class or its superclass and any\n   * superclasses for any of those interfaces. If this is called before all\n   * types are resolved, it may return an incomplete set.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeName#1501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeName(JsDocToken token) {\n    if (token != JsDocToken.STRING) {\n      return reportGenericTypeSyntaxWarning();\n    }\n\n    Node typeName = newStringNode(stream.getString());\n    if (match(JsDocToken.LT)) {\n      next();\n      skipEOLs();\n      Node memberType = parseTypeExpressionList(next());\n      if (memberType != null) {\n        typeName.addChildToFront(memberType);\n\n        skipEOLs();\n        if (!match(JsDocToken.GT)) {\n          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n        }\n\n        next();\n      }\n    }\n    return typeName;\n  }\n",
        "begin_line": 1501,
        "end_line": 1523,
        "comment": "\n   * TypeName := NameExpression | NameExpression TypeApplication\n   * TypeApplication := '.<' TypeExpressionList '>'\n   * TypeExpressionList := TypeExpression // a white lie\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.ensureTyped#1647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void ensureTyped(NodeTraversal t, Node n) {\n    ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));\n  }\n",
        "begin_line": 1647,
        "end_line": 1649,
        "comment": "\n   * Ensure that the given node has a type. If it does not have one,\n   * attach the UNKNOWN_TYPE.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isEnumType#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEnumType()",
        "snippet": "  public boolean isEnumType() {\n    return false;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.equals#611",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object otherType) {\n    if (!(otherType instanceof FunctionType)) {\n      return false;\n    }\n    FunctionType that = (FunctionType) otherType;\n    if (!that.isFunctionType()) {\n      return false;\n    }\n    if (this.isConstructor()) {\n      if (that.isConstructor()) {\n        return this == that;\n      }\n      return false;\n    }\n    if (this.isInterface()) {\n      if (that.isInterface()) {\n        return this.getReferenceName().equals(that.getReferenceName());\n      }\n      return false;\n    }\n    if (that.isInterface()) {\n      return false;\n    }\n    return this.typeOfThis.equals(that.typeOfThis) &&\n        this.call.equals(that.call);\n  }\n",
        "begin_line": 611,
        "end_line": 637,
        "comment": "\n   * Two function types are equal if their signatures match. Since they don't\n   * have signatures, two interfaces are equal if their names match.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.StringNode#285",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String, int, int)",
        "snippet": "        StringNode(int type, String str, int lineno, int charno) {\n            super(type, lineno, charno);\n            if (null == str) {\n                throw new IllegalArgumentException(\"StringNode: str is null\");\n            }\n            this.str = str;\n        }\n",
        "begin_line": 285,
        "end_line": 291,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#506",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String, int, int)",
        "snippet": "    public static Node newString(String str, int lineno, int charno) {\n        return new StringNode(Token.STRING, str, lineno, charno);\n    }\n",
        "begin_line": 506,
        "end_line": 508,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.newStringNode#1907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newStringNode(java.lang.String)",
        "snippet": "  private Node newStringNode(String s) {\n    return Node.newString(s, stream.getLineno(), stream.getCharno());\n  }\n",
        "begin_line": 1907,
        "end_line": 1909,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.ensurePropertyDeclaredHelper#600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  private boolean ensurePropertyDeclaredHelper(\n      Node getprop, ObjectType objectType) {\n    String propName = getprop.getLastChild().getString();\n    String qName = getprop.getQualifiedName();\n    if (qName != null) {\n      Var var = syntacticScope.getVar(qName);\n      if (var != null && !var.isTypeInferred()) {\n        // Handle normal declarations that could not be addressed earlier.\n        if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType())))) {\n          return objectType.defineDeclaredProperty(\n              propName, var.getType(), var.isExtern());\n        }\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 600,
        "end_line": 619,
        "comment": "\n   * Declares a property on its owner, if necessary.\n   * @return True if a property was declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getImplementedInterfaces#388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getImplementedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getImplementedInterfaces() {\n    FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;\n    if (superCtor == null) {\n      return implementedInterfaces;\n    } else {\n      return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());\n    }\n  }\n",
        "begin_line": 388,
        "end_line": 397,
        "comment": " Returns interfaces implemented directly by a class or its superclass. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markTypeNode#161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markTypeNode(com.google.javascript.rhino.Node, int, int, int, boolean)",
        "snippet": "  public void markTypeNode(Node typeNode, int lineno, int startCharno, int endCharno,\n                    boolean hasLC) {\n    if (currentMarker != null) {\n      currentMarker.type = new JSDocInfo.TypePosition();\n      currentMarker.type.setItem(typeNode);\n      currentMarker.type.hasBrackets = hasLC;\n      currentMarker.type.setPositionInformation(lineno, startCharno,\n                                                lineno, endCharno);\n    }\n  }\n",
        "begin_line": 161,
        "end_line": 170,
        "comment": "\n   * Adds a type declaration to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.match#1957",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.match(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private boolean match(JsDocToken token) {\n    unreadToken = next();\n    return unreadToken == token;\n  }\n",
        "begin_line": 1957,
        "end_line": 1960,
        "comment": "\n   * Tests whether the next symbol of the token stream matches the specific\n   * token.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.next#1975",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.next()",
        "snippet": "  private JsDocToken next() {\n    if (unreadToken == NO_UNREAD_TOKEN) {\n      return stream.getJsDocToken();\n    } else {\n      return current();\n    }\n  }\n",
        "begin_line": 1975,
        "end_line": 1981,
        "comment": "\n   * Gets the next token of the token stream or the buffered token if a matching\n   * was previously made.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.current#1986",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.current()",
        "snippet": "  private JsDocToken current() {\n    JsDocToken t = unreadToken;\n    unreadToken = NO_UNREAD_TOKEN;\n    return t;\n  }\n",
        "begin_line": 1986,
        "end_line": 1990,
        "comment": "\n   * Gets the current token, invalidating it in the process.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.skipEOLs#1996",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.skipEOLs()",
        "snippet": "  private void skipEOLs() {\n    while (match(JsDocToken.EOL)) {\n      next();\n      if (match(JsDocToken.STAR)) {\n        next();\n      }\n    }\n  }\n",
        "begin_line": 1996,
        "end_line": 2003,
        "comment": "\n   * Skips all EOLs and all empty lines in the JSDoc. Call this method if you\n   * want the JSDoc entry to span multiple lines.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0182
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, int, int)",
        "snippet": "    public Node(int nodeType, int lineno, int charno) {\n        type = nodeType;\n        parent = null;\n        sourcePosition = mergeLineCharNo(lineno, charno);\n    }\n",
        "begin_line": 430,
        "end_line": 434,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeExpression.JSTypeExpression#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.JSTypeExpression(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public JSTypeExpression(Node root, String sourceName,\n      JSTypeRegistry registry) {\n    this.root = root;\n    this.sourceName = sourceName;\n    this.registry = registry;\n  }\n",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.createJSTypeExpression#1029",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createJSTypeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private JSTypeExpression createJSTypeExpression(Node n) {\n    return n == null ? null :\n        new JSTypeExpression(n, sourceName, typeRegistry);\n  }\n",
        "begin_line": 1029,
        "end_line": 1032,
        "comment": "\n   * Constructs a new {@code JSTypeExpression}.\n   * @param n A node. May be null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.checkForTypedef#920",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.checkForTypedef(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info) {\n      if (info == null || !info.hasTypedefType()) {\n        return;\n      }\n\n      String typedef = candidate.getQualifiedName();\n      if (typedef == null) {\n        return;\n      }\n\n      // TODO(nicksantos|user): This is a terrible, terrible hack\n      // to bail out on recusive typedefs. We'll eventually need\n      // to handle these properly.\n      typeRegistry.forwardDeclareType(typedef);\n\n      JSType realType = info.getTypedefType().evaluate(scope);\n      if (realType == null) {\n        compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));\n      }\n\n      typeRegistry.declareType(typedef, realType);\n      if (candidate.getType() == Token.GETPROP) {\n        defineSlot(candidate, candidate.getParent(),\n            typeRegistry.getNativeType(NO_TYPE), false);\n      }\n    }\n",
        "begin_line": 920,
        "end_line": 948,
        "comment": "\n     * Handle typedefs.\n     * @param t The current traversal.\n     * @param candidate A qualified name node.\n     * @param info JSDoc comments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableDeclaration#785",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      Node node = new Node(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 785,
        "end_line": 792,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isQualifiedName#1696",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isQualifiedName()",
        "snippet": "    public boolean isQualifiedName() {\n        switch (getType()) {\n            case Token.NAME:\n            case Token.THIS:\n                return true;\n            case Token.GETPROP:\n                return getFirstChild().isQualifiedName();\n            default:\n                return false;\n        }\n    }\n",
        "begin_line": 1696,
        "end_line": 1706,
        "comment": "\n     * Returns whether a node corresponds to a simple or a qualified name, such\n     * as <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.shouldTraverse#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      // We do want to traverse the name of a named function, but we don't\n      // want to traverse the arguments or body.\n      return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild();\n    }\n",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0181
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.isOptionalParameter#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isOptionalParameter(Node parameter) {\n    return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, parameter names beginning with {@code opt_} are\n   * treated as optional arguments.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.ClosureCodingConvention": "\n   * {@inheritDoc}\n   *\n   * <p>Understands several different inheritance patterns that occur in\n   * Google code (various uses of {@code inherits} and {@code mixin}).\n   ",
            "com.google.javascript.jscomp.DefaultCodingConvention": ""
        },
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 1
    },
    {
        "name": "GoogleCodingConvention.isVarArgsParameter#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return VAR_ARGS_NAME.equals(parameter.getString());\n  }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createConstructorType#1076",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createConstructorType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionType createConstructorType(String name, Node source,\n      Node parameters, JSType returnType) {\n    return new FunctionType(this, name, source, parameters, returnType, null,\n        null, true, false);\n  }\n",
        "begin_line": 1076,
        "end_line": 1080,
        "comment": "\n   * Creates a constructor function type.\n   * @param name the function's name or {@code null} to indicate that the\n   *     function is anonymous.\n   * @param source the node defining this function. Its type\n   *     ({@link Node#getType()}) must be {@link Token#FUNCTION}.\n   * @param parameters the function's parameters or {@code null}\n   *     to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *     that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getImplementedInterfaces#1000",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getImplementedInterfaces()",
        "snippet": "  public List<JSTypeExpression> getImplementedInterfaces() {\n    if (info == null || info.implementedInterfaces == null) {\n      return ImmutableList.of();\n    }\n    return Collections.unmodifiableList(info.implementedInterfaces);\n  }\n",
        "begin_line": 1000,
        "end_line": 1005,
        "comment": "\n   * Returns the types specified by the {@code @implements} annotation.\n   *\n   * @return An immutable list of JSTypeExpression objects that can\n   *    be resolved to types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setImplementedInterfaces#399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setImplementedInterfaces(java.util.List<com.google.javascript.rhino.jstype.ObjectType>)",
        "snippet": "  public void setImplementedInterfaces(List<ObjectType> implementedInterfaces) {\n    // Records this type for each implemented interface.\n    for (ObjectType type : implementedInterfaces) {\n      registry.registerTypeImplementingInterface(this, type);\n    }\n    this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);\n  }\n",
        "begin_line": 399,
        "end_line": 405,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.ensureTyped#1651",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.ensureTyped(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void ensureTyped(NodeTraversal t, Node n, JSTypeNative type) {\n    ensureTyped(t, n, getNativeType(type));\n  }\n",
        "begin_line": 1651,
        "end_line": 1653,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.traverseGetProp#932",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.traverseGetProp(com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  private FlowScope traverseGetProp(Node n, FlowScope scope) {\n    Node objNode = n.getFirstChild();\n    Node property = n.getLastChild();\n    scope = traverseChildren(n, scope);\n    n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));\n    return dereferencePointer(n.getFirstChild(), scope);\n  }\n",
        "begin_line": 932,
        "end_line": 940,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.018
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.handleStmt#650",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmt(Node node) {\n    // Simply transfer to the next line.\n    createEdge(node, Branch.UNCOND, computeFollowNode(node));\n    connectToPossibleExceptionHandler(node, node);\n  }\n",
        "begin_line": 650,
        "end_line": 654,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getType#704",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getType(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, java.lang.String, java.lang.String, int, int)",
        "snippet": "  public JSType getType(StaticScope<JSType> scope, String jsTypeName,\n      String sourceName, int lineno, int charno) {\n    JSType type = getType(jsTypeName);\n    if (type == null) {\n      // TODO(user): Each instance should support named type creation using\n      // interning.\n      NamedType namedType =\n          new NamedType(this, jsTypeName, sourceName, lineno, charno);\n      unresolvedNamedTypes.put(scope, namedType);\n      type = namedType;\n    }\n    return type;\n  }\n",
        "begin_line": 704,
        "end_line": 716,
        "comment": "\n   * Looks up a type by name. To allow for forward references to types, an\n   * unrecognized string has to be bound to a NamedType object that will be\n   * resolved later.\n   *\n   * @param scope A scope for doing type name resolution.\n   * @param jsTypeName The name string.\n   * @param sourceName The name of the source file where this reference appears.\n   * @param lineno The line number of the reference.\n   * @return a NamedType if the string argument is not one of the known types,\n   *     otherwise the corresponding JSType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.process#330",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void process(Node externsRoot, Node jsRoot) {\n    Preconditions.checkNotNull(scopeCreator);\n    Preconditions.checkNotNull(topScope);\n\n    Node externsAndJs = jsRoot.getParent();\n    Preconditions.checkState(externsAndJs != null);\n    Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));\n\n    if (externsRoot != null) {\n      check(externsRoot, true);\n    }\n    check(jsRoot, false);\n\n    potentialChecks.flush();\n  }\n",
        "begin_line": 330,
        "end_line": 345,
        "comment": "\n   * Main entry point for this phase of processing. This follows the pattern for\n   * JSCompiler phases.\n   *\n   * @param externsRoot The root of the externs parse tree.\n   * @param jsRoot The root of the input parse tree to be checked.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.check#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.check(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  public void check(Node node, boolean externs) {\n    Preconditions.checkNotNull(node);\n\n    NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);\n    inExterns = externs;\n    t.traverseWithScope(node, topScope);\n    if (externs) {\n      inferJSDocInfo.process(node, null);\n    } else {\n      inferJSDocInfo.process(null, node);\n    }\n  }\n",
        "begin_line": 368,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0179
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.setJSDocInfo#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  public void setJSDocInfo(JSDocInfo info) {\n    docInfo = info;\n  }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n   * Sets the docInfo for this type from the given\n   * {@link JSDocInfo}. The {@code JSDocInfo} may be {@code null}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isNoTypeCheck#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isNoTypeCheck()",
        "snippet": "  public boolean isNoTypeCheck() {\n    return getFlag(MASK_NOCHECK);\n  }\n",
        "begin_line": 350,
        "end_line": 352,
        "comment": "\n   * Returns whether the {@code @nocheck} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.handleFunctionInputs#1289",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder.handleFunctionInputs(com.google.javascript.rhino.Node)",
        "snippet": "    private void handleFunctionInputs(Node fnNode) {\n      // Handle bleeding functions.\n      Node fnNameNode = fnNode.getFirstChild();\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty()) {\n        Scope.Var fnVar = scope.getVar(fnName);\n        if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode)) {\n          defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);\n        }\n      }\n\n      declareArguments(fnNode);\n    }\n",
        "begin_line": 1289,
        "end_line": 1308,
        "comment": " Handle bleeding functions and function parameters. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getNameNode#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getNameNode()",
        "snippet": "    public Node getNameNode() {\n      return nameNode;\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * Returns the name node that produced this variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "InferJSDocInfo.process#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void process(Node externs, Node root) {\n    if (externs != null) {\n      inExterns = true;\n      NodeTraversal.traverse(compiler, externs, this);\n    }\n    if (root != null) {\n      inExterns = false;\n      NodeTraversal.traverse(compiler, root, this);\n    }\n  }\n",
        "begin_line": 71,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.getJSDocInfo#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return null;\n  }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n   * Gets the docInfo for this type. By default, documentation cannot be\n   * attached to arbitrary types. This must be overridden for\n   * programmer-defined types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.visitName#1104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.visitName(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  boolean visitName(NodeTraversal t, Node n, Node parent) {\n    // At this stage, we need to determine whether this is a leaf\n    // node in an expression (which therefore needs to have a type\n    // assigned for it) versus some other decorative node that we\n    // can safely ignore.  Function names, arguments (children of LP nodes) and\n    // variable declarations are ignored.\n    // TODO(user): remove this short-circuiting in favor of a\n    // pre order traversal of the FUNCTION, CATCH, LP and VAR nodes.\n    int parentNodeType = parent.getType();\n    if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR) {\n      return false;\n    }\n\n    JSType type = n.getJSType();\n    if (type == null) {\n      type = getNativeType(UNKNOWN_TYPE);\n      Var var = t.getScope().getVar(n.getString());\n      if (var != null) {\n        JSType varType = var.getType();\n        if (varType != null) {\n          type = varType;\n        }\n      }\n    }\n    ensureTyped(t, n, type);\n    return true;\n  }\n",
        "begin_line": 1104,
        "end_line": 1133,
        "comment": "\n   * Visits a NAME node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of the node n.\n   * @return whether the node is typeable or not\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordConstructor#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConstructor()",
        "snippet": "  public boolean recordConstructor() {\n    if (!hasAnySingletonTypeTags() &&\n        !currentInfo.isConstructor() && !currentInfo.isInterface()) {\n      currentInfo.setConstructor(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 567,
        "end_line": 576,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isConstructor()} flag set to {@code true}.\n   *\n   * @return {@code true} if the constructor was recorded and {@code false}\n   *     if it was already defined or it was incompatible with the existing\n   *     flags\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setConstructor#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setConstructor(boolean)",
        "snippet": "  void setConstructor(boolean value) {\n    setFlag(value, MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "InferJSDocInfo.dereferenceToObject#183",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.dereferenceToObject(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private ObjectType dereferenceToObject(JSType type) {\n    return ObjectType.cast(type == null ? null : type.dereference());\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\n   * Dereferences the given type to an object, or returns null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0178
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getQualifiedName#1674",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getQualifiedName()",
        "snippet": "    public String getQualifiedName() {\n        if (type == Token.NAME) {\n            return getString();\n        } else if (type == Token.GETPROP) {\n            String left = getFirstChild().getQualifiedName();\n            if (left == null) {\n              return null;\n            }\n            return left + \".\" + getLastChild().getString();\n        } else if (type == Token.THIS) {\n             return \"this\";\n        } else {\n            return null;\n\n        }\n\n    }\n",
        "begin_line": 1674,
        "end_line": 1690,
        "comment": "\n     * This function takes a set of GETPROP nodes and produces a string that is\n     * each property separated by dots.  If the node ultimately under the left\n     * sub-tree is not a simple name, this is not a valid qualified name.\n     *\n     * @return a null if this is not a qualified name, or a dot-separated string\n     * of the name and properties.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0177
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.getNativeType#1712",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType getNativeType(JSTypeNative typeId) {\n    return typeRegistry.getNativeType(typeId);\n  }\n",
        "begin_line": 1712,
        "end_line": 1714,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0177
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.autoboxesTo#420",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.autoboxesTo()",
        "snippet": "  public JSType autoboxesTo() {\n    return null;\n  }\n",
        "begin_line": 420,
        "end_line": 422,
        "comment": "\n   * Gets the type to which this type auto-boxes.\n   *\n   * @return the auto-boxed type or {@code null} if this type does not auto-box\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0177
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.dereference#450",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.dereference()",
        "snippet": "  public final ObjectType dereference() {\n    JSType restricted = restrictByNotNullOrUndefined();\n    JSType autobox = restricted.autoboxesTo();\n    return ObjectType.cast(autobox == null ? restricted : autobox);\n  }\n",
        "begin_line": 450,
        "end_line": 454,
        "comment": "\n   * Dereference a type for property access.\n   *\n   * Autoboxes the type, filters null/undefined, and returns the result\n   * iff it's an object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0177
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setFlag#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setFlag(boolean, int)",
        "snippet": "  private void setFlag(boolean value, int mask) {\n    if (value) {\n      bitset |= mask;\n    } else {\n      bitset &= ~mask;\n    }\n  }\n",
        "begin_line": 305,
        "end_line": 311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0177
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.shouldTraverse#382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public boolean shouldTraverse(\n      NodeTraversal t, Node n, Node parent) {\n    JSDocInfo info;\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.VAR:\n        // @notypecheck\n        info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          return false;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // @notypecheck\n        info = n.getJSDocInfo();\n        info = (info == null) ? parent.getJSDocInfo() : info;\n        if (info != null && info.isNoTypeCheck()) {\n          return false;\n        }\n\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          t.report(n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }\n    return true;\n  }\n",
        "begin_line": 382,
        "end_line": 424,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#1924",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL()",
        "snippet": "  private JsDocToken eatTokensUntilEOL() {\n    return eatTokensUntilEOL(next());\n  }\n",
        "begin_line": 1924,
        "end_line": 1926,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateType.TemplateType#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.TemplateType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  TemplateType(JSTypeRegistry registry, String name) {\n    super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n    this.name = name;\n  }\n",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProxyObjectType.ProxyObjectType#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.ProxyObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  ProxyObjectType(JSTypeRegistry registry, ObjectType referencedType) {\n    super(registry);\n    this.referencedType = referencedType;\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.setTemplateTypeName#1300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.setTemplateTypeName(java.lang.String)",
        "snippet": "  public void setTemplateTypeName(String name) {\n    templateTypeName = name;\n    templateType = new TemplateType(this, name);\n  }\n",
        "begin_line": 1300,
        "end_line": 1303,
        "comment": "\n   * Sets the template type name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.inferTemplateTypeName#410",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferTemplateTypeName(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info) {\n    if (info != null) {\n      templateTypeName = info.getTemplateTypeName();\n      typeRegistry.setTemplateTypeName(templateTypeName);\n    }\n    return this;\n  }\n",
        "begin_line": 410,
        "end_line": 416,
        "comment": "\n   * Infer the template type from the doc info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.isFunctionTypeDeclaration#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isFunctionTypeDeclaration(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  static boolean isFunctionTypeDeclaration(JSDocInfo info) {\n    return info.getParameterCount() > 0 ||\n        info.hasReturnType() ||\n        info.hasThisType() ||\n        info.isConstructor() ||\n        info.isInterface();\n  }\n",
        "begin_line": 561,
        "end_line": 567,
        "comment": "\n   * Determines whether the given jsdoc info declares a function type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#1932",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private JsDocToken eatTokensUntilEOL(JsDocToken token) {\n    do {\n      if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF) {\n        state = State.SEARCHING_ANNOTATION;\n        return token;\n      }\n      token = next();\n    } while (true);\n  }\n",
        "begin_line": 1932,
        "end_line": 1941,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.processForTesting#348",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.processForTesting(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Scope processForTesting(Node externsRoot, Node jsRoot) {\n    Preconditions.checkState(scopeCreator == null);\n    Preconditions.checkState(topScope == null);\n\n    Preconditions.checkState(jsRoot.getParent() != null);\n    Node externsAndJsRoot = jsRoot.getParent();\n\n    scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));\n    topScope = scopeCreator.createScope(externsAndJsRoot, null);\n\n    TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);\n\n    inference.process(externsRoot, jsRoot);\n    process(externsRoot, jsRoot);\n\n    return topScope;\n  }\n",
        "begin_line": 348,
        "end_line": 365,
        "comment": " Main entry point of this phase for testing code. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0176
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isDefine#334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isDefine()",
        "snippet": "  public boolean isDefine() {\n    return getFlag(MASK_DEFINE);\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n   * Returns whether the {@code @define} annotation is present on this\n   * {@link JSDocInfo}. If this annotation is present, then the\n   * {@link #getType()} method will retrieve the define type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeCheck.TypeCheck#283",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "signature": "com.google.javascript.jscomp.TypeCheck.TypeCheck(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ReverseAbstractInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.ScopeCreator, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public TypeCheck(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      JSTypeRegistry typeRegistry,\n      Scope topScope,\n      ScopeCreator scopeCreator,\n      CheckLevel reportMissingOverride,\n      CheckLevel reportUnknownTypes) {\n    this.compiler = compiler;\n    this.validator = compiler.getTypeValidator();\n    this.reverseInterpreter = reverseInterpreter;\n    this.typeRegistry = typeRegistry;\n    this.topScope = topScope;\n    this.scopeCreator = scopeCreator;\n    this.reportMissingOverride = reportMissingOverride;\n    this.reportUnknownTypes = reportUnknownTypes;\n    this.inferJSDocInfo = new InferJSDocInfo(compiler);\n  }\n",
        "begin_line": 283,
        "end_line": 299,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "PotentialCheckManager.flush#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PotentialCheckManager.java",
        "class_name": "com.google.javascript.jscomp.PotentialCheckManager",
        "signature": "com.google.javascript.jscomp.PotentialCheckManager.flush()",
        "snippet": "  void flush() {\n    for (PotentialCheck check : checks) {\n      check.evaluate();\n    }\n    checks.clear();\n  }\n",
        "begin_line": 41,
        "end_line": 46,
        "comment": "\n   * Evaluates all pending potential checks. Each check is either reported or\n   * permanently discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.SiblingNodeIterable#1186",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.SiblingNodeIterable(com.google.javascript.rhino.Node)",
        "snippet": "        SiblingNodeIterable(Node start) {\n          this.start = start;\n          this.current = start;\n          this.used = false;\n        }\n",
        "begin_line": 1186,
        "end_line": 1190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.iterator#1192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.iterator()",
        "snippet": "        public Iterator<Node> iterator() {\n          if (!used) {\n            used = true;\n            return this;\n          } else {\n            // We have already used the current object as an iterator;\n            // we must create a new SiblingNodeIterable based on this\n            // iterable's start node.\n            //\n            // Since the primary use case for Node.children is in for\n            // loops, this branch is extremely unlikely.\n            return (new SiblingNodeIterable(start)).iterator();\n          }\n        }\n",
        "begin_line": 1192,
        "end_line": 1205,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasNext#1207",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.hasNext()",
        "snippet": "        public boolean hasNext() {\n            return current != null;\n        }\n",
        "begin_line": 1207,
        "end_line": 1209,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.next#1211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.next()",
        "snippet": "        public Node next() {\n            if (current == null) {\n              throw new NoSuchElementException();\n            }\n            try {\n                return current;\n            } finally {\n                current = current.getNext();\n            }\n        }\n",
        "begin_line": 1211,
        "end_line": 1220,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "InferJSDocInfo.InferJSDocInfo#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.InferJSDocInfo(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  InferJSDocInfo(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0175
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.hasChild#1314",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChild(com.google.javascript.rhino.Node)",
        "snippet": "    public boolean hasChild(Node child) {\n      for (Node n = first; n != null; n = n.getNext()) {\n        if (child == n) {\n          return true;\n        }\n      }\n      return false;\n    }\n",
        "begin_line": 1314,
        "end_line": 1321,
        "comment": " Intended for testing and verification only.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isExpressionNode#770",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExpressionNode(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExpressionNode(Node n) {\n    return n.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 770,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getTypeOfThis#781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getTypeOfThis()",
        "snippet": "  public ObjectType getTypeOfThis() {\n    return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;\n  }\n",
        "begin_line": 781,
        "end_line": 784,
        "comment": "\n   * Gets the type of {@code this} in this function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonTypeTags#803",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonTypeTags()",
        "snippet": "  private boolean hasAnySingletonTypeTags() {\n    return currentInfo.hasType() ||\n        currentInfo.hasTypedefType() ||\n        currentInfo.hasEnumParameterType();\n  }\n",
        "begin_line": 803,
        "end_line": 807,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.LocalScopeBuilder#1245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder.LocalScopeBuilder(com.google.javascript.jscomp.Scope)",
        "snippet": "    private LocalScopeBuilder(Scope scope) {\n      super(scope);\n    }\n",
        "begin_line": 1245,
        "end_line": 1247,
        "comment": "\n     * @param scope The scope that we're builidng.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.build#1252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder.build()",
        "snippet": "    void build() {\n      NodeTraversal.traverse(compiler, scope.getRootNode(), this);\n    }\n",
        "begin_line": 1252,
        "end_line": 1254,
        "comment": "\n     * Traverse the scope root and build it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.getFunctionType#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.getFunctionType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
        "snippet": "    private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode) {\n      FunctionType functionType = null;\n\n      // Handle function aliases.\n      if (rValue != null && rValue.isQualifiedName()) {\n        Var var = scope.getVar(rValue.getQualifiedName());\n        if (var != null && var.getType() instanceof FunctionType) {\n          functionType = (FunctionType) var.getType();\n          if (functionType != null && functionType.isConstructor()) {\n            typeRegistry.declareType(name, functionType.getInstanceType());\n          }\n        }\n        return functionType;\n      }\n\n      Node owner = null;\n      if (lvalueNode != null) {\n        owner = getPrototypePropertyOwner(lvalueNode);\n      }\n\n      Node errorRoot = rValue == null ? lvalueNode : rValue;\n      boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;\n      Node fnRoot = isFnLiteral ? rValue : null;\n      Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;\n\n      if (functionType == null && info != null && info.hasType()) {\n        JSType type = info.getType().evaluate(scope);\n\n        // Known to be not null since we have the FUNCTION token there.\n        type = type.restrictByNotNullOrUndefined();\n        if (type.isFunctionType()) {\n          functionType = (FunctionType) type;\n          functionType.setJSDocInfo(info);\n        }\n      }\n\n      if (functionType == null) {\n        if (info == null ||\n            !FunctionTypeBuilder.isFunctionTypeDeclaration(info)) {\n          // We don't really have any type information in the annotation.\n          // Before we give up on this function, look at the object we're\n          // assigning it to. For example, if the function looks like this:\n          // SubFoo.prototype.bar = function() { ... };\n          // We can use type information on Foo.prototype.bar and apply it\n          // to this function.\n          if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n              lvalueNode.isQualifiedName()) {\n            Var var = scope.getVar(\n                lvalueNode.getFirstChild().getQualifiedName());\n            if (var != null) {\n              ObjectType ownerType = ObjectType.cast(var.getType());\n              FunctionType propType = null;\n              if (ownerType != null) {\n                propType = findOverriddenFunction(\n                    ownerType, lvalueNode.getLastChild().getString());\n              }\n\n              if (propType != null) {\n                functionType =\n                    new FunctionTypeBuilder(\n                        name, compiler, errorRoot, sourceName, scope)\n                    .setSourceNode(fnRoot)\n                    .inferFromOverriddenFunction(propType, parametersNode)\n                    .inferThisType(info, owner)\n                    .buildAndRegister();\n              }\n            }\n          }\n        }\n      } // end if (functionType == null)\n\n      if (functionType == null) {\n        functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .buildAndRegister();\n      }\n\n      // assigning the function type to the function node\n      if (rValue != null) {\n        rValue.setJSType(functionType);\n      }\n\n      // all done\n      return functionType;\n    }\n",
        "begin_line": 454,
        "end_line": 548,
        "comment": "\n     * Gets the function type from the function node and its attached\n     * {@link JSDocInfo}.\n     * @param name the function's name\n     * @param rValue the function node. It must be a {@link Token#FUNCTION}.\n     * @param info the {@link JSDocInfo} attached to the function definition\n     * @param lvalueNode The node where this function is being\n     *     assigned. For example, {@code A.prototype.foo = ...} would be used to\n     *     determine that this function is a method of A.prototype. May be\n     *     null to indicate that this is not being assigned to a qualified name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.exitScope#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.TypeInferringCallback.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    public void exitScope(NodeTraversal t) {\n      Scope scope = t.getScope();\n      Node node = t.getCurrentNode();\n      if (scope.isLocal()) {\n        inferTypes(t, node, scope);\n      }\n    }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.getUnflowableVars#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.getUnflowableVars(com.google.javascript.jscomp.Scope)",
        "snippet": "  private Collection<Var> getUnflowableVars(Scope scope) {\n    List<Var> vars = Lists.newArrayList();\n    for (Scope current = scope;\n         current.isLocal(); current = current.getParent()) {\n      vars.addAll(escapedLocalVars.get(current));\n    }\n    return vars;\n  }\n",
        "begin_line": 83,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Scope#273",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode != parent.rootNode);\n\n    this.parent = parent;\n    this.rootNode = rootNode;\n    JSType nodeType = rootNode.getJSType();\n    if (nodeType != null && nodeType instanceof FunctionType) {\n      thisType = ((FunctionType) nodeType).getTypeOfThis();\n    } else {\n      thisType = parent.thisType;\n    }\n    this.isBottom = false;\n  }\n",
        "begin_line": 273,
        "end_line": 286,
        "comment": "\n   * Creates a Scope given the parent Scope and the root node of the scope.\n   * @param parent  The parent Scope. Cannot be null.\n   * @param rootNode  Typically the FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.setSourceNode#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.setSourceNode(com.google.javascript.rhino.Node)",
        "snippet": "  FunctionTypeBuilder setSourceNode(@Nullable Node sourceNode) {\n    this.sourceNode = sourceNode;\n    return this;\n  }\n",
        "begin_line": 145,
        "end_line": 148,
        "comment": "\n   * Sets the FUNCTION node of this function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getParametersNode#265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getParametersNode()",
        "snippet": "  public Node getParametersNode() {\n    return call == null ? null : call.parameters;\n  }\n",
        "begin_line": 265,
        "end_line": 267,
        "comment": " Gets an LP node that contains all params. May be null. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getBaseType#930",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getBaseType()",
        "snippet": "  public JSTypeExpression getBaseType() {\n    return (info == null) ? null : info.baseType;\n  }\n",
        "begin_line": 930,
        "end_line": 932,
        "comment": "\n   * Gets the base type specified by the {@code @extends} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasBaseType#974",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasBaseType()",
        "snippet": "  public boolean hasBaseType() {\n    return getBaseType() != null;\n  }\n",
        "begin_line": 974,
        "end_line": 976,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @extends}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0174
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasTypedefType#848",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasTypedefType()",
        "snippet": "  public boolean hasTypedefType() {\n    return hasType(TYPEFIELD_TYPEDEF);\n  }\n",
        "begin_line": 848,
        "end_line": 850,
        "comment": "\n   * Returns whether a typedef parameter type, specified using the\n   * {@code @typedef} annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.clearTemplateTypeName#1308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.clearTemplateTypeName()",
        "snippet": "  public void clearTemplateTypeName() {\n    templateTypeName = null;\n    templateType = null;\n  }\n",
        "begin_line": 1308,
        "end_line": 1311,
        "comment": "\n   * Clears the template type name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.lazyInitDocumentation#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitDocumentation()",
        "snippet": "  private boolean lazyInitDocumentation() {\n    if (!includeDocumentation) {\n      return false;\n    }\n\n    if (documentation == null) {\n      documentation = new LazilyInitializedDocumentation();\n    }\n\n    return true;\n  }\n",
        "begin_line": 461,
        "end_line": 471,
        "comment": "\n   * Lazily initializes the documentation information object, but only\n   * if the JSDocInfo was told to keep such information around.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.addMarker#477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.addMarker()",
        "snippet": "  Marker addMarker() {\n    if (!lazyInitDocumentation()) {\n      return null;\n    }\n\n    if (documentation.markers == null) {\n      documentation.markers = Lists.newArrayList();\n    }\n\n    Marker marker = new Marker();\n    documentation.markers.add(marker);\n    return marker;\n  }\n",
        "begin_line": 477,
        "end_line": 489,
        "comment": "\n   * Adds a marker to the documentation (if it exists) and\n   * returns the marker. Returns null otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasReturnType#856",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasReturnType()",
        "snippet": "  public boolean hasReturnType() {\n    return hasType(TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 856,
        "end_line": 858,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @return}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasThisType#918",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasThisType()",
        "snippet": "  public boolean hasThisType() {\n    return thisType != null;\n  }\n",
        "begin_line": 918,
        "end_line": 920,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @this}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.FunctionTypeBuilder#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.FunctionTypeBuilder(java.lang.String, com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.jscomp.Scope)",
        "snippet": "  FunctionTypeBuilder(String fnName, AbstractCompiler compiler,\n      Node errorRoot, String sourceName, Scope scope) {\n    Preconditions.checkNotNull(errorRoot);\n\n    this.fnName = fnName == null ? \"\" : fnName;\n    this.codingConvention = compiler.getCodingConvention();\n    this.typeRegistry = compiler.getTypeRegistry();\n    this.errorRoot = errorRoot;\n    this.sourceName = sourceName;\n    this.compiler = compiler;\n    this.scope = scope;\n  }\n",
        "begin_line": 129,
        "end_line": 140,
        "comment": "\n   * @param fnName The function name.\n   * @param compiler The compiler.\n   * @param errorRoot The node to associate with any warning generated by\n   *     this builder.\n   * @param sourceName A source name for associating any warnings that\n   *     we have to emit.\n   * @param scope The syntactic scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.inferReturnType#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferReturnType(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info) {\n    returnType = info != null && info.hasReturnType() ?\n        info.getReturnType().evaluate(scope) :\n        typeRegistry.getNativeType(UNKNOWN_TYPE);\n    if (templateTypeName != null &&\n        returnType.restrictByNotNullOrUndefined().isTemplateType()) {\n      reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n    return this;\n  }\n",
        "begin_line": 196,
        "end_line": 205,
        "comment": "\n   * Infer the return type from JSDocInfo.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionTypeBuilder.inferThisType#275",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.inferThisType(com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
        "snippet": "  FunctionTypeBuilder inferThisType(JSDocInfo info,\n      @Nullable Node owner) {\n    ObjectType maybeThisType = null;\n    if (info != null && info.hasThisType()) {\n      maybeThisType = ObjectType.cast(info.getThisType().evaluate(scope));\n    }\n    if (maybeThisType != null) {\n      // TODO(user): Doing an instanceof check here is too\n      // restrictive as (Date,Error) is, for instance, an object type\n      // even though its implementation is a UnionType. Would need to\n      // create interfaces JSType, ObjectType, FunctionType etc and have\n      // separate implementation instead of the class hierarchy, so that\n      // union types can also be object types, etc.\n      thisType = maybeThisType;\n    } else if (owner != null &&\n               (info == null || !info.hasType())) {\n      // If the function is of the form:\n      // x.prototype.y = function() {}\n      // then we can assume \"x\" is the @this type. On the other hand,\n      // if it's of the form:\n      // /** @type {Function} */ x.prototype.y;\n      // then we should not give it a @this type.\n      String ownerTypeName = owner.getQualifiedName();\n      ObjectType ownerType = ObjectType.cast(\n          typeRegistry.getType(\n              scope, ownerTypeName, sourceName,\n              owner.getLineno(), owner.getCharno()));\n      if (ownerType != null) {\n        thisType = ownerType;\n      }\n    }\n\n    return this;\n  }\n",
        "begin_line": 275,
        "end_line": 308,
        "comment": "\n   * Infers the type of {@code this}.\n   * @param info The JSDocInfo for this function.\n   * @param owner The node for the object whose prototype \"owns\" this function.\n   *     For example, {@code A} in the expression {@code A.prototype.foo}. May\n   *     be null to indicate that this is not a prototype property.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.populateDefaults#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private static void populateDefaults(JSDocInfo info) {\n    if (info.getVisibility() == null) {\n      info.setVisibility(Visibility.INHERITED);\n    }\n  }\n",
        "begin_line": 122,
        "end_line": 126,
        "comment": " Generate defaults when certain parameters are not specified. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setJSDocInfo#1911",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    public void setJSDocInfo(JSDocInfo info)\n    {\n        putProp(JSDOC_INFO_PROP, info);\n    }\n",
        "begin_line": 1911,
        "end_line": 1914,
        "comment": "\n     * Sets the {@link JSDocInfo} attached to this node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.JSDocInfoBuilder#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.JSDocInfoBuilder(boolean)",
        "snippet": "  public JSDocInfoBuilder(boolean parseDocumentation) {\n    this.currentInfo = new JSDocInfo(parseDocumentation);\n    this.parseDocumentation = parseDocumentation;\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.isPopulated#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulated()",
        "snippet": "  public boolean isPopulated() {\n    return populated;\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.isPopulatedWithFileOverview#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulatedWithFileOverview()",
        "snippet": "  public boolean isPopulatedWithFileOverview() {\n    return isPopulated() &&\n        (currentInfo.hasFileOverview() || currentInfo.isExterns());\n  }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object that has a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.build#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.build(java.lang.String)",
        "snippet": "  public JSDocInfo build(String sourceName) {\n    if (populated) {\n      JSDocInfo built = currentInfo;\n      built.setSourceName(sourceName);\n      populateDefaults(built);\n      populated = false;\n      currentInfo = new JSDocInfo(this.parseDocumentation);\n      return built;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 108,
        "end_line": 119,
        "comment": "\n   * Builds a {@link JSDocInfo} object based on the populated information and\n   * returns it. Once this method is called, the builder can be reused to build\n   * another {@link JSDocInfo} object.\n   *\n   * @param sourceName The source file containing the JSDoc.\n   * @return a {@link JSDocInfo} object populated with the values given to this\n   *     builder. If no value was populated, this method simply returns\n   *     {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markAnnotation#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markAnnotation(java.lang.String, int, int)",
        "snippet": "  public void markAnnotation(String annotation, int lineno, int charno) {\n    JSDocInfo.Marker marker = currentInfo.addMarker();\n\n    if (marker != null) {\n      marker.annotation = new JSDocInfo.StringPosition();\n      marker.annotation.setItem(annotation);\n      marker.annotation.setPositionInformation(lineno, charno, lineno,\n                                               charno + annotation.length());\n    }\n\n    currentMarker = marker;\n  }\n",
        "begin_line": 132,
        "end_line": 143,
        "comment": "\n   * Adds a marker to the current JSDocInfo and populates the marker with the\n   * annotation information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.JSDocInfo#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo(boolean)",
        "snippet": "  JSDocInfo(boolean includeDocumentation) {\n    this.includeDocumentation = includeDocumentation;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n   * Creates a {@link JSDocInfo} object. This object should be created using\n   * a {@link JSDocInfoBuilder}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isConstructor#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConstructor()",
        "snippet": "  public boolean isConstructor() {\n    return getFlag(MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n   * Returns whether the {@code @constructor} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isInterface#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isInterface()",
        "snippet": "  public boolean isInterface() {\n    return getFlag(MASK_INTERFACE);\n  }\n",
        "begin_line": 390,
        "end_line": 392,
        "comment": "\n   * Returns whether the {@code @interface} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isExterns#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isExterns()",
        "snippet": "  public boolean isExterns() {\n    return getFlag(MASK_EXTERNS);\n  }\n",
        "begin_line": 430,
        "end_line": 432,
        "comment": "\n   * Returns whether the {@code @externs} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isJavaDispatch#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isJavaDispatch()",
        "snippet": "  public boolean isJavaDispatch() {\n    return getFlag(MASK_JAVADISPATCH);\n  }\n",
        "begin_line": 438,
        "end_line": 440,
        "comment": "\n   * Returns whether the {@code @javadispath} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getFlag#442",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getFlag(int)",
        "snippet": "  private boolean getFlag(int mask) {\n    return (bitset & mask) != 0x00;\n  }\n",
        "begin_line": 442,
        "end_line": 444,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setVisibility#447",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)",
        "snippet": "  public void setVisibility(Visibility visibility) {\n    this.visibility = visibility;\n  }\n",
        "begin_line": 447,
        "end_line": 449,
        "comment": " Visible for testing.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getVisibility#731",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getVisibility()",
        "snippet": "  public Visibility getVisibility() {\n    return visibility;\n  }\n",
        "begin_line": 731,
        "end_line": 733,
        "comment": "\n   * Gets the visibility specified by {@code @private}, {@code @protected} or\n   * {@code @public} annotation. If no visibility is specified, visibility\n   * is inherited from the base class.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasType#832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType()",
        "snippet": "  public boolean hasType() {\n    return hasType(TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 832,
        "end_line": 834,
        "comment": "\n   * Returns whether a type, specified using the {@code @type} annotation, is\n   * present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasEnumParameterType#840",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasEnumParameterType()",
        "snippet": "  public boolean hasEnumParameterType() {\n    return hasType(TYPEFIELD_ENUM);\n  }\n",
        "begin_line": 840,
        "end_line": 842,
        "comment": "\n   * Returns whether an enum parameter type, specified using the {@code @enum}\n   * annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasType#860",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType(int)",
        "snippet": "  private boolean hasType(int mask) {\n    return (bitset & MASK_TYPEFIELD) == mask;\n  }\n",
        "begin_line": 860,
        "end_line": 862,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasFileOverview#1115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasFileOverview()",
        "snippet": "  public boolean hasFileOverview() {\n    return getFlag(MASK_FILEOVERVIEW);\n  }\n",
        "begin_line": 1115,
        "end_line": 1117,
        "comment": "\n   * Returns whether this has a fileoverview flag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setSourceName#1137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setSourceName(java.lang.String)",
        "snippet": "  void setSourceName(String sourceName) {\n    this.sourceName = sourceName;\n  }\n",
        "begin_line": 1137,
        "end_line": 1139,
        "comment": " Sets the name of the source file that contains this JSDoc. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.JsDocTokenStream#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String, int, int)",
        "snippet": "  JsDocTokenStream(String sourceString, int lineno, int initCharno) {\n    Preconditions.checkNotNull(sourceString);\n    this.lineno = lineno;\n    this.sourceString = sourceString;\n    this.sourceEnd = sourceString.length();\n    this.sourceCursor = this.cursor = 0;\n    this.initLineno = lineno;\n    this.initCharno = initCharno;\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getLineno#228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getLineno()",
        "snippet": "  final int getLineno() { return lineno; }\n",
        "begin_line": 228,
        "end_line": 228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getCharno#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharno()",
        "snippet": "  final int getCharno() {\n    return lineno == initLineno? initCharno + charno : charno;\n  }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getString#234",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getString()",
        "snippet": "  final String getString() { return string; }\n",
        "begin_line": 234,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getStringFromBuffer#238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getStringFromBuffer()",
        "snippet": "  private String getStringFromBuffer() {\n    tokenEnd = cursor;\n    return new String(stringBuffer, 0, stringBufferTop);\n  }\n",
        "begin_line": 238,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.addToString#243",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.addToString(int)",
        "snippet": "  private void addToString(int c) {\n    int N = stringBufferTop;\n    if (N == stringBuffer.length) {\n        char[] tmp = new char[stringBuffer.length * 2];\n        System.arraycopy(stringBuffer, 0, tmp, 0, N);\n        stringBuffer = tmp;\n    }\n    stringBuffer[N] = (char)c;\n    stringBufferTop = N + 1;\n  }\n",
        "begin_line": 243,
        "end_line": 252,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.ungetChar#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetChar(int)",
        "snippet": "  private void ungetChar(int c) {\n    // can not unread past across line boundary\n    assert(!(ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\\n'));\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 254,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.matchChar#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.matchChar(int)",
        "snippet": "  private boolean matchChar(int test) {\n    int c = getCharIgnoreLineEnd();\n    if (c == test) {\n      tokenEnd = cursor;\n      return true;\n    } else {\n      ungetCharIgnoreLineEnd(c);\n      return false;\n    }\n  }\n",
        "begin_line": 261,
        "end_line": 270,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.isAlpha#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isAlpha(int)",
        "snippet": "  private static boolean isAlpha(int c) {\n    // Use 'Z' < 'a'\n    if (c <= 'Z') {\n      return 'A' <= c;\n    } else {\n      return 'a' <= c && c <= 'z';\n    }\n  }\n",
        "begin_line": 272,
        "end_line": 279,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.isJSSpace#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSSpace(int)",
        "snippet": "  static boolean isJSSpace(int c) {\n    if (c <= 127) {\n      return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;\n    } else {\n      return c == 0xA0\n          || Character.getType((char)c) == Character.SPACE_SEPARATOR;\n    }\n  }\n",
        "begin_line": 311,
        "end_line": 318,
        "comment": " As defined in ECMA.  jsscan.c uses C isspace() (which allows\n   * \\v, I think.)  note that code in getChar() implicitly accepts\n   * '\\r' == \\u000D as well.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getOffset#448",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getOffset()",
        "snippet": "  final int getOffset() {\n    return sourceCursor - lineStart - ungetCursor - 1;\n  }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "\n   * Returns the offset into the current line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.ExtractionInfo#1043",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo.ExtractionInfo(java.lang.String, com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "    public ExtractionInfo(String string, JsDocToken token) {\n      this.string = string;\n      this.token = token;\n    }\n",
        "begin_line": 1043,
        "end_line": 1046,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.setFileLevelJsDocBuilder#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder)",
        "snippet": "  void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {\n    this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;\n  }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "\n   * Sets the JsDocBuilder for the file-level (root) node of this parse. The\n   * parser uses the builder to append any preserve annotations it encounters\n   * in jsdoc comments.\n   *\n   * @param fileLevelJsDocBuilder\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.setFileOverviewJSDocInfo#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo) {\n    this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\n   * Sets the file overview JSDocInfo, in order to warn about multiple uses of\n   * the @fileoverview tag in a file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.JsDocInfoParser#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  JsDocInfoParser(JsDocTokenStream stream,\n                  String sourceName,\n                  Config config,\n                  ErrorReporter errorReporter) {\n    this.stream = stream;\n    this.sourceName = sourceName;\n    this.typeRegistry = config.registry;\n    this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n    this.annotationNames = config.annotationNames;\n\n    this.errorReporter = errorReporter;\n  }\n",
        "begin_line": 100,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.extractBlockComment#1216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractBlockComment(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private ExtractionInfo extractBlockComment(JsDocToken token) {\n    StringBuilder builder = new StringBuilder();\n\n    boolean ignoreStar = true;\n\n    do {\n      switch (token) {\n        case ANNOTATION:\n        case EOC:\n        case EOF:\n          return new ExtractionInfo(builder.toString().trim(), token);\n\n        case STAR:\n          if (!ignoreStar) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          ignoreStar = true;\n          builder.append('\\n');\n          token = next();\n          continue;\n\n        default:\n          if (!ignoreStar && builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          ignoreStar = false;\n\n          builder.append(toString(token));\n\n          String line = stream.getRemainingJSDocLine();\n          line = trimEnd(line);\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n",
        "begin_line": 1216,
        "end_line": 1261,
        "comment": "\n   * Extracts the top-level block comment from the JsDoc comment, if any.\n   * This method differs from the extractMultilineTextualBlock in that it\n   * terminates under different conditions (it doesn't have the same\n   * prechecks), it does not first read in the remaining of the current\n   * line and its conditions for ignoring the \"*\" (STAR) are different.\n   *\n   * @param token The starting token.\n   *\n   * @return The extraction information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.hasParsedFileOverviewDocInfo#2009",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.hasParsedFileOverviewDocInfo()",
        "snippet": "  private boolean hasParsedFileOverviewDocInfo() {\n    return jsdocBuilder.isPopulatedWithFileOverview();\n  }\n",
        "begin_line": 2009,
        "end_line": 2011,
        "comment": "\n   * Determines whether the parser has been populated with docinfo with a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.retrieveAndResetParsedJSDocInfo#2017",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.retrieveAndResetParsedJSDocInfo()",
        "snippet": "  JSDocInfo retrieveAndResetParsedJSDocInfo() {\n    return jsdocBuilder.build(sourceName);\n  }\n",
        "begin_line": 2017,
        "end_line": 2019,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.getFileOverviewJSDocInfo#2024",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getFileOverviewJSDocInfo()",
        "snippet": "  JSDocInfo getFileOverviewJSDocInfo() {\n    return fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 2024,
        "end_line": 2026,
        "comment": "\n   * Gets the fileoverview JSDocInfo, if any.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.createJsDocInfoParser#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createJsDocInfoParser(java.lang.String, int, int, com.google.javascript.rhino.Node.FileLevelJsDocBuilder, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private JsDocInfoParser createJsDocInfoParser(\n      String comment, int lineno, int position,\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder,\n      JSDocInfo fileOverviewInfo) {\n    // The JsDocInfoParser expects the comment without the initial '/**'.\n    int numOpeningChars = 3;\n    JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          sourceName,\n          config,\n          errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n  }\n",
        "begin_line": 223,
        "end_line": 241,
        "comment": "\n   * Creates a JsDocInfoParser and parses the JsDoc string.\n   *\n   * Used both for handling individual JSDoc comments and for handling\n   * file-level JSDoc comments (@fileoverview and @license).\n   *\n   * @param comment The JsDoc comment to parse.\n   * @param lineno The line number of the node this comment is attached to.\n   * @param fileLevelJsDocBuilder The builder for file-level JSDocInfo.\n   * @param fileOverviewInfo The current @fileoverview JSDocInfo, so that the\n   *     parser may warn if another @fileoverview is found. May be null.\n   * @return A JSDocInfoParser. Will contain either fileoverview jsdoc, or\n   *     normal jsdoc, or no jsdoc (if the method parses to the wrong level).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.attachJsDoc#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.attachJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.Comment, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private void attachJsDoc(Comment comment, JSDocInfo info) {\n    Collection<NodeWithJsDoc> candidates =\n        nodesWithJsDoc.get(comment.getValue());\n    if (candidates.isEmpty()) {\n      return;\n    }\n\n    Iterator<NodeWithJsDoc> candidateIter = candidates.iterator();\n    Node node = candidateIter.next().node;\n    candidateIter.remove();\n    node.setJSDocInfo(info);\n    if (info.hasEnumParameterType()) {\n      if (node.getType() == Token.NAME) {\n        registry.identifyEnumName(node.getString());\n      } else if (node.getType() == Token.VAR &&\n            node.getChildCount() == 1) {\n        registry.identifyEnumName(\n            node.getFirstChild().getString());\n      } else if (node.getType() == Token.ASSIGN) {\n        registry.identifyEnumName(\n            node.getFirstChild().getQualifiedName());\n      }\n    }\n  }\n",
        "begin_line": 244,
        "end_line": 267,
        "comment": " Attach JSDocInfo to a node, if we can find one. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processPropertyGet#661",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processPropertyGet(com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet)",
        "snippet": "    @Override\n    Node processPropertyGet(PropertyGet getNode) {\n      return new Node(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));\n    }\n",
        "begin_line": 661,
        "end_line": 667,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunctionDeclaration#1167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionDeclaration(Node n) {\n    return n.getType() == Token.FUNCTION && !isFunctionAnonymous(n);\n  }\n",
        "begin_line": 1167,
        "end_line": 1169,
        "comment": "\n   * Is this node a function declaration? A function declaration is a function\n   * that has a name that is added to the current scope (i.e. a function that\n   * is not anonymous; see {@link #isFunctionAnonymous}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformAsString#302",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.transformAsString(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "    private Node transformAsString(AstNode n) {\n      Node ret = transform(n);\n      if (ret.getType() == Token.STRING) {\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      } else if (ret.getType() == Token.NAME) {\n        ret.setType(Token.STRING);\n      }\n      return ret;\n    }\n",
        "begin_line": 302,
        "end_line": 310,
        "comment": "\n     * Transforms the given node and then sets its type to Token.STRING if it\n     * was Token.NAME. If its type was already Token.STRING, then quotes it.\n     * Used for properties, as the old AST uses String tokens, while the new one\n     * uses Name tokens for unquoted strings. For example, in\n     * var o = {'a' : 1, b: 2};\n     * the string 'a' is quoted, while the name b is turned into a string, but\n     * unquoted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.defineSlot#641",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.defineSlot(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    private void defineSlot(Node name, Node parent, JSType type) {\n      defineSlot(name, parent, type, type == null);\n    }\n",
        "begin_line": 641,
        "end_line": 643,
        "comment": "\n     * Defines a typed variable. The defining node will be annotated with the\n     * variable's type or {@code null} if its type is inferred.\n     * @param name the defining node. It must be a {@link Token#NAME}.\n     * @param parent the {@code name}'s parent.\n     * @param type the variable's type. It may be {@code null}, in which case\n     *     the variable's type will be inferred.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0172
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.resolveTypesInScope#718",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  public void resolveTypesInScope(StaticScope<JSType> scope) {\n    for (NamedType type : unresolvedNamedTypes.get(scope)) {\n      type.resolve(reporter, scope);\n    }\n\n    resolvedNamedTypes.putAll(scope, unresolvedNamedTypes.removeAll(scope));\n\n    if (scope != null && scope.getParentScope() == null) {\n      // By default, the global \"this\" type is just an anonymous object.\n      // If the user has defined a Window type, make the Window the\n      // implicit prototype of \"this\".\n      PrototypeObjectType globalThis = (PrototypeObjectType) getNativeType(\n          JSTypeNative.GLOBAL_THIS);\n      JSType windowType = getType(\"Window\");\n      if (globalThis.isUnknownType()) {\n        ObjectType windowObjType = ObjectType.cast(windowType);\n        if (windowObjType != null) {\n          globalThis.setImplicitPrototype(windowObjType);\n        } else {\n          globalThis.setImplicitPrototype(\n              getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n        }\n      }\n    }\n  }\n",
        "begin_line": 718,
        "end_line": 742,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0172
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isDeclared#432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 432,
        "end_line": 441,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0172
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.restrictByNotNullOrUndefined#753",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.restrictByNotNullOrUndefined()",
        "snippet": "  public JSType restrictByNotNullOrUndefined() {\n    return this;\n  }\n",
        "begin_line": 753,
        "end_line": 755,
        "comment": "\n   * If this is a union type, returns a union type that does not include\n   * the null or undefined type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0172
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.shouldTraverse#248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT) {\n        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n      }\n\n      // We do want to traverse the name of a named function, but we don't\n      // want to traverse the arguments or body.\n      return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();\n    }\n",
        "begin_line": 248,
        "end_line": 260,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0172
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isNativeObjectType#434",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isNativeObjectType()",
        "snippet": "  public boolean isNativeObjectType() {\n    return false;\n  }\n",
        "begin_line": 434,
        "end_line": 436,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.GlobalScopeBuilder#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.GlobalScopeBuilder.GlobalScopeBuilder(com.google.javascript.jscomp.Scope)",
        "snippet": "    private GlobalScopeBuilder(Scope scope) {\n      super(scope);\n    }\n",
        "begin_line": 745,
        "end_line": 747,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.AbstractScopeBuilder#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.AbstractScopeBuilder(com.google.javascript.jscomp.Scope)",
        "snippet": "    private AbstractScopeBuilder(Scope scope) {\n      this.scope = scope;\n    }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.TypedScopeCreator#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.TypedScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  TypedScopeCreator(AbstractCompiler compiler) {\n    this(compiler, compiler.getCodingConvention());\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.enterScope#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.TypeInferringCallback.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    public void enterScope(NodeTraversal t) {\n      Scope scope = t.getScope();\n      Node node = t.getCurrentNode();\n      if (scope.isGlobal()) {\n        inferTypes(t, node, scope);\n      }\n    }\n",
        "begin_line": 110,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.shouldTraverse#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.TypeInferringCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.visit#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.TypeInferringCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Do nothing\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.TypeInferencePass#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.TypeInferencePass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ReverseAbstractInterpreter, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  TypeInferencePass(AbstractCompiler compiler,\n      ReverseAbstractInterpreter reverseInterpreter,\n      Scope topScope, ScopeCreator scopeCreator) {\n    this.compiler = compiler;\n    this.reverseInterpreter = reverseInterpreter;\n    this.topScope = topScope;\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.process#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void process(Node externsRoot, Node jsRoot) {\n    Node externsAndJs = jsRoot.getParent();\n    Preconditions.checkState(externsAndJs != null);\n    Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));\n\n    inferTypes(externsAndJs);\n  }\n",
        "begin_line": 67,
        "end_line": 74,
        "comment": "\n   * Main entry point for type inference when running over the whole tree.\n   *\n   * @param externsRoot The root of the externs parse tree.\n   * @param jsRoot The root of the input parse tree to be checked.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.inferTypes#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.inferTypes(com.google.javascript.rhino.Node)",
        "snippet": "  void inferTypes(Node node) {\n    NodeTraversal inferTypes = new NodeTraversal(\n        compiler, new TypeInferringCallback(), scopeCreator);\n    inferTypes.traverseWithScope(node, topScope);\n  }\n",
        "begin_line": 77,
        "end_line": 81,
        "comment": " Entry point for type inference when running over part of the tree. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.inferTypes#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.inferTypes(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  void inferTypes(NodeTraversal t, Node n, Scope scope) {\n    TypeInference typeInference =\n        new TypeInference(\n            compiler, computeCfg(n), reverseInterpreter, scope,\n            getUnflowableVars(scope));\n    try {\n      typeInference.analyze();\n      escapedLocalVars.putAll(typeInference.getAssignedOuterLocalVars());\n\n      // Resolve any new type names found during the inference.\n      compiler.getTypeRegistry().resolveTypesInScope(scope);\n\n    } catch (DataFlowAnalysis.MaxIterationsExceededException e) {\n      compiler.report(JSError.make(t, n, DATAFLOW_ERROR));\n    }\n  }\n",
        "begin_line": 92,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInferencePass.computeCfg#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.computeCfg(com.google.javascript.rhino.Node)",
        "snippet": "  private ControlFlowGraph<Node> computeCfg(Node n) {\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);\n    cfa.process(null, n);\n    return cfa.getCfg();\n  }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.getAssignedOuterLocalVars#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.getAssignedOuterLocalVars()",
        "snippet": "  Multimap<Scope, Var> getAssignedOuterLocalVars() {\n    return assignedOuterLocalVars;\n  }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": "\n   * @return Local variables assigned in this scope, but which are declared in\n   *     a scope outside of it. Hashed by the scope they're declared in.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getParentScope#337",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParentScope()",
        "snippet": "  @Override\n  public StaticScope<JSType> getParentScope() {\n    return parent;\n  }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseWithScope#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseWithScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  void traverseWithScope(Node root, Scope s) {\n    Preconditions.checkState(s.isGlobal());\n\n    sourceName = \"\";\n    curNode = root;\n    pushScope(s);\n    traverseBranch(root, null);\n    popScope();\n  }\n",
        "begin_line": 310,
        "end_line": 318,
        "comment": "\n   * Traverses a parse tree recursively with a scope, starting with the given\n   * root. This should only be used in the global scope. Otherwise, use\n   * {@link #traverseAtScope}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getCurrentNode#416",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCurrentNode()",
        "snippet": "  public Node getCurrentNode() {\n    return curNode;\n  }\n",
        "begin_line": 416,
        "end_line": 418,
        "comment": " Returns the node currently being traversed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.pushScope#543",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.jscomp.Scope)",
        "snippet": "  private void pushScope(Scope s) {\n    Preconditions.checkState(curNode != null);\n    scopes.push(s);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 543,
        "end_line": 550,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "MemoizedScopeCreator.MemoizedScopeCreator#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
        "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.MemoizedScopeCreator(com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  MemoizedScopeCreator(ScopeCreator delegate) {\n    this.delegate = delegate;\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n   * @param delegate The real source of Scope objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultCodingConvention.defineDelegateProxyProperties#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.defineDelegateProxyProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.jscomp.Scope, java.util.Map<com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType>)",
        "snippet": "  @Override\n  public void defineDelegateProxyProperties(\n      JSTypeRegistry registry, Scope scope,\n      Map<ObjectType, ObjectType> delegateProxyMap) {\n    // do nothing.\n  }\n",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnknownType.isUnknownType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    return true;\n  }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionPrototypeType.getReferenceName#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (ownerFunction == null) {\n      return \"{...}.prototype\";\n    } else {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    }\n  }\n",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.TypedScopeCreator#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.TypedScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention) {\n    this.compiler = compiler;\n    this.validator = compiler.getTypeValidator();\n    this.codingConvention = codingConvention;\n    this.typeRegistry = compiler.getTypeRegistry();\n  }\n",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.createInitialScope#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.createInitialScope(com.google.javascript.rhino.Node)",
        "snippet": "  @VisibleForTesting\n  Scope createInitialScope(Node root) {\n    Scope s = new Scope(root, compiler);\n    declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);\n    declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, DATE_FUNCTION_TYPE);\n    declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);\n    declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);\n    declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);\n    declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);\n    declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);\n    declareNativeValueType(s, \"undefined\", VOID_TYPE);\n\n    // The typedef construct needs the any type, so that it can be assigned\n    // to anything. This is kind of a hack, and an artifact of the typedef\n    // syntax we've chosen.\n    declareNativeValueType(s, \"goog.typedef\", NO_TYPE);\n\n    // ActiveXObject is unqiuely special, because it can be used to construct\n    // any type (the type that it creates is related to the arguments you\n    // pass to it).\n    declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);\n\n    return s;\n  }\n",
        "begin_line": 163,
        "end_line": 194,
        "comment": "\n   * Create the outermost scope. This scope contains native binding such as\n   * {@code Object}, {@code Date}, etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.declareNativeFunctionType#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.declareNativeFunctionType(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void declareNativeFunctionType(Scope scope, JSTypeNative tId) {\n    FunctionType t = typeRegistry.getNativeFunctionType(tId);\n    declareNativeType(scope, t.getInstanceType().getReferenceName(), t);\n    declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());\n  }\n",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.declareNativeValueType#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.declareNativeValueType(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId) {\n    declareNativeType(scope, name, typeRegistry.getNativeType(tId));\n  }\n",
        "begin_line": 203,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypedScopeCreator.declareNativeType#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.declareNativeType(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void declareNativeType(Scope scope, String name, JSType t) {\n    scope.declare(name, null, t, null, false);\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getTypeValidator#931",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeValidator()",
        "snippet": "  @Override\n  TypeValidator getTypeValidator() {\n    return typeValidator;\n  }\n",
        "begin_line": 931,
        "end_line": 934,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getType#671",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getType(java.lang.String)",
        "snippet": "  public JSType getType(String jsTypeName) {\n    // TODO(user): Push every local type name out of namesToTypes so that\n    // NamedType#resolve is correct.\n    if (jsTypeName.equals(templateTypeName)) {\n      return templateType;\n    }\n    return namesToTypes.get(jsTypeName);\n  }\n",
        "begin_line": 671,
        "end_line": 678,
        "comment": "\n   * Looks up a type by name.\n   *\n   * @param jsTypeName The name string.\n   * @return the corresponding JSType object or {@code null} it cannot be found\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0171
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.getNativeType#1205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  private JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 1205,
        "end_line": 1207,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.017
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.getSlot#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache.getSlot(java.lang.String)",
        "snippet": "    public StaticSlot<JSType> getSlot(String name) {\n      if (symbols.containsKey(name)) {\n        return symbols.get(name);\n      } else {\n        return functionScope.getSlot(name);\n      }\n    }\n",
        "begin_line": 490,
        "end_line": 496,
        "comment": "\n     * Get the slot for the given symbol.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getInput#403",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
        "snippet": "  public CompilerInput getInput() {\n    return compiler.getInput(sourceName);\n  }\n",
        "begin_line": 403,
        "end_line": 405,
        "comment": "\n   * Gets the current input source.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getSlot#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getSlot(java.lang.String)",
        "snippet": "  public StaticSlot<JSType> getSlot(String name) {\n    return getVar(name);\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.getSlot#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.getSlot(java.lang.String)",
        "snippet": "  public StaticSlot<JSType> getSlot(String name) {\n    if (cache.dirtySymbols.contains(name)) {\n      for (LinkedFlowSlot slot = lastSlot;\n           slot != null; slot = slot.parent) {\n        if (slot.getName().equals(name)) {\n          return slot;\n        }\n      }\n    }\n    return cache.getSlot(name);\n  }\n",
        "begin_line": 140,
        "end_line": 150,
        "comment": "\n   * Get the slot for the given symbol.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isTypeInferred#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.isTypeInferred()",
        "snippet": "    public boolean isTypeInferred() {\n      return typeInferred;\n    }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\n     * Returns whether this variable's type is inferred. To get the variable's\n     * type, see {@link #getType()}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.traverseChildren#912",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.traverseChildren(com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  private FlowScope traverseChildren(Node n, FlowScope scope) {\n    for (Node el = n.getFirstChild(); el != null; el = el.getNext()) {\n      scope = traverse(el, scope);\n    }\n    return scope;\n  }\n",
        "begin_line": 912,
        "end_line": 917,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.isExtern#194",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.isExtern()",
        "snippet": "  public boolean isExtern() {\n    return isExtern;\n  }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0169
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getType#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getType()",
        "snippet": "    public JSType getType() {\n      return type;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * Gets this variable's type. To know whether this type has been inferred,\n     * see {@code #isInferred()}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.branchedFlowThrough#177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.branchedFlowThrough(com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  @Override\n  @SuppressWarnings(\"fallthrough\")\n  List<FlowScope> branchedFlowThrough(Node source, FlowScope input) {\n    // NOTE(nicksantos): Right now, we just treat ON_EX edges like UNCOND\n    // edges. If we wanted to be perfect, we'd actually JOIN all the out\n    // lattices of this flow with the in lattice, and then make that the out\n    // lattice for the ON_EX edge. But it's probably to expensive to be\n    // worthwhile.\n    FlowScope output = flowThrough(source, input);\n    Node condition = null;\n    FlowScope conditionFlowScope = null;\n    BooleanOutcomePair conditionOutcomes = null;\n\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);\n    List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());\n    for (DiGraphEdge<Node, Branch> branchEdge : branchEdges) {\n      Branch branch = branchEdge.getValue();\n      FlowScope newScope = output;\n\n      switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            if (item.getType() == Token.VAR) {\n              item = item.getFirstChild();\n            }\n            if (item.getType() == Token.NAME) {\n              FlowScope informed = output.createChildFlowScope();\n              redeclare(informed, item.getString(),\n                  getNativeType(STRING_TYPE));\n              newScope = informed;\n            }\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.getType() == Token.CASE) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.getType() == Token.AND ||\n                condition.getType() == Token.OR) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.getType() == Token.AND ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }\n\n      result.add(newScope.optimize());\n    }\n    return result;\n  }\n",
        "begin_line": 177,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.createInitialEstimateLattice#146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.createInitialEstimateLattice()",
        "snippet": "  @Override\n  FlowScope createInitialEstimateLattice() {\n    return bottomScope;\n  }\n",
        "begin_line": 146,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.createEntryLattice#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.createEntryLattice()",
        "snippet": "  @Override\n  FlowScope createEntryLattice() {\n    return functionScope;\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeInference.flowThrough#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "signature": "com.google.javascript.jscomp.TypeInference.flowThrough(com.google.javascript.rhino.Node, com.google.javascript.jscomp.FlowScope)",
        "snippet": "  @Override\n  FlowScope flowThrough(Node n, FlowScope input) {\n    // If we have not walked a path from <entry> to <n>, then we don't\n    // want to infer anything about this scope.\n    if (input == bottomScope) {\n      return input;\n    }\n\n    FlowScope output = input.createChildFlowScope();\n    output = traverse(n, output);\n    return output;\n  }\n",
        "begin_line": 164,
        "end_line": 175,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "SemanticReverseAbstractInterpreter.SemanticReverseAbstractInterpreter#114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java",
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreter",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreter.SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  SemanticReverseAbstractInterpreter(CodingConvention convention,\n      JSTypeRegistry typeRegistry) {\n    super(convention, typeRegistry);\n  }\n",
        "begin_line": 114,
        "end_line": 117,
        "comment": "\n   * Creates a semantic reverse abstract interpreter.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Scope#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  Scope(Node rootNode, ObjectType thisType) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    this.thisType = thisType;\n    this.isBottom = true;\n  }\n",
        "begin_line": 305,
        "end_line": 310,
        "comment": "\n   * Creates a empty Scope (bottom of the lattice).\n   * @param rootNode Typically a FUNCTION node or the global BLOCK node.\n   * @param thisType the type of {@code this} in this scope\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getTypeOfThis#345",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getTypeOfThis()",
        "snippet": "  public ObjectType getTypeOfThis() {\n    return thisType;\n  }\n",
        "begin_line": 345,
        "end_line": 347,
        "comment": "\n   * Gets the type of {@code this} in the current scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.FlatFlowScopeCache#405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache.FlatFlowScopeCache(com.google.javascript.jscomp.Scope)",
        "snippet": "    FlatFlowScopeCache(Scope functionScope) {\n      this.functionScope = functionScope;\n      symbols = ImmutableMap.of();\n      linkedEquivalent = null;\n    }\n",
        "begin_line": 405,
        "end_line": 409,
        "comment": " The cache at the bottom of the lattice.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.LinkedFlowScope#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache, com.google.javascript.jscomp.LinkedFlowScope)",
        "snippet": "  private LinkedFlowScope(FlatFlowScopeCache cache,\n      LinkedFlowScope directParent) {\n    this.cache = cache;\n    if (directParent == null) {\n      this.lastSlot = null;\n      this.depth = 0;\n      this.parent = cache.linkedEquivalent;\n    } else {\n      this.lastSlot = directParent.lastSlot;\n      this.depth = directParent.depth + 1;\n      this.parent = directParent;\n    }\n  }\n",
        "begin_line": 63,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.LinkedFlowScope#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache)",
        "snippet": "  LinkedFlowScope(FlatFlowScopeCache cache) {\n    this(cache, null);\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.LinkedFlowScope#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope)",
        "snippet": "  LinkedFlowScope(LinkedFlowScope directParent) {\n    this(directParent.cache, directParent);\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.getFunctionScope#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.getFunctionScope()",
        "snippet": "  private Scope getFunctionScope() {\n    return cache.functionScope;\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": " Gets the function scope for this flow scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.createEntryLattice#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.createEntryLattice(com.google.javascript.jscomp.Scope)",
        "snippet": "  public static LinkedFlowScope createEntryLattice(Scope scope) {\n    return new LinkedFlowScope(new FlatFlowScopeCache(scope));\n  }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n   * Creates an entry lattice for the flow.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.createChildFlowScope#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.createChildFlowScope()",
        "snippet": "  @Override\n  public FlowScope createChildFlowScope() {\n    frozen = true;\n\n    if (depth > MAX_DEPTH) {\n      if (flattened == null) {\n        flattened = new FlatFlowScopeCache(this);\n      }\n      return new LinkedFlowScope(flattened);\n    }\n\n    return new LinkedFlowScope(this);\n  }\n",
        "begin_line": 158,
        "end_line": 170,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.optimize#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.optimize()",
        "snippet": "  @Override\n  public LinkedFlowScope optimize() {\n    LinkedFlowScope current;\n    for (current = this;\n         current.parent != null &&\n             current.lastSlot == current.parent.lastSlot;\n         current = current.parent) {}\n    return current;\n  }\n",
        "begin_line": 227,
        "end_line": 235,
        "comment": " a findUniqueRefinedSlot on it.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedFlowScope.equals#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object other) {\n    if (other instanceof LinkedFlowScope) {\n      LinkedFlowScope that = (LinkedFlowScope) other;\n      if (this.optimize() == that.optimize()) {\n        return true;\n      }\n\n      // If two flow scopes are in the same function, then they could have\n      // two possible function scopes: the real one and the BOTTOM scope.\n      // If they have different function scopes, we *should* iterate thru all\n      // the variables in each scope and compare. However, 99.9% of the time,\n      // they're not equal. And the other .1% of the time, we can pretend\n      // they're equal--this just means that data flow analysis will have\n      // to propagate the entry lattice a little bit further than it\n      // really needs to. Everything will still come out ok.\n      if (this.getFunctionScope() != that.getFunctionScope()) {\n        return false;\n      }\n\n      if (cache == that.cache) {\n        // If the two flow scopes have the same cache, then we can check\n        // equality a lot faster: by just looking at the \"dirty\" elements\n        // in the cache, and comparing them in both scopes.\n        for (String name : cache.dirtySymbols) {\n          if (diffSlots(getSlot(name), that.getSlot(name))) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      Map<String, StaticSlot<JSType>> myFlowSlots = allFlowSlots();\n      Map<String, StaticSlot<JSType>> otherFlowSlots = that.allFlowSlots();\n\n      for (StaticSlot<JSType> slot : myFlowSlots.values()) {\n        if (diffSlots(slot, otherFlowSlots.get(slot.getName()))) {\n          return false;\n        }\n        otherFlowSlots.remove(slot.getName());\n      }\n      for (StaticSlot<JSType> slot : otherFlowSlots.values()) {\n        if (diffSlots(slot, myFlowSlots.get(slot.getName()))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n",
        "begin_line": 254,
        "end_line": 304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.initialize#452",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis.initialize()",
        "snippet": "    @Override\n    protected void initialize() {\n      orderedWorkSet.clear();\n      for (DiGraphNode<N, Branch> node : getCfg().getDirectedGraphNodes()) {\n        List<DiGraphEdge<N, Branch>> edgeList =\n          getCfg().getOutEdges(node.getValue());\n        int outEdgeCount = edgeList.size();\n        List<L> outLattices = Lists.newArrayList();\n        for (int i = 0; i < outEdgeCount; i++) {\n          outLattices.add(createInitialEstimateLattice());\n        }\n        node.setAnnotation(new BranchedFlowState<L>(\n            createInitialEstimateLattice(), outLattices));\n        if (node != getCfg().getImplicitReturn()) {\n          orderedWorkSet.add(node);\n        }\n      }\n    }\n",
        "begin_line": 452,
        "end_line": 469,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.BranchedForwardDataFlowAnalysis#471",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis.BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N>, com.google.javascript.jscomp.DataFlowAnalysis.JoinOp<L>)",
        "snippet": "    BranchedForwardDataFlowAnalysis(ControlFlowGraph<N> targetCfg,\n                                    JoinOp<L> joinOp) {\n      super(targetCfg, joinOp);\n    }\n",
        "begin_line": 471,
        "end_line": 474,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.isForward#487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis.isForward()",
        "snippet": "    @Override\n    final boolean isForward() {\n      return true;\n    }\n",
        "begin_line": 487,
        "end_line": 490,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.flow#505",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis.flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    protected final boolean flow(DiGraphNode<N, Branch> node) {\n      BranchedFlowState<L> state = node.getAnnotation();\n      List<L> outBefore = state.out;\n      state.out = branchedFlowThrough(node.getValue(), state.in);\n      Preconditions.checkState(outBefore.size() == state.out.size());\n      for (int i = 0; i < outBefore.size(); i++) {\n        if (!outBefore.get(i).equals(state.out.get(i))) {\n          return true;\n        }\n      }\n      return false;\n    }\n",
        "begin_line": 505,
        "end_line": 517,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.joinInputs#519",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis.joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    protected void joinInputs(DiGraphNode<N, Branch> node) {\n      BranchedFlowState<L> state = node.getAnnotation();\n      List<DiGraphNode<N, Branch>> predNodes =\n          getCfg().getDirectedPredNodes(node);\n      List<L> values = new ArrayList<L>(predNodes.size());\n\n      for (DiGraphNode<N, Branch> predNode : predNodes) {\n        BranchedFlowState<L> predNodeState = predNode.getAnnotation();\n\n        L in = predNodeState.out.get(\n            getCfg().getDirectedSuccNodes(predNode).indexOf(node));\n\n        values.add(in);\n      }\n      if (getCfg().getEntry() == node) {\n        state.setIn(createEntryLattice());\n      } else if (!values.isEmpty()) {\n        state.setIn(joinOp.apply(values));\n      }\n    }\n",
        "begin_line": 519,
        "end_line": 539,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.BranchedFlowState#558",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState.BranchedFlowState(L, java.util.List<L>)",
        "snippet": "    private BranchedFlowState(L inState, List<L> outState) {\n      Preconditions.checkNotNull(inState);\n      Preconditions.checkNotNull(outState);\n      this.in = inState;\n      this.out = outState;\n    }\n",
        "begin_line": 558,
        "end_line": 563,
        "comment": "\n     * Private constructor. No other classes should create new states.\n     *\n     * @param inState Input.\n     * @param outState Output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.setIn#569",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState.setIn(L)",
        "snippet": "    void setIn(L in) {\n      Preconditions.checkNotNull(in);\n      this.in = in;\n    }\n",
        "begin_line": 569,
        "end_line": 572,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChainableReverseAbstractInterpreter.ChainableReverseAbstractInterpreter#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java",
        "class_name": "com.google.javascript.jscomp.ChainableReverseAbstractInterpreter",
        "signature": "com.google.javascript.jscomp.ChainableReverseAbstractInterpreter.ChainableReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ChainableReverseAbstractInterpreter(CodingConvention convention,\n      JSTypeRegistry typeRegistry) {\n    Preconditions.checkNotNull(convention);\n    this.convention = convention;\n    this.typeRegistry = typeRegistry;\n    firstLink = this;\n    nextLink = null;\n  }\n",
        "begin_line": 61,
        "end_line": 68,
        "comment": "\n   * Constructs an interpreter, which is the only link in a chain. Interpreters\n   * can be appended using {@link #append}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0167
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isLocal#467",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return !isGlobal();\n  }\n",
        "begin_line": 467,
        "end_line": 469,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0166
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getParent#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0164
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScope#566",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }\n",
        "begin_line": 566,
        "end_line": 580,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0163
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isGlobal#460",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
        "snippet": "  public boolean isGlobal() {\n    return parent == null;\n  }\n",
        "begin_line": 460,
        "end_line": 462,
        "comment": "\n   * Returns whether this is the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0163
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.analyze#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze(int)",
        "snippet": "  final void analyze(int maxSteps) {\n    initialize();\n    int step = 0;\n    while (!orderedWorkSet.isEmpty()) {\n      if (step > maxSteps) {\n        throw new MaxIterationsExceededException(\n          \"Analysis did not terminate after \" + maxSteps + \" iterations\");\n      }\n      DiGraphNode<N, Branch> curNode = orderedWorkSet.iterator().next();\n      orderedWorkSet.remove(curNode);\n      joinInputs(curNode);\n      if (flow(curNode)) {\n        // If there is a change in the current node, we want to grab the list\n        // of nodes that this node affects.\n        List<DiGraphNode<N, Branch>> nextNodes = isForward() ?\n            cfg.getDirectedSuccNodes(curNode) :\n            cfg.getDirectedPredNodes(curNode);\n        for (DiGraphNode<N, Branch> nextNode : nextNodes) {\n          if (nextNode != cfg.getImplicitReturn()) {\n            orderedWorkSet.add(nextNode);\n          }\n        }\n      }\n      step++;\n    }\n    if (isForward()) {\n      joinInputs(getCfg().getImplicitReturn());\n    }\n  }\n",
        "begin_line": 261,
        "end_line": 289,
        "comment": "\n   * Finds a fixed-point solution. The function has the side effect of replacing\n   * the existing node annotations with the computed solutions using {@link\n   * com.google.javascript.jscomp.graph.GraphNode#setAnnotation(Annotation)}.\n   *\n   * <p>Initially, each node's input and output flow state contains the value\n   * given by {@link #createInitialEstimateLattice()} (with the exception of the\n   * entry node of the graph which takes on the {@link #createEntryLattice()}\n   * value. Each node will use the output state of its predecessor and compute a\n   * output state according to the instruction. At that time, any nodes that\n   * depends on the node's newly modified output value will need to recompute\n   * their output state again. Each step will perform a computation at one node\n   * until no extra computation will modify any existing output state anymore.\n   *\n   * @param maxSteps Max number of iterations before the method stops and throw\n   *        a {@link MaxIterationsExceededException}. This will prevent the\n   *        analysis from going into a infinite loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0162
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.getOptionalNodeComparator#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.getOptionalNodeComparator(boolean)",
        "snippet": "    @Override\n    /**\n     * Returns a node comparator based on the pre-order traversal of the AST.\n     * @param isForward x 'before' y in the pre-order traversal implies\n     * x 'less than' y (if true) and x 'greater than' y (if false).\n     */\n    public Comparator<DiGraphNode<Node, Branch>> getOptionalNodeComparator(\n        boolean isForward) {\n      if (isForward) {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n        };\n      } else {\n        return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };\n      }\n    }\n",
        "begin_line": 958,
        "end_line": 983,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0162
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.compare#968",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.Anonymous-06f586b1-7b3c-4cad-96b8-a3c0ec86642b.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n",
        "begin_line": 968,
        "end_line": 972,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0162
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getInfoForNameNode#1945",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getInfoForNameNode(Node nameNode) {\n    JSDocInfo info = null;\n    Node parent = null;\n    if (nameNode != null) {\n      info = nameNode.getJSDocInfo();\n      parent = nameNode.getParent();\n    }\n\n    if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION)) {\n      info = parent.getJSDocInfo();\n    }\n    return info;\n  }\n",
        "begin_line": 1945,
        "end_line": 1959,
        "comment": "\n   * @param nameNode A name node\n   * @return The JSDocInfo for the name node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0161
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setType#518",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setType(int)",
        "snippet": "    public void setType(int type) {\n        this.type = type;\n    }\n",
        "begin_line": 518,
        "end_line": 520,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0158
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getDirectedPredNodes#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedPredNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedPredNodes(\n      DiGraphNode<N, E> dNode) {\n    if (dNode == null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : dNode.getInEdges()) {\n      nodeList.add(edge.getSource());\n    }\n    return nodeList;\n  }\n",
        "begin_line": 223,
        "end_line": 234,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0158
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getParentNode#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getParentNode()",
        "snippet": "    public Node getParentNode() {\n      return nameNode == null ? null : nameNode.getParent();\n    }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "\n     * Gets the parent of the name node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.DataFlowAnalysis#180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N>, com.google.javascript.jscomp.DataFlowAnalysis.JoinOp<L>)",
        "snippet": "  DataFlowAnalysis(ControlFlowGraph<N> targetCfg, JoinOp<L> joinOp) {\n    this.cfg = targetCfg;\n    this.joinOp = joinOp;\n    Comparator<DiGraphNode<N, Branch>> nodeComparator =\n      cfg.getOptionalNodeComparator(isForward());\n    if (nodeComparator != null) {\n      this.orderedWorkSet = Sets.newTreeSet(nodeComparator);\n    } else {\n      this.orderedWorkSet = Sets.newLinkedHashSet();\n    }\n  }\n",
        "begin_line": 180,
        "end_line": 190,
        "comment": "\n   * Constructs a data flow analysis.\n   *\n   * <p>Typical usage\n   * <pre>\n   * DataFlowAnalysis dfa = ...\n   * dfa.analyze();\n   * </pre>\n   *\n   * {@link #analyze()} annotates the result to the control flow graph by\n   * means of {@link DiGraphNode#setAnnotation} without any\n   * modification of the graph itself. Additional calls to {@link #analyze()}\n   * recomputes the analysis which can be useful if the control flow graph\n   * has been modified.\n   *\n   * @param targetCfg The control flow graph object that this object performs\n   *     on. Modification of the graph requires a separate call to\n   *     {@link #analyze()}.\n   *\n   * @see #analyze()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.getCfg#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.getCfg()",
        "snippet": "  final ControlFlowGraph<N> getCfg() {\n    return cfg;\n  }\n",
        "begin_line": 198,
        "end_line": 200,
        "comment": "\n   * Returns the control flow graph that this analysis was performed on.\n   * Modifications can be done on this graph, however, the only time that the\n   * annotations are correct is after {@link #analyze()} is called and before\n   * the graph has been modified.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataFlowAnalysis.analyze#239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.analyze()",
        "snippet": "  final void analyze() {\n    analyze(MAX_STEPS);\n  }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "\n   * Finds a fixed-point solution using at most {@link #MAX_STEPS}\n   * iterations.\n   *\n   * @see #analyze(int)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getName#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getName()",
        "snippet": "    public String getName() {\n      return name;\n    }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "\n     * Gets the name of the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getVars#446",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVars()",
        "snippet": "  public Iterator<Var> getVars() {\n    return vars.values().iterator();\n  }\n",
        "begin_line": 446,
        "end_line": 448,
        "comment": "\n   * Return an iterator over all of the variables declared in this scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.getPosition#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    private int getPosition(DiGraphNode<Node, Branch> n) {\n      Integer priority = priorities.get(n);\n      Preconditions.checkNotNull(priority);\n      return priority;\n    }\n",
        "begin_line": 989,
        "end_line": 993,
        "comment": "\n     * Gets the pre-order traversal position of the given node.\n     * @return An arbitrary counter used for comparing positions.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0157
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Var#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean)",
        "snippet": "    private Var(boolean inferred) {\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0156
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.declare#371",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    Var var = new Var(inferred);\n    var.name = name;\n    var.nameNode = nameNode;\n    var.type = type;\n    var.scope = this;\n    var.index = vars.size();\n    var.input = input;\n\n    // native variables do not have a name node.\n    // TODO(user): make Var abstract and have NativeVar, NormalVar.\n    JSDocInfo info = NodeUtil.getInfoForNameNode(nameNode);\n\n    var.isDefine = info != null && info.isDefine();\n    var.info = info;\n\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 371,
        "end_line": 395,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0156
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getRootNode#321",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getRootNode()",
        "snippet": "  public Node getRootNode() {\n    return rootNode;\n  }\n",
        "begin_line": 321,
        "end_line": 323,
        "comment": "\n   * Gets the container node of the scope. This is typically the FUNCTION\n   * node or the global BLOCK/SCRIPT node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0156
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Scope#293",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Scope(Node rootNode, AbstractCompiler compiler) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);\n    this.isBottom = false;\n  }\n",
        "begin_line": 293,
        "end_line": 298,
        "comment": "\n   * Creates a global Scope.\n   * @param rootNode  Typically the global BLOCK node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0156
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getInput#866",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(java.lang.String)",
        "snippet": "  @Override\n  public CompilerInput getInput(String name) {\n    return inputsByName_.get(name);\n  }\n",
        "begin_line": 866,
        "end_line": 869,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0155
        },
        "num_failing_tests": 1
    }
]