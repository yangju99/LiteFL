[
    {
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.random",
        "snippet": "    private final Random random;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Random generator for choosing initial centers. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3442297081515880464L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.points",
        "snippet": "    private final List<T> points;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The points contained in this cluster. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.center",
        "snippet": "    private final T center;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Center of the cluster. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.EPSILON",
        "snippet": "    public static final double EPSILON = 0x1.0p-53;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Smallest positive number such that 1 - EPSILON is not numerically equal to 1. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SAFE_MIN",
        "snippet": "    public static final double SAFE_MIN = 0x1.0p-1022;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Safe minimum, such that 1 / SAFE_MIN does not overflow.\n     * <p>In IEEE 754 arithmetic, this is also the smallest normalized\n     * number 2<sup>-1022</sup>.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.TWO_PI",
        "snippet": "    public static final double TWO_PI = 2 * Math.PI;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " 2 &pi;. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NB",
        "snippet": "    private static final byte  NB = (byte)-1;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " -1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NS",
        "snippet": "    private static final short NS = (short)-1;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " -1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PB",
        "snippet": "    private static final byte  PB = (byte)1;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " 1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PS",
        "snippet": "    private static final short PS = (short)1;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " 1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZB",
        "snippet": "    private static final byte  ZB = (byte)0;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " 0.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZS",
        "snippet": "    private static final short ZS = (short)0;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " 0.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NAN_GAP",
        "snippet": "    private static final int NAN_GAP = 4 * 1024 * 1024;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Gap between NaN and regular numbers. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SGN_MASK",
        "snippet": "    private static final long SGN_MASK = 0x8000000000000000L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Offset to order signed double numbers lexicographically. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.FACTORIALS",
        "snippet": "    private static final long[] FACTORIALS = new long[] {\n                       1l,                  1l,                   2l,\n                       6l,                 24l,                 120l,\n                     720l,               5040l,               40320l,\n                  362880l,            3628800l,            39916800l,\n               479001600l,         6227020800l,         87178291200l,\n           1307674368000l,     20922789888000l,     355687428096000l,\n        6402373705728000l, 121645100408832000l, 2432902008176640000l };",
        "begin_line": 69,
        "end_line": 76,
        "comment": " All long-representable factorials "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3946024775784901369L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.point",
        "snippet": "    private final int[] point;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Point coordinates. "
    }
]