[
    {
        "name": "KMeansPlusPlusClusterer.KMeansPlusPlusClusterer#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.KMeansPlusPlusClusterer(java.util.Random)",
        "snippet": "    public KMeansPlusPlusClusterer(final Random random) {\n        this.random = random;\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": " Build a clusterer.\n     * @param random random generator to use for choosing initial centers\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "KMeansPlusPlusClusterer.cluster#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.cluster(java.util.Collection<T>, int, int)",
        "snippet": "    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations) {\n        // create the initial clusters\n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        // iterate through updating the centers until we're done\n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                if (!newCenter.equals(cluster.getCenter())) {\n                    clusteringChanged = true;\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }\n",
        "begin_line": 53,
        "end_line": 78,
        "comment": "\n     * Runs the K-means++ clustering algorithm.\n     *\n     * @param points the points to cluster\n     * @param k the number of clusters to split the data into\n     * @param maxIterations the maximum number of iterations to run the algorithm\n     *     for.  If negative, no maximum will be used\n     * @return a list of clusters containing the points\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "KMeansPlusPlusClusterer.assignPointsToClusters#87",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(java.util.Collection<org.apache.commons.math.stat.clustering.Cluster<T>>, java.util.Collection<T>)",
        "snippet": "    private static <T extends Clusterable<T>> void\n        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n",
        "begin_line": 87,
        "end_line": 93,
        "comment": "\n     * Adds the given points to the closest {@link Cluster}.\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to add the points to\n     * @param points the points to add to the given {@link Cluster}s\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "KMeansPlusPlusClusterer.chooseInitialCenters#104",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.chooseInitialCenters(java.util.Collection<T>, int, java.util.Random)",
        "snippet": "    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            int sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break;\n                }\n            }\n        }\n\n        return resultSet;\n\n    }\n",
        "begin_line": 104,
        "end_line": 141,
        "comment": "\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "KMeansPlusPlusClusterer.getNearestCluster#151",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
        "class_name": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer",
        "signature": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.getNearestCluster(java.util.Collection<org.apache.commons.math.stat.clustering.Cluster<T>>, T)",
        "snippet": "    private static <T extends Clusterable<T>> Cluster<T>\n        getNearestCluster(final Collection<Cluster<T>> clusters, final T point) {\n        double minDistance = Double.MAX_VALUE;\n        Cluster<T> minCluster = null;\n        for (final Cluster<T> c : clusters) {\n            final double distance = point.distanceFrom(c.getCenter());\n            if (distance < minDistance) {\n                minDistance = distance;\n                minCluster = c;\n            }\n        }\n        return minCluster;\n    }\n",
        "begin_line": 151,
        "end_line": 163,
        "comment": "\n     * Returns the nearest {@link Cluster} to the given point\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to search\n     * @param point the point to find the nearest {@link Cluster} for\n     * @return the nearest {@link Cluster} to the given point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Cluster.Cluster#45",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.Cluster(T)",
        "snippet": "    public Cluster(final T center) {\n        this.center = center;\n        points = new ArrayList<T>();\n    }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n     * Build a cluster centered at a specified point.\n     * @param center the point which is to be the center of this cluster\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Cluster.getCenter#70",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/Cluster.java",
        "class_name": "org.apache.commons.math.stat.clustering.Cluster",
        "signature": "org.apache.commons.math.stat.clustering.Cluster.getCenter()",
        "snippet": "    public T getCenter() {\n        return center;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Get the point chosen to be the center of this cluster.\n     * @return chosen cluster center\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EuclideanIntegerPoint.distanceFrom#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.distanceFrom(org.apache.commons.math.stat.clustering.EuclideanIntegerPoint)",
        "snippet": "    public double distanceFrom(final EuclideanIntegerPoint p) {\n        return MathUtils.distance(point, p.getPoint());\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.io.Serializable": null,
            "org.apache.commons.math.stat.clustering.Clusterable": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.distance#1623",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "class_name": "org.apache.commons.math.util.MathUtils",
        "signature": "org.apache.commons.math.util.MathUtils.distance(int[], int[])",
        "snippet": "    public static double distance(int[] p1, int[] p2) {\n      int sum = 0;\n      for (int i = 0; i < p1.length; i++) {\n          final int dp = p1[i] - p2[i];\n          sum += dp * dp;\n      }\n      return Math.sqrt(sum);\n    }\n",
        "begin_line": 1623,
        "end_line": 1630,
        "comment": "\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "EuclideanIntegerPoint.EuclideanIntegerPoint#43",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.EuclideanIntegerPoint(int[])",
        "snippet": "    public EuclideanIntegerPoint(final int[] point) {\n        this.point = point;\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Build an instance wrapping an integer array.\n     * <p>The wrapped array is referenced, it is <em>not</em> copied.</p>\n     * @param point the n-dimensional point in integer space\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "EuclideanIntegerPoint.getPoint#51",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java",
        "class_name": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint",
        "signature": "org.apache.commons.math.stat.clustering.EuclideanIntegerPoint.getPoint()",
        "snippet": "    public int[] getPoint() {\n        return point;\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Get the n-dimensional point in integer space.\n     * @return a reference (not a copy!) to the wrapped array\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    }
]