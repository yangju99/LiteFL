[
    {
        "name": "HashCodeBuilder.reflectionAppend#171",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.reflectionAppend(java.lang.Object, java.lang.Class<?>, org.apache.commons.lang3.builder.HashCodeBuilder, boolean, java.lang.String[])",
        "snippet": "    private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients,\n            String[] excludeFields) {\n        if (isRegistered(object)) {\n            return;\n        }\n        try {\n            register(object);\n            Field[] fields = clazz.getDeclaredFields();\n            AccessibleObject.setAccessible(fields, true);\n            for (Field field : fields) {\n                if (!ArrayUtils.contains(excludeFields, field.getName())\n                    && (field.getName().indexOf('$') == -1)\n                    && (useTransients || !Modifier.isTransient(field.getModifiers()))\n                    && (!Modifier.isStatic(field.getModifiers()))) {\n                    try {\n                        Object fieldValue = field.get(object);\n                        builder.append(fieldValue);\n                    } catch (IllegalAccessException e) {\n                        // this can't happen. Would get a Security exception instead\n                        // throw a runtime exception in case the impossible happens.\n                        throw new InternalError(\"Unexpected IllegalAccessException\");\n                    }\n                }\n            }\n        } finally {\n            unregister(object);\n        }\n    }\n",
        "begin_line": 171,
        "end_line": 198,
        "comment": "\n     * <p>\n     * Appends the fields and values defined by the given object of the given <code>Class</code>.\n     * </p>\n     * \n     * @param object\n     *            the object to append details of\n     * @param clazz\n     *            the class to append details of\n     * @param builder\n     *            the builder to append to\n     * @param useTransients\n     *            whether to use transient fields\n     * @param excludeFields\n     *            Collection of String field names to exclude from use in calculation of hash code\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.reflectionHashCode#399",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object)",
        "snippet": "    public static int reflectionHashCode(Object object) {\n        return reflectionHashCode(17, 37, object, false, null, null);\n    }\n",
        "begin_line": 399,
        "end_line": 401,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * This constructor uses two hard coded choices for the constants needed to build a hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be used, as they are likely derived fields, and not part of the value of the\n     * <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be tested. Superclass fields will be included.\n     * </p>\n     * \n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the object is <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "IDKey.IDKey#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/IDKey.java",
        "class_name": "org.apache.commons.lang3.builder.IDKey",
        "signature": "org.apache.commons.lang3.builder.IDKey.IDKey(java.lang.Object)",
        "snippet": "        public IDKey(Object _value) {\n            // This is the Object hashcode \n            id = System.identityHashCode(_value);  \n            // There have been some cases (LANG-459) that return the \n            // same identity hash code for different objects.  So \n            // the value is also added to disambiguate these cases.\n            value = _value;\n        }\n",
        "begin_line": 40,
        "end_line": 47,
        "comment": "\n         * Constructor for IDKey\n         * @param _value\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "IDKey.hashCode#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/IDKey.java",
        "class_name": "org.apache.commons.lang3.builder.IDKey",
        "signature": "org.apache.commons.lang3.builder.IDKey.hashCode()",
        "snippet": "        @Override\n        public int hashCode() {\n           return id;\n        }\n",
        "begin_line": 53,
        "end_line": 56,
        "comment": "\n         * returns hashcode - i.e. the system identity hashcode.\n         * @return the hashcode\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "IDKey.equals#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/IDKey.java",
        "class_name": "org.apache.commons.lang3.builder.IDKey",
        "signature": "org.apache.commons.lang3.builder.IDKey.equals(java.lang.Object)",
        "snippet": "        @Override\n        public boolean equals(Object other) {\n            if (!(other instanceof IDKey)) {\n                return false;\n            }\n            IDKey idKey = (IDKey) other;\n            if (id != idKey.id) {\n                return false;\n            }\n            // Note that identity equals is used.\n            return value == idKey.value;\n         }\n",
        "begin_line": 63,
        "end_line": 74,
        "comment": "\n         * checks if instances are equal\n         * @param other\n         * @return if the instances are for the same object\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.initialValue#105",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.Anonymous-08bb65e2-404a-4824-8df5-cce668e43b77.initialValue()",
        "snippet": "        @Override\n        protected Set<IDKey> initialValue() {\n            return new HashSet<IDKey>();\n        }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.getRegistry#136",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.getRegistry()",
        "snippet": "    static Set<IDKey> getRegistry() {\n        return REGISTRY.get();\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "\n     * <p>\n     * Returns the registry of objects being traversed by the reflection methods in the current thread.\n     * </p>\n     * \n     * @return Set the registry of objects being traversed\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.isRegistered#151",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.isRegistered(java.lang.Object)",
        "snippet": "    static boolean isRegistered(Object value) {\n        return getRegistry().contains(new IDKey(value));\n    }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "\n     * <p>\n     * Returns <code>true</code> if the registry contains the given object. Used by the reflection methods to avoid\n     * infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to lookup in the registry.\n     * @return boolean <code>true</code> if the registry contains the given object.\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.reflectionHashCode#353",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.reflectionHashCode(int, int, T, boolean, java.lang.Class<? super T>, java.lang.String[])",
        "snippet": "    public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\n            boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) {\n\n        if (object == null) {\n            throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");\n        }\n        HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);\n        Class<?> clazz = object.getClass();\n        reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n        while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {\n            clazz = clazz.getSuperclass();\n            reflectionAppend(object, clazz, builder, testTransients, excludeFields);\n        }\n        return builder.toHashCode();\n    }\n",
        "begin_line": 353,
        "end_line": 367,
        "comment": "\n     * <p>\n     * This method uses reflection to build a valid hash code.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.\n     * </p>\n     * \n     * <p>\n     * Static fields will not be included. Superclass fields will be included up to and including the specified\n     * superclass. A null superclass is treated as java.lang.Object.\n     * </p>\n     * \n     * <p>\n     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,\n     * however this is not vital. Prime numbers are preferred, especially for the multiplier.\n     * </p>\n     * \n     * @param initialNonZeroOddNumber\n     *            a non-zero, odd number used as the initial value\n     * @param multiplierNonZeroOddNumber\n     *            a non-zero, odd number used as the multiplier\n     * @param object\n     *            the Object to create a <code>hashCode</code> for\n     * @param testTransients\n     *            whether to include transient fields\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @param excludeFields\n     *            array of field names to exclude from use in calculation of hash code\n     * @return int hash code\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @throws IllegalArgumentException\n     *             if the number is zero or even\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.register#521",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.register(java.lang.Object)",
        "snippet": "    static void register(Object value) {\n        getRegistry().add(new IDKey(value));\n    }\n",
        "begin_line": 521,
        "end_line": 523,
        "comment": "\n     * <p>\n     * Registers the given object. Used by the reflection methods to avoid infinite loops.\n     * </p>\n     * \n     * @param value\n     *            The object to register.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.unregister#537",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.unregister(java.lang.Object)",
        "snippet": "    static void unregister(Object value) {\n        getRegistry().remove(new IDKey(value));\n    }\n",
        "begin_line": 537,
        "end_line": 539,
        "comment": "\n     * <p>\n     * Unregisters the given object.\n     * </p>\n     * \n     * <p>\n     * Used by the reflection methods to avoid infinite loops.\n     * \n     * @param value\n     *            The object to unregister.\n     * @since 2.3\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayUtils.indexOf#1626",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)",
        "snippet": "    public static int indexOf(Object[] array, Object objectToFind) {\n        return indexOf(array, objectToFind, 0);\n    }\n",
        "begin_line": 1626,
        "end_line": 1628,
        "comment": "\n     * <p>Finds the index of the given object in the array.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param objectToFind  the object to find, may be <code>null</code>\n     * @return the index of the object within the array,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayUtils.indexOf#1644",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)",
        "snippet": "    public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n        if (array == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (objectToFind == null) {\n            for (int i = startIndex; i < array.length; i++) {\n                if (array[i] == null) {\n                    return i;\n                }\n            }\n        } else if (array.getClass().getComponentType().isInstance(objectToFind)) {\n            for (int i = startIndex; i < array.length; i++) {\n                if (objectToFind.equals(array[i])) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
        "begin_line": 1644,
        "end_line": 1665,
        "comment": "\n     * <p>Finds the index of the given object in the array starting at the given index.</p>\n     *\n     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n     *\n     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n     *\n     * @param array  the array to search through for the object, may be <code>null</code>\n     * @param objectToFind  the object to find, may be <code>null</code>\n     * @param startIndex  the index to start searching at\n     * @return the index of the object within the array starting at the index,\n     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayUtils.contains#1729",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "signature": "org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object)",
        "snippet": "    public static boolean contains(Object[] array, Object objectToFind) {\n        return indexOf(array, objectToFind) != INDEX_NOT_FOUND;\n    }\n",
        "begin_line": 1729,
        "end_line": 1731,
        "comment": "\n     * <p>Checks if the object is in the given array.</p>\n     *\n     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n     *\n     * @param array  the array to search through\n     * @param objectToFind  the object to find\n     * @return <code>true</code> if the array contains the object\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.append#854",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.append(java.lang.Object)",
        "snippet": "    public HashCodeBuilder append(Object object) {\n        if (object == null) {\n            iTotal = iTotal * iConstant;\n\n        } else {\n            if(object.getClass().isArray()) {\n                // 'Switch' on type of array, to dispatch to the correct handler\n                // This handles multi dimensional arrays\n                if (object instanceof long[]) {\n                    append((long[]) object);\n                } else if (object instanceof int[]) {\n                    append((int[]) object);\n                } else if (object instanceof short[]) {\n                    append((short[]) object);\n                } else if (object instanceof char[]) {\n                    append((char[]) object);\n                } else if (object instanceof byte[]) {\n                    append((byte[]) object);\n                } else if (object instanceof double[]) {\n                    append((double[]) object);\n                } else if (object instanceof float[]) {\n                    append((float[]) object);\n                } else if (object instanceof boolean[]) {\n                    append((boolean[]) object);\n                } else {\n                    // Not an array of primitives\n                    append((Object[]) object);\n                }\n            } else {\n                iTotal = iTotal * iConstant + object.hashCode();\n            }\n        }\n        return this;\n    }\n",
        "begin_line": 854,
        "end_line": 887,
        "comment": "\n     * <p>\n     * Append a <code>hashCode</code> for an <code>Object</code>.\n     * </p>\n     * \n     * @param object\n     *            the Object to add to the <code>hashCode</code>\n     * @return this\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.HashCodeBuilder#578",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.HashCodeBuilder(int, int)",
        "snippet": "    public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {\n        if (initialNonZeroOddNumber == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\");\n        }\n        if (initialNonZeroOddNumber % 2 == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\");\n        }\n        if (multiplierNonZeroOddNumber == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\");\n        }\n        if (multiplierNonZeroOddNumber % 2 == 0) {\n            throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\");\n        }\n        iConstant = multiplierNonZeroOddNumber;\n        iTotal = initialNonZeroOddNumber;\n    }\n",
        "begin_line": 578,
        "end_line": 593,
        "comment": "\n     * <p>\n     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,\n     * however this is not vital.\n     * </p>\n     * \n     * <p>\n     * Prime numbers are preferred, especially for the multiplier.\n     * </p>\n     * \n     * @param initialNonZeroOddNumber\n     *            a non-zero, odd number used as the initial value\n     * @param multiplierNonZeroOddNumber\n     *            a non-zero, odd number used as the multiplier\n     * @throws IllegalArgumentException\n     *             if the number is zero or even\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "HashCodeBuilder.toHashCode#965",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.HashCodeBuilder",
        "signature": "org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode()",
        "snippet": "    public int toHashCode() {\n        return iTotal;\n    }\n",
        "begin_line": 965,
        "end_line": 967,
        "comment": "\n     * <p>\n     * Return the computed <code>hashCode</code>.\n     * </p>\n     * \n     * @return <code>hashCode</code> based on the fields appended\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    }
]