[
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.PoissonDistributionTest(java.lang.String)",
        "snippet": "    public PoissonDistributionTest(String name) {\n        super(name);\n        setTolerance(1e-12);\n    }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "\n     * Constructor.\n     * @param name\n     ",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)",
            "(line 41,col 9)-(line 41,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public IntegerDistribution makeDistribution() {\n        return new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);\n    }\n",
        "begin_line": 47,
        "end_line": 50,
        "comment": "\n     * Creates the default discrete distribution instance to use in tests.\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 49,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestPoints()",
        "snippet": "    @Override\n    public int[] makeDensityTestPoints() {\n        return new int[] { -1, 0, 1, 2, 3, 4, 5, 10, 20};\n    }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n     * Creates the default probability density test input values.\n     ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        return new double[] { 0d, 0.0183156388887d,  0.073262555555d,\n                0.14652511111d, 0.195366814813d, 0.195366814813,\n                0.156293451851d, 0.00529247667642d, 8.27746364655e-09};\n    }\n",
        "begin_line": 64,
        "end_line": 69,
        "comment": "\n     * Creates the default probability density test expected values.\n     * These and all other test values are generated by R, version 1.8.1\n     ",
        "child_ranges": [
            "(line 66,col 9)-(line 68,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public int[] makeCumulativeTestPoints() {\n        return new int[] { -1, 0, 1, 2, 3, 4, 5, 10, 20 };\n    }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "\n     * Creates the default cumulative probability density test input values.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] { 0d,  0.0183156388887d, 0.0915781944437d,\n                0.238103305554d, 0.433470120367d, 0.62883693518,\n                0.78513038703d,  0.99716023388d, 0.999999998077 };\n    }\n",
        "begin_line": 82,
        "end_line": 87,
        "comment": "\n     * Creates the default cumulative probability density test expected values.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 86,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeInverseCumulativeTestPoints() {\n        return new double[] { 0d,  0.018315638889d, 0.0915781944437d,\n                0.238103305554d, 0.433470120367d, 0.62883693518,\n                0.78513038704d,  0.99716023388d, 0.999999998077 };\n    }\n",
        "begin_line": 95,
        "end_line": 100,
        "comment": "\n     * Creates the default inverse cumulative probability test input values.\n     * Increased 3rd and 7th values slightly as computed cumulative\n     * probabilities for corresponding values exceeds the target value (still\n     * within tolerance).\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 99,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.makeInverseCumulativeTestValues()",
        "snippet": "    @Override\n    public int[] makeInverseCumulativeTestValues() {\n        return new int[] { -1, 0, 1, 2, 3, 4, 5, 10, 20};\n    }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "\n     * Creates the default inverse cumulative probability density test expected values.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability()",
        "snippet": "    public void testNormalApproximateProbability() throws Exception {\n        PoissonDistribution dist = new PoissonDistributionImpl(100);\n        double result = dist.normalApproximateProbability(110)\n                - dist.normalApproximateProbability(89);\n        assertEquals(0.706281887248, result, 1E-10);\n\n        dist = new PoissonDistributionImpl(10000);\n        result = dist.normalApproximateProbability(10200)\n        - dist.normalApproximateProbability(9899);\n        assertEquals(0.820070051552, result, 1E-10);\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Test the normal approximation of the Poisson distribution by\n     * calculating P(90 &le; X &le; 110) for X = Po(100) and\n     * P(9900 &le; X &le; 10200) for X  = Po(10000)\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 68)",
            "(line 117,col 9)-(line 118,col 56)",
            "(line 119,col 9)-(line 119,col 52)",
            "(line 121,col 9)-(line 121,col 50)",
            "(line 122,col 9)-(line 123,col 50)",
            "(line 124,col 9)-(line 124,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability()",
        "snippet": "    public void testDegenerateInverseCumulativeProbability() throws Exception {\n        PoissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);\n        assertEquals(Integer.MAX_VALUE, dist.inverseCumulativeProbability(1.0d));\n        assertEquals(-1, dist.inverseCumulativeProbability(0d));\n    }\n",
        "begin_line": 131,
        "end_line": 135,
        "comment": "\n     * Test the degenerate cases of a 0.0 and 1.0 inverse cumulative probability.\n     * @throws Exception\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 95)",
            "(line 133,col 9)-(line 133,col 81)",
            "(line 134,col 9)-(line 134,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.testMean()",
        "snippet": "    public void testMean() {\n        PoissonDistribution dist;\n        try {\n            dist = new PoissonDistributionImpl(-1);\n            fail(\"negative mean: NotStrictlyPositiveException expected\");\n        } catch(NotStrictlyPositiveException ex) {\n            // Expected.\n        }\n\n        dist = new PoissonDistributionImpl(10.0);\n        assertEquals(10.0, dist.getMean(), 0.0);\n    }\n",
        "begin_line": 137,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 33)",
            "(line 139,col 9)-(line 144,col 9)",
            "(line 146,col 9)-(line 146,col 49)",
            "(line 147,col 9)-(line 147,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability()",
        "snippet": "    public void testLargeMeanCumulativeProbability() {\n        double mean = 1.0;\n        while (mean <= 10000000.0) {\n            PoissonDistribution dist = new PoissonDistributionImpl(mean);\n\n            double x = mean * 2.0;\n            double dx = x / 10.0;\n            double p = Double.NaN;\n            double sigma = FastMath.sqrt(mean);\n            while (x >= 0) {\n                try {\n                    p = dist.cumulativeProbability(x);\n                    assertFalse(\"NaN cumulative probability returned for mean = \" +\n                            mean + \" x = \" + x,Double.isNaN(p));\n                    if (x > mean - 2 * sigma) {\n                        assertTrue(\"Zero cum probaility returned for mean = \" +\n                                mean + \" x = \" + x, p > 0);\n                    }\n                } catch (MathException ex) {\n                    fail(\"mean of \" + mean + \" and x of \" + x + \" caused \" + ex.getMessage());\n                }\n                x -= dx;\n            }\n\n            mean *= 10.0;\n        }\n    }\n",
        "begin_line": 150,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 151,col 26)",
            "(line 152,col 9)-(line 175,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.testCumulativeProbabilitySpecial()",
        "snippet": "    public void testCumulativeProbabilitySpecial() throws Exception {\n        PoissonDistribution dist;\n        dist = new PoissonDistributionImpl(9120);\n        checkProbability(dist, 9075);\n        checkProbability(dist, 9102);\n        dist = new PoissonDistributionImpl(5058);\n        checkProbability(dist, 5044);\n        dist = new PoissonDistributionImpl(6986);\n        checkProbability(dist, 6950);\n    }\n",
        "begin_line": 181,
        "end_line": 190,
        "comment": "\n     * JIRA: MATH-282\n     ",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 33)",
            "(line 183,col 9)-(line 183,col 49)",
            "(line 184,col 9)-(line 184,col 37)",
            "(line 185,col 9)-(line 185,col 37)",
            "(line 186,col 9)-(line 186,col 49)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 188,col 49)",
            "(line 189,col 9)-(line 189,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.checkProbability(org.apache.commons.math.distribution.PoissonDistribution, double)",
        "snippet": "    private void checkProbability(PoissonDistribution dist, double x) throws Exception {\n        double p = dist.cumulativeProbability(x);\n        assertFalse(\"NaN cumulative probability returned for mean = \" +\n                dist.getMean() + \" x = \" + x, Double.isNaN(p));\n        assertTrue(\"Zero cum probability returned for mean = \" +\n                dist.getMean() + \" x = \" + x, p > 0);\n    }\n",
        "begin_line": 192,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 49)",
            "(line 194,col 9)-(line 195,col 63)",
            "(line 196,col 9)-(line 197,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability()",
        "snippet": "    public void testLargeMeanInverseCumulativeProbability() throws Exception {\n        double mean = 1.0;\n        while (mean <= 100000.0) { // Extended test value: 1E7.  Reduced to limit run time.\n            PoissonDistribution dist = new PoissonDistributionImpl(mean);\n            double p = 0.1;\n            double dp = p;\n            while (p < .99) {\n                double ret = Double.NaN;\n                try {\n                    ret = dist.inverseCumulativeProbability(p);\n                    // Verify that returned value satisties definition\n                    assertTrue(p >= dist.cumulativeProbability(ret));\n                    assertTrue(p < dist.cumulativeProbability(ret + 1));\n                } catch (MathException ex) {\n                    fail(\"mean of \" + mean + \" and p of \" + p + \" caused \" + ex.getMessage());\n                }\n                p += dp;\n            }\n            mean *= 10.0;\n        }\n    }\n",
        "begin_line": 200,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 26)",
            "(line 202,col 9)-(line 219,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.IntegerDistributionAbstractTest(java.lang.String)",
        "snippet": "    public IntegerDistributionAbstractTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * Constructor for IntegerDistributionAbstractTest.\n     * @param name\n     ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDistribution()",
        "snippet": "    public abstract IntegerDistribution makeDistribution();\n",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Creates the default discrete distribution instance to use in tests. ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDensityTestPoints()",
        "snippet": "    public abstract int[] makeDensityTestPoints();\n",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Creates the default probability density test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeDensityTestValues()",
        "snippet": "    public abstract double[] makeDensityTestValues();\n",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeCumulativeTestPoints()",
        "snippet": "    public abstract int[] makeCumulativeTestPoints();\n",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Creates the default cumulative probability density test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeCumulativeTestValues()",
        "snippet": "    public abstract double[] makeCumulativeTestValues();\n",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestPoints()",
        "snippet": "    public abstract double[] makeInverseCumulativeTestPoints();\n",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.makeInverseCumulativeTestValues()",
        "snippet": "    public abstract int[] makeInverseCumulativeTestValues();\n",
        "begin_line": 104,
        "end_line": 104,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n        distribution = makeDistribution();\n        densityTestPoints = makeDensityTestPoints();\n        densityTestValues = makeDensityTestValues();\n        cumulativeTestPoints = makeCumulativeTestPoints();\n        cumulativeTestValues = makeCumulativeTestValues();\n        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n        inverseCumulativeTestValues = makeInverseCumulativeTestValues();\n    }\n",
        "begin_line": 111,
        "end_line": 121,
        "comment": "\n     * Setup sets all test instance data to default values\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 22)",
            "(line 114,col 9)-(line 114,col 42)",
            "(line 115,col 9)-(line 115,col 52)",
            "(line 116,col 9)-(line 116,col 52)",
            "(line 117,col 9)-(line 117,col 58)",
            "(line 118,col 9)-(line 118,col 58)",
            "(line 119,col 9)-(line 119,col 72)",
            "(line 120,col 9)-(line 120,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n        distribution = null;\n        densityTestPoints = null;\n        densityTestValues = null;\n        cumulativeTestPoints = null;\n        cumulativeTestValues = null;\n        inverseCumulativeTestPoints = null;\n        inverseCumulativeTestValues = null;\n    }\n",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n     * Cleans up test instance data\n     ",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 25)",
            "(line 129,col 9)-(line 129,col 28)",
            "(line 130,col 9)-(line 130,col 33)",
            "(line 131,col 9)-(line 131,col 33)",
            "(line 132,col 9)-(line 132,col 36)",
            "(line 133,col 9)-(line 133,col 36)",
            "(line 134,col 9)-(line 134,col 43)",
            "(line 135,col 9)-(line 135,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyDensities()",
        "snippet": "    protected void verifyDensities() throws Exception {\n        for (int i = 0; i < densityTestPoints.length; i++) {\n            assertEquals(\"Incorrect density value returned for \" + densityTestPoints[i],\n                    densityTestValues[i],\n                    distribution.probability(densityTestPoints[i]), tolerance);\n        }\n    }\n",
        "begin_line": 144,
        "end_line": 150,
        "comment": "\n     * Verifies that probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 149,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyCumulativeProbabilities()",
        "snippet": "    protected void verifyCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            assertEquals(\"Incorrect cumulative probability value returned for \" + cumulativeTestPoints[i],\n                    cumulativeTestValues[i],\n                    distribution.cumulativeProbability(cumulativeTestPoints[i]), tolerance);\n        }\n    }\n",
        "begin_line": 156,
        "end_line": 162,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 161,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.verifyInverseCumulativeProbabilities()",
        "snippet": "    protected void verifyInverseCumulativeProbabilities() throws Exception {\n        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n            assertEquals(\"Incorrect inverse cumulative probability value returned for \"\n                    + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],\n                    distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]));\n        }\n    }\n",
        "begin_line": 169,
        "end_line": 175,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 174,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testDensities()",
        "snippet": "    public void testDensities() throws Exception {\n        verifyDensities();\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\n     * Verifies that probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testCumulativeProbabilities()",
        "snippet": "    public void testCumulativeProbabilities() throws Exception {\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 192,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testFloatingPointArguments()",
        "snippet": "    public void testFloatingPointArguments() throws Exception {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            double arg = cumulativeTestPoints[i];\n            assertEquals(\n                    \"Incorrect cumulative probability value returned for \" +\n                    cumulativeTestPoints[i],\n                    cumulativeTestValues[i],\n                    distribution.cumulativeProbability(arg), tolerance);\n            if (i < cumulativeTestPoints.length - 1) {\n                double arg2 = cumulativeTestPoints[i + 1];\n                assertEquals(\"Inconsistent probability for discrete range \" +\n                        \"[ \" + arg + \",\" + arg2 + \" ]\",\n                   distribution.cumulativeProbability(\n                           cumulativeTestPoints[i],\n                           cumulativeTestPoints[i + 1]),\n                   distribution.cumulativeProbability(arg, arg2), tolerance);\n                arg = arg - FastMath.random();\n                arg2 = arg2 + FastMath.random();\n                assertEquals(\"Inconsistent probability for discrete range \" +\n                        \"[ \" + arg + \",\" + arg2 + \" ]\",\n                   distribution.cumulativeProbability(\n                           cumulativeTestPoints[i],\n                           cumulativeTestPoints[i + 1]),\n                   distribution.cumulativeProbability(arg, arg2), tolerance);\n            }\n        }\n        int one = 1;\n        int ten = 10;\n        int two = 2;\n        double oned = one;\n        double twod = two;\n        double tend = ten;\n        assertEquals(distribution.cumulativeProbability(one, two),\n                distribution.cumulativeProbability(oned, twod), tolerance);\n        assertEquals(distribution.cumulativeProbability(one, two),\n                distribution.cumulativeProbability(oned - tolerance,\n                        twod + 0.9), tolerance);\n        assertEquals(distribution.cumulativeProbability(two, ten),\n                distribution.cumulativeProbability(twod, tend), tolerance);\n        assertEquals(distribution.cumulativeProbability(two, ten),\n                distribution.cumulativeProbability(twod - tolerance,\n                        tend + 0.9), tolerance);\n    }\n",
        "begin_line": 200,
        "end_line": 242,
        "comment": "\n     * Verifies that floating point arguments are correctly handled by\n     * cumulativeProbablility(-,-)\n     * JIRA: MATH-184\n     ",
        "child_ranges": [
            "(line 201,col 9)-(line 225,col 9)",
            "(line 226,col 9)-(line 226,col 20)",
            "(line 227,col 9)-(line 227,col 21)",
            "(line 228,col 9)-(line 228,col 20)",
            "(line 229,col 9)-(line 229,col 26)",
            "(line 230,col 9)-(line 230,col 26)",
            "(line 231,col 9)-(line 231,col 26)",
            "(line 232,col 9)-(line 233,col 75)",
            "(line 234,col 9)-(line 236,col 48)",
            "(line 237,col 9)-(line 238,col 75)",
            "(line 239,col 9)-(line 241,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testInverseCumulativeProbabilities()",
        "snippet": "    public void testInverseCumulativeProbabilities() throws Exception {\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 248,
        "end_line": 250,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 249,col 9)-(line 249,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testIllegalArguments()",
        "snippet": "    public void testIllegalArguments() throws Exception {\n        try {\n            distribution.cumulativeProbability(1, 0);\n            fail(\"Expecting IllegalArgumentException for bad cumulativeProbability interval\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(-1);\n            fail(\"Expecting IllegalArgumentException for p = -1\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(2);\n            fail(\"Expecting IllegalArgumentException for p = 2\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 255,
        "end_line": 274,
        "comment": "\n     * Verifies that illegal arguments are correctly handled\n     ",
        "child_ranges": [
            "(line 256,col 9)-(line 261,col 9)",
            "(line 262,col 9)-(line 267,col 9)",
            "(line 268,col 9)-(line 273,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.testSampling()",
        "snippet": "    public void testSampling() throws Exception {\n        int[] densityPoints = makeDensityTestPoints();\n        double[] densityValues = makeDensityTestValues();\n        int sampleSize = 1000;\n        int length = TestUtils.eliminateZeroMassPoints(densityPoints, densityValues);\n        AbstractIntegerDistribution distribution = (AbstractIntegerDistribution) makeDistribution();\n        double[] expectedCounts = new double[length];\n        long[] observedCounts = new long[length];\n        for (int i = 0; i < length; i++) {\n            expectedCounts[i] = sampleSize * densityValues[i];\n        }\n        distribution.reseedRandomGenerator(1000); // Use fixed seed\n        int[] sample = distribution.sample(sampleSize);\n        for (int i = 0; i < sampleSize; i++) {\n          for (int j = 0; j < length; j++) {\n              if (sample[i] == densityPoints[j]) {\n                  observedCounts[j]++;\n              }\n          }\n        }\n        TestUtils.assertChiSquareAccept(densityPoints, expectedCounts, observedCounts, .001);\n    }\n",
        "begin_line": 279,
        "end_line": 300,
        "comment": "\n     * Test sampling\n     ",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 54)",
            "(line 281,col 9)-(line 281,col 57)",
            "(line 282,col 9)-(line 282,col 30)",
            "(line 283,col 9)-(line 283,col 85)",
            "(line 284,col 9)-(line 284,col 100)",
            "(line 285,col 9)-(line 285,col 53)",
            "(line 286,col 9)-(line 286,col 49)",
            "(line 287,col 9)-(line 289,col 9)",
            "(line 290,col 9)-(line 290,col 49)",
            "(line 291,col 9)-(line 291,col 55)",
            "(line 292,col 9)-(line 298,col 9)",
            "(line 299,col 9)-(line 299,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getCumulativeTestPoints()",
        "snippet": "    protected int[] getCumulativeTestPoints() {\n        return cumulativeTestPoints;\n    }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n     * @return Returns the cumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 307,col 9)-(line 307,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setCumulativeTestPoints(int[])",
        "snippet": "    protected void setCumulativeTestPoints(int[] cumulativeTestPoints) {\n        this.cumulativeTestPoints = cumulativeTestPoints;\n    }\n",
        "begin_line": 313,
        "end_line": 315,
        "comment": "\n     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 314,col 9)-(line 314,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getCumulativeTestValues()",
        "snippet": "    protected double[] getCumulativeTestValues() {\n        return cumulativeTestValues;\n    }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": "\n     * @return Returns the cumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setCumulativeTestValues(double[])",
        "snippet": "    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n        this.cumulativeTestValues = cumulativeTestValues;\n    }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n     * @param cumulativeTestValues The cumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 328,col 9)-(line 328,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDensityTestPoints()",
        "snippet": "    protected int[] getDensityTestPoints() {\n        return densityTestPoints;\n    }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n     * @return Returns the densityTestPoints.\n     ",
        "child_ranges": [
            "(line 335,col 9)-(line 335,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDensityTestPoints(int[])",
        "snippet": "    protected void setDensityTestPoints(int[] densityTestPoints) {\n        this.densityTestPoints = densityTestPoints;\n    }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "\n     * @param densityTestPoints The densityTestPoints to set.\n     ",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDensityTestValues()",
        "snippet": "    protected double[] getDensityTestValues() {\n        return densityTestValues;\n    }\n",
        "begin_line": 348,
        "end_line": 350,
        "comment": "\n     * @return Returns the densityTestValues.\n     ",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDensityTestValues(double[])",
        "snippet": "    protected void setDensityTestValues(double[] densityTestValues) {\n        this.densityTestValues = densityTestValues;\n    }\n",
        "begin_line": 355,
        "end_line": 357,
        "comment": "\n     * @param densityTestValues The densityTestValues to set.\n     ",
        "child_ranges": [
            "(line 356,col 9)-(line 356,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getDistribution()",
        "snippet": "    protected IntegerDistribution getDistribution() {\n        return distribution;\n    }\n",
        "begin_line": 362,
        "end_line": 364,
        "comment": "\n     * @return Returns the distribution.\n     ",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setDistribution(org.apache.commons.math.distribution.IntegerDistribution)",
        "snippet": "    protected void setDistribution(IntegerDistribution distribution) {\n        this.distribution = distribution;\n    }\n",
        "begin_line": 369,
        "end_line": 371,
        "comment": "\n     * @param distribution The distribution to set.\n     ",
        "child_ranges": [
            "(line 370,col 9)-(line 370,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestPoints()",
        "snippet": "    protected double[] getInverseCumulativeTestPoints() {\n        return inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 376,
        "end_line": 378,
        "comment": "\n     * @return Returns the inverseCumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestPoints(double[])",
        "snippet": "    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 383,
        "end_line": 385,
        "comment": "\n     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getInverseCumulativeTestValues()",
        "snippet": "    protected int[] getInverseCumulativeTestValues() {\n        return inverseCumulativeTestValues;\n    }\n",
        "begin_line": 390,
        "end_line": 392,
        "comment": "\n     * @return Returns the inverseCumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 391,col 9)-(line 391,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setInverseCumulativeTestValues(int[])",
        "snippet": "    protected void setInverseCumulativeTestValues(int[] inverseCumulativeTestValues) {\n        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n    }\n",
        "begin_line": 397,
        "end_line": 399,
        "comment": "\n     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.getTolerance()",
        "snippet": "    protected double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 404,
        "end_line": 406,
        "comment": "\n     * @return Returns the tolerance.\n     ",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math.distribution.PoissonDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java",
        "signature": "org.apache.commons.math.distribution.IntegerDistributionAbstractTest.setTolerance(double)",
        "snippet": "    protected void setTolerance(double tolerance) {\n        this.tolerance = tolerance;\n    }\n",
        "begin_line": 411,
        "end_line": 413,
        "comment": "\n     * @param tolerance The tolerance to set.\n     ",
        "child_ranges": [
            "(line 412,col 9)-(line 412,col 35)"
        ]
    }
]