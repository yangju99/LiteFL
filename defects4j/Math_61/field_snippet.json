[
    {
        "class_name": "org.apache.commons.math.distribution.AbstractDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -38038050983108802L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI",
        "snippet": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        "begin_line": 27,
        "end_line": 27,
        "comment": " Archimede's constant PI, ratio of circle circumference to diameter. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.E",
        "snippet": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " Napier's constant e, base of the natural logarithm. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A",
        "snippet": "    private static final double EXP_INT_TABLE_A[] = new double[1500];",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B",
        "snippet": "    private static final double EXP_INT_TABLE_B[] = new double[1500];",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750]\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A",
        "snippet": "    private static final double EXP_FRAC_TABLE_A[] = new double[1025];",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B",
        "snippet": "    private static final double EXP_FRAC_TABLE_B[] = new double[1025];",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.FACT",
        "snippet": "    private static final double FACT[] = new double[20];",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Factorial table, for Taylor series expansions. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_MANT",
        "snippet": "    private static final double LN_MANT[][] = new double[1024][];",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_A",
        "snippet": "    private static final double LN_2_A = 0.693147063255310059;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " log(2) (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_B",
        "snippet": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " log(2) (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_SPLIT_COEF",
        "snippet": "    private static final double LN_SPLIT_COEF[][] = {\n        {2.0, 0.0},\n        {0.6666666269302368, 3.9736429850260626E-8},\n        {0.3999999761581421, 2.3841857910019882E-8},\n        {0.2857142686843872, 1.7029898543501842E-8},\n        {0.2222222089767456, 1.3245471311735498E-8},\n        {0.1818181574344635, 2.4384203044354907E-8},\n        {0.1538461446762085, 9.140260083262505E-9},\n        {0.13333332538604736, 9.220590270857665E-9},\n        {0.11764700710773468, 1.2393345855018391E-8},\n        {0.10526403784751892, 8.251545029714408E-9},\n        {0.0952233225107193, 1.2675934823758863E-8},\n        {0.08713622391223907, 1.1430250008909141E-8},\n        {0.07842259109020233, 2.404307984052299E-9},\n        {0.08371849358081818, 1.176342548272881E-8},\n        {0.030589580535888672, 1.2958646899018938E-9},\n        {0.14982303977012634, 1.225743062930824E-8},\n    };",
        "begin_line": 65,
        "end_line": 82,
        "comment": " Coefficients for slowLog. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_QUICK_COEF",
        "snippet": "    private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
        "begin_line": 85,
        "end_line": 95,
        "comment": " Coefficients for log, when input 0.99 < x < 1.01. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF",
        "snippet": "    private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
        "begin_line": 98,
        "end_line": 105,
        "comment": " Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_A",
        "snippet": "    private static final double SINE_TABLE_A[] = new double[14];",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Sine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_B",
        "snippet": "    private static final double SINE_TABLE_B[] = new double[14];",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Sine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_A",
        "snippet": "    private static final double COSINE_TABLE_A[] = new double[14];",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Cosine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_B",
        "snippet": "    private static final double COSINE_TABLE_B[] = new double[14];",
        "begin_line": 117,
        "end_line": 117,
        "comment": " Cosine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_A",
        "snippet": "    private static final double TANGENT_TABLE_A[] = new double[14];",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Tangent table, used by atan() (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_B",
        "snippet": "    private static final double TANGENT_TABLE_B[] = new double[14];",
        "begin_line": 123,
        "end_line": 123,
        "comment": " Tangent table, used by atan() (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.RECIP_2PI",
        "snippet": "    private static long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
        "begin_line": 126,
        "end_line": 144,
        "comment": " Bits of 1/(2*pi), need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI_O_4_BITS",
        "snippet": "    private static long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
        "begin_line": 147,
        "end_line": 149,
        "comment": " Bits of pi/4, need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EIGHTHES",
        "snippet": "    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
        "begin_line": 155,
        "end_line": 155,
        "comment": " Eighthes.\n     * This is used by sinQ, because its faster to do a table lookup than\n     * a multiply in this time-critical routine\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.CBRTTWO",
        "snippet": "    private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998, \n                                            1.0, \n                                            1.2599210498948732, \n                                            1.5874010519681994 };",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Table of 2^((n+2)/3) "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n     * Default inverse cumulative probability accuracy\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8589540077390120676L;",
        "begin_line": 45,
        "end_line": 45,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI",
        "snippet": "    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);",
        "begin_line": 48,
        "end_line": 48,
        "comment": " &sqrt;(2 &pi;) "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.mean",
        "snippet": "    private double mean = 0;",
        "begin_line": 51,
        "end_line": 51,
        "comment": " The mean of this distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation",
        "snippet": "    private double standardDeviation = 1;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The standard deviation of this distribution. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.NormalDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.NormalDistributionImpl.solverAbsoluteAccuracy",
        "snippet": "    private final double solverAbsoluteAccuracy;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Inverse cumulative probability accuracy "
    },
    {
        "class_name": "org.apache.commons.math.exception.util.LocalizedFormats",
        "src_path": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "signature": "org.apache.commons.math.exception.util.LocalizedFormats.sourceFormat",
        "snippet": "    private final String sourceFormat;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " Source English format. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractIntegerDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractIntegerDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1146319659338487221L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractIntegerDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractIntegerDistribution.randomData",
        "snippet": "    protected final RandomDataImpl randomData = new RandomDataImpl();",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n     * RandomData instance used to generate samples from the distribution\n     * @since 2.2\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.DEFAULT_MAX_ITERATIONS",
        "snippet": "    public static final int DEFAULT_MAX_ITERATIONS = 10000000;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * Default maximum number of iterations for cumulative probability calculations.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.DEFAULT_EPSILON",
        "snippet": "    public static final double DEFAULT_EPSILON = 1E-12;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n     * Default convergence criterion.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3349935121172596109L;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.normal",
        "snippet": "    private NormalDistribution normal;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Distribution used to compute normal approximation. "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.mean",
        "snippet": "    private double mean;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n     * Holds the Poisson mean for the distribution.\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.maxIterations",
        "snippet": "    private int maxIterations = DEFAULT_MAX_ITERATIONS;",
        "begin_line": 65,
        "end_line": 65,
        "comment": "\n     * Maximum number of iterations for cumulative probability.\n     *\n     * Cumulative probabilities are estimated using either Lanczos series approximation of\n     * Gamma#regularizedGammaP or continued fraction approximation of Gamma#regularizedGammaQ.\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.PoissonDistributionImpl",
        "src_path": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "signature": "org.apache.commons.math.distribution.PoissonDistributionImpl.epsilon",
        "snippet": "    private double epsilon = DEFAULT_EPSILON;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n     * Convergence criterion for cumulative probability.\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -38038050983108802L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.randomData",
        "snippet": "    protected final RandomDataImpl randomData = new RandomDataImpl();",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n     * RandomData instance used to generate samples from the distribution\n     * @since 2.2\n     "
    },
    {
        "class_name": "org.apache.commons.math.distribution.AbstractContinuousDistribution",
        "src_path": "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java",
        "signature": "org.apache.commons.math.distribution.AbstractContinuousDistribution.solverAbsoluteAccuracy",
        "snippet": "    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n     * Solver absolute accuracy for inverse cum computation\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math.random.RandomDataImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -626730818244969716L;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math.random.RandomDataImpl.rand",
        "snippet": "    private RandomGenerator rand = null;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " underlying random number generator "
    },
    {
        "class_name": "org.apache.commons.math.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math.random.RandomDataImpl.secRand",
        "snippet": "    private SecureRandom secRand = null;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " underlying secure random number generator "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 9058794795027570002L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.pattern",
        "snippet": "    private final Localizable pattern;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * Pattern used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.arguments",
        "snippet": "    private final Object[] arguments;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n     * Arguments used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 5305498554076846637L;",
        "begin_line": 241,
        "end_line": 241,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 6718518191249632175L;",
        "begin_line": 285,
        "end_line": 285,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 6067985859347601503L;",
        "begin_line": 329,
        "end_line": 329,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -4284649691002411505L;",
        "begin_line": 390,
        "end_line": 390,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 6880901520234515725L;",
        "begin_line": 447,
        "end_line": 447,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -1878427236170442052L;",
        "begin_line": 491,
        "end_line": 491,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 1632410088350355086L;",
        "begin_line": 535,
        "end_line": 535,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -4284649691002411505L;",
        "begin_line": 567,
        "end_line": 567,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 451965530686593945L;",
        "begin_line": 612,
        "end_line": 612,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = 8153587599409010120L;",
        "begin_line": 662,
        "end_line": 662,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/MathRuntimeException.java",
        "signature": "org.apache.commons.math.MathRuntimeException.serialVersionUID",
        "snippet": "            private static final long serialVersionUID = -201865440834027016L;",
        "begin_line": 690,
        "end_line": 690,
        "comment": " Serializable version identifier. "
    }
]