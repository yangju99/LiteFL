[
    {
        "name": "StringEscapeUtils.escapeHtml#454",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeHtml(java.lang.String)",
        "snippet": "    public static String escapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            escapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException ioe) {\n            //should be impossible\n            throw new UnhandledException(ioe);\n        }\n    }\n",
        "begin_line": 454,
        "end_line": 466,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n     *\n     * <p>\n     * For example:\n     * </p> \n     * <p><code>\"bread\" & \"butter\"</code></p>\n     * becomes:\n     * <p>\n     * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.\n     * </p>\n     *\n     * <p>Supports all known HTML 4.0 entities, including funky accents.\n     * Note that the commonly used apostrophe escape character (&amp;apos;)\n     * is not a legal entity and so is not supported). </p>\n     *\n     * @param str  the <code>String</code> to escape, may be null\n     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n     * \n     * @see #unescapeHtml(String)\n     * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringEscapeUtils.escapeHtml#497",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.escapeHtml(java.io.Writer, java.lang.String)",
        "snippet": "    public static void escapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.escape(writer, string);\n    }\n",
        "begin_line": 497,
        "end_line": 505,
        "comment": "\n     * <p>Escapes the characters in a <code>String</code> using HTML entities and writes\n     * them to a <code>Writer</code>.</p>\n     *\n     * <p>\n     * For example:\n     * </p> \n     * <code>\"bread\" & \"butter\"</code>\n     * <p>becomes:</p>\n     * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.\n     *\n     * <p>Supports all known HTML 4.0 entities, including funky accents.\n     * Note that the commonly used apostrophe escape character (&amp;apos;)\n     * is not a legal entity and so is not supported). </p>\n     *\n     * @param writer  the writer receiving the escaped string, not null\n     * @param string  the <code>String</code> to escape, may be null\n     * @throws IllegalArgumentException if the writer is null\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     * \n     * @see #escapeHtml(String)\n     * @see #unescapeHtml(String)\n     * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.name#532",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.LookupEntityMap.name(int)",
        "snippet": "        public String name(int value) {\n            if (value < LOOKUP_TABLE_SIZE) {\n                return lookupTable()[value];\n            }\n            return super.name(value);\n        }\n",
        "begin_line": 532,
        "end_line": 537,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.PrimitiveEntityMap": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.escape#825",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.escape(java.io.Writer, java.lang.String)",
        "snippet": "    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }\n",
        "begin_line": 825,
        "end_line": 844,
        "comment": "\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.doUnescape#927",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.doUnescape(java.io.Writer, java.lang.String, int)",
        "snippet": "    private void doUnescape(Writer writer, String str, int firstAmp) throws IOException {\n        writer.write(str, 0, firstAmp);\n        int len = str.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = str.charAt(i);\n            if (c == '&') {\n                int nextIdx = i + 1;\n                int semiColonIdx = str.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = str.indexOf('&', i + 1);\n                if (amphersandIdx != -1 && amphersandIdx < semiColonIdx) {\n                    // Then the text looks like &...&...;\n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = str.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { // escaped value content is an integer (decimal or\n                        // hexidecimal)\n                        if (entityContentLen > 1) {\n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                        break;\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                                if (entityValue > 0xFFFF) {\n                                    entityValue = -1;\n                                }\n                            } catch (NumberFormatException e) {\n                                entityValue = -1;\n                            }\n                        }\n                    } else { // escaped value content is an entity name\n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n\n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; // move index up to the semi-colon\n            } else {\n                writer.write(c);\n            }\n        }\n    }\n",
        "begin_line": 927,
        "end_line": 988,
        "comment": "\n     * Underlying unescape method that allows the optimisation of not starting from the 0 index again.\n     *\n     * @param writer\n     *            The <code>Writer</code> to write the results to; assumed to be non-null.\n     * @param str\n     *            The source <code>String</code> to unescape; assumed to be non-null.\n     * @param firstAmp\n     *            The <code>int</code> index of the first ampersand in the source String.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringEscapeUtils.unescapeHtml#524",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeHtml(java.lang.String)",
        "snippet": "    public static String unescapeHtml(String str) {\n        if (str == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n            unescapeHtml(writer, str);\n            return writer.toString();\n        } catch (IOException ioe) {\n            //should be impossible\n            throw new UnhandledException(ioe);\n        }\n    }\n",
        "begin_line": 524,
        "end_line": 536,
        "comment": "\n     * <p>Unescapes a string containing entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes. Supports HTML 4.0 entities.</p>\n     *\n     * <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n     * will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n     *\n     * <p>If an entity is unrecognized, it is left alone, and inserted\n     * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n     * become \"&gt;&amp;zzzz;x\".</p>\n     *\n     * @param str  the <code>String</code> to unescape, may be null\n     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n     * @see #escapeHtml(Writer, String)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringEscapeUtils.unescapeHtml#556",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang.StringEscapeUtils",
        "signature": "org.apache.commons.lang.StringEscapeUtils.unescapeHtml(java.io.Writer, java.lang.String)",
        "snippet": "    public static void unescapeHtml(Writer writer, String string) throws IOException {\n        if (writer == null ) {\n            throw new IllegalArgumentException (\"The Writer must not be null.\");\n        }\n        if (string == null) {\n            return;\n        }\n        Entities.HTML40.unescape(writer, string);\n    }\n",
        "begin_line": 556,
        "end_line": 564,
        "comment": "\n     * <p>Unescapes a string containing entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes. Supports HTML 4.0 entities.</p>\n     *\n     * <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n     * will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n     *\n     * <p>If an entity is unrecognized, it is left alone, and inserted\n     * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n     * become \"&gt;&amp;zzzz;x\".</p>\n     *\n     * @param writer  the writer receiving the unescaped string, not null\n     * @param string  the <code>String</code> to unescape, may be null\n     * @throws IllegalArgumentException if the writer is null\n     * @throws IOException if an IOException occurs\n     * @see #escapeHtml(String)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.get#236",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.get(int)",
        "snippet": "    public Object get(int key) {\n        Entry tab[] = table;\n        int hash = key;\n        int index = (hash & 0x7FFFFFFF) % tab.length;\n        for (Entry e = tab[index]; e != null; e = e.next) {\n            if (e.hash == hash) {\n                return e.value;\n            }\n        }\n        return null;\n    }\n",
        "begin_line": 236,
        "end_line": 246,
        "comment": "\n     * <p>Returns the value to which the specified key is mapped in this map.</p>\n     *\n     * @param   key   a key in the hashtable.\n     * @return  the value to which the key is mapped in this hashtable;\n     *          <code>null</code> if the key is not mapped to any value in\n     *          this hashtable.\n     * @see     #put(int, Object)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.entityName#765",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.entityName(int)",
        "snippet": "    public String entityName(int value) {\n        return map.name(value);\n    }\n",
        "begin_line": 765,
        "end_line": 767,
        "comment": "\n     * <p>\n     * Returns the name of the entity identified by the specified value.\n     * </p>\n     * \n     * @param value\n     *            the value to locate\n     * @return entity name associated with the specified value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.name#456",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.PrimitiveEntityMap.name(int)",
        "snippet": "        public String name(int value) {\n            return (String) mapValueToName.get(value);\n        }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        },
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.unescape#904",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.unescape(java.io.Writer, java.lang.String)",
        "snippet": "    public void unescape(Writer writer, String str) throws IOException {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            writer.write(str);\n            return;\n        } else {\n            doUnescape(writer, str, firstAmp);\n        }\n    }\n",
        "begin_line": 904,
        "end_line": 912,
        "comment": "\n     * <p>\n     * Unescapes the escaped entities in the <code>String</code> passed and writes the result to the\n     * <code>Writer</code> passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results to; assumed to be non-null.\n     * @param str\n     *            The source <code>String</code> to unescape; assumed to be non-null.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.Entry#83",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.Entry.Entry(int, int, java.lang.Object, org.apache.commons.lang.IntHashMap.Entry)",
        "snippet": "        protected Entry(int hash, int key, Object value, Entry next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\n         * <p>Create a new entry with the given values.</p>\n         *\n         * @param hash The code used to hash the object with\n         * @param key The key used to enter this in the table\n         * @param value The value for this key\n         * @param next A reference to the next entry in the table\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.IntHashMap#95",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.IntHashMap()",
        "snippet": "    public IntHashMap() {\n        this(20, 0.75f);\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * <p>Constructs a new, empty hashtable with a default capacity and load\n     * factor, which is <code>20</code> and <code>0.75</code> respectively.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.IntHashMap#120",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.IntHashMap(int, float)",
        "snippet": "    public IntHashMap(int initialCapacity, float loadFactor) {\n        super();\n        if (initialCapacity < 0) {\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        }\n        if (loadFactor <= 0) {\n            throw new IllegalArgumentException(\"Illegal Load: \" + loadFactor);\n        }\n        if (initialCapacity == 0) {\n            initialCapacity = 1;\n        }\n\n        this.loadFactor = loadFactor;\n        table = new Entry[initialCapacity];\n        threshold = (int) (initialCapacity * loadFactor);\n    }\n",
        "begin_line": 120,
        "end_line": 135,
        "comment": "\n     * <p>Constructs a new, empty hashtable with the specified initial\n     * capacity and the specified load factor.</p>\n     *\n     * @param initialCapacity the initial capacity of the hashtable.\n     * @param loadFactor the load factor of the hashtable.\n     * @throws IllegalArgumentException  if the initial capacity is less\n     *             than zero, or if the load factor is nonpositive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.rehash#257",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.rehash()",
        "snippet": "    protected void rehash() {\n        int oldCapacity = table.length;\n        Entry oldMap[] = table;\n\n        int newCapacity = oldCapacity * 2 + 1;\n        Entry newMap[] = new Entry[newCapacity];\n\n        threshold = (int) (newCapacity * loadFactor);\n        table = newMap;\n\n        for (int i = oldCapacity; i-- > 0;) {\n            for (Entry old = oldMap[i]; old != null;) {\n                Entry e = old;\n                old = old.next;\n\n                int index = (e.hash & 0x7FFFFFFF) % newCapacity;\n                e.next = newMap[index];\n                newMap[index] = e;\n            }\n        }\n    }\n",
        "begin_line": 257,
        "end_line": 277,
        "comment": "\n     * <p>Increases the capacity of and internally reorganizes this\n     * hashtable, in order to accommodate and access its entries more\n     * efficiently.</p>\n     *\n     * <p>This method is called automatically when the number of keys\n     * in the hashtable exceeds this hashtable's capacity and load\n     * factor.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntHashMap.put#294",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/IntHashMap.java",
        "class_name": "org.apache.commons.lang.IntHashMap",
        "signature": "org.apache.commons.lang.IntHashMap.put(int, java.lang.Object)",
        "snippet": "    public Object put(int key, Object value) {\n        // Makes sure the key is not already in the hashtable.\n        Entry tab[] = table;\n        int hash = key;\n        int index = (hash & 0x7FFFFFFF) % tab.length;\n        for (Entry e = tab[index]; e != null; e = e.next) {\n            if (e.hash == hash) {\n                Object old = e.value;\n                e.value = value;\n                return old;\n            }\n        }\n\n        if (count >= threshold) {\n            // Rehash the table if the threshold is exceeded\n            rehash();\n\n            tab = table;\n            index = (hash & 0x7FFFFFFF) % tab.length;\n        }\n\n        // Creates the new entry.\n        Entry e = new Entry(hash, key, value, tab[index]);\n        tab[index] = e;\n        count++;\n        return null;\n    }\n",
        "begin_line": 294,
        "end_line": 320,
        "comment": "\n     * <p>Maps the specified <code>key</code> to the specified\n     * <code>value</code> in this hashtable. The key cannot be\n     * <code>null</code>. </p>\n     *\n     * <p>The value can be retrieved by calling the <code>get</code> method\n     * with a key that is equal to the original key.</p>\n     *\n     * @param key     the hashtable key.\n     * @param value   the value.\n     * @return the previous value of the specified key in this hashtable,\n     *         or <code>null</code> if it did not have one.\n     * @throws  NullPointerException  if the key is <code>null</code>.\n     * @see     #get(int)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.add#448",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.PrimitiveEntityMap.add(java.lang.String, int)",
        "snippet": "        public void add(String name, int value) {\n            mapNameToValue.put(name, new Integer(value));\n            mapValueToName.put(value, name);\n        }\n",
        "begin_line": 448,
        "end_line": 451,
        "comment": "\n         * {@inheritDoc}\n         ",
        "resolved_comments": {
            "org.apache.commons.lang.Entities.EntityMap": null
        },
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.fillWithHtml40Entities#398",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.fillWithHtml40Entities(org.apache.commons.lang.Entities)",
        "snippet": "    static void fillWithHtml40Entities(Entities entities) {\n        entities.addEntities(BASIC_ARRAY);\n        entities.addEntities(ISO8859_1_ARRAY);\n        entities.addEntities(HTML40_ARRAY);\n    }\n",
        "begin_line": 398,
        "end_line": 402,
        "comment": "\n     * <p>\n     * Fills the specified entities instance with HTML 40 entities.\n     * </p>\n     * \n     * @param entities\n     *            the instance to be filled.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.addEntities#736",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.addEntities(java.lang.String[][])",
        "snippet": "    public void addEntities(String[][] entityArray) {\n        for (int i = 0; i < entityArray.length; ++i) {\n            addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));\n        }\n    }\n",
        "begin_line": 736,
        "end_line": 740,
        "comment": "\n     * <p>\n     * Adds entities to this entity.\n     * </p>\n     * \n     * @param entityArray\n     *            array of entities to be added\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "Entities.addEntity#752",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/Entities.java",
        "class_name": "org.apache.commons.lang.Entities",
        "signature": "org.apache.commons.lang.Entities.addEntity(java.lang.String, int)",
        "snippet": "    public void addEntity(String name, int value) {\n        map.add(name, value);\n    }\n",
        "begin_line": 752,
        "end_line": 754,
        "comment": "\n     * <p>\n     * Add an entity to this entity.\n     * </p>\n     * \n     * @param name\n     *            name of the entity\n     * @param value\n     *            vale of the entity\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    }
]