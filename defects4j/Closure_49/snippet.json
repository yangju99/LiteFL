[
    {
        "name": "Node.NodeMismatch#2508",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NodeMismatch.NodeMismatch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    NodeMismatch(Node nodeA, Node nodeB) {\n      this.nodeA = nodeA;\n      this.nodeB = nodeB;\n    }\n",
        "begin_line": 2508,
        "end_line": 2511,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toStringTree#1150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTree()",
        "snippet": "  public String toStringTree() {\n    return toStringTreeImpl();\n  }\n",
        "begin_line": 1150,
        "end_line": 1152,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toStringTreeImpl#1154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeImpl()",
        "snippet": "  private String toStringTreeImpl() {\n    try {\n      StringBuilder s = new StringBuilder();\n      appendStringTree(s);\n      return s.toString();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Should not happen\\n\" + e);\n    }\n  }\n",
        "begin_line": 1154,
        "end_line": 1162,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.appendStringTree#1164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.appendStringTree(java.lang.Appendable)",
        "snippet": "  public void appendStringTree(Appendable appendable) throws IOException {\n    toStringTreeHelper(this, 0, appendable);\n  }\n",
        "begin_line": 1164,
        "end_line": 1166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toStringTreeHelper#1168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toStringTreeHelper(com.google.javascript.rhino.Node, int, java.lang.Appendable)",
        "snippet": "  private static void toStringTreeHelper(Node n, int level, Appendable sb)\n      throws IOException {\n    if (Token.printTrees) {\n      for (int i = 0; i != level; ++i) {\n        sb.append(\"    \");\n      }\n      sb.append(n.toString());\n      sb.append('\\n');\n      for (Node cursor = n.getFirstChild();\n           cursor != null;\n           cursor = cursor.getNext()) {\n        toStringTreeHelper(cursor, level + 1, sb);\n      }\n    }\n  }\n",
        "begin_line": 1168,
        "end_line": 1182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.checkTreeEquals#1564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEquals(com.google.javascript.rhino.Node)",
        "snippet": "  public String checkTreeEquals(Node node2) {\n      NodeMismatch diff = checkTreeEqualsImpl(node2);\n      if (diff != null) {\n        return \"Node tree inequality:\" +\n            \"\\nTree1:\\n\" + toStringTree() +\n            \"\\n\\nTree2:\\n\" + node2.toStringTree() +\n            \"\\n\\nSubtree1: \" + diff.nodeA.toStringTree() +\n            \"\\n\\nSubtree2: \" + diff.nodeB.toStringTree();\n      }\n      return null;\n  }\n",
        "begin_line": 1564,
        "end_line": 1574,
        "comment": "\n   * Checks if the subtree under this node is the same as another subtree.\n   * Returns null if it's equal, or a message describing the differences.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.checkTreeEqualsImpl#1594",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.checkTreeEqualsImpl(com.google.javascript.rhino.Node)",
        "snippet": "  NodeMismatch checkTreeEqualsImpl(Node node2) {\n    if (!isEquivalentTo(node2, false, false)) {\n      return new NodeMismatch(this, node2);\n    }\n\n    NodeMismatch res = null;\n    Node n, n2;\n    for (n = first, n2 = node2.first;\n         res == null && n != null;\n         n = n.next, n2 = n2.next) {\n      if (node2 == null) {\n        throw new IllegalStateException();\n      }\n      res = n.checkTreeEqualsImpl(n2);\n      if (res != null) {\n        return res;\n      }\n    }\n    return res;\n  }\n",
        "begin_line": 1594,
        "end_line": 1613,
        "comment": "\n   * Compare this node to node2 recursively and return the first pair of nodes\n   * that differs doing a preorder depth-first traversal. Package private for\n   * testing. Returns null if the nodes are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 66
    },
    {
        "name": "Token.name#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "class_name": "com.google.javascript.rhino.Token",
        "signature": "com.google.javascript.rhino.Token.name(int)",
        "snippet": "  public static String name(int token)\n    {\n        if (!printNames) {\n            return String.valueOf(token);\n        }\n        switch (token) {\n          case ERROR:           return \"ERROR\";\n          case EOF:             return \"EOF\";\n          case EOL:             return \"EOL\";\n          case ENTERWITH:       return \"ENTERWITH\";\n          case LEAVEWITH:       return \"LEAVEWITH\";\n          case RETURN:          return \"RETURN\";\n          case GOTO:            return \"GOTO\";\n          case IFEQ:            return \"IFEQ\";\n          case IFNE:            return \"IFNE\";\n          case SETNAME:         return \"SETNAME\";\n          case BITOR:           return \"BITOR\";\n          case BITXOR:          return \"BITXOR\";\n          case BITAND:          return \"BITAND\";\n          case EQ:              return \"EQ\";\n          case NE:              return \"NE\";\n          case LT:              return \"LT\";\n          case LE:              return \"LE\";\n          case GT:              return \"GT\";\n          case GE:              return \"GE\";\n          case LSH:             return \"LSH\";\n          case RSH:             return \"RSH\";\n          case URSH:            return \"URSH\";\n          case ADD:             return \"ADD\";\n          case SUB:             return \"SUB\";\n          case MUL:             return \"MUL\";\n          case DIV:             return \"DIV\";\n          case MOD:             return \"MOD\";\n          case NOT:             return \"NOT\";\n          case BITNOT:          return \"BITNOT\";\n          case POS:             return \"POS\";\n          case NEG:             return \"NEG\";\n          case NEW:             return \"NEW\";\n          case DELPROP:         return \"DELPROP\";\n          case TYPEOF:          return \"TYPEOF\";\n          case GETPROP:         return \"GETPROP\";\n          case SETPROP:         return \"SETPROP\";\n          case GETELEM:         return \"GETELEM\";\n          case SETELEM:         return \"SETELEM\";\n          case CALL:            return \"CALL\";\n          case NAME:            return \"NAME\";\n          case LABEL_NAME:      return \"LABEL_NAME\";\n          case NUMBER:          return \"NUMBER\";\n          case STRING:          return \"STRING\";\n          case NULL:            return \"NULL\";\n          case THIS:            return \"THIS\";\n          case FALSE:           return \"FALSE\";\n          case TRUE:            return \"TRUE\";\n          case SHEQ:            return \"SHEQ\";\n          case SHNE:            return \"SHNE\";\n          case REGEXP:          return \"REGEXP\";\n          case BINDNAME:        return \"BINDNAME\";\n          case THROW:           return \"THROW\";\n          case RETHROW:         return \"RETHROW\";\n          case IN:              return \"IN\";\n          case INSTANCEOF:      return \"INSTANCEOF\";\n          case LOCAL_LOAD:      return \"LOCAL_LOAD\";\n          case GETVAR:          return \"GETVAR\";\n          case SETVAR:          return \"SETVAR\";\n          case CATCH_SCOPE:     return \"CATCH_SCOPE\";\n          case ENUM_INIT_KEYS:  return \"ENUM_INIT_KEYS\";\n          case ENUM_INIT_VALUES:  return \"ENUM_INIT_VALUES\";\n          case ENUM_NEXT:       return \"ENUM_NEXT\";\n          case ENUM_ID:         return \"ENUM_ID\";\n          case THISFN:          return \"THISFN\";\n          case RETURN_RESULT:   return \"RETURN_RESULT\";\n          case ARRAYLIT:        return \"ARRAYLIT\";\n          case OBJECTLIT:       return \"OBJECTLIT\";\n          case GET_REF:         return \"GET_REF\";\n          case SET_REF:         return \"SET_REF\";\n          case DEL_REF:         return \"DEL_REF\";\n          case REF_CALL:        return \"REF_CALL\";\n          case REF_SPECIAL:     return \"REF_SPECIAL\";\n          case DEFAULTNAMESPACE:return \"DEFAULTNAMESPACE\";\n          case ESCXMLTEXT:      return \"ESCXMLTEXT\";\n          case ESCXMLATTR:      return \"ESCXMLATTR\";\n          case REF_MEMBER:      return \"REF_MEMBER\";\n          case REF_NS_MEMBER:   return \"REF_NS_MEMBER\";\n          case REF_NAME:        return \"REF_NAME\";\n          case REF_NS_NAME:     return \"REF_NS_NAME\";\n          case TRY:             return \"TRY\";\n          case SEMI:            return \"SEMI\";\n          case LB:              return \"LB\";\n          case RB:              return \"RB\";\n          case LC:              return \"LC\";\n          case RC:              return \"RC\";\n          case LP:              return \"LP\";\n          case RP:              return \"RP\";\n          case COMMA:           return \"COMMA\";\n          case ASSIGN:          return \"ASSIGN\";\n          case ASSIGN_BITOR:    return \"ASSIGN_BITOR\";\n          case ASSIGN_BITXOR:   return \"ASSIGN_BITXOR\";\n          case ASSIGN_BITAND:   return \"ASSIGN_BITAND\";\n          case ASSIGN_LSH:      return \"ASSIGN_LSH\";\n          case ASSIGN_RSH:      return \"ASSIGN_RSH\";\n          case ASSIGN_URSH:     return \"ASSIGN_URSH\";\n          case ASSIGN_ADD:      return \"ASSIGN_ADD\";\n          case ASSIGN_SUB:      return \"ASSIGN_SUB\";\n          case ASSIGN_MUL:      return \"ASSIGN_MUL\";\n          case ASSIGN_DIV:      return \"ASSIGN_DIV\";\n          case ASSIGN_MOD:      return \"ASSIGN_MOD\";\n          case HOOK:            return \"HOOK\";\n          case COLON:           return \"COLON\";\n          case OR:              return \"OR\";\n          case AND:             return \"AND\";\n          case INC:             return \"INC\";\n          case DEC:             return \"DEC\";\n          case DOT:             return \"DOT\";\n          case FUNCTION:        return \"FUNCTION\";\n          case EXPORT:          return \"EXPORT\";\n          case IMPORT:          return \"IMPORT\";\n          case IF:              return \"IF\";\n          case ELSE:            return \"ELSE\";\n          case SWITCH:          return \"SWITCH\";\n          case CASE:            return \"CASE\";\n          case DEFAULT:         return \"DEFAULT\";\n          case WHILE:           return \"WHILE\";\n          case DO:              return \"DO\";\n          case FOR:             return \"FOR\";\n          case BREAK:           return \"BREAK\";\n          case CONTINUE:        return \"CONTINUE\";\n          case VAR:             return \"VAR\";\n          case WITH:            return \"WITH\";\n          case CATCH:           return \"CATCH\";\n          case FINALLY:         return \"FINALLY\";\n          case RESERVED:        return \"RESERVED\";\n          case EMPTY:           return \"EMPTY\";\n          case BLOCK:           return \"BLOCK\";\n          case LABEL:           return \"LABEL\";\n          case TARGET:          return \"TARGET\";\n          case LOOP:            return \"LOOP\";\n          case EXPR_VOID:       return \"EXPR_VOID\";\n          case EXPR_RESULT:     return \"EXPR_RESULT\";\n          case JSR:             return \"JSR\";\n          case SCRIPT:          return \"SCRIPT\";\n          case TYPEOFNAME:      return \"TYPEOFNAME\";\n          case USE_STACK:       return \"USE_STACK\";\n          case SETPROP_OP:      return \"SETPROP_OP\";\n          case SETELEM_OP:      return \"SETELEM_OP\";\n          case LOCAL_BLOCK:     return \"LOCAL_BLOCK\";\n          case SET_REF_OP:      return \"SET_REF_OP\";\n          case DOTDOT:          return \"DOTDOT\";\n          case COLONCOLON:      return \"COLONCOLON\";\n          case XML:             return \"XML\";\n          case DOTQUERY:        return \"DOTQUERY\";\n          case XMLATTR:         return \"XMLATTR\";\n          case XMLEND:          return \"XMLEND\";\n          case TO_OBJECT:       return \"TO_OBJECT\";\n          case TO_DOUBLE:       return \"TO_DOUBLE\";\n          case GET:             return \"GET\";\n          case SET:             return \"SET\";\n          case CONST:           return \"CONST\";\n          case SETCONST:        return \"SETCONST\";\n          case DEBUGGER:        return \"DEBUGGER\";\n          case ANNOTATION:      return \"ANNOTATION\";\n          case PIPE:            return \"PIPE\";\n          case STAR:            return \"STAR\";\n          case EOC:             return \"EOC\";\n          case QMARK:           return \"QMARK\";\n          case ELLIPSIS:        return \"ELLIPSIS\";\n          case BANG:            return \"BANG\";\n          case VOID:            return \"VOID\";\n          case EQUALS:          return \"EQUALS\";\n        }\n\n        // Token without name\n        throw new IllegalStateException(String.valueOf(token));\n    }\n",
        "begin_line": 271,
        "end_line": 443,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9925
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toString#413",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return objectValue == null ? \"null\" : objectValue.toString();\n    }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9925
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.propToString#183",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.propToString(int)",
        "snippet": "  private static final String propToString(int propType) {\n      switch (propType) {\n        case LOCAL_BLOCK_PROP:   return \"local_block\";\n        case OBJECT_IDS_PROP:    return \"object_ids_prop\";\n        case CATCH_SCOPE_PROP:   return \"catch_scope_prop\";\n        case LABEL_ID_PROP:      return \"label_id_prop\";\n        case TARGET_PROP:        return \"target\";\n        case BRACELESS_TYPE:     return \"braceless_type\";\n        case BREAK_PROP:         return \"break\";\n        case CONTINUE_PROP:      return \"continue\";\n        case ENUM_PROP:          return \"enum\";\n        case FUNCTION_PROP:      return \"function\";\n        case TEMP_PROP:          return \"temp\";\n        case LOCAL_PROP:         return \"local\";\n        case CODEOFFSET_PROP:    return \"codeoffset\";\n        case FIXUPS_PROP:        return \"fixups\";\n        case VARS_PROP:          return \"vars\";\n        case VAR_ARGS_NAME:      return \"var_args_name\";\n        case USES_PROP:          return \"uses\";\n        case REGEXP_PROP:        return \"regexp\";\n        case CASES_PROP:         return \"cases\";\n        case DEFAULT_PROP:       return \"default\";\n        case CASEARRAY_PROP:     return \"casearray\";\n        case SOURCENAME_PROP:    return \"sourcename\";\n        case TYPE_PROP:          return \"type\";\n        case SPECIAL_PROP_PROP:  return \"special_prop\";\n        case LABEL_PROP:         return \"label\";\n        case FINALLY_PROP:       return \"finally\";\n        case LOCALCOUNT_PROP:    return \"localcount\";\n\n        case TARGETBLOCK_PROP:   return \"targetblock\";\n        case VARIABLE_PROP:      return \"variable\";\n        case LASTUSE_PROP:       return \"lastuse\";\n        case ISNUMBER_PROP:      return \"isnumber\";\n        case DIRECTCALL_PROP:    return \"directcall\";\n\n        case SPECIALCALL_PROP:   return \"specialcall\";\n        case DEBUGSOURCE_PROP:   return \"debugsource\";\n\n        case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n\n        case SKIP_INDEXES_PROP:  return \"skip_indexes\";\n        case INCRDECR_PROP:      return \"incrdecr\";\n        case MEMBER_TYPE_PROP:   return \"member_type\";\n        case NAME_PROP:          return \"name\";\n        case PARENTHESIZED_PROP: return \"parenthesized\";\n        case QUOTED_PROP:        return \"quoted\";\n        case OPT_ARG_NAME:       return \"opt_arg\";\n\n        case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n        case EMPTY_BLOCK:        return \"empty_block\";\n        case ORIGINALNAME_PROP:  return \"originalname\";\n        case SIDE_EFFECT_FLAGS:  return \"side_effect_flags\";\n\n        case IS_CONSTANT_NAME:   return \"is_constant_name\";\n        case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n        case IS_VAR_ARGS_PARAM:  return \"is_var_args_param\";\n        case IS_NAMESPACE:       return \"is_namespace\";\n        case IS_DISPATCHER:      return \"is_dispatcher\";\n        case DIRECTIVES:         return \"directives\";\n        case DIRECT_EVAL:        return \"direct_eval\";\n        case FREE_CALL:          return \"free_call\";\n        case STATIC_SOURCE_FILE:    return \"source_file\";\n        case INPUT_ID:  return \"input_id\";\n        case LENGTH:    return \"length\";\n        default:\n          Kit.codeBug();\n      }\n      return null;\n  }\n",
        "begin_line": 183,
        "end_line": 252,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9925
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getSortedPropTypes#961",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSortedPropTypes()",
        "snippet": "  private int[] getSortedPropTypes() {\n    int count = 0;\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count++;\n    }\n\n    int[] keys = new int[count];\n    for (PropListItem x = propListHead; x != null; x = x.getNext()) {\n      count--;\n      keys[count] = x.getType();\n    }\n\n    Arrays.sort(keys);\n    return keys;\n  }\n",
        "begin_line": 961,
        "end_line": 975,
        "comment": " Gets all the property types, in sorted order.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9925
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toString#1034",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(java.lang.StringBuilder, boolean, boolean, boolean)",
        "snippet": "  private void toString(\n      StringBuilder sb,\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    if (Token.printTrees) {\n      sb.append(Token.name(type));\n      if (this instanceof StringNode) {\n        sb.append(' ');\n        sb.append(getString());\n      } else if (type == Token.FUNCTION) {\n        sb.append(' ');\n        // In the case of JsDoc trees, the first child is often not a string\n        // which causes exceptions to be thrown when calling toString or\n        // toStringTree.\n        if (first == null || first.getType() != Token.NAME) {\n          sb.append(\"<invalid>\");\n        } else {\n          sb.append(first.getString());\n        }\n      } else if (this instanceof ScriptOrFnNode) {\n        ScriptOrFnNode sof = (ScriptOrFnNode) this;\n        if (this instanceof FunctionNode) {\n          FunctionNode fn = (FunctionNode) this;\n          sb.append(' ');\n          sb.append(fn.getFunctionName());\n        }\n        if (printSource) {\n          sb.append(\" [source name: \");\n          sb.append(sof.getSourceName());\n          sb.append(\"] [encoded source length: \");\n          sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n          sb.append(\"] [base line: \");\n          sb.append(sof.getBaseLineno());\n          sb.append(\"] [end line: \");\n          sb.append(sof.getEndLineno());\n          sb.append(']');\n        }\n      } else if (type == Token.NUMBER) {\n        sb.append(' ');\n        sb.append(getDouble());\n      }\n      if (printSource) {\n        int lineno = getLineno();\n        if (lineno != -1) {\n          sb.append(' ');\n          sb.append(lineno);\n        }\n      }\n\n      if (printAnnotations) {\n        int[] keys = getSortedPropTypes();\n        for (int i = 0; i < keys.length; i++) {\n          int type = keys[i];\n          PropListItem x = lookupProperty(type);\n          sb.append(\" [\");\n          sb.append(propToString(type));\n          sb.append(\": \");\n          String value;\n          switch (type) {\n            case TARGETBLOCK_PROP: // can't add this as it recurses\n              value = \"target block property\";\n              break;\n            case LOCAL_BLOCK_PROP: // can't add this as it is dull\n              value = \"last local block\";\n              break;\n            case ISNUMBER_PROP:\n              switch (x.getIntValue()) {\n                case BOTH:\n                  value = \"both\";\n                  break;\n                case RIGHT:\n                  value = \"right\";\n                  break;\n                case LEFT:\n                  value = \"left\";\n                  break;\n                default:\n                  throw Kit.codeBug();\n              }\n              break;\n            case SPECIALCALL_PROP:\n              switch (x.getIntValue()) {\n                case SPECIALCALL_EVAL:\n                  value = \"eval\";\n                  break;\n                case SPECIALCALL_WITH:\n                  value = \"with\";\n                  break;\n                default:\n                  // NON_SPECIALCALL should not be stored\n                  throw Kit.codeBug();\n              }\n              break;\n            default:\n              value = x.toString();\n              break;\n          }\n          sb.append(value);\n          sb.append(']');\n        }\n      }\n\n      if (printType) {\n        if (jsType != null) {\n          String jsTypeString = jsType.toString();\n          if (jsTypeString != null) {\n            sb.append(\" : \");\n            sb.append(jsTypeString);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 1034,
        "end_line": 1147,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9925
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.toString#303",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return fileName;\n  }\n",
        "begin_line": 303,
        "end_line": 306,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9925
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toString#1017",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toString(true, true, true);\n  }\n",
        "begin_line": 1017,
        "end_line": 1020,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9852
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toString#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.toString()",
        "snippet": "    @Override\n    public String toString() {\n      return String.valueOf(intValue);\n    }\n",
        "begin_line": 445,
        "end_line": 448,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.977
        },
        "num_failing_tests": 63
    },
    {
        "name": "InputId.toString#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return \"InputId: \" + getIdName();\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9535
        },
        "num_failing_tests": 60
    },
    {
        "name": "Token.shouldPrintTrees#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "class_name": "com.google.javascript.rhino.Token",
        "signature": "com.google.javascript.rhino.Token.shouldPrintTrees()",
        "snippet": "    public static boolean shouldPrintTrees() {\n      return printTrees;\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9319
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.toString#1022",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.toString(boolean, boolean, boolean)",
        "snippet": "  public String toString(\n      boolean printSource,\n      boolean printAnnotations,\n      boolean printType) {\n    if (Token.shouldPrintTrees()) {\n        StringBuilder sb = new StringBuilder();\n        toString(sb, printSource, printAnnotations, printType);\n        return sb.toString();\n    }\n    return String.valueOf(type);\n  }\n",
        "begin_line": 1022,
        "end_line": 1032,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9319
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionToBlockMutator.aliasAndInlineArguments#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.aliasAndInlineArguments(com.google.javascript.rhino.Node, java.util.LinkedHashMap<java.lang.String, com.google.javascript.rhino.Node>, java.util.Set<java.lang.String>)",
        "snippet": "  private Node aliasAndInlineArguments(\n      Node fnTemplateRoot, LinkedHashMap<String, Node> argMap,\n      Set<String> namesToAlias) {\n\n    if (namesToAlias == null || namesToAlias.isEmpty()) {\n      // There are no names to alias, just inline the arguments directly.\n      Node result = FunctionArgumentInjector.inject(\n          compiler, fnTemplateRoot, null, argMap);\n      Preconditions.checkState(result == fnTemplateRoot);\n      return result;\n    } else {\n      // Create local alias of names that can not be safely\n      // used directly.\n\n      // An arg map that will be updated to contain the\n      // safe aliases.\n      Map<String, Node> newArgMap = Maps.newHashMap(argMap);\n\n      // Declare the alias in the same order as they\n      // are declared.\n      List<Node> newVars = Lists.newLinkedList();\n      // NOTE: argMap is a linked map so we get the parameters in the\n      // order that they were declared.\n      for (Entry<String, Node> entry : argMap.entrySet()) {\n        String name = entry.getKey();\n        if (namesToAlias.contains(name)) {\n          if (name.equals(THIS_MARKER)) {\n            boolean referencesThis = NodeUtil.referencesThis(fnTemplateRoot);\n            // Update \"this\", this is only necessary if \"this\" is referenced\n            // and the value of \"this\" is not Token.THIS, or the value of \"this\"\n            // has side effects.\n\n            Node value = entry.getValue();\n            if (value.getType() != Token.THIS\n                && (referencesThis\n                    || NodeUtil.mayHaveSideEffects(value, compiler))) {\n              String newName = getUniqueThisName();\n              Node newValue = entry.getValue().cloneTree();\n              Node newNode = NodeUtil.newVarNode(newName, newValue)\n                  .copyInformationFromForTree(newValue);\n              newVars.add(0, newNode);\n              // Remove the parameter from the list to replace.\n              newArgMap.put(THIS_MARKER,\n                  Node.newString(Token.NAME, newName)\n                      .copyInformationFromForTree(newValue));\n            }\n          } else {\n            Node newValue = entry.getValue().cloneTree();\n            Node newNode = NodeUtil.newVarNode(name, newValue)\n                .copyInformationFromForTree(newValue);\n            newVars.add(0, newNode);\n            // Remove the parameter from the list to replace.\n            newArgMap.remove(name);\n          }\n        }\n      }\n\n      // Inline the arguments.\n      Node result = FunctionArgumentInjector.inject(\n          compiler, fnTemplateRoot, null, newArgMap);\n      Preconditions.checkState(result == fnTemplateRoot);\n\n      // Now that the names have been replaced, add the new aliases for\n      // the old names.\n      for (Node n : newVars) {\n        fnTemplateRoot.addChildToFront(n);\n      }\n\n      return result;\n    }\n  }\n",
        "begin_line": 230,
        "end_line": 300,
        "comment": "\n   * Inlines the arguments within the node tree using the given argument map,\n   * replaces \"unsafe\" names with local aliases.\n   *\n   * The aliases for unsafe require new VAR declarations, so this function\n   * can not be used in for direct CALL node replacement as VAR nodes can not be\n   * created there.\n   *\n   * @return The node or its replacement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7423
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.gatherLocalNames#472",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.gatherLocalNames(com.google.javascript.rhino.Node, java.util.Set<java.lang.String>)",
        "snippet": "  private static void gatherLocalNames(Node n, Set<String> names) {\n    if (n.getType() == Token.FUNCTION) {\n      if (NodeUtil.isFunctionDeclaration(n)) {\n        names.add(n.getFirstChild().getString());\n      }\n      // Don't traverse into inner function scopes;\n      return;\n    } else if (n.getType() == Token.NAME) {\n      switch (n.getParent().getType()) {\n        case Token.VAR:\n        case Token.CATCH:\n          names.add(n.getString());\n      }\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      gatherLocalNames(c, names);\n    }\n  }\n",
        "begin_line": 472,
        "end_line": 490,
        "comment": "\n   * Gather any names declared in the local scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.705
        },
        "num_failing_tests": 65
    },
    {
        "name": "MakeDeclaredNamesUnique.addDeclaredName#527",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer.addDeclaredName(java.lang.String)",
        "snippet": "    @Override\n    public void addDeclaredName(String name) {\n      Preconditions.checkState(!name.equals(ARGUMENTS));\n      if (!declarations.containsKey(name)) {\n        declarations.put(name, getUniqueName(name));\n      }\n    }\n",
        "begin_line": 527,
        "end_line": 533,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6938
        },
        "num_failing_tests": 65
    },
    {
        "name": "MakeDeclaredNamesUnique.getUniqueName#535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer.getUniqueName(java.lang.String)",
        "snippet": "    private String getUniqueName(String name) {\n      if (name.isEmpty()) {\n        return name;\n      }\n\n      if (name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1) {\n          name = name.substring(\n              0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));\n      }\n\n      // By using the same separator the id will be stripped if it isn't\n      // needed when variable renaming is turned off.\n      return name + ContextualRenamer.UNIQUE_ID_SEPARATOR\n          + idPrefix + uniqueIdSupplier.get();\n    }\n",
        "begin_line": 535,
        "end_line": 549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6938
        },
        "num_failing_tests": 65
    },
    {
        "name": "MakeDeclaredNamesUnique.stripConstIfReplaced#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer.stripConstIfReplaced()",
        "snippet": "    @Override\n    public boolean stripConstIfReplaced() {\n      return removeConstness;\n    }\n",
        "begin_line": 561,
        "end_line": 564,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6938
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.canBeSideEffected#1110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.canBeSideEffected(com.google.javascript.rhino.Node, java.util.Set<java.lang.String>)",
        "snippet": "  static boolean canBeSideEffected(Node n, Set<String> knownConstants) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (canBeSideEffected(c, knownConstants)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 1110,
        "end_line": 1142,
        "comment": "\n   * @param knownConstants A set of names known to be constant value at\n   * node 'n' (such as locals that are last written before n can execute).\n   * @return Whether the tree can be affected by side-effects or\n   * has side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6229
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.maybeAddTempsForCallArguments#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.maybeAddTempsForCallArguments(com.google.javascript.rhino.Node, java.util.Map<java.lang.String, com.google.javascript.rhino.Node>, java.util.Set<java.lang.String>, com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  static void maybeAddTempsForCallArguments(\n      Node fnNode, Map<String, Node> argMap, Set<String> namesNeedingTemps,\n      CodingConvention convention) {\n    if (argMap.isEmpty()) {\n      // No arguments to check, we are done.\n      return;\n    }\n\n    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);\n    Node block = fnNode.getLastChild();\n\n    Set<String> parameters = argMap.keySet();\n\n    // Get the list of parameters that may need temporaries due to\n    // side-effects.\n    Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect(\n        parameters, block);\n\n    // Check for arguments that are evaluated more than once.\n    for (Map.Entry<String, Node> entry : argMap.entrySet()) {\n      String argName = entry.getKey();\n      if (namesNeedingTemps.contains(argName)) {\n        continue;\n      }\n      Node cArg = entry.getValue();\n      boolean safe = true;\n      int references = NodeUtil.getNameReferenceCount(block, argName);\n\n      if (NodeUtil.mayEffectMutableState(cArg) && references > 0) {\n        // Note: Mutable arguments should be assigned to temps, as the\n        // may be within in a loop:\n        //   function x(a) {\n        //     for(var i=0; i<0; i++) {\n        //       foo(a);\n        //     }\n        //   x( [] );\n        //\n        //   The parameter in the call to foo should not become \"[]\".\n        safe = false;\n      } else if (NodeUtil.mayHaveSideEffects(cArg)) {\n        // Even if there are no references, we still need to evaluate the\n        // expression if it has side-effects.\n        safe = false;\n      } else if (NodeUtil.canBeSideEffected(cArg)\n          && namesAfterSideEffects.contains(argName)) {\n        safe = false;\n      } else if (references > 1) {\n        // Safe is a misnomer, this is a check for \"large\".\n        switch (cArg.getType()) {\n          case Token.NAME:\n            String name = cArg.getString();\n            safe = !(convention.isExported(name));\n            break;\n          case Token.THIS:\n            safe = true;\n            break;\n          case Token.STRING:\n            safe = (cArg.getString().length() < 2);\n            break;\n          default:\n            safe = NodeUtil.isImmutableValue(cArg);\n            break;\n        }\n      }\n\n      if (!safe) {\n        namesNeedingTemps.add(argName);\n      }\n    }\n  }\n",
        "begin_line": 245,
        "end_line": 314,
        "comment": "\n   * Updates the set of parameter names in set unsafe to include any\n   * arguments from the call site that require aliases.\n   * @param fnNode The FUNCTION node to be inlined.\n   * @param argMap The argument list for the call to fnNode.\n   * @param namesNeedingTemps The set of names to update.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6229
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.visitPostOrder#2842",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.visitPostOrder(com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeUtil.Visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred) {\n    if (traverseChildrenPred.apply(node)) {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        visitPostOrder(c, vistor, traverseChildrenPred);\n      }\n    }\n\n    vistor.visit(node);\n  }\n",
        "begin_line": 2842,
        "end_line": 2852,
        "comment": "\n   * A post-order traversal, calling Vistor.visit for each child matching\n   * the predicate.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6228
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.rewriteFunctionDeclarations#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.rewriteFunctionDeclarations(com.google.javascript.rhino.Node)",
        "snippet": "  private void rewriteFunctionDeclarations(Node n) {\n    if (n.getType() == Token.FUNCTION) {\n      if (NodeUtil.isFunctionDeclaration(n)) {\n        // Rewrite: function f() {} ==> var f = function() {}\n        Node fnNameNode = n.getFirstChild();\n\n        Node var = new Node(Token.VAR).copyInformationFrom(n);\n        Node name = Node.newString(Token.NAME, fnNameNode.getString())\n            .copyInformationFrom(fnNameNode);\n\n        fnNameNode.setString(\"\");\n        // Add the VAR, remove the FUNCTION\n        n.getParent().replaceChild(n, var);\n        var.addChildToFront(name);\n        // readd the function as a function expression\n        name.addChildToFront(n);\n      }\n      return;\n    }\n\n    for (Node c = n.getFirstChild(), next; c != null; c = next) {\n      next = c.getNext(); // We may rewrite \"c\"\n      rewriteFunctionDeclarations(c);\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 144,
        "comment": "\n   * @param n The node to inspect\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6228
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.inject#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.inject(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Map<java.lang.String, com.google.javascript.rhino.Node>, boolean)",
        "snippet": "  static Node inject(AbstractCompiler compiler, Node node, Node parent,\n      Map<String, Node> replacements, boolean replaceThis) {\n    if (node.getType() == Token.NAME) {\n      Node replacementTemplate = replacements.get(node.getString());\n      if (replacementTemplate != null) {\n        // This should not be replacing declared names.\n        Preconditions.checkState(parent.getType() != Token.FUNCTION\n            || parent.getType() != Token.VAR\n            || parent.getType() != Token.CATCH);\n        // The name may need to be replaced more than once,\n        // so we need to clone the node.\n        Node replacement = replacementTemplate.cloneTree();\n        parent.replaceChild(node, replacement);\n        return replacement;\n      }\n    } else if (replaceThis && node.getType() == Token.THIS) {\n      Node replacementTemplate = replacements.get(THIS_MARKER);\n      Preconditions.checkNotNull(replacementTemplate);\n      if (replacementTemplate.getType() != Token.THIS) {\n        // The name may need to be replaced more than once,\n        // so we need to clone the node.\n        Node replacement = replacementTemplate.cloneTree();\n        parent.replaceChild(node, replacement);\n\n        // Remove the value.  This isn't required but it ensures that we won't\n        // inject side-effects multiple times as it will trigger the null\n        // check above if we do.\n        if (NodeUtil.mayHaveSideEffects(replacementTemplate, compiler)) {\n          replacements.remove(THIS_MARKER);\n        }\n\n        return replacement;\n      }\n    } else if (node.getType() == Token.FUNCTION) {\n      // Once we enter another scope the \"this\" value changes, don't try\n      // to replace it within an inner scope.\n      replaceThis = false;\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      // We have to reassign c in case it was replaced, because the removed c's\n      // getNext() would no longer be correct.\n      c = inject(compiler, c, node, replacements, replaceThis);\n    }\n\n    return node;\n  }\n",
        "begin_line": 61,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6176
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.LabelNameSupplier#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.LabelNameSupplier.LabelNameSupplier(com.google.common.base.Supplier<java.lang.String>)",
        "snippet": "    LabelNameSupplier(Supplier<String> idSupplier) {\n      this.idSupplier = idSupplier;\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.FunctionToBlockMutator#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.FunctionToBlockMutator(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>)",
        "snippet": "  FunctionToBlockMutator(\n      AbstractCompiler compiler, Supplier<String> safeNameIdSupplier) {\n    this.compiler = compiler;\n    this.safeNameIdSupplier = safeNameIdSupplier;\n  }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.mutate#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.mutate(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, boolean, boolean)",
        "snippet": "  Node mutate(String fnName, Node fnNode, Node callNode,\n      String resultName, boolean needsDefaultResult, boolean isCallInLoop) {\n    Node newFnNode = fnNode.cloneTree();\n    // Now that parameter names have been replaced, make sure all the local\n    // names are unique, to allow functions to be inlined multiple times\n    // without causing conflicts.\n    makeLocalNamesUnique(newFnNode, isCallInLoop);\n\n    // Function declarations must be rewritten as function expressions as\n    // they will be within a block and normalization prevents function\n    // declarations within block as browser implementations vary.\n    rewriteFunctionDeclarations(newFnNode.getLastChild());\n\n    // TODO(johnlenz): Mark NAME nodes constant for parameters that are not\n    // modified.\n    Set<String> namesToAlias =\n        FunctionArgumentInjector.findModifiedParameters(newFnNode);\n    LinkedHashMap<String, Node> args =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            newFnNode, callNode, this.safeNameIdSupplier);\n    boolean hasArgs = !args.isEmpty();\n    if (hasArgs) {\n      FunctionArgumentInjector.maybeAddTempsForCallArguments(\n          newFnNode, args, namesToAlias, compiler.getCodingConvention());\n    }\n\n    Node newBlock = NodeUtil.getFunctionBody(newFnNode);\n    // Make the newBlock insertable .\n    newBlock.detachFromParent();\n\n    if (hasArgs) {\n      Node inlineResult = aliasAndInlineArguments(newBlock,\n          args, namesToAlias);\n      Preconditions.checkState(newBlock == inlineResult);\n    }\n\n    //\n    // For calls inlined into loops, VAR declarations are not reinitialized to\n    // undefined as they would have been if the function were called, so ensure\n    // that they are properly initialized.\n    //\n    if (isCallInLoop) {\n      fixUnitializedVarDeclarations(newBlock);\n    }\n\n    String labelName = getLabelNameForFunction(fnName);\n    Node injectableBlock = replaceReturns(\n        newBlock, resultName, labelName, needsDefaultResult);\n    Preconditions.checkState(injectableBlock != null);\n\n    return injectableBlock;\n  }\n",
        "begin_line": 63,
        "end_line": 114,
        "comment": "\n   * @param fnName The name to use when preparing human readable names.\n   * @param fnNode The function to prepare.\n   * @param callNode The call node that will be replaced.\n   * @param resultName Function results should be assigned to this name.\n   * @param needsDefaultResult Whether the result value must be set.\n   * @param isCallInLoop Whether the function body must be prepared to be\n   *   injected into the body of a loop.\n   * @return A clone of the function body mutated to be suitable for injection\n   *   as a statement into another code block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.makeLocalNamesUnique#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.makeLocalNamesUnique(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n    Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();\n    // Make variable names unique to this instance.\n    NodeTraversal.traverse(\n        compiler, fnNode, new MakeDeclaredNamesUnique(\n            new InlineRenamer(\n                idSupplier,\n                \"inline_\",\n                isCallInLoop)));\n    // Make label names unique to this instance.\n    new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)\n        .process(null, fnNode);\n  }\n",
        "begin_line": 178,
        "end_line": 190,
        "comment": "\n   * Fix-up all local names to be unique for this subtree.\n   * @param fnNode A mutable instance of the function to be inlined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.getLabelNameForFunction#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.getLabelNameForFunction(java.lang.String)",
        "snippet": "  private String getLabelNameForFunction(String fnName){\n    String name = (fnName == null || fnName.isEmpty()) ? \"anon\" : fnName;\n    return \"JSCompiler_inline_label_\" + name + \"_\" + safeNameIdSupplier.get();\n  }\n",
        "begin_line": 208,
        "end_line": 211,
        "comment": "\n   * Create a unique label name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.replaceReturns#323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturns(com.google.javascript.rhino.Node, java.lang.String, java.lang.String, boolean)",
        "snippet": "  private static Node replaceReturns(\n      Node block, String resultName, String labelName,\n      boolean resultMustBeSet) {\n    Preconditions.checkNotNull(block);\n    Preconditions.checkNotNull(labelName);\n\n    Node root = block;\n\n    boolean hasReturnAtExit = false;\n    int returnCount = NodeUtil.getNodeTypeReferenceCount(\n        block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n    if (returnCount > 0) {\n      hasReturnAtExit = hasReturnAtExit(block);\n      // TODO(johnlenz): Simpler not to special case this,\n      // and let it be optimized later.\n      if (hasReturnAtExit) {\n        convertLastReturnToStatement(block, resultName);\n        returnCount--;\n      }\n\n      if (returnCount > 0) {\n        // A label and breaks are needed.\n\n        // Add the breaks\n        replaceReturnWithBreak(block, null, resultName, labelName);\n\n        // Add label\n        Node label = new Node(Token.LABEL).copyInformationFrom(block);\n        Node name = Node.newString(Token.LABEL_NAME, labelName)\n            .copyInformationFrom(block);\n        label.addChildToFront(name);\n        label.addChildToBack(block);\n\n        Node newRoot = new Node(Token.BLOCK).copyInformationFrom(block);\n        newRoot.addChildrenToBack(label);\n\n\n        // The label is now the root.\n        root = newRoot;\n      }\n    }\n\n    // If there wasn't an return at the end of the function block, and we need\n    // a result, add one to the block.\n    if (resultMustBeSet && !hasReturnAtExit && resultName != null) {\n      addDummyAssignment(block, resultName);\n    }\n\n    return root;\n  }\n",
        "begin_line": 323,
        "end_line": 372,
        "comment": "\n   *  Convert returns to assignments and breaks, as needed.\n   *  For example, with a lableName of 'foo':\n   *    {\n   *      return a;\n   *    }\n   *  becomes:\n   *    foo: {\n   *      a;\n   *      break foo;\n   *    }\n   *  or\n   *    foo: {\n   *      resultName = a;\n   *      break foo;\n   *    }\n   *\n   * @param resultMustBeSet Whether the result must always be set to a value.\n   * @return The node containing the transformed block, this may be different\n   *     than the passed in node 'block'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.ReferencedAfterSideEffect#369",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.ReferencedAfterSideEffect.ReferencedAfterSideEffect(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>)",
        "snippet": "    ReferencedAfterSideEffect(Set<String> parameters, Set<String> locals) {\n      this.parameters = parameters;\n      this.locals = locals;\n    }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.getResults#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.ReferencedAfterSideEffect.getResults()",
        "snippet": "    Set<String> getResults() {\n      return parametersReferenced;\n    }\n",
        "begin_line": 374,
        "end_line": 376,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.apply#378",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.ReferencedAfterSideEffect.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node node) {\n      // Keep track of any loop structures entered.\n      if (NodeUtil.isLoopStructure(node)) {\n        loopsEntered++;\n      }\n\n      // If we have found all the paremeters, don't bother looking\n      // at the children.\n      return !(sideEffectSeen\n          && parameters.size() == parametersReferenced.size());\n    }\n",
        "begin_line": 378,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.inLoop#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.ReferencedAfterSideEffect.inLoop()",
        "snippet": "    boolean inLoop() {\n      return loopsEntered != 0;\n    }\n",
        "begin_line": 391,
        "end_line": 393,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.visit#395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.ReferencedAfterSideEffect.visit(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(Node n) {\n      // If we are exiting a loop.\n      if (NodeUtil.isLoopStructure(n)) {\n        loopsEntered--;\n        if (!inLoop() && !sideEffectSeen) {\n          // Now that the loops has been fully traversed and\n          // no side-effects have been seen, throw away\n          // the references seen in them.\n          parametersReferenced.clear();\n        }\n      }\n\n      if (!sideEffectSeen) {\n        // Look for side-effects.\n        if (hasNonLocalSideEffect(n)) {\n          sideEffectSeen = true;\n        }\n      }\n\n      // If traversing the nodes of a loop save any references\n      // that are seen.\n      if (inLoop() || sideEffectSeen) {\n        // Record references to parameters.\n        if (n.getType() == Token.NAME) {\n          String name = n.getString();\n          if (parameters.contains(name)) {\n            parametersReferenced.add(name);\n          }\n        } else if (n.getType() == Token.THIS) {\n          parametersReferenced.add(THIS_MARKER);\n        }\n      }\n    }\n",
        "begin_line": 395,
        "end_line": 428,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.hasNonLocalSideEffect#433",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.ReferencedAfterSideEffect.hasNonLocalSideEffect(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean hasNonLocalSideEffect(Node n) {\n      boolean sideEffect = false;\n      int type = n.getType();\n      // Note: Only care about changes to non-local names, specifically\n      // ignore VAR declaration assignments.\n      if (NodeUtil.isAssignmentOp(n)\n          || type == Token.INC\n          || type == Token.DEC) {\n        Node lhs = n.getFirstChild();\n        // Ignore changes to local names.\n        if (!isLocalName(lhs)) {\n          sideEffect = true;\n        }\n      } else if (type == Token.CALL) {\n        sideEffect = NodeUtil.functionCallHasSideEffects(n);\n      } else if (type == Token.NEW) {\n        sideEffect = NodeUtil.constructorCallHasSideEffects(n);\n      } else if (type == Token.DELPROP) {\n        sideEffect = true;\n      }\n\n      return sideEffect;\n    }\n",
        "begin_line": 433,
        "end_line": 455,
        "comment": "\n     * @return Whether the node may have non-local side-effects.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.findParametersReferencedAfterSideEffect#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.findParametersReferencedAfterSideEffect(java.util.Set<java.lang.String>, com.google.javascript.rhino.Node)",
        "snippet": "  private static Set<String> findParametersReferencedAfterSideEffect(\n      Set<String> parameters, Node root) {\n\n    // TODO(johnlenz): Consider using scope for this.\n    Set<String> locals = Sets.newHashSet(parameters);\n    gatherLocalNames(root, locals);\n\n    ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect(\n        parameters, locals);\n    NodeUtil.visitPostOrder(\n        root,\n        collector,\n        collector);\n    return collector.getResults();\n  }\n",
        "begin_line": 325,
        "end_line": 339,
        "comment": "\n   * Boot strap a traversal to look for parameters referenced\n   * after a non-local side-effect.\n   * NOTE: This assumes no-inner functions.\n   * @param parameters The set of parameter names.\n   * @param root The function code block.\n   * @return The subset of parameters referenced after the first\n   *     seen non-local side-effect.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6173
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isLoopStructure#1620",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLoopStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isLoopStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1620,
        "end_line": 1629,
        "comment": "\n   * Determines whether the given node is a FOR, DO, or WHILE node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5931
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionInjector.inlineFunction#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.inlineFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private Node inlineFunction(\n      Node callNode, Node fnNode, String fnName) {\n    Node parent = callNode.getParent();\n    Node grandParent = parent.getParent();\n\n    // TODO(johnlenz): Consider storing the callSite classification in the\n    // reference object and passing it in here.\n    CallSiteType callSiteType = classifyCallSite(callNode);\n    Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);\n\n    boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);\n\n    // Store the name for the result. This will be used to\n    // replace \"return expr\" statements with \"resultName = expr\"\n    // to replace\n    String resultName = null;\n    boolean needsDefaultReturnResult = true;\n    switch (callSiteType) {\n      case SIMPLE_ASSIGNMENT:\n        resultName = parent.getFirstChild().getString();\n        break;\n\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        resultName = parent.getString();\n        break;\n\n      case SIMPLE_CALL:\n        resultName = null;  // \"foo()\" doesn't need a result.\n        needsDefaultReturnResult = false;\n        break;\n\n      case EXPRESSION:\n        resultName = getUniqueResultName();\n        // The intermediary result has a default value of \"undefined\", so\n        // we only need to set the implicit return value if we are in a loop\n        // and the variable maybe reused.\n        needsDefaultReturnResult = isCallInLoop;\n        break;\n\n      case DECOMPOSABLE_EXPRESSION:\n        throw new IllegalStateException(\n            \"Decomposable expressions must decomposed before inlining.\");\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n\n    FunctionToBlockMutator mutator = new FunctionToBlockMutator(\n        compiler, this.safeNameIdSupplier);\n\n    Node newBlock = mutator.mutate(\n        fnName, fnNode, callNode, resultName,\n        needsDefaultReturnResult, isCallInLoop);\n\n    // TODO(nicksantos): Create a common mutation function that\n    // can replace either a VAR name assignment, assignment expression or\n    // a EXPR_RESULT.\n    Node greatGrandParent = grandParent.getParent();\n    switch (callSiteType) {\n      case VAR_DECL_SIMPLE_ASSIGNMENT:\n        // Remove the call from the name node.\n        parent.removeChild(parent.getFirstChild());\n        Preconditions.checkState(parent.getFirstChild() == null);\n        // Add the call, after the VAR.\n        greatGrandParent.addChildAfter(newBlock, grandParent);\n        break;\n\n      case SIMPLE_ASSIGNMENT:\n        // The assignment is now part of the inline function so\n        // replace it completely.\n        Preconditions.checkState(NodeUtil.isExpressionNode(grandParent));\n        greatGrandParent.replaceChild(grandParent, newBlock);\n        break;\n\n      case SIMPLE_CALL:\n        // If nothing is looking at the result just replace the call.\n        Preconditions.checkState(NodeUtil.isExpressionNode(parent));\n        grandParent.replaceChild(parent, newBlock);\n        break;\n\n      case EXPRESSION:\n        // TODO(johnlenz): Maybe change this so that movable and decomposable\n        // expressions are handled the same way: The call is moved and\n        // then handled by one the three basic cases, rather than\n        // introducing a new case.\n        Node injectionPoint = ExpressionDecomposer.findInjectionPoint(callNode);\n        Preconditions.checkNotNull(injectionPoint);\n        Node injectionPointParent = injectionPoint.getParent();\n        Preconditions.checkNotNull(injectionPointParent);\n        Preconditions.checkState(\n            NodeUtil.isStatementBlock(injectionPointParent));\n\n        // Declare the intermediate result name.\n        newBlock.addChildrenToFront(\n            NodeUtil.newVarNode(resultName, null)\n                 .copyInformationFromForTree(callNode));\n        // Inline the function before the selected injection point (before\n        // the call).\n        injectionPointParent.addChildBefore(newBlock, injectionPoint);\n        // Replace the call site with a reference to the intermediate\n        // result name.\n        parent.replaceChild(callNode, Node.newString(Token.NAME, resultName));\n        break;\n\n      default:\n        throw new IllegalStateException(\"Unexpected call site type.\");\n    }\n\n    return newBlock;\n  }\n",
        "begin_line": 398,
        "end_line": 507,
        "comment": "\n   * Inline a function which fulfills the requirements of\n   * canInlineReferenceAsStatementBlock into the call site, replacing the\n   * parent expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5871
        },
        "num_failing_tests": 59
    },
    {
        "name": "FunctionInjector.inline#236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.inline(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "  Node inline(\n      NodeTraversal t, Node callNode, String fnName, Node fnNode,\n      InliningMode mode) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n\n    if (mode == InliningMode.DIRECT) {\n      return inlineReturnValue(callNode, fnNode);\n    } else {\n      return inlineFunction(callNode, fnNode, fnName);\n    }\n  }\n",
        "begin_line": 236,
        "end_line": 246,
        "comment": "\n   * Inline a function into the call site.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5871
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeUtil.getNameReferenceCount#2765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getNameReferenceCount(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  static int getNameReferenceCount(Node node, String name) {\n    return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());\n  }\n",
        "begin_line": 2765,
        "end_line": 2768,
        "comment": "\n   * Finds the number of times a simple name is referenced within the node tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5851
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.getNodeTypeReferenceCount#2741",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getNodeTypeReferenceCount(com.google.javascript.rhino.Node, int, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred) {\n    return getCount(node, new MatchNodeType(type), traverseChildrenPred);\n  }\n",
        "begin_line": 2741,
        "end_line": 2744,
        "comment": "\n   * Finds the number of times a type is referenced within the node tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.582
        },
        "num_failing_tests": 65
    },
    {
        "name": "MakeDeclaredNamesUnique.forChildScope#556",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer.forChildScope()",
        "snippet": "    @Override\n    public Renamer forChildScope() {\n      return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness);\n    }\n",
        "begin_line": 556,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5789
        },
        "num_failing_tests": 65
    },
    {
        "name": "MakeDeclaredNamesUnique.InlineRenamer#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer.InlineRenamer(com.google.common.base.Supplier<java.lang.String>, java.lang.String, boolean)",
        "snippet": "    InlineRenamer(\n        Supplier<String> uniqueIdSupplier,\n        String idPrefix,\n        boolean removeConstness) {\n      this.uniqueIdSupplier = uniqueIdSupplier;\n      // To ensure that the id does not conflict with the id from the\n      // ContextualRenamer some prefix is needed.\n      Preconditions.checkArgument(!idPrefix.isEmpty());\n      this.idPrefix = idPrefix;\n      this.removeConstness = removeConstness;\n    }\n",
        "begin_line": 515,
        "end_line": 525,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5774
        },
        "num_failing_tests": 65
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer.getReplacementName(java.lang.String)",
        "snippet": "    @Override\n    public String getReplacementName(String oldName) {\n      return declarations.get(oldName);\n    }\n",
        "begin_line": 551,
        "end_line": 554,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5774
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.canBeSideEffected#1099",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.canBeSideEffected(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean canBeSideEffected(Node n) {\n    Set<String> emptySet = Collections.emptySet();\n    return canBeSideEffected(n, emptySet);\n  }\n",
        "begin_line": 1099,
        "end_line": 1102,
        "comment": "\n   * @return Whether the tree can be affected by side-effects or\n   * has side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5672
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.getCount#2797",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getCount(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {\n    int total = 0;\n\n    if (pred.apply(n)) {\n      total++;\n    }\n\n    if (traverseChildrenPred.apply(n)) {\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        total += getCount(c, pred, traverseChildrenPred);\n      }\n    }\n\n    return total;\n  }\n",
        "begin_line": 2797,
        "end_line": 2812,
        "comment": "\n   * @return The number of times the the predicate is true for the node\n   * or any of its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5629
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isWithinLoop#1652",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isWithinLoop(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isWithinLoop(Node n) {\n    for (Node parent : n.getAncestors()) {\n      if (NodeUtil.isLoopStructure(parent)) {\n        return true;\n      }\n\n      if (NodeUtil.isFunction(parent)) {\n        break;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 1652,
        "end_line": 1663,
        "comment": "\n   * @return Whether the specified node has a loop parent that\n   * is within the current scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.562
        },
        "num_failing_tests": 59
    },
    {
        "name": "FunctionArgumentInjector.getFunctionCallParameterMap#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionCallParameterMap(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.common.base.Supplier<java.lang.String>)",
        "snippet": "  static LinkedHashMap<String, Node> getFunctionCallParameterMap(\n      Node fnNode, Node callNode, Supplier<String> safeNameIdSupplier) {\n    // Create an argName -> expression map\n    // NOTE: A linked map is created here to provide ordering.\n    LinkedHashMap<String, Node> argMap = Maps.newLinkedHashMap();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n    if (cArg != null && NodeUtil.isFunctionObjectCall(callNode)) {\n      argMap.put(THIS_MARKER, cArg);\n      cArg = cArg.getNext();\n    } else {\n      // 'apply' isn't supported yet.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));\n    }\n\n    for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {\n      if (cArg != null) {\n        argMap.put(fnArg.getString(), cArg);\n        cArg = cArg.getNext();\n      } else {\n        Node srcLocation = callNode;\n        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));\n      }\n    }\n\n    // Add temp names for arguments that don't have named parameters in the\n    // called function.\n    int anonArg = 0;\n    while (cArg != null) {\n      String uniquePlaceholder =\n        getUniqueAnonymousParameterName(safeNameIdSupplier);\n      argMap.put(uniquePlaceholder, cArg);\n      cArg = cArg.getNext();\n    }\n\n    return argMap;\n  }\n",
        "begin_line": 112,
        "end_line": 150,
        "comment": "\n   * Get a mapping for function parameter names to call arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5593
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.getReplacementReturnStatement#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.getReplacementReturnStatement(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private static Node getReplacementReturnStatement(\n      Node node, String resultName) {\n    Node resultNode = null;\n\n    Node retVal = null;\n    if (node.hasChildren()) {\n      // Clone the child as the child hasn't been removed\n      // from the node yet.\n      retVal = node.getFirstChild().cloneTree();\n    }\n\n    if (resultName == null) {\n      if (retVal != null) {\n        resultNode = NodeUtil.newExpr(retVal); // maybe null.\n      }\n    } else {\n      if (retVal == null) {\n        // A result is needed create a dummy value.\n        Node srcLocation = node;\n        retVal = NodeUtil.newUndefinedNode(srcLocation);\n      }\n      // Create a \"resultName = retVal;\" statement.\n      resultNode = createAssignStatementNode(resultName, retVal);\n    }\n\n    return resultNode;\n  }\n",
        "begin_line": 437,
        "end_line": 463,
        "comment": "\n   * Replace the 'return' statement with its child expression.\n   * If the result is needed (resultName != null):\n   *   \"return foo()\" becomes \"resultName = foo()\"\n   *   \"return\" becomes \"resultName = void 0\".\n   * Otherwise:\n   *   \"return foo()\" becomes \"foo()\"\n   *   \"return\", null is returned.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5511
        },
        "num_failing_tests": 42
    },
    {
        "name": "NodeUtil.mayEffectMutableState#758",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean mayEffectMutableState(Node n) {\n    return mayEffectMutableState(n, null);\n  }\n",
        "begin_line": 758,
        "end_line": 760,
        "comment": "\n   * Returns true if the node may create new mutable state, or change existing\n   * state.\n   *\n   * @see <a href=\"http://www.xkcd.org/326/\">XKCD Cartoon</a>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5431
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.mayEffectMutableState#762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean mayEffectMutableState(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, true, compiler);\n  }\n",
        "begin_line": 762,
        "end_line": 764,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5394
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionInjector.inliningLowersCost#730",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.inliningLowersCost(com.google.javascript.jscomp.JSModule, com.google.javascript.rhino.Node, java.util.Collection<? extends com.google.javascript.jscomp.FunctionInjector.Reference>, java.util.Set<java.lang.String>, boolean, boolean)",
        "snippet": "  boolean inliningLowersCost(\n      JSModule fnModule, Node fnNode, Collection<? extends Reference> refs,\n      Set<String> namesToAlias, boolean isRemovable, boolean referencesThis) {\n    int referenceCount = refs.size();\n    if (referenceCount == 0) {\n      return true;\n    }\n\n    int referencesUsingBlockInlining = 0;\n\n    boolean checkModules = isRemovable && fnModule != null;\n    JSModuleGraph moduleGraph = compiler.getModuleGraph();\n\n    for (Reference ref : refs) {\n      if (ref.mode == InliningMode.BLOCK) {\n        referencesUsingBlockInlining++;\n      }\n\n      // Check if any of the references cross the module boundaries.\n      if (checkModules && ref.module != null) {\n        if (ref.module != fnModule &&\n            !moduleGraph.dependsOn(ref.module, fnModule)) {\n          // Calculate the cost as if the function were non-removable,\n          // if it still lowers the cost inline it.\n          isRemovable = false;\n          checkModules = false;  // no need to check additional modules.\n        }\n      }\n    }\n\n    int referencesUsingDirectInlining = referenceCount -\n        referencesUsingBlockInlining;\n\n    // Don't bother calculating the cost of function for simple functions where\n    // possible.\n    // However, when inlining a complex function, even a single reference may be\n    // larger than the original function if there are many returns (resulting\n    // in additional assignments) or many parameters that need to be aliased\n    // so use the cost estimating.\n    if (referenceCount == 1 && isRemovable &&\n        referencesUsingDirectInlining == 1) {\n      return true;\n    }\n\n    int callCost = estimateCallCost(fnNode, referencesThis);\n    int overallCallCost = callCost * referenceCount;\n\n    int costDeltaDirect = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.DIRECT);\n    int costDeltaBlock = inlineCostDelta(\n        fnNode, namesToAlias, InliningMode.BLOCK);\n\n    return doesLowerCost(fnNode, overallCallCost,\n        referencesUsingDirectInlining, costDeltaDirect,\n        referencesUsingBlockInlining, costDeltaBlock,\n        isRemovable);\n  }\n",
        "begin_line": 730,
        "end_line": 786,
        "comment": "\n   * Determine if inlining the function is likely to reduce the code size.\n   * @param namesToAlias\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5394
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionInjector.doesLowerCost#791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.doesLowerCost(com.google.javascript.rhino.Node, int, int, int, int, int, boolean)",
        "snippet": "  private boolean doesLowerCost(\n      Node fnNode, int callCost,\n      int directInlines, int costDeltaDirect,\n      int blockInlines, int costDeltaBlock,\n      boolean removable) {\n\n    // Determine the threshold value for this inequality:\n    //     inline_cost < call_cost\n    // But solve it for the function declaration size so the size of it\n    // is only calculated once and terminated early if possible.\n\n    int fnInstanceCount = directInlines + blockInlines - (removable ? 1 : 0);\n    // Prevent division by zero.\n    if (fnInstanceCount == 0) {\n      // Special case single reference function that are being block inlined:\n      // If the cost of the inline is greater than the function definition size,\n      // don't inline.\n      if (blockInlines > 0 && costDeltaBlock > 0) {\n        return false;\n      }\n      return true;\n    }\n\n    int costDelta = (directInlines * costDeltaDirect) +\n        (blockInlines * costDeltaBlock);\n    int threshold = (callCost - costDelta) / fnInstanceCount;\n\n    return InlineCostEstimator.getCost(fnNode, threshold + 1) <= threshold;\n  }\n",
        "begin_line": 791,
        "end_line": 819,
        "comment": "\n   * @return Whether inlining will lower cost.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5337
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionToBlockMutator.hasReturnAtExit#468",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.hasReturnAtExit(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean hasReturnAtExit(Node block) {\n    // Only inline functions that return something (empty returns\n    // will be handled by ConstFolding+EmptyFunctionRemoval)\n    return (block.getLastChild().getType() == Token.RETURN);\n  }\n",
        "begin_line": 468,
        "end_line": 472,
        "comment": "\n   * @return Whether the given block end with an return statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5276
        },
        "num_failing_tests": 42
    },
    {
        "name": "FunctionArgumentInjector.findModifiedParameters#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.findModifiedParameters(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean)",
        "snippet": "  private static Set<String> findModifiedParameters(\n      Node n, Node parent, Set<String> names, Set<String> unsafe,\n      boolean inInnerFunction) {\n    Preconditions.checkArgument(unsafe != null);\n    if (n.getType() == Token.NAME) {\n      if (names.contains(n.getString())) {\n        if (inInnerFunction || canNameValueChange(n, parent)) {\n          unsafe.add(n.getString());\n        }\n      }\n    } else if (n.getType() == Token.FUNCTION) {\n      // A function parameter can not be replaced with a direct inlined value\n      // if it is referred to by an inner function. The inner function\n      // can out live the call we are replacing, so inner function must\n      // capture a unique name.  This approach does not work within loop\n      // bodies so those are forbidden elsewhere.\n      inInnerFunction = true;\n    }\n\n    for (Node c : n.children()) {\n      findModifiedParameters(c, n, names, unsafe, inInnerFunction);\n    }\n\n    return unsafe;\n  }\n",
        "begin_line": 195,
        "end_line": 219,
        "comment": "\n   * Check for uses of the named value that imply a pass-by-value\n   * parameter is expected.  This is used to prevent cases like:\n   *\n   *   function (x) {\n   *     x=2;\n   *     return x;\n   *   }\n   *\n   * We don't want \"undefined\" to be substituted for \"x\", and get\n   *   undefined=2\n   *\n   * @param n The node in question.\n   * @param parent The parent of the node.\n   * @param names The set of names to check.\n   * @param unsafe The set of names that require aliases.\n   * @param inInnerFunction Whether the inspection is occurring on a inner\n   *     function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5264
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionInjector.canInlineReferenceAsStatementBlock#550",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceAsStatementBlock(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Set<java.lang.String>)",
        "snippet": "  private CanInlineResult canInlineReferenceAsStatementBlock(\n      NodeTraversal t, Node callNode, Node fnNode, Set<String> namesToAlias) {\n    CallSiteType callSiteType = classifyCallSite(callNode);\n    if (callSiteType == CallSiteType.UNSUPPORTED) {\n      return CanInlineResult.NO;\n    }\n\n    if (!allowDecomposition\n        && callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION) {\n      return CanInlineResult.NO;\n    }\n\n    if (!callMeetsBlockInliningRequirements(\n            t, callNode, fnNode, namesToAlias)) {\n      return CanInlineResult.NO;\n    }\n\n    if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION)  {\n      return CanInlineResult.AFTER_DECOMPOSITION;\n    } else {\n      return CanInlineResult.YES;\n    }\n  }\n",
        "begin_line": 550,
        "end_line": 572,
        "comment": "\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * - It must be a simple call, or assignment, or var initialization.\n   * <pre>\n   *    f();\n   *    a = foo();\n   *    var a = foo();\n   * </pre>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.523
        },
        "num_failing_tests": 59
    },
    {
        "name": "InlineFunctions.getNamesToAlias#982",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getNamesToAlias()",
        "snippet": "    public Set<String> getNamesToAlias() {\n      if (namesToAlias == null) {\n        return Collections.emptySet();\n      }\n      return Collections.unmodifiableSet(namesToAlias);\n    }\n",
        "begin_line": 982,
        "end_line": 987,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5222
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.setNamesToAlias#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setNamesToAlias(java.util.Set<java.lang.String>)",
        "snippet": "    public void setNamesToAlias(Set<String> names) {\n      namesToAlias = names;\n    }\n",
        "begin_line": 989,
        "end_line": 991,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5222
        },
        "num_failing_tests": 18
    },
    {
        "name": "InlineFunctions.maybeAddFunction#242",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.maybeAddFunction(com.google.javascript.jscomp.InlineFunctions.Function, com.google.javascript.jscomp.JSModule)",
        "snippet": "  private void maybeAddFunction(Function fn, JSModule module) {\n    String name = fn.getName();\n    FunctionState fs = getOrCreateFunctionState(name);\n\n    // TODO(johnlenz): Maybe \"smarten\" FunctionState by adding this logic\n    // to it?\n\n    // If the function has multiple definitions, don't inline it.\n    if (fs.hasExistingFunctionDefinition()) {\n      fs.setInline(false);\n    } else {\n      // verify the function hasn't already been marked as \"don't inline\"\n      if (fs.canInline()) {\n        // store it for use when inlining.\n        fs.setFn(fn);\n        if (injector.isDirectCallNodeReplacementPossible(\n            fn.getFunctionNode())) {\n          fs.inlineDirectly(true);\n        }\n\n        // verify the function meets all the requirements.\n        // TODO(johnlenz): Minimum requirement checks are about 5% of the\n        // runtime cost of this pass.\n        if (!isCandidateFunction(fn)) {\n          // It doesn't meet the requirements.\n          fs.setInline(false);\n        }\n\n        // Set the module and gather names that need temporaries.\n        if (fs.canInline()) {\n          fs.setModule(module);\n\n          Node fnNode = fn.getFunctionNode();\n          Set<String> namesToAlias =\n              FunctionArgumentInjector.findModifiedParameters(fnNode);\n          if (!namesToAlias.isEmpty()) {\n            fs.inlineDirectly(false);\n            fs.setNamesToAlias(namesToAlias);\n          }\n\n          Node block = NodeUtil.getFunctionBody(fnNode);\n          if (NodeUtil.referencesThis(block)) {\n            fs.setReferencesThis(true);\n          }\n\n          if (NodeUtil.containsFunction(block)) {\n            fs.setHasInnerFunctions(true);\n            // If there are inner functions, we can inline into global scope\n            // if there are no local vars or named functions.\n            // TODO(johnlenz): this can be improved by looking at the possible\n            // values for locals.  If there are simple values, or constants\n            // we could still inline.\n            if (!assumeMinimumCapture && hasLocalNames(fnNode)) {\n              fs.setInline(false);\n            }\n          }\n        }\n\n        // Check if block inlining is allowed.\n        if (fs.canInline() && !fs.canInlineDirectly()) {\n          if (!blockFunctionInliningEnabled) {\n            fs.setInline(false);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 242,
        "end_line": 308,
        "comment": "\n   * Updates the FunctionState object for the given function. Checks if the\n   * given function matches the criteria for an inlinable function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5222
        },
        "num_failing_tests": 48
    },
    {
        "name": "RenameLabels.ProcessLabels#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.ProcessLabels()",
        "snippet": "    ProcessLabels() {\n      // Create a entry for global scope.\n      namespaceStack.push(new LabelNamespace());\n    }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5219
        },
        "num_failing_tests": 65
    },
    {
        "name": "RenameLabels.enterScope#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal nodeTraversal) {\n      // Start a new namespace for label names.\n      namespaceStack.push(new LabelNamespace());\n    }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5219
        },
        "num_failing_tests": 65
    },
    {
        "name": "RenameLabels.exitScope#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal nodeTraversal) {\n      namespaceStack.pop();\n    }\n",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5219
        },
        "num_failing_tests": 65
    },
    {
        "name": "RenameLabels.shouldTraverse#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node,\n        Node parent) {\n      if (node.getType() == Token.LABEL) {\n        // Determine the new name for this label.\n        LabelNamespace current = namespaceStack.peek();\n        int currentDepth = current.renameMap.size() + 1;\n        String name = node.getFirstChild().getString();\n\n        // Store the context for this label name.\n        LabelInfo li = new LabelInfo(currentDepth);\n        Preconditions.checkState(!current.renameMap.containsKey(name));\n        current.renameMap.put(name, li);\n\n        // Create a new name, if needed, for this depth.\n        if (names.size() < currentDepth) {\n          names.add(nameSupplier.get());\n        }\n\n        String newName = getNameForId(currentDepth);\n        compiler.addToDebugLog(\"label renamed: \" + name + \" => \" + newName);\n      }\n\n      return true;\n    }\n",
        "begin_line": 136,
        "end_line": 160,
        "comment": "\n     * shouldTraverse is call when descending into the Node tree, so it is used\n     * here to build the context for label renames.\n     *\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "com.google.javascript.jscomp.NodeTraversal.ScopedCallback": null,
            "com.google.javascript.jscomp.CompilerPass": "\n   * Process the JS with root node root.\n   * Can modify the contents of each Node tree\n   * @param externs Top of external JS tree\n   * @param root Top of JS tree\n   "
        },
        "susp": {
            "ochiai_susp": 0.5219
        },
        "num_failing_tests": 65
    },
    {
        "name": "RenameLabels.visit#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.ProcessLabels.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal nodeTraversal, Node node, Node parent) {\n      switch (node.getType()) {\n        case Token.LABEL:\n          visitLabel(node, parent);\n          break;\n\n        case Token.BREAK:\n        case Token.CONTINUE:\n          visitBreakOrContinue(node);\n          break;\n      }\n    }\n",
        "begin_line": 168,
        "end_line": 180,
        "comment": "\n     * Delegate the actual processing of the node to visitLabel and\n     * visitBreakOrContinue.\n     *\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "com.google.javascript.jscomp.NodeTraversal.ScopedCallback": null,
            "com.google.javascript.jscomp.CompilerPass": "\n   * Process the JS with root node root.\n   * Can modify the contents of each Node tree\n   * @param externs Top of external JS tree\n   * @param root Top of JS tree\n   "
        },
        "susp": {
            "ochiai_susp": 0.5219
        },
        "num_failing_tests": 65
    },
    {
        "name": "RenameLabels.RenameLabels#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.RenameLabels(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean)",
        "snippet": "  RenameLabels(\n      AbstractCompiler compiler,\n      Supplier<String> supplier,\n      boolean removeUnused) {\n    this.compiler = compiler;\n    this.nameSupplier = supplier;\n    this.removeUnused = removeUnused;\n  }\n",
        "begin_line": 80,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5219
        },
        "num_failing_tests": 65
    },
    {
        "name": "RenameLabels.process#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "signature": "com.google.javascript.jscomp.RenameLabels.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    // Do variable reference counting.\n    NodeTraversal.traverse(compiler, root, new ProcessLabels());\n  }\n",
        "begin_line": 257,
        "end_line": 261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5219
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.apply#2728",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchShallowStatement.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      Node parent = n.getParent();\n      return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));\n    }\n",
        "begin_line": 2728,
        "end_line": 2735,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5186
        },
        "num_failing_tests": 65
    },
    {
        "name": "Compiler.get#938",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-b1dccdfc-7960-4a51-9cd9-0e665c1430da.get()",
        "snippet": "      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n",
        "begin_line": 938,
        "end_line": 941,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5143
        },
        "num_failing_tests": 65
    },
    {
        "name": "Compiler.nextUniqueNameId#922",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.nextUniqueNameId()",
        "snippet": "  private int nextUniqueNameId() {\n    return uniqueNameId++;\n  }\n",
        "begin_line": 922,
        "end_line": 924,
        "comment": "\n   * Creates a new id for making unique names.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5143
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionToBlockMutator.convertLastReturnToStatement#402",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.convertLastReturnToStatement(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private static void convertLastReturnToStatement(\n      Node block, String resultName) {\n    Node ret = block.getLastChild();\n    Preconditions.checkArgument(ret.getType() == Token.RETURN);\n    Node resultNode = getReplacementReturnStatement(ret, resultName);\n\n    if (resultNode == null) {\n      block.removeChild(ret);\n    } else {\n      resultNode.copyInformationFromForTree(ret);\n      block.replaceChild(ret, resultNode);\n    }\n  }\n",
        "begin_line": 402,
        "end_line": 414,
        "comment": "\n   * Replace the 'return' statement with its child expression.\n   *   \"return foo()\" becomes \"foo()\" or \"resultName = foo()\"\n   *   \"return\" is removed or becomes \"resultName = void 0\".\n   *\n   * @param block\n   * @param resultName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5124
        },
        "num_failing_tests": 37
    },
    {
        "name": "FunctionInjector.inlineCostDelta#850",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.inlineCostDelta(com.google.javascript.rhino.Node, java.util.Set<java.lang.String>, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "  private static int inlineCostDelta(\n      Node fnNode, Set<String> namesToAlias, InliningMode mode) {\n    // The part of the function that is never inlined:\n    //    \"function xx(xx,xx){}\" (15 + (param count * 3) -1;\n    int paramCount = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n    int commaCount = (paramCount > 1) ? paramCount - 1 : 0;\n    int costDeltaFunctionOverhead = 15 + commaCount +\n        (paramCount * InlineCostEstimator.ESTIMATED_IDENTIFIER_COST);\n\n    Node block = fnNode.getLastChild();\n    if (!block.hasChildren()) {\n      // Assume the inline cost is zero for empty functions.\n      return -costDeltaFunctionOverhead;\n    }\n\n    if (mode == InliningMode.DIRECT) {\n      // The part of the function that is inlined using direct inlining:\n      //    \"return \" (7)\n      return -(costDeltaFunctionOverhead + 7);\n    } else {\n      int aliasCount = namesToAlias.size();\n\n      // Originally, we estimated purely base on the function code size, relying\n      // on later optimizations. But that did not produce good results, so here\n      // we try to estimate the something closer to the actual inlined coded.\n\n      // NOTE 1: Result overhead is only if there is an assignment, but\n      // getting that information would require some refactoring.\n      // NOTE 2: The aliasing overhead is currently an under-estimate,\n      // as some parameters are aliased because of the parameters used.\n      // Perhaps we should just assume all parameters will be aliased?\n      final int INLINE_BLOCK_OVERHEAD = 4; // \"X:{}\"\n      final int PER_RETURN_OVERHEAD = 2;   // \"return\" --> \"break X\"\n      final int PER_RETURN_RESULT_OVERHEAD = 3; // \"XX=\"\n      final int PER_ALIAS_OVERHEAD = 3; // \"XX=\"\n\n      // TODO(johnlenz): Counting the number of returns is relatively expensive\n      //   this information should be determined during the traversal and\n      //   cached.\n      int returnCount = NodeUtil.getNodeTypeReferenceCount(\n          block, Token.RETURN, new NodeUtil.MatchShallowStatement());\n      int resultCount = (returnCount > 0) ? returnCount - 1 : 0;\n      int baseOverhead = (returnCount > 0) ? INLINE_BLOCK_OVERHEAD : 0;\n\n      int overhead = baseOverhead\n          + returnCount * PER_RETURN_OVERHEAD\n          + resultCount * PER_RETURN_RESULT_OVERHEAD\n          + aliasCount * PER_ALIAS_OVERHEAD;\n\n      return (overhead - costDeltaFunctionOverhead);\n    }\n  }\n",
        "begin_line": 850,
        "end_line": 901,
        "comment": "\n   * @return The difference between the function definition cost and\n   *     inline cost.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5123
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionInjector.callMeetsBlockInliningRequirements#579",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.callMeetsBlockInliningRequirements(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Set<java.lang.String>)",
        "snippet": "  private boolean callMeetsBlockInliningRequirements(\n      NodeTraversal t, Node callNode, final Node fnNode,\n      Set<String> namesToAlias) {\n    final boolean assumeMinimumCapture = this.assumeMinimumCapture;\n\n    // Note: functions that contain function definitions are filtered out\n    // in isCanidateFunction.\n\n    // TODO(johnlenz): Determining if the called function contains VARs\n    // or if the caller contains inner functions accounts for 20% of the\n    // runtime cost of this pass.\n\n    // Don't inline functions with var declarations into a scope with inner\n    // functions as the new vars would leak into the inner function and\n    // cause memory leaks.\n    boolean fnContainsVars = NodeUtil.has(\n        NodeUtil.getFunctionBody(fnNode),\n        new NodeUtil.MatchDeclaration(),\n        new NodeUtil.MatchShallowStatement());\n    boolean forbidTemps = false;\n    if (!t.inGlobalScope()) {\n      Node fnCaller = t.getScopeRoot();\n      Node fnCallerBody = fnCaller.getLastChild();\n\n      // Don't allow any new vars into a scope that contains eval or one\n      // that contains functions (excluding the function being inlined).\n      Predicate<Node> match = new Predicate<Node>(){\n        @Override\n        public boolean apply(Node n) {\n          if (n.getType() == Token.NAME) {\n            return n.getString().equals(\"eval\");\n          }\n          if (!assumeMinimumCapture && n.getType() == Token.FUNCTION) {\n            return n != fnNode;\n          }\n          return false;\n        }\n      };\n      forbidTemps = NodeUtil.has(fnCallerBody,\n          match, NodeUtil.MATCH_NOT_FUNCTION);\n    }\n\n    if (fnContainsVars && forbidTemps) {\n      return false;\n    }\n\n    // If the caller contains functions or evals, verify we aren't adding any\n    // additional VAR declarations because aliasing is needed.\n    if (forbidTemps) {\n      Map<String, Node> args =\n          FunctionArgumentInjector.getFunctionCallParameterMap(\n              fnNode, callNode, this.safeNameIdSupplier);\n      boolean hasArgs = !args.isEmpty();\n      if (hasArgs) {\n        // Limit the inlining\n        Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);\n        FunctionArgumentInjector.maybeAddTempsForCallArguments(\n            fnNode, args, allNamesToAlias, compiler.getCodingConvention());\n        if (!allNamesToAlias.isEmpty()) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 579,
        "end_line": 644,
        "comment": "\n   * Determines whether a function can be inlined at a particular call site.\n   * - Don't inline if the calling function contains an inner function and\n   * inlining would introduce new globals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5123
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeUtil.checkForStateChangeHelper#783",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 783,
        "end_line": 926,
        "comment": "\n   * Returns true if some node in n's subtree changes application state.\n   * If {@code checkForNewObjects} is true, we assume that newly created\n   * mutable objects (like object literals) change state. Otherwise, we assume\n   * that they have no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5122
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionArgumentInjector.inject#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.inject(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Map<java.lang.String, com.google.javascript.rhino.Node>)",
        "snippet": "  static Node inject(AbstractCompiler compiler, Node node, Node parent,\n      Map<String, Node> replacements) {\n    return inject(compiler, node, parent, replacements, true);\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n   * With the map provided, replace the names with expression trees.\n   * @param node The root of the node tree within which to perform the\n   *     substitutions.\n   * @param parent The parent root node.\n   * @param replacements The map of names to template node trees with which\n   *     to replace the name Nodes.\n   * @returns The root node or its replacement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5122
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.apply#2706",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchDeclaration.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return isFunctionDeclaration(n) || n.getType() == Token.VAR;\n    }\n",
        "begin_line": 2706,
        "end_line": 2709,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.506
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeUtil.isSimpleOperatorType#702",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(int)",
        "snippet": "  static boolean isSimpleOperatorType(int type) {\n    switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 702,
        "end_line": 738,
        "comment": "\n   * A \"simple\" operator is one whose children are expressions,\n   * has no direct side-effects (unlike '+='), and has no\n   * conditional aspects (unlike '||').\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.502
        },
        "num_failing_tests": 65
    },
    {
        "name": "FunctionInjector.estimateCallCost#826",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.estimateCallCost(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private static int estimateCallCost(Node fnNode, boolean referencesThis) {\n    Node argsNode = NodeUtil.getFunctionParameters(fnNode);\n    int numArgs = argsNode.getChildCount();\n\n    int callCost = NAME_COST_ESTIMATE + PAREN_COST;\n    if (numArgs > 0) {\n      callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);\n    }\n\n    if (referencesThis) {\n      // TODO(johnlenz): Update this if we start supporting inlining\n      // other functions that reference this.\n      // The only functions that reference this that are currently inlined\n      // are those that are called via \".call\" with an explicit \"this\".\n      callCost += 5 + 5;  // \".call\" + \"this,\"\n    }\n\n    return callCost;\n  }\n",
        "begin_line": 826,
        "end_line": 844,
        "comment": "\n   * Gets an estimate of the cost in characters of making the function call:\n   * the sum of the identifiers and the separators.\n   * @param referencesThis\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5011
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.newUndefinedNode#2644",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.newUndefinedNode(com.google.javascript.rhino.Node)",
        "snippet": "  static Node newUndefinedNode(Node srcReferenceNode) {\n    Node node = new Node(Token.VOID, Node.newNumber(0));\n    if (srcReferenceNode != null) {\n        node.copyInformationFromForTree(srcReferenceNode);\n    }\n    return node;\n  }\n",
        "begin_line": 2644,
        "end_line": 2650,
        "comment": "\n   * Create a node for an empty result expression:\n   *   \"void 0\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.501
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isFunctionObjectApply#2048",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionObjectApply(Node callNode) {\n    return isObjectCallMethod(callNode, \"apply\");\n  }\n",
        "begin_line": 2048,
        "end_line": 2050,
        "comment": "\n   * @return Whether the callNode represents an expression in the form of:\n   *    x.apply(...)\n   *    x['apply'](...)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5001
        },
        "num_failing_tests": 65
    },
    {
        "name": "AstValidator.validateStatement#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateStatement(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateStatement(Node n) {\n    switch (n.getType()) {\n      case Token.LABEL:\n        validateLabel(n);\n        return;\n      case Token.BLOCK:\n        validateBlock(n);\n        return;\n      case Token.FUNCTION:\n        validateFunctionStatement(n);\n        return;\n      case Token.WITH:\n        validateWith(n);\n        return;\n      case Token.FOR:\n        validateFor(n);\n        return;\n      case Token.WHILE:\n        validateWhile(n);\n        return;\n      case Token.DO:\n        validateDo(n);\n        return;\n      case Token.SWITCH:\n        validateSwitch(n);\n        return;\n      case Token.IF:\n        validateIf(n);\n        return;\n      case Token.VAR:\n        validateVar(n);\n        return;\n      case Token.EXPR_RESULT:\n        validateExprStmt(n);\n        return;\n      case Token.RETURN:\n        validateReturn(n);\n        return;\n      case Token.THROW:\n        validateThrow(n);\n        return;\n      case Token.TRY:\n        validateTry(n);\n        return;\n      case Token.BREAK:\n        validateBreak(n);\n        return;\n      case Token.CONTINUE:\n        validateContinue(n);\n        return;\n      case Token.EMPTY:\n        validateChildless(n);\n        return;\n      case Token.DEBUGGER:\n        validateChildless(n);\n        return;\n      default:\n        violation(\"Expected statement but was \"\n            + Node.tokenToName(n.getType()) + \".\", n);\n    }\n  }\n",
        "begin_line": 93,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4994
        },
        "num_failing_tests": 49
    },
    {
        "name": "FunctionInjector.canInlineReferenceToFunction#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceToFunction(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Set<java.lang.String>, com.google.javascript.jscomp.FunctionInjector.InliningMode, boolean, boolean)",
        "snippet": "  CanInlineResult canInlineReferenceToFunction(NodeTraversal t,\n      Node callNode, Node fnNode, Set<String> needAliases,\n      InliningMode mode, boolean referencesThis, boolean containsFunctions) {\n    // TODO(johnlenz): This function takes too many parameter, without\n    // context.  Modify the API to take a structure describing the function.\n\n    // Allow direct function calls or \"fn.call\" style calls.\n    if (!isSupportedCallType(callNode)) {\n      return CanInlineResult.NO;\n    }\n\n    // Limit where functions that contain functions can be inline.  Introducing\n    // an inner function into another function can capture a variable and cause\n    // a memory leak.  This isn't a problem in the global scope as those values\n    // last until explicitly cleared.\n    if (containsFunctions) {\n      if (!assumeMinimumCapture && !t.inGlobalScope()) {\n        // TODO(johnlenz): Allow inlining into any scope without local names or\n        // inner functions.\n        return CanInlineResult.NO;\n      } else if (NodeUtil.isWithinLoop(callNode)) {\n        // An inner closure maybe relying on a local value holding a value for a\n        // single iteration through a loop.\n        return CanInlineResult.NO;\n      }\n    }\n\n    // TODO(johnlenz): Add support for 'apply'\n    if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Allow 'this' references to be replaced with a\n      // global 'this' object.\n      return CanInlineResult.NO;\n    }\n\n    if (mode == InliningMode.DIRECT) {\n      return canInlineReferenceDirectly(callNode, fnNode);\n    } else {\n      return canInlineReferenceAsStatementBlock(\n          t, callNode, fnNode, needAliases);\n    }\n  }\n",
        "begin_line": 169,
        "end_line": 209,
        "comment": "\n   * @param t  The traversal use to reach the call site.\n   * @param callNode The CALL node.\n   * @param fnNode The function to evaluate for inlining.\n   * @param needAliases A set of function parameter names that can not be\n   *     used without aliasing. Returned by getUnsafeParameterNames().\n   * @param mode Inlining mode to be used.\n   * @param referencesThis Whether fnNode contains references to its this\n   *     object.\n   * @param containsFunctions Whether fnNode contains inner functions.\n   * @return Whether the inlining can occur.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4976
        },
        "num_failing_tests": 59
    },
    {
        "name": "FunctionInjector.classifyCallSite#351",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.classifyCallSite(com.google.javascript.rhino.Node)",
        "snippet": "  private CallSiteType classifyCallSite(Node callNode) {\n    Node parent = callNode.getParent();\n    Node grandParent = parent.getParent();\n\n    // Verify the call site:\n    if (NodeUtil.isExprCall(parent)) {\n      // This is a simple call?  Example: \"foo();\".\n      return CallSiteType.SIMPLE_CALL;\n    } else if (NodeUtil.isExprAssign(grandParent)\n        && !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent)\n        && parent.getFirstChild().getType() == Token.NAME\n        && !NodeUtil.isConstantName(parent.getFirstChild())) {\n      // This is a simple assignment.  Example: \"x = foo();\"\n      return CallSiteType.SIMPLE_ASSIGNMENT;\n    } else if (parent.getType() == Token.NAME\n        && !NodeUtil.isConstantName(parent)\n        && grandParent.getType() == Token.VAR\n        && grandParent.hasOneChild()) {\n      // This is a var declaration.  Example: \"var x = foo();\"\n      // TODO(johnlenz): Should we be checking for constants on the\n      // left-hand-side of the assignments (and handling them as EXPRESSION?\n      return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;\n    } else {\n      Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);\n      if (expressionRoot != null) {\n        ExpressionDecomposer decomposer = new ExpressionDecomposer(\n            compiler, safeNameIdSupplier, knownConstants);\n        DecompositionType type = decomposer.canExposeExpression(\n            callNode);\n        if (type == DecompositionType.MOVABLE) {\n          return CallSiteType.EXPRESSION;\n        } else if (type == DecompositionType.DECOMPOSABLE) {\n          return CallSiteType.DECOMPOSABLE_EXPRESSION;\n        } else {\n          Preconditions.checkState(type == DecompositionType.UNDECOMPOSABLE);\n        }\n      }\n    }\n\n    return CallSiteType.UNSUPPORTED;\n  }\n",
        "begin_line": 351,
        "end_line": 391,
        "comment": "\n   * Determine which, if any, of the supported types the call site is.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4976
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeUtil.newVarNode#2655",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.newVarNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  static Node newVarNode(String name, Node value) {\n    Node nodeName = Node.newString(Token.NAME, name);\n    if (value != null) {\n      Preconditions.checkState(value.getNext() == null);\n      nodeName.addChildToBack(value);\n      nodeName.copyInformationFrom(value);\n    }\n    Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);\n\n    return var;\n  }\n",
        "begin_line": 2655,
        "end_line": 2666,
        "comment": "\n   * Create a VAR node containing the given name and initial value expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4975
        },
        "num_failing_tests": 44
    },
    {
        "name": "InlineFunctions.findNamedFunctions#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.findNamedFunctions(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {\n      if (!NodeUtil.isStatement(n)) {\n        // There aren't any interesting functions here.\n        return;\n      }\n\n      switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   var fooFn = function(x) { return ... }\n        case Token.VAR:\n          Preconditions.checkState(n.hasOneChild());\n          Node nameNode = n.getFirstChild();\n          if (nameNode.getType() == Token.NAME && nameNode.hasChildren()\n              && nameNode.getFirstChild().getType() == Token.FUNCTION) {\n            maybeAddFunction(new FunctionVar(n), t.getModule());\n          }\n          break;\n\n        // Named functions\n        // function Foo(x) { return ... }\n        case Token.FUNCTION:\n          Preconditions.checkState(NodeUtil.isStatementBlock(parent)\n              || parent.getType() == Token.LABEL);\n          if (!NodeUtil.isFunctionExpression(n)) {\n            Function fn = new NamedFunction(n);\n            maybeAddFunction(fn, t.getModule());\n          }\n          break;\n      }\n    }\n",
        "begin_line": 175,
        "end_line": 204,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4857
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.findCalledFunctions#784",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.findCalledFunctions(com.google.javascript.rhino.Node, java.util.Set<java.lang.String>)",
        "snippet": "  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.NAME) {\n      if (isCandidateUsage(node)) {\n        changed.add(node.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n",
        "begin_line": 784,
        "end_line": 797,
        "comment": "\n   * @see #findCalledFunctions(Node)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4824
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionArgumentInjector.canNameValueChange#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.canNameValueChange(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean canNameValueChange(Node n, Node parent) {\n    int type = parent.getType();\n    return (type == Token.VAR || type == Token.INC || type == Token.DEC ||\n        (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n));\n  }\n",
        "begin_line": 232,
        "end_line": 236,
        "comment": "\n   * This is similar to NodeUtil.isLValue except that object properties and\n   * array member modification aren't important (\"o\" in \"o.a = 2\" is still \"o\"\n   * after assignment, where in as \"o = x\", \"o\" is now \"x\").\n   *\n   * This also looks for the redefinition of a name.\n   *   function (x){var x;}\n   *\n   * @param n The NAME node in question.\n   * @param parent The parent of the node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4812
        },
        "num_failing_tests": 43
    },
    {
        "name": "FunctionArgumentInjector.isLocalName#460",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.ReferencedAfterSideEffect.isLocalName(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isLocalName(Node node) {\n      if (NodeUtil.isName(node)) {\n        String name = node.getString();\n        return locals.contains(name);\n      }\n      return false;\n    }\n",
        "begin_line": 460,
        "end_line": 466,
        "comment": "\n     * @return Whether node is a reference to locally declared name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4677
        },
        "num_failing_tests": 19
    },
    {
        "name": "NodeUtil.has#2773",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.has(com.google.javascript.rhino.Node, com.google.common.base.Predicate<com.google.javascript.rhino.Node>, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred) {\n    if (pred.apply(node)) {\n      return true;\n    }\n\n    if (!traverseChildrenPred.apply(node)) {\n      return false;\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      if (has(c, pred, traverseChildrenPred)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 2773,
        "end_line": 2791,
        "comment": "\n   * @return Whether the predicate is true for the node or any of its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4595
        },
        "num_failing_tests": 59
    },
    {
        "name": "FunctionArgumentInjector.getFunctionParameterSet#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.getFunctionParameterSet(com.google.javascript.rhino.Node)",
        "snippet": "  private static Set<String> getFunctionParameterSet(Node fnNode) {\n    Set<String> set = Sets.newHashSet();\n    for (Node n : NodeUtil.getFunctionParameters(fnNode).children()) {\n      set.add(n.getString());\n    }\n    return set;\n  }\n",
        "begin_line": 495,
        "end_line": 501,
        "comment": "\n   * Get a set of function parameter names.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4591
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isObjectCallMethod#2019",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  static boolean isObjectCallMethod(Node callNode, String methodName) {\n    if (callNode.getType() == Token.CALL) {\n      Node functionIndentifyingExpression = callNode.getFirstChild();\n      if (isGet(functionIndentifyingExpression)) {\n        Node last = functionIndentifyingExpression.getLastChild();\n        if (last != null && last.getType() == Token.STRING) {\n          String propName = last.getString();\n          return (propName.equals(methodName));\n        }\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 2019,
        "end_line": 2031,
        "comment": "\n   * @return Whether node is a call to methodName.\n   *    a.f(...)\n   *    a['f'](...)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4548
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isFunctionObjectCall#2039",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionObjectCall(Node callNode) {\n    return isObjectCallMethod(callNode, \"call\");\n  }\n",
        "begin_line": 2039,
        "end_line": 2041,
        "comment": "\n   * @return Whether the callNode represents an expression in the form of:\n   *    x.call(...)\n   *    x['call'](...)\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4489
        },
        "num_failing_tests": 64
    },
    {
        "name": "FunctionInjector.apply#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.Anonymous-5f403ef8-9f22-44ed-a6f8-c0dd3ac37998.apply(com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public boolean apply(Node n) {\n        if (n.getType() == Token.NAME) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n",
        "begin_line": 140,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4454
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.checkNameUsage#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.checkNameUsage(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void checkNameUsage(NodeTraversal t, Node n, Node parent) {\n      Preconditions.checkState(n.getType() == Token.NAME);\n\n      if (isCandidateUsage(n)) {\n        return;\n      }\n\n      // Other refs to a function name remove its candidacy for inlining\n      String name = n.getString();\n      FunctionState fs = fns.get(name);\n      if (fs == null) {\n        return;\n      }\n\n      // Unlike normal call/new parameters, references passed to\n      // JSCompiler_ObjectPropertyString are not aliases of a value, but\n      // a reference to the name itself, as such the value of the name is\n      // unknown and can not be inlined.\n      if (parent.getType() == Token.NEW) {\n        Node target = parent.getFirstChild();\n        if (target.getType() == Token.NAME && target.getString().equals(\n            ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n          // This method is going to be replaced so don't inline it anywhere.\n          fs.setInline(false);\n        }\n      }\n\n      // If the name is being assigned to it can not be inlined.\n      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n        // e.g. bar = something; <== we can't inline \"bar\"\n        // so mark the function as uninlinable.\n        // TODO(johnlenz): Should we just remove it from fns here?\n        fs.setInline(false);\n      } else {\n        // e.g. var fn = bar; <== we can't inline \"bar\"\n        // As this reference can't be inlined mark the function as\n        // unremovable.\n        fs.setRemove(false);\n      }\n    }\n",
        "begin_line": 549,
        "end_line": 588,
        "comment": "\n     * Find functions that can be inlined.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4421
        },
        "num_failing_tests": 48
    },
    {
        "name": "DefinitionsRemover.FunctionArgumentDefinition#211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.FunctionArgumentDefinition.FunctionArgumentDefinition(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, boolean)",
        "snippet": "    FunctionArgumentDefinition(Node function,\n        Node argumentName,\n        boolean inExterns) {\n      super(argumentName, inExterns);\n      Preconditions.checkArgument(NodeUtil.isFunction(function));\n      Preconditions.checkArgument(NodeUtil.isName(argumentName));\n    }\n",
        "begin_line": 211,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4355
        },
        "num_failing_tests": 54
    },
    {
        "name": "DefinitionsRemover.getDefinition#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.getDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  static Definition getDefinition(Node n, boolean isExtern) {\n    // TODO(user): Since we have parent pointers handy. A lot of constructors\n    // can be simplified.\n\n    // This logic must match #isDefinitionNode\n    Node parent = n.getParent();\n    if (parent == null) {\n      return null;\n    }\n\n    if (NodeUtil.isVarDeclaration(n) && n.hasChildren()) {\n      return new VarDefinition(n, isExtern);\n    } else if (NodeUtil.isFunction(parent) && parent.getFirstChild() == n) {\n      if (!NodeUtil.isFunctionExpression(parent)) {\n        return new NamedFunctionDefinition(parent, isExtern);\n      } else if (!n.getString().equals(\"\")) {\n        return new FunctionExpressionDefinition(parent, isExtern);\n      }\n    } else if (NodeUtil.isAssign(parent) && parent.getFirstChild() == n) {\n      return new AssignmentDefinition(parent, isExtern);\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      return new ObjectLiteralPropertyDefinition(parent, n, n.getFirstChild(),\n          isExtern);\n    } else if (parent.getType() == Token.LP) {\n      Node function = parent.getParent();\n      return new FunctionArgumentDefinition(function, n, isExtern);\n    }\n    return null;\n  }\n",
        "begin_line": 36,
        "end_line": 64,
        "comment": "\n   * @return an {@link Definition} object if the node contains a definition or\n   *     {@code null} otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4355
        },
        "num_failing_tests": 65
    },
    {
        "name": "TypeSafeDispatcher.process#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n      case Token.FINALLY:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return processEmptyExpression((EmptyExpression) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 118,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4346
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processScope#849",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope)",
        "snippet": "    @Override\n    Node processScope(Scope scopeNode) {\n      return processGeneric(scopeNode);\n    }\n",
        "begin_line": 849,
        "end_line": 852,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4346
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.isCandidateUsage#427",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.isCandidateUsage(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isCandidateUsage(Node name) {\n    Node parent = name.getParent();\n    Preconditions.checkState(name.getType() == Token.NAME);\n    if (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION) {\n      // This is a declaration.  Duplicate declarations are handle during\n      // function candidate gathering.\n      return true;\n    }\n\n    if (parent.getType() == Token.CALL && parent.getFirstChild() == name) {\n      // This is a normal reference to the function.\n      return true;\n    }\n\n    // Check for a \".call\" to the named function:\n    //   CALL\n    //     GETPROP/GETELEM\n    //       NAME\n    //       STRING == \"call\"\n    //     This-Value\n    //     Function-parameter-1\n    //     ...\n    if (NodeUtil.isGet(parent)\n         && name == parent.getFirstChild()\n         && name.getNext().getType() == Token.STRING\n         && name.getNext().getString().equals(\"call\")) {\n      Node gramps = name.getAncestor(2);\n      if (gramps.getType() == Token.CALL\n          && gramps.getFirstChild() == parent) {\n        // Yep, a \".call\".\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 427,
        "end_line": 461,
        "comment": "\n   * @return Whether the name is used in a way that might be a candidate\n   *   for inlining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4343
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.verifyAllReferencesInlined#844",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.verifyAllReferencesInlined(com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "  void verifyAllReferencesInlined(FunctionState fs) {\n    for (Reference ref : fs.getReferences()) {\n      if (!ref.inlined) {\n        throw new IllegalStateException(\"Call site missed.\\n call: \"\n            + ref.callNode.toStringTree() + \"\\n parent:  \"\n            + ref.callNode.getParent().toStringTree());\n      }\n    }\n  }\n",
        "begin_line": 844,
        "end_line": 852,
        "comment": "\n   * Sanity check to verify, that expression rewriting didn't\n   * make a call inaccessible.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4298
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.MatchNameNode#2674",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNameNode.MatchNameNode(java.lang.String)",
        "snippet": "    MatchNameNode(String name){\n      this.name = name;\n    }\n",
        "begin_line": 2674,
        "end_line": 2676,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4246
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.apply#2678",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNameNode.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return n.getType() == Token.NAME\n          && n.getString().equals(name);\n    }\n",
        "begin_line": 2678,
        "end_line": 2682,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4246
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.removeInlinedFunctions#821",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.removeInlinedFunctions()",
        "snippet": "  void removeInlinedFunctions() {\n    for (FunctionState fs : fns.values()) {\n      if (fs.canRemove()) {\n        Function fn = fs.getFn();\n        Preconditions.checkState(fs.canInline());\n        Preconditions.checkState(fn != null);\n        verifyAllReferencesInlined(fs);\n\n        if (specializationState != null) {\n          specializationState.reportRemovedFunction(\n              fn.getFunctionNode(), fn.getDeclaringBlock());\n        }\n\n        fn.remove();\n        compiler.reportCodeChange();\n      }\n    }\n  }\n",
        "begin_line": 821,
        "end_line": 838,
        "comment": "\n   * Removed inlined functions that no longer have any references.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4242
        },
        "num_failing_tests": 48
    },
    {
        "name": "DefinitionsRemover.getRValue#170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.IncompleteDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return null;\n    }\n",
        "begin_line": 170,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4196
        },
        "num_failing_tests": 54
    },
    {
        "name": "InlineFunctions.visitCallSite#604",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.Inline.visitCallSite(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "    @Override\n    public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs) {\n      Preconditions.checkState(fs.hasExistingFunctionDefinition());\n      if (fs.canInline()) {\n        Reference ref = fs.getReference(callNode);\n        // There are two cases ref can be null: if the call site was introduce\n        // because it was part of a function that was inlined during this pass\n        // or if the call site was trimmed from the list of references because\n        // the function couldn't be inlined at this location.\n        if (ref != null) {\n          if (specializationState != null) {\n            Node containingFunction = getContainingFunction(t);\n\n            if (containingFunction != null) {\n              // Report that the function was specialized so that\n              // {@link SpecializeModule} can fix it up.\n              specializationState.reportSpecializedFunction(containingFunction);\n            }\n          }\n\n          inlineFunction(t, callNode, fs, ref.mode);\n          // Keep track of references that have been inlined so that\n          // we can verify that none have been missed.\n          ref.inlined = true;\n        }\n      }\n    }\n",
        "begin_line": 604,
        "end_line": 631,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.inlineFunction#636",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.Inline.inlineFunction(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineFunctions.FunctionState, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "    private void inlineFunction(\n        NodeTraversal t, Node callNode, FunctionState fs, InliningMode mode) {\n      Function fn = fs.getFn();\n      String fnName = fn.getName();\n      Node fnNode = fs.getSafeFnNode();\n\n      Node newCode = injector.inline(t, callNode, fnName, fnNode, mode);\n      t.getCompiler().reportCodeChange();\n      t.getCompiler().addToDebugLog(\"Inlined function: \" + fn.getName());\n    }\n",
        "begin_line": 636,
        "end_line": 645,
        "comment": "\n     * Inline a function into the call site.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.getSafeFnNode#918",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getSafeFnNode()",
        "snippet": "    public Node getSafeFnNode() {\n      return (safeFnNode != null) ? safeFnNode : fn.getFunctionNode();\n    }\n",
        "begin_line": 918,
        "end_line": 920,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.getReference#978",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getReference(com.google.javascript.rhino.Node)",
        "snippet": "    public Reference getReference(Node n) {\n      return getReferencesInternal().get(n);\n    }\n",
        "begin_line": 978,
        "end_line": 980,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.mimimizeCost#689",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.mimimizeCost(com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "  private boolean mimimizeCost(FunctionState fs) {\n    if (!inliningLowersCost(fs)) {\n      // Try again without Block inlining references\n      if (fs.hasBlockInliningReferences()) {\n        fs.setRemove(false);\n        fs.removeBlockInliningReferences();\n        if (!fs.hasReferences() || !inliningLowersCost(fs)) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 689,
        "end_line": 703,
        "comment": "\n   * Determines if the function is worth inlining and potentially\n   * trims references that increase the cost.\n   * @return Whether inlining the references lowers the overall cost.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.resolveInlineConflictsForFunction#744",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.resolveInlineConflictsForFunction(com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "  private void resolveInlineConflictsForFunction(FunctionState fs) {\n    // Functions that aren't referenced don't cause conflicts.\n    if (!fs.hasReferences()) {\n      return;\n    }\n\n    Node fnNode = fs.getFn().getFunctionNode();\n    Set<String> names = findCalledFunctions(fnNode);\n    if (!names.isEmpty()) {\n      // Prevent the removal of the referenced functions.\n      for (String name : names) {\n        FunctionState fsCalled = fns.get(name);\n        if (fsCalled != null && fsCalled.canRemove()) {\n          fsCalled.setRemove(false);\n          // For functions that can no longer be removed, check if they should\n          // still be inlined.\n          if (!mimimizeCost(fsCalled)) {\n            // It can't be inlined remove it from the list.\n            fsCalled.setInline(false);\n          }\n        }\n      }\n\n      // Make a copy of the Node, so it isn't changed by other inlines.\n      fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());\n    }\n  }\n",
        "begin_line": 744,
        "end_line": 770,
        "comment": "\n   * @see #resolveInlineConflicts\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.findCalledFunctions#775",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.findCalledFunctions(com.google.javascript.rhino.Node)",
        "snippet": "  private Set<String> findCalledFunctions(Node node) {\n    Set<String> changed = Sets.newHashSet();\n    findCalledFunctions(NodeUtil.getFunctionBody(node), changed);\n    return changed;\n  }\n",
        "begin_line": 775,
        "end_line": 779,
        "comment": "\n   * This functions that may be called directly.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.decomposeExpressions#803",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.decomposeExpressions(java.util.Set<java.lang.String>)",
        "snippet": "  private void decomposeExpressions(Set<String> fnNames) {\n    ExpressionDecomposer decomposer = new ExpressionDecomposer(\n        compiler, compiler.getUniqueNameIdSupplier(), fnNames);\n\n    for (FunctionState fs : fns.values()) {\n      if (fs.canInline()) {\n        for (Reference ref : fs.getReferences()) {\n          if (ref.requiresDecomposition) {\n            decomposer.maybeDecomposeExpression(ref.callNode);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 803,
        "end_line": 816,
        "comment": "\n   * For any call-site that needs it, prepare the call-site for inlining\n   * by rewriting the containing expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4188
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionArgumentInjector.findModifiedParameters#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.findModifiedParameters(com.google.javascript.rhino.Node)",
        "snippet": "  static Set<String> findModifiedParameters(Node fnNode) {\n    Set<String> names = getFunctionParameterSet(fnNode);\n    Set<String> unsafeNames = Sets.newHashSet();\n    return findModifiedParameters(\n        fnNode.getLastChild(), null, names, unsafeNames, false);\n  }\n",
        "begin_line": 169,
        "end_line": 174,
        "comment": "\n   * Retrieve a set of names that can not be safely substituted in place.\n   * Example:\n   *   function(a) {\n   *     a = 0;\n   *   }\n   * Inlining this without taking precautions would cause the call site value\n   * to be modified (bad).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4154
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.Inline#598",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.Inline.Inline(com.google.javascript.jscomp.FunctionInjector, com.google.javascript.jscomp.SpecializeModule.SpecializationState)",
        "snippet": "    Inline(FunctionInjector injector,\n        SpecializeModule.SpecializationState specializationState) {\n      this.injector = injector;\n      this.specializationState = specializationState;\n    }\n",
        "begin_line": 598,
        "end_line": 602,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4137
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.process#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n\n    NodeTraversal.traverse(compiler, root, new FindCandidateFunctions());\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n    NodeTraversal.traverse(compiler, root,\n       new FindCandidatesReferences(fns, anonFns));\n    trimCanidatesNotMeetingMinimumRequirements();\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n\n    // Store the set of function names eligible for inlining and use this to\n    // prevent function names from being moved into temporaries during\n    // expression decomposition. If this movement were allowed it would prevent\n    // the Inline callback from finding the function calls.\n    //\n    // This pass already assumes these are constants, so this is safe for anyone\n    // using function inlining.\n    //\n    Set<String> fnNames = Sets.newHashSet(fns.keySet());\n    injector.setKnownConstants(fnNames);\n\n    trimCanidatesUsingOnCost();\n    if (fns.isEmpty()) {\n      return;  // Nothing left to do.\n    }\n    resolveInlineConflicts();\n    decomposeExpressions(fnNames);\n    NodeTraversal.traverse(compiler, root,\n        new CallVisitor(\n            fns, anonFns, new Inline(injector, specializationState)));\n\n    removeInlinedFunctions();\n  }\n",
        "begin_line": 112,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4137
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.resolveInlineConflicts#735",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.resolveInlineConflicts()",
        "snippet": "  private void resolveInlineConflicts() {\n    for (FunctionState fs : fns.values()) {\n      resolveInlineConflictsForFunction(fs);\n    }\n  }\n",
        "begin_line": 735,
        "end_line": 739,
        "comment": "\n   * Size base inlining calculations are thrown off when a function that is\n   * being inlined also contains calls to functions that are slated for\n   * inlining.\n   *\n   * Specifically, a clone of the FUNCTION node tree is used when the function\n   * is inlined. Calls in this new tree are not included in the list of function\n   * references so they won't be inlined (which is what we want). Here we mark\n   * those functions as non-removable (as they will have new references in the\n   * cloned node trees).\n   *\n   * This prevents a function that would only be inlined because it is\n   * referenced once from being inlined into multiple call sites because\n   * the calling function has been inlined in multiple locations or the\n   * function being removed while there are still references.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4137
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.Reference#1114",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.Reference.Reference(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.FunctionInjector.InliningMode, boolean)",
        "snippet": "    Reference(\n        Node callNode, JSModule module, InliningMode mode, boolean decompose) {\n      super(callNode, module, mode);\n      this.requiresDecomposition = decompose;\n    }\n",
        "begin_line": 1114,
        "end_line": 1118,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.getReferencesInternal#960",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getReferencesInternal()",
        "snippet": "    private Map<Node, Reference> getReferencesInternal() {\n      if (references == null) {\n        return Collections.emptyMap();\n      }\n      return references;\n    }\n",
        "begin_line": 960,
        "end_line": 965,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.addReference#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.addReference(com.google.javascript.jscomp.InlineFunctions.Reference)",
        "snippet": "    public void addReference(Reference ref) {\n      if (references == null) {\n        references = Maps.newHashMap();\n      }\n      references.put(ref.callNode, ref);\n    }\n",
        "begin_line": 967,
        "end_line": 972,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.getModule#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getModule()",
        "snippet": "    public JSModule getModule() {\n      return module;\n    }\n",
        "begin_line": 997,
        "end_line": 999,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.maybeAddReferenceUsingMode#517",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.maybeAddReferenceUsingMode(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.InlineFunctions.FunctionState, com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "    private boolean maybeAddReferenceUsingMode(\n        NodeTraversal t, FunctionState fs, Node callNode,\n        JSModule module, InliningMode mode) {\n\n      if (specializationState != null) {\n        // If we're specializing, make sure we can fixup\n        // the containing function before inlining\n        Node containingFunction = getContainingFunction(t);\n        if (containingFunction != null && !specializationState.canFixupFunction(\n            containingFunction)) {\n            return false;\n        }\n      }\n\n      CanInlineResult result = injector.canInlineReferenceToFunction(\n          t, callNode, fs.getFn().getFunctionNode(),\n          fs.getNamesToAlias(), mode, fs.getReferencesThis(),\n          fs.hasInnerFunctions());\n      if (result != CanInlineResult.NO) {\n        // Yeah!\n        boolean decompose =\n          (result == CanInlineResult.AFTER_DECOMPOSITION);\n        fs.addReference(new Reference(callNode, module, mode, decompose));\n        return true;\n      }\n\n      return false;\n    }\n",
        "begin_line": 517,
        "end_line": 544,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.trimCanidatesUsingOnCost#665",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.trimCanidatesUsingOnCost()",
        "snippet": "  void trimCanidatesUsingOnCost() {\n    Iterator<Entry<String, FunctionState>> i;\n    for (i = fns.entrySet().iterator(); i.hasNext();) {\n      FunctionState fs = i.next().getValue();\n      if (fs.hasReferences()) {\n        // Only inline function if it decreases the code size.\n        boolean lowersCost = mimimizeCost(fs);\n        if (!lowersCost) {\n          // It shouldn't be inlined; remove it from the list.\n          i.remove();\n        }\n      } else if (!fs.canRemove()) {\n        // Don't bother tracking functions without references that can't be\n        // removed.\n        i.remove();\n      }\n    }\n  }\n",
        "begin_line": 665,
        "end_line": 682,
        "comment": "\n   * Remove entries from the list of candidates that can't be inlined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.inliningLowersCost#708",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.inliningLowersCost(com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "  private boolean inliningLowersCost(FunctionState fs) {\n    return injector.inliningLowersCost(\n        fs.getModule(),\n        fs.getFn().getFunctionNode(),\n        fs.getReferences(),\n        fs.getNamesToAlias(),\n        fs.canRemove(),\n        fs.getReferencesThis());\n  }\n",
        "begin_line": 708,
        "end_line": 716,
        "comment": "\n   * @return Whether inlining the function reduces code size.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionInjector.Reference#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.Reference.Reference(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.FunctionInjector.InliningMode)",
        "snippet": "    Reference(Node callNode, JSModule module, InliningMode mode){\n      this.callNode = callNode;\n      this.module = module;\n      this.mode = mode;\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4117
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.getReferences#974",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getReferences()",
        "snippet": "    public Collection<Reference> getReferences() {\n      return getReferencesInternal().values();\n    }\n",
        "begin_line": 974,
        "end_line": 976,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4068
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.getFunctionBody#1918",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionBody(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getFunctionBody(Node fn) {\n    Preconditions.checkArgument(isFunction(fn));\n    return fn.getLastChild();\n  }\n",
        "begin_line": 1918,
        "end_line": 1921,
        "comment": "\n   * Return a BLOCK node for the given FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4067
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.getFunctionParameters#2884",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionParameters(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node getFunctionParameters(Node fnNode) {\n    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]\n    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);\n    return fnNode.getFirstChild().getNext();\n  }\n",
        "begin_line": 2884,
        "end_line": 2888,
        "comment": "\n    * @param fnNode The function.\n    * @return The Node containing the Function parameters.\n    ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4041
        },
        "num_failing_tests": 65
    },
    {
        "name": "Compiler.resetUniqueNameId#929",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.resetUniqueNameId()",
        "snippet": "  @VisibleForTesting\n  void resetUniqueNameId() {\n    uniqueNameId = 0;\n  }\n",
        "begin_line": 929,
        "end_line": 932,
        "comment": "\n   * Resets the unique name id counter\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.copyInformationFromForTree#2122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFromForTree(com.google.javascript.rhino.Node)",
        "snippet": "  public Node copyInformationFromForTree(Node other) {\n    copyInformationFrom(other);\n    for (Node child = getFirstChild();\n         child != null; child = child.getNext()) {\n      child.copyInformationFromForTree(other);\n    }\n\n    return this;\n  }\n",
        "begin_line": 2122,
        "end_line": 2130,
        "comment": " TODO(nicksantos): The semantics of this method are ill-defined. Delete it.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4005
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.getReferencesThis#877",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getReferencesThis()",
        "snippet": "    public boolean getReferencesThis() {\n      return this.referencesThis;\n    }\n",
        "begin_line": 877,
        "end_line": 879,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4002
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.hasInnerFunctions#886",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasInnerFunctions()",
        "snippet": "    public boolean hasInnerFunctions() {\n      return hasInnerFunctions;\n    }\n",
        "begin_line": 886,
        "end_line": 888,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4002
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.maybeAddReference#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.maybeAddReference(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.InlineFunctions.FunctionState, com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule)",
        "snippet": "    void maybeAddReference(NodeTraversal t, FunctionState fs,\n        Node callNode, JSModule module) {\n      if (!fs.canInline()) {\n        return;\n      }\n\n      boolean referenceAdded = false;\n      InliningMode mode = fs.canInlineDirectly()\n           ? InliningMode.DIRECT : InliningMode.BLOCK;\n      referenceAdded = maybeAddReferenceUsingMode(\n          t, fs, callNode, module, mode);\n      if (!referenceAdded &&\n          mode == InliningMode.DIRECT && blockFunctionInliningEnabled) {\n        // This reference can not be directly inlined, see if\n        // block replacement inlining is possible.\n        mode = InliningMode.BLOCK;\n        referenceAdded = maybeAddReferenceUsingMode(\n            t, fs, callNode, module, mode);\n      }\n\n      if (!referenceAdded) {\n        // Don't try to remove a function if we can't inline all\n        // the references.\n        fs.setRemove(false);\n      }\n    }\n",
        "begin_line": 490,
        "end_line": 515,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionInjector.isSupportedCallType#216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.isSupportedCallType(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isSupportedCallType(Node callNode) {\n    if (callNode.getFirstChild().getType() != Token.NAME) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (!assumeStrictThis) {\n          Node thisValue = callNode.getFirstChild().getNext();\n          if (thisValue == null || thisValue.getType() != Token.THIS) {\n            return false;\n          }\n        }\n      } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 216,
        "end_line": 231,
        "comment": "\n   * Only \".call\" calls and direct calls to functions are supported.\n   * @param callNode The call evaluate.\n   * @return Whether the call is of a type that is supported.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3962
        },
        "num_failing_tests": 59
    },
    {
        "name": "MarkNoSideEffectCalls.visit#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.SetNoSideEffectCallProperty.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      if (!NodeUtil.isCall(node) && !NodeUtil.isNew(node)) {\n        return;\n      }\n\n      Collection<Definition> definitions =\n          defFinder.getDefinitionsReferencedAt(node.getFirstChild());\n      if (definitions == null) {\n        return;\n      }\n\n      for (Definition def : definitions) {\n        Node lValue = def.getLValue();\n        Preconditions.checkNotNull(lValue);\n        if (!noSideEffectFunctionNames.contains(lValue) &&\n            definitionTypeContainsFunctionType(def)) {\n          return;\n        }\n      }\n\n      node.setSideEffectFlags(Node.NO_SIDE_EFFECTS);\n    }\n",
        "begin_line": 175,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3957
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.getFn#909",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.getFn()",
        "snippet": "    public Function getFn() {\n      return fn;\n    }\n",
        "begin_line": 909,
        "end_line": 911,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3957
        },
        "num_failing_tests": 48
    },
    {
        "name": "MarkNoSideEffectCalls.definitionTypeContainsFunctionType#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.definitionTypeContainsFunctionType(com.google.javascript.jscomp.DefinitionsRemover.Definition)",
        "snippet": "  private static boolean definitionTypeContainsFunctionType(Definition def) {\n    Node rhs = def.getRValue();\n    if (rhs == null) {\n      return true;\n    }\n\n    switch (rhs.getType()) {\n      case Token.ASSIGN:\n      case Token.AND:\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.FUNCTION:\n      case Token.HOOK:\n      case Token.NAME:\n      case Token.NEW:\n      case Token.OR:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 77,
        "end_line": 98,
        "comment": "\n   * Determines if the type of the value of the rhs expression can\n   * be a function node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3952
        },
        "num_failing_tests": 61
    },
    {
        "name": "InlineFunctions.canRemove#940",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.canRemove()",
        "snippet": "    public boolean canRemove() {\n      return remove;\n    }\n",
        "begin_line": 940,
        "end_line": 942,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3904
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.hasReferences#956",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasReferences()",
        "snippet": "    public boolean hasReferences() {\n      return (references != null && !references.isEmpty());\n    }\n",
        "begin_line": 956,
        "end_line": 958,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3904
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.visitCallSite#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.visitCallSite(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineFunctions.FunctionState)",
        "snippet": "    @Override\n    public void visitCallSite(\n        NodeTraversal t, Node callNode, Node parent, FunctionState fs) {\n      maybeAddReference(t, fs, callNode, t.getModule());\n    }\n",
        "begin_line": 484,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3887
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.visit#388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.CallVisitor.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        // Function calls\n        case Token.CALL:\n          Node child = n.getFirstChild();\n          String name = null;\n          // NOTE: The normalization pass insures that local names do not\n          // collide with global names.\n          if (child.getType() == Token.NAME) {\n            name = child.getString();\n          } else if (child.getType() == Token.FUNCTION) {\n            name = anonFunctionMap.get(child);\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Preconditions.checkState(NodeUtil.isGet(child));\n            Node fnIdentifingNode = child.getFirstChild();\n            if (fnIdentifingNode.getType() == Token.NAME) {\n              name = fnIdentifingNode.getString();\n            } else if (fnIdentifingNode.getType() == Token.FUNCTION) {\n              name = anonFunctionMap.get(fnIdentifingNode);\n            }\n          }\n\n          if (name != null) {\n            FunctionState fs = functionMap.get(name);\n            // Only visit call-sites for functions that can be inlined.\n            if (fs != null) {\n              callback.visitCallSite(t, n, parent, fs);\n            }\n          }\n          break;\n      }\n    }\n",
        "begin_line": 388,
        "end_line": 420,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3887
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.canInlineDirectly#948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.canInlineDirectly()",
        "snippet": "    public boolean canInlineDirectly() {\n      return inlineDirectly;\n    }\n",
        "begin_line": 948,
        "end_line": 950,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3879
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.setModule#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "    public void setModule(JSModule module) {\n      this.module = module;\n    }\n",
        "begin_line": 993,
        "end_line": 995,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3879
        },
        "num_failing_tests": 48
    },
    {
        "name": "Node.getChildBefore#647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildBefore(com.google.javascript.rhino.Node)",
        "snippet": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
        "begin_line": 647,
        "end_line": 659,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3876
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionInjector.setKnownConstants#907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.setKnownConstants(java.util.Set<java.lang.String>)",
        "snippet": "  public void setKnownConstants(Set<String> knownConstants) {\n    // This is only expected to be set once. The same set should be used\n    // when evaluating call-sites and inlining calls.\n    Preconditions.checkState(this.knownConstants.isEmpty());\n    this.knownConstants = knownConstants;\n  }\n",
        "begin_line": 907,
        "end_line": 912,
        "comment": "\n   * Store the names of known constants to be used when classifying call-sites\n   * in expressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3854
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.referencesThis#1502",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.referencesThis(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean referencesThis(Node n) {\n    Node start = (isFunction(n)) ? n.getLastChild() : n;\n    return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);\n  }\n",
        "begin_line": 1502,
        "end_line": 1505,
        "comment": "\n   * Returns true if the shallow scope contains references to 'this' keyword\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3849
        },
        "num_failing_tests": 59
    },
    {
        "name": "InlineFunctions.isCandidateFunction#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.isCandidateFunction(com.google.javascript.jscomp.InlineFunctions.Function)",
        "snippet": "  private boolean isCandidateFunction(Function fn) {\n    // Don't inline exported functions.\n    String fnName = fn.getName();\n    if (compiler.getCodingConvention().isExported(fnName)) {\n      // TODO(johnlenz): Should we allow internal references to be inlined?\n      // An exported name can be replaced externally, any inlined instance\n      // would not reflect this change.\n      // To allow inlining we need to be able to distinguish between exports\n      // that are used in a read-only fashion and those that can be replaced\n      // by external definitions.\n      return false;\n    }\n\n    // Don't inline this special function\n    if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n      return false;\n    }\n\n    // Don't inline if we are specializing and the function can't be fixed up\n    if (specializationState != null &&\n        !specializationState.canFixupFunction(fn.getFunctionNode())) {\n      return false;\n    }\n\n    Node fnNode = fn.getFunctionNode();\n    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);\n  }\n",
        "begin_line": 335,
        "end_line": 361,
        "comment": "\n   * Checks if the given function matches the criteria for an inlinable\n   * function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3846
        },
        "num_failing_tests": 48
    },
    {
        "name": "FunctionInjector.doesFunctionMeetMinimumRequirements#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.doesFunctionMeetMinimumRequirements(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  boolean doesFunctionMeetMinimumRequirements(\n      final String fnName, Node fnNode) {\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    // Basic restrictions on functions that can be inlined:\n    // 1) It contains a reference to itself.\n    // 2) It uses its parameters indirectly using \"arguments\" (it isn't\n    //    handled yet.\n    // 3) It references \"eval\". Inline a function containing eval can have\n    //    large performance implications.\n\n    final String fnRecursionName = fnNode.getFirstChild().getString();\n    Preconditions.checkState(fnRecursionName != null);\n\n    // If the function references \"arguments\" directly in the function\n    boolean referencesArguments = NodeUtil.isNameReferenced(\n        block, \"arguments\", NodeUtil.MATCH_NOT_FUNCTION);\n\n    // or it references \"eval\" or one of its names anywhere.\n    Predicate<Node> p = new Predicate<Node>(){\n      @Override\n      public boolean apply(Node n) {\n        if (n.getType() == Token.NAME) {\n          return n.getString().equals(\"eval\")\n            || (!fnName.isEmpty()\n                && n.getString().equals(fnName))\n            || (!fnRecursionName.isEmpty()\n                && n.getString().equals(fnRecursionName));\n        }\n        return false;\n      }\n    };\n\n    return !referencesArguments\n        && !NodeUtil.has(block, p, Predicates.<Node>alwaysTrue());\n  }\n",
        "begin_line": 120,
        "end_line": 155,
        "comment": "\n   * @param fnName The name of this function. This either the name of the\n   *  variable to which the function is assigned or the name from the FUNCTION\n   *  node.\n   * @param fnNode The FUNCTION node of the function to inspect.\n   * @return Whether the function node meets the minimum requirements for\n   * inlining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3846
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.remove#1037",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.NamedFunction.remove()",
        "snippet": "    @Override\n    public void remove() {\n      NodeUtil.removeChild(fn.getParent(), fn);\n    }\n",
        "begin_line": 1037,
        "end_line": 1040,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3832
        },
        "num_failing_tests": 38
    },
    {
        "name": "InlineFunctions.hasExistingFunctionDefinition#869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasExistingFunctionDefinition()",
        "snippet": "    boolean hasExistingFunctionDefinition() {\n      return (fn != null);\n    }\n",
        "begin_line": 869,
        "end_line": 871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.setFn#913",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setFn(com.google.javascript.jscomp.InlineFunctions.Function)",
        "snippet": "    public void setFn(Function fn) {\n      Preconditions.checkState(this.fn == null);\n      this.fn = fn;\n    }\n",
        "begin_line": 913,
        "end_line": 916,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.canInline#926",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.canInline()",
        "snippet": "    public boolean canInline() {\n      return inline;\n    }\n",
        "begin_line": 926,
        "end_line": 928,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.FindCandidatesReferences#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.FindCandidatesReferences(java.util.Map<java.lang.String, com.google.javascript.jscomp.InlineFunctions.FunctionState>, java.util.Map<com.google.javascript.rhino.Node, java.lang.String>)",
        "snippet": "    FindCandidatesReferences(\n        Map<String, FunctionState> fns,\n        Map<Node, String> anonFns) {\n      super(fns, anonFns, null);\n      this.callback = this;\n    }\n",
        "begin_line": 469,
        "end_line": 474,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.visit#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidatesReferences.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      super.visit(t, n, parent);\n      if (n.getType() == Token.NAME) {\n        checkNameUsage(t, n, parent);\n      }\n    }\n",
        "begin_line": 476,
        "end_line": 482,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.CallVisitor#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.CallVisitor.CallVisitor(java.util.Map<java.lang.String, com.google.javascript.jscomp.InlineFunctions.FunctionState>, java.util.Map<com.google.javascript.rhino.Node, java.lang.String>, com.google.javascript.jscomp.InlineFunctions.CallVisitorCallback)",
        "snippet": "    CallVisitor(Map<String, FunctionState> fns,\n                Map<Node, String> anonFns,\n                CallVisitorCallback callback) {\n      this.functionMap = fns;\n      this.anonFunctionMap = anonFns;\n      this.callback = callback;\n    }\n",
        "begin_line": 380,
        "end_line": 386,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.getOrCreateFunctionState#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.getOrCreateFunctionState(java.lang.String)",
        "snippet": "  FunctionState getOrCreateFunctionState(String fnName) {\n    FunctionState fs = fns.get(fnName);\n    if (fs == null) {\n      fs = new FunctionState();\n      fns.put(fnName, fs);\n    }\n    return fs;\n  }\n",
        "begin_line": 97,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.trimCanidatesNotMeetingMinimumRequirements#652",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.trimCanidatesNotMeetingMinimumRequirements()",
        "snippet": "  private void trimCanidatesNotMeetingMinimumRequirements() {\n   Iterator<Entry<String, FunctionState>> i;\n   for (i = fns.entrySet().iterator(); i.hasNext();) {\n     FunctionState fs = i.next().getValue();\n     if (!fs.hasExistingFunctionDefinition() || !fs.canInline()) {\n       i.remove();\n     }\n   }\n  }\n",
        "begin_line": 652,
        "end_line": 660,
        "comment": "\n   * Remove entries that aren't a valid inline candidates, from the list of\n   * encountered names.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3806
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.setSafeFnNode#922",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setSafeFnNode(com.google.javascript.rhino.Node)",
        "snippet": "    public void setSafeFnNode(Node safeFnNode) {\n      this.safeFnNode = safeFnNode;\n    }\n",
        "begin_line": 922,
        "end_line": 924,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3783
        },
        "num_failing_tests": 28
    },
    {
        "name": "InlineFunctions.setHasInnerFunctions#881",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setHasInnerFunctions(boolean)",
        "snippet": "    public void setHasInnerFunctions(boolean hasInnerFunctions) {\n      this.hasInnerFunctions = hasInnerFunctions;\n    }\n",
        "begin_line": 881,
        "end_line": 883,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3769
        },
        "num_failing_tests": 15
    },
    {
        "name": "MarkNoSideEffectCalls.visit#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.GatherNoSideEffectFunctions.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      if (!inExterns && hasNoSideEffectsAnnotation(node)) {\n        traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n      }\n\n      if (NodeUtil.isGetProp(node)) {\n        if (NodeUtil.isExpressionNode(parent) &&\n            hasNoSideEffectsAnnotation(node)) {\n          noSideEffectFunctionNames.add(node);\n        }\n      } else if (NodeUtil.isFunction(node)) {\n\n        // The annotation may attached to the function node, the\n        // variable declaration or assignment expression.\n        boolean hasAnnotation = hasNoSideEffectsAnnotation(node);\n        List<Node> nameNodes = Lists.newArrayList();\n        nameNodes.add(node.getFirstChild());\n\n        Node nameNode = null;\n\n        if (NodeUtil.isName(parent)) {\n          Node gramp = parent.getParent();\n          if (NodeUtil.isVar(gramp) &&\n              gramp.hasOneChild() &&\n              hasNoSideEffectsAnnotation(gramp)) {\n            hasAnnotation = true;\n          }\n\n          nameNodes.add(parent);\n        } else if (NodeUtil.isAssign(parent)) {\n          if (hasNoSideEffectsAnnotation(parent)) {\n            hasAnnotation = true;\n          }\n\n          nameNodes.add(parent.getFirstChild());\n        }\n\n        if (hasAnnotation) {\n          noSideEffectFunctionNames.addAll(nameNodes);\n        }\n      }\n    }\n",
        "begin_line": 119,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3755
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.findFunctionExpressions#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.findFunctionExpressions(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "    public void findFunctionExpressions(NodeTraversal t, Node n) {\n      switch (n.getType()) {\n        // Functions expressions in the form of:\n        //   (function(){})();\n        case Token.CALL:\n          Node fnNode = null;\n          if (n.getFirstChild().getType() == Token.FUNCTION) {\n            fnNode = n.getFirstChild();\n          } else if (NodeUtil.isFunctionObjectCall(n)) {\n            Node fnIdentifingNode = n.getFirstChild().getFirstChild();\n            if (fnIdentifingNode.getType() == Token.FUNCTION) {\n              fnNode = fnIdentifingNode;\n            }\n          }\n\n          // If a interesting function was discovered, add it.\n          if (fnNode != null) {\n            Function fn = new FunctionExpression(fnNode, callsSeen++);\n            maybeAddFunction(fn, t.getModule());\n            anonFns.put(fnNode, fn.getName());\n          }\n          break;\n      }\n    }\n",
        "begin_line": 212,
        "end_line": 235,
        "comment": "\n     * Find function expressions that are called directly in the form of\n     *   (function(a,b,...){...})(a,b,...)\n     * or\n     *   (function(a,b,...){...}).call(this,a,b, ...)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3737
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.containsFunction#1495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsFunction(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean containsFunction(Node n) {\n    return containsType(n, Token.FUNCTION);\n  }\n",
        "begin_line": 1495,
        "end_line": 1497,
        "comment": "\n   * Determines if the given node contains a function statement or function\n   * expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3716
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeUtil.containsType#2287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int)",
        "snippet": "  static boolean containsType(Node node, int type) {\n    return containsType(node, type, Predicates.<Node>alwaysTrue());\n  }\n",
        "begin_line": 2287,
        "end_line": 2289,
        "comment": "\n   * @return true if n or any of its children are of the specified type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3716
        },
        "num_failing_tests": 59
    },
    {
        "name": "FunctionInjector.isDirectCallNodeReplacementPossible#513",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.isDirectCallNodeReplacementPossible(com.google.javascript.rhino.Node)",
        "snippet": "  boolean isDirectCallNodeReplacementPossible(Node fnNode) {\n    // Only inline single-statement functions\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    // Check if this function is suitable for direct replacement of a CALL node:\n    // a function that consists of single return that returns an expression.\n    if (!block.hasChildren()) {\n      // special case empty functions.\n      return true;\n    } else if (block.hasOneChild()) {\n      // Only inline functions that return something.\n      if (block.getFirstChild().getType() == Token.RETURN\n          && block.getFirstChild().getFirstChild() != null) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 513,
        "end_line": 531,
        "comment": "\n   * Checks if the given function matches the criteria for an inlinable\n   * function, and if so, adds it to our set of inlinable functions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3715
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.newExpr#746",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.newExpr(com.google.javascript.rhino.Node)",
        "snippet": "  public static Node newExpr(Node child) {\n    Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);\n    return expr;\n  }\n",
        "begin_line": 746,
        "end_line": 750,
        "comment": "\n   * Creates an EXPR_RESULT.\n   *\n   * @param child The expression itself.\n   * @return Newly created EXPR node with the child as subexpression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3665
        },
        "num_failing_tests": 42
    },
    {
        "name": "Node.replaceChild#796",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void replaceChild(Node child, Node newChild) {\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n\n    // Copy over important information.\n    newChild.copyInformationFrom(child);\n\n    newChild.next = child.next;\n    newChild.parent = this;\n    if (child == first) {\n        first = newChild;\n    } else {\n        Node prev = getChildBefore(child);\n        prev.next = newChild;\n    }\n    if (child == last)\n        last = newChild;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 796,
        "end_line": 817,
        "comment": "\n   * Detaches child from Node and replaces it with newChild.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3649
        },
        "num_failing_tests": 65
    },
    {
        "name": "MakeDeclaredNamesUnique.visit#155",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
        "begin_line": 155,
        "end_line": 186,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3612
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.getReplacementName(java.lang.String)",
        "snippet": "  private String getReplacementName(String oldName) {\n    for (Renamer names : nameStack) {\n      String newName = names.getReplacementName(oldName);\n      if (newName != null) {\n        return newName;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 192,
        "end_line": 200,
        "comment": "\n   * Walks the stack of name maps and finds the replacement name for the\n   * current scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3612
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.mayHaveSideEffects#769",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean mayHaveSideEffects(Node n) {\n    return mayHaveSideEffects(n, null);\n  }\n",
        "begin_line": 769,
        "end_line": 771,
        "comment": "\n   * Returns true if the node which may have side effects when executed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3596
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.visit#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if ((t.inGlobalScope() && inlineGlobalFunctions)\n          || (!t.inGlobalScope() && inlineLocalFunctions)) {\n        findNamedFunctions(t, n, parent);\n\n        findFunctionExpressions(t, n);\n      }\n    }\n",
        "begin_line": 165,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3589
        },
        "num_failing_tests": 48
    },
    {
        "name": "ExpressionDecomposer.ExpressionDecomposer#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.ExpressionDecomposer(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, java.util.Set<java.lang.String>)",
        "snippet": "  public ExpressionDecomposer(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      Set<String> constNames) {\n    Preconditions.checkNotNull(compiler);\n    Preconditions.checkNotNull(safeNameIdSupplier);\n    Preconditions.checkNotNull(constNames);\n    this.compiler = compiler;\n    this.safeNameIdSupplier = safeNameIdSupplier;\n    this.knownConstants = constNames;\n  }\n",
        "begin_line": 57,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.35
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.MatchNodeType#2691",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNodeType.MatchNodeType(int)",
        "snippet": "    MatchNodeType(int type){\n      this.type = type;\n    }\n",
        "begin_line": 2691,
        "end_line": 2693,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3475
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.apply#2695",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNodeType.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return n.getType() == type;\n    }\n",
        "begin_line": 2695,
        "end_line": 2698,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3475
        },
        "num_failing_tests": 65
    },
    {
        "name": "DefinitionsRemover.NamedFunctionDefinition#255",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.NamedFunctionDefinition.NamedFunctionDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    NamedFunctionDefinition(Node node, boolean inExterns) {\n      super(node, inExterns);\n    }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3473
        },
        "num_failing_tests": 56
    },
    {
        "name": "FunctionInjector.FunctionInjector#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.FunctionInjector(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean, boolean, boolean)",
        "snippet": "  public FunctionInjector(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean allowDecomposition,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture) {\n    Preconditions.checkNotNull(compiler);\n    Preconditions.checkNotNull(safeNameIdSupplier);\n    this.compiler = compiler;\n    this.safeNameIdSupplier = safeNameIdSupplier;\n    this.allowDecomposition = allowDecomposition;\n    this.assumeStrictThis = assumeStrictThis;\n    this.assumeMinimumCapture = assumeMinimumCapture;\n  }\n",
        "begin_line": 53,
        "end_line": 66,
        "comment": "\n   * @param allowDecomposition Whether an effort should be made to break down\n   * expressions into simpler expressions to allow functions to be injected\n   * where they would otherwise be disallowed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3466
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.children#1378",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.children()",
        "snippet": "  public Iterable<Node> children() {\n    if (first == null) {\n      return Collections.emptySet();\n    } else {\n      return new SiblingNodeIterable(first);\n    }\n  }\n",
        "begin_line": 1378,
        "end_line": 1384,
        "comment": "\n   * <p>Return an iterable object that iterates over this nodes's children.\n   * The iterator does not support the optional operation\n   * {@link Iterator#remove()}.</p>\n   *\n   * <p>To iterate over a node's siblings, one can write</p>\n   * <pre>Node n = ...;\n   * for (Node child : n.children()) { ...</pre>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3466
        },
        "num_failing_tests": 65
    },
    {
        "name": "DefinitionsRemover.getLValue#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.IncompleteDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return lValue;\n    }\n",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3464
        },
        "num_failing_tests": 56
    },
    {
        "name": "DefinitionsRemover.FunctionDefinition#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.FunctionDefinition.FunctionDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    FunctionDefinition(Node node, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkArgument(NodeUtil.isFunction(node));\n      function = node;\n    }\n",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3451
        },
        "num_failing_tests": 56
    },
    {
        "name": "DefinitionsRemover.getLValue#239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.FunctionDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return function.getFirstChild();\n    }\n",
        "begin_line": 239,
        "end_line": 242,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3451
        },
        "num_failing_tests": 56
    },
    {
        "name": "DefinitionsRemover.getRValue#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.FunctionDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return function;\n    }\n",
        "begin_line": 244,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3451
        },
        "num_failing_tests": 56
    },
    {
        "name": "Compiler.getUniqueNameIdSupplier#934",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getUniqueNameIdSupplier()",
        "snippet": "  @Override\n  Supplier<String> getUniqueNameIdSupplier() {\n    final Compiler self = this;\n    return new Supplier<String>() {\n      @Override\n      public String get() {\n        return String.valueOf(self.nextUniqueNameId());\n      }\n    };\n  }\n",
        "begin_line": 934,
        "end_line": 943,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3437
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isNameReferenced#2749",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isNameReferenced(com.google.javascript.rhino.Node, java.lang.String, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred) {\n    return has(node, new MatchNameNode(name), traverseChildrenPred);\n  }\n",
        "begin_line": 2749,
        "end_line": 2753,
        "comment": "\n   * Whether a simple name is referenced within the node tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3434
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.hasLocalNames#314",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.hasLocalNames(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean hasLocalNames(Node fnNode) {\n    Node block = NodeUtil.getFunctionBody(fnNode);\n    return NodeUtil.getFunctionParameters(fnNode).hasChildren()\n        || NodeUtil.has(\n             block,\n             new NodeUtil.MatchDeclaration(),\n             new NodeUtil.MatchShallowStatement());\n  }\n",
        "begin_line": 314,
        "end_line": 321,
        "comment": "\n   * @param fnNode The function to inspect.\n   * @return Whether the function has parameters, var, or function declarations.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3412
        },
        "num_failing_tests": 13
    },
    {
        "name": "InlineFunctions.NamedFunction#1023",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.NamedFunction.NamedFunction(com.google.javascript.rhino.Node)",
        "snippet": "    public NamedFunction(Node fn) {\n      this.fn = fn;\n    }\n",
        "begin_line": 1023,
        "end_line": 1025,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3403
        },
        "num_failing_tests": 39
    },
    {
        "name": "InlineFunctions.getName#1027",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.NamedFunction.getName()",
        "snippet": "    @Override\n    public String getName() {\n      return fn.getFirstChild().getString();\n    }\n",
        "begin_line": 1027,
        "end_line": 1030,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3403
        },
        "num_failing_tests": 39
    },
    {
        "name": "InlineFunctions.getFunctionNode#1032",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.NamedFunction.getFunctionNode()",
        "snippet": "    @Override\n    public Node getFunctionNode() {\n      return fn;\n    }\n",
        "begin_line": 1032,
        "end_line": 1035,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3403
        },
        "num_failing_tests": 39
    },
    {
        "name": "InlineFunctions.shouldTraverse#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FindCandidateFunctions.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      // Don't traverse into function bodies\n      // if we aren't inlining local functions.\n      return inlineLocalFunctions || nodeTraversal.inGlobalScope();\n    }\n",
        "begin_line": 157,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3367
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.InlineFunctions#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.InlineFunctions(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean, boolean, boolean, boolean, boolean)",
        "snippet": "  InlineFunctions(AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier,\n      boolean inlineGlobalFunctions,\n      boolean inlineLocalFunctions,\n      boolean blockFunctionInliningEnabled,\n      boolean assumeStrictThis,\n      boolean assumeMinimumCapture) {\n    Preconditions.checkArgument(compiler != null);\n    Preconditions.checkArgument(safeNameIdSupplier != null);\n    this.compiler = compiler;\n\n    this.inlineGlobalFunctions = inlineGlobalFunctions;\n    this.inlineLocalFunctions = inlineLocalFunctions;\n    this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;\n    this.assumeMinimumCapture = assumeMinimumCapture;\n\n    this.injector = new FunctionInjector(\n        compiler, safeNameIdSupplier,\n        true, assumeStrictThis, assumeMinimumCapture);\n  }\n",
        "begin_line": 76,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3367
        },
        "num_failing_tests": 48
    },
    {
        "name": "MarkNoSideEffectCalls.SetNoSideEffectCallProperty#171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.SetNoSideEffectCallProperty.SetNoSideEffectCallProperty(com.google.javascript.jscomp.SimpleDefinitionFinder)",
        "snippet": "    SetNoSideEffectCallProperty(SimpleDefinitionFinder defFinder) {\n      this.defFinder = defFinder;\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.334
        },
        "num_failing_tests": 65
    },
    {
        "name": "MarkNoSideEffectCalls.GatherNoSideEffectFunctions#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.GatherNoSideEffectFunctions.GatherNoSideEffectFunctions(boolean)",
        "snippet": "    GatherNoSideEffectFunctions(boolean inExterns) {\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.334
        },
        "num_failing_tests": 65
    },
    {
        "name": "MarkNoSideEffectCalls.MarkNoSideEffectCalls#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.MarkNoSideEffectCalls(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  MarkNoSideEffectCalls(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.noSideEffectFunctionNames = Sets.newHashSet();\n  }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.334
        },
        "num_failing_tests": 65
    },
    {
        "name": "MarkNoSideEffectCalls.process#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);\n    defFinder.process(externs, root);\n\n    // Gather the list of function nodes that have @nosideeffect annotations.\n    // For use by SetNoSideEffectCallProperty.\n    NodeTraversal.traverse(\n        compiler, externs, new GatherNoSideEffectFunctions(true));\n    NodeTraversal.traverse(\n        compiler, root, new GatherNoSideEffectFunctions(false));\n\n    NodeTraversal.traverse(compiler, root,\n                           new SetNoSideEffectCallProperty(defFinder));\n  }\n",
        "begin_line": 57,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.334
        },
        "num_failing_tests": 65
    },
    {
        "name": "MarkNoSideEffectCalls.hasNoSideEffectsAnnotation#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java",
        "class_name": "com.google.javascript.jscomp.MarkNoSideEffectCalls",
        "signature": "com.google.javascript.jscomp.MarkNoSideEffectCalls.hasNoSideEffectsAnnotation(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean hasNoSideEffectsAnnotation(Node node) {\n    JSDocInfo docInfo = node.getJSDocInfo();\n    return docInfo != null && docInfo.isNoSideEffects();\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "\n   * Get the value of the @nosideeffects annotation stored in the\n   * doc info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.334
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.mayHaveSideEffects#773",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, false, compiler);\n  }\n",
        "begin_line": 773,
        "end_line": 775,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3288
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isNew#1532",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isNew(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isNew(Node n) {\n    return n.getType() == Token.NEW;\n  }\n",
        "begin_line": 1532,
        "end_line": 1534,
        "comment": "\n   * Is this a NEW node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3261
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.containsType#2278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.containsType(com.google.javascript.rhino.Node, int, com.google.common.base.Predicate<com.google.javascript.rhino.Node>)",
        "snippet": "  static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred) {\n    return has(node, new MatchNodeType(type), traverseChildrenPred);\n  }\n",
        "begin_line": 2278,
        "end_line": 2282,
        "comment": "\n   * @return true if n or any of its children are of the specified type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3206
        },
        "num_failing_tests": 59
    },
    {
        "name": "Compiler.getModuleGraph#1050",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getModuleGraph()",
        "snippet": "  @Override\n  JSModuleGraph getModuleGraph() {\n    return moduleGraph;\n  }\n",
        "begin_line": 1050,
        "end_line": 1053,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.32
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.isExprCall#1604",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExprCall(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExprCall(Node n) {\n    return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;\n  }\n",
        "begin_line": 1604,
        "end_line": 1607,
        "comment": "\n   * Is this node a call expression statement?\n   *\n   * @param n The node\n   * @return True if {@code n} is EXPR_RESULT and {@code n}'s\n   *     first child is CALL\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3158
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.setString#320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.setString(java.lang.String)",
        "snippet": "    @Override\n    public void setString(String str) {\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 320,
        "end_line": 326,
        "comment": "\n     * sets the string content.\n     * @param str the new value.  Non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3153
        },
        "num_failing_tests": 66
    },
    {
        "name": "SimpleDefinitionFinder.getDefinitionsReferencedAt#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.getDefinitionsReferencedAt(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public Collection<Definition> getDefinitionsReferencedAt(Node useSite) {\n    if (definitionSiteMap.containsKey(useSite)) {\n      return null;\n    }\n\n    if (NodeUtil.isGetProp(useSite)) {\n      String propName = useSite.getLastChild().getString();\n      if (propName.equals(\"apply\") || propName.equals(\"call\")) {\n        useSite = useSite.getFirstChild();\n      }\n    }\n\n    String name = getSimplifiedName(useSite);\n    if (name != null) {\n      Collection<Definition> defs = nameDefinitionMultimap.get(name);\n      if (!defs.isEmpty()) {\n        return defs;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 78,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.315
        },
        "num_failing_tests": 65
    },
    {
        "name": "UseSite.UseSite#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "class_name": "com.google.javascript.jscomp.UseSite",
        "signature": "com.google.javascript.jscomp.UseSite.UseSite(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.JSModule)",
        "snippet": "  UseSite(Node node, Scope scope, JSModule module) {\n    this.node = node;\n    this.scope = scope;\n    this.module = module;\n  }\n",
        "begin_line": 33,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3142
        },
        "num_failing_tests": 63
    },
    {
        "name": "UseSite.hashCode#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/UseSite.java",
        "class_name": "com.google.javascript.jscomp.UseSite",
        "signature": "com.google.javascript.jscomp.UseSite.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return this.node.hashCode();\n  }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3142
        },
        "num_failing_tests": 63
    },
    {
        "name": "SimpleDefinitionFinder.visit#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n\n      Collection<Definition> defs = getDefinitionsReferencedAt(node);\n      if (defs == null) {\n        return;\n      }\n\n      Definition first = defs.iterator().next();\n\n      String name = getSimplifiedName(first.getLValue());\n      Preconditions.checkNotNull(name);\n      nameUseSiteMultimap.put(\n          name,\n          new UseSite(node, traversal.getScope(), traversal.getModule()));\n    }\n",
        "begin_line": 274,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3142
        },
        "num_failing_tests": 65
    },
    {
        "name": "SimpleDefinitionFinder.getSimplifiedName#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSimplifiedName(Node node) {\n    if (NodeUtil.isName(node)) {\n      String name = node.getString();\n      if (name != null && !name.isEmpty()) {\n        return name;\n      } else {\n        return null;\n      }\n    } else if (NodeUtil.isGetProp(node)) {\n      return \"this.\" + node.getLastChild().getString();\n    }\n    return null;\n  }\n",
        "begin_line": 137,
        "end_line": 149,
        "comment": "\n   * Extract a name from a node.  In the case of GETPROP nodes,\n   * replace the namespace or object expression with \"this\" for\n   * simplicity and correctness at the expense of inefficiencies due\n   * to higher chances of name collisions.\n   *\n   * TODO(user) revisit.  it would be helpful to at least use fully\n   * qualified names in the case of namespaces.  Might not matter as\n   * much if this pass runs after \"collapsing properties\".\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3124
        },
        "num_failing_tests": 65
    },
    {
        "name": "SimpleDefinitionFinder.DefinitionGatheringCallback#154",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback.DefinitionGatheringCallback(boolean)",
        "snippet": "    DefinitionGatheringCallback(boolean inExterns) {\n      this.inExterns = inExterns;\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3114
        },
        "num_failing_tests": 65
    },
    {
        "name": "SimpleDefinitionFinder.visit#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal traversal, Node node, Node parent) {\n      // Arguments of external functions should not count as name\n      // definitions.  They are placeholder names for documentation\n      // purposes only which are not reachable from anywhere.\n      if (inExterns && NodeUtil.isName(node) && parent.getType() == Token.LP) {\n        return;\n      }\n\n      Definition def =\n          DefinitionsRemover.getDefinition(node, inExterns);\n      if (def != null) {\n        String name = getSimplifiedName(def.getLValue());\n        if (name != null) {\n          Node rValue = def.getRValue();\n          if ((rValue != null) &&\n              !NodeUtil.isImmutableValue(rValue) &&\n              !NodeUtil.isFunction(rValue)) {\n\n            // Unhandled complex expression\n            Definition unknownDef =\n                new UnknownDefinition(def.getLValue(), inExterns);\n            def = unknownDef;\n          }\n\n          // TODO(johnlenz) : remove this stub dropping code if it becomes\n          // illegal to have untyped stubs in the externs definitions.\n          if (inExterns) {\n            // We need special handling of untyped externs stubs here:\n            //    the stub should be dropped if the name is provided elsewhere.\n\n            List<Definition> stubsToRemove = Lists.newArrayList();\n            String qualifiedName = node.getQualifiedName();\n\n            // If there is no qualified name for this, then there will be\n            // no stubs to remove. This will happen if node is an object\n            // literal key.\n            if (qualifiedName != null) {\n              for (Definition prevDef : nameDefinitionMultimap.get(name)) {\n                if (prevDef instanceof ExternalNameOnlyDefinition\n                    && !jsdocContainsDeclarations(node)) {\n                  String prevName = prevDef.getLValue().getQualifiedName();\n                  if (qualifiedName.equals(prevName)) {\n                    // Drop this stub, there is a real definition.\n                    stubsToRemove.add(prevDef);\n                  }\n                }\n              }\n\n              for (Definition prevDef : stubsToRemove) {\n                nameDefinitionMultimap.remove(name, prevDef);\n              }\n            }\n          }\n\n          nameDefinitionMultimap.put(name, def);\n          definitionSiteMap.put(node,\n                                new DefinitionSite(node,\n                                                   def,\n                                                   traversal.getModule(),\n                                                   traversal.inGlobalScope(),\n                                                   inExterns));\n        }\n      }\n\n      if (inExterns && (parent != null) && NodeUtil.isExpressionNode(parent)) {\n        String name = getSimplifiedName(node);\n        if (name != null) {\n\n          // TODO(johnlenz) : remove this code if it becomes illegal to have\n          // stubs in the externs definitions.\n\n          // We need special handling of untyped externs stubs here:\n          //    the stub should be dropped if the name is provided elsewhere.\n          // We can't just drop the stub now as it needs to be used as the\n          //    externs definition if no other definition is provided.\n\n          boolean dropStub = false;\n          if (!jsdocContainsDeclarations(node)) {\n            String qualifiedName = node.getQualifiedName();\n            if (qualifiedName != null) {\n              for (Definition prevDef : nameDefinitionMultimap.get(name)) {\n                String prevName = prevDef.getLValue().getQualifiedName();\n                if (qualifiedName.equals(prevName)) {\n                  dropStub = true;\n                  break;\n                }\n              }\n            }\n          }\n\n          if (!dropStub) {\n            // Incomplete definition\n            Definition definition = new ExternalNameOnlyDefinition(node);\n            nameDefinitionMultimap.put(name, definition);\n            definitionSiteMap.put(node,\n                                  new DefinitionSite(node,\n                                                     definition,\n                                                     traversal.getModule(),\n                                                     traversal.inGlobalScope(),\n                                                     inExterns));\n          }\n        }\n      }\n    }\n",
        "begin_line": 158,
        "end_line": 262,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3114
        },
        "num_failing_tests": 65
    },
    {
        "name": "SimpleDefinitionFinder.SimpleDefinitionFinder#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public SimpleDefinitionFinder(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.definitionSiteMap = Maps.newLinkedHashMap();\n    this.nameDefinitionMultimap = LinkedHashMultimap.create();\n    this.nameUseSiteMultimap = LinkedHashMultimap.create();\n  }\n",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3114
        },
        "num_failing_tests": 65
    },
    {
        "name": "SimpleDefinitionFinder.process#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node source) {\n    NodeTraversal.traverse(\n        compiler, externs, new DefinitionGatheringCallback(true));\n    NodeTraversal.traverse(\n        compiler, source, new DefinitionGatheringCallback(false));\n    NodeTraversal.traverse(\n        compiler, source, new UseSiteGatheringCallback());\n  }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3114
        },
        "num_failing_tests": 65
    },
    {
        "name": "Node.iterator#1498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.iterator()",
        "snippet": "    @Override\n    public Iterator<Node> iterator() {\n      return new Iterator<Node>() {\n        @Override\n        public boolean hasNext() {\n          return cur != null;\n        }\n\n        @Override\n        public Node next() {\n          if (!hasNext()) throw new NoSuchElementException();\n          Node n = cur;\n          cur = cur.getParent();\n          return n;\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }\n",
        "begin_line": 1498,
        "end_line": 1519,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3097
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.hasNext#1501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.Anonymous-f15c7389-09a7-4b94-b94e-d31d1347b742.hasNext()",
        "snippet": "        @Override\n        public boolean hasNext() {\n          return cur != null;\n        }\n",
        "begin_line": 1501,
        "end_line": 1504,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3097
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.next#1506",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.Anonymous-2c9379d1-5d57-47cf-ae3e-76185f61836e.next()",
        "snippet": "        @Override\n        public Node next() {\n          if (!hasNext()) throw new NoSuchElementException();\n          Node n = cur;\n          cur = cur.getParent();\n          return n;\n        }\n",
        "begin_line": 1506,
        "end_line": 1512,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3097
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.AncestorIterable#1494",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AncestorIterable.AncestorIterable(com.google.javascript.rhino.Node)",
        "snippet": "    AncestorIterable(Node cur) {\n      this.cur = cur;\n    }\n",
        "begin_line": 1494,
        "end_line": 1496,
        "comment": "\n     * @param cur The node to start.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3097
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.getAncestors#1481",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getAncestors()",
        "snippet": "  public AncestorIterable getAncestors() {\n    return new AncestorIterable(this.getParent());\n  }\n",
        "begin_line": 1481,
        "end_line": 1483,
        "comment": "\n   * Iterates all of the node's ancestors excluding itself.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3097
        },
        "num_failing_tests": 59
    },
    {
        "name": "DefinitionsRemover.Definition#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.Definition.Definition(boolean)",
        "snippet": "    Definition(boolean isExtern) {\n      this.isExtern = isExtern;\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3092
        },
        "num_failing_tests": 64
    },
    {
        "name": "DefinitionSite.DefinitionSite#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "signature": "com.google.javascript.jscomp.DefinitionSite.DefinitionSite(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionsRemover.Definition, com.google.javascript.jscomp.JSModule, boolean, boolean)",
        "snippet": "  DefinitionSite(Node node,\n                 Definition definition,\n                 JSModule module,\n                 boolean inGlobalScope,\n                 boolean inExterns) {\n    this.node = node;\n    this.definition = definition;\n    this.module = module;\n    this.inGlobalScope = inGlobalScope;\n    this.inExterns = inExterns;\n  }\n",
        "begin_line": 36,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3092
        },
        "num_failing_tests": 64
    },
    {
        "name": "InlineFunctions.setInline#930",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setInline(boolean)",
        "snippet": "    public void setInline(boolean inline) {\n      this.inline = inline;\n      if (inline == false) {\n        // No need to keep references to function that can't be inlined.\n        references = null;\n        // Don't remove functions that we aren't inlining.\n        remove = false;\n      }\n    }\n",
        "begin_line": 930,
        "end_line": 938,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3071
        },
        "num_failing_tests": 23
    },
    {
        "name": "NodeUtil.isTryCatchNodeContainer#1797",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isTryCatchNodeContainer(Node n) {\n    Node parent = n.getParent();\n    return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;\n  }\n",
        "begin_line": 1797,
        "end_line": 1801,
        "comment": " Whether the node is a CATCH container BLOCK. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3062
        },
        "num_failing_tests": 42
    },
    {
        "name": "NodeUtil.removeChild#1804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.removeChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static void removeChild(Node parent, Node node) {\n    if (isTryFinallyNode(parent, node)) {\n      if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {\n        // A finally can only be removed if there is a catch.\n        parent.removeChild(node);\n      } else {\n        // Otherwise only its children can be removed.\n        node.detachChildren();\n      }\n    } else if (node.getType() == Token.CATCH) {\n      // The CATCH can can only be removed if there is a finally clause.\n      Node tryNode = node.getParent().getParent();\n      Preconditions.checkState(NodeUtil.hasFinally(tryNode));\n      node.detachFromParent();\n    } else if (isTryCatchNodeContainer(node)) {\n      // The container node itself can't be removed, but the contained CATCH\n      // can if there is a 'finally' clause\n      Node tryNode = node.getParent();\n      Preconditions.checkState(NodeUtil.hasFinally(tryNode));\n      node.detachChildren();\n    } else if (node.getType() == Token.BLOCK) {\n      // Simply empty the block.  This maintains source location and\n      // \"synthetic\"-ness.\n      node.detachChildren();\n    } else if (isStatementBlock(parent)\n        || isSwitchCase(node)) {\n      // A statement in a block can simply be removed.\n      parent.removeChild(node);\n    } else if (parent.getType() == Token.VAR) {\n      if (parent.hasMoreThanOneChild()) {\n        parent.removeChild(node);\n      } else {\n        // Remove the node from the parent, so it can be reused.\n        parent.removeChild(node);\n        // This would leave an empty VAR, remove the VAR itself.\n        removeChild(parent.getParent(), parent);\n      }\n    } else if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild()) {\n      // Remove the node from the parent, so it can be reused.\n      parent.removeChild(node);\n      // A LABEL without children can not be referred to, remove it.\n      removeChild(parent.getParent(), parent);\n    } else if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4) {\n      // Only Token.FOR can have an Token.EMPTY other control structure\n      // need something for the condition. Others need to be replaced\n      // or the structure removed.\n      parent.replaceChild(node, new Node(Token.EMPTY));\n    } else {\n      throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());\n    }\n  }\n",
        "begin_line": 1804,
        "end_line": 1857,
        "comment": " Safely remove children while maintaining a valid node structure. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3062
        },
        "num_failing_tests": 42
    },
    {
        "name": "NodeUtil.apply#2716",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.MatchNotFunction.apply(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean apply(Node n) {\n      return !isFunction(n);\n    }\n",
        "begin_line": 2716,
        "end_line": 2719,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3055
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeTraversal.getModule#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getModule()",
        "snippet": "  public JSModule getModule() {\n    CompilerInput input = getInput();\n    return input == null ? null : input.getModule();\n  }\n",
        "begin_line": 439,
        "end_line": 442,
        "comment": "\n   * Gets the current input module.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3048
        },
        "num_failing_tests": 65
    },
    {
        "name": "DefinitionsRemover.IncompleteDefinition#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.IncompleteDefinition.IncompleteDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    IncompleteDefinition(Node lValue, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkNotNull(lValue);\n      Preconditions.checkArgument(ALLOWED_TYPES.contains(lValue.getType()),\n          \"Unexpected lValue type %s\", Token.name(lValue.getType()));\n      this.lValue = lValue;\n    }\n",
        "begin_line": 157,
        "end_line": 163,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3039
        },
        "num_failing_tests": 59
    },
    {
        "name": "FunctionInjector.apply#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.Anonymous-5000f784-ebd9-42b2-b2ec-6b76c684a3de.apply(com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public boolean apply(Node n) {\n          if (n.getType() == Token.NAME) {\n            return n.getString().equals(\"eval\");\n          }\n          if (!assumeMinimumCapture && n.getType() == Token.FUNCTION) {\n            return n != fnNode;\n          }\n          return false;\n        }\n",
        "begin_line": 606,
        "end_line": 615,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3028
        },
        "num_failing_tests": 22
    },
    {
        "name": "NodeUtil.isGetProp#1518",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isGetProp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isGetProp(Node n) {\n    return n.getType() == Token.GETPROP;\n  }\n",
        "begin_line": 1518,
        "end_line": 1520,
        "comment": "\n   * Is this a GETPROP node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3026
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isTryFinallyNode#1791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isTryFinallyNode(Node parent, Node child) {\n    return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();\n  }\n",
        "begin_line": 1791,
        "end_line": 1794,
        "comment": " Whether the child node is the FINALLY block of a try. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.302
        },
        "num_failing_tests": 42
    },
    {
        "name": "NodeUtil.isCall#1896",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isCall(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isCall(Node n) {\n    return n.getType() == Token.CALL;\n  }\n",
        "begin_line": 1896,
        "end_line": 1898,
        "comment": "\n   * Is this a CALL node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3003
        },
        "num_failing_tests": 65
    },
    {
        "name": "InlineFunctions.inlineDirectly#952",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.inlineDirectly(boolean)",
        "snippet": "    public void inlineDirectly(boolean directReplacement) {\n      this.inlineDirectly = directReplacement;\n    }\n",
        "begin_line": 952,
        "end_line": 954,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2998
        },
        "num_failing_tests": 31
    },
    {
        "name": "NodeTraversal.getCompiler#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCompiler()",
        "snippet": "  public Compiler getCompiler() {\n    // TODO(nicksantos): Remove this type cast. This is just temporary\n    // while refactoring.\n    return (Compiler) compiler;\n  }\n",
        "begin_line": 398,
        "end_line": 402,
        "comment": "\n   * Gets the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.299
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getProp#892",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "  public Object getProp(int propType) {\n    if (propType == SOURCENAME_PROP) {\n      return getSourceFileName();\n    }\n\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return null;\n    }\n    return item.getObjectValue();\n  }\n",
        "begin_line": 892,
        "end_line": 902,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2931
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.copyInformationFrom#2100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.copyInformationFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node copyInformationFrom(Node other) {\n    if (getProp(ORIGINALNAME_PROP) == null) {\n      putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));\n    }\n\n    if (getProp(STATIC_SOURCE_FILE) == null) {\n      putProp(STATIC_SOURCE_FILE, other.getProp(STATIC_SOURCE_FILE));\n      sourcePosition = other.sourcePosition;\n    } else if (getProp(SOURCENAME_PROP) == null) {\n      putProp(SOURCENAME_PROP, other.getProp(SOURCENAME_PROP));\n      sourcePosition = other.sourcePosition;\n    }\n\n    return this;\n  }\n",
        "begin_line": 2100,
        "end_line": 2114,
        "comment": " TODO(nicksantos): The semantics of this method are ill-defined. Delete it.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2931
        },
        "num_failing_tests": 65
    },
    {
        "name": "Node.SiblingNodeIterable#1408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.SiblingNodeIterable(com.google.javascript.rhino.Node)",
        "snippet": "    SiblingNodeIterable(Node start) {\n      this.start = start;\n      this.current = start;\n      this.used = false;\n    }\n",
        "begin_line": 1408,
        "end_line": 1412,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2859
        },
        "num_failing_tests": 65
    },
    {
        "name": "Node.iterator#1414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.iterator()",
        "snippet": "    @Override\n    public Iterator<Node> iterator() {\n      if (!used) {\n        used = true;\n        return this;\n      } else {\n        // We have already used the current object as an iterator;\n        // we must create a new SiblingNodeIterable based on this\n        // iterable's start node.\n        //\n        // Since the primary use case for Node.children is in for\n        // loops, this branch is extremely unlikely.\n        return (new SiblingNodeIterable(start)).iterator();\n      }\n    }\n",
        "begin_line": 1414,
        "end_line": 1428,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2859
        },
        "num_failing_tests": 65
    },
    {
        "name": "Node.hasNext#1430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.hasNext()",
        "snippet": "    @Override\n    public boolean hasNext() {\n      return current != null;\n    }\n",
        "begin_line": 1430,
        "end_line": 1433,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2859
        },
        "num_failing_tests": 65
    },
    {
        "name": "Node.next#1435",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.SiblingNodeIterable.next()",
        "snippet": "    @Override\n    public Node next() {\n      if (current == null) {\n        throw new NoSuchElementException();\n      }\n      try {\n        return current;\n      } finally {\n        current = current.getNext();\n      }\n    }\n",
        "begin_line": 1435,
        "end_line": 1445,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2859
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isAssign#1593",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssign(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssign(Node n) {\n    return n.getType() == Token.ASSIGN;\n  }\n",
        "begin_line": 1593,
        "end_line": 1595,
        "comment": "\n   * Is this an ASSIGN node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2852
        },
        "num_failing_tests": 65
    },
    {
        "name": "Compiler.addToDebugLog#1878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addToDebugLog(java.lang.String)",
        "snippet": "  @Override\n  void addToDebugLog(String str) {\n    debugLog.append(str);\n    debugLog.append('\\n');\n    logger.fine(str);\n  }\n",
        "begin_line": 1878,
        "end_line": 1883,
        "comment": " Called from the compiler passes, adds debug info ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2849
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.removeBlockInliningReferences#890",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.removeBlockInliningReferences()",
        "snippet": "    void removeBlockInliningReferences() {\n      Iterator<Entry<Node, Reference>> i;\n      for (i = getReferencesInternal().entrySet().iterator(); i.hasNext();) {\n        Entry<Node, Reference> entry = i.next();\n        if (entry.getValue().mode == InliningMode.BLOCK) {\n          i.remove();\n        }\n      }\n    }\n",
        "begin_line": 890,
        "end_line": 898,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2843
        },
        "num_failing_tests": 8
    },
    {
        "name": "InlineFunctions.hasBlockInliningReferences#900",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.hasBlockInliningReferences()",
        "snippet": "    public boolean hasBlockInliningReferences() {\n      for (Reference r : getReferencesInternal().values()) {\n        if (r.mode == InliningMode.BLOCK) {\n          return true;\n        }\n      }\n      return false;\n    }\n",
        "begin_line": 900,
        "end_line": 907,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2843
        },
        "num_failing_tests": 9
    },
    {
        "name": "CodeGenerator.add#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n      addLeftExpr(first, p, context);\n      cc.addOp(opstr, true);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().getType() == Token.NUMBER) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.getType() == Token.FUNCTION);\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GET) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n.getString());\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n.getString());\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.getType() == Token.STRING);\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
        "begin_line": 85,
        "end_line": 735,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2843
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionToBlockMutator.createAssignStatementNode#420",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.createAssignStatementNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  private static Node createAssignStatementNode(String name, Node expression) {\n    // Create 'name = result-expression;' statement.\n    // EXPR (ASSIGN (NAME, EXPRESSION))\n    Node nameNode = Node.newString(Token.NAME, name);\n    Node assign = new Node(Token.ASSIGN, nameNode, expression);\n    return NodeUtil.newExpr(assign);\n  }\n",
        "begin_line": 420,
        "end_line": 426,
        "comment": "\n   * Create a valid statement Node containing an assignment to name of the\n   * given expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2795
        },
        "num_failing_tests": 19
    },
    {
        "name": "NodeUtil.isImmutableValue#485",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isImmutableValue(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }\n\n    return false;\n  }\n",
        "begin_line": 485,
        "end_line": 508,
        "comment": "\n   * Returns true if this is an immutable value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2791
        },
        "num_failing_tests": 63
    },
    {
        "name": "IRFactory.processReturnStatement#840",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processReturnStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement)",
        "snippet": "    @Override\n    Node processReturnStatement(ReturnStatement statementNode) {\n      Node node = newNode(Token.RETURN);\n      if (statementNode.getReturnValue() != null) {\n        node.addChildToBack(transform(statementNode.getReturnValue()));\n      }\n      return node;\n    }\n",
        "begin_line": 840,
        "end_line": 847,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2779
        },
        "num_failing_tests": 48
    },
    {
        "name": "Normalize.moveNamedFunctions#576",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.moveNamedFunctions(com.google.javascript.rhino.Node)",
        "snippet": "    private void moveNamedFunctions(Node functionBody) {\n      Preconditions.checkState(\n          functionBody.getParent().getType() == Token.FUNCTION);\n      Node previous = null;\n      Node current = functionBody.getFirstChild();\n      // Skip any declarations at the beginning of the function body, they\n      // are already in the right place.\n      while (current != null && NodeUtil.isFunctionDeclaration(current)) {\n        previous = current;\n        current = current.getNext();\n      }\n\n      // Find any remaining declarations and move them.\n      Node insertAfter = previous;\n      while (current != null) {\n        // Save off the next node as the current node maybe removed.\n        Node next = current.getNext();\n        if (NodeUtil.isFunctionDeclaration(current)) {\n          // Remove the declaration from the body.\n          Preconditions.checkNotNull(previous);\n          functionBody.removeChildAfter(previous);\n\n          // Readd the function at the top of the function body (after any\n          // previous declarations).\n          insertAfter = addToFront(functionBody, current, insertAfter);\n          reportCodeChange(\"Move function declaration not at top of function\");\n        } else {\n          // Update the previous only if the current node hasn't been moved.\n          previous = current;\n        }\n        current = next;\n      }\n    }\n",
        "begin_line": 576,
        "end_line": 608,
        "comment": "\n     * Move all the functions that are valid at the execution of the first\n     * statement of the function to the beginning of the function definition.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2758
        },
        "num_failing_tests": 59
    },
    {
        "name": "InlineFunctions.FunctionExpression#1082",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionExpression.FunctionExpression(com.google.javascript.rhino.Node, int)",
        "snippet": "    public FunctionExpression(Node fn, int index) {\n      this.fn = fn;\n      // A number is not a valid function javascript indentifier\n      // so we don't need to worry about collisions.\n      this.fakeName = String.valueOf(index);\n    }\n",
        "begin_line": 1082,
        "end_line": 1087,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2725
        },
        "num_failing_tests": 14
    },
    {
        "name": "InlineFunctions.getName#1089",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionExpression.getName()",
        "snippet": "    @Override\n    public String getName() {\n      return fakeName;\n    }\n",
        "begin_line": 1089,
        "end_line": 1092,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2725
        },
        "num_failing_tests": 14
    },
    {
        "name": "InlineFunctions.getFunctionNode#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionExpression.getFunctionNode()",
        "snippet": "    @Override\n    public Node getFunctionNode() {\n      return fn;\n    }\n",
        "begin_line": 1094,
        "end_line": 1097,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2725
        },
        "num_failing_tests": 14
    },
    {
        "name": "InlineFunctions.remove#1099",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionExpression.remove()",
        "snippet": "    @Override\n    public void remove() {\n      // Nothing to do. The function is removed with the call.\n    }\n",
        "begin_line": 1099,
        "end_line": 1102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2667
        },
        "num_failing_tests": 13
    },
    {
        "name": "IRFactory.processGeneric#378",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n) {\n      Node node = newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      return node;\n    }\n",
        "begin_line": 378,
        "end_line": 385,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2658
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isName#1525",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isName(Node n) {\n    return n.getType() == Token.NAME;\n  }\n",
        "begin_line": 1525,
        "end_line": 1527,
        "comment": "\n   * Is this a NAME node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2648
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.enterScope#75",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n        String name = c.getString();\n        renamer.addDeclaredName(name);\n      }\n      Node functionBody = declarationRoot.getLastChild();\n      findDeclaredNames(functionBody, null, renamer);\n    }  else \n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
        "begin_line": 75,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2629
        },
        "num_failing_tests": 66
    },
    {
        "name": "GoogleCodingConvention.isConstant#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstant(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstant(String name) {\n    if (name.length() <= 1) {\n      return false;\n    }\n\n    // In compiled code, '$' is often a namespace delimiter. To allow inlining\n    // of namespaced constants, we strip off any namespaces here.\n    int pos = name.lastIndexOf('$');\n    if (pos >= 0) {\n      name = name.substring(pos + 1);\n      if (name.length() == 0) {\n        return false;\n      }\n    }\n\n    return isConstantKey(name);\n  }\n",
        "begin_line": 70,
        "end_line": 87,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>This enforces the Google const name convention, that the first character\n   * after the last $ must be an upper-case letter and all subsequent letters\n   * must be upper case. The name must be at least 2 characters long.\n   *\n   * <p>Examples:\n   * <pre>\n   *      aaa          Not constant - lower-case letters in the name\n   *      A            Not constant - too short\n   *      goog$A       Constant - letters after the $ are upper-case.\n   *      AA17         Constant - digits can appear after the first letter\n   *      goog$7A      Not constant - first character after the $ must be\n   *                   upper case.\n   *      $A           Constant - doesn't have to be anything in front of the $\n   * </pre>\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.2597
        },
        "num_failing_tests": 59
    },
    {
        "name": "MakeDeclaredNamesUnique.addDeclaredName#455",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.addDeclaredName(java.lang.String)",
        "snippet": "    @Override\n    public void addDeclaredName(String name) {\n      if (!name.equals(ARGUMENTS)) {\n        if (global) {\n          reserveName(name);\n        } else {\n          // It hasn't been declared locally yet, so increment the count.\n          if (!declarations.containsKey(name)) {\n            int id = incrementNameCount(name);\n            String newName = null;\n            if (id != 0) {\n              newName = getUniqueName(name, id);\n            }\n            declarations.put(name, newName);\n          }\n        }\n      }\n    }\n",
        "begin_line": 455,
        "end_line": 472,
        "comment": "\n     * Adds a name to the map of names declared in this scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2589
        },
        "num_failing_tests": 60
    },
    {
        "name": "MakeDeclaredNamesUnique.incrementNameCount#490",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.incrementNameCount(java.lang.String)",
        "snippet": "    private int incrementNameCount(String name) {\n      return nameUsage.add(name, 1);\n    }\n",
        "begin_line": 490,
        "end_line": 492,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2589
        },
        "num_failing_tests": 60
    },
    {
        "name": "InlineCostEstimator.append#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str){\n      last = str.charAt(str.length() - 1);\n      cost += str.length();\n      if (maxCost <= cost) {\n        continueProcessing = false;\n      }\n    }\n",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2542
        },
        "num_failing_tests": 17
    },
    {
        "name": "InlineCostEstimator.CompiledSizeEstimator#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.CompiledSizeEstimator(int)",
        "snippet": "    CompiledSizeEstimator(int costThreshhold) {\n      this.maxCost = costThreshhold;\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "InlineCostEstimator.add#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.add(com.google.javascript.rhino.Node)",
        "snippet": "    void add(Node root) {\n      CodeGenerator cg = new CodeGenerator(this);\n      cg.add(root);\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "InlineCostEstimator.getCost#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.getCost()",
        "snippet": "    int getCost() {\n      return cost;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "InlineCostEstimator.continueProcessing#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.continueProcessing()",
        "snippet": "    @Override\n    boolean continueProcessing() {\n      return continueProcessing;\n    }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "InlineCostEstimator.getLastChar#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return last;\n    }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "InlineCostEstimator.addIdentifier#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.CompiledSizeEstimator.addIdentifier(java.lang.String)",
        "snippet": "    @Override\n    void addIdentifier(String identifier) {\n      add(ESTIMATED_IDENTIFIER);\n    }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "InlineCostEstimator.getCost#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.getCost(com.google.javascript.rhino.Node, int)",
        "snippet": "  static int getCost(Node root, int costThreshhold) {\n    CompiledSizeEstimator estimator = new CompiledSizeEstimator(costThreshhold);\n    estimator.add(root);\n    return estimator.getCost();\n  }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "\n   * Determines the estimated size of the js snippet represented by the node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "CodeGenerator.CodeGenerator#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer)",
        "snippet": "  CodeGenerator(CodeConsumer consumer) {\n    this(consumer, null);\n  }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "CodeConsumer.startSourceMapping#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "  void startSourceMapping(Node node) {\n  }\n",
        "begin_line": 38,
        "end_line": 39,
        "comment": "\n   * Starts the source mapping for the given\n   * node at the current position.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "CodeConsumer.endSourceMapping#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "  void endSourceMapping(Node node) {\n  }\n",
        "begin_line": 45,
        "end_line": 46,
        "comment": "\n   * Finishes the source mapping for the given\n   * node at the current position.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2538
        },
        "num_failing_tests": 17
    },
    {
        "name": "NodeUtil.isFunction#1911",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunction(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunction(Node n) {\n    return n.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 1911,
        "end_line": 1913,
        "comment": "\n   * Is this a FUNCTION node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2526
        },
        "num_failing_tests": 65
    },
    {
        "name": "PrepareAst.annotateCalls#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateCalls(com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.getType() == Token.CALL);\n\n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.getType() == Token.NAME &&\n          \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }\n",
        "begin_line": 175,
        "end_line": 191,
        "comment": "\n     * There are two types of calls we are interested in calls without explicit\n     * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2518
        },
        "num_failing_tests": 65
    },
    {
        "name": "AstValidator.validateReturn#479",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateReturn(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateReturn(Node n) {\n    validateNodeType(Token.RETURN, n);\n    validateMaximumChildCount(n, 1);\n    if (n.hasChildren()) {\n      validateExpression(n.getFirstChild());\n    }\n  }\n",
        "begin_line": 479,
        "end_line": 485,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2509
        },
        "num_failing_tests": 36
    },
    {
        "name": "CompilerInput.getModule#306",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getModule()",
        "snippet": "  public JSModule getModule() {\n    return module;\n  }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": " Returns the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2508
        },
        "num_failing_tests": 65
    },
    {
        "name": "Node.addChildToFront#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToFront(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToFront(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = first;\n    first = child;\n    if (last == null) {\n      last = child;\n    }\n  }\n",
        "begin_line": 692,
        "end_line": 701,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2492
        },
        "num_failing_tests": 48
    },
    {
        "name": "Node.NumberNode#258",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.NumberNode(double)",
        "snippet": "    NumberNode(double number) {\n      super(Token.NUMBER);\n      this.number = number;\n    }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.newNumber#599",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newNumber(double)",
        "snippet": "  public static Node newNumber(double number) {\n    return new NumberNode(number);\n  }\n",
        "begin_line": 599,
        "end_line": 601,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processFunctionCall#584",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionCall(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall)",
        "snippet": "    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n      node.setLineno(callNode.getLineno());\n      node.setCharno(position2charno(leftParamPos));\n      maybeSetLengthFrom(node, callNode);\n      return node;\n    }\n",
        "begin_line": 584,
        "end_line": 597,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.245
        },
        "num_failing_tests": 65
    },
    {
        "name": "SyntacticScopeCreator.scanRoot#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  private void scanRoot(Node n, Scope parent) {\n    if (n.getType() == Token.FUNCTION) {\n      if (inputId == null) {\n        inputId = NodeUtil.getInputId(n);\n        // TODO(johnlenz): inputId maybe null if the FUNCTION node is detached\n        // from the AST.\n        // Is it meaningful to build a scope for detached FUNCTION node?\n      }\n\n      final Node fnNameNode = n.getFirstChild();\n      final Node args = fnNameNode.getNext();\n      final Node body = args.getNext();\n\n      // Bleed the function name into the scope, if it hasn't\n      // been declared in the outer scope.\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n        declareVar(fnNameNode);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.getType() == Token.LP);\n      for (Node a = args.getFirstChild(); a != null;\n           a = a.getNext()) {\n        Preconditions.checkState(a.getType() == Token.NAME);\n        declareVar(a);\n      }\n\n      // Body\n      scanVars(body, n);\n    } else {\n      // It's the global block\n      Preconditions.checkState(scope.getParent() == null);\n      scanVars(n, null);\n    }\n  }\n",
        "begin_line": 84,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2448
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.maybeEndStatement#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeEndStatement()",
        "snippet": "  void maybeEndStatement() {\n    // Add a ';' if we need to.\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n      endLine();\n      statementNeedsEnded = false;\n    }\n    statementStarted = true;\n  }\n",
        "begin_line": 152,
        "end_line": 161,
        "comment": "\n   * This is to be called when we're in a statement. If the prev statement\n   * needs to be ended, add a ';'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2342
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.exitScope#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    if (!t.inGlobalScope()) {\n      nameStack.pop();\n    }\n  }\n",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2335
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.shouldTraverse#113",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
        "begin_line": 113,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2335
        },
        "num_failing_tests": 66
    },
    {
        "name": "GoogleCodingConvention.isOptionalParameter#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isOptionalParameter(Node parameter) {\n    return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);\n  }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, parameter names beginning with {@code opt_} are\n   * treated as optional arguments.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.2335
        },
        "num_failing_tests": 49
    },
    {
        "name": "GoogleCodingConvention.isVarArgsParameter#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return VAR_ARGS_NAME.equals(parameter.getString());\n  }\n",
        "begin_line": 128,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2335
        },
        "num_failing_tests": 49
    },
    {
        "name": "IRFactory.processFunctionNode#599",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode)",
        "snippet": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 599,
        "end_line": 657,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.233
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrepareAst.annotateFunctions#234",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateFunctions(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateFunctions(Node n, Node parent) {\n      JSDocInfo fnInfo = NodeUtil.getFunctionJSDocInfo(n);\n\n      // Compute which function parameters are optional and\n      // which are var_args.\n      Node args = n.getFirstChild().getNext();\n      for (Node arg = args.getFirstChild();\n           arg != null;\n           arg = arg.getNext()) {\n        String argName = arg.getString();\n        JSTypeExpression typeExpr = fnInfo == null ?\n            null : fnInfo.getParameterType(argName);\n\n        if (convention.isOptionalParameter(arg) ||\n            typeExpr != null && typeExpr.isOptionalArg()) {\n          arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);\n        }\n        if (convention.isVarArgsParameter(arg) ||\n            typeExpr != null && typeExpr.isVarArgs()) {\n          arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);\n        }\n      }\n    }\n",
        "begin_line": 234,
        "end_line": 256,
        "comment": "\n     * Annotate optional and var_arg function parameters.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.233
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.traverseFunction#504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 504,
        "end_line": 539,
        "comment": "\n   * Traverses a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2324
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isExpressionNode#1487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExpressionNode(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExpressionNode(Node n) {\n    return n.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 1487,
        "end_line": 1489,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2315
        },
        "num_failing_tests": 59
    },
    {
        "name": "IRFactory.transformTokenType#1070",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 1070,
        "end_line": 1260,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2313
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrepareAst.visit#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateFunctions(n, parent);\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 148,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2313
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isStatementParent#1757",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1757,
        "end_line": 1770,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2276
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.getContextForNoInOperator#1155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private  Context getContextForNoInOperator(Context context) {\n    return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);\n  }\n",
        "begin_line": 1155,
        "end_line": 1158,
        "comment": "\n   * If we're in a IN_FOR_INIT_CLAUSE, we can't permit in operators in the\n   * expression.  Pass on the IN_FOR_INIT_CLAUSE flag through subexpressions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2245
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.addList#898",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext) {\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      boolean isFirst = n == firstInList;\n      if (isFirst) {\n        addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n      } else {\n        cc.listSeparator();\n        addExpr(n, isArrayOrFunctionArgument ? 1 : 0);\n      }\n    }\n  }\n",
        "begin_line": 898,
        "end_line": 909,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2243
        },
        "num_failing_tests": 66
    },
    {
        "name": "SyntacticScopeCreator.createScope#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  @Override\n  public Scope createScope(Node n, Scope parent) {\n    inputId = null;\n    if (parent == null) {\n      scope = new Scope(n, compiler);\n    } else {\n      scope = new Scope(parent, n);\n    }\n\n    scanRoot(n, parent);\n\n    inputId = null;\n    Scope returnedScope = scope;\n    scope = null;\n    return returnedScope;\n  }\n",
        "begin_line": 67,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2235
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.Scope#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode != parent.rootNode);\n\n    this.parent = parent;\n    this.rootNode = rootNode;\n    JSType nodeType = rootNode.getJSType();\n    if (nodeType != null && nodeType.isFunctionType()) {\n      thisType = nodeType.toMaybeFunctionType().getTypeOfThis();\n    } else {\n      thisType = parent.thisType;\n    }\n    this.isBottom = false;\n    this.depth = parent.depth + 1;\n  }\n",
        "begin_line": 389,
        "end_line": 403,
        "comment": "\n   * Creates a Scope given the parent Scope and the root node of the scope.\n   * @param parent  The parent Scope. Cannot be null.\n   * @param rootNode  Typically the FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2235
        },
        "num_failing_tests": 65
    },
    {
        "name": "Node.getJSType#2191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSType()",
        "snippet": "  public JSType getJSType() {\n      return jsType;\n  }\n",
        "begin_line": 2191,
        "end_line": 2193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2234
        },
        "num_failing_tests": 65
    },
    {
        "name": "LineNumberCheck.setCheckSubTree#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.setCheckSubTree(com.google.javascript.rhino.Node)",
        "snippet": "  public void setCheckSubTree(Node root) {\n    requiresLineNumbers = true;\n\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2231
        },
        "num_failing_tests": 17
    },
    {
        "name": "NodeTraversal.getInput#432",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
        "snippet": "  public CompilerInput getInput() {\n    return compiler.getInput(inputId);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Gets the current input source.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2225
        },
        "num_failing_tests": 65
    },
    {
        "name": "CodeConsumer.addOp#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addOp(java.lang.String, boolean)",
        "snippet": "  void addOp(String op, boolean binOp) {\n    maybeEndStatement();\n\n    char first = op.charAt(0);\n    char prev = getLastChar();\n\n    if ((first == '+' || first == '-') && prev == first) {\n      // This is not pretty printing. This is to prevent misparsing of\n      // things like \"x + ++y\" or \"x++ + ++y\"\n      append(\" \");\n    } else if (Character.isLetter(first) &&\n               isWordChar(prev)) {\n      // Make sure there is a space after e.g. instanceof , typeof\n      append(\" \");\n    } else if (prev == '-' && first == '>') {\n      // Make sure that we don't emit -->\n      append(\" \");\n    }\n\n    // Allow formating around the operator.\n    appendOp(op, binOp);\n\n    // Line breaking after an operator is always safe. Line breaking before an\n    // operator on the other hand is not. We only line break after a bin op\n    // because it looks strange.\n    if (binOp) {\n      maybeCutLine();\n    }\n  }\n",
        "begin_line": 203,
        "end_line": 231,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2211
        },
        "num_failing_tests": 64
    },
    {
        "name": "CodeConsumer.endLine#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endLine()",
        "snippet": "  void endLine() {\n  }\n",
        "begin_line": 94,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2204
        },
        "num_failing_tests": 66
    },
    {
        "name": "SyntacticScopeCreator.scanVars#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void scanVars(Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x = 1, y, z;\n        for (Node child = n.getFirstChild();\n             child != null;) {\n          Node next = child.getNext();\n          declareVar(child);\n          child = next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n\n        String fnName = n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(n.getFirstChild());\n        return;   // should not examine function's children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 2);\n        Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var = n.getFirstChild();\n        final Node block = var.getNext();\n\n        declareVar(var);\n        scanVars(block, n);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        inputId = n.getInputId();\n        Preconditions.checkNotNull(inputId);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child = n.getFirstChild();\n           child != null;) {\n        Node next = child.getNext();\n        scanVars(child, n);\n        child = next;\n      }\n    }\n  }\n",
        "begin_line": 124,
        "end_line": 178,
        "comment": "\n   * Scans and gather variables declarations under a Node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2193
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isAssignmentOp#1440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1440,
        "end_line": 1457,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2192
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.appendOp#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendOp(java.lang.String, boolean)",
        "snippet": "  void appendOp(String op, boolean binOp) {\n    append(op);\n  }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2188
        },
        "num_failing_tests": 64
    },
    {
        "name": "IRFactory.newNode#1267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1) {\n    return new Node(type, child1).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1267,
        "end_line": 1269,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2175
        },
        "num_failing_tests": 65
    },
    {
        "name": "Compiler.reportCodeChange#1724",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reportCodeChange()",
        "snippet": "  @Override\n  public void reportCodeChange() {\n    for (CodeChangeHandler handler : codeChangeHandlers) {\n      handler.reportChange();\n    }\n  }\n",
        "begin_line": 1724,
        "end_line": 1729,
        "comment": "\n   * All passes should call reportCodeChange() when they alter\n   * the JS tree structure. This is verified by CompilerTestCase.\n   * This allows us to optimize to a fixed point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.217
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeChangeHandler.reportChange#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reportChange()",
        "snippet": "    @Override\n    public void reportChange() {\n      hasChanged = true;\n    }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.217
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processVariableInitializer#996",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node = transform(initializerNode.getTarget());\n      if (initializerNode.getInitializer() != null) {\n        node.addChildToBack(transform(initializerNode.getInitializer()));\n        node.setLineno(node.getLineno());\n        maybeSetLengthFrom(node, initializerNode);\n      }\n      return node;\n    }\n",
        "begin_line": 996,
        "end_line": 1005,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2168
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.maybeLineBreak#433",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeLineBreak()",
        "snippet": "    @Override\n    void maybeLineBreak() {\n      if (lineBreak) {\n        if (sawFunction) {\n          startNewLine();\n          sawFunction = false;\n        }\n      }\n\n      // Since we are at a legal line break, can we upgrade the\n      // preferred break position?  We prefer to break after a\n      // semicolon rather than before it.\n      int len = code.length();\n      if (preferredBreakPosition == len - 1) {\n        char ch = code.charAt(len - 1);\n        if (ch == ';') {\n          preferredBreakPosition = len;\n        }\n      }\n      maybeCutLine();\n    }\n",
        "begin_line": 433,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2158
        },
        "num_failing_tests": 65
    },
    {
        "name": "LineNumberCheck.visit#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.SCRIPT) {\n      requiresLineNumbers = false;\n    } else if (requiresLineNumbers) {\n      if (n.getLineno() == -1) {\n        // The tree version of the node is really the best diagnostic\n        // info we have to offer here.\n        compiler.report(\n            t.makeError(n, MISSING_LINE_INFO,\n                n.toStringTree()));\n      }\n    }\n  }\n",
        "begin_line": 68,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2154
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer(com.google.common.collect.Multiset<java.lang.String>)",
        "snippet": "    private ContextualRenamer(Multiset<String> nameUsage) {\n      this.global = false;\n      this.nameUsage = nameUsage;\n    }\n",
        "begin_line": 439,
        "end_line": 442,
        "comment": "\n     * Constructor for child scopes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2131
        },
        "num_failing_tests": 60
    },
    {
        "name": "MakeDeclaredNamesUnique.forChildScope#447",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.forChildScope()",
        "snippet": "    @Override\n    public Renamer forChildScope() {\n      return new ContextualRenamer(nameUsage);\n    }\n",
        "begin_line": 447,
        "end_line": 450,
        "comment": "\n     * Create a ContextualRenamer\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2131
        },
        "num_failing_tests": 60
    },
    {
        "name": "PrepareAst.annotateDispatchers#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.getType() == Token.FUNCTION);\n      if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.getType() == Token.ASSIGN) {\n          Preconditions.checkState(parent.getLastChild() == n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }\n",
        "begin_line": 196,
        "end_line": 205,
        "comment": "\n     * Translate dispatcher info into the property expected node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2128
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isFunctionExpression#1988",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionExpression(Node n) {\n    return n.getType() == Token.FUNCTION && !isStatement(n);\n  }\n",
        "begin_line": 1988,
        "end_line": 1990,
        "comment": "\n   * Is a FUNCTION node an function expression? An function expression is one\n   * that has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of function expressions:\n   * <pre>\n   * (function () {})\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> expressions:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A node\n   * @return Whether n is an function used within an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2128
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.getFunctionJSDocInfo#2948",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(com.google.javascript.rhino.Node)",
        "snippet": "  public static JSDocInfo getFunctionJSDocInfo(Node n) {\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n    JSDocInfo fnInfo = n.getJSDocInfo();\n    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {\n      // Look for the info on other nodes.\n      Node parent = n.getParent();\n      if (parent.getType() == Token.ASSIGN) {\n        // on ASSIGNs\n        fnInfo = parent.getJSDocInfo();\n      } else if (parent.getType() == Token.NAME) {\n        // on var NAME = function() { ... };\n        fnInfo = parent.getParent().getJSDocInfo();\n      }\n    }\n    return fnInfo;\n  }\n",
        "begin_line": 2948,
        "end_line": 2963,
        "comment": "\n   * Get the JSDocInfo for a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2128
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.traverseBranch#470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      inputId = n.getInputId();\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 470,
        "end_line": 499,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2128
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processBlock#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 483,
        "end_line": 486,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2122
        },
        "num_failing_tests": 66
    },
    {
        "name": "AstValidator.validateBlock#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBlock(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBlock(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 277,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2121
        },
        "num_failing_tests": 49
    },
    {
        "name": "NodeUtil.isStatement#1753",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }\n",
        "begin_line": 1753,
        "end_line": 1755,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2113
        },
        "num_failing_tests": 66
    },
    {
        "name": "LineNumberCheck.LineNumberCheck#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.LineNumberCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  LineNumberCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.211
        },
        "num_failing_tests": 66
    },
    {
        "name": "LineNumberCheck.shouldTraverse#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Each JavaScript file is rooted in a script node, so we'll only\n    // have line number information inside the script node.\n    if (n.getType() == Token.SCRIPT) {\n      requiresLineNumbers = true;\n    }\n    return true;\n  }\n",
        "begin_line": 58,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.211
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isGet#1510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isGet(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isGet(Node n) {\n    return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;\n  }\n",
        "begin_line": 1510,
        "end_line": 1513,
        "comment": "\n   * Is this a GETPROP or GETELEM node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2108
        },
        "num_failing_tests": 65
    },
    {
        "name": "Normalize.visit#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.WHILE:\n          if (CONVERT_WHILE_TO_FOR) {\n            Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            Node empty = new Node(Token.EMPTY);\n            empty.copyInformationFrom(n);\n            n.addChildBefore(empty, expr);\n            n.addChildAfter(empty.cloneNode(), expr);\n            reportCodeChange(\"WHILE node\");\n          }\n          break;\n\n        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n\n        case Token.NAME:\n        case Token.STRING:\n        case Token.GET:\n        case Token.SET:\n          if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) {\n            annotateConstantsByConvention(n, parent);\n          }\n          break;\n      }\n    }\n",
        "begin_line": 316,
        "end_line": 344,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2106
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.normalizeFunctionDeclaration#388",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.normalizeFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeFunctionDeclaration(Node n) {\n      Preconditions.checkState(n.getType() == Token.FUNCTION);\n      if (!NodeUtil.isFunctionExpression(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n)) {\n        rewriteFunctionDeclaration(n);\n      }\n    }\n",
        "begin_line": 388,
        "end_line": 394,
        "comment": "\n     * Rewrite named unhoisted functions declarations to a known\n     * consistent behavior so we don't to different logic paths for the same\n     * code. From:\n     *    function f() {}\n     * to:\n     *    var f = function () {};\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2106
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.doStatementNormalizations#433",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.doStatementNormalizations(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void doStatementNormalizations(\n        NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.LABEL) {\n        normalizeLabels(n);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs and LABELs, as all these\n      // are the only legal place for VARs and FOR statements.\n      if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {\n        extractForInitializer(n, null, null);\n      }\n\n      // Only inspect the children of SCRIPTs, BLOCKs, as all these\n      // are the only legal place for VARs.\n      if (NodeUtil.isStatementBlock(n)) {\n        splitVarDeclarations(n);\n      }\n\n      if (n.getType() == Token.FUNCTION) {\n        moveNamedFunctions(n.getLastChild());\n      }\n    }\n",
        "begin_line": 433,
        "end_line": 454,
        "comment": "\n     * Do normalizations that introduce new siblings or parents.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2106
        },
        "num_failing_tests": 59
    },
    {
        "name": "InlineFunctions.setRemove#944",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setRemove(boolean)",
        "snippet": "    public void setRemove(boolean remove) {\n      this.remove = remove;\n    }\n",
        "begin_line": 944,
        "end_line": 946,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2105
        },
        "num_failing_tests": 14
    },
    {
        "name": "CodePrinter.maybeCutLine#459",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.maybeCutLine()",
        "snippet": "    @Override\n    void maybeCutLine() {\n      if (lineLength > lineLengthThreshold) {\n        // Use the preferred position provided it will break the line.\n        if (preferredBreakPosition > lineStartPosition &&\n            preferredBreakPosition < lineStartPosition + lineLength) {\n          int position = preferredBreakPosition;\n          code.insert(position, '\\n');\n          reportLineCut(lineIndex, position - lineStartPosition);\n          lineIndex++;\n          lineLength -= (position - lineStartPosition);\n          lineStartPosition = position + 1;\n        } else {\n          startNewLine();\n        }\n      }\n    }\n",
        "begin_line": 459,
        "end_line": 475,
        "comment": "\n     * This may start a new line if the current line is longer than the line\n     * length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2098
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.findDeclaredNames#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.findDeclaredNames(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  private void findDeclaredNames(Node n, Node parent, Renamer renamer) {\n    // Do a shallow traversal, so don't traverse into function declarations,\n    // except for the name of the function itself.\n    if (parent == null\n        || parent.getType() != Token.FUNCTION\n        || n == parent.getFirstChild()) {\n      if (NodeUtil.isVarDeclaration(n)) {\n        renamer.addDeclaredName(n.getString());\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        renamer.addDeclaredName(nameNode.getString());\n      }\n\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        findDeclaredNames(c, n, renamer);\n      }\n    }\n  }\n",
        "begin_line": 206,
        "end_line": 223,
        "comment": "\n   * Traverses the current scope and collects declared names.  Does not\n   * decent into functions or add CATCH exceptions.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2093
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.extractCharno#1358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "  protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo & COLUMN_MASK;\n    }\n  }\n",
        "begin_line": 1358,
        "end_line": 1364,
        "comment": "\n   * Extracts the character number and character number from a merged line\n   * char number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.209
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.addLeftExpr#870",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addLeftExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  void addLeftExpr(Node n, int minPrecedence, Context context) {\n    addExpr(n, minPrecedence, context);\n  }\n",
        "begin_line": 870,
        "end_line": 872,
        "comment": "\n   * Adds a node at the left-hand side of an expression. Unlike\n   * {@link #addExpr(Node,int)}, this preserves information about the context.\n   *\n   * The left side of an expression is special because in the JavaScript\n   * grammar, certain tokens may be parsed differently when they are at\n   * the beginning of a statement. For example, \"{}\" is parsed as a block,\n   * but \"{'x': 'y'}\" is parsed as an object literal.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2082
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processVariableDeclaration#982",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.jscomp.mozilla.rhino.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node = newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 982,
        "end_line": 994,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2078
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique(com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer)",
        "snippet": "  MakeDeclaredNamesUnique(Renamer renamer) {\n    this.rootRenamer = renamer;\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2078
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isVarDeclaration#1549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isVarDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isVarDeclaration(Node n) {\n    // There is no need to verify that parent != null because a NAME node\n    // always has a parent in a valid parse tree.\n    return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;\n  }\n",
        "begin_line": 1549,
        "end_line": 1553,
        "comment": "\n   * Is this node the name of a variable being declared?\n   *\n   * @param n The node\n   * @return True if {@code n} is NAME and {@code parent} is VAR\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2076
        },
        "num_failing_tests": 66
    },
    {
        "name": "AbstractCompiler.setLifeCycleStage#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage)",
        "snippet": "  void setLifeCycleStage(LifeCycleStage stage) {\n    this.stage = stage;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Set the current life-cycle state.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2076
        },
        "num_failing_tests": 65
    },
    {
        "name": "CodeConsumer.addIdentifier#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addIdentifier(java.lang.String)",
        "snippet": "  void addIdentifier(String identifier) {\n    add(identifier);\n  }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2064
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.endStatement#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement()",
        "snippet": "  void endStatement() {\n    endStatement(false);\n  }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\n   * Indicates the end of a statement and a ';' may need to be added.\n   * But we don't add it now, in case we're at the end of a block (in which\n   * case we don't have to add the ';').\n   * See maybeEndStatement()\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2063
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.endStatement#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endStatement(boolean)",
        "snippet": "  void endStatement(boolean needSemiColon) {\n    if (needSemiColon) {\n      append(\";\");\n      maybeLineBreak();\n      statementNeedsEnded = false;\n    } else if (statementStarted) {\n      statementNeedsEnded = true;\n    }\n  }\n",
        "begin_line": 138,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2063
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.precedence#1161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.precedence(int)",
        "snippet": "  static int precedence(int type) {\n    switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.CALL:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      // Data values\n      case Token.ARRAYLIT:\n      case Token.EMPTY:  // TODO(johnlenz): remove this.\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }\n  }\n",
        "begin_line": 1161,
        "end_line": 1233,
        "comment": "\n   *  0 comma ,\n   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=\n   *  2 conditional ?:\n   *  3 logical-or ||\n   *  4 logical-and &&\n   *  5 bitwise-or |\n   *  6 bitwise-xor ^\n   *  7 bitwise-and &\n   *  8 equality == !=\n   *  9 relational < <= > >=\n   * 10 bitwise shift << >> >>>\n   * 11 addition/subtraction + -\n   * 12 multiply/divide * / %\n   * 13 negation/increment ! ~ - ++ --\n   * 14 call, member () [] .\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2062
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.addExpr#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int, com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private void addExpr(Node n, int minPrecedence, Context context) {\n    if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN))){\n      add(\"(\");\n      add(n, clearContextForNoInOperator(context));\n      add(\")\");\n    } else {\n      add(n, context);\n    }\n  }\n",
        "begin_line": 878,
        "end_line": 888,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2062
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.addIdentifier#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addIdentifier(java.lang.String)",
        "snippet": "  private void addIdentifier(String identifier) {\n    cc.addIdentifier(identifierEscape(identifier));\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.206
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.identifierEscape#1077",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.identifierEscape(java.lang.String)",
        "snippet": "  static String identifierEscape(String s) {\n    // First check if escaping is needed at all -- in most cases it isn't.\n    if (NodeUtil.isLatin(s)) {\n      return s;\n    }\n\n    // Now going through the string to escape non-latin characters if needed.\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // Identifiers should always go to Latin1/ ASCII characters because\n      // different browser's rules for valid identifier characters are\n      // crazy.\n      if (c > 0x1F && c < 0x7F) {\n        sb.append(c);\n      } else {\n        appendHexJavaScriptRepresentation(sb, c);\n      }\n    }\n    return sb.toString();\n  }\n",
        "begin_line": 1077,
        "end_line": 1097,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.206
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isLatin#2513",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isLatin(java.lang.String)",
        "snippet": "  static boolean isLatin(String s) {\n    char LARGEST_BASIC_LATIN = 0x7f;\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c > LARGEST_BASIC_LATIN) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 2513,
        "end_line": 2523,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2059
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.add#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(java.lang.String)",
        "snippet": "  void add(String str) {\n    cc.add(str);\n  }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2054
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.detachFromParent#1993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.detachFromParent()",
        "snippet": "  public Node detachFromParent() {\n    Preconditions.checkState(parent != null);\n    parent.removeChild(this);\n    return this;\n  }\n",
        "begin_line": 1993,
        "end_line": 1997,
        "comment": "\n   * Removes this node from its parent. Equivalent to:\n   * node.getParent().removeChild();\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.205
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.removeChild#782",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChild(com.google.javascript.rhino.Node)",
        "snippet": "  public void removeChild(Node child) {\n    Node prev = getChildBefore(child);\n    if (prev == null)\n        first = first.next;\n    else\n        prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n  }\n",
        "begin_line": 782,
        "end_line": 791,
        "comment": "\n   * Detach a child from its parent and siblings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.205
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.getInfoForNameNode#2929",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(com.google.javascript.rhino.Node)",
        "snippet": "  static JSDocInfo getInfoForNameNode(Node nameNode) {\n    JSDocInfo info = null;\n    Node parent = null;\n    if (nameNode != null) {\n      info = nameNode.getJSDocInfo();\n      parent = nameNode.getParent();\n    }\n\n    if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION)) {\n      info = parent.getJSDocInfo();\n    }\n    return info;\n  }\n",
        "begin_line": 2929,
        "end_line": 2943,
        "comment": "\n   * @param nameNode A name node\n   * @return The JSDocInfo for the name node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2046
        },
        "num_failing_tests": 66
    },
    {
        "name": "SyntacticScopeCreator.declareVar#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void declareVar(Node n) {\n    Preconditions.checkState(n.getType() == Token.NAME);\n\n    CompilerInput input = compiler.getInput(inputId);\n    String name = n.getString();\n    if (scope.isDeclared(name, false)\n        || (scope.isLocal() && name.equals(ARGUMENTS))) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, input);\n    } else {\n      scope.declare(name, n, null, input);\n    }\n  }\n",
        "begin_line": 233,
        "end_line": 245,
        "comment": "\n   * Declares a variable.\n   *\n   * @param n The node corresponding to the variable name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2043
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.Var#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.Scope, int, com.google.javascript.jscomp.CompilerInput, boolean, com.google.javascript.rhino.JSDocInfo)",
        "snippet": "    private Var(boolean inferred, String name, Node nameNode, JSType type,\n                Scope scope, int index, CompilerInput input, boolean isDefine,\n                JSDocInfo info) {\n      this.name = name;\n      this.nameNode = nameNode;\n      this.type = type;\n      this.scope = scope;\n      this.index = index;\n      this.input = input;\n      this.isDefine = isDefine;\n      this.info = info;\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 130,
        "end_line": 142,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2043
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.declare#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }\n",
        "begin_line": 483,
        "end_line": 485,
        "comment": "\n   * Declares a variable whose type is inferred.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2043
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.declare#497",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    // native variables do not have a name node.\n    // TODO(user): make Var abstract and have NativeVar, NormalVar.\n    JSDocInfo info = NodeUtil.getInfoForNameNode(nameNode);\n\n    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input,\n        info != null && info.isDefine(), info);\n\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 497,
        "end_line": 513,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2043
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.isDeclared#562",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name))\n      return true;\n\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 562,
        "end_line": 571,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2043
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.isGlobal#612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isGlobal()",
        "snippet": "  public boolean isGlobal() {\n    return parent == null;\n  }\n",
        "begin_line": 612,
        "end_line": 614,
        "comment": "\n   * Returns whether this is the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2043
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.isLocal#619",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return !isGlobal();\n  }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2043
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.getLastChar#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getLastChar()",
        "snippet": "    @Override\n    char getLastChar() {\n      return (code.length() > 0) ? code.charAt(code.length() - 1) : '\\0';\n    }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2042
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.append#414",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.append(java.lang.String)",
        "snippet": "    @Override\n    void append(String str) {\n      code.append(str);\n      lineLength += str.length();\n    }\n",
        "begin_line": 414,
        "end_line": 418,
        "comment": "\n     * Appends a string to the code, keeping track of the current line length.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.204
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.notePreferredLineBreak#477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.notePreferredLineBreak()",
        "snippet": "    @Override\n    void notePreferredLineBreak() {\n      preferredBreakPosition = code.length();\n    }\n",
        "begin_line": 477,
        "end_line": 480,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.204
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.add#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.add(java.lang.String)",
        "snippet": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n",
        "begin_line": 181,
        "end_line": 197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2038
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.isWordChar#265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isWordChar(char)",
        "snippet": "  static boolean isWordChar(char ch) {\n    return (ch == '_' ||\n            ch == '$' ||\n            Character.isLetterOrDigit(ch));\n  }\n",
        "begin_line": 265,
        "end_line": 269,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2038
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.getScopeRoot#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
        "snippet": "  public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }\n",
        "begin_line": 617,
        "end_line": 623,
        "comment": " Returns the current scope's root. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2037
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.cloneTree#2077",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneTree()",
        "snippet": "  public Node cloneTree() {\n    Node result = cloneNode();\n    for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {\n      Node n2clone = n2.cloneTree();\n      n2clone.parent = result;\n      if (result.last != null) {\n        result.last.next = n2clone;\n      }\n      if (result.first == null) {\n        result.first = n2clone;\n      }\n      result.last = n2clone;\n    }\n    return result;\n  }\n",
        "begin_line": 2077,
        "end_line": 2091,
        "comment": "\n   * @return A detached clone of the Node and all its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2034
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.getInput#964",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(com.google.javascript.rhino.InputId)",
        "snippet": "  @Override\n  public CompilerInput getInput(InputId id) {\n    return inputsById.get(id);\n  }\n",
        "begin_line": 964,
        "end_line": 967,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2032
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isObjectLitKey#2130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isObjectLitKey(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isObjectLitKey(Node node, Node parent) {\n    switch (node.getType()) {\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 2130,
        "end_line": 2139,
        "comment": "\n   * Determines whether a node represents an object literal key\n   * (e.g. key1 in {key1: value1, key2: value2}).\n   *\n   * @param node A node\n   * @param parent The node's parent\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2026
        },
        "num_failing_tests": 65
    },
    {
        "name": "Scope.Scope#410",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  Scope(Node rootNode, AbstractCompiler compiler) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);\n    this.isBottom = false;\n    this.depth = 0;\n  }\n",
        "begin_line": 410,
        "end_line": 416,
        "comment": "\n   * Creates a global Scope.\n   * @param rootNode  Typically the global BLOCK node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2025
        },
        "num_failing_tests": 66
    },
    {
        "name": "Scope.getParent#450",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 450,
        "end_line": 452,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2025
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isFunctionDeclaration#1950",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionDeclaration(Node n) {\n    return n.getType() == Token.FUNCTION && isStatement(n);\n  }\n",
        "begin_line": 1950,
        "end_line": 1952,
        "comment": "\n   * Is this node a function declaration? A function declaration is a function\n   * that has a name that is added to the current scope (i.e. a function that\n   * is not part of a expression; see {@link #isFunctionExpression}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2025
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.popScope#576",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n  }\n",
        "begin_line": 576,
        "end_line": 586,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2025
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.getScope#589",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n\n    return scope;\n  }\n",
        "begin_line": 589,
        "end_line": 603,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2025
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.isEquivalentTo#328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && this.str.equals(((StringNode) node).str));\n    }\n",
        "begin_line": 328,
        "end_line": 332,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2025
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.cloneNode#2058",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.cloneNode()",
        "snippet": "  public Node cloneNode() {\n    Node result;\n    try {\n      result = (Node) super.clone();\n      // PropListItem lists are immutable and can be shared so there is no\n      // need to clone them here.\n      result.next = null;\n      result.first = null;\n      result.last = null;\n      result.parent = null;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e.getMessage());\n    }\n    return result;\n  }\n",
        "begin_line": 2058,
        "end_line": 2072,
        "comment": "\n   * @return A detached clone of the Node, specifically excluding its children.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2025
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodingConventions.isExported#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String)",
        "snippet": "    @Override\n    public final boolean isExported(String name) {\n      return isExported(name, false) || isExported(name, true);\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2023
        },
        "num_failing_tests": 48
    },
    {
        "name": "InlineFunctions.FunctionVar#1052",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionVar.FunctionVar(com.google.javascript.rhino.Node)",
        "snippet": "    public FunctionVar(Node var) {\n      this.var = var;\n    }\n",
        "begin_line": 1052,
        "end_line": 1054,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2023
        },
        "num_failing_tests": 9
    },
    {
        "name": "InlineFunctions.getName#1056",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionVar.getName()",
        "snippet": "    @Override\n    public String getName() {\n      return var.getFirstChild().getString();\n    }\n",
        "begin_line": 1056,
        "end_line": 1059,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2023
        },
        "num_failing_tests": 9
    },
    {
        "name": "InlineFunctions.getFunctionNode#1061",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionVar.getFunctionNode()",
        "snippet": "    @Override\n    public Node getFunctionNode() {\n      return var.getFirstChild().getFirstChild();\n    }\n",
        "begin_line": 1061,
        "end_line": 1064,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2023
        },
        "num_failing_tests": 9
    },
    {
        "name": "IRFactory.processExpressionStatement#557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 557,
        "end_line": 562,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2012
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.NodeTraversal#229",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.inputId = null;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 229,
        "end_line": 239,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2011
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.pushScope#556",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 556,
        "end_line": 563,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2011
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.isEquivalentTo#1781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "  boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n    if (type != node.getType()\n        || getChildCount() != node.getChildCount()\n        || getNodeClass(this) != getNodeClass(node)) {\n      return false;\n    }\n\n    if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {\n      return false;\n    }\n\n    if (type == Token.ARRAYLIT) {\n      try {\n        int[] indices1 = (int[]) getProp(Node.SKIP_INDEXES_PROP);\n        int[] indices2 = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n        if (indices1 == null) {\n          if (indices2 != null) {\n            return false;\n          }\n        } else if (indices2 == null) {\n          return false;\n        } else if (indices1.length != indices2.length) {\n          return false;\n        } else {\n          for (int i = 0; i < indices1.length; i++) {\n            if (indices1[i] != indices2[i]) {\n              return false;\n            }\n          }\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    } else if (type == Token.INC || type == Token.DEC) {\n      int post1 = this.getIntProp(INCRDECR_PROP);\n      int post2 = node.getIntProp(INCRDECR_PROP);\n      if (post1 != post2) {\n        return false;\n      }\n    } else if (type == Token.STRING) {\n      int quoted1 = this.getIntProp(QUOTED_PROP);\n      int quoted2 = node.getIntProp(QUOTED_PROP);\n      if (quoted1 != quoted2) {\n        return false;\n      }\n    } else if (type == Token.CALL) {\n      if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {\n        return false;\n      }\n    }\n\n    if (recurse) {\n      Node n, n2;\n      for (n = first, n2 = node.first;\n           n != null;\n           n = n.next, n2 = n2.next) {\n        if (!n.isEquivalentTo(n2, compareJsType, true)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 1781,
        "end_line": 1844,
        "comment": "\n   * @param compareJsType Whether to compare the JSTypes of the nodes.\n   * @param recurse Whether to compare the children of the current node, if\n   *    not only the the count of the children are compared.\n   * @return Whether this node is equivalent semantically to the provided node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2005
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getNodeClass#1580",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNodeClass(com.google.javascript.rhino.Node)",
        "snippet": "  @SuppressWarnings(\"rawtypes\")\n  static private Class getNodeClass(Node n) {\n    Class c = n.getClass();\n    if (c == FunctionNode.class || c == ScriptOrFnNode.class) {\n      return Node.class;\n    }\n    return c;\n  }\n",
        "begin_line": 1580,
        "end_line": 1587,
        "comment": "\n   * Helper function to ignore differences in Node subclasses that are no longer\n   * used.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2005
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.isControlStructure#1668",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1668,
        "end_line": 1685,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.Node#462",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent == null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next == null,\n        \"new child has existing sibling\");\n\n    type = nodeType;\n    parent = null;\n    first = last = child;\n    child.next = null;\n    child.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 462,
        "end_line": 474,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 65
    },
    {
        "name": "CodePrinter.MappedCodePrinter#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.MappedCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    MappedCodePrinter(\n        int lineLengthThreshold,\n        boolean createSrcMap,\n        SourceMap.DetailLevel sourceMapDetailLevel) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      this.lineLengthThreshold = lineLengthThreshold <= 0 ? Integer.MAX_VALUE :\n        lineLengthThreshold;\n      this.createSrcMap = createSrcMap;\n      this.sourceMapDetailLevel = sourceMapDetailLevel;\n      this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;\n      this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n    }\n",
        "begin_line": 57,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.startSourceMapping#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.startSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void startSourceMapping(Node node) {\n      Preconditions.checkState(sourceMapDetailLevel != null);\n      Preconditions.checkState(node != null);\n      if (createSrcMap\n          && node.getSourceFileName() != null\n          && node.getLineno() > 0\n          && sourceMapDetailLevel.apply(node)) {\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        Mapping mapping = new Mapping();\n        mapping.node = node;\n        mapping.start = new FilePosition(line, index);\n        mappings.push(mapping);\n        allMappings.add(mapping);\n      }\n    }\n",
        "begin_line": 89,
        "end_line": 106,
        "comment": "\n     * Starts the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.endSourceMapping#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.endSourceMapping(com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    void endSourceMapping(Node node) {\n      if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node) {\n        Mapping mapping = mappings.pop();\n        int line = getCurrentLineIndex();\n        int index = getCurrentCharIndex();\n        Preconditions.checkState(line >= 0);\n        mapping.end = new FilePosition(line, index);\n      }\n    }\n",
        "begin_line": 112,
        "end_line": 121,
        "comment": "\n     * Finishes the source mapping for the given\n     * node at the current position.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.getCode#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.MappedCodePrinter.getCode()",
        "snippet": "    public String getCode() {\n      return code.toString();\n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.CompactCodePrinter#405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.CompactCodePrinter.CompactCodePrinter(boolean, int, boolean, com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    private CompactCodePrinter(boolean lineBreak, int lineLengthThreshold,\n        boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel) {\n      super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);\n      this.lineBreak = lineBreak;\n    }\n",
        "begin_line": 405,
        "end_line": 409,
        "comment": "\n   * @param lineBreak break the lines a bit more aggressively\n   * @param lineLengthThreshold The length of a line after which we force\n   *                            a newline when possible.\n   * @param createSrcMap Whether to gather source position\n   *                            mapping information when printing.\n   * @param sourceMapDetailLevel A filter to control which nodes get mapped into\n   *     the source map.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.Builder#501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.Builder(com.google.javascript.rhino.Node)",
        "snippet": "    Builder(Node node) {\n      root = node;\n    }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "\n     * Sets the root node from which to generate the source code.\n     * @param node The root node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.setPrettyPrint#509",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setPrettyPrint(boolean)",
        "snippet": "    Builder setPrettyPrint(boolean prettyPrint) {\n      this.prettyPrint = prettyPrint;\n      return this;\n    }\n",
        "begin_line": 509,
        "end_line": 512,
        "comment": "\n     * Sets whether pretty printing should be used.\n     * @param prettyPrint If true, pretty printing will be used.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.setLineBreak#518",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineBreak(boolean)",
        "snippet": "    Builder setLineBreak(boolean lineBreak) {\n      this.lineBreak = lineBreak;\n      return this;\n    }\n",
        "begin_line": 518,
        "end_line": 521,
        "comment": "\n     * Sets whether line breaking should be done automatically.\n     * @param lineBreak If true, line breaking is done automatically.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.setSourceMap#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMap(com.google.javascript.jscomp.SourceMap)",
        "snippet": "    Builder setSourceMap(SourceMap sourceMap) {\n      this.sourceMap = sourceMap;\n      return this;\n    }\n",
        "begin_line": 549,
        "end_line": 552,
        "comment": "\n     * Sets the source map to which to write the metadata about\n     * the generated source code.\n     *\n     * @param sourceMap The source map.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.build#583",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.build()",
        "snippet": "    String build() {\n      if (root == null) {\n        throw new IllegalStateException(\n            \"Cannot build without root node being specified\");\n      }\n\n      Format outputFormat = outputTypes\n          ? Format.TYPED\n          : prettyPrint\n              ? Format.PRETTY\n              : Format.COMPACT;\n\n      return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n          sourceMap, sourceMapDetailLevel, outputCharset, tagAsStrict);\n    }\n",
        "begin_line": 583,
        "end_line": 597,
        "comment": "\n     * Generates the source code and returns it.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodePrinter.toSource#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodePrinter.Format, boolean, int, com.google.javascript.jscomp.SourceMap, com.google.javascript.jscomp.SourceMap.DetailLevel, java.nio.charset.Charset, boolean)",
        "snippet": "  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                 Charset outputCharset,\n                                 boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }\n",
        "begin_line": 609,
        "end_line": 644,
        "comment": "\n   * Converts a tree to js code\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.continueProcessing#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.continueProcessing()",
        "snippet": "  boolean continueProcessing() {\n    return true;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * Provides a means of interrupting the CodeGenerator. Derived classes should\n   * return false to stop further processing.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeConsumer.endFile#291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFile()",
        "snippet": "  void endFile() {}\n",
        "begin_line": 291,
        "end_line": 291,
        "comment": " Called when we're at the end of a file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.opToStr#2211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStr(int)",
        "snippet": "  static String opToStr(int operator) {\n    switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }\n  }\n",
        "begin_line": 2211,
        "end_line": 2256,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation or {@code null} if the token value is\n   * not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.CodeGenerator#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.CodeGenerator(com.google.javascript.jscomp.CodeConsumer, java.nio.charset.Charset)",
        "snippet": "  CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset) {\n    cc = consumer;\n    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n      // If we want our default (pretending to be UTF-8, but escaping anything\n      // outside of straight ASCII), then don't use the encoder, but\n      // just special-case the code.  This keeps the normal path through\n      // the code identical to how it's been for years.\n      this.outputCharsetEncoder = null;\n    } else {\n      this.outputCharsetEncoder = outputCharset.newEncoder();\n    }\n  }\n",
        "begin_line": 48,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodeGenerator.add#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.add(com.google.javascript.rhino.Node)",
        "snippet": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1996
        },
        "num_failing_tests": 66
    },
    {
        "name": "GoogleCodingConvention.isConstantKey#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isConstantKey(java.lang.String)",
        "snippet": "  @Override\n  public boolean isConstantKey(String name) {\n    if (name.isEmpty() || !Character.isUpperCase(name.charAt(0))) {\n      return false;\n    }\n\n    // hack way of checking that there aren't any lower-case letters\n    return name.toUpperCase().equals(name);\n  }\n",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1991
        },
        "num_failing_tests": 57
    },
    {
        "name": "NodeTraversal.inGlobalScope#628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inGlobalScope()",
        "snippet": "  boolean inGlobalScope() {\n    return getScopeDepth() <= 1;\n  }\n",
        "begin_line": 628,
        "end_line": 630,
        "comment": "\n   * Determines whether the traversal is currently in the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.198
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.getScopeDepth#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeDepth()",
        "snippet": "  int getScopeDepth() {\n    return scopes.size() + scopeRoots.size();\n  }\n",
        "begin_line": 632,
        "end_line": 634,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.198
        },
        "num_failing_tests": 66
    },
    {
        "name": "GoogleCodingConvention.isExported#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "  @Override\n  public boolean isExported(String name, boolean local) {\n    return super.isExported(name, local) ||\n        (!local && name.startsWith(\"_\"));\n  }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "\n   * {@inheritDoc}\n   *\n   * <p>In Google code, any global name starting with an underscore is\n   * considered exported.\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.CodingConventions.Proxy": null
        },
        "susp": {
            "ochiai_susp": 0.1979
        },
        "num_failing_tests": 48
    },
    {
        "name": "NodeUtil.getInputId#2995",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInputId(com.google.javascript.rhino.Node)",
        "snippet": "  public static InputId getInputId(Node n) {\n    while (n != null && n.getType() != Token.SCRIPT) {\n      n = n.getParent();\n    }\n\n    return (n != null && n.getType() == Token.SCRIPT) ? n.getInputId() : null;\n  }\n",
        "begin_line": 2995,
        "end_line": 3001,
        "comment": "\n   * @param n The node.\n   * @return The InputId property on the node or its ancestors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1968
        },
        "num_failing_tests": 66
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "VoidType.toString#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnknownType.UnknownType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry = registry;\n    this.maxUnionSize = maxUnionSize;\n  }\n",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnionTypeBuilder.addAlternate#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union = alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarro sub-lattice. See the commants on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() && functionTypePosition != -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other =\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum =\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result = null;\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex = 0;\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n            if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              it.remove();\n\n              if (currentIndex == functionTypePosition) {\n                functionTypePosition = -1;\n              } else if (currentIndex < functionTypePosition) {\n                functionTypePosition--;\n                currentIndex--;\n              }\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition == -1);\n          functionTypePosition = alternates.size();\n        }\n\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 121,
        "end_line": 212,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 219,
        "end_line": 240,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnionTypeBuilder.build#247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 247,
        "end_line": 255,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 257,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "UnionType.UnionType#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "StringType.toString#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false);\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType) {\n    super(registry);\n    this.properties = Maps.newTreeMap();\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 115,
        "end_line": 127,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype\n   * when creating native objects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.setPrettyPrint#400",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
        "snippet": "  void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint = prettyPrint;\n  }\n",
        "begin_line": 400,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#413",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 413,
        "end_line": 416,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#424",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 424,
        "end_line": 427,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.getReferenceName#429",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else if (ownerFunction != null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 429,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null || ownerFunction != null;\n  }\n",
        "begin_line": 440,
        "end_line": 443,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.isSubtype#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n    if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    if (getConstructor() != null && getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say 'yes', to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return this.isImplicitPrototype(thatObj);\n  }\n",
        "begin_line": 445,
        "end_line": 493,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 495,
        "end_line": 504,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#506",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 506,
        "end_line": 509,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#512",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 512,
        "end_line": 515,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.setOwnerFunction#517",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction == null || type == null);\n    ownerFunction = type;\n  }\n",
        "begin_line": 517,
        "end_line": 520,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.getOwnerFunction#522",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
        "snippet": "  @Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 522,
        "end_line": 525,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrototypeObjectType.getCtorExtendedInterfaces#534",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();\n  }\n",
        "begin_line": 534,
        "end_line": 539,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.Property#599",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "    Property(String name, JSType type, boolean inferred,\n        Node propertyNode) {\n      this.name = name;\n      this.type = type;\n      this.inferred = inferred;\n      this.propertyNode = propertyNode;\n    }\n",
        "begin_line": 599,
        "end_line": 605,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.getType#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.Property.getType()",
        "snippet": "    @Override\n    public JSType getType() {\n      return type;\n    }\n",
        "begin_line": 632,
        "end_line": 635,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.ObjectType#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.isImplicitPrototype#469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final boolean isImplicitPrototype(ObjectType prototype) {\n    for (ObjectType current = this;\n         current != null;\n         current = current.getImplicitPrototype()) {\n      if (current.isEquivalentTo(prototype)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 469,
        "end_line": 478,
        "comment": "\n   * Checks that the prototype is an implicit prototype of this object. Since\n   * each object has an implicit prototype, an implicit prototype's\n   * implicit prototype is also this implicit prototype's.\n   *\n   * @param prototype any prototype based object\n   *\n   * @return {@code true} if {@code prototype} is {@code equal} to any\n   *         object in this object's implicit prototype chain.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.isUnknownType#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown = true;\n            break;\n          }\n        }\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 489,
        "end_line": 509,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.hasCachedValues#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 521,
        "end_line": 523,
        "comment": "\n   * Returns true if any cached values have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.cast#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.cast(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public static ObjectType cast(JSType type) {\n    return type == null ? null : type.toObjectType();\n  }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "\n   * A null-safe version of JSType#toObjectType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.isFunctionPrototypeType#545",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() != null;\n  }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NumberType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NullType.toString#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#246",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE =\n        new PrototypeObjectType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null, null, true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            NO_OBJECT_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n      createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 246,
        "end_line": 559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 205,
        "end_line": 212,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 237,
        "end_line": 244,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 561,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.register#587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 587,
        "end_line": 589,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.register#591",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 591,
        "end_line": 599,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.registerNativeType#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#617",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 617,
        "end_line": 629,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 631,
        "end_line": 650,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.getNativeType#874",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 874,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#878",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 878,
        "end_line": 880,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#882",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 882,
        "end_line": 884,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createOptionalType#955",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createUnionType#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 993,
        "end_line": 999,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createArrowType#1028",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createArrowType#1038",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 1038,
        "end_line": 1040,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1084",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1084,
        "end_line": 1088,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1191,
        "end_line": 1193,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1199,
        "end_line": 1203,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createParameters#1215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1215,
        "end_line": 1226,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1235,
        "end_line": 1242,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1278,
        "end_line": 1284,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.JSType#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.getNativeType#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isNoType#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isNoResolvedType#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isNoObjectType#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isEmptyType#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isAllType#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isUnknownType#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isUnionType#245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public final boolean isUnionType() {\n    return toMaybeUnionType() != null;\n  }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.toMaybeUnionType#254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
        "snippet": "  public UnionType toMaybeUnionType() {\n    return null;\n  }\n",
        "begin_line": 254,
        "end_line": 256,
        "comment": "\n   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n   *\n   * Named in honor of Haskell's Maybe type constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isFunctionType#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
        "snippet": "  public final boolean isFunctionType() {\n    return toMaybeFunctionType() != null;\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": " Returns true if toMaybeFunctionType returns a non-null FunctionType. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.toMaybeFunctionType#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
        "snippet": "  public FunctionType toMaybeFunctionType() {\n    return null;\n  }\n",
        "begin_line": 280,
        "end_line": 282,
        "comment": "\n   * Downcasts this to a FunctionType, or returns null if this is not\n   * a function.\n   *\n   * For the purposes of this function, we define a MaybeFunctionType as any\n   * type in the sub-lattice\n   * { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }\n   * This definition excludes bottom types like NoType and NoObjectType.\n   *\n   * This definition is somewhat arbitrary and axiomatic, but this is the\n   * definition that makes the most sense for the most callers.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isRecordType#317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
        "snippet": "  public boolean isRecordType() {\n    return toMaybeRecordType() != null;\n  }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.toMaybeRecordType#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
        "snippet": "  RecordType toMaybeRecordType() {\n    return null;\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n   * Downcasts this to a RecordType, or returns null if this is not\n   * a RecordType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isEquivalentTo#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isEquivalentTo(JSType jsType) {\n    if (jsType instanceof ProxyObjectType) {\n      return jsType.isEquivalentTo(this);\n    }\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return this == jsType;\n  }\n",
        "begin_line": 408,
        "end_line": 417,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.hashCode#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.toObjectType#554",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 554,
        "end_line": 556,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   *\n   * Does not change the underlying JS type. If you want to simulate JS\n   * autoboxing or dereferencing, you should use autoboxesTo() or dereference().\n   * Those methods may change the underlying JS type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isSubtype#989",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }\n",
        "begin_line": 989,
        "end_line": 991,
        "comment": "\n   * Checks whether {@code this} is a subtype of {@code that}.<p>\n   *\n   * Subtyping rules:\n   * <ul>\n   * <li>(unknown) &mdash; every type is a subtype of the Unknown type.</li>\n   * <li>(no) &mdash; the No type is a subtype of every type.</li>\n   * <li>(no-object) &mdash; the NoObject type is a subtype of every object\n   * type (i.e. subtypes of the Object type).</li>\n   * <li>(ref) &mdash; a type is a subtype of itself.</li>\n   * <li>(union-l) &mdash; A union type is a subtype of a type U if all the\n   * union type's constituents are a subtype of U. Formally<br>\n   * {@code (T<sub>1</sub>, &hellip;, T<sub>n</sub>) &lt;: U} if and only\n   * {@code T<sub>k</sub> &lt;: U} for all {@code k &isin; 1..n}.</li>\n   * <li>(union-r) &mdash; A type U is a subtype of a union type if it is a\n   * subtype of one of the union type's constituents. Formally<br>\n   * {@code U &lt;: (T<sub>1</sub>, &hellip;, T<sub>n</sub>)} if and only\n   * if {@code U &lt;: T<sub>k</sub>} for some index {@code k}.</li>\n   * <li>(objects) &mdash; an Object {@code O<sub>1</sub>} is a subtype\n   * of an object {@code O<sub>2</sub>} if it has more properties\n   * than {@code O<sub>2</sub>} and all common properties are\n   * pairwise subtypes.</li>\n   * </ul>\n   *\n   * @return {@code this &lt;: that}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSType.isSubtypeHelper#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union = thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n    }\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }\n",
        "begin_line": 1014,
        "end_line": 1042,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType);\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.toString#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toString();\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.isNominalType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.isEquivalentTo#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isEquivalentTo(JSType that) {\n    if (this == that) {\n      return true;\n    } else if (this.isNominalType()) {\n      ObjectType thatObj = ObjectType.cast(that);\n      if (thatObj != null && thatObj.isNominalType()) {\n        return getReferenceName().equals(thatObj.getReferenceName());\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.hashCode#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 173,
        "end_line": 180,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "InstanceObjectType.getCtorExtendedInterfaces#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.FunctionType#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.ObjectType, java.lang.String, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n    if (isConstructor) {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n    this.templateTypeName = templateTypeName;\n  }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.isConstructor#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.isInterface#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.toMaybeFunctionType#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
        "snippet": "  @Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.getInternalArrowType#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.getPrototype#307",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot == null) {\n      setPrototype(\n          new PrototypeObjectType(\n              registry,\n              this.getReferenceName() + \".prototype\",\n              registry.getNativeObjectType(OBJECT_TYPE),\n              isNativeObjectType()),\n          null);\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }\n",
        "begin_line": 307,
        "end_line": 319,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#326",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#330",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType() ||\n        !(baseType instanceof PrototypeObjectType)) {\n\n      baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType, propertyNode);\n  }\n",
        "begin_line": 330,
        "end_line": 357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.setPrototype#364",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.PrototypeObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  boolean setPrototype(PrototypeObjectType prototype, Node propertyNode) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    PrototypeObjectType oldPrototype = prototypeSlot == null\n        ? null : (PrototypeObjectType) prototypeSlot.getType();\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 364,
        "end_line": 407,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.getExtendedInterfaces#489",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getExtendedInterfaces() {\n    return extendedInterfaces;\n  }\n",
        "begin_line": 489,
        "end_line": 491,
        "comment": " Returns interfaces directly extended by an interface ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.getSuperClassConstructor#709",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 709,
        "end_line": 716,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.getInstanceType#924",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis;\n  }\n",
        "begin_line": 924,
        "end_line": 927,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.setInstanceType#933",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 933,
        "end_line": 935,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.hasInstanceType#940",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 940,
        "end_line": 942,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.addSubType#979",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 979,
        "end_line": 984,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionType.hasCachedValues#1016",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototypeSlot != null || super.hasCachedValues();\n  }\n",
        "begin_line": 1016,
        "end_line": 1019,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefineable.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.newParameter#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 122,
        "end_line": 127,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.build#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionBuilder.withParamsNode#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionBuilder.withReturnType#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "FunctionBuilder.build#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeName, isConstructor, isNativeType);\n  }\n",
        "begin_line": 158,
        "end_line": 162,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "BooleanType.toString#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "AllType.isAllType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setJSType#2195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 2195,
        "end_line": 2197,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setVarArgs#2249",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 2249,
        "end_line": 2251,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setOptionalArg#2267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 2267,
        "end_line": 2269,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.getTypeRegistry#1055",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 1055,
        "end_line": 1061,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1966
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.shouldTraverse#130",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 130,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.196
        },
        "num_failing_tests": 65
    },
    {
        "name": "NodeUtil.isStatementBlock#1746",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 1746,
        "end_line": 1748,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1955
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeUtil.functionCallHasSideEffects#986",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Math.floor has no sideeffects.\n      // TODO(nicksantos): This is a terrible terrible hack, until\n      // I create a definitionprovider that understands namespacing.\n      if (nameNode.getFirstChild().getType() == Token.NAME) {\n        if (\"Math.floor\".equals(nameNode.getQualifiedName())) {\n          return false;\n        }\n      }\n\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 986,
        "end_line": 1043,
        "comment": "\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.195
        },
        "num_failing_tests": 31
    },
    {
        "name": "Compiler.initCompilerOptionsIfTesting#1309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initCompilerOptionsIfTesting()",
        "snippet": "  void initCompilerOptionsIfTesting() {\n    if (options == null) {\n      // initialization for tests that don't initialize the compiler\n      // by the normal mechanisms.\n      initOptions(new CompilerOptions());\n    }\n  }\n",
        "begin_line": 1309,
        "end_line": 1315,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1949
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processUnaryExpression#934",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processUnaryExpression(com.google.javascript.jscomp.mozilla.rhino.ast.UnaryExpression)",
        "snippet": "    @Override\n    Node processUnaryExpression(UnaryExpression exprNode) {\n      int type = transformTokenType(exprNode.getType());\n      Node operand = transform(exprNode.getOperand());\n      if (type == Token.NEG && operand.getType() == Token.NUMBER) {\n        operand.setDouble(-operand.getDouble());\n        return operand;\n      } else {\n        if (type == Token.DELPROP &&\n            !(operand.getType() == Token.GETPROP ||\n              operand.getType() == Token.GETELEM ||\n              operand.getType() == Token.NAME)) {\n          String msg =\n              \"Invalid delete operand. Only properties can be deleted.\";\n          errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);\n        } else  if (type == Token.INC || type == Token.DEC) {\n          if (!validAssignmentTarget(operand)) {\n            String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";\n            errorReporter.error(\n                msg,\n                sourceName,\n                operand.getLineno(), \"\", 0);\n          }\n        }\n\n        Node node = newNode(type, operand);\n        if (exprNode.isPostfix()) {\n          node.putBooleanProp(Node.INCRDECR_PROP, true);\n        }\n        return node;\n      }\n    }\n",
        "begin_line": 934,
        "end_line": 970,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1944
        },
        "num_failing_tests": 22
    },
    {
        "name": "LoggerErrorManager.LoggerErrorManager#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.LoggerErrorManager(com.google.javascript.jscomp.MessageFormatter, java.util.logging.Logger)",
        "snippet": "  public LoggerErrorManager(MessageFormatter formatter, Logger logger) {\n    this.formatter = formatter;\n    this.logger = logger;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * Creates an instance.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1939
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.Compiler#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler()",
        "snippet": "  public Compiler() {\n    this((PrintStream) null);\n  }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to its logger.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1939
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.initOptions#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = composedGuards;\n  }\n",
        "begin_line": 227,
        "end_line": 290,
        "comment": "\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1939
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.reserveName#486",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.reserveName(java.lang.String)",
        "snippet": "    private void reserveName(String name) {\n      nameUsage.setCount(name, 0, 1);\n    }\n",
        "begin_line": 486,
        "end_line": 488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1923
        },
        "num_failing_tests": 60
    },
    {
        "name": "DefinitionsRemover.VarDefinition#372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.VarDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    VarDefinition(Node node, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n      Preconditions.checkArgument(node.hasChildren(),\n          \"VAR Declaration of %sshould be assigned a value.\", node.getString());\n      name = node;\n    }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.192
        },
        "num_failing_tests": 32
    },
    {
        "name": "DefinitionsRemover.getLValue#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return name;\n    }\n",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.192
        },
        "num_failing_tests": 32
    },
    {
        "name": "DefinitionsRemover.getRValue#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.VarDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return name.getFirstChild();\n    }\n",
        "begin_line": 396,
        "end_line": 399,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.192
        },
        "num_failing_tests": 32
    },
    {
        "name": "Compiler.getErrorCount#1848",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 1848,
        "end_line": 1850,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1914
        },
        "num_failing_tests": 66
    },
    {
        "name": "Normalize.visit#171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Note: Constant properties annotations are not propagated.\n      if (n.getType() == Token.NAME) {\n        if (n.getString().isEmpty()) {\n          return;\n        }\n\n        JSDocInfo info = null;\n        // Find the JSDocInfo for a top level variable.\n        Var var = t.getScope().getVar(n.getString());\n        if (var != null) {\n          info = var.getJSDocInfo();\n        }\n\n        boolean shouldBeConstant =\n            (info != null && info.isConstant()) ||\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent);\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (shouldBeConstant && !isMarkedConstant) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 171,
        "end_line": 202,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1912
        },
        "num_failing_tests": 59
    },
    {
        "name": "CodingConventions.isExported#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return nextConvention.isExported(name, local);\n    }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1908
        },
        "num_failing_tests": 48
    },
    {
        "name": "CodingConventions.isExported#265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.isExported(java.lang.String, boolean)",
        "snippet": "    @Override\n    public boolean isExported(String name, boolean local) {\n      return local && name.startsWith(\"$super\");\n    }\n",
        "begin_line": 265,
        "end_line": 268,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1908
        },
        "num_failing_tests": 48
    },
    {
        "name": "Node.getString#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "    @Override\n    public String getString() {\n      return this.str;\n    }\n",
        "begin_line": 311,
        "end_line": 314,
        "comment": "\n     * returns the string content.\n     * @return non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1902
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processName#717",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }\n",
        "begin_line": 717,
        "end_line": 720,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1901
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processName#722",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name, boolean)",
        "snippet": "    Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }\n",
        "begin_line": 722,
        "end_line": 734,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1901
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.isReservedKeyword#739",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isReservedKeyword(java.lang.String)",
        "snippet": "    private boolean isReservedKeyword(String identifier) {\n      return reservedKeywords != null && reservedKeywords.contains(identifier);\n    }\n",
        "begin_line": 739,
        "end_line": 741,
        "comment": "\n     * @return Whether the\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1901
        },
        "num_failing_tests": 66
    },
    {
        "name": "MakeDeclaredNamesUnique.getReplacementName#474",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.getReplacementName(java.lang.String)",
        "snippet": "    @Override\n    public String getReplacementName(String oldName) {\n      return declarations.get(oldName);\n    }\n",
        "begin_line": 474,
        "end_line": 477,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1901
        },
        "num_failing_tests": 60
    },
    {
        "name": "MakeDeclaredNamesUnique.MakeDeclaredNamesUnique#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.MakeDeclaredNamesUnique()",
        "snippet": "  MakeDeclaredNamesUnique() {\n    this(new ContextualRenamer());\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1901
        },
        "num_failing_tests": 60
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenamer#431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.ContextualRenamer()",
        "snippet": "    ContextualRenamer() {\n      this.global = true;\n      nameUsage = HashMultiset.create();\n    }\n",
        "begin_line": 431,
        "end_line": 434,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.19
        },
        "num_failing_tests": 60
    },
    {
        "name": "IRFactory.newStringNode#1283",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
        "snippet": "  private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1283,
        "end_line": 1285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.19
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getLastChild#639",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 639,
        "end_line": 641,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1899
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.processAstRoot#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = newNode(Token.SCRIPT);\n      for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode)child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 438,
        "end_line": 446,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1898
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.isDirective#474",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) return false;\n\n      int nType = n.getType();\n      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 474,
        "end_line": 481,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1898
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getChildCount#1542",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "  public int getChildCount() {\n    int c = 0;\n    for (Node n = first; n != null; n = n.next)\n      c++;\n\n    return c;\n  }\n",
        "begin_line": 1542,
        "end_line": 1548,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1898
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.chain#450",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.chain(com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    @Override\n    public PropListItem chain(PropListItem next) {\n      return new IntPropListItem(getType(), intValue, next);\n    }\n",
        "begin_line": 450,
        "end_line": 453,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getNext#643",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "  public Node getNext() {\n    return next;\n  }\n",
        "begin_line": 643,
        "end_line": 645,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.clonePropsFrom#857",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead == null,\n        \"Node has existing properties.\");\n    this.propListHead = other.propListHead;\n    return this;\n  }\n",
        "begin_line": 857,
        "end_line": 862,
        "comment": "\n   * Clone the properties from the provided node without copying\n   * the property object.  The recieving node may not have any\n   * existing properties.\n   * @param other The node to clone properties from.\n   * @return this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.removeProp#864",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 864,
        "end_line": 869,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.removeProp#877",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.getType() == propType) {\n      return item.getNext();\n    } else {\n      PropListItem result = removeProp(item.getNext(), propType);\n      if (result != item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 877,
        "end_line": 890,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getLineno#1282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "  public int getLineno() {\n    return extractLineno(sourcePosition);\n  }\n",
        "begin_line": 1282,
        "end_line": 1284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setCharno#1309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "  public void setCharno(int charno) {\n      sourcePosition = mergeLineCharNo(getLineno(), charno);\n  }\n",
        "begin_line": 1309,
        "end_line": 1311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.extractLineno#1346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "  protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo >>> COLUMN_BITS;\n    }\n  }\n",
        "begin_line": 1346,
        "end_line": 1352,
        "comment": "\n   * Extracts the line number and character number from a merged line char\n   * number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getParent#1460",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "  public Node getParent() {\n    return parent;\n  }\n",
        "begin_line": 1460,
        "end_line": 1462,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getJsDocBuilderForNode#2199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "  public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }\n",
        "begin_line": 2199,
        "end_line": 2201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "ParserRunner.createConfig#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean, java.util.Set<java.lang.String>)",
        "snippet": "  public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword,\n                                    Set<String> extraAnnotationNames) {\n    initResourceConfig();\n    Set<String> effectiveAnnotationNames;\n    if (extraAnnotationNames == null) {\n      effectiveAnnotationNames = annotationNames;\n    } else {\n      effectiveAnnotationNames = new HashSet<String>(annotationNames);\n      effectiveAnnotationNames.addAll(extraAnnotationNames);\n    }\n    return new Config(effectiveAnnotationNames, suppressionNames,\n        isIdeMode, languageMode, acceptConstKeyword);\n  }\n",
        "begin_line": 60,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "ParserRunner.initResourceConfig#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
        "snippet": "  private static synchronized void initResourceConfig() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    ResourceBundle config = ResourceBundle.getBundle(configResource);\n    annotationNames = extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames = extractList(config.getString(\"jsdoc.suppressions\"));\n  }\n",
        "begin_line": 76,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "ParserRunner.extractList#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
        "snippet": "  private static Set<String> extractList(String configProp) {\n    String[] names = configProp.split(\",\");\n    Set<String> trimmedNames = Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "ParserRunner.parse#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static Node parse(StaticSourceFile sourceFile,\n                           String sourceString,\n                           Config config,\n                           ErrorReporter errorReporter,\n                           Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode == LanguageMode.ECMASCRIPT3);\n\n    if (config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3) {\n      // Do our own identifier check for ECMASCRIPT 5\n      compilerEnv.setReservedKeywordAsIdentifier(true);\n      compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n    }\n\n    if (config.isIdeMode) {\n      compilerEnv.setAllowMemberExprAsFunctionName(true);\n    }\n    compilerEnv.setIdeMode(config.isIdeMode);\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n      logger.info(\n          \"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceFile, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return root;\n  }\n",
        "begin_line": 104,
        "end_line": 148,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceString Source code from the file.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.parseDirectives#457",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 457,
        "end_line": 472,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * Ecma-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.IRFactory#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.sourceFile = sourceFile;\n\n    // Sometimes this will be null in tests.\n    this.sourceName = sourceFile == null ? null : sourceFile.getName();\n\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode = createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        // Reserved words are handled by the Rhino parser.\n        reservedKeywords = null;\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }\n",
        "begin_line": 121,
        "end_line": 151,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.createTemplateNode#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = new Node(Token.SCRIPT);\n    templateNode.setStaticSourceFile(sourceFile);\n    return templateNode;\n  }\n",
        "begin_line": 156,
        "end_line": 161,
        "comment": " This reduces the cost of these properties to O(nodes) to O(files).",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.transformTree#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot, com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == CommentType.JSDOC &&\n            !comment.isParsed()) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n        } else if (comment.getCommentType() == CommentType.BLOCK) {\n          irFactory.handleBlockComment(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }\n",
        "begin_line": 163,
        "end_line": 186,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.setFileOverviewJsDoc#188",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
        "snippet": "  private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we've seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();\n    if (rootNodeJsDoc != null) {\n      irNode.setJSDocInfo(rootNodeJsDoc);\n      rootNodeJsDoc.setAssociatedNode(irNode);\n    }\n\n    if (fileOverviewInfo != null) {\n      if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n      fileOverviewInfo.setAssociatedNode(irNode);\n    }\n  }\n",
        "begin_line": 188,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.handleJsDoc#257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode, com.google.javascript.rhino.Node)",
        "snippet": "  private JSDocInfo handleJsDoc(AstNode node, Node irNode) {\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n      comment.setParsed(true);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        return jsDocParser.retrieveAndResetParsedJSDocInfo();\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 257,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.transform#269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    Node irNode = justTransform(node);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 269,
        "end_line": 277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.setSourceInfo#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private void setSourceInfo(Node irNode, AstNode node) {\n    if (irNode.getLineno() == -1) {\n      // If we didn't already set the line, then set it now. This avoids\n      // cases like ParenthesizedExpression where we just return a previous\n      // node, but don't want the new node to get its parent's line number.\n      int lineno = node.getLineno();\n      irNode.setLineno(lineno);\n      int charno = position2charno(node.getAbsolutePosition());\n      irNode.setCharno(charno);\n      maybeSetLengthFrom(irNode, node);\n    }\n  }\n",
        "begin_line": 310,
        "end_line": 321,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.maybeSetLengthFrom#357",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeSetLengthFrom(com.google.javascript.rhino.Node, com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private void maybeSetLengthFrom(Node node, AstNode source) {\n    if (config.isIdeMode) {\n      node.setLength(source.getLength());\n    }\n  }\n",
        "begin_line": 357,
        "end_line": 361,
        "comment": " Set the length on the node if we're in IDE mode.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.position2charno#363",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int lineIndex = sourceString.lastIndexOf('\\n', position);\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 363,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.justTransform#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 373,
        "end_line": 375,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "IRFactory.newNode#1263",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1263,
        "end_line": 1265,
        "comment": " Simple helper to create nodes and set the initial node properties.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Config.Config#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.suppressionNames = suppressionNames;\n    this.isIdeMode = isIdeMode;\n    this.languageMode = languageMode;\n    this.acceptConstKeyword = acceptConstKeyword;\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Config.buildAnnotationNames#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 88,
        "end_line": 101,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrepareAst.PrepareAnnotations#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.PrepareAnnotations(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    PrepareAnnotations(AbstractCompiler compiler) {\n      this.convention = compiler.getCodingConvention();\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrepareAst.shouldTraverse#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.OBJECTLIT) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }\n",
        "begin_line": 140,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrepareAst.PrepareAst#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrepareAst.PrepareAst#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler = compiler;\n    this.checkOnly = checkOnly;\n  }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "PrepareAst.process#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don't perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren't valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn't be applied after inlining has been\n      // performed.\n      if (externs != null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations(compiler));\n      }\n      if (root != null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations(compiler));\n      }\n    }\n  }\n",
        "begin_line": 55,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "JsAst.getAstRoot#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      parse(compiler);\n      root.setInputId(inputId);\n    }\n    return root;\n  }\n",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "JsAst.parse#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void parse(AbstractCompiler compiler) {\n    try {\n      logger_.fine(\"Parsing: \" + sourceFile.getName());\n      root = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n    if (root == null || compiler.hasHaltingErrors()) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = new Node(Token.SCRIPT);\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
        "begin_line": 84,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.acceptEcmaScript5#1743",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptEcmaScript5()",
        "snippet": "  @Override\n  public boolean acceptEcmaScript5() {\n    switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1743,
        "end_line": 1751,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1335,
        "end_line": 1338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.prepareAst#1687",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void prepareAst(Node root) {\n    CompilerPass pass = new PrepareAst(this);\n    pass.process(null, root);\n  }\n",
        "begin_line": 1687,
        "end_line": 1691,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.acceptConstKeyword#1757",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
        "snippet": "  @Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }\n",
        "begin_line": 1757,
        "end_line": 1760,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.getParserConfig#1762",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 1762,
        "end_line": 1787,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.StringNode#291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 291,
        "end_line": 297,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.ObjectPropListItem#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.ObjectPropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    ObjectPropListItem(int propType, Object objectValue, PropListItem next) {\n      super(propType, next);\n      this.objectValue = objectValue;\n    }\n",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getObjectValue#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.getObjectValue()",
        "snippet": "    @Override\n    public Object getObjectValue() {\n      return objectValue;\n    }\n",
        "begin_line": 408,
        "end_line": 411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getType#377",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getType()",
        "snippet": "    @Override\n    public int getType() {\n      return propType;\n    }\n",
        "begin_line": 377,
        "end_line": 380,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getNext#382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getNext()",
        "snippet": "    @Override\n    public PropListItem getNext() {\n      return next;\n    }\n",
        "begin_line": 382,
        "end_line": 385,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.newString#611",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 611,
        "end_line": 613,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getType#623",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "  public int getType() {\n    return type;\n  }\n",
        "begin_line": 623,
        "end_line": 625,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getFirstChild#635",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "  public Node getFirstChild() {\n    return first;\n  }\n",
        "begin_line": 635,
        "end_line": 637,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.addChildToBack#703",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 703,
        "end_line": 714,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.lookupProperty#841",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "  @VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x = propListHead;\n    while (x != null && propType != x.getType()) {\n      x = x.getNext();\n    }\n    return x;\n  }\n",
        "begin_line": 841,
        "end_line": 848,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.putProp#928",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "  public void putProp(int propType, Object value) {\n    if (propType == SOURCENAME_PROP) {\n      putProp(\n          STATIC_SOURCE_FILE, new SimpleSourceFile((String) value, false));\n      return;\n    }\n\n    removeProp(propType);\n    if (value != null) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 928,
        "end_line": 939,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.createProp#952",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, Object value, PropListItem next) {\n    return new ObjectPropListItem(propType, value, next);\n  }\n",
        "begin_line": 952,
        "end_line": 954,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setStaticSourceFile#1236",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile)",
        "snippet": "  public void setStaticSourceFile(StaticSourceFile file) {\n    this.putProp(STATIC_SOURCE_FILE, file);\n  }\n",
        "begin_line": 1236,
        "end_line": 1238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getSourceFileName#1245",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSourceFileName()",
        "snippet": "  public String getSourceFileName() {\n    StaticSourceFile file = getStaticSourceFile();\n    return file == null ? null : file.getName();\n  }\n",
        "begin_line": 1245,
        "end_line": 1248,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getStaticSourceFile#1251",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getStaticSourceFile()",
        "snippet": "  public StaticSourceFile getStaticSourceFile() {\n    return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n  }\n",
        "begin_line": 1251,
        "end_line": 1253,
        "comment": " Returns the source file associated with this input. May be null ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setInputId#1258",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setInputId(com.google.javascript.rhino.InputId)",
        "snippet": "  public void setInputId(InputId inputId) {\n    this.putProp(INPUT_ID, inputId);\n  }\n",
        "begin_line": 1258,
        "end_line": 1260,
        "comment": "\n   * @param inputId\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getInputId#1265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getInputId()",
        "snippet": "  public InputId getInputId() {\n    return ((InputId) this.getProp(INPUT_ID));\n  }\n",
        "begin_line": 1265,
        "end_line": 1267,
        "comment": "\n   * @return The Id of the CompilerInput associated with this Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getCharno#1286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "  public int getCharno() {\n    return extractCharno(sourcePosition);\n  }\n",
        "begin_line": 1286,
        "end_line": 1288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setLineno#1301",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "  public void setLineno(int lineno) {\n      int charno = getCharno();\n      if (charno == -1) {\n        charno = 0;\n      }\n      sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 1301,
        "end_line": 1307,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.mergeLineCharNo#1332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "  protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno < 0 || charno < 0) {\n      return -1;\n    } else if ((charno & ~COLUMN_MASK) != 0) {\n      return lineno << COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n    }\n  }\n",
        "begin_line": 1332,
        "end_line": 1340,
        "comment": "\n   * Merges the line number and character number in one integer. The Character\n   * number takes the first 12 bits and the line number takes the rest. If\n   * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n   * adjusted to <code>2<sup>12</sup>-1</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.getJSDocInfo#2233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }\n",
        "begin_line": 2233,
        "end_line": 2235,
        "comment": "\n   * Get the {@link JSDocInfo} attached to this node.\n   * @return the information or {@code null} if no JSDoc is attached to this\n   * node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.getCode#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\n   * Gets all the code in this source file.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.setIsExtern#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setIsExtern(boolean)",
        "snippet": "  void setIsExtern(boolean newVal) {\n    isExternFile = newVal;\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": " Sets that this is an extern. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.NodeTraversal#221",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.traverse#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      inputId = NodeUtil.getInputId(root);\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 271,
        "end_line": 282,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.traverse#452",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 452,
        "end_line": 456,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "NodeTraversal.getSourceName#647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = n.getSourceFileName();\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 647,
        "end_line": 650,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "JsAst.JsAst#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.inputId = new InputId(sourceFile.getName());\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "JsAst.getInputId#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return inputId;\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "JsAst.getSourceFile#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return sourceFile;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSSourceFile.getCode#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.getCode()",
        "snippet": "  @Override\n  public String getCode() throws IOException {\n    return referenced.getCode();\n  }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.getCodingConvention#1252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getCodingConvention()",
        "snippet": "  public CodingConvention getCodingConvention() {\n    return codingConvention;\n  }\n",
        "begin_line": 1252,
        "end_line": 1254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerInput.CompilerInput#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, boolean isExtern) {\n    this(ast, ast.getInputId(), isExtern);\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerInput.CompilerInput#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, com.google.javascript.rhino.InputId, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {\n    this.ast = ast;\n    this.id = inputId;\n\n    // TODO(nicksantos): Add a precondition check here. People are passing\n    // in null, but they should not be.\n    if (ast != null && ast.getSourceFile() != null) {\n      ast.getSourceFile().setIsExtern(isExtern);\n    }\n  }\n",
        "begin_line": 77,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerInput.CompilerInput#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile)",
        "snippet": "  public CompilerInput(JSSourceFile file) {\n    this(file, false);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerInput.CompilerInput#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.JSSourceFile, boolean)",
        "snippet": "  public CompilerInput(JSSourceFile file, boolean isExtern) {\n    this(new JsAst(file), isExtern);\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerInput.getAstRoot#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    Node root = ast.getAstRoot(compiler);\n    // The root maybe null if the AST can not be created.\n    if (root != null) {\n      Preconditions.checkState(root.getType() == Token.SCRIPT);\n      Preconditions.checkNotNull(root.getInputId());\n    }\n    return root;\n  }\n",
        "begin_line": 119,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.getCodingConvention#1731",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCodingConvention()",
        "snippet": "  @Override\n  public CodingConvention getCodingConvention() {\n    CodingConvention convention = options.getCodingConvention();\n    convention = convention != null ? convention : defaultCodingConvention;\n    return convention;\n  }\n",
        "begin_line": 1731,
        "end_line": 1736,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.isIdeMode#1738",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }\n",
        "begin_line": 1738,
        "end_line": 1741,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.hasHaltingErrors#1859",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 1859,
        "end_line": 1862,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "BasicErrorManager.getErrorCount#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  @Override\n  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1897
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.IntPropListItem#430",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue = intValue;\n    }\n",
        "begin_line": 430,
        "end_line": 433,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.AbstractPropListItem#372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    AbstractPropListItem(int propType, PropListItem next) {\n      this.propType = propType;\n      this.next = next;\n    }\n",
        "begin_line": 372,
        "end_line": 375,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.Node#456",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 456,
        "end_line": 460,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.putBooleanProp#941",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 941,
        "end_line": 943,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.putIntProp#945",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 945,
        "end_line": 950,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.createProp#956",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }\n",
        "begin_line": 956,
        "end_line": 958,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Node.setIsSyntheticBlock#2284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "  public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }\n",
        "begin_line": 2284,
        "end_line": 2286,
        "comment": "\n   * Sets whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "InputId.InputId#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.InputId(java.lang.String)",
        "snippet": "  public InputId(String id) {\n    this.id = id;\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "InputId.hashCode#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return id.hashCode();\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup>)",
        "snippet": "  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressableGroups) {\n    for (Map.Entry<String, DiagnosticGroup> entry :\n             suppressableGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }\n",
        "begin_line": 40,
        "end_line": 49,
        "comment": "\n   * The suppressable groups, indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "SuppressDocWarningsGuard.getPriority#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
        "snippet": "  @Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }\n",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroups.getRegisteredGroups#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
        "snippet": "  protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": " Get the registered diagnostic groups, indexed by name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroupWarningsGuard.enables#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroup.matches#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroup.getTypes#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
        "snippet": "  Collection<DiagnosticType> getTypes() {\n    return types;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n   * Returns an iterator over all the types in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "ComposeWarningsGuard.compare#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff = a.getPriority() - b.getPriority();\n      if (priorityDiff != 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }\n",
        "begin_line": 60,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "ComposeWarningsGuard.addGuard#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(((ComposeWarningsGuard) guard).guards.descendingSet());\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }\n",
        "begin_line": 86,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "ComposeWarningsGuard.addGuards#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "ComposeWarningsGuard.enables#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 139,
        "end_line": 150,
        "comment": "\n   * Determines whether this guard will \"elevate\" the status of any disabled\n   * diagnostic type in the group to a warning or an error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.enables#1013",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean enables(DiagnosticGroup type) {\n    return warningsGuard.enables(type);\n  }\n",
        "begin_line": 1013,
        "end_line": 1015,
        "comment": "\n   * Whether the warnings guard in this Options object enables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.getWarningsGuard#1032",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#1211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 1211,
        "end_line": 1213,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.getLanguageIn#1328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
        "snippet": "  public LanguageMode getLanguageIn() {\n    return languageIn;\n  }\n",
        "begin_line": 1328,
        "end_line": 1330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerInput.getInputId#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return id;\n  }\n",
        "begin_line": 97,
        "end_line": 100,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.setErrorManager#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 208,
        "end_line": 212,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.createMessageFormatter#218",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 218,
        "end_line": 221,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "CheckLevel.isOn#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "AbstractMessageFormatter.setColorize#36",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1896
        },
        "num_failing_tests": 66
    },
    {
        "name": "ObjectType.createDelegateSuffix#224",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
        "snippet": "  public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\n   * Creates a suffix for a proxy delegate.\n   * @see #getNormalizedReferenceName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ScriptRuntime.getMessage0#420",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId)\n    {\n        return getMessage(messageId, null);\n    }\n",
        "begin_line": 420,
        "end_line": 423,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ScriptRuntime.getMessage#456",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "signature": "com.google.javascript.rhino.ScriptRuntime.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    public static String getMessage(String messageId, Object[] arguments)\n    {\n        final String defaultResource\n            = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n        Context cx = Context.getCurrentContext();\n        Locale locale = cx != null ? cx.getLocale() : Locale.getDefault();\n\n        // ResourceBundle does cacheing.\n        ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n        String formatString;\n        try {\n            formatString = rb.getString(messageId);\n        } catch (java.util.MissingResourceException mre) {\n            throw new RuntimeException\n                (\"no message resource found for message property \"+ messageId);\n        }\n\n        /*\n         * It's OK to format the string, even if 'arguments' is null;\n         * we need to format it anyway, to make double ''s collapse to\n         * single 's.\n         */\n        // TODO: MessageFormat is not available on pJava\n        MessageFormat formatter = new MessageFormat(formatString);\n        return formatter.format(arguments);\n    }\n",
        "begin_line": 456,
        "end_line": 483,
        "comment": " OPT there's a noticable delay for the first error!  Maybe it'd\n     * make sense to use a ListResourceBundle instead of a properties\n     * file to avoid (synchronized) text parsing.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "Context.getCurrentContext#399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "class_name": "com.google.javascript.rhino.Context",
        "signature": "com.google.javascript.rhino.Context.getCurrentContext()",
        "snippet": "    public static Context getCurrentContext() {\n        return threadContexts.get();\n    }\n",
        "begin_line": 399,
        "end_line": 401,
        "comment": "\n     * Get the current Context.\n     *\n     * The current Context is per-thread; this method looks up\n     * the Context associated with the current thread. <p>\n     *\n     * @return the Context associated with the current thread, or\n     *         null if no context is associated with the current\n     *         thread.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "WarningsGuard.Priority#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.Priority.Priority(int)",
        "snippet": "    Priority(int value) {\n      this.value = value;\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "WarningsGuard.getPriority#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
        "snippet": "  protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n   * The priority in which warnings guards are applied. Lower means the\n   * guard will be applied sooner. Expressed on a scale of 1 to 100.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#143",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#158",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private Pattern replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.of(\n\n        // Extra @fileoverview\n        replacePlaceHolders(\n            ScriptRuntime.getMessage0(\"msg.jsdoc.fileoverview.extra\")),\n        EXTRA_FILEOVERVIEW,\n\n        // Trailing comma\n        replacePlaceHolders(\n            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n              .getMessage0(\"msg.extra.trailing.comma\")),\n        TRAILING_COMMA,\n\n        // Duplicate parameter\n        replacePlaceHolders(\n            com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime\n              .getMessage0(\"msg.dup.parms\")),\n        DUPLICATE_PARAM,\n\n        // Unknown @annotations.\n        replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n        BAD_JSDOC_ANNOTATION,\n\n        // Type annotation errors.\n        Pattern.compile(\"^Bad type annotation.*\"),\n        TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 73,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.jscomp.mozilla.rhino.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ProcessTweaks.TweakFunction#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String)",
        "snippet": "    TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ProcessTweaks.TweakFunction#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ProcessTweaks.TweakFunction#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }\n",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ProcessTweaks.TweakFunction#136",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ProcessTweaks.TweakFunction#140",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name = name;\n      this.expectedTypeName = expectedTypeName;\n      this.validNodeTypeA = validNodeTypeA;\n      this.validNodeTypeB = validNodeTypeB;\n      this.registerFunction = registerFunction;\n    }\n",
        "begin_line": 140,
        "end_line": 148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ProcessTweaks.getName#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.getName()",
        "snippet": "    String getName() {\n      return name;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "PassFactory.PassFactory#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticType.warning#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticType.disabled#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticType.equals#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object type) {\n    return type instanceof DiagnosticType &&\n        ((DiagnosticType) type).key.equals(key);\n  }\n",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticType.hashCode#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return key.hashCode();\n  }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroups.DiagnosticGroups#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
        "snippet": "  public DiagnosticGroups() {}\n",
        "begin_line": 31,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroups.registerGroup#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticType ... types) {\n    DiagnosticGroup group = new DiagnosticGroup(name, types);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroups.registerGroup#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup ... groups) {\n    DiagnosticGroup group = new DiagnosticGroup(name, groups);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  DiagnosticGroup(String name, DiagnosticType ...types) {\n    this.name = name;\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this(null, types);\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.name = name;\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 88,
        "end_line": 97,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ComposeWarningsGuard.GuardComparator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.GuardComparator(java.util.Map<com.google.javascript.jscomp.WarningsGuard, java.lang.Integer>)",
        "snippet": "    private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) {\n      this.orderOfAddition = orderOfAddition;\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    addGuards(guards);\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.CompilerOptions#751",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Accepted language\n    languageIn = LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword = false;\n\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkSymbols = false;\n    checkShadowVars = CheckLevel.OFF;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkFunctions = CheckLevel.OFF;\n    checkMethods = CheckLevel.OFF;\n    checkDuplicateMessages = false;\n    allowLegacyJsMessages = false;\n    strictMessageReplacement = false;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkTypes = false;\n    tightenTypes = false;\n    checkTypedPropertyCalls = false;\n    reportMissingOverride = CheckLevel.OFF;\n    reportUnknownTypes = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.OFF;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n    extraAnnotationNames = null;\n\n    // Optimizations\n    foldConstants = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    assumeStrictThis = false;\n    assumeClosuresOnlyCaptureReferences = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedVars = false;\n    removeUnusedLocalVars = false;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    groupVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n    optimizeReturns = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    propertyAffinity = false;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    shadowVariables = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    collapseObjectLiterals = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    instrumentForCoverage = false;\n    instrumentForCoverageOnly = false;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    rewriteNewDateGoogNow = true;\n    removeAbstractMethods = true;\n    removeClosureAsserts = false;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    tweakProcessing = TweakProcessing.OFF;\n    tweakReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    instrumentationTemplate = null;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    cssRenamingMap = null;\n    processObjectPropertyString = false;\n    idGenerators = Collections.emptySet();\n    replaceStringsFunctionDescriptions = Collections.emptyList();\n    replaceStringsPlaceholderToken = \"\";\n    replaceStringsReservedStrings = Collections.emptySet();\n    propertyInvalidationErrors = Maps.newHashMap();\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    debugFunctionSideEffectsPath = null;\n    jsOutputFile = \"\";\n    externExports = false;\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n\n    // Debugging\n    aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n\n    operaCompoundAssignFix = true;\n  }\n",
        "begin_line": 751,
        "end_line": 898,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.setWarningLevel#1028",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "CompilerOptions.addWarningsGuard#1054",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    warningsGuard.addGuard(guard);\n  }\n",
        "begin_line": 1054,
        "end_line": 1056,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.Compiler#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
        "snippet": "  public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream = stream;\n  }\n",
        "begin_line": 190,
        "end_line": 193,
        "comment": "\n   * Creates n Compiler that reports errors and warnings to an output\n   * stream.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.addChangeHandler#1709",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 1709,
        "end_line": 1712,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "Compiler.getDiagnosticGroups#1803",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }\n",
        "begin_line": 1803,
        "end_line": 1805,
        "comment": "\n   * The warning classes that are available from the command-line, and\n   * are suppressable by the {@code @suppress} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodingConventions.Proxy#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.Proxy(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    protected Proxy(CodingConvention convention) {\n      this.nextConvention = convention;\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention()",
        "snippet": "  public ClosureCodingConvention() {\n    this(CodingConventions.getDefault());\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public ClosureCodingConvention(CodingConvention wrapped) {\n    super(wrapped);\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.Preloaded#365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String code) {\n      this(fileName, fileName, code);\n    }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.Preloaded#369",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }\n",
        "begin_line": 369,
        "end_line": 373,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.setCode#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.setOriginalPath#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
        "snippet": "  public void setOriginalPath(String originalPath) {\n    this.originalPath = originalPath;\n  }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.fromCode#324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return new Preloaded(fileName, code);\n  }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSSourceFile.fromCode#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static JSSourceFile fromCode(String fileName, String code) {\n    return new JSSourceFile(SourceFile.fromCode(fileName, code));\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "JSSourceFile.JSSourceFile#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "signature": "com.google.javascript.jscomp.JSSourceFile.JSSourceFile(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  private JSSourceFile(SourceFile referenced) {\n    super(referenced.getName());\n    this.referenced = referenced;\n  }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticType.error#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticType.make#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 88,
        "end_line": 92,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "DiagnosticType.DiagnosticType#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 97,
        "end_line": 103,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "CodingConventions.getDefault#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.getDefault()",
        "snippet": "  public static CodingConvention getDefault() {\n    return new DefaultCodingConvention();\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": " Gets the default coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 66
    },
    {
        "name": "Normalize.process#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    new NodeTraversal(\n        compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverseRoots(externs, root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    // It is important that removeDuplicateDeclarations runs after\n    // MakeDeclaredNamesUnique in order for catch block exception names to be\n    // handled properly. Specifically, catch block exception names are\n    // only valid within the catch block, but our currect Scope logic\n    // has no concept of this and includes it in the containing function\n    // (or global scope). MakeDeclaredNamesUnique makes the catch exception\n    // names unique so that removeDuplicateDeclarations() will properly handle\n    // cases where a function scope variable conflict with a exception name:\n    //   function f() {\n    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}\n    //      var e = 1; // f scope 'e'\n    //   }\n    // otherwise 'var e = 1' would be rewritten as 'e = 1'.\n    // TODO(johnlenz): Introduce a seperate scope for catch nodes.\n    removeDuplicateDeclarations(externs, root);\n    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n        .process(externs, root);\n\n    if (!compiler.getLifeCycleStage().isNormalized()) {\n      compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n    }\n  }\n",
        "begin_line": 118,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1895
        },
        "num_failing_tests": 59
    },
    {
        "name": "SourceFile.SourceFile#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  public SourceFile(String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      throw new IllegalArgumentException(\"a source must have a name\");\n    }\n    this.fileName = fileName;\n    // Starting point: offset 0 is at line 1.\n    this.lastOffset = 0;\n    this.lastLine = 1;\n  }\n",
        "begin_line": 86,
        "end_line": 94,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 66
    },
    {
        "name": "SourceFile.getName#181",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 181,
        "end_line": 184,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 66
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.SyntacticScopeCreator.RedeclarationHandler)",
        "snippet": "  SyntacticScopeCreator(\n      AbstractCompiler compiler, RedeclarationHandler redeclarationHandler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = redeclarationHandler;\n  }\n",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.enterScope#756",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      // Cause the scope to be created, which will cause duplicate\n      // to be found.\n      t.getScope();\n    }\n",
        "begin_line": 756,
        "end_line": 761,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.exitScope#763",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      // Nothing to do.\n    }\n",
        "begin_line": 763,
        "end_line": 766,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.shouldTraverse#768",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(\n        NodeTraversal nodeTraversal, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 768,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.visit#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.ScopeTicklingCallback.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Nothing to do.\n    }\n",
        "begin_line": 774,
        "end_line": 777,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.PropagateConstantAnnotationsOverVars#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.PropagateConstantAnnotationsOverVars(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    PropagateConstantAnnotationsOverVars(\n        AbstractCompiler compiler, boolean forbidChanges) {\n      this.compiler = compiler;\n      this.assertOnChange = forbidChanges;\n    }\n",
        "begin_line": 160,
        "end_line": 164,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.process#166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.PropagateConstantAnnotationsOverVars.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      new NodeTraversal(compiler, this).traverseRoots(externs, root);\n    }\n",
        "begin_line": 166,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.removeDuplicateDeclarations#628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.removeDuplicateDeclarations(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void removeDuplicateDeclarations(Node externs, Node root) {\n    Callback tickler = new ScopeTicklingCallback();\n    ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n        compiler, new DuplicateDeclarationHandler());\n    NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);\n    t.traverseRoots(externs, root);\n  }\n",
        "begin_line": 628,
        "end_line": 634,
        "comment": "\n   * Remove duplicate VAR declarations.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.hasChildren#631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChildren()",
        "snippet": "  public boolean hasChildren() {\n    return first != null;\n  }\n",
        "begin_line": 631,
        "end_line": 633,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 64
    },
    {
        "name": "Normalize.Normalize#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.Normalize(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  Normalize(AbstractCompiler compiler, boolean assertOnChange) {\n    this.compiler = compiler;\n    this.assertOnChange = assertOnChange;\n\n    // TODO(nicksantos): assertOnChange should only be true if the tree\n    // is normalized.\n  }\n",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1894
        },
        "num_failing_tests": 59
    },
    {
        "name": "Scope.getJSDocInfo#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getJSDocInfo()",
        "snippet": "    public JSDocInfo getJSDocInfo() {\n      return info;\n    }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "\n     * Gets the JSDocInfo for the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeTraversal.traverseRoots#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "  public void traverseRoots(List<Node> roots) {\n    if (roots.isEmpty()) {\n      return;\n    }\n\n    try {\n      Node scopeRoot = roots.get(0).getParent();\n      Preconditions.checkState(scopeRoot != null);\n\n      inputId = NodeUtil.getInputId(scopeRoot);\n      sourceName = \"\";\n      curNode = scopeRoot;\n      pushScope(scopeRoot);\n\n      for (Node root : roots) {\n        Preconditions.checkState(root.getParent() == scopeRoot);\n        traverseBranch(root, scopeRoot);\n      }\n\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 288,
        "end_line": 311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1884
        },
        "num_failing_tests": 60
    },
    {
        "name": "NodeTraversal.traverseRoots#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.rhino.Node...)",
        "snippet": "  public void traverseRoots(Node ... roots) {\n    traverseRoots(Lists.newArrayList(roots));\n  }\n",
        "begin_line": 284,
        "end_line": 286,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.188
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.annotateConstantsByConvention#349",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.annotateConstantsByConvention(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateConstantsByConvention(Node n, Node parent) {\n      Preconditions.checkState(\n          n.getType() == Token.NAME\n          || n.getType() == Token.STRING\n          || n.getType() == Token.GET\n          || n.getType() == Token.SET);\n\n      // There are only two cases where a string token\n      // may be a variable reference: The right side of a GETPROP\n      // or an OBJECTLIT key.\n      boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent);\n      boolean isProperty = isObjLitKey ||\n          (parent.getType() == Token.GETPROP &&\n           parent.getLastChild() == n);\n      if (n.getType() == Token.NAME || isProperty) {\n        boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (!isMarkedConstant &&\n            NodeUtil.isConstantByConvention(\n                compiler.getCodingConvention(), n, parent)) {\n          if (assertOnChange) {\n            String name = n.getString();\n            throw new IllegalStateException(\n                \"Unexpected const change.\\n\" +\n                \"  name: \"+ name + \"\\n\" +\n                \"  parent:\" + n.getParent().toStringTree());\n          }\n          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        }\n      }\n    }\n",
        "begin_line": 349,
        "end_line": 378,
        "comment": "\n     * Mark names and properties that are constants by convention.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1872
        },
        "num_failing_tests": 59
    },
    {
        "name": "NodeUtil.isConstantByConvention#2912",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isConstantByConvention(com.google.javascript.jscomp.CodingConvention, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent) {\n    String name = node.getString();\n    if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild()) {\n      return convention.isConstantKey(name);\n    } else if (isObjectLitKey(node, parent)) {\n      return convention.isConstantKey(name);\n    } else {\n      return convention.isConstant(name);\n    }\n  }\n",
        "begin_line": 2912,
        "end_line": 2923,
        "comment": " Whether the given name is constant by coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1872
        },
        "num_failing_tests": 59
    },
    {
        "name": "AbstractCompiler.isNormalizedObfuscated#287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalizedObfuscated()",
        "snippet": "    boolean isNormalizedObfuscated() {\n      return this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1872
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.NormalizeStatements#296",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.NormalizeStatements(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange) {\n      this.compiler = compiler;\n      this.assertOnChange = assertOnChange;\n    }\n",
        "begin_line": 296,
        "end_line": 299,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1871
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.shouldTraverse#309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      doStatementNormalizations(t, n, parent);\n\n      return true;\n    }\n",
        "begin_line": 309,
        "end_line": 314,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1871
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.extractForInitializer#495",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.extractForInitializer(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void extractForInitializer(\n        Node n, Node before, Node beforeParent) {\n\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        Node insertBefore = (before == null) ? c : before;\n        Node insertBeforeParent = (before == null) ? n : beforeParent;\n        switch (c.getType()) {\n          case Token.LABEL:\n            extractForInitializer(c, insertBefore, insertBeforeParent);\n            break;\n          case Token.FOR:\n            if (NodeUtil.isForIn(c)) {\n              Node first = c.getFirstChild();\n              if (first.getType() == Token.VAR) {\n                // Transform:\n                //    for (var a = 1 in b) {}\n                // to:\n                //    var a = 1; for (a in b) {};\n                Node newStatement = first;\n                // Clone just the node, to remove any initialization.\n                Node name = newStatement.getFirstChild().cloneNode();\n                first.getParent().replaceChild(first, name);\n                insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                reportCodeChange(\"FOR-IN var declaration\");\n              }\n            } else if (c.getFirstChild().getType() != Token.EMPTY) {\n              Node init = c.getFirstChild();\n              Node empty = new Node(Token.EMPTY);\n              empty.copyInformationFrom(c);\n              c.replaceChild(init, empty);\n\n              Node newStatement;\n              // Only VAR statements, and expressions are allowed,\n              // but are handled differently.\n              if (init.getType() == Token.VAR) {\n                newStatement = init;\n              } else {\n                newStatement = NodeUtil.newExpr(init);\n              }\n\n              insertBeforeParent.addChildBefore(newStatement, insertBefore);\n              reportCodeChange(\"FOR initializer\");\n            }\n            break;\n        }\n      }\n    }\n",
        "begin_line": 495,
        "end_line": 542,
        "comment": "\n     * Bring the initializers out of FOR loops.  These need to be placed\n     * before any associated LABEL nodes. This needs to be done from the top\n     * level label first so this is called as a pre-order callback (from\n     * shouldTraverse).\n     *\n     * @param n The node to inspect.\n     * @param before The node to insert the initializer before.\n     * @param beforeParent The parent of the node before which the initializer\n     *     will be inserted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1871
        },
        "num_failing_tests": 59
    },
    {
        "name": "Normalize.splitVarDeclarations#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.splitVarDeclarations(com.google.javascript.rhino.Node)",
        "snippet": "    private void splitVarDeclarations(Node n) {\n      for (Node next, c = n.getFirstChild(); c != null; c = next) {\n        next = c.getNext();\n        if (c.getType() == Token.VAR) {\n          if (assertOnChange && !c.hasChildren()) {\n            throw new IllegalStateException(\"Empty VAR node.\");\n          }\n\n          while (c.getFirstChild() != c.getLastChild()) {\n            Node name = c.getFirstChild();\n            c.removeChild(name);\n            Node newVar = new Node(\n                Token.VAR, name, n.getLineno(), n.getCharno());\n            n.addChildBefore(newVar, c);\n            reportCodeChange(\"VAR with multiple children\");\n          }\n        }\n      }\n    }\n",
        "begin_line": 552,
        "end_line": 570,
        "comment": "\n     * Split a var node such as:\n     *   var a, b;\n     * into individual statements:\n     *   var a;\n     *   var b;\n     * @param n The whose children we should inspect.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1871
        },
        "num_failing_tests": 59
    },
    {
        "name": "AstValidator.validateExpression#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExpression(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateExpression(Node n) {\n    switch (n.getType()) {\n      // Childless expressions\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        validateChildless(n);\n        return;\n\n      // General uniary ops\n      case Token.DELPROP:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.INC:\n      case Token.DEC:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.BITNOT:\n        validateUnaryOp(n);\n        return;\n\n      // General binary ops\n      case Token.COMMA:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n        validateBinaryOp(n);\n        return;\n\n      // Assignments\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        validateAssignmentExpression(n);\n        return;\n\n      case Token.HOOK:\n        validateTrinaryOp(n);\n        return;\n\n      // Node types that require special handling\n      case Token.STRING:\n        validateString(n);\n        return;\n\n      case Token.NUMBER:\n        validateNumber(n);\n        return;\n\n      case Token.NAME:\n        validateName(n);\n        return;\n\n      case Token.GETELEM:\n        validateBinaryOp(n);\n        return;\n\n      case Token.GETPROP:\n        validateGetProp(n);\n        return;\n\n      case Token.ARRAYLIT:\n        validateArrayLit(n);\n        return;\n\n      case Token.OBJECTLIT:\n        validateObjectLit(n);\n        return;\n\n      case Token.REGEXP:\n        validateRegExpLit(n);\n        return;\n\n      case Token.CALL:\n        validateCall(n);\n        return;\n\n      case Token.NEW:\n        validateNew(n);\n        return;\n\n      case Token.FUNCTION:\n        validateFunctionExpression(n);\n        return;\n\n      default:\n        violation(\"Expected expression but was \"\n            + Node.tokenToName(n.getType()), n);\n    }\n  }\n",
        "begin_line": 155,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1866
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateCall#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCall(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateCall(Node n) {\n    validateNodeType(Token.CALL, n);\n    validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateExpression(c);\n    }\n  }\n",
        "begin_line": 373,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1866
        },
        "num_failing_tests": 48
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention()",
        "snippet": "  public GoogleCodingConvention() {\n    this(new ClosureCodingConvention());\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": " By default, decorate the ClosureCodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1862
        },
        "num_failing_tests": 60
    },
    {
        "name": "GoogleCodingConvention.GoogleCodingConvention#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.GoogleCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public GoogleCodingConvention(CodingConvention convention) {\n    super(convention);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": " Decorates a wrapped CodingConvention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1862
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.init#295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n      CompilerOptions options) {\n    init(Lists.<JSSourceFile>newArrayList(externs),\n        Lists.<JSSourceFile>newArrayList(inputs), options);\n  }\n",
        "begin_line": 295,
        "end_line": 299,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1859
        },
        "num_failing_tests": 60
    },
    {
        "name": "AbstractCompiler.isNormalized#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.isNormalized()",
        "snippet": "    boolean isNormalized() {\n      return this == NORMALIZED || this == NORMALIZED_OBFUSCATED;\n    }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1851
        },
        "num_failing_tests": 59
    },
    {
        "name": "Node.getIntProp#912",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
        "snippet": "  public int getIntProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return 0;\n    }\n    return item.getIntValue();\n  }\n",
        "begin_line": 912,
        "end_line": 918,
        "comment": "\n   * Returns the integer value for the property, or 0 if the property\n   * is not defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1848
        },
        "num_failing_tests": 63
    },
    {
        "name": "NodeUtil.isHoistedFunctionDeclaration#1959",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isHoistedFunctionDeclaration(Node n) {\n    return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);\n  }\n",
        "begin_line": 1959,
        "end_line": 1963,
        "comment": "\n   * Is this node a hoisted function declaration? A function declaration in the\n   * scope root is hoisted to the top of the scope.\n   * See {@link #isFunctionDeclaration}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1848
        },
        "num_failing_tests": 50
    },
    {
        "name": "Scope.getVar#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 538,
        "end_line": 547,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1842
        },
        "num_failing_tests": 59
    },
    {
        "name": "AbstractCompiler.getLifeCycleStage#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.getLifeCycleStage()",
        "snippet": "  LifeCycleStage getLifeCycleStage() {\n    return stage;\n  }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\n   * @return The current life-cycle stage of the AST we're working on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.183
        },
        "num_failing_tests": 59
    },
    {
        "name": "AstValidator.validateParameters#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateParameters(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateParameters(Node n) {\n    validateNodeType(Token.LP, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateName(c);\n    }\n  }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1803
        },
        "num_failing_tests": 49
    },
    {
        "name": "Node.getBooleanProp#904",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "  public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) != 0;\n  }\n",
        "begin_line": 904,
        "end_line": 906,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1798
        },
        "num_failing_tests": 61
    },
    {
        "name": "Node.isNoSideEffectsCall#2470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isNoSideEffectsCall()",
        "snippet": "  public boolean isNoSideEffectsCall() {\n    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);\n  }\n",
        "begin_line": 2470,
        "end_line": 2472,
        "comment": "\n   * Returns true if this node is a function or constructor call that\n   * has no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1797
        },
        "num_failing_tests": 31
    },
    {
        "name": "CompilerOptions.setCodingConvention#1248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 1248,
        "end_line": 1250,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1797
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.parseInputs#1153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main js sources.\n    jsRoot = new Node(Token.BLOCK);\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = new Node(Token.BLOCK);\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot,\n          options.tracer == TracerMode.ALL);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Check if the sources need to be re-ordered.\n      if (options.manageClosureDependencies) {\n        for (CompilerInput input : inputs) {\n          input.setCompiler(this);\n\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(\n                  options.manageClosureDependenciesEntryPoints, inputs);\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n          return null;\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n          return null;\n        }\n      }\n\n      // Check if inputs need to be rebuilt from modules.\n      boolean staleInputs = false;\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n\n        // Inputs can have a null AST during initial parse.\n        if (n == null) {\n          continue;\n        }\n\n        if (n.getJSDocInfo() != null) {\n          JSDocInfo info = n.getJSDocInfo();\n          if (info.isExterns()) {\n            // If the input file is explicitly marked as an externs file, then\n            // assume the programmer made a mistake and throw it into\n            // the externs pile anyways.\n            externsRoot.addChildToBack(n);\n            input.setIsExtern(true);\n\n            input.getModule().remove(input);\n\n            externs.add(input);\n            staleInputs = true;\n          } else if (info.isNoCompile()) {\n            input.getModule().remove(input);\n            staleInputs = true;\n          }\n        }\n      }\n\n      if (staleInputs) {\n        fillEmptyModules(modules);\n        rebuildInputsFromModules();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }\n",
        "begin_line": 1153,
        "end_line": 1291,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1797
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.init#304",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List<com.google.javascript.jscomp.JSSourceFile>, java.util.List<com.google.javascript.jscomp.JSSourceFile>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,\n      CompilerOptions options) {\n    JSModule module = new JSModule(\"[singleton]\");\n    for (JSSourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }\n",
        "begin_line": 304,
        "end_line": 312,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1794
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.makeCompilerInput#372",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List<com.google.javascript.jscomp.JSSourceFile>, boolean)",
        "snippet": "  private List<CompilerInput> makeCompilerInput(\n      List<JSSourceFile> files, boolean isExtern) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    for (JSSourceFile file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }\n",
        "begin_line": 372,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1794
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.initInputsByIdMap#457",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByIdMap()",
        "snippet": "  void initInputsByIdMap() {\n    inputsById = new HashMap<InputId, CompilerInput>();\n    for (CompilerInput input : externs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = inputsById.put(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = inputsById.put(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_INPUT, input.getName()));\n      }\n    }\n  }\n",
        "begin_line": 457,
        "end_line": 473,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1794
        },
        "num_failing_tests": 60
    },
    {
        "name": "Node.areBitFlagsSet#2486",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.areBitFlagsSet(int, int)",
        "snippet": "  private boolean areBitFlagsSet(int value, int flags) {\n    return (value & flags) == flags;\n  }\n",
        "begin_line": 2486,
        "end_line": 2488,
        "comment": "\n   * returns true if all the flags are set in value.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1793
        },
        "num_failing_tests": 31
    },
    {
        "name": "Compiler.getErrors#903",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 903,
        "end_line": 905,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1793
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.hasErrors#1873",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 1873,
        "end_line": 1875,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1793
        },
        "num_failing_tests": 60
    },
    {
        "name": "BasicErrorManager.getErrors#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  @Override\n  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1793
        },
        "num_failing_tests": 60
    },
    {
        "name": "BasicErrorManager.toArray#104",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 104,
        "end_line": 112,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1793
        },
        "num_failing_tests": 60
    },
    {
        "name": "Tracer.isInitialized#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 745,
        "end_line": 747,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Tracer.currentTimeMillis#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-4a9505c2-fb10-4e51-923e-a411221bd10b.currentTimeMillis()",
        "snippet": "    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Tracer.Tracer#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 235,
        "end_line": 278,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totalling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Tracer.stop#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silence_threshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than\n      // extraTracingStatistics.size() because a new statistic may\n      // have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silence_threshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 407,
        "end_line": 434,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silence_threshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Tracer.stop#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": " Stop the trace using the default silence_threshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Tracer.getThreadTrace#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 958,
        "end_line": 966,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "JSModule.add#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.JSSourceFile)",
        "snippet": "  public void add(JSSourceFile file) {\n    add(new CompilerInput(file));\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": " Adds a source file input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "CompilerOptions.isOn#1467",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 1467,
        "end_line": 1469,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.initModules#328",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List<com.google.javascript.jscomp.JSSourceFile>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initModules(\n      List<JSSourceFile> externs, List<JSModule> modules,\n      CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules = modules;\n    if (modules.size() > 1) {\n      try {\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph = null;\n    }\n\n    this.inputs = getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByIdMap();\n  }\n",
        "begin_line": 328,
        "end_line": 359,
        "comment": "\n   * Initializes the instance state needed for a compile job if the sources\n   * are in modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.newTracer#866",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 866,
        "end_line": 873,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.stopTracer#875",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 875,
        "end_line": 880,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "CodeChangeHandler.hasCodeChanged#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.hasCodeChanged()",
        "snippet": "    boolean hasCodeChanged() {\n      return hasChanged;\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "InputId.getIdName#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.getIdName()",
        "snippet": "  public String getIdName() {\n    return id;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "JSModule.JSModule#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.JSModule(java.lang.String)",
        "snippet": "  public JSModule(String name) {\n    this.name = name;\n    this.depth = -1;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n   * Creates an instance.\n   *\n   * @param name A unique name for the module\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "JSModule.add#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  public void add(CompilerInput input) {\n    inputs.add(input);\n    input.setModule(this);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": " Adds a source code input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "JSModule.getInputs#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getInputs()",
        "snippet": "  public List<CompilerInput> getInputs() {\n    return inputs;\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": "\n   * Gets this module's list of source code inputs.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "CompilerInput.getName#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return id.getIdName();\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "CompilerInput.setModule#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module == null || this.module == null || this.module == module);\n    this.module = module;\n  }\n",
        "begin_line": 311,
        "end_line": 316,
        "comment": " Sets the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.initBasedOnOptions#364",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath != null) {\n      sourceMap = options.sourceMapFormat.getInstance();\n      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);\n    }\n  }\n",
        "begin_line": 364,
        "end_line": 370,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.checkFirstModule#393",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private void checkFirstModule(List<JSModule> modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }\n",
        "begin_line": 393,
        "end_line": 401,
        "comment": "\n   * Verifies that at least one module has been provided and that the first one\n   * has at least one source code input.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.fillEmptyModules#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(JSSourceFile.fromCode(\"[\" + module.getName() + \"]\", \"\"));\n      }\n    }\n  }\n",
        "begin_line": 407,
        "end_line": 413,
        "comment": "\n   * Fill any empty modules with a place holder file. It makes any cross module\n   * motion easier.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Compiler.getAllInputsFromModules#429",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    Map<String, JSModule> inputMap = Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName = input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }\n",
        "begin_line": 429,
        "end_line": 445,
        "comment": "\n   * Builds a single list of all module inputs. Verifies that it contains no\n   * duplicates.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1792
        },
        "num_failing_tests": 60
    },
    {
        "name": "Node.getSideEffectFlags#2383",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSideEffectFlags()",
        "snippet": "  public int getSideEffectFlags() {\n    return getIntProp(SIDE_EFFECT_FLAGS);\n  }\n",
        "begin_line": 2383,
        "end_line": 2385,
        "comment": "\n   * Returns the side effects flags for this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1789
        },
        "num_failing_tests": 31
    },
    {
        "name": "Node.Node#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node right) {\n    Preconditions.checkArgument(left.parent == null,\n        \"first new child has existing parent\");\n    Preconditions.checkArgument(left.next == null,\n        \"first new child has existing sibling\");\n    Preconditions.checkArgument(right.parent == null,\n        \"second new child has existing parent\");\n    Preconditions.checkArgument(right.next == null,\n        \"second new child has existing sibling\");\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = right;\n    left.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 476,
        "end_line": 494,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.178
        },
        "num_failing_tests": 61
    },
    {
        "name": "CodeConsumer.breakAfterBlockFor#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.breakAfterBlockFor(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  boolean breakAfterBlockFor(Node n, boolean statementContext) {\n    return statementContext;\n  }\n",
        "begin_line": 286,
        "end_line": 288,
        "comment": "\n   * @return Whether the a line break can be added after the specified BLOCK.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1771
        },
        "num_failing_tests": 44
    },
    {
        "name": "CodeConsumer.appendBlockStart#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockStart()",
        "snippet": "  void appendBlockStart() {\n    append(\"{\");\n  }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1767
        },
        "num_failing_tests": 44
    },
    {
        "name": "CodeConsumer.appendBlockEnd#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.appendBlockEnd()",
        "snippet": "  void appendBlockEnd() {\n    append(\"}\");\n  }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1767
        },
        "num_failing_tests": 44
    },
    {
        "name": "CodeConsumer.beginBlock#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.beginBlock()",
        "snippet": "  void beginBlock() {\n    if (statementNeedsEnded) {\n      append(\";\");\n      maybeLineBreak();\n    }\n    appendBlockStart();\n\n    endLine();\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 100,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1767
        },
        "num_failing_tests": 44
    },
    {
        "name": "CodeConsumer.endBlock#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endBlock(boolean)",
        "snippet": "  void endBlock(boolean shouldEndLine) {\n    appendBlockEnd();\n    if (shouldEndLine) {\n      endLine();\n    }\n    statementNeedsEnded = false;\n  }\n",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1767
        },
        "num_failing_tests": 44
    },
    {
        "name": "DefinitionsRemover.UnknownDefinition#180",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition.UnknownDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    UnknownDefinition(Node lValue, boolean inExterns) {\n      super(lValue, inExterns);\n    }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1761
        },
        "num_failing_tests": 28
    },
    {
        "name": "InlineFunctions.remove#1066",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionVar.remove()",
        "snippet": "    @Override\n    public void remove() {\n      NodeUtil.removeChild(var.getParent(), var);\n    }\n",
        "begin_line": 1066,
        "end_line": 1069,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1759
        },
        "num_failing_tests": 7
    },
    {
        "name": "FunctionToBlockMutator.fixUnitializedVarDeclarations#150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.fixUnitializedVarDeclarations(com.google.javascript.rhino.Node)",
        "snippet": "  private void fixUnitializedVarDeclarations(Node n) {\n    // Inner loop structure must already have logic to initialize its\n    // variables.  In particular FOR-IN structures must not be modified.\n    if (NodeUtil.isLoopStructure(n)) {\n      return;\n    }\n\n    // For all VARs\n    if (NodeUtil.isVar(n)) {\n      Node name = n.getFirstChild();\n      // It isn't initialized.\n      if (!name.hasChildren()) {\n        Node srcLocation = name;\n        name.addChildToBack(NodeUtil.newUndefinedNode(srcLocation));\n      }\n      return;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      fixUnitializedVarDeclarations(c);\n    }\n  }\n",
        "begin_line": 150,
        "end_line": 171,
        "comment": "\n   *  For all VAR node with uninitialized declarations, set\n   *  the values to be \"undefined\".\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeConsumer.addNumber#233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.addNumber(double)",
        "snippet": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    if (x < 0 && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !isNegativeZero(x)) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }\n",
        "begin_line": 233,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1738
        },
        "num_failing_tests": 41
    },
    {
        "name": "CodeConsumer.isNegativeZero#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.isNegativeZero(double)",
        "snippet": "  static boolean isNegativeZero(double x) {\n    return x == 0.0 && Math.copySign(1, x) == -1.0;\n  }\n",
        "begin_line": 261,
        "end_line": 263,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1738
        },
        "num_failing_tests": 41
    },
    {
        "name": "NodeUtil.functionCallHasSideEffects#975",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean functionCallHasSideEffects(Node callNode) {\n    return functionCallHasSideEffects(callNode, null);\n  }\n",
        "begin_line": 975,
        "end_line": 977,
        "comment": "\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode - function call node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1719
        },
        "num_failing_tests": 20
    },
    {
        "name": "Node.hasOneChild#1528",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasOneChild()",
        "snippet": "  public boolean hasOneChild() {\n    return first != null && first == last;\n  }\n",
        "begin_line": 1528,
        "end_line": 1530,
        "comment": "\n   * Check for one child more efficiently than by iterating over all the\n   * children as is done with Node.getChildCount().\n   *\n   * @return Whether the node has exactly one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1718
        },
        "num_failing_tests": 57
    },
    {
        "name": "Node.getIntValue#435",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.getIntValue()",
        "snippet": "    @Override\n    public int getIntValue() {\n      return intValue;\n    }\n",
        "begin_line": 435,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1711
        },
        "num_failing_tests": 57
    },
    {
        "name": "Normalize.visit#231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.NAME) {\n        String name = n.getString();\n        if (n.getString().isEmpty()) {\n          return;\n        }\n\n        boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);\n        if (checkUserDeclarations) {\n          boolean expectedConst = false;\n          CodingConvention convention = compiler.getCodingConvention();\n          if (NodeUtil.isConstantName(n)\n              || NodeUtil.isConstantByConvention(convention, n, parent)) {\n            expectedConst = true;\n          } else {\n            expectedConst = false;\n\n            JSDocInfo info = null;\n            Var var = t.getScope().getVar(n.getString());\n            if (var != null) {\n              info = var.getJSDocInfo();\n            }\n\n            if (info != null && info.isConstant()) {\n              expectedConst = true;\n            } else {\n              expectedConst = false;\n            }\n          }\n\n          if (expectedConst) {\n            Preconditions.checkState(expectedConst == isConst,\n                \"The name %s is not annotated as constant.\", name);\n          } else {\n            Preconditions.checkState(expectedConst == isConst,\n                \"The name %s should not be annotated as constant.\", name);\n          }\n        }\n\n        Boolean value = constantMap.get(name);\n        if (value == null) {\n          constantMap.put(name, isConst);\n        } else {\n          Preconditions.checkState(value.booleanValue() == isConst,\n              \"The name %s is not consistently annotated as constant.\", name);\n        }\n      }\n    }\n",
        "begin_line": 231,
        "end_line": 279,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1701
        },
        "num_failing_tests": 48
    },
    {
        "name": "CodeConsumer.endFunction#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.endFunction(boolean)",
        "snippet": "  void endFunction(boolean statementContext) {\n    sawFunction = true;\n    if (statementContext) {\n      endLine();\n    }\n  }\n",
        "begin_line": 167,
        "end_line": 172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1695
        },
        "num_failing_tests": 41
    },
    {
        "name": "Compiler.toSource#1529",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  String toSource(Node n) {\n    initCompilerOptionsIfTesting();\n    return toSource(n, null, true);\n  }\n",
        "begin_line": 1529,
        "end_line": 1533,
        "comment": "\n   * Generates JavaScript source code for an AST, doesn't generate source\n   * map info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1694
        },
        "num_failing_tests": 55
    },
    {
        "name": "CompilerOptions.getLanguageOut#1332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageOut()",
        "snippet": "  public LanguageMode getLanguageOut() {\n    return languageOut;\n  }\n",
        "begin_line": 1332,
        "end_line": 1334,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1687
        },
        "num_failing_tests": 55
    },
    {
        "name": "Compiler.toSource#1538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.toSource(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SourceMap, boolean)",
        "snippet": "  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n    CodePrinter.Builder builder = new CodePrinter.Builder(n);\n    builder.setPrettyPrint(options.prettyPrint);\n    builder.setLineBreak(options.lineBreak);\n    builder.setSourceMap(sourceMap);\n    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n    builder.setTagAsStrict(firstOutput &&\n        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n    builder.setLineLengthThreshold(options.lineLengthThreshold);\n\n    Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;\n    builder.setOutputCharset(charset);\n\n    return builder.build();\n  }\n",
        "begin_line": 1538,
        "end_line": 1553,
        "comment": "\n   * Generates JavaScript source code for an AST.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1687
        },
        "num_failing_tests": 55
    },
    {
        "name": "CodePrinter.setLineLengthThreshold#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setLineLengthThreshold(int)",
        "snippet": "    Builder setLineLengthThreshold(int threshold) {\n      this.lineLengthThreshold = threshold;\n      return this;\n    }\n",
        "begin_line": 538,
        "end_line": 541,
        "comment": "\n     * Sets the line length threshold that will be used to determine\n     * when to break lines, if line breaking is on.\n     *\n     * @param threshold The line length threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1687
        },
        "num_failing_tests": 55
    },
    {
        "name": "CodePrinter.setSourceMapDetailLevel#557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel)",
        "snippet": "    Builder setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n      Preconditions.checkState(level != null);\n      this.sourceMapDetailLevel = level;\n      return this;\n    }\n",
        "begin_line": 557,
        "end_line": 561,
        "comment": "\n     * @param level The detail level to use.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1687
        },
        "num_failing_tests": 55
    },
    {
        "name": "CodePrinter.setOutputCharset#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setOutputCharset(java.nio.charset.Charset)",
        "snippet": "    Builder setOutputCharset(Charset outCharset) {\n      this.outputCharset = outCharset;\n      return this;\n    }\n",
        "begin_line": 567,
        "end_line": 570,
        "comment": "\n     * Set the charset to use when determining what characters need to be\n     * escaped in the output.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1687
        },
        "num_failing_tests": 55
    },
    {
        "name": "CodePrinter.setTagAsStrict#575",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "signature": "com.google.javascript.jscomp.CodePrinter.Builder.setTagAsStrict(boolean)",
        "snippet": "    Builder setTagAsStrict(boolean tagAsStrict) {\n      this.tagAsStrict = tagAsStrict;\n      return this;\n    }\n",
        "begin_line": 575,
        "end_line": 578,
        "comment": "\n     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1687
        },
        "num_failing_tests": 55
    },
    {
        "name": "NodeUtil.isConstantName#2907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isConstantName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isConstantName(Node node) {\n    return node.getBooleanProp(Node.IS_CONSTANT_NAME);\n  }\n",
        "begin_line": 2907,
        "end_line": 2909,
        "comment": "\n   * Returns true if a name node represents a constant variable.\n   *\n   * <p>Determining whether a variable is constant has three steps:\n   * <ol>\n   * <li>In CodingConventionAnnotator, any name that matches the\n   *     {@link CodingConvention#isConstant(String)} is annotated with an\n   *     IS_CONSTANT_NAME property.\n   * <li>The normalize pass renames any variable with the IS_CONSTANT_NAME\n   *     annotation and that is initialized to a constant value with\n   *     a variable name inlucding $$constant.\n   * <li>Return true here if the variable includes $$constant in its name.\n   * </ol>\n   *\n   * @param node A NAME or STRING node\n   * @return True if the variable is constant\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1677
        },
        "num_failing_tests": 50
    },
    {
        "name": "IRFactory.processInfixExpression#670",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      n.setLineno(exprNode.getLineno());\n      n.setCharno(position2charno(exprNode.getAbsolutePosition()));\n      maybeSetLengthFrom(n, exprNode);\n      return n;\n    }\n",
        "begin_line": 670,
        "end_line": 680,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1675
        },
        "num_failing_tests": 47
    },
    {
        "name": "AstValidator.validateVar#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateVar(Node n) {\n    validateNodeType(Token.VAR, n);\n    this.validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      // Don't use the validateName here as the NAME is allowed to have\n      // a child.\n      validateNodeType(Token.NAME, c);\n      validateNonEmptyString(c);\n      validateMaximumChildCount(c, 1);\n      if (c.hasChildren()) {\n        validateExpression(c.getFirstChild());\n      }\n    }\n  }\n",
        "begin_line": 389,
        "end_line": 402,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1671
        },
        "num_failing_tests": 49
    },
    {
        "name": "Node.getChildAtIndex#661",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildAtIndex(int)",
        "snippet": "  public Node getChildAtIndex(int i) {\n    Node n = first;\n    while (i > 0) {\n      n = n.next;\n      i--;\n    }\n    return n;\n  }\n",
        "begin_line": 661,
        "end_line": 668,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1658
        },
        "num_failing_tests": 49
    },
    {
        "name": "Node.getDouble#268",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.getDouble()",
        "snippet": "    @Override\n    public double getDouble() {\n      return this.number;\n    }\n",
        "begin_line": 268,
        "end_line": 271,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1648
        },
        "num_failing_tests": 41
    },
    {
        "name": "FunctionToBlockMutator.replaceReturnWithBreak#480",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.replaceReturnWithBreak(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String, java.lang.String)",
        "snippet": "  private static Node replaceReturnWithBreak(Node current, Node parent,\n      String resultName, String labelName) {\n\n    if (current.getType() == Token.FUNCTION\n        || current.getType() == Token.EXPR_RESULT) {\n      // Don't recurse into functions definitions, and expressions can't\n      // contain RETURN nodes.\n      return current;\n    }\n\n    if (current.getType() == Token.RETURN) {\n      Preconditions.checkState(NodeUtil.isStatementBlock(parent));\n\n      Node resultNode = getReplacementReturnStatement(current, resultName);\n      Node name = Node.newString(Token.LABEL_NAME, labelName);\n      Node breakNode = new Node(Token.BREAK, name);\n\n      // Replace the node in parent, and reset current to the first new child.\n      breakNode.copyInformationFromForTree(current);\n      parent.replaceChild(current, breakNode);\n      if (resultNode != null) {\n        resultNode.copyInformationFromForTree(current);\n        parent.addChildBefore(resultNode, breakNode);\n      }\n      current = breakNode;\n    } else {\n      for (Node c = current.getFirstChild(); c != null; c = c.getNext()) {\n        // c may be replaced.\n        c = replaceReturnWithBreak(c, current, resultName, labelName);\n      }\n    }\n\n    return current;\n  }\n",
        "begin_line": 480,
        "end_line": 513,
        "comment": "\n   * Replace the 'return' statement with its child expression.\n   *   \"return foo()\" becomes \"{foo(); break;}\" or\n   *      \"{resultName = foo(); break;}\"\n   *   \"return\" becomes {break;} or \"{resultName = void 0;break;}\".\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1645
        },
        "num_failing_tests": 5
    },
    {
        "name": "IRFactory.processNumberLiteral#748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNumberLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral)",
        "snippet": "    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      return newNumberNode(literalNode.getNumber());\n    }\n",
        "begin_line": 748,
        "end_line": 751,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1632
        },
        "num_failing_tests": 42
    },
    {
        "name": "IRFactory.newNumberNode#1287",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNumberNode(java.lang.Double)",
        "snippet": "  private Node newNumberNode(Double value) {\n    return Node.newNumber(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1287,
        "end_line": 1289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1632
        },
        "num_failing_tests": 42
    },
    {
        "name": "Normalize.process#219",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      Node externsAndJs = root.getParent();\n      Preconditions.checkState(externsAndJs != null);\n      Preconditions.checkState(externsAndJs.hasChild(externs));\n\n      NodeTraversal.traverseRoots(\n          compiler, Lists.newArrayList(externs, root), this);\n    }\n",
        "begin_line": 219,
        "end_line": 227,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1628
        },
        "num_failing_tests": 48
    },
    {
        "name": "Normalize.VerifyConstants#214",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.VerifyConstants.VerifyConstants(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "    VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations) {\n      this.compiler = compiler;\n      this.checkUserDeclarations = checkUserDeclarations;\n    }\n",
        "begin_line": 214,
        "end_line": 217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1627
        },
        "num_failing_tests": 48
    },
    {
        "name": "LineNumberCheck.process#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    requiresLineNumbers = false;\n\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1615
        },
        "num_failing_tests": 49
    },
    {
        "name": "Node.hasChild#1551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasChild(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean hasChild(Node child) {\n    for (Node n = first; n != null; n = n.getNext()) {\n      if (child == n) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 1551,
        "end_line": 1558,
        "comment": " Intended for testing and verification only.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1599
        },
        "num_failing_tests": 48
    },
    {
        "name": "AstValidator.validateExprStmt#473",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateExprStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateExprStmt(Node n) {\n    validateNodeType(Token.EXPR_RESULT, n);\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 473,
        "end_line": 477,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1596
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateFunctionStatement#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionStatement(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 350,
        "end_line": 356,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1593
        },
        "num_failing_tests": 40
    },
    {
        "name": "NodeTraversal.traverseRoots#461",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.rhino.Node>, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverseRoots(\n      AbstractCompiler compiler, List<Node> roots, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverseRoots(roots);\n  }\n",
        "begin_line": 461,
        "end_line": 465,
        "comment": "\n   * Traverses a list of node trees.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1593
        },
        "num_failing_tests": 49
    },
    {
        "name": "CodeGenerator.addList#890",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addList(com.google.javascript.rhino.Node)",
        "snippet": "  void addList(Node firstInList) {\n    addList(firstInList, true, Context.OTHER);\n  }\n",
        "begin_line": 890,
        "end_line": 892,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1579
        },
        "num_failing_tests": 45
    },
    {
        "name": "AstValidator.validateChildCount#774",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 0) {\n      valid = !n.hasChildren();\n    } else if (i == 1) {\n      valid = n.hasOneChild();\n    } else {\n      valid = (n.getChildCount() == i);\n    }\n    if (!valid) {\n      violation(\n          \"Expected \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 774,
        "end_line": 788,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1568
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateMaximumChildCount#807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMaximumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMaximumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = !n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() <= i;\n    }\n    if (!valid) {\n      violation(\n          \"Expected no more than \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 807,
        "end_line": 819,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1567
        },
        "num_failing_tests": 49
    },
    {
        "name": "Node.isEquivalentTo#1763",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEquivalentTo(com.google.javascript.rhino.Node)",
        "snippet": "  public boolean isEquivalentTo(Node node) {\n    return isEquivalentTo(node, false, true);\n  }\n",
        "begin_line": 1763,
        "end_line": 1765,
        "comment": " Returns true if this node is equivalent semantically to another ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1556
        },
        "num_failing_tests": 49
    },
    {
        "name": "Node.hasMoreThanOneChild#1538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.hasMoreThanOneChild()",
        "snippet": "  public boolean hasMoreThanOneChild() {\n    return first != null && first != last;\n  }\n",
        "begin_line": 1538,
        "end_line": 1540,
        "comment": "\n   * Check for more than one child more efficiently than by iterating over all\n   * the children as is done with Node.getChildCount().\n   *\n   * @return Whether the node more than one child.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1552
        },
        "num_failing_tests": 49
    },
    {
        "name": "Compiler.parseTestCode#1323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseTestCode(java.lang.String)",
        "snippet": "  @Override\n  Node parseTestCode(String js) {\n    initCompilerOptionsIfTesting();\n    CompilerInput input = new CompilerInput(\n        JSSourceFile.fromCode(\" [testcode] \", js));\n    if (inputsById == null) {\n      inputsById = Maps.newHashMap();\n    }\n    inputsById.put(input.getInputId(), input);\n    return input.getAstRoot(this);\n  }\n",
        "begin_line": 1323,
        "end_line": 1333,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1551
        },
        "num_failing_tests": 17
    },
    {
        "name": "IRFactory.validAssignmentTarget#972",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.validAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }\n",
        "begin_line": 972,
        "end_line": 980,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1548
        },
        "num_failing_tests": 41
    },
    {
        "name": "JSType.isNominalType#353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateRoot#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    validateChildCount(n, 2);\n    validateCodeRoot(n.getFirstChild());\n    validateCodeRoot(n.getLastChild());\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.154
        },
        "num_failing_tests": 49
    },
    {
        "name": "IRFactory.processBreakStatement#488",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBreakStatement(com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement)",
        "snippet": "    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n",
        "begin_line": 488,
        "end_line": 498,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1539
        },
        "num_failing_tests": 5
    },
    {
        "name": "ObjectType.defineDeclaredProperty#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.defineDeclaredProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public final boolean defineDeclaredProperty(String propertyName,\n      JSType type, Node propertyNode) {\n    boolean result = defineProperty(propertyName, type, false,\n        propertyNode);\n\n    // All property definitions go through this method\n    // or defineDeclaredProperty. Because the properties defined an an\n    // object can affect subtyping, it's slightly more efficient\n    // to register this after defining the property.\n    registry.registerPropertyOnType(propertyName, this);\n\n    return result;\n  }\n",
        "begin_line": 271,
        "end_line": 283,
        "comment": "\n   * Defines a property whose type is synthesized (i.e. not inferred).\n   * @param propertyName the property's name\n   * @param type the type\n   * @param propertyNode the node corresponding to the declaration of property\n   *        which might later be accessed using {@code getPropertyNode}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1537
        },
        "num_failing_tests": 49
    },
    {
        "name": "JSTypeRegistry.createNullableType#977",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNullableType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createNullableType(JSType type) {\n    return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "\n   * Creates a type representing nullable values of the given type.\n   * @return the union of the type and the Null type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1537
        },
        "num_failing_tests": 49
    },
    {
        "name": "IRFactory.newNode#1271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2) {\n    return new Node(type, child1, child2).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1271,
        "end_line": 1273,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1537
        },
        "num_failing_tests": 47
    },
    {
        "name": "PrototypeObjectType.hasOwnProperty#174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasOwnProperty(java.lang.String)",
        "snippet": "  @Override\n  public boolean hasOwnProperty(String propertyName) {\n    return properties.get(propertyName) != null;\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1536
        },
        "num_failing_tests": 49
    },
    {
        "name": "PrototypeObjectType.defineProperty#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    if (hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    Property newProp = new Property(\n        name, type, inferred, propertyNode);\n    Property oldProp = properties.get(name);\n    if (oldProp != null) {\n      // This is to keep previously inferred jsdoc info, e.g., in a\n      // replaceScript scenario.\n      newProp.setJSDocInfo(oldProp.getJSDocInfo());\n    }\n    properties.put(name, newProp);\n    return true;\n  }\n",
        "begin_line": 235,
        "end_line": 251,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1536
        },
        "num_failing_tests": 49
    },
    {
        "name": "PrototypeObjectType.getConstructor#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return null;\n  }\n",
        "begin_line": 408,
        "end_line": 411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1536
        },
        "num_failing_tests": 49
    },
    {
        "name": "ObjectType.hasOwnDeclaredProperty#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasOwnDeclaredProperty(java.lang.String)",
        "snippet": "  boolean hasOwnDeclaredProperty(String name) {\n    return hasOwnProperty(name) && isPropertyTypeDeclared(name);\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Whether the given property is declared on this object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1536
        },
        "num_failing_tests": 49
    },
    {
        "name": "InstanceObjectType.defineProperty#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.defineProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  boolean defineProperty(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    ObjectType proto = getImplicitPrototype();\n    if (proto != null && proto.hasOwnDeclaredProperty(name)) {\n      return false;\n    }\n    return super.defineProperty(name, type, inferred, propertyNode);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1536
        },
        "num_failing_tests": 49
    },
    {
        "name": "IRFactory.processParenthesizedExpression#807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processParenthesizedExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression)",
        "snippet": "    @Override\n    Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n      Node node = transform(exprNode.getExpression());\n      node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);\n      return node;\n    }\n",
        "begin_line": 807,
        "end_line": 812,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1533
        },
        "num_failing_tests": 18
    },
    {
        "name": "AstValidator.validateMinimumChildCount#790",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateMinimumChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private void validateMinimumChildCount(Node n, int i) {\n    boolean valid = false;\n    if (i == 1) {\n      valid = n.hasChildren();\n    } else if (i == 2) {\n      valid = n.hasMoreThanOneChild();\n    } else {\n      valid = n.getChildCount() >= i;\n    }\n\n    if (!valid) {\n      violation(\n          \"Expected at least \" + i + \" children, but was \"\n              + n.getChildCount(), n);\n    }\n  }\n",
        "begin_line": 790,
        "end_line": 805,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1522
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateName#338",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonEmptyString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1517
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateNonEmptyString#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonEmptyString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonEmptyString(Node n) {\n    validateNonNullString(n);\n    if (n.getString().isEmpty()) {\n      violation(\"Expected non-empty string.\", n);\n    }\n  }\n",
        "begin_line": 325,
        "end_line": 330,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateNonNullString#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNonNullString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNonNullString(Node n) {\n    if (n.getString() == null) {\n      violation(\"Expected non-null string.\", n);\n    }\n  }\n",
        "begin_line": 332,
        "end_line": 336,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1507
        },
        "num_failing_tests": 49
    },
    {
        "name": "CodeChangeHandler.reset#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "class_name": "com.google.javascript.jscomp.CodeChangeHandler",
        "signature": "com.google.javascript.jscomp.CodeChangeHandler.RecentChange.reset()",
        "snippet": "    void reset() {\n      hasChanged = false;\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1506
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateScript#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateScript(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateScript(Node n) {\n    validateNodeType(Token.SCRIPT, n);\n    validateIsSynthetic(n);\n    validateHasSourceName(n);\n    validateHasInputId(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateStatement(c);\n    }\n  }\n",
        "begin_line": 83,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1506
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.AstValidator#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.AstValidator()",
        "snippet": "  public AstValidator() {\n    this.violationHandler = new ViolationHandler() {\n      @Override\n      public void handleViolation(String message, Node n) {\n        throw new IllegalStateException(\n            message + \" Reference node \" + n.toString());\n      }\n    };\n  }\n",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1505
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateCodeRoot#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateCodeRoot(com.google.javascript.rhino.Node)",
        "snippet": "  public void validateCodeRoot(Node n) {\n    validateNodeType(Token.BLOCK, n);\n    validateIsSynthetic(n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateScript(c);\n    }\n  }\n",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1505
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateIsSynthetic#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIsSynthetic(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIsSynthetic(Node n) {\n    if (!n.getBooleanProp(Node.SYNTHETIC_BLOCK_PROP)) {\n      violation(\"Missing 'synthetic block' annotation.\", n);\n    }\n  }\n",
        "begin_line": 292,
        "end_line": 296,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1505
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateHasSourceName#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasSourceName(Node n) {\n    String sourceName = n.getSourceFileName();\n    if (sourceName == null || sourceName.isEmpty()) {\n      violation(\"Missing 'source name' annotation.\", n);\n    }\n  }\n",
        "begin_line": 298,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1505
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateHasInputId#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateHasInputId(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateHasInputId(Node n) {\n    InputId inputId = n.getInputId();\n    if (inputId == null) {\n      violation(\"Missing 'input id' annotation.\", n);\n    }\n  }\n",
        "begin_line": 305,
        "end_line": 310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1505
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateNodeType#766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNodeType(int, com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNodeType(int type, Node n) {\n    if (n.getType() != type) {\n      violation(\n          \"Expected \" + Node.tokenToName(type) + \" but was \"\n              + Node.tokenToName(n.getType()), n);\n    }\n  }\n",
        "begin_line": 766,
        "end_line": 772,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1505
        },
        "num_failing_tests": 49
    },
    {
        "name": "Node.addChildAfter#766",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildAfter(Node newChild, Node node) {\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n    newChild.parent = this;\n    newChild.next = node.next;\n    node.next = newChild;\n    if (last == node) {\n        last = newChild;\n    }\n  }\n",
        "begin_line": 766,
        "end_line": 777,
        "comment": "\n   * Add 'child' after 'node'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1494
        },
        "num_failing_tests": 16
    },
    {
        "name": "FunctionInjector.inlineReturnValue#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.inlineReturnValue(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node inlineReturnValue(Node callNode, Node fnNode) {\n    Node block = fnNode.getLastChild();\n    Node callParentNode = callNode.getParent();\n\n    // NOTE: As the normalize pass guarantees globals aren't being\n    // shadowed and an expression can't introduce new names, there is\n    // no need to check for conflicts.\n\n    // Create an argName -> expression map, checking for side effects.\n    Map<String, Node> argMap =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            fnNode, callNode, this.safeNameIdSupplier);\n\n    Node newExpression;\n    if (!block.hasChildren()) {\n      Node srcLocation = block;\n      newExpression = NodeUtil.newUndefinedNode(srcLocation);\n    } else {\n      Node returnNode = block.getFirstChild();\n      Preconditions.checkArgument(returnNode.getType() == Token.RETURN);\n\n      // Clone the return node first.\n      Node safeReturnNode = returnNode.cloneTree();\n      Node inlineResult = FunctionArgumentInjector.inject(\n          null, safeReturnNode, null, argMap);\n      Preconditions.checkArgument(safeReturnNode == inlineResult);\n      newExpression = safeReturnNode.removeFirstChild();\n    }\n\n    callParentNode.replaceChild(callNode, newExpression);\n    return newExpression;\n  }\n",
        "begin_line": 253,
        "end_line": 284,
        "comment": "\n   * Inline a function that fulfills the requirements of\n   * canInlineReferenceDirectly into the call site, replacing only the CALL\n   * node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1492
        },
        "num_failing_tests": 12
    },
    {
        "name": "Compiler.getWarnings#910",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 910,
        "end_line": 912,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1488
        },
        "num_failing_tests": 49
    },
    {
        "name": "BasicErrorManager.getWarningCount#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  @Override\n  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1488
        },
        "num_failing_tests": 49
    },
    {
        "name": "BasicErrorManager.getWarnings#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  @Override\n  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1488
        },
        "num_failing_tests": 49
    },
    {
        "name": "NodeUtil.isExprAssign#1585",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExprAssign(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExprAssign(Node n) {\n    return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;\n  }\n",
        "begin_line": 1585,
        "end_line": 1588,
        "comment": "\n   * Is this node an assignment expression statement?\n   *\n   * @param n The node\n   * @return True if {@code n} is EXPR_RESULT and {@code n}'s\n   *     first child is ASSIGN\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1485
        },
        "num_failing_tests": 19
    },
    {
        "name": "CompilerOptions.setLanguageIn#1323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
        "snippet": "  public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn = languageIn;\n    this.languageOut = languageIn;\n  }\n",
        "begin_line": 1323,
        "end_line": 1326,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1485
        },
        "num_failing_tests": 49
    },
    {
        "name": "AstValidator.validateUnaryOp#743",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateUnaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateUnaryOp(Node n) {\n    validateChildCount(n, 1);\n    validateExpression(n.getFirstChild());\n  }\n",
        "begin_line": 743,
        "end_line": 746,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1468
        },
        "num_failing_tests": 16
    },
    {
        "name": "AstValidator.validateNumber#648",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNumber(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNumber(Node n) {\n    validateNodeType(Token.NUMBER, n);\n    validateChildCount(n, 0);\n    try {\n      // Validate that getDouble doesn't throw\n      n.getDouble();\n    } catch (UnsupportedOperationException e) {\n      violation(\"Invalid NUMBER node.\", n);\n    }\n  }\n",
        "begin_line": 648,
        "end_line": 657,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1436
        },
        "num_failing_tests": 35
    },
    {
        "name": "AstValidator.validateBinaryOp#748",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBinaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBinaryOp(Node n) {\n    validateChildCount(n, 2);\n    validateExpression(n.getFirstChild());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 748,
        "end_line": 752,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1388
        },
        "num_failing_tests": 23
    },
    {
        "name": "FunctionInjector.canInlineReferenceDirectly#658",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceDirectly(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (callNode.getFirstChild().getType() != Token.NAME) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || cArg.getType() != Token.THIS) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg != null) {\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n",
        "begin_line": 658,
        "end_line": 716,
        "comment": "\n   * Determines whether a function can be inlined at a particular call site.\n   * There are several criteria that the function and reference must hold in\n   * order for the functions to be inlined:\n   * 1) If a call's arguments have side effects,\n   * the corresponding argument in the function must only be referenced once.\n   * For instance, this will not be inlined:\n   * <pre>\n   *     function foo(a) { return a + a }\n   *     x = foo(i++);\n   * </pre>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.134
        },
        "num_failing_tests": 13
    },
    {
        "name": "FunctionInjector.getUniqueResultName#721",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "signature": "com.google.javascript.jscomp.FunctionInjector.getUniqueResultName()",
        "snippet": "  private String getUniqueResultName() {\n    return \"JSCompiler_inline_result\"\n        + ContextualRenamer.UNIQUE_ID_SEPARATOR + safeNameIdSupplier.get();\n  }\n",
        "begin_line": 721,
        "end_line": 724,
        "comment": "\n   * Parameter names will be name unique when at a later time.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1326
        },
        "num_failing_tests": 6
    },
    {
        "name": "DefinitionsRemover.getRValue#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.AssignmentDefinition.getRValue()",
        "snippet": "    @Override\n    public Node getRValue() {\n      return assignment.getLastChild();\n    }\n",
        "begin_line": 310,
        "end_line": 313,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1322
        },
        "num_failing_tests": 18
    },
    {
        "name": "NodeUtil.opToStrNoFail#2266",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.opToStrNoFail(int)",
        "snippet": "  static String opToStrNoFail(int operator) {\n    String res = opToStr(operator);\n    if (res == null) {\n      throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));\n    }\n    return res;\n  }\n",
        "begin_line": 2266,
        "end_line": 2273,
        "comment": "\n   * Converts an operator's token value (see {@link Token}) to a string\n   * representation or fails.\n   *\n   * @param operator the operator's token value to convert\n   * @return the string representation\n   * @throws Error if the token value is not an operator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1321
        },
        "num_failing_tests": 11
    },
    {
        "name": "AstValidator.validateBreak#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateBreak(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateBreak(Node n) {\n    validateNodeType(Token.BREAK, n);\n    validateMaximumChildCount(n, 1);\n    if (n.hasChildren()) {\n      validateLabelName(n.getFirstChild());\n    }\n  }\n",
        "begin_line": 493,
        "end_line": 499,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1316
        },
        "num_failing_tests": 4
    },
    {
        "name": "ClosureCodingConvention.isOptionalParameter#330",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isOptionalParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isOptionalParameter(Node parameter) {\n    return false;\n  }\n",
        "begin_line": 330,
        "end_line": 333,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 16
    },
    {
        "name": "ClosureCodingConvention.isVarArgsParameter#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.isVarArgsParameter(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean isVarArgsParameter(Node parameter) {\n    return false;\n  }\n",
        "begin_line": 335,
        "end_line": 338,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1313
        },
        "num_failing_tests": 16
    },
    {
        "name": "IRFactory.processAssignment#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(com.google.javascript.jscomp.mozilla.rhino.ast.Assignment)",
        "snippet": "    @Override\n    Node processAssignment(Assignment assignmentNode) {\n      Node assign = processInfixExpression(assignmentNode);\n      Node target = assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n      return assign;\n    }\n",
        "begin_line": 425,
        "end_line": 436,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1311
        },
        "num_failing_tests": 34
    },
    {
        "name": "AstValidator.validateAssignmentExpression#600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentExpression(Node n) {\n    validateChildCount(n, 2);\n    validateAssignmentTarget(n.getFirstChild());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1296
        },
        "num_failing_tests": 32
    },
    {
        "name": "DefinitionsRemover.AssignmentDefinition#290",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.AssignmentDefinition.AssignmentDefinition(com.google.javascript.rhino.Node, boolean)",
        "snippet": "    AssignmentDefinition(Node node, boolean inExterns) {\n      super(inExterns);\n      Preconditions.checkArgument(NodeUtil.isAssign(node));\n      assignment = node;\n    }\n",
        "begin_line": 290,
        "end_line": 294,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.129
        },
        "num_failing_tests": 18
    },
    {
        "name": "DefinitionsRemover.getLValue#305",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "class_name": "com.google.javascript.jscomp.DefinitionsRemover",
        "signature": "com.google.javascript.jscomp.DefinitionsRemover.AssignmentDefinition.getLValue()",
        "snippet": "    @Override\n    public Node getLValue() {\n      return assignment.getFirstChild();\n    }\n",
        "begin_line": 305,
        "end_line": 308,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.129
        },
        "num_failing_tests": 18
    },
    {
        "name": "AstValidator.validateAssignmentTarget#606",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateAssignmentTarget(Node n) {\n    switch (n.getType()) {\n      case Token.NAME:\n      case Token.GETELEM:\n      case Token.GETPROP:\n        validateExpression(n);\n        return;\n      default:\n        violation(\"Expected assignment target expression but was \"\n            + Node.tokenToName(n.getType()), n);\n    }\n  }\n",
        "begin_line": 606,
        "end_line": 617,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1287
        },
        "num_failing_tests": 32
    },
    {
        "name": "CodeConsumer.maybeCutLine#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeCutLine()",
        "snippet": "  void maybeCutLine() {\n  }\n",
        "begin_line": 91,
        "end_line": 92,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1284
        },
        "num_failing_tests": 7
    },
    {
        "name": "CodeGenerator.addNonEmptyStatement#777",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addNonEmptyStatement(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CodeGenerator.Context, boolean)",
        "snippet": "  private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild) {\n    Node nodeToProcess = n;\n\n    if (!allowNonBlockChild && n.getType() != Token.BLOCK) {\n      throw new Error(\"Missing BLOCK child.\");\n    }\n\n    // Strip unneeded blocks, that is blocks with <2 children unless\n    // the CodePrinter specifically wants to keep them.\n    if (n.getType() == Token.BLOCK) {\n      int count = getNonEmptyChildCount(n, 2);\n      if (count == 0) {\n        if (cc.shouldPreserveExtraBlocks()) {\n          cc.beginBlock();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        } else {\n          cc.endStatement(true);\n        }\n        return;\n      }\n\n      if (count == 1) {\n        // Hack around a couple of browser bugs:\n        //   Safari needs a block around function declarations.\n        //   IE6/7 needs a block around DOs.\n        Node firstAndOnlyChild = getFirstNonEmptyChild(n);\n        boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();\n        if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {\n          cc.beginBlock();\n          add(firstAndOnlyChild, Context.STATEMENT);\n          cc.maybeLineBreak();\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n          return;\n        } else {\n          // Continue with the only child.\n          nodeToProcess = firstAndOnlyChild;\n        }\n      }\n\n      if (count > 1) {\n        context = Context.PRESERVE_BLOCK;\n      }\n    }\n\n    if (nodeToProcess.getType() == Token.EMPTY) {\n      cc.endStatement(true);\n    } else {\n      add(nodeToProcess, context);\n\n      // VAR doesn't include ';' since it gets used in expressions - so any\n      // VAR in a statement context needs a call to endStatement() here.\n      if (nodeToProcess.getType() == Token.VAR) {\n        cc.endStatement();\n      }\n    }\n  }\n",
        "begin_line": 777,
        "end_line": 833,
        "comment": "\n   * Adds a block or expression, substituting a VOID with an empty statement.\n   * This is used for \"for (...);\" and \"if (...);\" type statements.\n   *\n   * @param n The node to print.\n   * @param context The context to determine how the node should be printed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 10
    },
    {
        "name": "Normalize.addToFront#615",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.addToFront(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private Node addToFront(Node parent, Node newChild, Node after) {\n      if (after == null) {\n        parent.addChildToFront(newChild);\n      } else {\n        parent.addChildAfter(newChild, after);\n      }\n      return newChild;\n    }\n",
        "begin_line": 615,
        "end_line": 622,
        "comment": "\n     * @param after The child node to insert the newChild after, or null if\n     *     newChild should be added to the front of parent's child list.\n     * @return The inserted child node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processEmptyExpression#551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processEmptyExpression(com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression)",
        "snippet": "    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n      Node node = newNode(Token.EMPTY);\n      return node;\n    }\n",
        "begin_line": 551,
        "end_line": 555,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1207
        },
        "num_failing_tests": 18
    },
    {
        "name": "Node.getLastSibling#684",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastSibling()",
        "snippet": "  public Node getLastSibling() {\n    Node n = this;\n    while (n.next != null) {\n      n = n.next;\n    }\n    return n;\n  }\n",
        "begin_line": 684,
        "end_line": 690,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1206
        },
        "num_failing_tests": 11
    },
    {
        "name": "WarningsGuard.disables#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean disables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n   * Returns whether all warnings in the given diagnostic group will be\n   * filtered out. Used to determine which passes to skip.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether all warnings of these types are disabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1168
        },
        "num_failing_tests": 17
    },
    {
        "name": "WarningsGuard.enables#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  protected boolean enables(DiagnosticGroup group) {\n    return false;\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\n   * Returns whether any of the warnings in the given diagnostic group will be\n   * upgraded to a warning or error.\n   *\n   * @param group A group of DiagnosticTypes.\n   * @return Whether any warnings of these types are enabled by this guard.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1168
        },
        "num_failing_tests": 17
    },
    {
        "name": "Node.removeFirstChild#2005",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeFirstChild()",
        "snippet": "  public Node removeFirstChild() {\n    Node child = first;\n    if (child != null) {\n      removeChild(child);\n    }\n    return child;\n  }\n",
        "begin_line": 2005,
        "end_line": 2011,
        "comment": "\n   * Removes the first child of Node. Equivalent to:\n   * node.removeChild(node.getFirstChild());\n   *\n   * @return The removed Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1157
        },
        "num_failing_tests": 12
    },
    {
        "name": "CodeGenerator.addExpr#874",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addExpr(com.google.javascript.rhino.Node, int)",
        "snippet": "  void addExpr(Node n, int minPrecedence) {\n    addExpr(n, minPrecedence, Context.OTHER);\n  }\n",
        "begin_line": 874,
        "end_line": 876,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.113
        },
        "num_failing_tests": 22
    },
    {
        "name": "ComposeWarningsGuard.disables#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup group) {\n    nextSingleton:\n    for (DiagnosticType type : group.getTypes()) {\n      DiagnosticGroup singleton = DiagnosticGroup.forType(type);\n\n      for (WarningsGuard guard : guards) {\n        if (guard.disables(singleton)) {\n          continue nextSingleton;\n        } else if (guard.enables(singleton)) {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 115,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 17
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#61",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private DiagnosticGroup(DiagnosticType type) {\n    this.name = null;\n    this.types = ImmutableSet.of(type);\n  }\n",
        "begin_line": 61,
        "end_line": 64,
        "comment": "\n   * Create a diagnostic group with no name that only matches the given type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.11
        },
        "num_failing_tests": 17
    },
    {
        "name": "DiagnosticGroup.forType#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  static DiagnosticGroup forType(DiagnosticType type) {\n    if (!singletons.containsKey(type)) {\n      singletons.put(type, new DiagnosticGroup(type));\n    }\n    return singletons.get(type);\n  }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": " Create a diagnostic group that matches only the given type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.11
        },
        "num_failing_tests": 17
    },
    {
        "name": "CompilerOptions.disables#1021",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean disables(DiagnosticGroup type) {\n    return warningsGuard.disables(type);\n  }\n",
        "begin_line": 1021,
        "end_line": 1023,
        "comment": "\n   * Whether the warnings guard in this Options object disables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.11
        },
        "num_failing_tests": 17
    },
    {
        "name": "ExpressionDecomposer.isSubexpressionMovable#730",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.isSubexpressionMovable(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private DecompositionType isSubexpressionMovable(\n      Node expressionRoot, Node subExpression) {\n    boolean requiresDecomposition = false;\n    boolean seenSideEffects = NodeUtil.mayHaveSideEffects(subExpression);\n\n    Node child = subExpression;\n    for (Node parent : child.getAncestors()) {\n      if (parent == expressionRoot) {\n        // Done. The walk back to the root of the expression is complete, and\n        // nothing was encountered that blocks the call from being moved.\n        return requiresDecomposition\n            ? DecompositionType.DECOMPOSABLE\n            : DecompositionType.MOVABLE;\n      }\n\n      int parentType = parent.getType();\n\n      if (isConditionalOp(parent)) {\n        // Only the first child is always executed, otherwise it must be\n        // decomposed.\n        if (child != parent.getFirstChild()) {\n          requiresDecomposition = true;\n        }\n      } else {\n        // Only inline the call if none of the preceding siblings in the\n        // expression have side-effects, and are unaffected by the side-effects,\n        // if any, of the call in question.\n        // NOTE: This depends on the siblings being in the same order as they\n        // are evaluated.\n\n        // SPECIAL CASE: Assignment to a simple name\n        if (isSafeAssign(parent, seenSideEffects)) {\n          // It is always safe to inline \"foo()\" for expressions such as\n          //   \"a = b = c = foo();\"\n          // As the assignment is unaffected by side effect of \"foo()\"\n          // and the names assigned-to can not influence the state before\n          // the call to foo.\n          //\n          // This is not true of more complex LHS values, such as\n          //    a.x = foo();\n          //    next().x = foo();\n          // in these cases the checks below are necessary.\n        } else {\n          // Everything else.\n          for (Node n : parent.children()) {\n            if (n == child) {\n              // None of the preceding siblings have side-effects.\n              // This is OK.\n              break;\n            }\n\n            if (isExpressionTreeUnsafe(\n                n, seenSideEffects)) {\n              seenSideEffects = true;\n              requiresDecomposition = true;\n            }\n          }\n\n          // In Internet Explorer, DOM objects and other external objects\n          // methods can not be called indirectly, as is required when the\n          // object or its property can be side-effected.  For example,\n          // when exposing expression f() (with side-effects) in: x.m(f())\n          // either the value of x or its property m might have changed, so\n          // both the 'this' value ('x') and the function to be called ('x.m')\n          // need to be preserved. Like so:\n          //   var t1 = x, t2 = x.m, t3 = f();\n          //   t2.call(t1, t3);\n          // As IE doesn't support the call to these non-javascript objects\n          // methods in this way. We can't do this.\n          // We don't currently distinguish between these types of objects\n          // in the extern definitions and if we did we would need accurate\n          // type information.\n          //\n          Node first = parent.getFirstChild();\n          if (requiresDecomposition\n              && parent.getType() == Token.CALL\n              && NodeUtil.isGet(first)) {\n            if (maybeExternMethod(first)) {\n              return DecompositionType.UNDECOMPOSABLE;\n            } else {\n              return DecompositionType.DECOMPOSABLE;\n            }\n          }\n        }\n      }\n      // Continue looking up the expression tree.\n      child = parent;\n    }\n\n    // With a valid tree we should never get here.\n    throw new IllegalStateException(\"Unexpected.\");\n  }\n",
        "begin_line": 730,
        "end_line": 821,
        "comment": "\n   * Walk the AST from the call site to the expression root and verify that\n   * the portions of the expression that are evaluated before the call are:\n   * 1) Unaffected by the the side-efects, if any, of the call.\n   * 2) That there are no side-effects, that may influence the call.\n   *\n   * For example, if x has side-effects:\n   *   a = 1 + x();\n   * the call to x can be moved because \"a\" final value of a can not be\n   * influenced by x(), but in:\n   *   a = b + x();\n   * the call to x can not be moved because the value of b may be modified\n   * by the call to x.\n   *\n   * If x is without side-effects in:\n   *   a = b + x();\n   * the call to x can be moved, but in:\n   *   a = (b.foo = c) + x();\n   * the call to x can not be moved because the value of b.foo may be referenced\n   * by x().  Note: this is true even if b is a local variable; the object that\n   * b refers to may have a global alias.\n   *\n   * @return UNDECOMPOSABLE if the expression can not be moved, DECOMPOSABLE if\n   * decomposition is required before the expression can be moved, otherwise\n   * MOVABLE.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1081
        },
        "num_failing_tests": 8
    },
    {
        "name": "ExpressionDecomposer.isSafeAssign#844",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.isSafeAssign(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private boolean isSafeAssign(Node n, boolean seenSideEffects) {\n    if (n.getType() == Token.ASSIGN) {\n      Node lhs = n.getFirstChild();\n      switch (lhs.getType()) {\n        case Token.NAME:\n          return true;\n        case Token.GETPROP:\n          return !isExpressionTreeUnsafe(lhs.getFirstChild(), seenSideEffects);\n        case Token.GETELEM:\n          return !isExpressionTreeUnsafe(lhs.getFirstChild(), seenSideEffects)\n              && !isExpressionTreeUnsafe(lhs.getLastChild(), seenSideEffects);\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 844,
        "end_line": 858,
        "comment": "\n   * It is always safe to inline \"foo()\" for expressions such as\n   *    \"a = b = c = foo();\"\n   * As the assignment is unaffected by side effect of \"foo()\"\n   * and the names assigned-to can not influence the state before\n   * the call to foo.\n   *\n   * It is also safe in cases like where the object is constant:\n   *    CONST_NAME.a = foo()\n   *    CONST_NAME[CONST_VALUE] = foo();\n   *\n   * This is not true of more complex LHS values, such as\n   *     a.x = foo();\n   *     next().x = foo();\n   * in these cases the checks below are necessary.\n   *\n   * @param seenSideEffects If true, check to see if node-tree maybe affected by\n   * side-effects, otherwise if the tree has side-effects. @see\n   * isExpressionTreeUnsafe\n   * @return Whether the assignment is safe from side-effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1077
        },
        "num_failing_tests": 6
    },
    {
        "name": "ExpressionDecomposer.canExposeExpression#696",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.canExposeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  DecompositionType canExposeExpression(Node subExpression) {\n    Node expressionRoot = findExpressionRoot(subExpression);\n    if (expressionRoot != null) {\n      return isSubexpressionMovable(expressionRoot, subExpression);\n    }\n    return DecompositionType.UNDECOMPOSABLE;\n  }\n",
        "begin_line": 696,
        "end_line": 702,
        "comment": "\n   * Determine whether a expression is movable, or can be be made movable be\n   * decomposing the containing expression.\n   *\n   * An subExpression is MOVABLE if it can be replaced with a temporary holding\n   * its results and moved to immediately before the root of the expression.\n   * There are three conditions that must be met for this to occur:\n   * 1) There must be a location to inject a statement for the expression.  For\n   * example, this condition can not be met if the expression is a loop\n   * condition or CASE condition.\n   * 2) If the expression can be affect by side-effects, there can not be a\n   * side-effect between original location and the expression root.\n   * 3) If the expression has side-effects, there can not be any other\n   * expression that can be effected between the original location and the\n   * expression root.\n   *\n   * An expression is DECOMPOSABLE if it can be rewritten so that an\n   * subExpression is MOVABLE.\n   *\n   * An expression is decomposed by moving any other sub-expressions that\n   * preventing an subExpression from being MOVABLE.\n   *\n   * @return Whether This is a call that can be moved to an new point in the\n   * AST to allow it to be inlined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1062
        },
        "num_failing_tests": 8
    },
    {
        "name": "DiagnosticGroupWarningsGuard.disables#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup otherGroup) {\n    return !level.isOn() && group.isSubGroup(otherGroup);\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 17
    },
    {
        "name": "DiagnosticGroup.isSubGroup#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.isSubGroup(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean isSubGroup(DiagnosticGroup group) {\n    for (DiagnosticType type : group.types) {\n      if (!matches(type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 117,
        "end_line": 124,
        "comment": "\n   * Returns whether all of the types in the given group are in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.106
        },
        "num_failing_tests": 17
    },
    {
        "name": "MakeDeclaredNamesUnique.getUniqueName#482",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.getUniqueName(java.lang.String, int)",
        "snippet": "    private String getUniqueName(String name, int id) {\n      return name + UNIQUE_ID_SEPARATOR + id;\n    }\n",
        "begin_line": 482,
        "end_line": 484,
        "comment": "\n     * Given a name and the associated id, create a new unique name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1049
        },
        "num_failing_tests": 17
    },
    {
        "name": "MakeDeclaredNamesUnique.stripConstIfReplaced#494",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.stripConstIfReplaced()",
        "snippet": "    @Override\n    public boolean stripConstIfReplaced() {\n      return false;\n    }\n",
        "begin_line": 494,
        "end_line": 497,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1049
        },
        "num_failing_tests": 17
    },
    {
        "name": "Node.addChildrenToBack#729",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildrenToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildrenToBack(Node children) {\n    for (Node child = children; child != null; child = child.next) {\n      Preconditions.checkArgument(child.parent == null);\n      child.parent = this;\n    }\n    if (last != null) {\n      last.next = children;\n    }\n    last = children.getLastSibling();\n    if (first == null) {\n      first = children;\n    }\n  }\n",
        "begin_line": 729,
        "end_line": 741,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.104
        },
        "num_failing_tests": 5
    },
    {
        "name": "AstValidator.validateIf#462",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateIf(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateIf(Node n) {\n    validateNodeType(Token.IF, n);\n    validateMinimumChildCount(n, 2);\n    validateMaximumChildCount(n, 3);\n    validateExpression(n.getFirstChild());\n    validateBlock(n.getChildAtIndex(1));\n    if (n.getChildCount() == 3) {\n      validateBlock(n.getLastChild());\n    }\n  }\n",
        "begin_line": 462,
        "end_line": 471,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1024
        },
        "num_failing_tests": 7
    },
    {
        "name": "ExpressionDecomposer.maybeDecomposeExpression#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.maybeDecomposeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  void maybeDecomposeExpression(Node expression) {\n    // If the expression needs to exposed.\n    int i = 0;\n    while (DecompositionType.DECOMPOSABLE == canExposeExpression(expression)) {\n      exposeExpression(expression);\n      i++;\n      if (i > MAX_INTERATIONS) {\n        throw new IllegalStateException(\n            \"DecomposeExpression depth exceeded on :\\n\" +\n            expression.toStringTree());\n      }\n    }\n  }\n",
        "begin_line": 77,
        "end_line": 89,
        "comment": "\n   * If required, rewrite the statement containing the expression.\n   * @param expression The expression to be exposed.\n   * @see #canExposeExpression\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1024
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.isIndirectEval#765",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isIndirectEval(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isIndirectEval(Node n) {\n    return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);\n  }\n",
        "begin_line": 765,
        "end_line": 768,
        "comment": "\n   * @return Whether the name is an indirect eval.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.102
        },
        "num_failing_tests": 25
    },
    {
        "name": "ExpressionDecomposer.findExpressionRoot#641",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.findExpressionRoot(com.google.javascript.rhino.Node)",
        "snippet": "  static Node findExpressionRoot(Node subExpression) {\n    Node child = subExpression;\n    for (Node parent : child.getAncestors()) {\n      int parentType = parent.getType();\n      switch (parentType) {\n        // Supported expression roots:\n        // SWITCH and IF can have multiple children, but the CASE, DEFAULT,\n        // or BLOCK will be encountered first for any of the children other\n        // than the condition.\n        case Token.EXPR_RESULT:\n        case Token.IF:\n        case Token.SWITCH:\n        case Token.RETURN:\n        case Token.VAR:\n          Preconditions.checkState(child == parent.getFirstChild());\n          return parent;\n        // Any of these indicate an unsupported expression:\n        case Token.SCRIPT:\n        case Token.BLOCK:\n        case Token.LABEL:\n        case Token.CASE:\n        case Token.DEFAULT:\n          return null;\n      }\n      child = parent;\n    }\n\n    throw new IllegalStateException(\"Unexpected AST structure.\");\n  }\n",
        "begin_line": 641,
        "end_line": 669,
        "comment": "\n   * @return The statement containing the expression. null if subExpression\n   *     is not contain by in by a Node where inlining is known to be possible.\n   *     For example, a WHILE node condition expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 8
    },
    {
        "name": "IRFactory.processLabel#687",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processLabel(com.google.javascript.jscomp.mozilla.rhino.ast.Label)",
        "snippet": "    @Override\n    Node processLabel(Label labelNode) {\n      return newStringNode(Token.LABEL_NAME, labelNode.getName());\n    }\n",
        "begin_line": 687,
        "end_line": 690,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0998
        },
        "num_failing_tests": 5
    },
    {
        "name": "IRFactory.processLabeledStatement#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processLabeledStatement(com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement)",
        "snippet": "    @Override\n    Node processLabeledStatement(LabeledStatement statementNode) {\n      Node node = newNode(Token.LABEL);\n      Node prev = null;\n      Node cur = node;\n      for (Label label : statementNode.getLabels()) {\n        if (prev != null) {\n          prev.addChildToBack(cur);\n        }\n        cur.addChildToBack(transform(label));\n\n        cur.setLineno(label.getLineno());\n        maybeSetLengthFrom(cur, label);\n\n        int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());\n        cur.setCharno(clauseAbsolutePosition);\n\n        prev = cur;\n        cur = newNode(Token.LABEL);\n      }\n      prev.addChildToBack(transform(statementNode.getStatement()));\n      return node;\n    }\n",
        "begin_line": 692,
        "end_line": 715,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0998
        },
        "num_failing_tests": 5
    },
    {
        "name": "FunctionToBlockMutator.addDummyAssignment#382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "class_name": "com.google.javascript.jscomp.FunctionToBlockMutator",
        "signature": "com.google.javascript.jscomp.FunctionToBlockMutator.addDummyAssignment(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private static void addDummyAssignment(Node node, String resultName) {\n    Preconditions.checkArgument(node.getType() == Token.BLOCK);\n\n    // A result is needed create a dummy value.\n    Node srcLocation = node;\n    Node retVal = NodeUtil.newUndefinedNode(srcLocation);\n    Node resultNode = createAssignStatementNode(resultName, retVal);\n    resultNode.copyInformationFromForTree(node);\n\n    node.addChildrenToBack(resultNode);\n  }\n",
        "begin_line": 382,
        "end_line": 392,
        "comment": "\n   * Example:\n   *   a = (void) 0;\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0966
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processIfStatement#659",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement)",
        "snippet": "    @Override\n    Node processIfStatement(IfStatement statementNode) {\n      Node node = newNode(Token.IF);\n      node.addChildToBack(transform(statementNode.getCondition()));\n      node.addChildToBack(transformBlock(statementNode.getThenPart()));\n      if (statementNode.getElsePart() != null) {\n        node.addChildToBack(transformBlock(statementNode.getElsePart()));\n      }\n      return node;\n    }\n",
        "begin_line": 659,
        "end_line": 668,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 7
    },
    {
        "name": "Normalize.normalizeLabels#463",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.normalizeLabels(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeLabels(Node n) {\n      Preconditions.checkArgument(n.getType() == Token.LABEL);\n\n      Node last = n.getLastChild();\n      switch (last.getType()) {\n        case Token.LABEL:\n        case Token.BLOCK:\n        case Token.FOR:\n        case Token.WHILE:\n        case Token.DO:\n          return;\n        default:\n          Node block = new Node(Token.BLOCK);\n          block.copyInformationFrom(last);\n          n.replaceChild(last, block);\n          block.addChildToFront(last);\n          reportCodeChange(\"LABEL normalization\");\n          return;\n      }\n    }\n",
        "begin_line": 463,
        "end_line": 482,
        "comment": "\n     * Limit the number of special cases where LABELs need to be handled. Only\n     * BLOCK and loops are allowed to be labeled.  Loop labels must remain in\n     * place as the named continues are not allowed for labeled blocks.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0948
        },
        "num_failing_tests": 4
    },
    {
        "name": "ExpressionDecomposer.findInjectionPoint#605",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.findInjectionPoint(com.google.javascript.rhino.Node)",
        "snippet": "  static Node findInjectionPoint(Node subExpression) {\n    Node expressionRoot = findExpressionRoot(subExpression);\n    Preconditions.checkNotNull(expressionRoot);\n\n    Node injectionPoint = expressionRoot;\n\n    Node parent = injectionPoint.getParent();\n    while (parent.getType() == Token.LABEL) {\n      injectionPoint = parent;\n      parent = injectionPoint.getParent();\n    }\n\n    Preconditions.checkState(\n        NodeUtil.isStatementBlock(injectionPoint.getParent()));\n    return injectionPoint;\n  }\n",
        "begin_line": 605,
        "end_line": 620,
        "comment": "\n   * @return For the subExpression, find the nearest statement Node before which\n   * it can be inlined.  Null if no such location can be found.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0946
        },
        "num_failing_tests": 6
    },
    {
        "name": "AstValidator.validateOptionalName#344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateOptionalName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateOptionalName(Node n) {\n    validateNodeType(Token.NAME, n);\n    validateNonNullString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 344,
        "end_line": 348,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0939
        },
        "num_failing_tests": 20
    },
    {
        "name": "AstValidator.validateFunctionExpression#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFunctionExpression(Node n) {\n    validateNodeType(Token.FUNCTION, n);\n    validateChildCount(n, 3);\n    validateOptionalName(n.getFirstChild());\n    validateParameters(n.getChildAtIndex(1));\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0939
        },
        "num_failing_tests": 20
    },
    {
        "name": "ExpressionDecomposer.isConditionalOp#625",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.isConditionalOp(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean isConditionalOp(Node n) {\n    switch(n.getType()) {\n      case Token.HOOK:\n      case Token.AND:\n      case Token.OR:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 625,
        "end_line": 634,
        "comment": "\n   * @return Whether the node is a conditional op.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.093
        },
        "num_failing_tests": 6
    },
    {
        "name": "ExpressionDecomposer.exposeExpression#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void exposeExpression(Node expressionRoot, Node subExpression) {\n    Node nonconditionalExpr = findNonconditionalParent(\n        subExpression, expressionRoot);\n    // Before extraction, record whether there are side-effect\n    boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects(\n        nonconditionalExpr);\n\n    Node exprInjectionPoint = findInjectionPoint(nonconditionalExpr);\n    DecompositionState state = new DecompositionState();\n    state.sideEffects = hasFollowingSideEffects;\n    state.extractBeforeStatement = exprInjectionPoint;\n\n    // Extract expressions in the reverse order of their evaluation.\n    for (Node grandchild = null,\n            child = nonconditionalExpr,\n            parent = child.getParent();\n         parent != expressionRoot;\n         grandchild = child,\n             child = parent,\n             parent = child.getParent()) {\n      int parentType = parent.getType();\n      Preconditions.checkState(\n          !isConditionalOp(parent) || child == parent.getFirstChild());\n      if (parentType == Token.ASSIGN) {\n          if (isSafeAssign(parent, state.sideEffects)) {\n            // It is always safe to inline \"foo()\" for expressions such as\n            // \"a = b = c = foo();\"\n            // As the assignment is unaffected by side effect of \"foo()\"\n            // and the names assigned-to can not influence the state before\n            // the call to foo.\n            //\n            // This is not true of more complex LHS values, such as\n            // a.x = foo();\n            // next().x = foo();\n            // in these cases the checks below are necessary.\n          } else {\n            // Alias \"next()\" in \"next().foo\"\n            Node left = parent.getFirstChild();\n            int type = left.getType();\n            if (left != child) {\n              Preconditions.checkState(NodeUtil.isGet(left));\n              if (type == Token.GETELEM) {\n                decomposeSubExpressions(left.getLastChild(), null, state);\n              }\n              decomposeSubExpressions(left.getFirstChild(), null, state);\n            }\n          }\n      } else if (parentType == Token.CALL\n          && NodeUtil.isGet(parent.getFirstChild())) {\n        Node functionExpression = parent.getFirstChild();\n        decomposeSubExpressions(functionExpression.getNext(), child, state);\n        // Now handle the call expression\n        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)\n            && functionExpression.getFirstChild() != grandchild) {\n          // TODO(johnlenz): In Internet Explorer, non-javascript objects such\n          // as DOM objects can not be decomposed.\n          Preconditions.checkState(allowObjectCallDecomposing(),\n              \"Object method calls can not be decomposed.\");\n          // Either there were preexisting side-effects, or this node has\n          // side-effects.\n          state.sideEffects = true;\n\n          // Rewrite the call so \"this\" is preserved.\n          Node replacement = rewriteCallExpression(parent, state);\n          // Continue from here.\n          parent = replacement;\n        }\n      } else if (parentType == Token.OBJECTLIT) {\n        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);\n      } else {\n        decomposeSubExpressions(parent.getFirstChild(), child, state);\n      }\n    }\n\n    // Now extract the expression that the decomposition is being performed to\n    // to allow to be moved.  All expressions that need to be evaluated before\n    // this have been extracted, so add the expression statement after the\n    // other extracted expressions and the original statement (or replace\n    // the original statement.\n    if (nonconditionalExpr == subExpression) {\n      // Don't extract the call, as that introduces an extra constant VAR\n      // that will simply need to be inlined back.  It will be handled as\n      // an EXPRESSION call site type.\n      // Node extractedCall = extractExpression(decomposition, expressionRoot);\n    } else {\n      Node parent = nonconditionalExpr.getParent();\n      boolean needResult = parent.getType() != Token.EXPR_RESULT;\n      Node extractedConditional = extractConditional(\n          nonconditionalExpr, exprInjectionPoint, needResult);\n    }\n  }\n",
        "begin_line": 145,
        "end_line": 235,
        "comment": "\n   * Rewrite the expression such that the sub-expression is in a movable\n   * expression statement while maintaining evaluation order.\n   *\n   * Two types of subexpressions are extracted from the source expression:\n   * 1) subexpressions with side-effects.\n   * 2) conditional expressions, that contain the call, which are transformed\n   * into IF statements.\n   *\n   * The following terms are used:\n   *    expressionRoot: The top level node before which the any extracted\n   *                    expressions should be placed before.\n   *    nonconditionalExpr: The node that will be extracted either expres.\n   *\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0896
        },
        "num_failing_tests": 3
    },
    {
        "name": "ExpressionDecomposer.extractExpression#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.extractExpression(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node extractExpression(Node expr, Node injectionPoint) {\n    Node parent = expr.getParent();\n\n    boolean isLhsOfAssignOp = NodeUtil.isAssignmentOp(parent)\n        && !NodeUtil.isAssign(parent)\n        && parent.getFirstChild() == expr;\n\n    Node firstExtractedNode = null;\n\n    // Expressions on the LHS of an assignment-op must have any possible\n    // side-effects extracted as the value must be duplicated:\n    //    next().foo += 2;\n    // becomes:\n    //    var t1 = next();\n    //    t1.foo = t1.foo + 2;\n    if (isLhsOfAssignOp && NodeUtil.isGet(expr)) {\n      for (Node n : expr.children()) {\n        if (n.getType() != Token.STRING && !isConstantName(n, knownConstants)) {\n          Node extractedNode = extractExpression(n, injectionPoint);\n          if (firstExtractedNode == null) {\n            firstExtractedNode = extractedNode;\n          }\n        }\n      }\n    }\n\n    // The temp is known to be constant.\n    String tempName = getTempConstantValueName();\n    Node replacementValueNode = Node.newString(Token.NAME, tempName)\n        .copyInformationFrom(expr);\n\n    Node tempNameValue;\n\n    // If it is ASSIGN_XXX, keep the assignment in place and extract the\n    // original value of the LHS operand.\n    if (isLhsOfAssignOp) {\n      Preconditions.checkState(NodeUtil.isName(expr) || NodeUtil.isGet(expr));\n      // Transform \"x += 2\" into \"x = temp + 2\"\n      Node opNode = new Node(NodeUtil.getOpFromAssignmentOp(parent))\n          .copyInformationFrom(parent);\n\n      Node rightOperand = parent.getLastChild();\n\n      parent.setType(Token.ASSIGN);\n      parent.replaceChild(rightOperand, opNode);\n      opNode.addChildToFront(replacementValueNode);\n      opNode.addChildToBack(rightOperand);\n\n      // The original expression is still being used, so make a clone.\n      tempNameValue = expr.cloneTree();\n    } else {\n      // Replace the expression with the temporary name.\n      parent.replaceChild(expr, replacementValueNode);\n\n      // Keep the original node so that CALL expressions can still be found\n      // and inlined properly.\n      tempNameValue = expr;\n    }\n\n    // Re-add the expression in the declaration of the temporary name.\n    Node tempVarNode = NodeUtil.newVarNode(tempName, tempNameValue);\n\n    Node injectionPointParent = injectionPoint.getParent();\n    injectionPointParent.addChildBefore(tempVarNode, injectionPoint);\n\n    if (firstExtractedNode == null) {\n      firstExtractedNode = tempVarNode;\n    }\n    return firstExtractedNode;\n  }\n",
        "begin_line": 440,
        "end_line": 509,
        "comment": "\n   * @param expr The expression to extract.\n   * @param injectionPoint The node before which to added the extracted\n   *     expression.\n   * @return The extract statement node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0896
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.getNonEmptyChildCount#1103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(com.google.javascript.rhino.Node, int)",
        "snippet": "  private static int getNonEmptyChildCount(Node n, int maxCount) {\n    int i = 0;\n    Node c = n.getFirstChild();\n    for (; c != null && i < maxCount; c = c.getNext()) {\n      if (c.getType() == Token.BLOCK) {\n        i += getNonEmptyChildCount(c, maxCount-i);\n      } else if (c.getType() != Token.EMPTY) {\n        i++;\n      }\n    }\n    return i;\n  }\n",
        "begin_line": 1103,
        "end_line": 1114,
        "comment": "\n   * @param maxCount The maximum number of children to look for.\n   * @return The number of children of this node that are non empty up to\n   * maxCount.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0893
        },
        "num_failing_tests": 10
    },
    {
        "name": "CodeGenerator.getContextForNonEmptyExpression#1146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context)",
        "snippet": "  private Context getContextForNonEmptyExpression(Context currentContext) {\n    return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;\n  }\n",
        "begin_line": 1146,
        "end_line": 1149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0862
        },
        "num_failing_tests": 9
    },
    {
        "name": "Node.removeChildAfter#2041",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeChildAfter(com.google.javascript.rhino.Node)",
        "snippet": "  public Node removeChildAfter(Node prev) {\n    Preconditions.checkArgument(prev.parent == this,\n        \"prev is not a child of this node.\");\n    Preconditions.checkArgument(prev.next != null,\n        \"no next sibling.\");\n\n    Node child = prev.next;\n    prev.next = child.next;\n    if (child == last) last = prev;\n    child.next = null;\n    child.parent = null;\n    return child;\n  }\n",
        "begin_line": 2041,
        "end_line": 2053,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0847
        },
        "num_failing_tests": 3
    },
    {
        "name": "AstValidator.validateLabel#312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateLabel(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateLabel(Node n) {\n    validateNodeType(Token.LABEL, n);\n    validateChildCount(n, 2);\n    validateLabelName(n.getFirstChild());\n    validateStatement(n.getLastChild());\n  }\n",
        "begin_line": 312,
        "end_line": 317,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0844
        },
        "num_failing_tests": 4
    },
    {
        "name": "AstValidator.validateLabelName#319",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateLabelName(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateLabelName(Node n) {\n    validateNodeType(Token.LABEL_NAME, n);\n    validateNonEmptyString(n);\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 319,
        "end_line": 323,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0844
        },
        "num_failing_tests": 4
    },
    {
        "name": "ExpressionDecomposer.decomposeSubExpressions#300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.decomposeSubExpressions(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.ExpressionDecomposer.DecompositionState)",
        "snippet": "  private void decomposeSubExpressions(\n      Node n, Node stopNode, DecompositionState state) {\n    if (n == null || n == stopNode) {\n      return;\n    }\n\n    // Never try to decompose an object literal key.\n    Preconditions.checkState(!NodeUtil.isObjectLitKey(n, n.getParent()));\n\n    // Decompose the children in reverse evaluation order.  This simplifies\n    // determining if the any of the children following have side-effects.\n    // If they do we need to be more aggressive about removing values\n    // from the expression.\n    decomposeSubExpressions(\n        n.getNext(), stopNode, state);\n\n    // Now this node.\n    // TODO(johnlenz): Move \"safety\" code to a shared class.\n    if (isExpressionTreeUnsafe(n, state.sideEffects)) {\n      // Either there were preexisting side-effects, or this node has\n      // side-effects.\n      state.sideEffects = true;\n      state.extractBeforeStatement = extractExpression(\n          n, state.extractBeforeStatement);\n    }\n  }\n",
        "begin_line": 300,
        "end_line": 325,
        "comment": "\n   * @param n The node with which to start iterating.\n   * @param stopNode A node after which to stop iterating.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0826
        },
        "num_failing_tests": 3
    },
    {
        "name": "ExpressionDecomposer.getTempConstantValueName#593",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.getTempConstantValueName()",
        "snippet": "  private String getTempConstantValueName(){\n    String name = tempNamePrefix + \"_const\"\n        + ContextualRenamer.UNIQUE_ID_SEPARATOR\n        + safeNameIdSupplier.get();\n    this.knownConstants.add(name);\n    return name;\n  }\n",
        "begin_line": 593,
        "end_line": 599,
        "comment": "\n   * Create a constant unique temp name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0826
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.addChildrenToFront#716",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildrenToFront(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildrenToFront(Node children) {\n    for (Node child = children; child != null; child = child.next) {\n      Preconditions.checkArgument(child.parent == null);\n      child.parent = this;\n    }\n    Node lastSib = children.getLastSibling();\n    lastSib.next = first;\n    first = children;\n    if (last == null) {\n      last = lastSib;\n    }\n  }\n",
        "begin_line": 716,
        "end_line": 727,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0816
        },
        "num_failing_tests": 6
    },
    {
        "name": "Node.isEquivalentTo#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.isEquivalentTo(com.google.javascript.rhino.Node, boolean, boolean)",
        "snippet": "    @Override\n    boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {\n      return (super.isEquivalentTo(node, compareJsType, recurse)\n          && getDouble() == ((NumberNode) node).getDouble());\n    }\n",
        "begin_line": 278,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0812
        },
        "num_failing_tests": 19
    },
    {
        "name": "InputId.equals#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    return id.equals(((InputId) obj).id);\n  }\n",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.077
        },
        "num_failing_tests": 6
    },
    {
        "name": "IRFactory.transformBlock#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformBlock(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "  private Node transformBlock(AstNode node) {\n    Node irNode = transform(node);\n    if (irNode.getType() != Token.BLOCK) {\n      if (irNode.getType() == Token.EMPTY) {\n        irNode.setType(Token.BLOCK);\n        irNode.setWasEmptyNode(true);\n      } else {\n        Node newBlock = newNode(Token.BLOCK, irNode);\n        newBlock.setLineno(irNode.getLineno());\n        newBlock.setCharno(irNode.getCharno());\n        maybeSetLengthFrom(newBlock, node);\n        irNode = newBlock;\n      }\n    }\n    return irNode;\n  }\n",
        "begin_line": 208,
        "end_line": 223,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0739
        },
        "num_failing_tests": 10
    },
    {
        "name": "InlineFunctions.setReferencesThis#873",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "signature": "com.google.javascript.jscomp.InlineFunctions.FunctionState.setReferencesThis(boolean)",
        "snippet": "    public void setReferencesThis(boolean referencesThis) {\n      this.referencesThis = referencesThis;\n    }\n",
        "begin_line": 873,
        "end_line": 875,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "ExpressionDecomposer.isExpressionTreeUnsafe#864",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.isExpressionTreeUnsafe(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private boolean isExpressionTreeUnsafe(\n      Node n, boolean followingSideEffectsExist) {\n    if (followingSideEffectsExist) {\n      // If the call to be inlined has side-effects, check to see if this\n      // expression tree can be affected by any side-effects.\n\n      // This is a superset of \"NodeUtil.mayHaveSideEffects\".\n      return NodeUtil.canBeSideEffected(n, this.knownConstants);\n    } else {\n      // The function called doesn't have side-effects but check to see if there\n      // are side-effects that that may affect it.\n      return NodeUtil.mayHaveSideEffects(n);\n    }\n  }\n",
        "begin_line": 864,
        "end_line": 877,
        "comment": "\n   * @return Whether anything in the expression tree prevents a call from\n   * being moved.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0689
        },
        "num_failing_tests": 4
    },
    {
        "name": "ExpressionDecomposer.exposeExpression#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.exposeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  void exposeExpression(Node expression) {\n    Node expressionRoot = findExpressionRoot(expression);\n    Preconditions.checkState(expressionRoot != null);\n    exposeExpression(expressionRoot, expression);\n    compiler.reportCodeChange();\n  }\n",
        "begin_line": 96,
        "end_line": 101,
        "comment": "\n   * Perform any rewriting necessary so that the specified expression\n   * is movable. This is a partial expression decomposition.\n   * @see #canExposeExpression\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0674
        },
        "num_failing_tests": 3
    },
    {
        "name": "ExpressionDecomposer.findNonconditionalParent#253",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ExpressionDecomposer.java",
        "class_name": "com.google.javascript.jscomp.ExpressionDecomposer",
        "signature": "com.google.javascript.jscomp.ExpressionDecomposer.findNonconditionalParent(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private static Node findNonconditionalParent(\n      Node subExpression, Node expressionRoot) {\n     Node result = subExpression;\n\n     for (Node child = subExpression, parent = child.getParent();\n          parent != expressionRoot;\n          child = parent, parent = child.getParent()) {\n       if (isConditionalOp(parent)) {\n         // Only the first child is always executed, if the function may never\n         // be called, don't inline it.\n         if (child != parent.getFirstChild()) {\n           result = parent;\n         }\n       }\n     }\n\n     return result;\n  }\n",
        "begin_line": 253,
        "end_line": 270,
        "comment": "\n   * @return \"expression\" or the node closest to \"expression\", that does not\n   * have a conditional ancestor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0674
        },
        "num_failing_tests": 3
    },
    {
        "name": "FunctionArgumentInjector.getUniqueAnonymousParameterName#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/FunctionArgumentInjector.java",
        "class_name": "com.google.javascript.jscomp.FunctionArgumentInjector",
        "signature": "com.google.javascript.jscomp.FunctionArgumentInjector.getUniqueAnonymousParameterName(com.google.common.base.Supplier<java.lang.String>)",
        "snippet": "  private static String getUniqueAnonymousParameterName(\n      Supplier<String> safeNameIdSupplier) {\n    return \"JSCompiler_inline_anon_param_\" + safeNameIdSupplier.get();\n  }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "\n   * Parameter names will be name unique when at a later time.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 2
    },
    {
        "name": "Node.addChildBefore#746",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildBefore(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildBefore(Node newChild, Node node) {\n    Preconditions.checkArgument(node != null,\n        \"The existing child node of the parent should not be null.\");\n    Preconditions.checkArgument(newChild.next == null,\n        \"The new child node has siblings.\");\n    Preconditions.checkArgument(newChild.parent == null,\n        \"The new child node already has a parent.\");\n    if (first == node) {\n      newChild.parent = this;\n      newChild.next = first;\n      first = newChild;\n      return;\n    }\n    Node prev = getChildBefore(node);\n    addChildAfter(newChild, prev);\n  }\n",
        "begin_line": 746,
        "end_line": 761,
        "comment": "\n   * Add 'child' before 'node'.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0613
        },
        "num_failing_tests": 12
    },
    {
        "name": "Node.tokenToName#1639",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.tokenToName(int)",
        "snippet": "  public static String tokenToName(int token) {\n    switch (token) {\n      case Token.ERROR:           return \"error\";\n      case Token.EOF:             return \"eof\";\n      case Token.EOL:             return \"eol\";\n      case Token.ENTERWITH:       return \"enterwith\";\n      case Token.LEAVEWITH:       return \"leavewith\";\n      case Token.RETURN:          return \"return\";\n      case Token.GOTO:            return \"goto\";\n      case Token.IFEQ:            return \"ifeq\";\n      case Token.IFNE:            return \"ifne\";\n      case Token.SETNAME:         return \"setname\";\n      case Token.BITOR:           return \"bitor\";\n      case Token.BITXOR:          return \"bitxor\";\n      case Token.BITAND:          return \"bitand\";\n      case Token.EQ:              return \"eq\";\n      case Token.NE:              return \"ne\";\n      case Token.LT:              return \"lt\";\n      case Token.LE:              return \"le\";\n      case Token.GT:              return \"gt\";\n      case Token.GE:              return \"ge\";\n      case Token.LSH:             return \"lsh\";\n      case Token.RSH:             return \"rsh\";\n      case Token.URSH:            return \"ursh\";\n      case Token.ADD:             return \"add\";\n      case Token.SUB:             return \"sub\";\n      case Token.MUL:             return \"mul\";\n      case Token.DIV:             return \"div\";\n      case Token.MOD:             return \"mod\";\n      case Token.BITNOT:          return \"bitnot\";\n      case Token.NEG:             return \"neg\";\n      case Token.NEW:             return \"new\";\n      case Token.DELPROP:         return \"delprop\";\n      case Token.TYPEOF:          return \"typeof\";\n      case Token.GETPROP:         return \"getprop\";\n      case Token.SETPROP:         return \"setprop\";\n      case Token.GETELEM:         return \"getelem\";\n      case Token.SETELEM:         return \"setelem\";\n      case Token.CALL:            return \"call\";\n      case Token.NAME:            return \"name\";\n      case Token.NUMBER:          return \"number\";\n      case Token.STRING:          return \"string\";\n      case Token.NULL:            return \"null\";\n      case Token.THIS:            return \"this\";\n      case Token.FALSE:           return \"false\";\n      case Token.TRUE:            return \"true\";\n      case Token.SHEQ:            return \"sheq\";\n      case Token.SHNE:            return \"shne\";\n      case Token.REGEXP:          return \"regexp\";\n      case Token.POS:             return \"pos\";\n      case Token.BINDNAME:        return \"bindname\";\n      case Token.THROW:           return \"throw\";\n      case Token.IN:              return \"in\";\n      case Token.INSTANCEOF:      return \"instanceof\";\n      case Token.GETVAR:          return \"getvar\";\n      case Token.SETVAR:          return \"setvar\";\n      case Token.TRY:             return \"try\";\n      case Token.TYPEOFNAME:      return \"typeofname\";\n      case Token.THISFN:          return \"thisfn\";\n      case Token.SEMI:            return \"semi\";\n      case Token.LB:              return \"lb\";\n      case Token.RB:              return \"rb\";\n      case Token.LC:              return \"lc\";\n      case Token.RC:              return \"rc\";\n      case Token.LP:              return \"lp\";\n      case Token.RP:              return \"rp\";\n      case Token.COMMA:           return \"comma\";\n      case Token.ASSIGN:          return \"assign\";\n      case Token.ASSIGN_BITOR:    return \"assign_bitor\";\n      case Token.ASSIGN_BITXOR:   return \"assign_bitxor\";\n      case Token.ASSIGN_BITAND:   return \"assign_bitand\";\n      case Token.ASSIGN_LSH:      return \"assign_lsh\";\n      case Token.ASSIGN_RSH:      return \"assign_rsh\";\n      case Token.ASSIGN_URSH:     return \"assign_ursh\";\n      case Token.ASSIGN_ADD:      return \"assign_add\";\n      case Token.ASSIGN_SUB:      return \"assign_sub\";\n      case Token.ASSIGN_MUL:      return \"assign_mul\";\n      case Token.ASSIGN_DIV:      return \"assign_div\";\n      case Token.ASSIGN_MOD:      return \"assign_mod\";\n      case Token.HOOK:            return \"hook\";\n      case Token.COLON:           return \"colon\";\n      case Token.OR:              return \"or\";\n      case Token.AND:             return \"and\";\n      case Token.INC:             return \"inc\";\n      case Token.DEC:             return \"dec\";\n      case Token.DOT:             return \"dot\";\n      case Token.FUNCTION:        return \"function\";\n      case Token.EXPORT:          return \"export\";\n      case Token.IMPORT:          return \"import\";\n      case Token.IF:              return \"if\";\n      case Token.ELSE:            return \"else\";\n      case Token.SWITCH:          return \"switch\";\n      case Token.CASE:            return \"case\";\n      case Token.DEFAULT:         return \"default\";\n      case Token.WHILE:           return \"while\";\n      case Token.DO:              return \"do\";\n      case Token.FOR:             return \"for\";\n      case Token.BREAK:           return \"break\";\n      case Token.CONTINUE:        return \"continue\";\n      case Token.VAR:             return \"var\";\n      case Token.WITH:            return \"with\";\n      case Token.CATCH:           return \"catch\";\n      case Token.FINALLY:         return \"finally\";\n      case Token.RESERVED:        return \"reserved\";\n      case Token.NOT:             return \"not\";\n      case Token.VOID:            return \"void\";\n      case Token.BLOCK:           return \"block\";\n      case Token.ARRAYLIT:        return \"arraylit\";\n      case Token.OBJECTLIT:       return \"objectlit\";\n      case Token.LABEL:           return \"label\";\n      case Token.TARGET:          return \"target\";\n      case Token.LOOP:            return \"loop\";\n      case Token.EXPR_VOID:       return \"expr_void\";\n      case Token.EXPR_RESULT:     return \"expr_result\";\n      case Token.JSR:             return \"jsr\";\n      case Token.SCRIPT:          return \"script\";\n      case Token.EMPTY:           return \"empty\";\n      case Token.GET_REF:         return \"get_ref\";\n      case Token.REF_SPECIAL:     return \"ref_special\";\n    }\n    return \"<unknown=\"+token+\">\";\n  }\n",
        "begin_line": 1639,
        "end_line": 1760,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0592
        },
        "num_failing_tests": 8
    },
    {
        "name": "IRFactory.newNode#1275",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2, Node child3) {\n    return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1275,
        "end_line": 1277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0578
        },
        "num_failing_tests": 6
    },
    {
        "name": "Node.Node#496",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node mid, Node right) {\n    Preconditions.checkArgument(left.parent == null);\n    Preconditions.checkArgument(left.next == null);\n    Preconditions.checkArgument(mid.parent == null);\n    Preconditions.checkArgument(mid.next == null);\n    Preconditions.checkArgument(right.parent == null);\n    Preconditions.checkArgument(right.next == null);\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = mid;\n    left.parent = this;\n    mid.next = right;\n    mid.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 496,
        "end_line": 514,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0566
        },
        "num_failing_tests": 6
    },
    {
        "name": "IRFactory.processKeywordLiteral#682",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral)",
        "snippet": "    @Override\n    Node processKeywordLiteral(KeywordLiteral literalNode) {\n      return newNode(transformTokenType(literalNode.getType()));\n    }\n",
        "begin_line": 682,
        "end_line": 685,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0564
        },
        "num_failing_tests": 9
    },
    {
        "name": "Node.setType#627",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setType(int)",
        "snippet": "  public void setType(int type) {\n    this.type = type;\n  }\n",
        "begin_line": 627,
        "end_line": 629,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.055
        },
        "num_failing_tests": 5
    },
    {
        "name": "NodeUtil.isVar#1539",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isVar(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isVar(Node n) {\n    return n.getType() == Token.VAR;\n  }\n",
        "begin_line": 1539,
        "end_line": 1541,
        "comment": "\n   * Is this a VAR node?\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0488
        },
        "num_failing_tests": 8
    },
    {
        "name": "AstValidator.validateChildless#596",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateChildless(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateChildless(Node n) {\n    validateChildCount(n, 0);\n  }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0486
        },
        "num_failing_tests": 8
    },
    {
        "name": "CodeGenerator.addArrayList#919",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addArrayList(com.google.javascript.rhino.Node)",
        "snippet": "  void addArrayList(Node firstInList) {\n    boolean lastWasEmpty = false;\n    for (Node n = firstInList; n != null; n = n.getNext()) {\n      if (n != firstInList) {\n        cc.listSeparator();\n      }\n      addExpr(n, 1);\n      lastWasEmpty = n.getType() == Token.EMPTY;\n    }\n\n    if (lastWasEmpty) {\n      cc.listSeparator();\n    }\n  }\n",
        "begin_line": 919,
        "end_line": 932,
        "comment": "\n   * This function adds a comma-separated list as is specified by an ARRAYLIT\n   * node with the associated skipIndexes array.  This is a space optimization\n   * since we avoid creating a whole Node object for each empty array literal\n   * slot.\n   * @param firstInList The first in the node list (chained through the next\n   * property).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 3
    },
    {
        "name": "AstValidator.validateArrayLit#659",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateArrayLit(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateArrayLit(Node n) {\n    validateNodeType(Token.ARRAYLIT, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      // EMPTY is allowed to represent empty slots.\n      validateOptionalExpression(c);\n    }\n  }\n",
        "begin_line": 659,
        "end_line": 665,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0465
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processArrayLiteral#411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processArrayLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral)",
        "snippet": "    @Override\n    Node processArrayLiteral(ArrayLiteral literalNode) {\n      if (literalNode.isDestructuring()) {\n        reportDestructuringAssign(literalNode);\n      }\n\n      Node node = newNode(Token.ARRAYLIT);\n      for (AstNode child : literalNode.getElements()) {\n        Node c = transform(child);\n        node.addChildToBack(c);\n      }\n      return node;\n    }\n",
        "begin_line": 411,
        "end_line": 423,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0458
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeConsumer.listSeparator#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.listSeparator()",
        "snippet": "  void listSeparator() {\n    add(\",\");\n    maybeLineBreak();\n  }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0439
        },
        "num_failing_tests": 6
    },
    {
        "name": "CodeConsumer.maybeLineBreak#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.maybeLineBreak()",
        "snippet": "  void maybeLineBreak() {\n    maybeCutLine();\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateTrinaryOp#754",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateTrinaryOp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateTrinaryOp(Node n) {\n    validateChildCount(n, 3);\n    Node first = n.getFirstChild();\n    validateExpression(first);\n    validateExpression(first.getNext());\n    validateExpression(n.getLastChild());\n  }\n",
        "begin_line": 754,
        "end_line": 760,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0432
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processConditionalExpression#514",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processConditionalExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression)",
        "snippet": "    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n",
        "begin_line": 514,
        "end_line": 521,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0394
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.isOneExactlyFunctionOrDo#839",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n      Node labeledStatement = n.getLastChild();\n      if (labeledStatement.getType() != Token.BLOCK) {\n        return isOneExactlyFunctionOrDo(labeledStatement);\n      } else {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs\n        // are skipped.\n        if (getNonEmptyChildCount(n, 2) == 1) {\n          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));\n        } else {\n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n          return false;\n        }\n      }\n    } else {\n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n    }\n  }\n",
        "begin_line": 839,
        "end_line": 859,
        "comment": "\n   * @return Whether the Node is a DO or FUNCTION (with or without\n   * labels).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 4
    },
    {
        "name": "CodeGenerator.getFirstNonEmptyChild#1117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(com.google.javascript.rhino.Node)",
        "snippet": "  private static Node getFirstNonEmptyChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.BLOCK) {\n        Node result = getFirstNonEmptyChild(c);\n        if (result != null) {\n          return result;\n        }\n      } else if (c.getType() != Token.EMPTY) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 1117,
        "end_line": 1129,
        "comment": " Gets the first non-empty child of the given node. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 4
    },
    {
        "name": "MakeDeclaredNamesUnique.handleScopeVar#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.handleScopeVar(com.google.javascript.jscomp.Scope.Var)",
        "snippet": "    void handleScopeVar(Var v) {\n      String name  = v.getName();\n      if (containsSeparator(name) && !getOrginalName(name).isEmpty()) {\n        String newName = findReplacementName(name);\n        referencedNames.remove(name);\n        // Adding a reference to the new name to prevent either the parent\n        // scopes or the current scope renaming another var to this new name.\n        referencedNames.add(newName);\n        List<Node> references = nameMap.get(name);\n        Preconditions.checkState(references != null);\n        for (Node n : references) {\n          Preconditions.checkState(n.getType() == Token.NAME);\n          n.setString(newName);\n        }\n        compiler.reportCodeChange();\n        nameMap.remove(name);\n      }\n    }\n",
        "begin_line": 335,
        "end_line": 352,
        "comment": "\n     * For the Var declared in the current scope determine if it is possible\n     * to revert the name to its orginal form without conflicting with other\n     * values.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.findReplacementName#357",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.findReplacementName(java.lang.String)",
        "snippet": "    private String findReplacementName(String name) {\n      String original = getOrginalName(name);\n      String newName = original;\n      int i = 0;\n      while (!isValidName(newName)) {\n        newName = original +\n            ContextualRenamer.UNIQUE_ID_SEPARATOR + String.valueOf(i++);\n      }\n      return newName;\n    }\n",
        "begin_line": 357,
        "end_line": 366,
        "comment": "\n     * Find a name usable in the local scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.isValidName#371",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.isValidName(java.lang.String)",
        "snippet": "    private boolean isValidName(String name) {\n      if (TokenStream.isJSIdentifier(name) &&\n          !referencedNames.contains(name) &&\n          !name.equals(ARGUMENTS)) {\n        return true;\n      }\n      return false;\n    }\n",
        "begin_line": 371,
        "end_line": 378,
        "comment": "\n     * @return Whether the name is valid to use in the local scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.visit#385",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node node, Node parent) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      if (NodeUtil.isReferenceName(node)) {\n        String name = node.getString();\n        // Add all referenced names to the set so it is possible to check for\n        // conflicts.\n        referencedNames.add(name);\n        // Store only references to candidate names in the node map.\n        if (containsSeparator(name)) {\n          addCandidateNameReference(name, node);\n        }\n      }\n    }\n",
        "begin_line": 385,
        "end_line": 401,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.addCandidateNameReference#403",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.addCandidateNameReference(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "    private void addCandidateNameReference(String name, Node n) {\n      List<Node> nodes = nameMap.get(name);\n      if (null == nodes) {\n        nodes = Lists.newLinkedList();\n        nameMap.put(name, nodes);\n      }\n      nodes.add(n);\n    }\n",
        "begin_line": 403,
        "end_line": 410,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0389
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processNewExpression#743",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNewExpression(com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression)",
        "snippet": "    @Override\n    Node processNewExpression(NewExpression exprNode) {\n      return processFunctionCall(exprNode);\n    }\n",
        "begin_line": 743,
        "end_line": 746,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0378
        },
        "num_failing_tests": 4
    },
    {
        "name": "NodeUtil.isVarOrSimpleAssignLhs#2089",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isVarOrSimpleAssignLhs(Node n, Node parent) {\n    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;\n  }\n",
        "begin_line": 2089,
        "end_line": 2092,
        "comment": "\n   * Determines whether this node is strictly on the left hand side of an assign\n   * or var initialization. Notably, this does not include all L-values, only\n   * statements where the node is used only as an L-value.\n   *\n   * @param n The node\n   * @param parent Parent of the node\n   * @return True if n is the left hand of an assign\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.034
        },
        "num_failing_tests": 5
    },
    {
        "name": "CodeConsumer.shouldPreserveExtraBlocks#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "signature": "com.google.javascript.jscomp.CodeConsumer.shouldPreserveExtraBlocks()",
        "snippet": "  boolean shouldPreserveExtraBlocks() {\n    return false;\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "\n   * If the body of a for loop or the then clause of an if statement has\n   * a single statement, should it be wrapped in a block?  Doing so can\n   * help when pretty-printing the code, and permits putting a debugging\n   * breakpoint on the statement inside the condition.\n   *\n   * @return {@boolean true} if such expressions should be wrapped\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0325
        },
        "num_failing_tests": 4
    },
    {
        "name": "IRFactory.processForLoop#573",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processForLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop)",
        "snippet": "    @Override\n    Node processForLoop(ForLoop loopNode) {\n      Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));\n      node.addChildToBack(transformBlock(loopNode.getBody()));\n      return node;\n    }\n",
        "begin_line": 573,
        "end_line": 582,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0308
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processElementGet#543",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processElementGet(com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet)",
        "snippet": "    @Override\n    Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n",
        "begin_line": 543,
        "end_line": 549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0293
        },
        "num_failing_tests": 3
    },
    {
        "name": "AstValidator.validateNew#381",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateNew(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateNew(Node n) {\n    validateNodeType(Token.NEW, n);\n    validateMinimumChildCount(n, 1);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateExpression(c);\n    }\n  }\n",
        "begin_line": 381,
        "end_line": 387,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0292
        },
        "num_failing_tests": 3
    },
    {
        "name": "SyntacticScopeCreator.onRedeclaration#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.DefaultRedeclarationHandler.onRedeclaration(com.google.javascript.jscomp.Scope, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "    @Override\n    public void onRedeclaration(\n        Scope s, String name, Node n, CompilerInput input) {\n      Node parent = n.getParent();\n\n      // Don't allow multiple variables to be declared at the top level scope\n      if (scope.isGlobal()) {\n        Scope.Var origVar = scope.getVar(name);\n        Node origParent = origVar.getParentNode();\n        if (origParent.getType() == Token.CATCH &&\n            parent.getType() == Token.CATCH) {\n          // Okay, both are 'catch(x)' variables.\n          return;\n        }\n\n        boolean allowDupe = hasDuplicateDeclarationSuppression(n, origVar);\n\n        if (!allowDupe) {\n          compiler.report(\n              JSError.make(NodeUtil.getSourceName(n), n,\n                           VAR_MULTIPLY_DECLARED_ERROR,\n                           name,\n                           (origVar.input != null\n                            ? origVar.input.getName()\n                            : \"??\")));\n        }\n      } else if (name.equals(ARGUMENTS) && !NodeUtil.isVarDeclaration(n)) {\n        // Disallow shadowing \"arguments\" as we can't handle with our current\n        // scope modeling.\n        compiler.report(\n            JSError.make(NodeUtil.getSourceName(n), n,\n                VAR_ARGUMENTS_SHADOWED_ERROR));\n      }\n    }\n",
        "begin_line": 192,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.getOrginalName#277",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(java.lang.String)",
        "snippet": "    public static String getOrginalName(String name) {\n      int index = indexOfSeparator(name);\n      return (index == -1) ? name : name.substring(0, index);\n    }\n",
        "begin_line": 277,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.indexOfSeparator#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.indexOfSeparator(java.lang.String)",
        "snippet": "    private static int indexOfSeparator(String name) {\n      return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);\n    }\n",
        "begin_line": 282,
        "end_line": 284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateVarOrOptionalExpression#423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateVarOrOptionalExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateVarOrOptionalExpression(Node n) {\n    if (n.getType() == Token.VAR) {\n      validateVar(n);\n    } else {\n      validateOptionalExpression(n);\n    }\n  }\n",
        "begin_line": 423,
        "end_line": 429,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.029
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.exitScope#307",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n        handleScopeVar(v);\n      }\n\n      // Merge any names that were referenced but not declared in the current\n      // scope.\n      Set<String> current = referencedNames;\n      referencedNames = referenceStack.pop();\n      // If there isn't anything left in the stack we will be going into the\n      // global scope: don't try to build a set of referenced names for the\n      // global scope.\n      if (!referenceStack.isEmpty()) {\n        referencedNames.addAll(current);\n      }\n    }\n",
        "begin_line": 307,
        "end_line": 328,
        "comment": "\n     * Rename vars for the current scope, and merge any referenced\n     * names into the parent scope reference set.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0282
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.containsSeparator#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.containsSeparator(java.lang.String)",
        "snippet": "    private boolean containsSeparator(String name) {\n      return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;\n    }\n",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0262
        },
        "num_failing_tests": 1
    },
    {
        "name": "AstValidator.validateOptionalExpression#588",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateOptionalExpression(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateOptionalExpression(Node n) {\n    if (n.getType() == Token.EMPTY) {\n      validateChildless(n);\n    } else {\n      validateExpression(n);\n    }\n  }\n",
        "begin_line": 588,
        "end_line": 594,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0259
        },
        "num_failing_tests": 2
    },
    {
        "name": "CodeGenerator.jsString#956",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.jsString(java.lang.String)",
        "snippet": "  String jsString(String s) {\n    int singleq = 0, doubleq = 0;\n\n    // could count the quotes and pick the optimal quote character\n    for (int i = 0; i < s.length(); i++) {\n      switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }\n    }\n\n    String doublequote, singlequote;\n    char quote;\n    if (singleq < doubleq) {\n      // more double quotes so escape the single quotes\n      quote = '\\'';\n      doublequote = \"\\\"\";\n      singlequote = \"\\\\\\'\";\n    } else {\n      // more single quotes so escape the doubles\n      quote = '\\\"';\n      doublequote = \"\\\\\\\"\";\n      singlequote = \"\\'\";\n    }\n\n    return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);\n  }\n",
        "begin_line": 956,
        "end_line": 983,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0247
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.strEscape#1005",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.strEscape(java.lang.String, char, java.lang.String, java.lang.String, java.lang.String, java.nio.charset.CharsetEncoder)",
        "snippet": "  static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }\n    }\n    sb.append(quote);\n    return sb.toString();\n  }\n",
        "begin_line": 1005,
        "end_line": 1075,
        "comment": " Helper to escape javascript string as well as regular expression ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0246
        },
        "num_failing_tests": 3
    },
    {
        "name": "AstValidator.validateString#637",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateString(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateString(Node n) {\n    validateNodeType(Token.STRING, n);\n    validateChildCount(n, 0);\n    try {\n      // Validate that getString doesn't throw\n      n.getString();\n    } catch (UnsupportedOperationException e) {\n      violation(\"Invalid STRING node.\", n);\n    }\n  }\n",
        "begin_line": 637,
        "end_line": 646,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0243
        },
        "num_failing_tests": 3
    },
    {
        "name": "CodeGenerator.addJsString#947",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "signature": "com.google.javascript.jscomp.CodeGenerator.addJsString(java.lang.String)",
        "snippet": "  void addJsString(String s) {\n    String cached = ESCAPED_JS_STRINGS.get(s);\n    if (cached == null) {\n      cached = jsString(s);\n      ESCAPED_JS_STRINGS.put(s, cached);\n    }\n    add(cached);\n  }\n",
        "begin_line": 947,
        "end_line": 954,
        "comment": " Outputs a js string, using the optimal (single/double) quote character ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0242
        },
        "num_failing_tests": 3
    },
    {
        "name": "AstValidator.validateGetProp#619",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateGetProp(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateGetProp(Node n) {\n    validateNodeType(Token.GETPROP, n);\n    validateChildCount(n, 2);\n    validateExpression(n.getFirstChild());\n    Node prop = n.getLastChild();\n    validateNodeType(Token.STRING, prop);\n    validateNonEmptyString(prop);\n  }\n",
        "begin_line": 619,
        "end_line": 626,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0239
        },
        "num_failing_tests": 6
    },
    {
        "name": "IRFactory.processPropertyGet#814",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processPropertyGet(com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet)",
        "snippet": "    @Override\n    Node processPropertyGet(PropertyGet getNode) {\n      return newNode(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));\n    }\n",
        "begin_line": 814,
        "end_line": 820,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.023
        },
        "num_failing_tests": 6
    },
    {
        "name": "IRFactory.processStringLiteral#854",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processStringLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral)",
        "snippet": "    @Override\n    Node processStringLiteral(StringLiteral literalNode) {\n      Node n = newStringNode(literalNode.getValue());\n      return n;\n    }\n",
        "begin_line": 854,
        "end_line": 858,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0229
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.transformAsString#396",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.transformAsString(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode)",
        "snippet": "    private Node transformAsString(AstNode n) {\n      Node ret;\n      if (n instanceof Name) {\n        ret = transformNameAsString((Name)n);\n      } else if (n instanceof NumberLiteral) {\n        ret = transformNumberAsString((NumberLiteral)n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      } else {\n        ret = transform(n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      }\n      Preconditions.checkState(ret.getType() == Token.STRING);\n      return ret;\n    }\n",
        "begin_line": 396,
        "end_line": 409,
        "comment": "\n     * Transforms the given node and then sets its type to Token.STRING if it\n     * was Token.NAME. If its type was already Token.STRING, then quotes it.\n     * Used for properties, as the old AST uses String tokens, while the new one\n     * uses Name tokens for unquoted strings. For example, in\n     * var o = {'a' : 1, b: 2};\n     * the string 'a' is quoted, while the name b is turned into a string, but\n     * unquoted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0227
        },
        "num_failing_tests": 6
    },
    {
        "name": "IRFactory.transformNameAsString#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformNameAsString(com.google.javascript.jscomp.mozilla.rhino.ast.Name)",
        "snippet": "  private Node transformNameAsString(Name node) {\n    Node irNode = transformDispatcher.processName(node, true);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 279,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0227
        },
        "num_failing_tests": 6
    },
    {
        "name": "IRFactory.newStringNode#1279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(java.lang.String)",
        "snippet": "  private Node newStringNode(String value) {\n    return Node.newString(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1279,
        "end_line": 1281,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0226
        },
        "num_failing_tests": 3
    },
    {
        "name": "Node.newString#607",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String)",
        "snippet": "  public static Node newString(String str) {\n    return new StringNode(Token.STRING, str);\n  }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0225
        },
        "num_failing_tests": 3
    },
    {
        "name": "IRFactory.processForInLoop#564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processForInLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop)",
        "snippet": "    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }\n",
        "begin_line": 564,
        "end_line": 571,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0205
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.enterScope#293",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      referenceStack.push(referencedNames);\n      referencedNames = Sets.newHashSet();\n    }\n",
        "begin_line": 293,
        "end_line": 301,
        "comment": "\n     * Prepare a set for the new scope.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0202
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getAncestor#1469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getAncestor(int)",
        "snippet": "  public Node getAncestor(int level) {\n    Preconditions.checkArgument(level >= 0);\n    Node node = this;\n    while (node != null && level-- > 0) {\n      node = node.getParent();\n    }\n    return node;\n  }\n",
        "begin_line": 1469,
        "end_line": 1476,
        "comment": "\n   * Gets the ancestor node relative to this.\n   *\n   * @param level 0 = this, 1 = the parent, etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0195
        },
        "num_failing_tests": 2
    },
    {
        "name": "Normalize.reportCodeChange#301",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "class_name": "com.google.javascript.jscomp.Normalize",
        "signature": "com.google.javascript.jscomp.Normalize.NormalizeStatements.reportCodeChange(java.lang.String)",
        "snippet": "    private void reportCodeChange(String changeDescription) {\n      if (assertOnChange) {\n        throw new IllegalStateException(\n            \"Normalize constraints violated:\\n\" + changeDescription);\n      }\n      compiler.reportCodeChange();\n    }\n",
        "begin_line": 301,
        "end_line": 307,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0183
        },
        "num_failing_tests": 3
    },
    {
        "name": "AstValidator.validateFor#404",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateFor(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateFor(Node n) {\n    validateNodeType(Token.FOR, n);\n    validateMinimumChildCount(n, 3);\n    validateMaximumChildCount(n, 4);\n    if (NodeUtil.isForIn(n)) {\n      // FOR-IN\n      validateChildCount(n, 3);\n      validateVarOrAssignmentTarget(n.getFirstChild());\n      validateExpression(n.getChildAtIndex(1));\n    } else {\n      // FOR\n      validateChildCount(n, 4);\n      validateVarOrOptionalExpression(n.getFirstChild());\n      validateOptionalExpression(n.getChildAtIndex(1));\n      validateOptionalExpression(n.getChildAtIndex(2));\n    }\n    validateBlock(n.getLastChild());\n  }\n",
        "begin_line": 404,
        "end_line": 421,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.ContextualRenameInverter#268",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.ContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private ContextualRenameInverter(AbstractCompiler compiler) {\n      this.compiler = compiler;\n    }\n",
        "begin_line": 268,
        "end_line": 270,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.process#272",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node js) {\n      NodeTraversal.traverse(compiler, js, this);\n    }\n",
        "begin_line": 272,
        "end_line": 275,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.shouldTraverse#380",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n",
        "begin_line": 380,
        "end_line": 383,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 1
    },
    {
        "name": "MakeDeclaredNamesUnique.getContextualRenameInverter#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static CompilerPass getContextualRenameInverter(AbstractCompiler compiler) {\n    return new ContextualRenameInverter(compiler);\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0141
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isReferenceName#1781",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isReferenceName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isReferenceName(Node n) {\n    return isName(n) && !n.getString().isEmpty();\n  }\n",
        "begin_line": 1781,
        "end_line": 1783,
        "comment": "\n   * @return Whether the name is a reference to a variable, function or\n   *       function parameter (not a label or a empty function expression name).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0123
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isOnlyModifiesThisCall#2458",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isOnlyModifiesThisCall()",
        "snippet": "  public boolean isOnlyModifiesThisCall() {\n    return areBitFlagsSet(\n        getSideEffectFlags() & Node.NO_SIDE_EFFECTS,\n        Node.FLAG_GLOBAL_STATE_UNMODIFIED\n            | Node.FLAG_ARGUMENTS_UNMODIFIED\n            | Node.FLAG_NO_THROWS);\n  }\n",
        "begin_line": 2458,
        "end_line": 2464,
        "comment": "\n   * @return Whether the only side-effect is \"modifies this\"\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0122
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isForIn#1612",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isForIn(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isForIn(Node n) {\n    return n.getType() == Token.FOR\n        && n.getChildCount() == 3;\n  }\n",
        "begin_line": 1612,
        "end_line": 1615,
        "comment": "\n   * @return Whether the node represents a FOR-IN loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0121
        },
        "num_failing_tests": 2
    },
    {
        "name": "AstValidator.validateObjectLit#667",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "signature": "com.google.javascript.jscomp.AstValidator.validateObjectLit(com.google.javascript.rhino.Node)",
        "snippet": "  private void validateObjectLit(Node n) {\n    validateNodeType(Token.OBJECTLIT, n);\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      validateObjectLitKey(c);\n    }\n  }\n",
        "begin_line": 667,
        "end_line": 672,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0104
        },
        "num_failing_tests": 2
    },
    {
        "name": "PrepareAst.normalizeObjectLiteralAnnotations#162",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.normalizeObjectLiteralAnnotations(com.google.javascript.rhino.Node)",
        "snippet": "    private void normalizeObjectLiteralAnnotations(Node objlit) {\n      Preconditions.checkState(objlit.getType() == Token.OBJECTLIT);\n      for (Node key = objlit.getFirstChild();\n           key != null; key = key.getNext()) {\n        Node value = key.getFirstChild();\n        normalizeObjectLiteralKeyAnnotations(objlit, key, value);\n      }\n    }\n",
        "begin_line": 162,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0102
        },
        "num_failing_tests": 2
    },
    {
        "name": "IRFactory.processObjectLiteral#753",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processObjectLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral)",
        "snippet": "    @Override\n    Node processObjectLiteral(ObjectLiteral literalNode) {\n      if (literalNode.isDestructuring()) {\n        reportDestructuringAssign(literalNode);\n      }\n\n      Node node = newNode(Token.OBJECTLIT);\n      for (ObjectProperty el : literalNode.getElements()) {\n        if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n          if (el.isGetter()) {\n            reportGetter(el);\n            continue;\n          } else if (el.isSetter()) {\n            reportSetter(el);\n            continue;\n          }\n        }\n\n        Node key = transformAsString(el.getLeft());\n        Node value = transform(el.getRight());\n        if (el.isGetter()) {\n          key.setType(Token.GET);\n          Preconditions.checkState(value.getType() == Token.FUNCTION);\n          if (getFnParamNode(value).hasChildren()) {\n            reportGetterParam(el.getLeft());\n          }\n        } else if (el.isSetter()) {\n          key.setType(Token.SET);\n          Preconditions.checkState(value.getType() == Token.FUNCTION);\n          if (!getFnParamNode(value).hasOneChild()) {\n            reportSetterParam(el.getLeft());\n          }\n        }\n        key.addChildToFront(value);\n        node.addChildToBack(key);\n      }\n      return node;\n    }\n",
        "begin_line": 753,
        "end_line": 790,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0102
        },
        "num_failing_tests": 2
    },
    {
        "name": "TokenStream.isJSIdentifier#314",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "class_name": "com.google.javascript.rhino.TokenStream",
        "signature": "com.google.javascript.rhino.TokenStream.isJSIdentifier(java.lang.String)",
        "snippet": "    public static boolean isJSIdentifier(String s) {\n        int length = s.length();\n\n        if (length == 0 || !Character.isJavaIdentifierStart(s.charAt(0)))\n            return false;\n\n        for (int i=1; i<length; i++) {\n            char c = s.charAt(i);\n            if (!Character.isJavaIdentifierPart(c)) {\n                if (c == '\\\\') {\n                    if (! ((i + 5) < length)\n                        && (s.charAt(i + 1) == 'u')\n                        && 0 <= Kit.xDigitToInt(s.charAt(i + 2), 0)\n                        && 0 <= Kit.xDigitToInt(s.charAt(i + 3), 0)\n                        && 0 <= Kit.xDigitToInt(s.charAt(i + 4), 0)\n                        && 0 <= Kit.xDigitToInt(s.charAt(i + 5), 0)) {\n                        return true;\n                     }\n                }\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n",
        "begin_line": 314,
        "end_line": 339,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0083
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getName#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.getName()",
        "snippet": "    @Override\n    public String getName() {\n      return name;\n    }\n",
        "begin_line": 147,
        "end_line": 150,
        "comment": "\n     * Gets the name of the variable.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0062
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getVars#576",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVars()",
        "snippet": "  public Iterator<Var> getVars() {\n    return vars.values().iterator();\n  }\n",
        "begin_line": 576,
        "end_line": 578,
        "comment": "\n   * Return an iterator over all of the variables declared in this scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0055
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#546",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, int, int)",
        "snippet": "  public Node(int nodeType, Node child, int lineno, int charno) {\n    this(nodeType, child);\n    sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 546,
        "end_line": 549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0055
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getQualifiedName#1938",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getQualifiedName()",
        "snippet": "  public String getQualifiedName() {\n    if (type == Token.NAME) {\n      return getString();\n    } else if (type == Token.GETPROP) {\n      String left = getFirstChild().getQualifiedName();\n      if (left == null) {\n        return null;\n      }\n      return left + \".\" + getLastChild().getString();\n    } else if (type == Token.THIS) {\n      return \"this\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 1938,
        "end_line": 1952,
        "comment": "\n   * This function takes a set of GETPROP nodes and produces a string that is\n   * each property separated by dots. If the node ultimately under the left\n   * sub-tree is not a simple name, this is not a valid qualified name.\n   *\n   * @return a null if this is not a qualified name, or a dot-separated string\n   *         of the name and properties.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0047
        },
        "num_failing_tests": 1
    }
]